{"home.repos.pwc.inspect_result.xueping_setor.None.data_graph_building.load_vocab": [[8, 20], ["collections.OrderedDict", "len", "open", "reader.readline", "token.strip.strip", "len"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "vocab", "[", "'PAD'", "]", "=", "len", "(", "vocab", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "len", "(", "vocab", ")", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.data_graph_building.tree_building": [[22, 223], ["print", "data_graph_building.load_vocab", "pickle.load", "set", "collections.OrderedDict", "open", "open.readline", "open.close", "len", "miss_set.remove", "print", "print", "dict", "open", "open.readline", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "dict", "five_map.items", "four_map.items", "three_map.items", "two_map.items", "dict.items", "collections.OrderedDict.keys", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "print", "open", "load_vocab.keys", "line.strip().split", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "set", "line.strip().split", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "new_seqs.append", "open", "open", "open", "open", "open", "open", "open", "open", "len", "len", "len", "hit_list.append", "icd9cms.icd9.search", "len", "[].strip", "len", "len", "len", "len", "len", "new_patient.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "line.strip", "str().split", "len", "[].strip", "len", "[].strip", "len", "[].strip", "line.strip", "len", "load_vocab.items", "new_visit.append", "len", "str"], "function", ["home.repos.pwc.inspect_result.xueping_setor.None.data_graph_building.load_vocab"], ["", "def", "tree_building", "(", "seqs_file", ",", "types_file", ",", "graph_file", ",", "out_file", ")", ":", "\n", "\n", "    ", "print", "(", "'Read Saved data dictionary'", ")", "\n", "types", "=", "load_vocab", "(", "types_file", ")", "\n", "seqs", "=", "pickle", ".", "load", "(", "open", "(", "seqs_file", ",", "'rb'", ")", ")", "\n", "\n", "start_set", "=", "set", "(", "types", ".", "keys", "(", ")", ")", "\n", "hit_list", "=", "[", "]", "\n", "code2desc", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "cat1count", "=", "0", "\n", "cat2count", "=", "0", "\n", "cat3count", "=", "0", "\n", "cat4count", "=", "0", "\n", "\n", "graph", "=", "open", "(", "graph_file", ",", "'r'", ")", "\n", "_", "=", "graph", ".", "readline", "(", ")", "\n", "\n", "# add ancestors to dictionary", "\n", "for", "line", "in", "graph", ":", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "icd9", "=", "tokens", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "cat1", "=", "tokens", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc1", "=", "'A_L1_'", "+", "cat1", "\n", "cat2", "=", "tokens", "[", "3", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc2", "=", "'A_L2_'", "+", "cat2", "\n", "cat3", "=", "tokens", "[", "5", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc3", "=", "'A_L3_'", "+", "cat3", "\n", "cat4", "=", "tokens", "[", "7", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc4", "=", "'A_L4_'", "+", "cat4", "\n", "\n", "icd9", "=", "'D_'", "+", "icd9", "\n", "\n", "if", "icd9", "not", "in", "types", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "hit_list", ".", "append", "(", "icd9", ")", "\n", "sr", "=", "search", "(", "icd9", "[", "2", ":", "]", ")", "\n", "if", "sr", "is", "not", "None", ":", "\n", "                ", "ds", "=", "str", "(", "sr", ")", ".", "split", "(", "':'", ")", "\n", "if", "ds", "[", "2", "]", "==", "'None'", ":", "\n", "                    ", "code2desc", "[", "icd9", "]", "=", "ds", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "code2desc", "[", "icd9", "]", "=", "ds", "[", "2", "]", "\n", "", "", "else", ":", "\n", "                ", "code2desc", "[", "icd9", "]", "=", "'[UNK]'", "\n", "\n", "", "", "if", "desc1", "not", "in", "types", ":", "\n", "            ", "cat1count", "+=", "1", "\n", "types", "[", "desc1", "]", "=", "len", "(", "types", ")", "\n", "desc", "=", "tokens", "[", "2", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "code2desc", "[", "desc1", "]", "=", "desc", "\n", "\n", "", "if", "len", "(", "cat2", ")", ">", "0", ":", "\n", "            ", "if", "desc2", "not", "in", "types", ":", "\n", "                ", "cat2count", "+=", "1", "\n", "types", "[", "desc2", "]", "=", "len", "(", "types", ")", "\n", "desc", "=", "tokens", "[", "4", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "code2desc", "[", "desc2", "]", "=", "desc", "\n", "", "", "if", "len", "(", "cat3", ")", ">", "0", ":", "\n", "            ", "if", "desc3", "not", "in", "types", ":", "\n", "                ", "cat3count", "+=", "1", "\n", "types", "[", "desc3", "]", "=", "len", "(", "types", ")", "\n", "desc", "=", "tokens", "[", "6", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "code2desc", "[", "desc3", "]", "=", "desc", "\n", "", "", "if", "len", "(", "cat4", ")", ">", "0", ":", "\n", "            ", "if", "desc4", "not", "in", "types", ":", "\n", "                ", "cat4count", "+=", "1", "\n", "types", "[", "desc4", "]", "=", "len", "(", "types", ")", "\n", "desc", "=", "tokens", "[", "8", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "code2desc", "[", "desc4", "]", "=", "desc", "\n", "", "", "", "graph", ".", "close", "(", ")", "\n", "\n", "# add root_code", "\n", "types", "[", "'A_ROOT'", "]", "=", "len", "(", "types", ")", "\n", "root_code", "=", "types", "[", "'A_ROOT'", "]", "\n", "code2desc", "[", "'A_ROOT'", "]", "=", "'[UNK]'", "\n", "\n", "miss_set", "=", "start_set", "-", "set", "(", "hit_list", ")", "\n", "miss_set", ".", "remove", "(", "'PAD'", ")", "# comment this line for GRAM and KAME, work for KEMCE", "\n", "print", "(", "'missing code: {}'", ".", "format", "(", "len", "(", "miss_set", ")", ")", ")", "\n", "print", "(", "cat1count", ",", "cat2count", ",", "cat3count", ",", "cat4count", ")", "\n", "\n", "five_map", "=", "{", "}", "\n", "four_map", "=", "{", "}", "\n", "three_map", "=", "{", "}", "\n", "two_map", "=", "{", "}", "\n", "one_map", "=", "dict", "(", "[", "(", "types", "[", "icd", "]", ",", "[", "types", "[", "icd", "]", ",", "root_code", "]", ")", "for", "icd", "in", "miss_set", "]", ")", "\n", "\n", "graph", "=", "open", "(", "graph_file", ",", "'r'", ")", "\n", "graph", ".", "readline", "(", ")", "\n", "\n", "for", "line", "in", "graph", ":", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "icd9", "=", "tokens", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "cat1", "=", "tokens", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc1", "=", "'A_L1_'", "+", "cat1", "\n", "cat2", "=", "tokens", "[", "3", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc2", "=", "'A_L2_'", "+", "cat2", "\n", "cat3", "=", "tokens", "[", "5", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc3", "=", "'A_L3_'", "+", "cat3", "\n", "cat4", "=", "tokens", "[", "7", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "desc4", "=", "'A_L4_'", "+", "cat4", "\n", "\n", "icd9", "=", "'D_'", "+", "icd9", "\n", "\n", "if", "icd9", "not", "in", "types", ":", "\n", "            ", "continue", "\n", "\n", "", "icd_code", "=", "types", "[", "icd9", "]", "\n", "\n", "if", "len", "(", "cat4", ")", ">", "0", ":", "\n", "            ", "code4", "=", "types", "[", "desc4", "]", "\n", "code3", "=", "types", "[", "desc3", "]", "\n", "code2", "=", "types", "[", "desc2", "]", "\n", "code1", "=", "types", "[", "desc1", "]", "\n", "five_map", "[", "icd_code", "]", "=", "[", "icd_code", ",", "root_code", ",", "code1", ",", "code2", ",", "code3", ",", "code4", "]", "\n", "", "elif", "len", "(", "cat3", ")", ">", "0", ":", "\n", "            ", "code3", "=", "types", "[", "desc3", "]", "\n", "code2", "=", "types", "[", "desc2", "]", "\n", "code1", "=", "types", "[", "desc1", "]", "\n", "four_map", "[", "icd_code", "]", "=", "[", "icd_code", ",", "root_code", ",", "code1", ",", "code2", ",", "code3", "]", "\n", "\n", "", "elif", "len", "(", "cat2", ")", ">", "0", ":", "\n", "            ", "code2", "=", "types", "[", "desc2", "]", "\n", "code1", "=", "types", "[", "desc1", "]", "\n", "three_map", "[", "icd_code", "]", "=", "[", "icd_code", ",", "root_code", ",", "code1", ",", "code2", "]", "\n", "\n", "", "else", ":", "\n", "            ", "code1", "=", "types", "[", "desc1", "]", "\n", "two_map", "[", "icd_code", "]", "=", "[", "icd_code", ",", "root_code", ",", "code1", "]", "\n", "\n", "# Now we re-map the integers to all medical leaf codes.", "\n", "", "", "new_five_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_four_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_three_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_two_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_one_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_types", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "new_code2desc", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "types_reverse", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "types", ".", "items", "(", ")", "]", ")", "\n", "\n", "code_count", "=", "0", "\n", "new_types", "[", "'PAD'", "]", "=", "code_count", "# comment this line for GRAM and KAME, work for KEMCE", "\n", "code_count", "+=", "1", "# comment this line for GRAM and KAME, work for KEMCE", "\n", "new_code2desc", "[", "'PAD'", "]", "=", "'[UNK]'", "\n", "for", "icdCode", ",", "ancestors", "in", "five_map", ".", "items", "(", ")", ":", "\n", "        ", "new_types", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code_count", "\n", "new_five_map", "[", "code_count", "]", "=", "[", "code_count", "]", "+", "ancestors", "[", "1", ":", "]", "\n", "code_count", "+=", "1", "\n", "new_code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "\n", "\n", "", "for", "icdCode", ",", "ancestors", "in", "four_map", ".", "items", "(", ")", ":", "\n", "        ", "code", "=", "types_reverse", "[", "icdCode", "]", "\n", "# print(code)", "\n", "new_types", "[", "code", "]", "=", "code_count", "\n", "new_four_map", "[", "code_count", "]", "=", "[", "code_count", "]", "+", "ancestors", "[", "1", ":", "]", "\n", "code_count", "+=", "1", "\n", "new_code2desc", "[", "code", "]", "=", "code2desc", "[", "code", "]", "\n", "\n", "", "for", "icdCode", ",", "ancestors", "in", "three_map", ".", "items", "(", ")", ":", "\n", "        ", "new_types", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code_count", "\n", "new_three_map", "[", "code_count", "]", "=", "[", "code_count", "]", "+", "ancestors", "[", "1", ":", "]", "\n", "code_count", "+=", "1", "\n", "new_code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "\n", "\n", "", "for", "icdCode", ",", "ancestors", "in", "two_map", ".", "items", "(", ")", ":", "\n", "        ", "new_types", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code_count", "\n", "new_two_map", "[", "code_count", "]", "=", "[", "code_count", "]", "+", "ancestors", "[", "1", ":", "]", "\n", "code_count", "+=", "1", "\n", "new_code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "\n", "\n", "", "for", "icdCode", ",", "ancestors", "in", "one_map", ".", "items", "(", ")", ":", "\n", "        ", "new_types", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code_count", "\n", "new_one_map", "[", "code_count", "]", "=", "[", "code_count", "]", "+", "ancestors", "[", "1", ":", "]", "\n", "code_count", "+=", "1", "\n", "new_code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "=", "code2desc", "[", "types_reverse", "[", "icdCode", "]", "]", "\n", "\n", "", "for", "code", "in", "code2desc", ".", "keys", "(", ")", ":", "\n", "        ", "if", "code", "not", "in", "new_code2desc", ":", "\n", "            ", "new_code2desc", "[", "code", "]", "=", "code2desc", "[", "code", "]", "\n", "\n", "", "", "new_seqs", "=", "[", "]", "\n", "for", "patient", "in", "seqs", ":", "\n", "        ", "new_patient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "new_visit", "=", "[", "]", "\n", "for", "code", "in", "visit", ":", "\n", "                ", "new_visit", ".", "append", "(", "new_types", "[", "code", "]", ")", "\n", "", "new_patient", ".", "append", "(", "new_visit", ")", "\n", "", "new_seqs", ".", "append", "(", "new_patient", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "new_five_map", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'level5.pk'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_four_map", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'level4.pk'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_three_map", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'level3.pk'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_two_map", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'level2.pk'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_one_map", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'level1.pk'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_types", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'inputs.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_seqs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'inputs.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_code2desc", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'code2desc.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "print", "(", "len", "(", "new_types", ")", ",", "len", "(", "new_seqs", ")", ",", "len", "(", "new_code2desc", ")", ",", "ancestors", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.data_eicu_processing.processing_for_dx": [[8, 182], ["pandas.read_csv", "pandas.read_csv", "datasets.LabelsForData", "pd.read_csv.uniquepid.value_counts", "pat_vc[].index.tolist", "print", "print", "pid_adm_map.items", "print", "print", "print", "print", "print", "enumerate", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "open", "sorted_vocab.items", "open.close", "pickle.dump", "pickle.dump", "pickle.dump", "print", "[].tolist", "new_seqs_str.append", "adm_dx_ccs.append", "adm_dx_ccs_cat1.append", "new_seqs_ccs.append", "new_seqs_ccs_cat1.append", "labels_visit_cat1.append", "inputs_all.append", "labels_ccs.append", "labels_next_visit.append", "open", "open", "open", "open", "open", "open", "open.write", "open", "open", "open", "len", "len", "len", "len", "pd.read_csv.icd9code.notnull", "diags.iterrows", "len", "seqs.append", "len", "new_seqs.append", "seq_ls.append", "dx_ccs_ls.append", "dx_ccs_cat1_ls.append", "set", "new_patient.append", "set", "new_patient.append", "sorted", "len", "len", "row.icd9code.split", "len", "seq.append", "len", "set", "new_adm.append", "dx_ccs.append", "dx_ccs_cat1.append", "vocab_set.items", "len", "len", "pats_adm.sort_values", "len", "[].isdigit", "[].isdigit", "[].isdigit", "len", "new_seq.append", "new_visit.append", "len", "new_visit.append", "new_visit.append", "len", "new_visit.append", "code_list.append", "code_list.append", "code_list.append", "list", "codes[].replace", "codes[].replace", "codes[].replace"], "function", ["None"], ["def", "processing_for_dx", "(", "pats_file", ",", "dx_file", ",", "single_dx_file", ",", "multi_dx_file", ",", "out_file", ")", ":", "\n", "    ", "dxes", "=", "pd", ".", "read_csv", "(", "dx_file", ",", "header", "=", "0", ")", "\n", "pats", "=", "pd", ".", "read_csv", "(", "pats_file", ",", "header", "=", "0", ")", "\n", "label4data", "=", "LabelsForData", "(", "multi_dx_file", ",", "single_dx_file", ")", "\n", "\n", "# unique patient:count", "\n", "pat_vc", "=", "pats", ".", "uniquepid", ".", "value_counts", "(", ")", "\n", "\n", "# patients whose admission number is at least 2", "\n", "pat_two_plus", "=", "pat_vc", "[", "pat_vc", ">", "1", "]", ".", "index", ".", "tolist", "(", ")", "\n", "\n", "# pid mapping admission list", "\n", "print", "(", "'pid mapping admission list'", ")", "\n", "pid_adm_map", "=", "{", "}", "\n", "for", "pid", "in", "pat_two_plus", ":", "\n", "        ", "pats_adm", "=", "pats", "[", "pats", ".", "uniquepid", "==", "pid", "]", "\n", "sorted_adms", "=", "pats_adm", ".", "sort_values", "(", "by", "=", "[", "'hospitaldischargeyear'", ",", "'hospitaladmitoffset'", "]", ",", "\n", "ascending", "=", "[", "True", ",", "False", "]", ")", "[", "'patientunitstayid'", "]", ".", "tolist", "(", ")", "\n", "pid_adm_map", "[", "pid", "]", "=", "sorted_adms", "\n", "\n", "# filter null in icc9code field", "\n", "", "dxes", "=", "dxes", "[", "dxes", ".", "icd9code", ".", "notnull", "(", ")", "]", "\n", "\n", "# Building Building strSeqs", "\n", "print", "(", "'Building Building strSeqs'", ")", "\n", "seqs", "=", "[", "]", "\n", "for", "pid", ",", "adms", "in", "pid_adm_map", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "for", "adm", "in", "adms", ":", "\n", "            ", "code_list", "=", "[", "]", "\n", "diags", "=", "dxes", "[", "dxes", ".", "patientunitstayid", "==", "adm", "]", "\n", "for", "index", ",", "row", "in", "diags", ".", "iterrows", "(", ")", ":", "\n", "                ", "codes", "=", "row", ".", "icd9code", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "codes", ")", "==", "2", ":", "\n", "# if the first letter is digit, it is icd9 code", "\n", "                    ", "if", "codes", "[", "0", "]", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "                        ", "code_list", ".", "append", "(", "codes", "[", "0", "]", ".", "replace", "(", "'.'", ",", "''", ")", ")", "\n", "", "if", "codes", "[", "1", "]", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "                        ", "code_list", ".", "append", "(", "codes", "[", "0", "]", ".", "replace", "(", "'.'", ",", "''", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "codes", "[", "0", "]", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "                        ", "code_list", ".", "append", "(", "codes", "[", "0", "]", ".", "replace", "(", "'.'", ",", "''", ")", ")", "\n", "", "", "", "if", "len", "(", "code_list", ")", ">", "0", ":", "\n", "                ", "seq", ".", "append", "(", "code_list", ")", "\n", "", "", "if", "len", "(", "seq", ")", ">", "1", ":", "\n", "            ", "seqs", ".", "append", "(", "seq", ")", "\n", "\n", "# Building Building new strSeqs, which filters the admission with only one diagnosis code", "\n", "", "", "print", "(", "'Building Building new strSeqs, which filters the admission with only one diagnosis code'", ")", "\n", "new_seqs", "=", "[", "]", "\n", "for", "seq", "in", "seqs", ":", "\n", "        ", "new_seq", "=", "[", "]", "\n", "for", "adm", "in", "seq", ":", "\n", "            ", "if", "len", "(", "adm", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "code_set", "=", "set", "(", "adm", ")", "\n", "if", "len", "(", "code_set", ")", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "new_seq", ".", "append", "(", "list", "(", "code_set", ")", ")", "\n", "", "", "", "if", "len", "(", "new_seq", ")", ">", "1", ":", "\n", "            ", "new_seqs", ".", "append", "(", "new_seq", ")", "\n", "\n", "# Building strSeqs, and string labels", "\n", "", "", "print", "(", "'Building strSeqs, and string labels'", ")", "\n", "new_seqs_str", "=", "[", "]", "\n", "adm_dx_ccs", "=", "[", "]", "\n", "adm_dx_ccs_cat1", "=", "[", "]", "\n", "for", "seq", "in", "new_seqs", ":", "\n", "        ", "seq_ls", "=", "[", "]", "\n", "dx_ccs_ls", "=", "[", "]", "\n", "dx_ccs_cat1_ls", "=", "[", "]", "\n", "for", "adm", "in", "seq", ":", "\n", "            ", "new_adm", "=", "[", "]", "\n", "dx_ccs", "=", "[", "]", "\n", "dx_ccs_cat1", "=", "[", "]", "\n", "for", "dx", "in", "adm", ":", "\n", "                ", "dxStr", "=", "'D_'", "+", "dx", "\n", "dxStr_ccs_single", "=", "'D_'", "+", "label4data", ".", "code2single_dx", "[", "dx", "]", "\n", "dxStr_ccs_cat1", "=", "'D_'", "+", "label4data", ".", "code2first_level_dx", "[", "dx", "]", "\n", "new_adm", ".", "append", "(", "dxStr", ")", "\n", "dx_ccs", ".", "append", "(", "dxStr_ccs_single", ")", "\n", "dx_ccs_cat1", ".", "append", "(", "dxStr_ccs_cat1", ")", "\n", "", "seq_ls", ".", "append", "(", "new_adm", ")", "\n", "dx_ccs_ls", ".", "append", "(", "dx_ccs", ")", "\n", "dx_ccs_cat1_ls", ".", "append", "(", "dx_ccs_cat1", ")", "\n", "", "new_seqs_str", ".", "append", "(", "seq_ls", ")", "\n", "adm_dx_ccs", ".", "append", "(", "dx_ccs_ls", ")", "\n", "adm_dx_ccs_cat1", ".", "append", "(", "dx_ccs_cat1_ls", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs single-level code'", ")", "\n", "dict_ccs", "=", "{", "}", "\n", "new_seqs_ccs", "=", "[", "]", "\n", "for", "patient", "in", "adm_dx_ccs", ":", "\n", "        ", "new_patient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "new_visit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs", ":", "\n", "                    ", "new_visit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs", "[", "code", "]", "=", "len", "(", "dict_ccs", ")", "\n", "new_visit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "", "new_patient", ".", "append", "(", "new_visit", ")", "\n", "", "new_seqs_ccs", ".", "append", "(", "new_patient", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs multi-level first level code'", ")", "\n", "dict_ccs_cat1", "=", "{", "}", "\n", "new_seqs_ccs_cat1", "=", "[", "]", "\n", "for", "patient", "in", "adm_dx_ccs_cat1", ":", "\n", "        ", "new_patient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "new_visit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs_cat1", ":", "\n", "                    ", "new_visit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs_cat1", "[", "code", "]", "=", "len", "(", "dict_ccs_cat1", ")", "\n", "new_visit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "", "new_patient", ".", "append", "(", "new_visit", ")", "\n", "", "new_seqs_ccs_cat1", ".", "append", "(", "new_patient", ")", "\n", "\n", "", "print", "(", "'Converting seqs to model inputs'", ")", "\n", "inputs_all", "=", "[", "]", "\n", "labels_ccs", "=", "[", "]", "\n", "labels_next_visit", "=", "[", "]", "\n", "labels_visit_cat1", "=", "[", "]", "\n", "vocab_set", "=", "{", "}", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "new_seqs_str", ")", ":", "\n", "\n", "        ", "last_seqs", "=", "seq", "\n", "last_seq_ccs", "=", "new_seqs_ccs", "[", "i", "]", "\n", "last_seq_ccs_cat1", "=", "new_seqs_ccs_cat1", "[", "i", "]", "\n", "\n", "valid_seq", "=", "last_seqs", "[", ":", "-", "1", "]", "\n", "\n", "labels_visit_cat1", ".", "append", "(", "last_seq_ccs_cat1", "[", ":", "-", "1", "]", ")", "\n", "inputs_all", ".", "append", "(", "valid_seq", ")", "\n", "labels_ccs", ".", "append", "(", "last_seq_ccs", "[", "-", "1", "]", ")", "\n", "labels_next_visit", ".", "append", "(", "last_seq_ccs", "[", "1", ":", "]", ")", "\n", "\n", "for", "visit", "in", "valid_seq", ":", "\n", "            ", "for", "code", "in", "visit", ":", "\n", "                ", "if", "code", "in", "vocab_set", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "=", "1", "\n", "\n", "", "", "", "", "sorted_vocab", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "vocab_set", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "pickle", ".", "dump", "(", "inputs_all", ",", "open", "(", "out_file", "+", "'inputs_all.seqs'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_ccs", ",", "open", "(", "out_file", "+", "'labels_ccs.label'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_next_visit", ",", "open", "(", "out_file", "+", "'labels_next_visit.label'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_visit_cat1", ",", "open", "(", "out_file", "+", "'labels_visit_cat1.label'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs", ",", "open", "(", "out_file", "+", "'ccs_single_level.dict'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs_cat1", ",", "open", "(", "out_file", "+", "'ccs_cat1.dict'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "outfd", "=", "open", "(", "out_file", "+", "'.vocab.txt'", ",", "'w'", ")", "\n", "for", "k", ",", "v", "in", "sorted_vocab", ".", "items", "(", ")", ":", "\n", "        ", "outfd", ".", "write", "(", "k", "+", "'\\n'", ")", "\n", "", "outfd", ".", "close", "(", ")", "\n", "\n", "pickle", ".", "dump", "(", "new_seqs_str", ",", "open", "(", "out_file", "+", "'origin.seqs'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_seqs_ccs", ",", "open", "(", "out_file", "+", "'origin_ccs.seqs'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "new_seqs_ccs_cat1", ",", "open", "(", "out_file", "+", "'origin_ccs_cat1.seqs'", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "\n", "max_seq_len", "=", "0", "\n", "max_adm_len", "=", "0", "\n", "for", "seq", "in", "new_seqs", ":", "\n", "        ", "if", "max_seq_len", "<", "len", "(", "seq", ")", ":", "\n", "            ", "max_seq_len", "=", "len", "(", "seq", ")", "\n", "", "for", "adm", "in", "seq", ":", "\n", "            ", "if", "max_adm_len", "<", "len", "(", "adm", ")", ":", "\n", "                ", "max_adm_len", "=", "len", "(", "adm", ")", "\n", "", "", "", "print", "(", "max_adm_len", ",", "max_seq_len", ",", "len", "(", "dict_ccs", ")", ",", "len", "(", "inputs_all", ")", ",", "len", "(", "sorted_vocab", ")", ",", "len", "(", "dict_ccs_cat1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.data_mimic4_processing.mimic_processing": [[9, 233], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pd.read_csv.iterrows", "datasets.data_labelling.LabelsForData", "print", "pd.read_csv.iterrows", "print", "pd.read_csv.iterrows", "print", "pidAdmMap.items", "print", "pidSeqMap.items", "print", "pidSeqMap_ccs.items", "print", "print", "pidSeqMap_ccs_cat1.items", "print", "print", "enumerate", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "open", "sorted_vocab.items", "open.close", "print", "int", "int", "datetime.datetime.strptime", "int", "row.icd_code.strip", "sorted", "sorted", "sorted", "enumerate", "seqs.append", "seqs_span.append", "seqs_intervals.append", "seqs_ccs.append", "newSeqs_ccs.append", "seqs_ccs_cat1.append", "newSeqs_ccs_cat1.append", "len", "labels_current_visit.append", "labels_next_visit.append", "labels_visit_cat1.append", "inputs_all.append", "labels_ccs.append", "intervals_all.append", "open", "open", "open", "open", "open", "open", "open", "open", "open", "open", "open", "os.path.join", "open.write", "len", "len", "len", "len", "pidAdmMap[].append", "len", "admDxMap[].append", "admDxMap_ccs[].append", "admDxMap_ccs_cat1[].append", "len", "seq.append", "spans.append", "intervals.append", "seq.append", "set", "newPatient.append", "seq.append", "set", "newPatient.append", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "new_admIdList.append", "len", "len", "vocab_set.items", "newVisit.append", "len", "newVisit.append", "newVisit.append", "len", "newVisit.append"], "function", ["None"], ["def", "mimic_processing", "(", "adm_file", ",", "dx_file", ",", "icd10toicd9_file", ",", "single_dx_file", ",", "multi_dx_file", ",", "out_file", ")", ":", "\n", "\n", "    ", "adms_df", "=", "pd", ".", "read_csv", "(", "adm_file", ",", "compression", "=", "'gzip'", ",", "header", "=", "0", ",", "sep", "=", "','", ")", "\n", "dx_df", "=", "pd", ".", "read_csv", "(", "dx_file", ",", "compression", "=", "'gzip'", ",", "header", "=", "0", ",", "sep", "=", "','", ")", "\n", "icd10cmtoicd9gem_df", "=", "pd", ".", "read_csv", "(", "icd10toicd9_file", ",", "header", "=", "0", ",", "sep", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "\n", "icd10cmtoicd9", "=", "{", "}", "\n", "for", "index", ",", "row", "in", "icd10cmtoicd9gem_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "icd10cmtoicd9", "[", "row", ".", "icd10cm", "]", "=", "row", ".", "icd9cm", "\n", "", "label4data", "=", "LabelsForData", "(", "multi_dx_file", ",", "single_dx_file", ")", "\n", "\n", "print", "(", "'Building pid-admission mapping, admission-date mapping'", ")", "\n", "pidAdmMap", "=", "{", "}", "\n", "admDateMap", "=", "{", "}", "\n", "for", "index", ",", "row", "in", "adms_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "pid", "=", "int", "(", "row", ".", "subject_id", ")", "\n", "admId", "=", "int", "(", "row", ".", "hadm_id", ")", "\n", "admTime", "=", "datetime", ".", "strptime", "(", "row", ".", "admittime", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "admDateMap", "[", "admId", "]", "=", "admTime", "\n", "if", "pid", "in", "pidAdmMap", ":", "\n", "            ", "pidAdmMap", "[", "pid", "]", ".", "append", "(", "admId", ")", "\n", "", "else", ":", "\n", "            ", "pidAdmMap", "[", "pid", "]", "=", "[", "admId", "]", "\n", "\n", "", "", "print", "(", "'Building admission-dxList mapping'", ")", "\n", "admDxMap", "=", "{", "}", "\n", "admDxMap_ccs", "=", "{", "}", "\n", "admDxMap_ccs_cat1", "=", "{", "}", "\n", "\n", "for", "index", ",", "row", "in", "dx_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "admId", "=", "int", "(", "row", ".", "hadm_id", ")", "\n", "dx", "=", "row", ".", "icd_code", ".", "strip", "(", ")", "\n", "if", "len", "(", "dx", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# convert ICD10CM to ICD9CM", "\n", "", "if", "row", ".", "icd_version", "==", "10", ":", "\n", "            ", "if", "dx", "in", "icd10cmtoicd9", ":", "\n", "                ", "dx", "=", "icd10cmtoicd9", "[", "dx", "]", "\n", "if", "dx", "==", "'NoDx'", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "dxStr", "=", "'D_'", "+", "dx", "\n", "dxStr_ccs_single", "=", "'D_'", "+", "label4data", ".", "code2single_dx", "[", "dx", "]", "\n", "dxStr_ccs_cat1", "=", "'D_'", "+", "label4data", ".", "code2first_level_dx", "[", "dx", "]", "\n", "\n", "if", "admId", "in", "admDxMap", ":", "\n", "            ", "admDxMap", "[", "admId", "]", ".", "append", "(", "dxStr", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap", "[", "admId", "]", "=", "[", "dxStr", "]", "\n", "\n", "", "if", "admId", "in", "admDxMap_ccs", ":", "\n", "            ", "admDxMap_ccs", "[", "admId", "]", ".", "append", "(", "dxStr_ccs_single", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap_ccs", "[", "admId", "]", "=", "[", "dxStr_ccs_single", "]", "\n", "\n", "", "if", "admId", "in", "admDxMap_ccs_cat1", ":", "\n", "            ", "admDxMap_ccs_cat1", "[", "admId", "]", ".", "append", "(", "dxStr_ccs_cat1", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap_ccs_cat1", "[", "admId", "]", "=", "[", "dxStr_ccs_cat1", "]", "\n", "\n", "", "", "print", "(", "'Building pid-sortedVisits mapping'", ")", "\n", "pidSeqMap", "=", "{", "}", "\n", "pidSeqMap_ccs", "=", "{", "}", "\n", "pidSeqMap_ccs_cat1", "=", "{", "}", "\n", "for", "pid", ",", "admIdList", "in", "pidAdmMap", ".", "items", "(", ")", ":", "\n", "        ", "new_admIdList", "=", "[", "]", "\n", "for", "admId", "in", "admIdList", ":", "\n", "            ", "if", "admId", "in", "admDxMap", ":", "\n", "                ", "new_admIdList", ".", "append", "(", "admId", ")", "\n", "", "", "if", "len", "(", "new_admIdList", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "# print(admIdList)", "\n", "", "sortedList", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap", "[", "pid", "]", "=", "sortedList", "\n", "\n", "sortedList_ccs", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap_ccs", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap_ccs", "[", "pid", "]", "=", "sortedList_ccs", "\n", "\n", "sortedList_ccs_cat1", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap_ccs_cat1", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap_ccs_cat1", "[", "pid", "]", "=", "sortedList_ccs_cat1", "\n", "\n", "", "print", "(", "'Building strSeqs, span label'", ")", "\n", "seqs", "=", "[", "]", "\n", "seqs_span", "=", "[", "]", "\n", "seqs_intervals", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "spans", "=", "[", "]", "\n", "intervals", "=", "[", "]", "\n", "first_time", "=", "visits", "[", "0", "]", "[", "0", "]", "\n", "for", "i", ",", "visit", "in", "enumerate", "(", "visits", ")", ":", "\n", "            ", "current_time", "=", "visit", "[", "0", "]", "\n", "interval", "=", "(", "current_time", "-", "first_time", ")", ".", "days", "\n", "first_time", "=", "current_time", "\n", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "span_flag", "=", "0", "if", "interval", "<=", "30", "else", "1", "\n", "spans", ".", "append", "(", "span_flag", ")", "\n", "intervals", ".", "append", "(", "interval", ")", "\n", "", "seqs", ".", "append", "(", "seq", ")", "\n", "seqs_span", ".", "append", "(", "spans", ")", "\n", "seqs_intervals", ".", "append", "(", "intervals", ")", "\n", "\n", "", "print", "(", "'Building strSeqs for CCS single-level code'", ")", "\n", "seqs_ccs", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap_ccs", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "for", "visit", "in", "visits", ":", "\n", "            ", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "", "seqs_ccs", ".", "append", "(", "seq", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs single-level code'", ")", "\n", "dict_ccs", "=", "{", "}", "\n", "newSeqs_ccs", "=", "[", "]", "\n", "for", "patient", "in", "seqs_ccs", ":", "\n", "        ", "newPatient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "newVisit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs", ":", "\n", "                    ", "newVisit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs", "[", "code", "]", "=", "len", "(", "dict_ccs", ")", "\n", "newVisit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "", "newPatient", ".", "append", "(", "newVisit", ")", "\n", "", "newSeqs_ccs", ".", "append", "(", "newPatient", ")", "\n", "\n", "", "print", "(", "'Building strSeqs for CCS multi-level first code'", ")", "\n", "seqs_ccs_cat1", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap_ccs_cat1", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "for", "visit", "in", "visits", ":", "\n", "            ", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "", "seqs_ccs_cat1", ".", "append", "(", "seq", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs multi-level first level code'", ")", "\n", "dict_ccs_cat1", "=", "{", "}", "\n", "newSeqs_ccs_cat1", "=", "[", "]", "\n", "for", "patient", "in", "seqs_ccs_cat1", ":", "\n", "        ", "newPatient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "newVisit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs_cat1", ":", "\n", "                    ", "newVisit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs_cat1", "[", "code", "]", "=", "len", "(", "dict_ccs_cat1", ")", "\n", "newVisit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "", "newPatient", ".", "append", "(", "newVisit", ")", "\n", "", "newSeqs_ccs_cat1", ".", "append", "(", "newPatient", ")", "\n", "\n", "", "print", "(", "'Converting seqs to model inputs'", ")", "\n", "inputs_all", "=", "[", "]", "\n", "labels_ccs", "=", "[", "]", "\n", "intervals_all", "=", "[", "]", "\n", "labels_current_visit", "=", "[", "]", "\n", "labels_next_visit", "=", "[", "]", "\n", "labels_visit_cat1", "=", "[", "]", "\n", "vocab_set", "=", "{", "}", "\n", "max_visit_len", "=", "0", "\n", "max_seqs_len", "=", "0", "\n", "truncated_len", "=", "21", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "length", "=", "len", "(", "seq", ")", "\n", "\n", "if", "length", ">=", "truncated_len", ":", "\n", "            ", "last_seqs", "=", "seq", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_spans", "=", "seqs_span", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_ccs", "=", "newSeqs_ccs", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_ccs_cat1", "=", "newSeqs_ccs_cat1", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_intervals", "=", "seqs_intervals", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "last_seqs", "=", "seq", "\n", "last_spans", "=", "seqs_span", "[", "i", "]", "\n", "last_seq_ccs", "=", "newSeqs_ccs", "[", "i", "]", "\n", "last_seq_ccs_cat1", "=", "newSeqs_ccs_cat1", "[", "i", "]", "\n", "last_seq_intervals", "=", "seqs_intervals", "[", "i", "]", "\n", "\n", "", "valid_seq", "=", "last_seqs", "[", ":", "-", "1", "]", "\n", "label_span", "=", "last_spans", "[", "-", "1", "]", "\n", "label_ccs", "=", "last_seq_ccs", "[", "-", "1", "]", "\n", "label_current_visit", "=", "last_seq_ccs", "[", ":", "-", "1", "]", "\n", "label_next_visit", "=", "last_seq_ccs", "[", "1", ":", "]", "\n", "valid_intervals", "=", "last_seq_intervals", "[", ":", "-", "1", "]", "\n", "\n", "labels_current_visit", ".", "append", "(", "label_current_visit", ")", "\n", "labels_next_visit", ".", "append", "(", "label_next_visit", ")", "\n", "labels_visit_cat1", ".", "append", "(", "last_seq_ccs_cat1", "[", ":", "-", "1", "]", ")", "\n", "inputs_all", ".", "append", "(", "valid_seq", ")", "\n", "labels_ccs", ".", "append", "(", "(", "label_ccs", ")", ")", "\n", "intervals_all", ".", "append", "(", "valid_intervals", ")", "\n", "\n", "if", "len", "(", "valid_seq", ")", ">", "max_seqs_len", ":", "\n", "            ", "max_seqs_len", "=", "len", "(", "valid_seq", ")", "\n", "\n", "", "for", "visit", "in", "valid_seq", ":", "\n", "            ", "if", "len", "(", "visit", ")", ">", "max_visit_len", ":", "\n", "                ", "max_visit_len", "=", "len", "(", "visit", ")", "\n", "", "for", "code", "in", "visit", ":", "\n", "                ", "if", "code", "in", "vocab_set", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "=", "1", "\n", "\n", "", "", "", "", "pickle", ".", "dump", "(", "inputs_all", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'inputs_all.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "intervals_all", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'intervals_all.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_ccs.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_current_visit", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_current_visit.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_next_visit", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_next_visit.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_visit_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_visit_cat1.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'ccs_single_level.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'ccs_cat1.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "\n", "pickle", ".", "dump", "(", "seqs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "newSeqs_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin_ccs.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "newSeqs_ccs_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin_ccs_cat1.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "\n", "sorted_vocab", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "vocab_set", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "outfd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'vocab.txt'", ")", ",", "'w'", ")", "\n", "for", "k", ",", "v", "in", "sorted_vocab", ".", "items", "(", ")", ":", "\n", "        ", "outfd", ".", "write", "(", "k", "+", "'\\n'", ")", "\n", "", "outfd", ".", "close", "(", ")", "\n", "print", "(", "max_visit_len", ",", "max_seqs_len", ",", "len", "(", "dict_ccs", ")", ",", "len", "(", "inputs_all", ")", ",", "len", "(", "sorted_vocab", ")", ",", "len", "(", "dict_ccs_cat1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.train.accuracy": [[32, 35], ["numpy.argmax", "numpy.sum"], "function", ["None"], ["def", "accuracy", "(", "out", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "np", ".", "argmax", "(", "out", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sum", "(", "outputs", "==", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.train.warmup_linear": [[37, 41], ["None"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.train.main": [[43, 382], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "torch.device", "logger.info", "os.path.join", "os.makedirs", "os.path.join", "utils.function_helpers.print2file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "pickle.load", "pickle.load", "pickle.load", "range", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().float().to", "torch.tensor().float().to", "models.modeling.BertConfig.from_json_file", "pickle.load", "len", "pickle.load", "len", "pickle.load", "len", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "dict", "datasets.load_data", "utils.function_helpers.print2file", "datasets.FTDataset", "torch.utils.data.DataLoader", "len", "int", "datasets.FTDataset", "torch.utils.data.DataLoader", "len", "int", "datasets.FTDataset", "torch.utils.data.DataLoader", "len", "int", "models.order.NextDxPrediction", "models.order.NextDxPrediction.to", "models.order.NextDxPrediction.parameters", "torch.Adadelta", "open", "copy.deepcopy", "tqdm.trange", "open.close", "utils.function_helpers.print2file", "utils.function_helpers.print2file", "models.order.NextDxPrediction.load_state_dict", "os.path.join", "utils.function_helpers.print2file", "torch.save", "torch.save", "str", "os.path.exists", "os.listdir", "ValueError", "time.strftime", "int", "os.path.join", "open", "open", "open", "utils.function_helpers.build_tree_with_padding", "torch.tensor().long().to.extend", "torch.tensor().long().to.extend", "torch.tensor().float().to.extend", "open", "utils.function_helpers.get_rootCode", "open", "open", "models.DescTokenizer", "torch.tensor().unsqueeze().long().to", "torch.tensor().unsqueeze().long().to", "time.strftime", "len", "os.path.join", "models.order.NextDxPrediction.state_dict", "int", "time.strftime", "time.strftime", "time.strftime", "hasattr", "torch.cuda.is_available", "torch.cuda.is_available", "time.localtime", "os.path.join", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().float", "torch.tensor().float", "os.path.join", "models.DescTokenizer.tokenize", "len", "len", "time.localtime", "utils.function_helpers.print2file", "utils.function_helpers.print2file", "utils.function_helpers.print2file", "utils.function_helpers.print2file", "iter", "time.time", "enumerate", "time.localtime", "time.localtime", "time.localtime", "str", "str", "models.DescTokenizer.code2desc.keys", "torch.tensor().unsqueeze().long", "torch.tensor().unsqueeze().long", "datasets.collate_pt", "datasets.collate_pt", "datasets.collate_pt", "datetime.datetime.now", "time.strftime", "int", "time.strftime", "time.strftime", "time.strftime", "models.order.NextDxPrediction.train", "models.order.NextDxPrediction.eval", "tqdm.tqdm", "optim.Adadelta.zero_grad", "time.time", "open.write", "os.path.join", "torch.save", "torch.save", "utils.function_helpers.print2file", "numpy.array().mean", "utils.function_helpers.print2file", "numpy.array().mean", "utils.function_helpers.print2file", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "t.to", "torch.set_grad_enabled", "torch.set_grad_enabled", "hasattr", "time.strftime", "time.strftime", "time.strftime", "copy.deepcopy", "str", "str", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "batch.items", "models.order.NextDxPrediction.", "model.backward", "optim.Adadelta.step", "open.write", "model.item", "input_ids.size", "models.order.NextDxPrediction.", "outputs.cpu().detach().numpy", "pickle.load.cpu().numpy", "predicts.reshape.reshape", "trues.reshape.reshape", "utils.evaluation.PredictionEvaluation.visit_level_precision_at_k", "utils.evaluation.PredictionEvaluation.code_level_accuracy_at_k", "precision_ls.append", "accuracy_ls.append", "time.localtime", "numpy.array", "time.localtime", "numpy.array", "time.localtime", "models.order.NextDxPrediction.state_dict", "train.warmup_linear", "str", "torch.tensor", "torch.tensor", "model.item", "outputs.cpu().detach", "pickle.load.cpu", "str", "outputs.cpu", "str"], "function", ["home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.load_data", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.build_tree_with_padding", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.get_rootCode", "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.tokenize", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_pt", "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_pt", "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_pt", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file", "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.PredictionEvaluation.visit_level_precision_at_k", "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.PredictionEvaluation.code_level_accuracy_at_k", "home.repos.pwc.inspect_result.xueping_setor.None.train.warmup_linear"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Required parameters", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The input data dir. Should contain the .tsv files (or other data files) for the task.\"", ")", "\n", "\n", "# Other parameters", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "\n", "default", "=", "'dx'", ",", "\n", "type", "=", "str", ",", "\n", "# required=True,", "\n", "help", "=", "\"The prediction task, such as Mortality (mort) or Length of stay (los).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_source\"", ",", "\n", "default", "=", "'mimic'", ",", "\n", "type", "=", "str", ",", "\n", "# required=True,", "\n", "help", "=", "\"the data source: mimic III (mimic) or eICU (eicu).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "# required=True,", "\n", "help", "=", "\"The pre_trained model directory.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "\n", "default", "=", "64", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after WordPiece tokenization. \\n\"", "\n", "\"Sequences longer than this will be truncated, and sequences shorter \\n\"", "\n", "\"than this will be padded.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "\n", "default", "=", "32", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--add_dag\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_nodes\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to initialize graph from description.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "\n", "default", "=", "5e-5", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lamda\"", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"The ratio between two tasks.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "\n", "default", "=", "3.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. \"", "\n", "\"E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"CUDA when available\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "42", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_ratio'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.8", ",", "\n", "help", "=", "\"the ratio of train datasets\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "\"the ratio between previous to current attention\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "info", "(", "\"device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "task", "=", "args", ".", "task", "+", "'_alpha_'", "+", "str", "(", "args", ".", "alpha", ")", "+", "'_lr_'", "+", "str", "(", "args", ".", "learning_rate", ")", "+", "'_bs_'", "+", "str", "(", "args", ".", "train_batch_size", ")", "+", "'_e_'", "+", "str", "(", "args", ".", "num_train_epochs", ")", "+", "'_l_'", "+", "str", "(", "args", ".", "lamda", ")", "+", "'_tr_'", "+", "str", "(", "args", ".", "train_ratio", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "data_source", ",", "task", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_dir", ")", "and", "os", ".", "listdir", "(", "output_dir", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Output directory ({}) already exists and is not empty.\"", ".", "format", "(", "output_dir", ")", ")", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'dx_prediction.log'", ")", "\n", "buf", "=", "'{} seed:{}, gpu:{}, num_train_epochs:{}, learning_rate:{}, train_batch_size:{}, output_dir:{}'", ".", "format", "(", "\n", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "args", ".", "seed", ",", "args", ".", "gpu", ",", "int", "(", "args", ".", "num_train_epochs", ")", ",", "args", ".", "learning_rate", ",", "args", ".", "train_batch_size", ",", "\n", "output_dir", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "\n", "data_path", "=", "args", ".", "data_dir", "\n", "# training data files", "\n", "seqs_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'inputs.seqs'", ")", "\n", "labels_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'labels_next_visit.label'", ")", "\n", "labels_visit_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'labels_visit_cat1.label'", ")", "\n", "# dictionary files", "\n", "dict_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'inputs.dict'", ")", "\n", "tree_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ")", "\n", "class_dict_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'ccs_single_level.dict'", ")", "\n", "visit_class_dict_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'ccs_cat1.dict'", ")", "\n", "code2desc_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "args", ".", "data_source", ",", "'code2desc.dict'", ")", "\n", "\n", "# model configure file", "\n", "config_json", "=", "'models/config.json'", "\n", "# config_json = 'KEMCE/model/config.json'", "\n", "copyfile", "(", "config_json", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.json'", ")", ")", "\n", "\n", "inputs", "=", "pickle", ".", "load", "(", "open", "(", "seqs_file", ",", "'rb'", ")", ")", "\n", "labels", "=", "pickle", ".", "load", "(", "open", "(", "labels_file", ",", "'rb'", ")", ")", "\n", "labels_visit", "=", "pickle", ".", "load", "(", "open", "(", "labels_visit_file", ",", "'rb'", ")", ")", "\n", "\n", "leaves_list", "=", "[", "]", "\n", "ancestors_list", "=", "[", "]", "\n", "masks_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "leaves", ",", "ancestors", ",", "masks", "=", "build_tree_with_padding", "(", "os", ".", "path", ".", "join", "(", "tree_dir", ",", "'level'", "+", "str", "(", "i", ")", "+", "'.pk'", ")", ")", "\n", "leaves_list", ".", "extend", "(", "leaves", ")", "\n", "ancestors_list", ".", "extend", "(", "ancestors", ")", "\n", "masks_list", ".", "extend", "(", "masks", ")", "\n", "", "leaves_list", "=", "torch", ".", "tensor", "(", "leaves_list", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "ancestors_list", "=", "torch", ".", "tensor", "(", "ancestors_list", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "masks_list", "=", "torch", ".", "tensor", "(", "masks_list", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# load configure file", "\n", "config", "=", "BertConfig", ".", "from_json_file", "(", "config_json", ")", "\n", "\n", "config", ".", "device", "=", "device", "\n", "config", ".", "alpha", "=", "args", ".", "alpha", "\n", "config", ".", "leaves_list", "=", "leaves_list", "\n", "config", ".", "ancestors_list", "=", "ancestors_list", "\n", "config", ".", "masks_list", "=", "masks_list", "\n", "vocab", "=", "pickle", ".", "load", "(", "open", "(", "dict_file", ",", "'rb'", ")", ")", "\n", "config", ".", "code_size", "=", "len", "(", "vocab", ")", "\n", "num_tree_nodes", "=", "get_rootCode", "(", "os", ".", "path", ".", "join", "(", "tree_dir", ",", "'level2.pk'", ")", ")", "+", "1", "\n", "config", ".", "num_tree_nodes", "=", "num_tree_nodes", "\n", "class_vocab", "=", "pickle", ".", "load", "(", "open", "(", "class_dict_file", ",", "'rb'", ")", ")", "\n", "config", ".", "num_ccs_classes", "=", "len", "(", "class_vocab", ")", "\n", "visit_class_vocab", "=", "pickle", ".", "load", "(", "open", "(", "visit_class_dict_file", ",", "'rb'", ")", ")", "\n", "config", ".", "num_visit_classes", "=", "len", "(", "visit_class_vocab", ")", "\n", "\n", "config", ".", "add_dag", "=", "args", ".", "add_dag", "\n", "config", ".", "lamda", "=", "args", ".", "lamda", "\n", "\n", "if", "args", ".", "init_nodes", ":", "\n", "        ", "desc_tokenize", "=", "DescTokenizer", "(", "code2desc_file", ")", "\n", "tokens", "=", "desc_tokenize", ".", "tokenize", "(", "desc_tokenize", ".", "code2desc", ".", "keys", "(", ")", ")", "[", "1", "]", "\n", "tokens", "=", "torch", ".", "tensor", "(", "tokens", ")", ".", "unsqueeze", "(", "0", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "config", ".", "tokens", "=", "tokens", "\n", "", "config", ".", "init_nodes", "=", "args", ".", "init_nodes", "\n", "\n", "max_seqs_len", "=", "0", "\n", "for", "seq", "in", "inputs", ":", "\n", "        ", "if", "len", "(", "seq", ")", ">", "max_seqs_len", ":", "\n", "            ", "max_seqs_len", "=", "len", "(", "seq", ")", "\n", "", "", "config", ".", "max_position_embeddings", "=", "max_seqs_len", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# load data", "\n", "data_dict", "=", "dict", "(", ")", "\n", "train_set", ",", "valid_set", ",", "test_set", "=", "load_data", "(", "inputs", ",", "labels", ",", "labels_visit", ",", "args", ".", "train_ratio", ")", "\n", "\n", "buf", "=", "'{} Total examples = {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "len", "(", "inputs", ")", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "\n", "train_dataset", "=", "FTDataset", "(", "train_set", "[", "0", "]", ",", "train_set", "[", "1", "]", ",", "train_set", "[", "2", "]", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "collate_fn", "=", "lambda", "batch", ":", "collate_pt", "(", "batch", ",", "config", ".", "num_ccs_classes", ",", "\n", "config", ".", "num_visit_classes", ")", ",", "\n", "num_workers", "=", "0", ",", "shuffle", "=", "True", ")", "\n", "size_train_data", "=", "len", "(", "train_set", "[", "0", "]", ")", "\n", "num_train_steps", "=", "int", "(", "size_train_data", "/", "args", ".", "train_batch_size", "*", "args", ".", "num_train_epochs", ")", "\n", "\n", "val_dataset", "=", "FTDataset", "(", "valid_set", "[", "0", "]", ",", "valid_set", "[", "1", "]", ",", "valid_set", "[", "2", "]", ")", "\n", "val_data_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "collate_fn", "=", "lambda", "batch", ":", "collate_pt", "(", "batch", ",", "config", ".", "num_ccs_classes", ",", "\n", "config", ".", "num_visit_classes", ")", ",", "\n", "num_workers", "=", "0", ",", "shuffle", "=", "True", ")", "\n", "size_val_data", "=", "len", "(", "valid_set", "[", "0", "]", ")", "\n", "num_val_steps", "=", "int", "(", "size_val_data", "/", "args", ".", "train_batch_size", "*", "args", ".", "num_train_epochs", ")", "\n", "\n", "test_dataset", "=", "FTDataset", "(", "test_set", "[", "0", "]", ",", "test_set", "[", "1", "]", ",", "test_set", "[", "2", "]", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "collate_fn", "=", "lambda", "batch", ":", "collate_pt", "(", "batch", ",", "config", ".", "num_ccs_classes", ",", "\n", "config", ".", "num_visit_classes", ")", ",", "\n", "num_workers", "=", "0", ",", "shuffle", "=", "True", ")", "\n", "size_test_data", "=", "len", "(", "test_set", "[", "0", "]", ")", "\n", "num_test_steps", "=", "int", "(", "size_test_data", "/", "args", ".", "train_batch_size", "*", "args", ".", "num_train_epochs", ")", "\n", "\n", "data_dict", "[", "'train'", "]", "=", "[", "train_data_loader", ",", "size_train_data", ",", "num_train_steps", "]", "\n", "data_dict", "[", "'val'", "]", "=", "[", "val_data_loader", ",", "size_val_data", ",", "num_val_steps", "]", "\n", "data_dict", "[", "'test'", "]", "=", "[", "test_data_loader", ",", "size_test_data", ",", "num_test_steps", "]", "\n", "\n", "model", "=", "NextDxPrediction", "(", "config", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "params_to_update", "=", "model", ".", "parameters", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "params_to_update", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"loss.{}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", ",", "'w'", ")", "\n", "best_accuracy_at_top_5", "=", "0", "\n", "epoch_duration", "=", "0.0", "\n", "global_step", "=", "0", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ")", ":", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "        ", "for", "phase", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "\n", "            ", "buf", "=", "'{} ********** Running {} on epoch({}/{}) ***********'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "phase", ",", "epoch", "+", "1", ",", "int", "(", "args", ".", "num_train_epochs", ")", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "buf", "=", "'{} Num examples = {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "data_dict", "[", "phase", "]", "[", "1", "]", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "buf", "=", "'{}  Batch size = {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "args", ".", "train_batch_size", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "buf", "=", "'{}  Num steps = {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "data_dict", "[", "phase", "]", "[", "2", "]", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "model", ".", "train", "(", ")", "# Set model to training mode", "\n", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "# Set model to evaluate mode", "\n", "\n", "", "data_iter", "=", "iter", "(", "data_dict", "[", "phase", "]", "[", "0", "]", ")", "\n", "tr_loss", "=", "0", "\n", "accuracy_ls", "=", "[", "]", "\n", "precision_ls", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "nb_tr_examples", ",", "nb_tr_steps", "=", "0", ",", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_iter", ",", "desc", "=", "\"Iteration\"", ")", ")", ":", "\n", "                ", "batch", "=", "{", "k", ":", "t", ".", "to", "(", "device", ")", "for", "k", ",", "t", "in", "batch", ".", "items", "(", ")", "}", "\n", "\n", "input_ids", "=", "batch", "[", "'input'", "]", "\n", "visit_mask", "=", "batch", "[", "'visit_mask'", "]", "\n", "code_mask", "=", "batch", "[", "'code_mask'", "]", "\n", "labels_visit", "=", "batch", "[", "'labels_visit'", "]", "\n", "labels_entity", "=", "batch", "[", "'labels_entity'", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "# track history if only in train", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "# backward + optimize only if in training phase", "\n", "                    ", "if", "phase", "==", "'train'", ":", "\n", "                        ", "loss", "=", "model", "(", "input_ids", ",", "\n", "visit_mask", ",", "\n", "code_mask", ",", "\n", "labels_visit", ",", "\n", "output_attentions", "=", "True", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lr_this_step", "=", "args", ".", "learning_rate", "*", "warmup_linear", "(", "global_step", "/", "num_train_steps", ",", "\n", "args", ".", "warmup_proportion", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                            ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "fout", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "loss", ".", "item", "(", ")", ")", ")", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "nb_tr_examples", "+=", "input_ids", ".", "size", "(", "0", ")", "\n", "nb_tr_steps", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "outputs", ",", "_", ",", "_", "=", "model", "(", "input_ids", ",", "\n", "visit_mask", ",", "\n", "code_mask", ",", "\n", "output_attentions", "=", "True", ")", "\n", "predicts", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "trues", "=", "labels_visit", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts", "=", "predicts", ".", "reshape", "(", "-", "1", ",", "predicts", ".", "shape", "[", "-", "1", "]", ")", "\n", "trues", "=", "trues", ".", "reshape", "(", "-", "1", ",", "trues", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "recalls", "=", "Evaluation", ".", "visit_level_precision_at_k", "(", "trues", ",", "predicts", ")", "\n", "accuracy", "=", "Evaluation", ".", "code_level_accuracy_at_k", "(", "trues", ",", "predicts", ")", "\n", "precision_ls", ".", "append", "(", "recalls", ")", "\n", "accuracy_ls", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "fout", ".", "write", "(", "\"train loss {} on epoch {}\\n\"", ".", "format", "(", "epoch", ",", "tr_loss", "/", "nb_tr_steps", ")", ")", "\n", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "# Only save the model it-self", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"pytorch_model.bin_{}\"", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model_to_save", ",", "output_model_file", ")", "\n", "buf", "=", "'{} {} Loss: {:.4f}, Duration: {}'", ".", "format", "(", "\n", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "phase", ",", "tr_loss", "/", "nb_tr_steps", ",", "duration", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "epoch_duration", "+=", "duration", "\n", "", "else", ":", "\n", "                ", "epoch_precision", "=", "(", "np", ".", "array", "(", "precision_ls", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "buf", "=", "'{} {} Precision: {}, Duration: {}'", ".", "format", "(", "\n", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "phase", ",", "epoch_precision", ",", "duration", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "epoch_accuracy", "=", "(", "np", ".", "array", "(", "accuracy_ls", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "buf", "=", "'{} {} Accuracy: {}, Duration: {}'", ".", "format", "(", "\n", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "phase", ",", "epoch_accuracy", ",", "duration", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "if", "phase", "==", "'val'", "and", "epoch_accuracy", "[", "0", "]", ">", "best_accuracy_at_top_5", ":", "\n", "                    ", "best_accuracy_at_top_5", "=", "epoch_accuracy", "[", "0", "]", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "", "", "", "", "fout", ".", "close", "(", ")", "\n", "\n", "buf", "=", "'{} Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "epoch_duration", "//", "60", ",", "epoch_duration", "%", "60", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "\n", "buf", "=", "'{} Best accuracy at top 5: {:4f}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "best_accuracy_at_top_5", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "\n", "# load best model weights", "\n", "model", ".", "load_state_dict", "(", "best_model_wts", ")", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"pytorch_model.bin\"", ")", "\n", "buf", "=", "'{} Save the best model to {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "output_model_file", ")", "\n", "print2file", "(", "buf", ",", "log_file", ")", "\n", "# Save a trained model", "\n", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "# Only save the model it-self", "\n", "torch", ".", "save", "(", "model_to_save", ",", "output_model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.None.data_mimic3_processing.mimic_processing": [[8, 222], ["datasets.data_labelling.LabelsForData", "print", "open", "open.readline", "open.close", "print", "open", "open.readline", "open.close", "print", "pidAdmMap.items", "print", "pidSeqMap.items", "print", "pidSeqMap_ccs.items", "print", "print", "pidSeqMap_ccs_cat1.items", "print", "print", "enumerate", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "open", "sorted_vocab.items", "open.close", "print", "line.strip().split", "int", "int", "datetime.datetime.strptime", "line.strip().split", "int", "sorted", "sorted", "sorted", "enumerate", "seqs.append", "seqs_span.append", "seqs_intervals.append", "seqs_ccs.append", "newSeqs_ccs.append", "seqs_ccs_cat1.append", "newSeqs_ccs_cat1.append", "len", "labels_current_visit.append", "labels_next_visit.append", "labels_visit_cat1.append", "inputs_all.append", "labels_ccs.append", "intervals_all.append", "open", "open", "open", "open", "open", "open", "open", "open", "open", "open", "open", "os.path.join", "open.write", "len", "len", "len", "len", "pidAdmMap[].append", "len", "admDxMap[].append", "admDxMap_ccs[].append", "admDxMap_ccs_cat1[].append", "len", "seq.append", "spans.append", "intervals.append", "seq.append", "set", "newPatient.append", "seq.append", "set", "newPatient.append", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "line.strip", "line.strip", "new_admIdList.append", "len", "len", "vocab_set.items", "newVisit.append", "len", "newVisit.append", "newVisit.append", "len", "newVisit.append"], "function", ["None"], ["def", "mimic_processing", "(", "adm_file", ",", "dx_file", ",", "single_dx_file", ",", "multi_dx_file", ",", "out_file", ")", ":", "\n", "\n", "    ", "label4data", "=", "LabelsForData", "(", "multi_dx_file", ",", "single_dx_file", ")", "\n", "print", "(", "'Building pid-admission mapping, admission-date mapping'", ")", "\n", "pidAdmMap", "=", "{", "}", "\n", "admDateMap", "=", "{", "}", "\n", "infd", "=", "open", "(", "adm_file", ",", "'r'", ")", "\n", "infd", ".", "readline", "(", ")", "\n", "for", "line", "in", "infd", ":", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "pid", "=", "int", "(", "tokens", "[", "1", "]", ")", "\n", "admId", "=", "int", "(", "tokens", "[", "2", "]", ")", "\n", "admTime", "=", "datetime", ".", "strptime", "(", "tokens", "[", "3", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "admDateMap", "[", "admId", "]", "=", "admTime", "\n", "if", "pid", "in", "pidAdmMap", ":", "\n", "            ", "pidAdmMap", "[", "pid", "]", ".", "append", "(", "admId", ")", "\n", "", "else", ":", "\n", "            ", "pidAdmMap", "[", "pid", "]", "=", "[", "admId", "]", "\n", "", "", "infd", ".", "close", "(", ")", "\n", "\n", "print", "(", "'Building admission-dxList mapping'", ")", "\n", "admDxMap", "=", "{", "}", "\n", "admDxMap_ccs", "=", "{", "}", "\n", "admDxMap_ccs_cat1", "=", "{", "}", "\n", "infd", "=", "open", "(", "dx_file", ",", "'r'", ")", "\n", "infd", ".", "readline", "(", ")", "\n", "for", "line", "in", "infd", ":", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "admId", "=", "int", "(", "tokens", "[", "2", "]", ")", "\n", "dx", "=", "tokens", "[", "4", "]", "[", "1", ":", "-", "1", "]", "\n", "if", "len", "(", "dx", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "dxStr", "=", "'D_'", "+", "dx", "\n", "dxStr_ccs_single", "=", "'D_'", "+", "label4data", ".", "code2single_dx", "[", "dx", "]", "\n", "dxStr_ccs_cat1", "=", "'D_'", "+", "label4data", ".", "code2first_level_dx", "[", "dx", "]", "\n", "\n", "if", "admId", "in", "admDxMap", ":", "\n", "            ", "admDxMap", "[", "admId", "]", ".", "append", "(", "dxStr", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap", "[", "admId", "]", "=", "[", "dxStr", "]", "\n", "\n", "", "if", "admId", "in", "admDxMap_ccs", ":", "\n", "            ", "admDxMap_ccs", "[", "admId", "]", ".", "append", "(", "dxStr_ccs_single", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap_ccs", "[", "admId", "]", "=", "[", "dxStr_ccs_single", "]", "\n", "\n", "", "if", "admId", "in", "admDxMap_ccs_cat1", ":", "\n", "            ", "admDxMap_ccs_cat1", "[", "admId", "]", ".", "append", "(", "dxStr_ccs_cat1", ")", "\n", "", "else", ":", "\n", "            ", "admDxMap_ccs_cat1", "[", "admId", "]", "=", "[", "dxStr_ccs_cat1", "]", "\n", "", "", "infd", ".", "close", "(", ")", "\n", "\n", "print", "(", "'Building pid-sortedVisits mapping'", ")", "\n", "pidSeqMap", "=", "{", "}", "\n", "pidSeqMap_ccs", "=", "{", "}", "\n", "pidSeqMap_ccs_cat1", "=", "{", "}", "\n", "for", "pid", ",", "admIdList", "in", "pidAdmMap", ".", "items", "(", ")", ":", "\n", "        ", "new_admIdList", "=", "[", "]", "\n", "for", "admId", "in", "admIdList", ":", "\n", "            ", "if", "admId", "in", "admDxMap", ":", "\n", "                ", "new_admIdList", ".", "append", "(", "admId", ")", "\n", "", "", "if", "len", "(", "new_admIdList", ")", "<", "2", ":", "continue", "\n", "# print(admIdList)", "\n", "sortedList", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap", "[", "pid", "]", "=", "sortedList", "\n", "\n", "sortedList_ccs", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap_ccs", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap_ccs", "[", "pid", "]", "=", "sortedList_ccs", "\n", "\n", "sortedList_ccs_cat1", "=", "sorted", "(", "[", "(", "admDateMap", "[", "admId", "]", ",", "admDxMap_ccs_cat1", "[", "admId", "]", ")", "for", "admId", "in", "new_admIdList", "]", ")", "\n", "pidSeqMap_ccs_cat1", "[", "pid", "]", "=", "sortedList_ccs_cat1", "\n", "\n", "", "print", "(", "'Building strSeqs, span label'", ")", "\n", "seqs", "=", "[", "]", "\n", "seqs_span", "=", "[", "]", "\n", "seqs_intervals", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "spans", "=", "[", "]", "\n", "intervals", "=", "[", "]", "\n", "first_time", "=", "visits", "[", "0", "]", "[", "0", "]", "\n", "for", "i", ",", "visit", "in", "enumerate", "(", "visits", ")", ":", "\n", "            ", "current_time", "=", "visit", "[", "0", "]", "\n", "interval", "=", "(", "current_time", "-", "first_time", ")", ".", "days", "\n", "first_time", "=", "current_time", "\n", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "span_flag", "=", "0", "if", "interval", "<=", "30", "else", "1", "\n", "spans", ".", "append", "(", "span_flag", ")", "\n", "intervals", ".", "append", "(", "interval", ")", "\n", "", "seqs", ".", "append", "(", "seq", ")", "\n", "seqs_span", ".", "append", "(", "spans", ")", "\n", "seqs_intervals", ".", "append", "(", "intervals", ")", "\n", "\n", "", "print", "(", "'Building strSeqs for CCS single-level code'", ")", "\n", "seqs_ccs", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap_ccs", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "for", "visit", "in", "visits", ":", "\n", "            ", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "", "seqs_ccs", ".", "append", "(", "seq", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs single-level code'", ")", "\n", "dict_ccs", "=", "{", "}", "\n", "newSeqs_ccs", "=", "[", "]", "\n", "for", "patient", "in", "seqs_ccs", ":", "\n", "        ", "newPatient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "newVisit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs", ":", "\n", "                    ", "newVisit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs", "[", "code", "]", "=", "len", "(", "dict_ccs", ")", "\n", "newVisit", ".", "append", "(", "dict_ccs", "[", "code", "]", ")", "\n", "", "", "newPatient", ".", "append", "(", "newVisit", ")", "\n", "", "newSeqs_ccs", ".", "append", "(", "newPatient", ")", "\n", "\n", "", "print", "(", "'Building strSeqs for CCS multi-level first code'", ")", "\n", "seqs_ccs_cat1", "=", "[", "]", "\n", "for", "pid", ",", "visits", "in", "pidSeqMap_ccs_cat1", ".", "items", "(", ")", ":", "\n", "        ", "seq", "=", "[", "]", "\n", "for", "visit", "in", "visits", ":", "\n", "            ", "seq", ".", "append", "(", "visit", "[", "1", "]", ")", "\n", "", "seqs_ccs_cat1", ".", "append", "(", "seq", ")", "\n", "\n", "", "print", "(", "'Converting strSeqs to intSeqs, and making types for ccs multi-level first level code'", ")", "\n", "dict_ccs_cat1", "=", "{", "}", "\n", "newSeqs_ccs_cat1", "=", "[", "]", "\n", "for", "patient", "in", "seqs_ccs_cat1", ":", "\n", "        ", "newPatient", "=", "[", "]", "\n", "for", "visit", "in", "patient", ":", "\n", "            ", "newVisit", "=", "[", "]", "\n", "for", "code", "in", "set", "(", "visit", ")", ":", "\n", "                ", "if", "code", "in", "dict_ccs_cat1", ":", "\n", "                    ", "newVisit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dict_ccs_cat1", "[", "code", "]", "=", "len", "(", "dict_ccs_cat1", ")", "\n", "newVisit", ".", "append", "(", "dict_ccs_cat1", "[", "code", "]", ")", "\n", "", "", "newPatient", ".", "append", "(", "newVisit", ")", "\n", "", "newSeqs_ccs_cat1", ".", "append", "(", "newPatient", ")", "\n", "\n", "", "print", "(", "'Converting seqs to model inputs'", ")", "\n", "inputs_all", "=", "[", "]", "\n", "labels_ccs", "=", "[", "]", "\n", "intervals_all", "=", "[", "]", "\n", "labels_current_visit", "=", "[", "]", "\n", "labels_next_visit", "=", "[", "]", "\n", "labels_visit_cat1", "=", "[", "]", "\n", "vocab_set", "=", "{", "}", "\n", "max_visit_len", "=", "0", "\n", "max_seqs_len", "=", "0", "\n", "truncated_len", "=", "21", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "length", "=", "len", "(", "seq", ")", "\n", "\n", "if", "length", ">=", "truncated_len", ":", "\n", "            ", "last_seqs", "=", "seq", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_spans", "=", "seqs_span", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_ccs", "=", "newSeqs_ccs", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_ccs_cat1", "=", "newSeqs_ccs_cat1", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "last_seq_intervals", "=", "seqs_intervals", "[", "i", "]", "[", "length", "-", "truncated_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "last_seqs", "=", "seq", "\n", "last_spans", "=", "seqs_span", "[", "i", "]", "\n", "last_seq_ccs", "=", "newSeqs_ccs", "[", "i", "]", "\n", "last_seq_ccs_cat1", "=", "newSeqs_ccs_cat1", "[", "i", "]", "\n", "last_seq_intervals", "=", "seqs_intervals", "[", "i", "]", "\n", "\n", "", "valid_seq", "=", "last_seqs", "[", ":", "-", "1", "]", "\n", "label_span", "=", "last_spans", "[", "-", "1", "]", "\n", "label_ccs", "=", "last_seq_ccs", "[", "-", "1", "]", "\n", "label_current_visit", "=", "last_seq_ccs", "[", ":", "-", "1", "]", "\n", "label_next_visit", "=", "last_seq_ccs", "[", "1", ":", "]", "\n", "valid_intervals", "=", "last_seq_intervals", "[", ":", "-", "1", "]", "\n", "\n", "labels_current_visit", ".", "append", "(", "label_current_visit", ")", "\n", "labels_next_visit", ".", "append", "(", "label_next_visit", ")", "\n", "labels_visit_cat1", ".", "append", "(", "last_seq_ccs_cat1", "[", ":", "-", "1", "]", ")", "\n", "inputs_all", ".", "append", "(", "valid_seq", ")", "\n", "labels_ccs", ".", "append", "(", "(", "label_ccs", ")", ")", "\n", "intervals_all", ".", "append", "(", "valid_intervals", ")", "\n", "\n", "if", "len", "(", "valid_seq", ")", ">", "max_seqs_len", ":", "\n", "            ", "max_seqs_len", "=", "len", "(", "valid_seq", ")", "\n", "\n", "", "for", "visit", "in", "valid_seq", ":", "\n", "            ", "if", "len", "(", "visit", ")", ">", "max_visit_len", ":", "\n", "                ", "max_visit_len", "=", "len", "(", "visit", ")", "\n", "", "for", "code", "in", "visit", ":", "\n", "                ", "if", "code", "in", "vocab_set", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "vocab_set", "[", "code", "]", "=", "1", "\n", "\n", "", "", "", "", "pickle", ".", "dump", "(", "inputs_all", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'inputs_all.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "intervals_all", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'intervals_all.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_ccs.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_current_visit", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_current_visit.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_next_visit", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_next_visit.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "labels_visit_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'labels_visit_cat1.label'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'ccs_single_level.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "dict_ccs_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'ccs_cat1.dict'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "\n", "pickle", ".", "dump", "(", "seqs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "newSeqs_ccs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin_ccs.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "newSeqs_ccs_cat1", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'origin_ccs_cat1.seqs'", ")", ",", "'wb'", ")", ",", "-", "1", ")", "\n", "\n", "sorted_vocab", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "vocab_set", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "outfd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_file", ",", "'vocab.txt'", ")", ",", "'w'", ")", "\n", "for", "k", ",", "v", "in", "sorted_vocab", ".", "items", "(", ")", ":", "\n", "        ", "outfd", ".", "write", "(", "k", "+", "'\\n'", ")", "\n", "", "outfd", ".", "close", "(", ")", "\n", "print", "(", "max_visit_len", ",", "max_seqs_len", ",", "len", "(", "dict_ccs", ")", ",", "len", "(", "inputs_all", ")", ",", "len", "(", "sorted_vocab", ")", ",", "len", "(", "dict_ccs_cat1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.print2file": [[10, 15], ["print", "open", "open.write", "open.close"], "function", ["None"], ["def", "print2file", "(", "buf", ",", "outFile", ")", ":", "\n", "    ", "print", "(", "buf", ")", "\n", "outfd", "=", "open", "(", "outFile", ",", "'a'", ")", "\n", "outfd", ".", "write", "(", "buf", "+", "'\\n'", ")", "\n", "outfd", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.get_rootCode": [[17, 21], ["pickle.load", "open", "list", "pickle.load.values"], "function", ["None"], ["", "def", "get_rootCode", "(", "treeFile", ")", ":", "\n", "    ", "tree", "=", "pickle", ".", "load", "(", "open", "(", "treeFile", ",", "'rb'", ")", ")", "\n", "rootCode", "=", "list", "(", "tree", ".", "values", "(", ")", ")", "[", "0", "]", "[", "1", "]", "\n", "return", "rootCode", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.function_helpers.build_tree_with_padding": [[23, 44], ["pickle.load", "numpy.array().astype", "pickle.load.keys", "numpy.array().astype", "open", "len", "np.concatenate.append", "numpy.ones().astype", "numpy.zeros().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.ones", "numpy.array", "numpy.array", "list", "numpy.ones", "numpy.zeros", "pickle.load.values"], "function", ["None"], ["", "def", "build_tree_with_padding", "(", "treeFile", ",", "max_len_ancestors", "=", "6", ")", ":", "\n", "# max_len_ancestors = 6 # the max length of code's ancestors including itself", "\n", "    ", "treeMap", "=", "pickle", ".", "load", "(", "open", "(", "treeFile", ",", "'rb'", ")", ")", "\n", "if", "len", "(", "treeMap", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "ancestors", "=", "np", ".", "array", "(", "list", "(", "treeMap", ".", "values", "(", ")", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "ancSize", "=", "ancestors", ".", "shape", "[", "1", "]", "\n", "leaves", "=", "[", "]", "\n", "for", "k", "in", "treeMap", ".", "keys", "(", ")", ":", "\n", "        ", "leaves", ".", "append", "(", "[", "k", "]", "*", "ancSize", ")", "\n", "", "leaves", "=", "np", ".", "array", "(", "leaves", ")", ".", "astype", "(", "'int32'", ")", "\n", "# add padding and mask", "\n", "if", "ancSize", "<", "max_len_ancestors", ":", "\n", "        ", "ones", "=", "np", ".", "ones", "(", "(", "ancestors", ".", "shape", "[", "0", "]", ",", "ancSize", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "ancestors", ".", "shape", "[", "0", "]", ",", "max_len_ancestors", "-", "ancSize", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "leaves", "=", "np", ".", "concatenate", "(", "[", "leaves", ",", "zeros", "]", ",", "axis", "=", "1", ")", "\n", "ancestors", "=", "np", ".", "concatenate", "(", "[", "ancestors", ",", "zeros", "]", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "[", "ones", ",", "zeros", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "ones", "(", "(", "ancestors", ".", "shape", "[", "0", "]", ",", "max_len_ancestors", ")", ")", "\n", "", "return", "leaves", ",", "ancestors", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.PredictionEvaluation.metric_pred": [[15, 44], ["sklearn.metrics.confusion_matrix().astype", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.f1_score", "sklearn.metrics.auc", "round", "round", "round", "round", "round", "round", "round", "sklearn.metrics.confusion_matrix"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "metric_pred", "(", "y_true", ",", "probs", ",", "y_pred", ")", ":", "\n", "        ", "[", "[", "TN", ",", "FP", "]", ",", "[", "FN", ",", "TP", "]", "]", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ",", "labels", "=", "[", "0", ",", "1", "]", ")", ".", "astype", "(", "float", ")", "\n", "# print(TN, FP, FN, TP)", "\n", "accuracy", "=", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "TN", "+", "FP", "+", "FN", ")", "\n", "specificity", "=", "TN", "/", "(", "FP", "+", "TN", ")", "\n", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "# recall = sensitivity", "\n", "sensitivity", "=", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "\n", "# calculate AUC", "\n", "roc_auc", "=", "roc_auc_score", "(", "y_true", ",", "probs", ")", "\n", "\n", "# calculate precision-recall curve", "\n", "precision_curve", ",", "recall_curve", ",", "thresholds", "=", "precision_recall_curve", "(", "y_true", ",", "probs", ")", "\n", "# calculate F1 score", "\n", "f_score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "# calculate precision-recall AUC", "\n", "pr_auc", "=", "auc", "(", "recall_curve", ",", "precision_curve", ")", "\n", "\n", "accuracy", "=", "round", "(", "accuracy", ",", "4", ")", "\n", "precision", "=", "round", "(", "precision", ",", "4", ")", "\n", "sensitivity", "=", "round", "(", "sensitivity", ",", "4", ")", "\n", "specificity", "=", "round", "(", "specificity", ",", "4", ")", "\n", "f_score", "=", "round", "(", "f_score", ",", "4", ")", "\n", "pr_auc", "=", "round", "(", "pr_auc", ",", "4", ")", "\n", "roc_auc", "=", "round", "(", "roc_auc", ",", "4", ")", "\n", "\n", "return", "[", "accuracy", ",", "precision", ",", "sensitivity", ",", "specificity", ",", "f_score", ",", "pr_auc", ",", "roc_auc", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.PredictionEvaluation.visit_level_precision_at_k": [[45, 68], ["list", "range", "numpy.round", "list", "len", "list.append", "numpy.array().mean", "min", "len", "list.append", "heapq.nlargest", "heapq.nlargest", "set().intersection", "numpy.array", "numpy.count_nonzero", "enumerate", "enumerate", "set", "operator.itemgetter", "operator.itemgetter", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "visit_level_precision_at_k", "(", "y_true", ",", "y_pred", ",", "rank", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", "]", ")", ":", "\n", "        ", "precision", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "this_one", "=", "list", "(", ")", "\n", "# store indexes of the all ONE valves, e.g trues[i] = [1,0,1,1,0], then trueVec = [0, 2, 3]", "\n", "true_vec", "=", "[", "rk", "[", "0", "]", "for", "rk", "in", "\n", "heapq", ".", "nlargest", "(", "np", ".", "count_nonzero", "(", "y_true", "[", "i", "]", ")", ",", "enumerate", "(", "y_true", "[", "i", "]", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "]", "\n", "length", "=", "len", "(", "true_vec", ")", "\n", "if", "length", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "#  store indexes of the top 30 largest values, e.g. predicts[i] = [4,5,7,8,3],", "\n", "#  then preVec=[3, 2, 1, 0, 4]", "\n", "", "pre_vec", "=", "[", "rk", "[", "0", "]", "for", "rk", "in", "heapq", ".", "nlargest", "(", "30", ",", "enumerate", "(", "y_pred", "[", "i", "]", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "]", "\n", "for", "rk", "in", "rank", ":", "\n", "                ", "tmp_length", "=", "min", "(", "rk", ",", "length", ")", "\n", "num_corrects", "=", "len", "(", "set", "(", "true_vec", ")", ".", "intersection", "(", "set", "(", "pre_vec", "[", ":", "rk", "]", ")", ")", ")", "\n", "# print('K: hits -> {}:{}'.format(tmp_length, num_corrects))", "\n", "this_one", ".", "append", "(", "num_corrects", "*", "1.0", "/", "tmp_length", ")", "\n", "", "precision", ".", "append", "(", "this_one", ")", "\n", "\n", "", "return", "np", ".", "round", "(", "(", "np", ".", "array", "(", "precision", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", ",", "decimals", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.PredictionEvaluation.code_level_accuracy_at_k": [[69, 90], ["list", "range", "numpy.round", "list", "len", "list.append", "numpy.array().mean", "len", "list.append", "heapq.nlargest", "heapq.nlargest", "set().intersection", "numpy.array", "numpy.count_nonzero", "enumerate", "enumerate", "set", "operator.itemgetter", "operator.itemgetter", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "code_level_accuracy_at_k", "(", "y_true", ",", "y_pred", ",", "rank", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", "]", ")", ":", "\n", "        ", "precision", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "this_one", "=", "list", "(", ")", "\n", "# store indexes of the all ONE valves, e.g trues[i] = [1,0,1,1,0], then trueVec = [0, 2, 3]", "\n", "true_vec", "=", "[", "rk", "[", "0", "]", "for", "rk", "in", "\n", "heapq", ".", "nlargest", "(", "np", ".", "count_nonzero", "(", "y_true", "[", "i", "]", ")", ",", "enumerate", "(", "y_true", "[", "i", "]", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "]", "\n", "length", "=", "len", "(", "true_vec", ")", "\n", "if", "length", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "#  store indexes of the top 30 largest values, e.g. predicts[i] = [4,5,7,8,3],", "\n", "#  then preVec=[3, 2, 1, 0, 4]", "\n", "", "pre_vec", "=", "[", "rk", "[", "0", "]", "for", "rk", "in", "heapq", ".", "nlargest", "(", "30", ",", "enumerate", "(", "y_pred", "[", "i", "]", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "]", "\n", "for", "rk", "in", "rank", ":", "\n", "                ", "num_corrects", "=", "len", "(", "set", "(", "true_vec", ")", ".", "intersection", "(", "set", "(", "pre_vec", "[", ":", "rk", "]", ")", ")", ")", "\n", "this_one", ".", "append", "(", "num_corrects", "*", "1.0", "/", "length", ")", "\n", "", "precision", ".", "append", "(", "this_one", ")", "\n", "\n", "", "return", "np", ".", "round", "(", "(", "np", ".", "array", "(", "precision", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", ",", "decimals", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.ConceptEvaluation.__init__": [[93, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reverse_dict", ",", "label4data", ")", ":", "\n", "        ", "self", ".", "reverse_dict", "=", "reverse_dict", "\n", "self", ".", "label4data", "=", "label4data", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.utils.evaluation.ConceptEvaluation.get_sample_tsne": [[97, 125], ["evaluation.ConceptEvaluation.reverse_dict.items", "numpy.empty", "enumerate", "random.seed", "random.sample", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "v.startswith", "len", "list", "indexes_samples.append", "labels_samples.append", "dx_codes.append", "index_codes.append", "int", "zip", "int", "code.replace"], "methods", ["None"], ["", "def", "get_sample_tsne", "(", "self", ",", "embeddings", ",", "size_samples", "=", "2000", ")", ":", "\n", "# embeddings = sess.run(self.model.final_weights)", "\n", "# get codes and index for diagnosis codes", "\n", "        ", "dx_codes", "=", "[", "]", "\n", "index_codes", "=", "[", "]", "# index of valid diagnosis codes", "\n", "for", "k", ",", "v", "in", "self", ".", "reverse_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", ".", "startswith", "(", "'D_'", ")", ":", "\n", "                ", "dx_codes", ".", "append", "(", "v", "[", "2", ":", "]", ")", "\n", "index_codes", ".", "append", "(", "int", "(", "k", ")", ")", "\n", "\n", "# Label high level category (0:17) for each code", "\n", "", "", "dx_labels", "=", "np", ".", "empty", "(", "len", "(", "dx_codes", ")", ",", "int", ")", "\n", "for", "dx_index", ",", "code", "in", "enumerate", "(", "dx_codes", ")", ":", "\n", "            ", "dx_labels", "[", "dx_index", "]", "=", "int", "(", "self", ".", "label4data", ".", "code2first_level_dx", "[", "code", ".", "replace", "(", "'.'", ",", "''", ")", "]", ")", "-", "1", "\n", "\n", "", "random", ".", "seed", "(", "42", ")", "\n", "samples", "=", "sample", "(", "list", "(", "zip", "(", "index_codes", ",", "dx_labels", ")", ")", ",", "size_samples", ")", "\n", "indexes_samples", "=", "[", "]", "\n", "labels_samples", "=", "[", "]", "\n", "for", "index", ",", "label", "in", "samples", ":", "\n", "            ", "indexes_samples", ".", "append", "(", "index", ")", "\n", "labels_samples", ".", "append", "(", "label", ")", "\n", "\n", "", "dx_weights", "=", "embeddings", "[", "indexes_samples", "]", "\n", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ")", "\n", "X_2d", "=", "tsne", ".", "fit_transform", "(", "dx_weights", ")", "\n", "\n", "return", "X_2d", ",", "labels_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.FTDataset.__init__": [[241, 245], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "labels", ",", "labels_visit", ")", ":", "\n", "        ", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "labels_visit", "=", "labels_visit", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.FTDataset.__len__": [[246, 248], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.FTDataset.__getitem__": [[249, 251], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "inputs", "[", "item", "]", ",", "self", ".", "labels", "[", "item", "]", ",", "self", ".", "labels_visit", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.pad1d": [[7, 9], ["numpy.pad", "len"], "function", ["None"], ["def", "pad1d", "(", "x", ",", "max_len", ")", ":", "\n", "    ", "return", "np", ".", "pad", "(", "x", ",", "(", "0", ",", "max_len", "-", "len", "(", "x", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.pad2d": [[11, 15], ["numpy.zeros", "numpy.concatenate"], "function", ["None"], ["", "def", "pad2d", "(", "x", ",", "max_len", ")", ":", "\n", "    ", "shape", "=", "x", ".", "shape", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "max_len", "-", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "x", ",", "pad", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_rd": [[17, 81], ["max", "numpy.stack", "numpy.stack", "numpy.array", "numpy.stack", "numpy.stack", "len", "numpy.zeros", "visit_mask_pad.append", "len", "numpy.zeros", "numpy.concatenate", "inputs_pad.append", "numpy.zeros", "dx_classes.append", "range", "visit_classes_pad.append", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "visit_codes.append", "numpy.zeros", "visit_classes.append", "numpy.zeros", "visit_classes.append", "len", "len", "numpy.stack", "len", "torch.tensor"], "function", ["None"], ["", "def", "collate_rd", "(", "batch", ",", "num_dx_classes", ",", "num_visit_classes", ")", ":", "\n", "\n", "    ", "seq_lens", "=", "[", "len", "(", "x", "[", "0", "]", ")", "for", "x", "in", "batch", "]", "\n", "max_seq_len", "=", "max", "(", "seq_lens", ")", "\n", "\n", "visit_mask_pad", "=", "[", "]", "\n", "for", "l", "in", "seq_lens", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "max_seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "[", ":", "l", "]", "=", "1", "\n", "visit_mask_pad", ".", "append", "(", "mask", ")", "\n", "", "visit_mask", "=", "np", ".", "stack", "(", "visit_mask_pad", ")", "\n", "\n", "max_visit_len", "=", "0", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "for", "visit", "in", "x", "[", "0", "]", ":", "\n", "            ", "if", "max_visit_len", "<", "len", "(", "visit", ")", ":", "\n", "                ", "max_visit_len", "=", "len", "(", "visit", ")", "\n", "\n", "", "", "", "inputs_pad", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "seq_len", "=", "len", "(", "x", "[", "0", "]", ")", "\n", "visit_pad", "=", "np", ".", "zeros", "(", "(", "max_seq_len", "-", "seq_len", ",", "max_visit_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "visit_codes", "=", "[", "]", "\n", "for", "visit", "in", "x", "[", "0", "]", ":", "\n", "            ", "visit_len", "=", "len", "(", "visit", ")", "\n", "code_pad", "=", "visit", "+", "[", "0", "]", "*", "(", "max_visit_len", "-", "visit_len", ")", "\n", "visit_codes", ".", "append", "(", "code_pad", ")", "\n", "", "seq_pad", "=", "np", ".", "concatenate", "(", "[", "np", ".", "stack", "(", "visit_codes", ")", ",", "visit_pad", "]", ",", "axis", "=", "0", ")", "\n", "inputs_pad", ".", "append", "(", "seq_pad", ")", "\n", "", "inputs", "=", "np", ".", "stack", "(", "inputs_pad", ")", "\n", "\n", "code_mask", "=", "np", ".", "array", "(", "inputs", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "dx_classes", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "dx_label", "=", "x", "[", "1", "]", "\n", "# dx_label = x[1][1]", "\n", "labels", "=", "np", ".", "zeros", "(", "num_dx_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", "dx_label", "]", "=", "1.0", "\n", "dx_classes", ".", "append", "(", "labels", ")", "\n", "", "labels_dx", "=", "np", ".", "stack", "(", "dx_classes", ")", "\n", "\n", "visit_classes_pad", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "visit_labels", "=", "x", "[", "2", "]", "\n", "visit_classes", "=", "[", "]", "\n", "for", "visit_label", "in", "visit_labels", ":", "\n", "# print(visit_label)", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_visit_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", "visit_label", "]", "=", "1.0", "\n", "visit_classes", ".", "append", "(", "labels", ")", "\n", "", "for", "_", "in", "range", "(", "max_seq_len", "-", "len", "(", "visit_labels", ")", ")", ":", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_visit_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "visit_classes", ".", "append", "(", "labels", ")", "\n", "", "visit_classes_pad", ".", "append", "(", "visit_classes", ")", "\n", "", "labels_visit", "=", "np", ".", "stack", "(", "visit_classes_pad", ")", "\n", "\n", "output", "=", "{", "\"input\"", ":", "torch", ".", "tensor", "(", "inputs", ")", ".", "long", "(", ")", ",", "\n", "\"visit_mask\"", ":", "torch", ".", "tensor", "(", "visit_mask", ")", ",", "\n", "\"code_mask\"", ":", "torch", ".", "tensor", "(", "code_mask", ")", ",", "\n", "\"label_dx\"", ":", "torch", ".", "tensor", "(", "labels_dx", ")", ",", "\n", "'labels_visit'", ":", "torch", ".", "tensor", "(", "labels_visit", ")", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_pt": [[83, 152], ["max", "numpy.stack", "numpy.stack", "numpy.array", "enumerate", "numpy.stack", "numpy.stack", "len", "numpy.zeros", "visit_mask_pad.append", "len", "numpy.zeros", "numpy.concatenate", "inputs_pad.append", "range", "visit_classes_pad.append", "range", "entity_classes_pad.append", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "visit_codes.append", "numpy.zeros", "visit_classes.append", "numpy.zeros", "visit_classes.append", "numpy.zeros", "entity_classes.append", "numpy.zeros", "entity_classes.append", "len", "len", "numpy.stack", "len", "len", "torch.tensor"], "function", ["None"], ["", "def", "collate_pt", "(", "batch", ",", "num_dx_classes", ",", "num_visit_classes", ")", ":", "\n", "\n", "    ", "seq_lens", "=", "[", "len", "(", "x", "[", "0", "]", ")", "for", "x", "in", "batch", "]", "\n", "max_seq_len", "=", "max", "(", "seq_lens", ")", "\n", "# print(max_seq_len, seq_lens)", "\n", "\n", "visit_mask_pad", "=", "[", "]", "\n", "for", "l", "in", "seq_lens", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "max_seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "[", ":", "l", "]", "=", "1", "\n", "visit_mask_pad", ".", "append", "(", "mask", ")", "\n", "", "visit_mask", "=", "np", ".", "stack", "(", "visit_mask_pad", ")", "\n", "\n", "max_visit_len", "=", "0", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "for", "visit", "in", "x", "[", "0", "]", ":", "\n", "            ", "if", "max_visit_len", "<", "len", "(", "visit", ")", ":", "\n", "                ", "max_visit_len", "=", "len", "(", "visit", ")", "\n", "\n", "", "", "", "inputs_pad", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "seq_len", "=", "len", "(", "x", "[", "0", "]", ")", "\n", "visit_pad", "=", "np", ".", "zeros", "(", "(", "max_seq_len", "-", "seq_len", ",", "max_visit_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "visit_codes", "=", "[", "]", "\n", "for", "visit", "in", "x", "[", "0", "]", ":", "\n", "            ", "visit_len", "=", "len", "(", "visit", ")", "\n", "code_pad", "=", "visit", "+", "[", "0", "]", "*", "(", "max_visit_len", "-", "visit_len", ")", "\n", "visit_codes", ".", "append", "(", "code_pad", ")", "\n", "", "seq_pad", "=", "np", ".", "concatenate", "(", "[", "np", ".", "stack", "(", "visit_codes", ")", ",", "visit_pad", "]", ",", "axis", "=", "0", ")", "\n", "inputs_pad", ".", "append", "(", "seq_pad", ")", "\n", "", "inputs", "=", "np", ".", "stack", "(", "inputs_pad", ")", "\n", "\n", "code_mask", "=", "np", ".", "array", "(", "inputs", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "visit_classes_pad", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "visit_labels", "=", "x", "[", "1", "]", "\n", "visit_classes", "=", "[", "]", "\n", "for", "visit_label", "in", "visit_labels", ":", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_dx_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", "visit_label", "]", "=", "1.0", "\n", "visit_classes", ".", "append", "(", "labels", ")", "\n", "", "for", "_", "in", "range", "(", "max_seq_len", "-", "len", "(", "visit_labels", ")", ")", ":", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_dx_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "visit_classes", ".", "append", "(", "labels", ")", "\n", "", "visit_classes_pad", ".", "append", "(", "visit_classes", ")", "\n", "", "labels_visit", "=", "np", ".", "stack", "(", "visit_classes_pad", ")", "\n", "\n", "entity_classes_pad", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "entity_labels", "=", "x", "[", "2", "]", "\n", "entity_classes", "=", "[", "]", "\n", "for", "visit_label", "in", "entity_labels", ":", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_visit_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", "visit_label", "]", "=", "1.0", "\n", "entity_classes", ".", "append", "(", "labels", ")", "\n", "", "for", "_", "in", "range", "(", "max_seq_len", "-", "len", "(", "entity_labels", ")", ")", ":", "\n", "            ", "labels", "=", "np", ".", "zeros", "(", "num_visit_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entity_classes", ".", "append", "(", "labels", ")", "\n", "", "entity_classes_pad", ".", "append", "(", "entity_classes", ")", "\n", "", "labels_entity", "=", "np", ".", "stack", "(", "entity_classes_pad", ")", "\n", "\n", "output", "=", "{", "\"input\"", ":", "torch", ".", "tensor", "(", "inputs", ")", ".", "long", "(", ")", ",", "\n", "\"visit_mask\"", ":", "torch", ".", "tensor", "(", "visit_mask", ")", ",", "\n", "\"code_mask\"", ":", "torch", ".", "tensor", "(", "code_mask", ")", ",", "\n", "\"labels_visit\"", ":", "torch", ".", "tensor", "(", "labels_visit", ")", ",", "\n", "'labels_entity'", ":", "torch", ".", "tensor", "(", "labels_entity", ")", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.collate_test": [[154, 190], ["max", "numpy.stack", "numpy.stack", "numpy.array", "len", "numpy.zeros", "visit_mask_pad.append", "len", "numpy.zeros", "numpy.concatenate", "inputs_pad.append", "torch.tensor().long", "torch.tensor", "torch.tensor", "len", "visit_codes.append", "len", "len", "numpy.stack", "torch.tensor"], "function", ["None"], ["", "def", "collate_test", "(", "batch", ")", ":", "\n", "    ", "seq_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "batch", "]", "\n", "max_seq_len", "=", "max", "(", "seq_lens", ")", "\n", "\n", "visit_mask_pad", "=", "[", "]", "\n", "for", "l", "in", "seq_lens", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "max_seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "[", ":", "l", "]", "=", "1", "\n", "visit_mask_pad", ".", "append", "(", "mask", ")", "\n", "", "visit_mask", "=", "np", ".", "stack", "(", "visit_mask_pad", ")", "\n", "\n", "max_visit_len", "=", "0", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "for", "visit", "in", "x", ":", "\n", "            ", "if", "max_visit_len", "<", "len", "(", "visit", ")", ":", "\n", "                ", "max_visit_len", "=", "len", "(", "visit", ")", "\n", "\n", "", "", "", "inputs_pad", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "seq_len", "=", "len", "(", "x", ")", "\n", "visit_pad", "=", "np", ".", "zeros", "(", "(", "max_seq_len", "-", "seq_len", ",", "max_visit_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "visit_codes", "=", "[", "]", "\n", "for", "visit", "in", "x", ":", "\n", "            ", "visit_len", "=", "len", "(", "visit", ")", "\n", "code_pad", "=", "visit", "+", "[", "0", "]", "*", "(", "max_visit_len", "-", "visit_len", ")", "\n", "visit_codes", ".", "append", "(", "code_pad", ")", "\n", "", "seq_pad", "=", "np", ".", "concatenate", "(", "[", "np", ".", "stack", "(", "visit_codes", ")", ",", "visit_pad", "]", ",", "axis", "=", "0", ")", "\n", "inputs_pad", ".", "append", "(", "seq_pad", ")", "\n", "\n", "", "inputs", "=", "np", ".", "stack", "(", "inputs_pad", ")", "\n", "code_mask", "=", "np", ".", "array", "(", "inputs", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "output", "=", "{", "\"input\"", ":", "torch", ".", "tensor", "(", "inputs", ")", ".", "long", "(", ")", ",", "\n", "\"visit_mask\"", ":", "torch", ".", "tensor", "(", "visit_mask", ")", ",", "\n", "\"code_mask\"", ":", "torch", ".", "tensor", "(", "code_mask", ")", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.dataset.load_data": [[192, 238], ["len", "numpy.random.permutation", "int", "int", "dataset.load_data.len_argsort"], "function", ["None"], ["", "def", "load_data", "(", "sequences", ",", "labels", ",", "labels_current_visit", ",", "train_ratio", "=", "0.8", ")", ":", "\n", "\n", "    ", "data_size", "=", "len", "(", "labels", ")", "\n", "ind", "=", "np", ".", "random", ".", "permutation", "(", "data_size", ")", "\n", "n_train", "=", "int", "(", "train_ratio", "*", "data_size", ")", "\n", "n_valid", "=", "int", "(", "_VALIDATION_RATIO", "*", "data_size", ")", "\n", "\n", "train_indices", "=", "ind", "[", ":", "n_train", "]", "\n", "valid_indices", "=", "ind", "[", "n_train", ":", "(", "n_train", "+", "n_valid", ")", "]", "\n", "test_indices", "=", "ind", "[", "(", "n_train", "+", "n_valid", ")", ":", "]", "\n", "\n", "train_set_x", "=", "[", "sequences", "[", "i", "]", "for", "i", "in", "train_indices", "]", "\n", "train_set_y", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "train_indices", "]", "\n", "train_set_y_visit", "=", "[", "labels_current_visit", "[", "i", "]", "for", "i", "in", "train_indices", "]", "\n", "\n", "test_set_x", "=", "[", "sequences", "[", "i", "]", "for", "i", "in", "test_indices", "]", "\n", "test_set_y", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "test_indices", "]", "\n", "test_set_y_visit", "=", "[", "labels_current_visit", "[", "i", "]", "for", "i", "in", "test_indices", "]", "\n", "\n", "valid_set_x", "=", "[", "sequences", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "valid_set_y", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "valid_set_y_visit", "=", "[", "labels_current_visit", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "\n", "def", "len_argsort", "(", "seq", ")", ":", "\n", "        ", "return", "sorted", "(", "range", "(", "len", "(", "seq", ")", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "seq", "[", "x", "]", ")", ")", "\n", "\n", "", "train_sorted_index", "=", "len_argsort", "(", "train_set_x", ")", "\n", "train_set_x", "=", "[", "train_set_x", "[", "i", "]", "for", "i", "in", "train_sorted_index", "]", "\n", "train_set_y", "=", "[", "train_set_y", "[", "i", "]", "for", "i", "in", "train_sorted_index", "]", "\n", "train_set_y_visit", "=", "[", "train_set_y_visit", "[", "i", "]", "for", "i", "in", "train_sorted_index", "]", "\n", "\n", "valid_sorted_index", "=", "len_argsort", "(", "valid_set_x", ")", "\n", "valid_set_x", "=", "[", "valid_set_x", "[", "i", "]", "for", "i", "in", "valid_sorted_index", "]", "\n", "valid_set_y", "=", "[", "valid_set_y", "[", "i", "]", "for", "i", "in", "valid_sorted_index", "]", "\n", "valid_set_y_visit", "=", "[", "valid_set_y_visit", "[", "i", "]", "for", "i", "in", "valid_sorted_index", "]", "\n", "\n", "test_sorted_index", "=", "len_argsort", "(", "test_set_x", ")", "\n", "test_set_x", "=", "[", "test_set_x", "[", "i", "]", "for", "i", "in", "test_sorted_index", "]", "\n", "test_set_y", "=", "[", "test_set_y", "[", "i", "]", "for", "i", "in", "test_sorted_index", "]", "\n", "test_set_y_visit", "=", "[", "test_set_y_visit", "[", "i", "]", "for", "i", "in", "test_sorted_index", "]", "\n", "\n", "train_set", "=", "(", "train_set_x", ",", "train_set_y", ",", "train_set_y_visit", ")", "\n", "valid_set", "=", "(", "valid_set_x", ",", "valid_set_y", ",", "valid_set_y_visit", ")", "\n", "test_set", "=", "(", "test_set_x", ",", "test_set_y", ",", "test_set_y_visit", ")", "\n", "\n", "return", "train_set", ",", "valid_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.data_labelling.LabelsForData.__init__": [[6, 12], ["pandas.read_csv", "pandas.read_csv", "data_labelling.LabelsForData.build_maps"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.datasets.data_labelling.LabelsForData.build_maps"], ["    ", "def", "__init__", "(", "self", ",", "ccs_multi_dx_file", ",", "ccs_single_dx_file", ")", ":", "\n", "        ", "self", ".", "ccs_multi_dx_df", "=", "pd", ".", "read_csv", "(", "ccs_multi_dx_file", ",", "header", "=", "0", ",", "dtype", "=", "object", ")", "\n", "self", ".", "ccs_single_dx_df", "=", "pd", ".", "read_csv", "(", "ccs_single_dx_file", ",", "header", "=", "0", ",", "dtype", "=", "object", ")", "\n", "self", ".", "code2single_dx", "=", "{", "}", "# label sequential diagnosis prediction data", "\n", "self", ".", "code2first_level_dx", "=", "{", "}", "# label clustering data", "\n", "self", ".", "build_maps", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.datasets.data_labelling.LabelsForData.build_maps": [[13, 24], ["data_labelling.LabelsForData.ccs_multi_dx_df.iterrows", "data_labelling.LabelsForData.ccs_single_dx_df.iterrows", "[].strip", "[].strip", "[].strip", "[].strip"], "methods", ["None"], ["", "def", "build_maps", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "row", "in", "self", ".", "ccs_multi_dx_df", ".", "iterrows", "(", ")", ":", "\n", "# print(row)", "\n", "            ", "code", "=", "row", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "level_1_cat", "=", "row", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "self", ".", "code2first_level_dx", "[", "code", "]", "=", "level_1_cat", "\n", "\n", "", "for", "i", ",", "row", "in", "self", ".", "ccs_single_dx_df", ".", "iterrows", "(", ")", ":", "\n", "            ", "code", "=", "row", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "single_cat", "=", "row", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "self", ".", "code2single_dx", "[", "code", "]", "=", "single_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.ODEEmbeddings.__init__": [[17, 24], ["torch.Module.__init__", "models.anode.ODENet", "models.anode.ODENet", "modeling.BertLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ODEEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "odeNet_los", "=", "ODENet", "(", "config", ".", "device", ",", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "odeNet_interval", "=", "ODENet", "(", "config", ".", "device", ",", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ",", "\n", "output_dim", "=", "config", ".", "hidden_size", ",", "augment_dim", "=", "10", ",", "time_dependent", "=", "True", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.ODEEmbeddings.forward": [[25, 38], ["input_states.size", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "order.ODEEmbeddings.odeNet_interval().permute", "order.ODEEmbeddings.odeNet_los", "order.ODEEmbeddings.dropout", "order.ODEEmbeddings.LayerNorm", "order.ODEEmbeddings.odeNet_interval"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_states", ")", ":", "\n", "\n", "        ", "seq_length", "=", "input_states", ".", "size", "(", "1", ")", "\n", "integration_time", "=", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "seq_length", ")", "\n", "y0", "=", "input_states", "[", ":", ",", "0", ",", ":", "]", "\n", "interval_embeddings", "=", "self", ".", "odeNet_interval", "(", "y0", ",", "integration_time", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "los_embeddings", "=", "self", ".", "odeNet_los", "(", "input_states", ")", "\n", "embeddings", "=", "input_states", "+", "interval_embeddings", "+", "los_embeddings", "\n", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.DAGAttention2D.__init__": [[41, 47], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "attention_dim_size", ")", ":", "\n", "        ", "super", "(", "DAGAttention2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_dim_size", "=", "attention_dim_size", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "in_features", ",", "attention_dim_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "attention_dim_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.DAGAttention2D.forward": [[48, 71], ["mask.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "order.DAGAttention2D.linear1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "order.DAGAttention2D.linear2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "leaves", ",", "ancestors", ",", "mask", "=", "None", ")", ":", "\n", "# concatenate the leaves and ancestors", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "leaves", "*", "mask", ",", "ancestors", "*", "mask", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Linear layer", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "\n", "# relu activation", "\n", "x", "=", "torch", ".", "relu", "(", "x", ")", "\n", "\n", "# linear layer", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "\n", "mask_attn", "=", "(", "1.0", "-", "mask", ")", "*", "VERY_NEGATIVE_NUMBER", "\n", "x", "=", "x", "+", "mask_attn", "\n", "\n", "# softmax activation", "\n", "x", "=", "torch", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "# weighted sum on ancestors", "\n", "x", "=", "(", "x", "*", "ancestors", "*", "mask", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.__init__": [[77, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedBertModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.init_bert_weights": [[81, 93], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "init_bert_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.from_pretrained": [[94, 144], ["print", "cls", "torch.load().state_dict.keys", "torch.load().state_dict.keys", "zip", "getattr", "torch.load().state_dict.copy", "torch.load().state_dict.copy", "order.PreTrainedBertModel.from_pretrained.load"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name", ",", "config", ",", "state_dict", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "'parameters in inputs: '", ",", "*", "inputs", ")", "\n", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "if", "state_dict", "is", "None", ":", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name", ",", "'pytorch_model.bin'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ")", ".", "state_dict", "(", ")", "\n", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "", "", "", "load", "(", "model", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "\n", "", "return", "model", ",", "missing_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.KnowledgeEncoder.__init__": [[150, 169], ["torch.Module.__init__", "order.DAGAttention2D", "modeling.BertEncoder", "modeling.BertAttentionDag", "modeling.BertIntermediateDag", "torch.Linear", "torch.Linear", "modeling.BertLayerNorm", "torch.Dropout", "torch.Dropout", "modeling.AttentionPooling", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "KnowledgeEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "embed_dag", "=", "None", "\n", "\n", "self", ".", "dag_attention", "=", "DAGAttention2D", "(", "2", "*", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "attention", "=", "BertAttentionDag", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediateDag", "(", "config", ")", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "self", ".", "pooling", "=", "AttentionPooling", "(", "config", ")", "\n", "\n", "self", ".", "embed_init", "=", "nn", ".", "Embedding", "(", "config", ".", "num_tree_nodes", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "embed_inputs", "=", "nn", ".", "Embedding", "(", "config", ".", "code_size", ",", "self", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.KnowledgeEncoder.forward": [[170, 218], ["order.KnowledgeEncoder.embed_init", "order.KnowledgeEncoder.embed_init", "order.KnowledgeEncoder.dag_attention", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "order.KnowledgeEncoder.embed_inputs", "order.KnowledgeEncoder.view", "order.KnowledgeEncoder.embed_dag", "order.KnowledgeEncoder.view", "code_mask.view", "code_mask.view.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "order.KnowledgeEncoder.attention", "order.KnowledgeEncoder.intermediate", "order.KnowledgeEncoder.dense", "order.KnowledgeEncoder.dropout", "order.KnowledgeEncoder.LayerNorm", "code_mask.view.unsqueeze", "attention_mask.to.to.to", "order.KnowledgeEncoder.pooling", "order.KnowledgeEncoder.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "code_mask.view.unsqueeze", "next", "next", "order.KnowledgeEncoder.parameters", "order.KnowledgeEncoder.parameters"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.from_pretrained", "home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.from_pretrained"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "code_mask", "=", "None", ",", "output_attentions", "=", "False", ")", ":", "\n", "\n", "# for knowledge graph embedding", "\n", "        ", "leaves_emb", "=", "self", ".", "embed_init", "(", "self", ".", "config", ".", "leaves_list", ")", "\n", "ancestors_emb", "=", "self", ".", "embed_init", "(", "self", ".", "config", ".", "ancestors_list", ")", "\n", "dag_emb", "=", "self", ".", "dag_attention", "(", "leaves_emb", ",", "ancestors_emb", ",", "self", ".", "config", ".", "masks_list", ")", "\n", "padding", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "dict_matrix", "=", "torch", ".", "cat", "(", "[", "padding", ",", "dag_emb", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "embed_dag", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "dict_matrix", ",", "freeze", "=", "False", ")", "\n", "\n", "# inputs embedding", "\n", "input_tensor", "=", "self", ".", "embed_inputs", "(", "input_ids", ")", "# bs, visit_len, code_len, embedding_dim", "\n", "input_shape", "=", "input_tensor", ".", "shape", "\n", "inputs", "=", "input_tensor", ".", "view", "(", "-", "1", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "3", "]", ")", "# bs * visit_len, code_len, embedding_dim", "\n", "\n", "# entity embedding", "\n", "input_tensor_dag", "=", "self", ".", "embed_dag", "(", "input_ids", ")", "\n", "# bs * visit_len, code_len, embedding_dim", "\n", "inputs_dag", "=", "input_tensor_dag", ".", "view", "(", "-", "1", ",", "input_tensor_dag", ".", "shape", "[", "2", "]", ",", "input_tensor_dag", ".", "shape", "[", "3", "]", ")", "\n", "\n", "inputs_mask", "=", "code_mask", ".", "view", "(", "-", "1", ",", "input_tensor_dag", ".", "shape", "[", "2", "]", ")", "# bs * visit_len, code_len", "\n", "\n", "# attention mask for encoder", "\n", "extended_attention_mask", "=", "inputs_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# bs * visit_len,1,1 code_len", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "VERY_NEGATIVE_NUMBER", "\n", "\n", "hidden_states_output", ",", "hidden_states_dag_output", ",", "_", ",", "_", "=", "self", ".", "attention", "(", "inputs", ",", "extended_attention_mask", ",", "inputs_dag", ",", "None", ",", "None", ",", "output_attentions", ")", "\n", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "hidden_states_output", ",", "hidden_states_dag_output", ")", "\n", "hidden_states", "=", "self", ".", "dense", "(", "intermediate_output", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "hidden_states_output", "+", "hidden_states_dag_output", ")", "\n", "\n", "# knowledge encoder", "\n", "visit_outputs", ",", "all_attentions", "=", "hidden_states", ",", "None", "\n", "\n", "# attention mask for pooling", "\n", "attention_mask", "=", "inputs_mask", ".", "unsqueeze", "(", "2", ")", "# bs * visit_len,code_len,1", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "VERY_NEGATIVE_NUMBER", "\n", "\n", "# visit attention pooling", "\n", "visit_pooling", "=", "self", ".", "pooling", "(", "visit_outputs", ",", "attention_mask", ")", "\n", "visit_outs", "=", "visit_pooling", ".", "view", "(", "-", "1", ",", "input_tensor_dag", ".", "shape", "[", "1", "]", ",", "input_tensor_dag", ".", "shape", "[", "3", "]", ")", "# bs, visit_len, embedding_dim", "\n", "\n", "return", "visit_outs", ",", "all_attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.NextDxPrediction.__init__": [[221, 234], ["order.PreTrainedBertModel.__init__", "order.KnowledgeEncoder", "modeling.BertEncoder", "order.ODEEmbeddings", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "order.NextDxPrediction.apply"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "NextDxPrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "encoder", "=", "KnowledgeEncoder", "(", "config", ")", "\n", "\n", "self", ".", "encoder_patient", "=", "BertEncoder", "(", "config", ")", "\n", "# self.position_embedding = PositionEmbeddings(config)", "\n", "self", ".", "position_embedding", "=", "ODEEmbeddings", "(", "config", ")", "\n", "\n", "self", ".", "classifier_patient", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_ccs_classes", ")", "\n", "self", ".", "classifier_entity", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_visit_classes", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.order.NextDxPrediction.forward": [[235, 270], ["visit_mask.sum", "order.NextDxPrediction.encoder", "order.NextDxPrediction.position_embedding", "visit_mask.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "order.NextDxPrediction.encoder_patient", "order.NextDxPrediction.classifier_patient", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "visit_mask.unsqueeze", "cross_entropy_patient.sum().sum", "next", "order.NextDxPrediction.parameters", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "cross_entropy_patient.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "input_ids", ",", "\n", "visit_mask", "=", "None", ",", "\n", "code_mask", "=", "None", ",", "\n", "labels_visit", "=", "None", ",", "\n", "output_attentions", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "lengths", "=", "visit_mask", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "outputs_visit", ",", "code_attentions", "=", "self", ".", "encoder", "(", "input_ids", ",", "code_mask", ",", "output_attentions", ")", "\n", "\n", "# add position embedding", "\n", "visit_outs", "=", "self", ".", "position_embedding", "(", "outputs_visit", ")", "\n", "\n", "extended_attention_mask", "=", "visit_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "VERY_NEGATIVE_NUMBER", "\n", "patient_outputs", ",", "visit_attentions", "=", "self", ".", "encoder_patient", "(", "visit_outs", ",", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ",", "\n", "output_attentions", "=", "output_attentions", ")", "\n", "\n", "prediction_scores_patient", "=", "self", ".", "classifier_patient", "(", "patient_outputs", "[", "-", "1", "]", ")", "\n", "prediction_scores_patient", "=", "torch", ".", "sigmoid", "(", "prediction_scores_patient", ")", "\n", "\n", "if", "labels_visit", "is", "not", "None", ":", "\n", "            ", "logEps", "=", "1e-8", "\n", "cross_entropy_patient", "=", "-", "(", "labels_visit", "*", "torch", ".", "log", "(", "prediction_scores_patient", "+", "logEps", ")", "+", "\n", "(", "1.", "-", "labels_visit", ")", "*", "torch", ".", "log", "(", "1.", "-", "prediction_scores_patient", "+", "logEps", ")", ")", "\n", "likelihood_patient", "=", "cross_entropy_patient", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "lengths", "\n", "loss_patient", "=", "torch", ".", "mean", "(", "likelihood_patient", ")", "\n", "\n", "total_loss", "=", "loss_patient", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores_patient", ",", "code_attentions", ",", "visit_attentions", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.AttentionPooling.__init__": [[35, 40], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AttentionPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.AttentionPooling.forward": [[41, 54], ["modeling.AttentionPooling.linear1", "modeling.AttentionPooling.linear2", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "pooling_mask", ")", ":", "\n", "        ", "pooling_score", "=", "self", ".", "linear1", "(", "input_tensor", ")", "\n", "# pooling_score = ACT2FN['relu'](pooling_score)", "\n", "pooling_score", "=", "ACT2FN", "[", "self", ".", "config", ".", "hidden_act", "]", "(", "pooling_score", ")", "\n", "\n", "pooling_score", "=", "self", ".", "linear2", "(", "pooling_score", ")", "\n", "\n", "pooling_score", "+=", "pooling_mask", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "pooling_score", ")", "\n", "\n", "attention_output", "=", "(", "attention_probs", "*", "input_tensor", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.__init__": [[59, 116], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_types", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_types", "=", "layer_types", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.from_dict": [[118, 125], ["modeling.BertConfig", "json_object.items"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.from_json_file": [[126, 132], ["cls.from_dict", "open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.__repr__": [[133, 135], ["str", "modeling.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.to_dict": [[136, 140], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.to_json_string": [[141, 144], ["json.dumps", "modeling.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayerNorm.__init__": [[147, 154], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "\"\"\"Construct a layernorm module in the TF style (epsilon inside the square root).\n        \"\"\"", "\n", "super", "(", "BertLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayerNorm.forward": [[155, 160], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEmbeddings.__init__": [[165, 180], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "modeling.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "code_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "config", ".", "position_embedding", "==", "'True'", ":", "\n", "            ", "self", ".", "is_position_embedding", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_position_embedding", "=", "False", "\n", "", "if", "self", ".", "is_position_embedding", ":", "\n", "            ", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEmbeddings.forward": [[181, 202], ["modeling.BertEmbeddings.word_embeddings", "modeling.BertEmbeddings.token_type_embeddings", "modeling.BertEmbeddings.LayerNorm", "modeling.BertEmbeddings.dropout", "input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling.BertEmbeddings.position_embeddings", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "is_position_embedding", ":", "\n", "            ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "if", "self", ".", "is_position_embedding", ":", "\n", "            ", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "words_embeddings", "+", "token_type_embeddings", "\n", "\n", "", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.PositionEmbeddings.__init__": [[205, 210], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "modeling.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PositionEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.PositionEmbeddings.forward": [[211, 223], ["input_states.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "modeling.PositionEmbeddings.position_embeddings", "modeling.PositionEmbeddings.LayerNorm", "modeling.PositionEmbeddings.dropout", "input_states.size", "position_ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_states", ")", ":", "\n", "\n", "        ", "seq_length", "=", "input_states", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_states", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "input_states", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "embeddings", "=", "input_states", "+", "position_embeddings", "\n", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.__init__": [[226, 244], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "alpha", "=", "config", ".", "alpha", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "cnn", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_attention_heads", ",", "self", ".", "num_attention_heads", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.transpose_for_scores": [[245, 249], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.forward": [[250, 288], ["modeling.BertSelfAttention.query", "modeling.BertSelfAttention.key", "modeling.BertSelfAttention.value", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling.BertSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size", "modeling.BertSelfAttention.cnn"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", "=", "False", ")", ":", "\n", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "# print(attention_scores[0][0][0][0])", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# residual connect the previous attentions.", "\n", "if", "previous_attention", "is", "not", "None", "and", "self", ".", "alpha", ">", "0", ":", "\n", "# 1*1 CNN for previous attentions", "\n", "            ", "attention_probs", "=", "self", ".", "alpha", "*", "self", ".", "cnn", "(", "previous_attention", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "attention_probs", "\n", "# # residual connection with previous attention", "\n", "# attention_probs = self.alpha * previous_attention + (1 - self.alpha) * attention_probs", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_probs", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfOutput.__init__": [[291, 296], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "modeling.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertSelfOutput.forward": [[297, 302], ["modeling.BertSelfOutput.dense", "modeling.BertSelfOutput.dropout", "modeling.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertAttention.__init__": [[305, 309], ["torch.nn.Module.__init__", "modeling.BertSelfAttention", "modeling.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertAttention.forward": [[310, 315], ["modeling.BertAttention.self", "modeling.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", "[", "0", "]", ",", "input_tensor", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertAttentionDag.__init__": [[318, 325], ["torch.nn.Module.__init__", "modeling.BertSelfAttention", "modeling.BertSelfOutput", "modeling.BertSelfAttention", "modeling.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttentionDag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n", "self", ".", "self_dag", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output_dag", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertAttentionDag.forward": [[326, 335], ["modeling.BertAttentionDag.self", "modeling.BertAttentionDag.self_dag", "modeling.BertAttentionDag.output", "modeling.BertAttentionDag.output_dag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ",", "input_tensor_dag", ",", "previous_attention", ",", "\n", "previous_attention_dag", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", ")", "\n", "self_output_dag", "=", "self", ".", "self_dag", "(", "input_tensor_dag", ",", "attention_mask", ",", "previous_attention_dag", ",", "output_attentions", ")", "\n", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", "[", "0", "]", ",", "input_tensor", ")", "\n", "attention_output_dag", "=", "self", ".", "output_dag", "(", "self_output_dag", "[", "0", "]", ",", "input_tensor_dag", ")", "\n", "outputs", "=", "(", "attention_output", ",", "attention_output_dag", ",", ")", "+", "self_output", "[", "1", ":", "]", "+", "self_output_dag", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertIntermediate.__init__": [[338, 343], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertIntermediate.forward": [[344, 348], ["modeling.BertIntermediate.dense", "modeling.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertIntermediateDag.__init__": [[351, 358], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediateDag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "dense_dag", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertIntermediateDag.forward": [[359, 365], ["modeling.BertIntermediateDag.dense", "modeling.BertIntermediateDag.dense_dag", "modeling.BertIntermediateDag.intermediate_act_fn", "hidden_states_dag.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "hidden_states_dag", ")", ":", "\n", "        ", "hidden_states_", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states_dag_", "=", "self", ".", "dense_dag", "(", "hidden_states_dag", ".", "float", "(", ")", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states_", "+", "hidden_states_dag_", ")", "\n", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertOutput.__init__": [[368, 373], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "modeling.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertOutput.forward": [[374, 380], ["modeling.BertOutput.dense", "modeling.BertOutput.dropout", "modeling.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertOutputDag.__init__": [[383, 390], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "modeling.BertLayerNorm", "modeling.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutputDag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dense_dag", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "LayerNorm_dag", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertOutputDag.forward": [[391, 401], ["modeling.BertOutputDag.dense", "modeling.BertOutputDag.dropout", "modeling.BertOutputDag.LayerNorm", "modeling.BertOutputDag.dense_dag", "modeling.BertOutputDag.dropout", "modeling.BertOutputDag.LayerNorm_dag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states_", ",", "input_tensor", ",", "input_tensor_dag", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states_", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "\n", "hidden_states_dag", "=", "self", ".", "dense_dag", "(", "hidden_states_", ")", "\n", "hidden_states_dag", "=", "self", ".", "dropout", "(", "hidden_states_dag", ")", "\n", "hidden_states_dag", "=", "self", ".", "LayerNorm_dag", "(", "hidden_states_dag", "+", "input_tensor_dag", ")", "\n", "\n", "return", "hidden_states", ",", "hidden_states_dag", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayer.__init__": [[404, 409], ["torch.nn.Module.__init__", "modeling.BertAttention", "modeling.BertIntermediate", "modeling.BertOutput"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayer.forward": [[410, 418], ["modeling.BertLayer.attention", "modeling.BertLayer.intermediate", "modeling.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", ")", "\n", "outputs", "=", "attention_output", "[", "1", ":", "]", "# add self attentions if we output attention weights", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", "[", "0", "]", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "outputs", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayerDag.__init__": [[421, 426], ["torch.nn.Module.__init__", "modeling.BertAttentionDag", "modeling.BertIntermediateDag", "modeling.BertOutputDag"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayerDag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttentionDag", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediateDag", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutputDag", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertLayerDag.forward": [[427, 437], ["modeling.BertLayerDag.attention", "modeling.BertLayerDag.intermediate", "modeling.BertLayerDag.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "hidden_states_dag", ",", "previous_attention", ",", "previous_attention_dag", ",", "\n", "output_attentions", "=", "False", ")", ":", "\n", "        ", "hidden_states_output", ",", "hidden_states_dag_output", ",", "attention_output", ",", "attention_output_dag", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "hidden_states_dag", ",", "previous_attention", ",", "\n", "previous_attention_dag", ",", "output_attentions", ")", "\n", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "hidden_states_output", ",", "hidden_states_dag_output", ")", "\n", "layer_output", ",", "layer_output_dag", "=", "self", ".", "output", "(", "intermediate_output", ",", "hidden_states_output", ",", "hidden_states_dag_output", ")", "\n", "return", "layer_output", ",", "layer_output_dag", ",", "attention_output", ",", "attention_output_dag", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEncoder.__init__": [[440, 447], ["torch.nn.Module.__init__", "modeling.BertLayer", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers.append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayer", "(", "config", ")", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "copy", ".", "deepcopy", "(", "layer", ")", ")", "\n", "", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEncoder.forward": [[448, 466], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ",", "\n", "output_attentions", "=", "False", ",", "previous_attention", "=", "None", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "all_attentions", "=", "(", ")", "if", "output_attentions", "else", "None", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "# print(hidden_states[0][0][0])", "\n", "            ", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "previous_attention", ",", "output_attentions", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "\n", "", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "previous_attention", "=", "layer_outputs", "[", "1", "]", "\n", "if", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", ",", "all_attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEncoderDag.__init__": [[469, 476], ["torch.nn.Module.__init__", "modeling.BertLayerDag", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers.append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoderDag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayerDag", "(", "config", ")", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "copy", ".", "deepcopy", "(", "layer", ")", ")", "\n", "", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.BertEncoderDag.forward": [[477, 498], ["layer_module", "all_encoder_layers.append", "all_encoder_dags.append", "all_encoder_layers.append", "all_encoder_dags.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "dag_inputs", ",", "output_all_encoded_layers", "=", "True", ",", "\n", "output_attentions", "=", "False", ",", "previous_attention", "=", "None", ",", "previous_attention_dag", "=", "None", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "all_encoder_dags", "=", "[", "]", "\n", "all_attentions", "=", "(", ")", "if", "output_attentions", "else", "None", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", ",", "dag_inputs", ",", "attentions", ",", "attentions_dag", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "\n", "dag_inputs", ",", "previous_attention", ",", "\n", "previous_attention_dag", ",", "\n", "output_attentions", ")", "\n", "previous_attention", "=", "attentions", "\n", "previous_attention_dag", "=", "attentions_dag", "\n", "if", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "all_encoder_dags", ".", "append", "(", "dag_inputs", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "all_encoder_dags", ".", "append", "(", "dag_inputs", ")", "\n", "", "return", "all_encoder_layers", ",", "all_encoder_dags", ",", "all_attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.gelu": [[19, 25], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.modeling.swish": [[27, 29], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.DescTokenizer.__init__": [[57, 63], ["pickle.load", "tokenization.DescTokenizer.decs_tokenize", "open"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.tokenization.DescTokenizer.decs_tokenize"], ["    ", "def", "__init__", "(", "self", ",", "code2desc_file", ")", ":", "\n", "        ", "self", ".", "code2desc", "=", "pickle", ".", "load", "(", "open", "(", "code2desc_file", ",", "'rb'", ")", ")", "\n", "# self.code2desc['[UNK]'] = '[UNK]'", "\n", "# self.code2desc['[MASK]'] = '[MASK]'", "\n", "self", ".", "code2indexed_tokens", "=", "{", "}", "\n", "self", ".", "decs_tokenize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.DescTokenizer.decs_tokenize": [[64, 83], ["pytorch_pretrained_bert.BertTokenizer.from_pretrained", "tokenization.DescTokenizer.code2desc.items", "tokenization.DescTokenizer.code2indexed_tokens.items", "pytorch_pretrained_bert.BertTokenizer.from_pretrained.tokenize", "pytorch_pretrained_bert.BertTokenizer.from_pretrained.convert_tokens_to_ids", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.order.PreTrainedBertModel.from_pretrained", "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.tokenize", "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.convert_tokens_to_ids"], ["", "def", "decs_tokenize", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "origin_tokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "# tokenize the description of each code", "\n", "max_len", "=", "0", "\n", "for", "code", ",", "desc", "in", "self", ".", "code2desc", ".", "items", "(", ")", ":", "\n", "            ", "tokenized_text", "=", "tokenizer", ".", "tokenize", "(", "desc", ")", "\n", "indexed_tokens", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "self", ".", "code2indexed_tokens", "[", "code", "]", "=", "indexed_tokens", "\n", "len_tokens", "=", "len", "(", "indexed_tokens", ")", "\n", "if", "len_tokens", ">", "max_len", ":", "\n", "                ", "max_len", "=", "len_tokens", "\n", "# padding the indexed tokens", "\n", "", "", "for", "id", ",", "inds", "in", "self", ".", "code2indexed_tokens", ".", "items", "(", ")", ":", "\n", "            ", "ln", "=", "len", "(", "inds", ")", "\n", "dif", "=", "max_len", "-", "ln", "\n", "if", "dif", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "self", ".", "code2indexed_tokens", "[", "id", "]", "=", "np", ".", "array", "(", "inds", "+", "[", "0", "]", "*", "dif", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.DescTokenizer.tokenize": [[84, 92], ["split_tokens.append", "split_vectors.append", "numpy.stack"], "methods", ["None"], ["", "", "", "def", "tokenize", "(", "self", ",", "codes", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "split_vectors", "=", "[", "]", "\n", "for", "code", "in", "codes", ":", "\n", "            ", "token_vec", "=", "self", ".", "code2indexed_tokens", "[", "code", "]", "\n", "split_tokens", ".", "append", "(", "code", ")", "\n", "split_vectors", ".", "append", "(", "token_vec", ")", "\n", "", "return", "split_tokens", ",", "np", ".", "stack", "(", "split_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.EntityTokenizer.__init__": [[95, 97], ["tokenization.load_vocab_ent"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.tokenization.load_vocab_ent"], ["    ", "def", "__init__", "(", "self", ",", "ent_vocab_file", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab_ent", "(", "ent_vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.EntityTokenizer.tokenize": [[98, 105], ["tokenization.whitespace_tokenize", "split_tokens.append", "ids.append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "split_tokens", ".", "append", "(", "token", ")", "\n", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "return", "split_tokens", ",", "np", ".", "stack", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.__init__": [[108, 111], ["tokenization.load_vocab_seqs", "collections.OrderedDict", "tokenization.SeqsTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.tokenization.load_vocab_seqs"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab_seqs", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.tokenize": [[112, 119], ["tokenization.whitespace_tokenize", "split_tokens.append", "ids.append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "split_tokens", ".", "append", "(", "token", ")", "\n", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "return", "split_tokens", ",", "np", ".", "stack", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.convert_tokens_to_ids": [[120, 126], ["numpy.stack", "ids.append"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "return", "np", ".", "stack", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.SeqsTokenizer.convert_ids_to_tokens": [[127, 132], ["tokens.append"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "tokens", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "ids_to_tokens", "[", "i", "]", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.load_vocab_seqs": [[14, 30], ["collections.OrderedDict", "len", "open", "reader.readline", "token.strip.strip", "len"], "function", ["None"], ["def", "load_vocab_seqs", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "\n", "special_words", "=", "[", "'[PAD]'", ",", "'[UNK]'", ",", "'[CLS]'", ",", "'[SEP]'", ",", "'[MASK]'", ",", "'[SPAN1M]'", ",", "'[SPAN3M]'", ",", "\n", "'[SPAN6M]'", ",", "'[SPAN12M]'", ",", "'[SPAN12M+]'", "]", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "word", "in", "special_words", ":", "\n", "        ", "vocab", "[", "word", "]", "=", "len", "(", "vocab", ")", "\n", "", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "len", "(", "vocab", ")", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.load_vocab_ent": [[32, 45], ["collections.OrderedDict", "open", "reader.readline", "reader.readline.strip().split", "int", "reader.readline.strip"], "function", ["None"], ["", "def", "load_vocab_ent", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "vocab", "[", "'[UNK]'", "]", "=", "0", "\n", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "line", "=", "token", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "vocab", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "+", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.tokenization.whitespace_tokenize": [[47, 54], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODEFunc.__init__": [[28, 49], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Softplus", "torch.Softplus"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "device", ",", "data_dim", ",", "hidden_dim", ",", "augment_dim", "=", "0", ",", "time_dependent", "=", "False", ",", "non_linearity", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ODEFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "augment_dim", "=", "augment_dim", "\n", "self", ".", "data_dim", "=", "data_dim", "\n", "self", ".", "input_dim", "=", "data_dim", "+", "augment_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "nfe", "=", "0", "# Number of function evaluations", "\n", "self", ".", "time_dependent", "=", "time_dependent", "\n", "\n", "if", "time_dependent", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", "+", "1", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "self", ".", "input_dim", ")", "\n", "\n", "if", "non_linearity", "==", "'relu'", ":", "\n", "            ", "self", ".", "non_linearity", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "non_linearity", "==", "'softplus'", ":", "\n", "            ", "self", ".", "non_linearity", "=", "nn", ".", "Softplus", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODEFunc.forward": [[50, 76], ["anode.ODEFunc.non_linearity", "anode.ODEFunc.fc2", "anode.ODEFunc.non_linearity", "anode.ODEFunc.fc3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "anode.ODEFunc.fc1", "anode.ODEFunc.fc1", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        t : torch.Tensor\n            Current time. Shape (1,).\n        x : torch.Tensor\n            Shape (batch_size, input_dim)\n        \"\"\"", "\n", "# Forward pass of model corresponds to one function evaluation, so", "\n", "# increment counter", "\n", "self", ".", "nfe", "+=", "1", "\n", "if", "self", ".", "time_dependent", ":", "\n", "# Shape (batch_size, 1)", "\n", "            ", "t_vec", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "*", "t", "\n", "# Shape (batch_size, data_dim + 1)", "\n", "t_and_x", "=", "torch", ".", "cat", "(", "[", "t_vec", ",", "x", "]", ",", "1", ")", "\n", "# Shape (batch_size, hidden_dim)", "\n", "out", "=", "self", ".", "fc1", "(", "t_and_x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "fc1", "(", "x", ")", "\n", "", "out", "=", "self", ".", "non_linearity", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "out", "=", "self", ".", "non_linearity", "(", "out", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODEBlock.__init__": [[94, 101], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "device", ",", "odefunc", ",", "is_conv", "=", "False", ",", "tol", "=", "1e-3", ",", "adjoint", "=", "False", ")", ":", "\n", "        ", "super", "(", "ODEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adjoint", "=", "adjoint", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "odefunc", "=", "odefunc", "\n", "self", ".", "tol", "=", "tol", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODEBlock.forward": [[102, 149], ["torch.tensor().float().type_as", "torch.tensor().float().type_as", "torch.tensor().float().type_as", "torch.tensor().float().type_as", "eval_times.type_as", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "eval_times", "=", "None", ")", ":", "\n", "        ", "\"\"\"Solves ODE starting from x.\n        Parameters\n        ----------\n        x : torch.Tensor\n            Shape (batch_size, self.odefunc.data_dim)\n        eval_times : None or torch.Tensor\n            If None, returns solution of ODE at final time t=1. If torch.Tensor\n            then returns full ODE trajectory evaluated at points in eval_times.\n        \"\"\"", "\n", "# Forward pass corresponds to solving ODE, so reset number of function", "\n", "# evaluations counter", "\n", "self", ".", "odefunc", ".", "nfe", "=", "0", "\n", "\n", "if", "eval_times", "is", "None", ":", "\n", "            ", "integration_time", "=", "torch", ".", "tensor", "(", "[", "0", ",", "1", "]", ")", ".", "float", "(", ")", ".", "type_as", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "integration_time", "=", "eval_times", ".", "type_as", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "odefunc", ".", "augment_dim", ">", "0", ":", "\n", "            ", "if", "self", ".", "is_conv", ":", "\n", "# Add augmentation", "\n", "                ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "aug", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "odefunc", ".", "augment_dim", ",", "height", ",", "width", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Shape (batch_size, channels + augment_dim, height, width)", "\n", "x_aug", "=", "torch", ".", "cat", "(", "[", "x", ",", "aug", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "# Add augmentation", "\n", "                ", "aug", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "odefunc", ".", "augment_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Shape (batch_size, data_dim + augment_dim)", "\n", "x_aug", "=", "torch", ".", "cat", "(", "[", "x", ",", "aug", "]", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "x_aug", "=", "x", "\n", "\n", "", "if", "self", ".", "adjoint", ":", "\n", "            ", "out", "=", "odeint_adjoint", "(", "self", ".", "odefunc", ",", "x_aug", ",", "integration_time", ",", "\n", "rtol", "=", "self", ".", "tol", ",", "atol", "=", "self", ".", "tol", ",", "method", "=", "'euler'", ",", "\n", "options", "=", "{", "'max_num_steps'", ":", "MAX_NUM_STEPS", "}", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "odeint", "(", "self", ".", "odefunc", ",", "x_aug", ",", "integration_time", ",", "\n", "rtol", "=", "self", ".", "tol", ",", "atol", "=", "self", ".", "tol", ",", "method", "=", "'euler'", ",", "\n", "options", "=", "{", "'max_num_steps'", ":", "MAX_NUM_STEPS", "}", ")", "\n", "\n", "", "if", "eval_times", "is", "None", ":", "\n", "            ", "return", "out", "[", "1", "]", "# Return only final time", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__": [[176, 192], ["torch.Module.__init__", "anode.ODEFunc", "anode.ODEBlock", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.__init__"], ["def", "__init__", "(", "self", ",", "device", ",", "data_dim", ",", "hidden_dim", ",", "output_dim", "=", "1", ",", "\n", "augment_dim", "=", "0", ",", "time_dependent", "=", "False", ",", "non_linearity", "=", "'relu'", ",", "\n", "tol", "=", "1e-3", ",", "adjoint", "=", "False", ")", ":", "\n", "        ", "super", "(", "ODENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "data_dim", "=", "data_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "augment_dim", "=", "augment_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "time_dependent", "=", "time_dependent", "\n", "self", ".", "tol", "=", "tol", "\n", "\n", "odefunc", "=", "ODEFunc", "(", "device", ",", "data_dim", ",", "hidden_dim", ",", "augment_dim", ",", "time_dependent", ",", "non_linearity", ")", "\n", "\n", "self", ".", "odeblock", "=", "ODEBlock", "(", "device", ",", "odefunc", ",", "tol", "=", "tol", ",", "adjoint", "=", "adjoint", ")", "\n", "self", ".", "linear_layer", "=", "nn", ".", "Linear", "(", "self", ".", "odeblock", ".", "odefunc", ".", "input_dim", ",", "self", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xueping_setor.models.anode.ODENet.forward": [[193, 197], ["anode.ODENet.odeblock", "anode.ODENet.linear_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "eval_times", "=", "None", ")", ":", "\n", "        ", "features", "=", "self", ".", "odeblock", "(", "x", ",", "eval_times", ")", "\n", "pred", "=", "self", ".", "linear_layer", "(", "features", ")", "\n", "return", "pred", "\n", "\n"]]}