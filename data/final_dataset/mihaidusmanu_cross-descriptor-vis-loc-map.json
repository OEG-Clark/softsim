{"home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.__init__": [[95, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean": [[99, 101], ["None"], "methods", ["None"], ["", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add": [[102, 105], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "loss", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.parse_arguments": [[23, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training script'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'random seed for numpy and PyTorch'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the dataset'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--features'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'list of descriptors to consider'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--initial_checkpoint'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to the initial checkpoint'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of training epochs'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'learning rate'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'batch size'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of workers for data loading'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'loss logging interval'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint_directory'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints'", ",", "\n", "help", "=", "'directory for training checkpoints'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint_prefix'", ",", "type", "=", "str", ",", "default", "=", "'multi'", ",", "\n", "help", "=", "'prefix for training checkpoints'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'consistency loss weight'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'margin for the negative margin loss'", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.run_epoch": [[108, 170], ["train.UpdatingMean", "train.UpdatingMean", "train.UpdatingMean", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "tqdm.tqdm", "log_file.write", "log_file.flush", "train.UpdatingMean.mean", "enumerate", "batch.keys", "loss_function", "train.UpdatingMean.add", "train.UpdatingMean.add", "train.UpdatingMean.add", "tqdm.tqdm.set_postfix", "len", "batch[].to", "optimizer.zero_grad", "loss.data.cpu().numpy", "log_file.write", "loss.backward", "optimizer.step", "train.UpdatingMean.mean", "train.UpdatingMean.mean", "train.UpdatingMean.mean", "loss.data.cpu", "train.UpdatingMean.mean", "train.UpdatingMean.mean", "train.UpdatingMean.mean", "len", "train.UpdatingMean.mean", "train.UpdatingMean.mean", "train.UpdatingMean.mean"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean"], ["", "", "def", "run_epoch", "(", "\n", "encoders", ",", "\n", "decoders", ",", "\n", "loss_function", ",", "\n", "optimizer", ",", "\n", "dataloader", ",", "\n", "device", ",", "\n", "log_file", ",", "train", "=", "True", "\n", ")", ":", "\n", "    ", "epoch_loss", "=", "UpdatingMean", "(", ")", "\n", "epoch_t_loss", "=", "UpdatingMean", "(", ")", "\n", "epoch_e_loss", "=", "UpdatingMean", "(", ")", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "train", ")", "\n", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", "\n", "for", "batch_idx", ",", "batch", "in", "progress_bar", ":", "\n", "# Move batch to device.", "\n", "        ", "for", "key", "in", "batch", ".", "keys", "(", ")", ":", "\n", "            ", "batch", "[", "key", "]", "=", "batch", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Reset gradient if needed.", "\n", "", "if", "train", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Compute loss.", "\n", "", "loss", ",", "(", "t_loss", ",", "e_loss", ")", "=", "loss_function", "(", "encoders", ",", "decoders", ",", "batch", ",", "device", ")", "\n", "\n", "# Add loss to history.", "\n", "epoch_loss", ".", "add", "(", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "epoch_t_loss", ".", "add", "(", "t_loss", ")", "\n", "epoch_e_loss", ".", "add", "(", "e_loss", ")", "\n", "\n", "# Update progress bar.", "\n", "progress_bar", ".", "set_postfix", "(", "\n", "loss", "=", "(", "'%.4f'", "%", "epoch_loss", ".", "mean", "(", ")", ")", ",", "\n", "t_loss", "=", "(", "'%.4f'", "%", "epoch_t_loss", ".", "mean", "(", ")", ")", ",", "\n", "e_loss", "=", "(", "'%.4f'", "%", "epoch_e_loss", ".", "mean", "(", ")", ")", "\n", ")", "\n", "\n", "# Update logs.", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "log_file", ".", "write", "(", "'[%s] epoch %02d - batch %04d / %04d - avg_loss: %f, avg_t_loss: %f, avg_e_loss: %f\\n'", "%", "(", "\n", "'train'", "if", "train", "else", "'valid'", ",", "\n", "epoch_idx", ",", "batch_idx", ",", "len", "(", "dataloader", ")", ",", "\n", "epoch_loss", ".", "mean", "(", ")", ",", "epoch_t_loss", ".", "mean", "(", ")", ",", "epoch_e_loss", ".", "mean", "(", ")", "\n", ")", ")", "\n", "\n", "# Backprop.", "\n", "", "if", "train", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Update logs.", "\n", "", "", "log_file", ".", "write", "(", "'[%s] epoch %02d - avg_loss: %f, avg_t_loss: %f, avg_e_loss: %f\\n'", "%", "(", "\n", "'train'", "if", "train", "else", "'valid'", ",", "\n", "epoch_idx", ",", "\n", "epoch_loss", ".", "mean", "(", ")", ",", "epoch_t_loss", ".", "mean", "(", ")", ",", "epoch_e_loss", ".", "mean", "(", ")", "\n", ")", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n", "return", "epoch_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.networks.MLP.__init__": [[7, 58], ["torch.Module.__init__", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "networks.MLP.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "last_activation.lower", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "last_activation.lower", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.BRIEFDescriptor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_channels", ",", "\n", "use_cuda", "=", "True", ",", "\n", "use_bn", "=", "False", ",", "\n", "last_activation", "=", "None", ",", "\n", "l2_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Retrieve from num_channels.", "\n", "source_num_channels", "=", "num_channels", "[", "0", "]", "\n", "target_num_channels", "=", "num_channels", "[", "-", "1", "]", "\n", "hidden_num_channels", "=", "num_channels", "[", "1", ":", "-", "1", "]", "\n", "\n", "# Prepare layers.", "\n", "layers", "=", "[", "]", "\n", "previous_num_channels", "=", "source_num_channels", "\n", "for", "current_num_channels", "in", "hidden_num_channels", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "previous_num_channels", ",", "current_num_channels", ")", "\n", ")", "\n", "if", "use_bn", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "nn", ".", "BatchNorm1d", "(", "current_num_channels", ")", "\n", ")", "\n", "", "layers", ".", "append", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "previous_num_channels", "=", "current_num_channels", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "previous_num_channels", ",", "target_num_channels", ")", ")", "\n", "\n", "# Make a sequential model.", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# Last activation.", "\n", "if", "last_activation", "is", "None", ":", "\n", "            ", "self", ".", "last_activation", "=", "None", "\n", "", "elif", "last_activation", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "            ", "self", ".", "last_activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "last_activation", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "last_activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown activation \"%s\".'", "%", "last_activation", ")", "\n", "\n", "# L2-normalize output.", "\n", "", "self", ".", "l2_norm", "=", "l2_norm", "\n", "\n", "# Move to GPU if needed.", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.networks.MLP.forward": [[59, 66], ["networks.MLP.network", "networks.MLP.last_activation", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "output", "=", "self", ".", "network", "(", "batch", ")", "\n", "if", "self", ".", "last_activation", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "last_activation", "(", "output", ")", "\n", "", "if", "self", ".", "l2_norm", ":", "\n", "            ", "output", "=", "F", ".", "normalize", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect": [[143, 148], ["sqlite3.connect"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect"], ["    ", "@", "staticmethod", "\n", "def", "connect", "(", "database_path", ")", ":", "\n", "        ", "db", "=", "sqlite3", ".", "connect", "(", "database_path", ",", "factory", "=", "COLMAPDatabase", ")", "\n", "db", ".", "path", "=", "database_path", "\n", "return", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.__init__": [[150, 169], ["sqlite3.Connection.__init__", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript", "database.COLMAPDatabase.executescript"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.BRIEFDescriptor.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "COLMAPDatabase", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "path", "=", "None", "\n", "\n", "self", ".", "create_tables", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_ALL", ")", "\n", "self", ".", "create_cameras_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_CAMERAS_TABLE", ")", "\n", "self", ".", "create_descriptors_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_DESCRIPTORS_TABLE", ")", "\n", "self", ".", "create_images_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_IMAGES_TABLE", ")", "\n", "self", ".", "create_two_view_geometries_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_TWO_VIEW_GEOMETRIES_TABLE", ")", "\n", "self", ".", "create_keypoints_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_KEYPOINTS_TABLE", ")", "\n", "self", ".", "create_matches_table", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_MATCHES_TABLE", ")", "\n", "self", ".", "create_name_index", "=", "lambda", ":", "self", ".", "executescript", "(", "CREATE_NAME_INDEX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_camera": [[170, 178], ["numpy.asarray", "database.COLMAPDatabase.execute", "database.array_to_blob"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob"], ["", "def", "add_camera", "(", "self", ",", "model", ",", "width", ",", "height", ",", "params", ",", "\n", "prior_focal_length", "=", "False", ",", "camera_id", "=", "None", ")", ":", "\n", "        ", "params", "=", "np", ".", "asarray", "(", "params", ",", "np", ".", "float64", ")", "\n", "cursor", "=", "self", ".", "execute", "(", "\n", "\"INSERT INTO cameras VALUES (?, ?, ?, ?, ?, ?)\"", ",", "\n", "(", "camera_id", ",", "model", ",", "width", ",", "height", ",", "array_to_blob", "(", "params", ")", ",", "\n", "prior_focal_length", ")", ")", "\n", "return", "cursor", ".", "lastrowid", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_image": [[179, 186], ["numpy.zeros", "numpy.zeros", "database.COLMAPDatabase.execute"], "methods", ["None"], ["", "def", "add_image", "(", "self", ",", "name", ",", "camera_id", ",", "\n", "prior_q", "=", "np", ".", "zeros", "(", "4", ")", ",", "prior_t", "=", "np", ".", "zeros", "(", "3", ")", ",", "image_id", "=", "None", ")", ":", "\n", "        ", "cursor", "=", "self", ".", "execute", "(", "\n", "\"INSERT INTO images VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"", ",", "\n", "(", "image_id", ",", "name", ",", "camera_id", ",", "prior_q", "[", "0", "]", ",", "prior_q", "[", "1", "]", ",", "prior_q", "[", "2", "]", ",", "\n", "prior_q", "[", "3", "]", ",", "prior_t", "[", "0", "]", ",", "prior_t", "[", "1", "]", ",", "prior_t", "[", "2", "]", ")", ")", "\n", "return", "cursor", ".", "lastrowid", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_keypoints": [[187, 195], ["numpy.asarray", "database.COLMAPDatabase.execute", "len", "database.array_to_blob"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob"], ["", "def", "add_keypoints", "(", "self", ",", "image_id", ",", "keypoints", ")", ":", "\n", "        ", "assert", "(", "len", "(", "keypoints", ".", "shape", ")", "==", "2", ")", "\n", "assert", "(", "keypoints", ".", "shape", "[", "1", "]", "in", "[", "2", ",", "4", ",", "6", "]", ")", "\n", "\n", "keypoints", "=", "np", ".", "asarray", "(", "keypoints", ",", "np", ".", "float32", ")", "\n", "self", ".", "execute", "(", "\n", "\"INSERT INTO keypoints VALUES (?, ?, ?, ?)\"", ",", "\n", "(", "image_id", ",", ")", "+", "keypoints", ".", "shape", "+", "(", "array_to_blob", "(", "keypoints", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_descriptors": [[196, 201], ["numpy.ascontiguousarray", "database.COLMAPDatabase.execute", "database.array_to_blob"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob"], ["", "def", "add_descriptors", "(", "self", ",", "image_id", ",", "descriptors", ")", ":", "\n", "        ", "descriptors", "=", "np", ".", "ascontiguousarray", "(", "descriptors", ",", "np", ".", "uint8", ")", "\n", "self", ".", "execute", "(", "\n", "\"INSERT INTO descriptors VALUES (?, ?, ?, ?)\"", ",", "\n", "(", "image_id", ",", ")", "+", "descriptors", ".", "shape", "+", "(", "array_to_blob", "(", "descriptors", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_matches": [[202, 214], ["database.image_ids_to_pair_id", "numpy.asarray", "database.COLMAPDatabase.execute", "len", "database.array_to_blob"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob"], ["", "def", "add_matches", "(", "self", ",", "image_id1", ",", "image_id2", ",", "matches", ")", ":", "\n", "        ", "assert", "(", "len", "(", "matches", ".", "shape", ")", "==", "2", ")", "\n", "assert", "(", "matches", ".", "shape", "[", "1", "]", "==", "2", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ",", "np", ".", "uint32", ")", "\n", "self", ".", "execute", "(", "\n", "\"INSERT INTO matches VALUES (?, ?, ?, ?)\"", ",", "\n", "(", "pair_id", ",", ")", "+", "matches", ".", "shape", "+", "(", "array_to_blob", "(", "matches", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_two_view_geometry": [[215, 232], ["numpy.eye", "numpy.eye", "numpy.eye", "database.image_ids_to_pair_id", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "database.COLMAPDatabase.execute", "len", "database.array_to_blob", "database.array_to_blob", "database.array_to_blob", "database.array_to_blob"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob"], ["", "def", "add_two_view_geometry", "(", "self", ",", "image_id1", ",", "image_id2", ",", "matches", ",", "\n", "F", "=", "np", ".", "eye", "(", "3", ")", ",", "E", "=", "np", ".", "eye", "(", "3", ")", ",", "H", "=", "np", ".", "eye", "(", "3", ")", ",", "config", "=", "2", ")", ":", "\n", "        ", "assert", "(", "len", "(", "matches", ".", "shape", ")", "==", "2", ")", "\n", "assert", "(", "matches", ".", "shape", "[", "1", "]", "==", "2", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ",", "np", ".", "uint32", ")", "\n", "F", "=", "np", ".", "asarray", "(", "F", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "E", "=", "np", ".", "asarray", "(", "E", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "H", "=", "np", ".", "asarray", "(", "H", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "execute", "(", "\n", "\"INSERT INTO two_view_geometries VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"", ",", "\n", "(", "pair_id", ",", ")", "+", "matches", ".", "shape", "+", "(", "array_to_blob", "(", "matches", ")", ",", "config", ",", "\n", "array_to_blob", "(", "F", ")", ",", "array_to_blob", "(", "E", ")", ",", "array_to_blob", "(", "H", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.image_ids_to_pair_id": [[113, 117], ["None"], "function", ["None"], ["def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "image_id1", ",", "image_id2", "=", "image_id2", ",", "image_id1", "\n", "", "return", "image_id1", "*", "MAX_IMAGE_ID", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.pair_id_to_image_ids": [[119, 123], ["None"], "function", ["None"], ["", "def", "pair_id_to_image_ids", "(", "pair_id", ")", ":", "\n", "    ", "image_id2", "=", "pair_id", "%", "MAX_IMAGE_ID", "\n", "image_id1", "=", "(", "pair_id", "-", "image_id2", ")", "/", "MAX_IMAGE_ID", "\n", "return", "image_id1", ",", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.array_to_blob": [[125, 130], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["", "def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.blob_to_array": [[132, 139], ["numpy.zeros", "numpy.fromstring().reshape", "numpy.frombuffer().reshape", "numpy.fromstring", "numpy.frombuffer", "numpy.np.float64", "numpy.np.float64", "numpy.np.float32", "numpy.np.uint32"], "function", ["None"], ["", "", "def", "blob_to_array", "(", "blob", ",", "dtype", ",", "shape", "=", "(", "-", "1", ",", ")", ")", ":", "\n", "    ", "if", "blob", "is", "None", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "np", ".", "fromstring", "(", "blob", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "frombuffer", "(", "blob", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.example_usage": [[234, 355], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.exists", "database.COLMAPDatabase.connect", "COLMAPDatabase.connect.create_tables", "COLMAPDatabase.connect.add_camera", "COLMAPDatabase.connect.add_camera", "COLMAPDatabase.connect.add_image", "COLMAPDatabase.connect.add_image", "COLMAPDatabase.connect.add_image", "COLMAPDatabase.connect.add_image", "COLMAPDatabase.connect.add_keypoints", "COLMAPDatabase.connect.add_keypoints", "COLMAPDatabase.connect.add_keypoints", "COLMAPDatabase.connect.add_keypoints", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "COLMAPDatabase.connect.add_matches", "COLMAPDatabase.connect.add_matches", "COLMAPDatabase.connect.add_matches", "COLMAPDatabase.connect.commit", "COLMAPDatabase.connect.execute", "next", "database.blob_to_array", "numpy.allclose", "next", "database.blob_to_array", "numpy.allclose", "dict", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "dict", "numpy.all", "numpy.all", "numpy.all", "COLMAPDatabase.connect.close", "os.path.exists", "print", "numpy.array", "numpy.array", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "database.image_ids_to_pair_id", "os.remove", "database.blob_to_array", "COLMAPDatabase.connect.execute", "database.pair_id_to_image_ids", "database.blob_to_array", "COLMAPDatabase.connect.execute"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_camera", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_camera", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_image", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_image", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_image", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_image", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_keypoints", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_keypoints", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_keypoints", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_keypoints", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_matches", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_matches", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.add_matches", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.pair_id_to_image_ids", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array"], ["", "", "def", "example_usage", "(", ")", ":", "\n", "    ", "import", "os", "\n", "import", "argparse", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--database_path\"", ",", "default", "=", "\"database.db\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "database_path", ")", ":", "\n", "        ", "print", "(", "\"ERROR: database path already exists -- will not modify it.\"", ")", "\n", "return", "\n", "\n", "# Open the database.", "\n", "\n", "", "db", "=", "COLMAPDatabase", ".", "connect", "(", "args", ".", "database_path", ")", "\n", "\n", "# For convenience, try creating all the tables upfront.", "\n", "\n", "db", ".", "create_tables", "(", ")", "\n", "\n", "# Create dummy cameras.", "\n", "\n", "model1", ",", "width1", ",", "height1", ",", "params1", "=", "0", ",", "1024", ",", "768", ",", "np", ".", "array", "(", "(", "1024.", ",", "512.", ",", "384.", ")", ")", "\n", "model2", ",", "width2", ",", "height2", ",", "params2", "=", "2", ",", "1024", ",", "768", ",", "np", ".", "array", "(", "(", "1024.", ",", "512.", ",", "384.", ",", "0.1", ")", ")", "\n", "\n", "camera_id1", "=", "db", ".", "add_camera", "(", "model1", ",", "width1", ",", "height1", ",", "params1", ")", "\n", "camera_id2", "=", "db", ".", "add_camera", "(", "model2", ",", "width2", ",", "height2", ",", "params2", ")", "\n", "\n", "# Create dummy images.", "\n", "\n", "image_id1", "=", "db", ".", "add_image", "(", "\"image1.png\"", ",", "camera_id1", ")", "\n", "image_id2", "=", "db", ".", "add_image", "(", "\"image2.png\"", ",", "camera_id1", ")", "\n", "image_id3", "=", "db", ".", "add_image", "(", "\"image3.png\"", ",", "camera_id2", ")", "\n", "image_id4", "=", "db", ".", "add_image", "(", "\"image4.png\"", ",", "camera_id2", ")", "\n", "\n", "# Create dummy keypoints.", "\n", "#", "\n", "# Note that COLMAP supports:", "\n", "#      - 2D keypoints: (x, y)", "\n", "#      - 4D keypoints: (x, y, theta, scale)", "\n", "#      - 6D affine keypoints: (x, y, a_11, a_12, a_21, a_22)", "\n", "\n", "num_keypoints", "=", "1000", "\n", "keypoints1", "=", "np", ".", "random", ".", "rand", "(", "num_keypoints", ",", "2", ")", "*", "(", "width1", ",", "height1", ")", "\n", "keypoints2", "=", "np", ".", "random", ".", "rand", "(", "num_keypoints", ",", "2", ")", "*", "(", "width1", ",", "height1", ")", "\n", "keypoints3", "=", "np", ".", "random", ".", "rand", "(", "num_keypoints", ",", "2", ")", "*", "(", "width2", ",", "height2", ")", "\n", "keypoints4", "=", "np", ".", "random", ".", "rand", "(", "num_keypoints", ",", "2", ")", "*", "(", "width2", ",", "height2", ")", "\n", "\n", "db", ".", "add_keypoints", "(", "image_id1", ",", "keypoints1", ")", "\n", "db", ".", "add_keypoints", "(", "image_id2", ",", "keypoints2", ")", "\n", "db", ".", "add_keypoints", "(", "image_id3", ",", "keypoints3", ")", "\n", "db", ".", "add_keypoints", "(", "image_id4", ",", "keypoints4", ")", "\n", "\n", "# Create dummy matches.", "\n", "\n", "M", "=", "50", "\n", "matches12", "=", "np", ".", "random", ".", "randint", "(", "num_keypoints", ",", "size", "=", "(", "M", ",", "2", ")", ")", "\n", "matches23", "=", "np", ".", "random", ".", "randint", "(", "num_keypoints", ",", "size", "=", "(", "M", ",", "2", ")", ")", "\n", "matches34", "=", "np", ".", "random", ".", "randint", "(", "num_keypoints", ",", "size", "=", "(", "M", ",", "2", ")", ")", "\n", "\n", "db", ".", "add_matches", "(", "image_id1", ",", "image_id2", ",", "matches12", ")", "\n", "db", ".", "add_matches", "(", "image_id2", ",", "image_id3", ",", "matches23", ")", "\n", "db", ".", "add_matches", "(", "image_id3", ",", "image_id4", ",", "matches34", ")", "\n", "\n", "# Commit the data to the file.", "\n", "\n", "db", ".", "commit", "(", ")", "\n", "\n", "# Read and check cameras.", "\n", "\n", "rows", "=", "db", ".", "execute", "(", "\"SELECT * FROM cameras\"", ")", "\n", "\n", "camera_id", ",", "model", ",", "width", ",", "height", ",", "params", ",", "prior", "=", "next", "(", "rows", ")", "\n", "params", "=", "blob_to_array", "(", "params", ",", "np", ".", "float64", ")", "\n", "assert", "camera_id", "==", "camera_id1", "\n", "assert", "model", "==", "model1", "and", "width", "==", "width1", "and", "height", "==", "height1", "\n", "assert", "np", ".", "allclose", "(", "params", ",", "params1", ")", "\n", "\n", "camera_id", ",", "model", ",", "width", ",", "height", ",", "params", ",", "prior", "=", "next", "(", "rows", ")", "\n", "params", "=", "blob_to_array", "(", "params", ",", "np", ".", "float64", ")", "\n", "assert", "camera_id", "==", "camera_id2", "\n", "assert", "model", "==", "model2", "and", "width", "==", "width2", "and", "height", "==", "height2", "\n", "assert", "np", ".", "allclose", "(", "params", ",", "params2", ")", "\n", "\n", "# Read and check keypoints.", "\n", "\n", "keypoints", "=", "dict", "(", "\n", "(", "image_id", ",", "blob_to_array", "(", "data", ",", "np", ".", "float32", ",", "(", "-", "1", ",", "2", ")", ")", ")", "\n", "for", "image_id", ",", "data", "in", "db", ".", "execute", "(", "\n", "\"SELECT image_id, data FROM keypoints\"", ")", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "keypoints", "[", "image_id1", "]", ",", "keypoints1", ")", "\n", "assert", "np", ".", "allclose", "(", "keypoints", "[", "image_id2", "]", ",", "keypoints2", ")", "\n", "assert", "np", ".", "allclose", "(", "keypoints", "[", "image_id3", "]", ",", "keypoints3", ")", "\n", "assert", "np", ".", "allclose", "(", "keypoints", "[", "image_id4", "]", ",", "keypoints4", ")", "\n", "\n", "# Read and check matches.", "\n", "\n", "pair_ids", "=", "[", "image_ids_to_pair_id", "(", "*", "pair", ")", "for", "pair", "in", "\n", "(", "(", "image_id1", ",", "image_id2", ")", ",", "\n", "(", "image_id2", ",", "image_id3", ")", ",", "\n", "(", "image_id3", ",", "image_id4", ")", ")", "]", "\n", "\n", "matches", "=", "dict", "(", "\n", "(", "pair_id_to_image_ids", "(", "pair_id", ")", ",", "\n", "blob_to_array", "(", "data", ",", "np", ".", "uint32", ",", "(", "-", "1", ",", "2", ")", ")", ")", "\n", "for", "pair_id", ",", "data", "in", "db", ".", "execute", "(", "\"SELECT pair_id, data FROM matches\"", ")", "\n", ")", "\n", "\n", "assert", "np", ".", "all", "(", "matches", "[", "(", "image_id1", ",", "image_id2", ")", "]", "==", "matches12", ")", "\n", "assert", "np", ".", "all", "(", "matches", "[", "(", "image_id2", ",", "image_id3", ")", "]", "==", "matches23", ")", "\n", "assert", "np", ".", "all", "(", "matches", "[", "(", "image_id3", ",", "image_id4", ")", "]", "==", "matches34", ")", "\n", "\n", "# Clean up.", "\n", "\n", "db", ".", "close", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "database_path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "args", ".", "database_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.utils.create_network_for_feature": [[4, 27], ["lib.networks.MLP", "lib.networks.MLP"], "function", ["None"], ["def", "create_network_for_feature", "(", "feature", ",", "config", ",", "use_cuda", ")", ":", "\n", "    ", "use_bn", "=", "config", "[", "'use_bn'", "]", "\n", "emb_dim", "=", "config", "[", "'emb_dim'", "]", "\n", "emb_l2_norm", "=", "config", "[", "'emb_l2_norm'", "]", "\n", "emb_last_activation", "=", "config", "[", "'emb_last_activation'", "]", "\n", "descriptor_dim", "=", "config", "[", "feature", "]", "[", "'descriptor_dim'", "]", "\n", "hidden_dims", "=", "config", "[", "feature", "]", "[", "'hidden_dims'", "]", "\n", "l2_norm", "=", "config", "[", "feature", "]", "[", "'l2_norm'", "]", "\n", "last_activation", "=", "config", "[", "feature", "]", "[", "'last_activation'", "]", "\n", "\n", "# Define encoder.", "\n", "encoder", "=", "MLP", "(", "\n", "num_channels", "=", "[", "descriptor_dim", "]", "+", "hidden_dims", "+", "[", "emb_dim", "]", ",", "use_cuda", "=", "use_cuda", ",", "\n", "use_bn", "=", "use_bn", ",", "last_activation", "=", "emb_last_activation", ",", "l2_norm", "=", "emb_l2_norm", "\n", ")", "\n", "\n", "# Define decoder.", "\n", "decoder", "=", "MLP", "(", "\n", "num_channels", "=", "[", "emb_dim", "]", "+", "hidden_dims", "[", ":", ":", "-", "1", "]", "+", "[", "descriptor_dim", "]", ",", "use_cuda", "=", "use_cuda", ",", "\n", "use_bn", "=", "use_bn", ",", "last_activation", "=", "last_activation", ",", "l2_norm", "=", "l2_norm", "\n", ")", "\n", "\n", "return", "encoder", ",", "decoder", "", "", ""]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.losses.exhaustive_loss": [[8, 57], ["batch.keys", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "batch.keys", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "list", "embeddings.keys", "embeddings.values", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "embeddings.keys", "len", "torch.tensor().float().to.detach", "torch.tensor().float().to.detach", "torch.cat", "torch.cat", "torch.cat", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().to", "torch.diag().to", "torch.diag().to", "torch.min", "torch.min", "torch.min", "neg_sqdist.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "len", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "len", "torch.full", "torch.full", "torch.full"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean"], ["def", "exhaustive_loss", "(", "encoders", ",", "decoders", ",", "batch", ",", "device", ",", "alpha", "=", "0.1", ",", "margin", "=", "1.0", ")", ":", "\n", "# Translation loss.", "\n", "    ", "embeddings", "=", "{", "}", "\n", "for", "source_feature", "in", "batch", ".", "keys", "(", ")", ":", "\n", "        ", "source_descriptors", "=", "batch", "[", "source_feature", "]", "\n", "embeddings", "[", "source_feature", "]", "=", "encoders", "[", "source_feature", "]", "(", "source_descriptors", ")", "\n", "\n", "", "all_embeddings", "=", "torch", ".", "cat", "(", "list", "(", "embeddings", ".", "values", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "t_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "target_feature", "in", "batch", ".", "keys", "(", ")", ":", "\n", "        ", "target_descriptors", "=", "batch", "[", "target_feature", "]", "\n", "output_descriptors", "=", "decoders", "[", "target_feature", "]", "(", "all_embeddings", ")", "\n", "if", "target_feature", "==", "'brief'", ":", "\n", "            ", "current_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "output_descriptors", ",", "\n", "torch", ".", "cat", "(", "[", "target_descriptors", "]", "*", "len", "(", "batch", ")", ",", "dim", "=", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "output_descriptors", "-", "torch", ".", "cat", "(", "[", "target_descriptors", "]", "*", "len", "(", "batch", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", "\n", ")", "\n", "", "t_loss", "+=", "current_loss", "\n", "", "t_loss", "/=", "len", "(", "batch", ")", "\n", "\n", "# Triplet loss in embedding space.", "\n", "e_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "for", "source_feature", "in", "embeddings", ".", "keys", "(", ")", ":", "\n", "            ", "for", "target_feature", "in", "embeddings", ".", "keys", "(", ")", ":", "\n", "# TODO: Implement symmetric negative mining.", "\n", "                ", "sqdist_matrix", "=", "2", "-", "2", "*", "embeddings", "[", "source_feature", "]", "@", "embeddings", "[", "target_feature", "]", ".", "T", "\n", "pos_dist", "=", "torch", ".", "norm", "(", "torch", ".", "diag", "(", "sqdist_matrix", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "sqdist_matrix", "=", "sqdist_matrix", "+", "torch", ".", "diag", "(", "torch", ".", "full", "(", "(", "sqdist_matrix", ".", "shape", "[", "0", "]", ",", ")", ",", "np", ".", "inf", ")", ")", ".", "to", "(", "device", ")", "\n", "# neg_sqdist = torch.min(torch.min(sqdist_matrix, dim=-1)[0], torch.min(sqdist_matrix, dim=0)[0])", "\n", "neg_sqdist", "=", "torch", ".", "min", "(", "sqdist_matrix", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "neg_dist", "=", "torch", ".", "norm", "(", "neg_sqdist", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "e_loss", "=", "e_loss", "+", "torch", ".", "mean", "(", "\n", "F", ".", "relu", "(", "margin", "+", "pos_dist", "-", "neg_dist", ")", "\n", ")", "\n", "", "", "e_loss", "/=", "(", "len", "(", "batch", ")", "**", "2", ")", "\n", "\n", "# Final loss.", "\n", "", "if", "alpha", ">", "0", ":", "\n", "        ", "loss", "=", "t_loss", "+", "alpha", "*", "e_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "t_loss", "\n", "\n", "", "return", "loss", ",", "(", "t_loss", ".", "detach", "(", ")", ",", "e_loss", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.losses.autoencoder_loss": [[59, 103], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "batch.keys", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "embeddings.keys", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "embeddings.keys", "len", "torch.tensor().float().to.detach", "torch.tensor().float().to.detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().to", "torch.diag().to", "torch.diag().to", "torch.min", "torch.min", "torch.min", "neg_sqdist.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.full", "torch.full", "torch.full"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean"], ["", "def", "autoencoder_loss", "(", "encoders", ",", "decoders", ",", "batch", ",", "device", ",", "alpha", "=", "0.1", ",", "margin", "=", "1.0", ")", ":", "\n", "# AE loss.", "\n", "    ", "embeddings", "=", "{", "}", "\n", "t_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "source_feature", "in", "batch", ".", "keys", "(", ")", ":", "\n", "        ", "source_descriptors", "=", "batch", "[", "source_feature", "]", "\n", "current_embeddings", "=", "encoders", "[", "source_feature", "]", "(", "source_descriptors", ")", "\n", "embeddings", "[", "source_feature", "]", "=", "current_embeddings", "\n", "output_descriptors", "=", "decoders", "[", "source_feature", "]", "(", "current_embeddings", ")", "\n", "if", "source_feature", "==", "'brief'", ":", "\n", "            ", "current_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "output_descriptors", ",", "source_descriptors", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "output_descriptors", "-", "source_descriptors", ",", "dim", "=", "1", ")", "\n", ")", "\n", "", "t_loss", "+=", "current_loss", "\n", "", "t_loss", "/=", "len", "(", "batch", ")", "\n", "\n", "# Triplet loss in embedding space.", "\n", "e_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "for", "source_feature", "in", "embeddings", ".", "keys", "(", ")", ":", "\n", "            ", "for", "target_feature", "in", "embeddings", ".", "keys", "(", ")", ":", "\n", "# TODO: Implement symmetric negative mining.", "\n", "                ", "sqdist_matrix", "=", "2", "-", "2", "*", "embeddings", "[", "source_feature", "]", "@", "embeddings", "[", "target_feature", "]", ".", "T", "\n", "pos_dist", "=", "torch", ".", "norm", "(", "torch", ".", "diag", "(", "sqdist_matrix", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "sqdist_matrix", "=", "sqdist_matrix", "+", "torch", ".", "diag", "(", "torch", ".", "full", "(", "(", "sqdist_matrix", ".", "shape", "[", "0", "]", ",", ")", ",", "np", ".", "inf", ")", ")", ".", "to", "(", "device", ")", "\n", "# neg_sqdist = torch.min(torch.min(sqdist_matrix, dim=-1)[0], torch.min(sqdist_matrix, dim=0)[0])", "\n", "neg_sqdist", "=", "torch", ".", "min", "(", "sqdist_matrix", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "neg_dist", "=", "torch", ".", "norm", "(", "neg_sqdist", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "e_loss", "=", "e_loss", "+", "torch", ".", "mean", "(", "\n", "F", ".", "relu", "(", "margin", "+", "pos_dist", "-", "neg_dist", ")", "\n", ")", "\n", "", "", "e_loss", "/=", "(", "len", "(", "batch", ")", "**", "2", ")", "\n", "\n", "# Final loss.", "\n", "", "if", "alpha", ">", "0", ":", "\n", "        ", "loss", "=", "t_loss", "+", "alpha", "*", "e_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "t_loss", "\n", "\n", "", "return", "loss", ",", "(", "t_loss", ".", "detach", "(", ")", ",", "e_loss", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.losses.subset_loss": [[105, 155], ["numpy.array", "numpy.array", "numpy.random.shuffle", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "zip", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "list", "zip", "len", "batch.keys", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor().float().to.detach", "torch.tensor().float().to.detach", "torch.norm", "torch.norm", "torch.norm", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().to", "torch.diag().to", "torch.diag().to", "torch.min", "torch.min", "torch.min", "neg_sqdist.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.relu", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.full", "torch.full", "torch.full"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.mean"], ["", "def", "subset_loss", "(", "encoders", ",", "decoders", ",", "batch", ",", "device", ",", "alpha", "=", "0.1", ",", "margin", "=", "1.0", ")", ":", "\n", "# Select random pairs of descriptors.", "\n", "# Make sure that all encoders and all encoders are used.", "\n", "    ", "source_features", "=", "np", ".", "array", "(", "list", "(", "batch", ".", "keys", "(", ")", ")", ")", "\n", "target_features", "=", "np", ".", "array", "(", "source_features", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "target_features", ")", "\n", "\n", "# Translation loss.", "\n", "embeddings", "=", "{", "}", "\n", "t_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "source_feature", ",", "target_feature", "in", "zip", "(", "source_features", ",", "target_features", ")", ":", "\n", "        ", "source_descriptors", "=", "batch", "[", "source_feature", "]", "\n", "target_descriptors", "=", "batch", "[", "target_feature", "]", "\n", "current_embeddings", "=", "encoders", "[", "source_feature", "]", "(", "source_descriptors", ")", "\n", "embeddings", "[", "source_feature", "]", "=", "current_embeddings", "\n", "output_descriptors", "=", "decoders", "[", "target_feature", "]", "(", "current_embeddings", ")", "\n", "if", "target_feature", "==", "'brief'", ":", "\n", "            ", "current_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "output_descriptors", ",", "target_descriptors", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "norm", "(", "output_descriptors", "-", "target_descriptors", ",", "dim", "=", "1", ")", "\n", ")", "\n", "", "t_loss", "+=", "current_loss", "\n", "", "t_loss", "/=", "len", "(", "batch", ")", "\n", "\n", "# Triplet loss in embedding space.", "\n", "e_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "for", "source_feature", ",", "target_feature", "in", "zip", "(", "source_features", ",", "target_features", ")", ":", "\n", "# TODO: Implement symmetric negative mining.", "\n", "            ", "sqdist_matrix", "=", "2", "-", "2", "*", "embeddings", "[", "source_feature", "]", "@", "embeddings", "[", "target_feature", "]", ".", "T", "\n", "pos_dist", "=", "torch", ".", "norm", "(", "torch", ".", "diag", "(", "sqdist_matrix", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "sqdist_matrix", "=", "sqdist_matrix", "+", "torch", ".", "diag", "(", "torch", ".", "full", "(", "(", "sqdist_matrix", ".", "shape", "[", "0", "]", ",", ")", ",", "np", ".", "inf", ")", ")", ".", "to", "(", "device", ")", "\n", "# neg_sqdist = torch.min(torch.min(sqdist_matrix, dim=-1)[0], torch.min(sqdist_matrix, dim=0)[0])", "\n", "neg_sqdist", "=", "torch", ".", "min", "(", "sqdist_matrix", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "neg_dist", "=", "torch", ".", "norm", "(", "neg_sqdist", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "e_loss", "=", "e_loss", "+", "torch", ".", "mean", "(", "\n", "F", ".", "relu", "(", "margin", "+", "pos_dist", "-", "neg_dist", ")", "\n", ")", "\n", "", "e_loss", "/=", "len", "(", "batch", ")", "\n", "\n", "# Final loss.", "\n", "", "if", "alpha", ">", "0", ":", "\n", "        ", "loss", "=", "t_loss", "+", "alpha", "*", "e_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "t_loss", "\n", "\n", "", "return", "loss", ",", "(", "t_loss", ".", "detach", "(", ")", ",", "e_loss", ".", "detach", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.datasets.TranslationDataset.__init__": [[10, 34], ["os.path.join", "numpy.load", "int", "numpy.random.RandomState", "numpy.random.RandomState.choice", "numpy.arange", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "base_path", "=", "None", ",", "\n", "features", "=", "[", "'brief'", ",", "'sift-kornia'", ",", "'hardnet'", ",", "'sosnet'", "]", ",", "\n", "subsampling_ratio", "=", "1.0", "\n", ")", ":", "\n", "        ", "self", ".", "features", "=", "features", "\n", "\n", "self", ".", "arrays", "=", "{", "}", "\n", "for", "feature", "in", "self", ".", "features", ":", "\n", "            ", "npy_path", "=", "os", ".", "path", ".", "join", "(", "\n", "base_path", ",", "'%s-features.npy'", "%", "feature", "\n", ")", "\n", "descriptors", "=", "np", ".", "load", "(", "npy_path", ")", "\n", "# Deterministic subsampling.", "\n", "if", "subsampling_ratio", "<", "1.0", ":", "\n", "                ", "num_descriptors", "=", "int", "(", "np", ".", "ceil", "(", "subsampling_ratio", "*", "descriptors", ".", "shape", "[", "0", "]", ")", ")", "\n", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "1", ")", "\n", "selected_ids", "=", "random", ".", "choice", "(", "descriptors", ".", "shape", "[", "0", "]", ",", "num_descriptors", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "selected_ids", "=", "np", ".", "arange", "(", "descriptors", ".", "shape", "[", "0", "]", ")", "\n", "", "self", ".", "arrays", "[", "feature", "]", "=", "descriptors", "[", "selected_ids", ",", ":", "]", "\n", "\n", "", "self", ".", "len", "=", "self", ".", "arrays", "[", "features", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.datasets.TranslationDataset.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.datasets.TranslationDataset.__getitem__": [[38, 45], ["torch.from_numpy().float", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "{", "}", "\n", "for", "feature", "in", "self", ".", "features", ":", "\n", "            ", "sample", "[", "feature", "]", "=", "torch", ".", "from_numpy", "(", "\n", "self", ".", "arrays", "[", "feature", "]", "[", "idx", ",", ":", "]", "\n", ")", ".", "float", "(", ")", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.BRIEFDescriptor.__init__": [[41, 59], ["torch.Module.__init__", "numpy.random.RandomState", "numpy.random.RandomState.seed", "numpy.array", "samples[].reshape", "samples[].reshape", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "numpy.random.RandomState.randn", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.BRIEFDescriptor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "desc_size", "=", "512", ",", "patch_size", "=", "32", ",", "seed", "=", "1", ")", ":", "\n", "        ", "super", "(", "BRIEFDescriptor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Sampling pattern.", "\n", "random", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "samples", "=", "(", "patch_size", "/", "5.0", ")", "*", "random", ".", "randn", "(", "desc_size", "*", "8", ")", "\n", "samples", "=", "np", ".", "array", "(", "samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "samples", "=", "samples", "[", "\n", "(", "samples", "<=", "(", "patch_size", "//", "2", ")", ")", "&", "(", "samples", ">=", "-", "(", "patch_size", "-", "2", ")", "//", "2", ")", "\n", "]", "\n", "samples", "+=", "(", "patch_size", "//", "2", "-", "1", ")", "\n", "pos1", "=", "samples", "[", ":", "desc_size", "*", "2", "]", ".", "reshape", "(", "desc_size", ",", "2", ")", "\n", "pos2", "=", "samples", "[", "desc_size", "*", "2", ":", "desc_size", "*", "4", "]", ".", "reshape", "(", "desc_size", ",", "2", ")", "\n", "\n", "# Create tensors.", "\n", "self", ".", "pos1", "=", "torch", ".", "from_numpy", "(", "pos1", ")", ".", "long", "(", ")", "\n", "self", ".", "pos2", "=", "torch", ".", "from_numpy", "(", "pos2", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.BRIEFDescriptor.forward": [[60, 65], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "patches", ")", ":", "\n", "        ", "pixel_values1", "=", "patches", "[", ":", ",", "0", ",", "self", ".", "pos1", "[", ":", ",", "0", "]", ",", "self", ".", "pos1", "[", ":", ",", "1", "]", "]", "\n", "pixel_values2", "=", "patches", "[", ":", ",", "0", ",", "self", ".", "pos2", "[", ":", ",", "0", "]", ",", "self", ".", "pos2", "[", ":", ",", "1", "]", "]", "\n", "descriptors", "=", "(", "pixel_values1", "<", "pixel_values2", ")", "\n", "return", "descriptors", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.get_transforms": [[30, 37], ["torchvision.Compose", "torchvision.Lambda", "torchvision.Lambda", "torchvision.ToTensor", "cv2.cvtColor", "numpy.reshape"], "function", ["None"], ["def", "get_transforms", "(", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "np", ".", "reshape", "(", "x", ",", "(", "32", ",", "32", ",", "1", ")", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.feature-utils.extract_descriptors.recover_database_images_and_ids": [[67, 83], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect"], ["", "", "def", "recover_database_images_and_ids", "(", "database_path", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "'SELECT name, image_id FROM images;'", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "1", "]", "]", "=", "row", "[", "0", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_embed.parse_args": [[25, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the dataset'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--colmap_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the COLMAP executable folder'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--features'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'list of descriptors to consider'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--exp_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'name of the experiment'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints-pretrained/model.pth'", ",", "\n", "help", "=", "'path to the checkpoint'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4096", ",", "\n", "help", "=", "'batch size'", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_embed.translate_database": [[62, 98], ["shutil.copy", "sqlite3.connect", "sqlite3.connect.cursor", "sqlite3.connect", "sqlite3.connect.cursor", "output_connection.cursor.execute", "sqlite3.connect.commit", "image_features.items", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "os.remove", "output_connection.cursor.close", "sqlite3.connect.close", "int", "connection.cursor.execute().fetchall", "utils.translate_descriptors", "output_connection.cursor.execute", "utils.blob_to_array", "connection.cursor.execute", "utils.blob_to_array().astype", "blob_to_array().astype.tobytes", "utils.blob_to_array"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.translate_descriptors", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array"], ["", "def", "translate_database", "(", "image_features", ",", "database_path", ",", "encoders", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "shutil", ".", "copy", "(", "database_path", ",", "database_path", "+", "'.aux'", ")", "\n", "\n", "connection", "=", "sqlite3", ".", "connect", "(", "database_path", "+", "'.aux'", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "output_connection", "=", "sqlite3", ".", "connect", "(", "database_path", ")", "\n", "output_cursor", "=", "output_connection", ".", "cursor", "(", ")", "\n", "output_cursor", ".", "execute", "(", "\n", "'DELETE FROM descriptors'", "\n", ")", "\n", "output_connection", ".", "commit", "(", ")", "\n", "\n", "for", "image_id", ",", "feature", "in", "image_features", ".", "items", "(", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "image_id", ")", "\n", "result", "=", "(", "cursor", ".", "execute", "(", "\"SELECT data, rows, cols FROM descriptors WHERE image_id=?\"", ",", "(", "image_id", ",", ")", ")", ")", ".", "fetchall", "(", ")", "\n", "data", ",", "rows", ",", "cols", "=", "result", "[", "0", "]", "\n", "try", ":", "\n", "            ", "descriptors", "=", "blob_to_array", "(", "data", ",", "np", ".", "float32", ",", "(", "rows", ",", "cols", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "descriptors", "=", "blob_to_array", "(", "data", ",", "bool", ",", "(", "rows", ",", "cols", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "descriptors", "=", "translate_descriptors", "(", "descriptors", ",", "feature", ",", "None", ",", "encoders", ",", "{", "}", ",", "batch_size", ",", "device", ")", "\n", "\n", "output_cursor", ".", "execute", "(", "\n", "'INSERT INTO descriptors VALUES (?, ?, ?, ?)'", ",", "\n", "(", "image_id", ",", ")", "+", "descriptors", ".", "shape", "+", "(", "descriptors", ".", "tobytes", "(", ")", ",", ")", "\n", ")", "\n", "", "output_connection", ".", "commit", "(", ")", "\n", "\n", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "database_path", "+", "'.aux'", ")", "\n", "\n", "output_cursor", ".", "close", "(", ")", "\n", "output_connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_embed.main": [[100, 185], ["torch.cuda.is_available", "torch.device", "torch.set_grad_enabled", "reconstruction_pipeline_embed.parse_args", "types.SimpleNamespace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "shutil.copy", "torch.load", "utils.build_hybrid_database", "numpy.save", "reconstruction_pipeline_embed.translate_database", "utils.match_features", "torch.cuda.empty_cache", "utils.geometric_verification", "utils.reconstruct", "utils.compute_extra_stats", "open", "json.load", "len", "FileExistsError", "os.path.join", "lib.utils.create_network_for_feature", "encoder.load_state_dict", "encoder.eval", "os.path.join", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "list", "json.dumps", "json.dumps", "json.dumps", "filter"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.build_hybrid_database", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_embed.translate_database", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.geometric_verification", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.reconstruct", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.compute_extra_stats", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.utils.create_network_for_feature"], ["", "def", "main", "(", ")", ":", "\n", "# Set CUDA.", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "#  Load config json.", "\n", "with", "open", "(", "'checkpoints-pretrained/config.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Parse arguments.", "\n", "", "args", "=", "parse_args", "(", ")", "\n", "assert", "(", "len", "(", "args", ".", "features", ")", ">", "1", ")", "\n", "\n", "paths", "=", "types", ".", "SimpleNamespace", "(", ")", "\n", "paths", ".", "database_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'%s.db'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'images'", "\n", ")", "\n", "paths", ".", "match_list_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'match-list-exh.txt'", "\n", ")", "\n", "paths", ".", "sparse_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'sparse-%s'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'stats-%s.txt'", "%", "args", ".", "exp_name", "\n", ")", "\n", "\n", "# Copy reference database.", "\n", "if", "os", ".", "path", ".", "exists", "(", "paths", ".", "database_path", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "'Database file already exists.'", ")", "\n", "", "shutil", ".", "copy", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'database.db'", ")", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "\n", "# Create networks.", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "encoders", "=", "{", "}", "\n", "for", "feature", "in", "args", ".", "features", ":", "\n", "        ", "encoder", ",", "_", "=", "create_network_for_feature", "(", "feature", ",", "config", ",", "use_cuda", ")", "\n", "state_dict", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "==", "feature", ",", "checkpoint", "[", "'encoders'", "]", ")", ")", "[", "0", "]", "\n", "encoder", ".", "load_state_dict", "(", "state_dict", "[", "1", "]", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "encoders", "[", "feature", "]", "=", "encoder", "\n", "\n", "# Build and translate database.", "\n", "", "image_features", "=", "build_hybrid_database", "(", "\n", "args", ".", "features", ",", "\n", "args", ".", "dataset_path", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'features.npy'", ")", ",", "image_features", ")", "\n", "translate_database", "(", "\n", "image_features", ",", "\n", "paths", ".", "database_path", ",", "\n", "encoders", ",", "args", ".", "batch_size", ",", "device", "\n", ")", "\n", "\n", "# Matching + GV + reconstruction.", "\n", "match_features", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "match_list_path", "\n", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "matching_stats", "=", "geometric_verification", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "match_list_path", "\n", ")", "\n", "largest_model_path", ",", "reconstruction_stats", "=", "reconstruct", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "sparse_path", "\n", ")", "\n", "extra_stats", "=", "compute_extra_stats", "(", "image_features", ",", "largest_model_path", ")", "\n", "\n", "with", "open", "(", "paths", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "matching_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "reconstruction_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "extra_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_progressive.parse_args": [[23, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the dataset'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--colmap_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the COLMAP executable folder'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--features'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'list of descriptors to consider'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--exp_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'name of the experiment'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints-pretrained/model.pth'", ",", "\n", "help", "=", "'path to the checkpoint'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4096", ",", "\n", "help", "=", "'batch size'", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_progressive.main": [[60, 153], ["torch.cuda.is_available", "torch.device", "torch.set_grad_enabled", "reconstruction_pipeline_progressive.parse_args", "types.SimpleNamespace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "shutil.copy", "utils.build_hybrid_database", "utils.match_features_hybrid", "torch.cuda.empty_cache", "utils.geometric_verification", "utils.reconstruct", "utils.compute_extra_stats", "open", "json.load", "FileExistsError", "os.path.join", "len", "torch.load", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "lib.utils.create_network_for_feature", "encoder.load_state_dict", "encoder.eval", "decoder.load_state_dict", "decoder.eval", "json.dumps", "json.dumps", "json.dumps", "list", "list", "filter", "filter"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.build_hybrid_database", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features_hybrid", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.geometric_verification", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.reconstruct", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.compute_extra_stats", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.utils.create_network_for_feature"], ["", "def", "main", "(", ")", ":", "\n", "# Set CUDA.", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "#  Load config json.", "\n", "with", "open", "(", "'checkpoints-pretrained/config.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Parse arguments.", "\n", "", "args", "=", "parse_args", "(", ")", "\n", "\n", "paths", "=", "types", ".", "SimpleNamespace", "(", ")", "\n", "paths", ".", "database_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'%s.db'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'images'", "\n", ")", "\n", "paths", ".", "match_list_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'match-list-exh.txt'", "\n", ")", "\n", "paths", ".", "sparse_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'sparse-%s'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'stats-%s.txt'", "%", "args", ".", "exp_name", "\n", ")", "\n", "\n", "# Copy reference database.", "\n", "if", "os", ".", "path", ".", "exists", "(", "paths", ".", "database_path", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "'Database file already exists.'", ")", "\n", "", "shutil", ".", "copy", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'database.db'", ")", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "\n", "# Create networks.", "\n", "encoders", "=", "{", "}", "\n", "decoders", "=", "{", "}", "\n", "if", "len", "(", "args", ".", "features", ")", ">", "1", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "\n", "for", "feature", "in", "args", ".", "features", ":", "\n", "            ", "encoder", ",", "decoder", "=", "create_network_for_feature", "(", "feature", ",", "config", ",", "use_cuda", ")", "\n", "\n", "state_dict", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "==", "feature", ",", "checkpoint", "[", "'encoders'", "]", ")", ")", "[", "0", "]", "\n", "encoder", ".", "load_state_dict", "(", "state_dict", "[", "1", "]", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "encoders", "[", "feature", "]", "=", "encoder", "\n", "\n", "state_dict", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "==", "feature", ",", "checkpoint", "[", "'decoders'", "]", ")", ")", "[", "0", "]", "\n", "decoder", ".", "load_state_dict", "(", "state_dict", "[", "1", "]", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "decoders", "[", "feature", "]", "=", "decoder", "\n", "", "", "else", ":", "\n", "        ", "encoders", "[", "args", ".", "features", "[", "0", "]", "]", "=", "None", "\n", "decoders", "[", "args", ".", "features", "[", "0", "]", "]", "=", "None", "\n", "\n", "# Build and translate database.", "\n", "", "image_features", "=", "build_hybrid_database", "(", "\n", "args", ".", "features", ",", "\n", "args", ".", "dataset_path", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "\n", "# Matching + GV + reconstruction.", "\n", "match_features_hybrid", "(", "\n", "args", ".", "features", ",", "\n", "image_features", ",", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "match_list_path", ",", "\n", "encoders", ",", "decoders", ",", "args", ".", "batch_size", ",", "device", "\n", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "matching_stats", "=", "geometric_verification", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "match_list_path", "\n", ")", "\n", "largest_model_path", ",", "reconstruction_stats", "=", "reconstruct", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "sparse_path", "\n", ")", "\n", "extra_stats", "=", "compute_extra_stats", "(", "image_features", ",", "largest_model_path", ")", "\n", "\n", "with", "open", "(", "paths", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "matching_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "reconstruction_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "extra_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args": [[16, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the dataset'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--colmap_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the COLMAP executable folder'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--features'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'list of descriptors to consider'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--feature'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'descriptors to map'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--exp_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'name of the experiment'", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.main": [[48, 115], ["torch.cuda.is_available", "torch.device", "torch.set_grad_enabled", "reconstruction_pipeline_subset.parse_args", "types.SimpleNamespace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "shutil.copy", "utils.build_hybrid_database", "utils.match_features_subset", "torch.cuda.empty_cache", "utils.geometric_verification", "os.remove", "utils.reconstruct", "utils.compute_extra_stats", "FileExistsError", "os.path.join", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "json.dumps", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.reconstruction_pipeline_subset.parse_args", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.build_hybrid_database", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features_subset", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.geometric_verification", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.reconstruct", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.compute_extra_stats"], ["", "def", "main", "(", ")", ":", "\n", "# Set CUDA.", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "# Parse arguments.", "\n", "args", "=", "parse_args", "(", ")", "\n", "\n", "paths", "=", "types", ".", "SimpleNamespace", "(", ")", "\n", "paths", ".", "database_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'%s.db'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'images'", "\n", ")", "\n", "paths", ".", "match_list_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'match-list-exh.txt'", "\n", ")", "\n", "paths", ".", "sparse_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'sparse-%s'", "%", "args", ".", "exp_name", "\n", ")", "\n", "paths", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "dataset_path", ",", "'stats-%s.txt'", "%", "args", ".", "exp_name", "\n", ")", "\n", "\n", "# Copy reference database.", "\n", "if", "os", ".", "path", ".", "exists", "(", "paths", ".", "database_path", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "'Database file already exists.'", ")", "\n", "", "shutil", ".", "copy", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'database.db'", ")", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "\n", "# Build and translate database.", "\n", "image_features", "=", "build_hybrid_database", "(", "\n", "args", ".", "features", ",", "\n", "args", ".", "dataset_path", ",", "\n", "paths", ".", "database_path", "\n", ")", "\n", "\n", "# Matching + GV + reconstruction.", "\n", "match_features_subset", "(", "\n", "args", ".", "feature", ",", "\n", "image_features", ",", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "match_list_path", "\n", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "matching_stats", "=", "geometric_verification", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "match_list_path", "+", "'.aux'", "\n", ")", "\n", "os", ".", "remove", "(", "paths", ".", "match_list_path", "+", "'.aux'", ")", "\n", "largest_model_path", ",", "reconstruction_stats", "=", "reconstruct", "(", "\n", "args", ".", "colmap_path", ",", "\n", "paths", ".", "database_path", ",", "paths", ".", "image_path", ",", "paths", ".", "sparse_path", "\n", ")", "\n", "extra_stats", "=", "compute_extra_stats", "(", "image_features", ",", "largest_model_path", ")", "\n", "\n", "with", "open", "(", "paths", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "matching_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "reconstruction_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "extra_stats", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.align_and_compare.qvec_to_rotmat": [[10, 30], ["numpy.array"], "function", ["None"], ["def", "qvec_to_rotmat", "(", "qvec", ")", ":", "\n", "    ", "w", ",", "x", ",", "y", ",", "z", "=", "qvec", "\n", "R", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "1", "-", "2", "*", "y", "*", "y", "-", "2", "*", "z", "*", "z", ",", "\n", "2", "*", "x", "*", "y", "-", "2", "*", "z", "*", "w", ",", "\n", "2", "*", "x", "*", "z", "+", "2", "*", "y", "*", "w", "\n", "]", ",", "\n", "[", "\n", "2", "*", "x", "*", "y", "+", "2", "*", "z", "*", "w", ",", "\n", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "z", "*", "z", ",", "\n", "2", "*", "y", "*", "z", "-", "2", "*", "x", "*", "w", "\n", "]", ",", "\n", "[", "\n", "2", "*", "x", "*", "z", "-", "2", "*", "y", "*", "w", ",", "\n", "2", "*", "y", "*", "z", "+", "2", "*", "x", "*", "w", ",", "\n", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "y", "*", "y", "\n", "]", "\n", "]", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.mnn_ratio_matcher": [[16, 57], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.from_numpy().float().cuda.t", "sim.t", "torch.min", "torch.stack.data.cpu().numpy", "match_sim.data.cpu().numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.norm", "torch.norm", "torch.stack.data.cpu", "match_sim.data.cpu", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array"], "function", ["None"], ["num_channels", "=", "[", "descriptor_dim", "]", "+", "hidden_dims", "+", "[", "emb_dim", "]", ",", "use_cuda", "=", "use_cuda", ",", "\n", "use_bn", "=", "use_bn", ",", "last_activation", "=", "emb_last_activation", ",", "l2_norm", "=", "emb_l2_norm", "\n", ")", "\n", "\n", "# Define decoder.", "\n", "decoder", "=", "MLP", "(", "\n", "num_channels", "=", "[", "emb_dim", "]", "+", "hidden_dims", "[", ":", ":", "-", "1", "]", "+", "[", "descriptor_dim", "]", ",", "use_cuda", "=", "use_cuda", ",", "\n", "use_bn", "=", "use_bn", ",", "last_activation", "=", "last_activation", ",", "l2_norm", "=", "l2_norm", "\n", ")", "\n", "\n", "return", "encoder", ",", "decoder", "", "", ""]], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.translate_descriptors": [[60, 72], ["torch.from_numpy().to", "torch.zeros().to", "torch.cat.cpu().numpy", "torch.cat", "torch.from_numpy", "torch.zeros", "torch.cat.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id": [[74, 79], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.array_to_blob": [[81, 83], ["array.tobytes"], "function", ["None"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array": [[85, 89], ["numpy.frombuffer().reshape", "numpy.zeros", "numpy.frombuffer", "numpy.np.float32", "numpy.np.float32", "numpy.np.float32", "numpy.np.float32", "numpy.np.float32", "numpy.np.float32"], "function", ["None"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.build_hybrid_database": [[91, 149], ["sorted", "len", "sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "numpy.random.RandomState", "np.random.RandomState.seed", "numpy.array", "np.random.RandomState.shuffle", "numpy.array", "enumerate", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "zip", "list", "sqlite3.connect", "sqlite3.connect.cursor", "connection_aux.cursor.close", "sqlite3.connect.close", "list", "images.values", "os.path.join", "numpy.where", "int", "connection.cursor.execute", "connection.cursor.execute", "numpy.array", "list", "np.random.RandomState.randint", "connection_aux.cursor.execute().fetchall", "connection_aux.cursor.execute().fetchall", "range", "len", "len", "connection_aux.cursor.execute().fetchall", "connection_aux.cursor.execute", "connection_aux.cursor.execute", "connection_aux.cursor.execute"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features": [[151, 218], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "sqlite3.connect.commit", "connection.cursor.execute", "list", "set", "tqdm.tqdm", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "bool", "connection.cursor.execute", "connection.cursor.execute", "open", "f.readlines", "map", "utils.image_ids_to_pair_id", "set.add", "numpy.array().astype", "connection.cursor.execute", "connection.cursor.execute().fetchall", "utils.blob_to_array", "connection.cursor.execute().fetchall", "utils.blob_to_array", "numpy.zeros", "utils.mnn_ratio_matcher", "numpy.zeros", "next", "s.strip().split", "blob_to_array().astype", "blob_to_array().astype", "numpy.array", "np.zeros.tostring", "connection.cursor.execute", "connection.cursor.execute", "s.strip", "utils.blob_to_array", "utils.blob_to_array"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.mnn_ratio_matcher", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features_hybrid": [[220, 302], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "sqlite3.connect.commit", "connection.cursor.execute", "list", "set", "tqdm.tqdm", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "bool", "connection.cursor.execute", "connection.cursor.execute", "open", "f.readlines", "map", "utils.image_ids_to_pair_id", "set.add", "numpy.array().astype", "connection.cursor.execute", "connection.cursor.execute().fetchall", "utils.blob_to_array", "connection.cursor.execute().fetchall", "utils.blob_to_array", "features.index", "features.index", "numpy.zeros", "utils.mnn_ratio_matcher", "numpy.zeros", "next", "s.strip().split", "blob_to_array().astype", "blob_to_array().astype", "utils.translate_descriptors", "utils.translate_descriptors", "numpy.array", "np.zeros.tostring", "connection.cursor.execute", "connection.cursor.execute", "s.strip", "utils.blob_to_array", "utils.blob_to_array"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.mnn_ratio_matcher", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.translate_descriptors", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.translate_descriptors", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.match_features_subset": [[304, 379], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "sqlite3.connect.commit", "connection.cursor.execute", "set", "images.items", "open", "set", "tqdm.tqdm", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "bool", "connection.cursor.execute", "connection.cursor.execute", "images.items", "utils.image_ids_to_pair_id", "set.add", "numpy.array().astype", "connection.cursor.execute", "open.write", "connection.cursor.execute().fetchall", "utils.blob_to_array", "connection.cursor.execute().fetchall", "utils.blob_to_array", "numpy.zeros", "utils.mnn_ratio_matcher", "numpy.zeros", "next", "set.add", "blob_to_array().astype", "blob_to_array().astype", "numpy.array", "np.zeros.tostring", "connection.cursor.execute", "connection.cursor.execute", "utils.blob_to_array", "utils.blob_to_array"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.image_ids_to_pair_id", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.mnn_ratio_matcher", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.None.train.UpdatingMean.add", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array", "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.blob_to_array"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.geometric_verification": [[381, 411], ["subprocess.call", "sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close", "dict", "next", "next", "next", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.lib.database.COLMAPDatabase.connect"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.reconstruct": [[413, 502], ["subprocess.call", "os.listdir", "os.path.join", "subprocess.call", "subprocess.check_output", "stats.decode().split.decode().split", "os.path.exists", "os.mkdir", "len", "print", "subprocess.call", "stat.startswith", "dict", "str", "str", "str", "str", "str", "str", "open", "os.path.join", "os.path.join", "os.path.join", "stats.decode().split.decode", "int", "stat.startswith", "os.path.join", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "line.startswith", "int", "stat.startswith", "int", "stat.split", "int", "stat.startswith", "stat.split", "float", "stat.startswith", "line.split", "stat.split", "float", "stat.startswith", "stat.split", "float", "stat.split", "stat.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.mihaidusmanu_cross-descriptor-vis-loc-map.local-feature-evaluation.utils.compute_extra_stats": [[505, 519], ["open", "f.readlines", "raw_image.strip().split", "os.path.join", "raw_image.strip", "int"], "function", ["None"], []]}