{"home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.Profiler.__init__": [[42, 46], ["trt.infer.Profiler.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["def", "__init__", "(", "self", ",", "timing_iter", ")", ":", "\n", "        ", "trt", ".", "infer", ".", "Profiler", ".", "__init__", "(", "self", ")", "\n", "self", ".", "timing_iterations", "=", "timing_iter", "\n", "self", ".", "profile", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.Profiler.report_layer_time": [[47, 53], ["next", "run_engine.Profiler.profile.append", "run_engine.Profiler.profile.index"], "methods", ["None"], ["", "def", "report_layer_time", "(", "self", ",", "layerName", ",", "ms", ")", ":", "\n", "        ", "record", "=", "next", "(", "(", "r", "for", "r", "in", "self", ".", "profile", "if", "r", "[", "0", "]", "==", "layerName", ")", ",", "(", "None", ",", "None", ")", ")", "\n", "if", "record", "==", "(", "None", ",", "None", ")", ":", "\n", "            ", "self", ".", "profile", ".", "append", "(", "(", "layerName", ",", "ms", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "profile", "[", "self", ".", "profile", ".", "index", "(", "record", ")", "]", "=", "(", "record", "[", "0", "]", ",", "record", "[", "1", "]", "+", "ms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.Profiler.print_layer_times": [[54, 60], ["range", "print", "len", "print"], "methods", ["None"], ["", "", "def", "print_layer_times", "(", "self", ")", ":", "\n", "        ", "totalTime", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "profile", ")", ")", ":", "\n", "            ", "print", "(", "\"{:40.40} {:4.3f}ms\"", ".", "format", "(", "self", ".", "profile", "[", "i", "]", "[", "0", "]", ",", "self", ".", "profile", "[", "i", "]", "[", "1", "]", "/", "self", ".", "timing_iterations", ")", ")", "\n", "totalTime", "+=", "self", ".", "profile", "[", "i", "]", "[", "1", "]", "\n", "", "print", "(", "\"Time over all layers: {:4.2f} ms per iteration\"", ".", "format", "(", "totalTime", "/", "self", ".", "timing_iterations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.get_input_output_names": [[62, 81], ["trt_engine.get_nb_bindings", "range", "trt_engine.get_binding_dimensions().to_DimsCHW", "trt_engine.get_binding_name", "trt_engine.get_binding_data_type", "trt_engine.binding_is_input", "print", "print", "maps.append", "print", "maps.append", "print", "trt_engine.get_binding_dimensions", "str", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.W", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.H", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.C"], "function", ["None"], ["", "", "def", "get_input_output_names", "(", "trt_engine", ")", ":", "\n", "    ", "nbindings", "=", "trt_engine", ".", "get_nb_bindings", "(", ")", ";", "\n", "maps", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "0", ",", "nbindings", ")", ":", "\n", "        ", "dims", "=", "trt_engine", ".", "get_binding_dimensions", "(", "b", ")", ".", "to_DimsCHW", "(", ")", "\n", "name", "=", "trt_engine", ".", "get_binding_name", "(", "b", ")", "\n", "type", "=", "trt_engine", ".", "get_binding_data_type", "(", "b", ")", "\n", "\n", "if", "(", "trt_engine", ".", "binding_is_input", "(", "b", ")", ")", ":", "\n", "            ", "maps", ".", "append", "(", "name", ")", "\n", "print", "(", "\"Found input: \"", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "maps", ".", "append", "(", "name", ")", "\n", "print", "(", "\"Found output: \"", ",", "name", ")", "\n", "\n", "", "print", "(", "\"shape=\"", "+", "str", "(", "dims", ".", "C", "(", ")", ")", "+", "\" , \"", "+", "str", "(", "dims", ".", "H", "(", ")", ")", "+", "\" , \"", "+", "str", "(", "dims", ".", "W", "(", ")", ")", ")", "\n", "print", "(", "\"dtype=\"", "+", "str", "(", "type", ")", ")", "\n", "", "return", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.create_memory": [[82, 101], ["engine.get_binding_index", "print", "engine.get_binding_dimensions().to_DimsCHW", "engine.binding_is_input", "cuda.mem_alloc", "cuda.memcpy_htod", "buf.insert", "mem.append", "AttributeError", "numpy.random.uniform().astype", "int", "str", "engine.get_binding_dimensions", "engine.get_binding_dimensions().to_DimsCHW.W", "numpy.dtype", "engine.get_binding_dimensions().to_DimsCHW.C", "engine.get_binding_dimensions().to_DimsCHW.H", "numpy.random.uniform"], "function", ["None"], ["", "def", "create_memory", "(", "engine", ",", "name", ",", "buf", ",", "mem", ",", "batchsize", ",", "inp", ",", "inp_idx", ")", ":", "\n", "    ", "binding_idx", "=", "engine", ".", "get_binding_index", "(", "name", ")", "\n", "if", "binding_idx", "==", "-", "1", ":", "\n", "        ", "raise", "AttributeError", "(", "\"Not a valid binding\"", ")", "\n", "", "print", "(", "\"Binding: name={}, bindingIndex={}\"", ".", "format", "(", "name", ",", "str", "(", "binding_idx", ")", ")", ")", "\n", "dims", "=", "engine", ".", "get_binding_dimensions", "(", "binding_idx", ")", ".", "to_DimsCHW", "(", ")", "\n", "eltCount", "=", "dims", ".", "C", "(", ")", "*", "dims", ".", "H", "(", ")", "*", "dims", ".", "W", "(", ")", "*", "batchsize", "\n", "\n", "if", "engine", ".", "binding_is_input", "(", "binding_idx", ")", ":", "\n", "        ", "h_mem", "=", "inp", "[", "inp_idx", "]", "\n", "inp_idx", "=", "inp_idx", "+", "1", "\n", "", "else", ":", "\n", "        ", "h_mem", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "255.0", ",", "eltCount", ")", ".", "astype", "(", "np", ".", "dtype", "(", "'f4'", ")", ")", "\n", "\n", "", "d_mem", "=", "cuda", ".", "mem_alloc", "(", "eltCount", "*", "4", ")", "\n", "cuda", ".", "memcpy_htod", "(", "d_mem", ",", "h_mem", ")", "\n", "buf", ".", "insert", "(", "binding_idx", ",", "int", "(", "d_mem", ")", ")", "\n", "mem", ".", "append", "(", "d_mem", ")", "\n", "return", "inp_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.time_inference": [[104, 121], ["run_engine.get_input_output_names", "engine.create_execution_context", "run_engine.Profiler", "engine.create_execution_context.set_profiler", "range", "run_engine.Profiler.print_layer_times", "engine.create_execution_context.destroy", "run_engine.create_memory", "engine.create_execution_context.execute"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.get_input_output_names", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.Profiler.print_layer_times", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.create_memory"], ["", "def", "time_inference", "(", "engine", ",", "batch_size", ",", "inp", ")", ":", "\n", "    ", "bindings", "=", "[", "]", "\n", "mem", "=", "[", "]", "\n", "inp_idx", "=", "0", "\n", "for", "io", "in", "get_input_output_names", "(", "engine", ")", ":", "\n", "        ", "inp_idx", "=", "create_memory", "(", "engine", ",", "io", ",", "bindings", ",", "mem", ",", "\n", "batch_size", ",", "inp", ",", "inp_idx", ")", "\n", "\n", "", "context", "=", "engine", ".", "create_execution_context", "(", ")", "\n", "g_prof", "=", "Profiler", "(", "500", ")", "\n", "context", ".", "set_profiler", "(", "g_prof", ")", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "        ", "context", ".", "execute", "(", "batch_size", ",", "bindings", ")", "\n", "", "g_prof", ".", "print_layer_times", "(", ")", "\n", "\n", "context", ".", "destroy", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.convert_to_datatype": [[123, 133], ["print", "str"], "function", ["None"], ["", "def", "convert_to_datatype", "(", "v", ")", ":", "\n", "    ", "if", "v", "==", "8", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "INT8", "\n", "", "elif", "v", "==", "16", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "HALF", "\n", "", "elif", "v", "==", "32", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "FLOAT", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"ERROR: Invalid model data type bit depth: \"", "+", "str", "(", "v", ")", ")", "\n", "return", "trt", ".", "infer", ".", "DataType", ".", "INT8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.run_trt_engine": [[134, 137], ["trt.utils.load_engine", "run_engine.time_inference"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.time_inference"], ["", "", "def", "run_trt_engine", "(", "engine_file", ",", "bs", ",", "it", ")", ":", "\n", "    ", "engine", "=", "trt", ".", "utils", ".", "load_engine", "(", "G_LOGGER", ",", "engine_file", ")", "\n", "time_inference", "(", "engine", ",", "bs", ",", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_LocalGlobal_Pytorch.run_engine.run_onnx": [[138, 174], ["onnxparser.create_onnxconfig", "onnxparser.create_onnxconfig.set_model_file_name", "onnxparser.create_onnxconfig.set_model_dtype", "onnxparser.create_onnxparser", "onnxparser.create_onnxconfig.get_model_dtype", "onnxparser.create_onnxconfig.get_model_file_name", "onnxparser.create_onnxparser.parse", "onnxparser.create_onnxparser.report_parsing_info", "onnxparser.create_onnxparser.convert_to_trtnetwork", "onnxparser.create_onnxparser.get_trtnetwork", "trt.infer.create_infer_builder", "trt.infer.create_infer_builder.set_max_batch_size", "trt.infer.create_infer_builder.set_max_workspace_size", "print", "print", "trt.infer.create_infer_builder.build_cuda_engine", "print", "run_engine.time_inference", "run_engine.convert_to_datatype", "onnxparser.create_onnxconfig.get_model_dtype", "print", "trt.infer.create_infer_builder.set_half2_mode", "onnxparser.create_onnxconfig.get_model_dtype", "print", "trt.infer.create_infer_builder.set_int8_mode", "print"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.parse", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.time_inference", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.convert_to_datatype"], ["", "def", "run_onnx", "(", "onnx_file", ",", "data_type", ",", "bs", ",", "inp", ")", ":", "\n", "# Create onnx_config", "\n", "    ", "apex", "=", "onnxparser", ".", "create_onnxconfig", "(", ")", "\n", "apex", ".", "set_model_file_name", "(", "onnx_file", ")", "\n", "apex", ".", "set_model_dtype", "(", "convert_to_datatype", "(", "data_type", ")", ")", "\n", "\n", "# create parser", "\n", "trt_parser", "=", "onnxparser", ".", "create_onnxparser", "(", "apex", ")", "\n", "assert", "(", "trt_parser", ")", "\n", "data_type", "=", "apex", ".", "get_model_dtype", "(", ")", "\n", "onnx_filename", "=", "apex", ".", "get_model_file_name", "(", ")", "\n", "trt_parser", ".", "parse", "(", "onnx_filename", ",", "data_type", ")", "\n", "trt_parser", ".", "report_parsing_info", "(", ")", "\n", "trt_parser", ".", "convert_to_trtnetwork", "(", ")", "\n", "trt_network", "=", "trt_parser", ".", "get_trtnetwork", "(", ")", "\n", "assert", "(", "trt_network", ")", "\n", "\n", "# create infer builder", "\n", "trt_builder", "=", "trt", ".", "infer", ".", "create_infer_builder", "(", "G_LOGGER", ")", "\n", "trt_builder", ".", "set_max_batch_size", "(", "max_batch_size", ")", "\n", "trt_builder", ".", "set_max_workspace_size", "(", "max_workspace_size", ")", "\n", "\n", "if", "(", "apex", ".", "get_model_dtype", "(", ")", "==", "trt", ".", "infer", ".", "DataType_kHALF", ")", ":", "\n", "        ", "print", "(", "\"-------------------  Running FP16 -----------------------------\"", ")", "\n", "trt_builder", ".", "set_half2_mode", "(", "True", ")", "\n", "", "elif", "(", "apex", ".", "get_model_dtype", "(", ")", "==", "trt", ".", "infer", ".", "DataType_kINT8", ")", ":", "\n", "        ", "print", "(", "\"-------------------  Running INT8 -----------------------------\"", ")", "\n", "trt_builder", ".", "set_int8_mode", "(", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"-------------------  Running FP32 -----------------------------\"", ")", "\n", "\n", "", "print", "(", "\"----- Builder is Done -----\"", ")", "\n", "print", "(", "\"----- Creating Engine -----\"", ")", "\n", "trt_engine", "=", "trt_builder", ".", "build_cuda_engine", "(", "trt_network", ")", "\n", "print", "(", "\"----- Engine is built -----\"", ")", "\n", "time_inference", "(", "engine", ",", "bs", ",", "inp", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.__init__": [[7, 20], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.get_image_dir": [[21, 23], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_header": [[24, 27], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_table": [[28, 31], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_images": [[32, 43], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.save": [[44, 49], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.__init__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query": [[11, 32], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "image_pool.ImagePool.images.append", "torch.autograd.Variable.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.autograd.Variable.append", "torch.autograd.Variable.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ".", "data", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "Variable", "(", "torch", ".", "cat", "(", "return_images", ",", "0", ")", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.visualizer.Visualizer.__init__": [[16, 37], ["os.path.join", "os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "tf_log", "=", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.visualizer.Visualizer.display_current_results": [[39, 95], ["visuals.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visuals.items", "html.HTML", "range", "html.HTML.save", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "html.HTML.add_header", "visuals.items", "StringIO", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.save_image", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.save_image"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.jpg'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.jpg'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "30", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_%s_%d.jpg'", "%", "(", "n", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_%s.jpg'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.visualizer.Visualizer.plot_current_errors": [[97, 102], ["errors.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.visualizer.Visualizer.print_current_errors": [[104, 113], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "0", ":", "\n", "                ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.visualizer.Visualizer.save_images": [[115, 134], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.jpg'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.Colorize.__init__": [[87, 90], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.Colorize.__call__": [[91, 102], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im": [[10, 26], ["isinstance", "image_tensor.cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "len", "np.clip.append", "image_tensor.cpu().float", "numpy.transpose", "util.tensor2im", "image_tensor.cpu", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "", "image_numpy", "=", "image_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "# print(\"size of image_numpy is :\", image_numpy)", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", "or", "image_numpy", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2label": [[28, 37], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.save_image": [[38, 41], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs": [[42, 48], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdir", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdir": [[49, 52], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.uint82bin": [[58, 61], ["str", "range"], "function", ["None"], ["", "", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.labelcolormap": [[62, 85], ["numpy.array", "numpy.zeros", "range", "range", "util.uint82bin", "numpy.uint8", "numpy.uint8", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.uint82bin"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GANLoss.__init__": [[76, 88], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GANLoss.get_target_tensor": [[89, 106], ["networks_old4.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old4.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old4.GANLoss.real_label_var.numel", "input.numel", "networks_old4.GANLoss.fake_label_var.numel", "input.numel", "networks_old4.GANLoss.Tensor", "networks_old4.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GANLoss.__call__": [[107, 118], ["isinstance", "networks_old4.GANLoss.get_target_tensor", "networks_old4.GANLoss.loss", "networks_old4.GANLoss.get_target_tensor", "networks_old4.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.VGGLoss.__init__": [[134, 140], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old4.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.VGGLoss.forward": [[141, 162], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old4.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.CCLoss.__init__": [[164, 170], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.CCLoss.forward": [[172, 222], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.KLLoss.__init__": [[225, 231], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.KLLoss.forward": [[233, 265], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.NSSLoss.__init__": [[267, 273], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.NSSLoss.forward": [[275, 337], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.LocalEnhancer.__init__": [[343, 379], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old4.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old4.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.LocalEnhancer.forward": [[380, 397], ["range", "networks_old4.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old4.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GlobalGenerator.__init__": [[399, 424], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old4.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GlobalGenerator.forward": [[425, 427], ["networks_old4.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.encoderconv_1.__init__": [[429, 438], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.encoderconv_1.forward": [[439, 441], ["networks_old4.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.encoderconv_2.__init__": [[443, 451], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.encoderconv_2.forward": [[452, 454], ["networks_old4.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_1.__init__": [[456, 466], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_1.forward": [[467, 469], ["networks_old4.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_2.__init__": [[471, 480], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_2.forward": [[481, 483], ["networks_old4.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_3.__init__": [[485, 494], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.decoderconv_3.forward": [[495, 497], ["networks_old4.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.dimredconv.__init__": [[499, 506], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.dimredconv.forward": [[507, 509], ["networks_old4.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GlobalUNet.__init__": [[511, 545], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "networks_old4.encoderconv_2", "networks_old4.encoderconv_2", "networks_old4.encoderconv_2", "networks_old4.encoderconv_2", "networks_old4.encoderconv_2", "networks_old4.encoderconv_2", "networks_old4.ResnetBlock", "networks_old4.ResnetBlock", "networks_old4.ResnetBlock", "networks_old4.ResnetBlock", "networks_old4.decoderconv_3", "networks_old4.decoderconv_2", "networks_old4.decoderconv_2", "networks_old4.decoderconv_2", "networks_old4.decoderconv_2", "networks_old4.decoderconv_2", "networks_old4.dimredconv"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_2", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "self", ".", "en_conv3", "=", "encoderconv_2", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# self.en_conv7 = encoderconv_2(1024, 1024)", "\n", "# self.en_conv8 = encoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# decoder of generator", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "# self.de_conv2 = decoderconv_1(1024+1024, 1024)", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "self", ".", "de_conv1", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "128", "+", "128", ",", "64", ")", "\n", "self", ".", "de_conv6", "=", "decoderconv_2", "(", "64", "+", "64", ",", "output_nc", ")", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.GlobalUNet.forward": [[546, 586], ["networks_old4.GlobalUNet.en_conv1", "networks_old4.GlobalUNet.en_conv2", "networks_old4.GlobalUNet.en_conv3", "networks_old4.GlobalUNet.en_conv4", "networks_old4.GlobalUNet.en_conv5", "networks_old4.GlobalUNet.en_conv6", "networks_old4.GlobalUNet.res_1", "networks_old4.GlobalUNet.res_2", "networks_old4.GlobalUNet.res_2", "networks_old4.GlobalUNet.res_2", "networks_old4.GlobalUNet.de_conv1", "networks_old4.GlobalUNet.de_conv2", "networks_old4.GlobalUNet.de_conv3", "networks_old4.GlobalUNet.de_conv4", "networks_old4.GlobalUNet.de_conv5", "networks_old4.GlobalUNet.de_conv6", "networks_old4.GlobalUNet.dimr_conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "# e7 = self.en_conv7(e6)", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "# e8 = self.en_conv8(e7)", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e6", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_2", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "# d1 = self.de_conv1(e6)", "\n", "d1", "=", "self", ".", "de_conv1", "(", "res4", ")", "\n", "# print(\"d1 and e5 are :\", d1.size(), e5.size())", "\n", "d2", "=", "self", ".", "de_conv2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "e5", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d2 and e4 are :\", d2.size(), e4.size())", "\n", "d3", "=", "self", ".", "de_conv3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "e4", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d3 and e3 are :\", d3.size(), e3.size())", "\n", "d4", "=", "self", ".", "de_conv4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "e3", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d4 and e2 are :\", d4.size(), e2.size())", "\n", "d5", "=", "self", ".", "de_conv5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "e2", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d5 and e1 are :\", d5.size(), e1.size())", "\n", "d6", "=", "self", ".", "de_conv6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "e1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "d7", "=", "self", ".", "dimr_conv1", "(", "d6", ")", "\n", "\n", "return", "d7", "\n", "# return d8", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.ResnetBlock.__init__": [[595, 598], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old4.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.ResnetBlock.build_conv_block": [[599, 630], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.ResnetBlock.forward": [[631, 634], ["networks_old4.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.Encoder.__init__": [[636, 656], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.Encoder.forward": [[657, 671], ["networks_old4.Encoder.model", "networks_old4.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.MultiscaleDiscriminator.__init__": [[673, 689], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old4.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.MultiscaleDiscriminator.singleD_forward": [[690, 698], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.MultiscaleDiscriminator.forward": [[699, 712], ["range", "result.append", "getattr", "networks_old4.MultiscaleDiscriminator.singleD_forward", "networks_old4.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.NLayerDiscriminator.__init__": [[715, 754], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.NLayerDiscriminator.forward": [[755, 764], ["range", "networks_old4.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.Vgg19.__init__": [[767, 788], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old4.Vgg19.slice1.add_module", "networks_old4.Vgg19.slice2.add_module", "networks_old4.Vgg19.slice3.add_module", "networks_old4.Vgg19.slice4.add_module", "networks_old4.Vgg19.slice5.add_module", "networks_old4.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.Vgg19.forward": [[789, 797], ["networks_old4.Vgg19.slice1", "networks_old4.Vgg19.slice2", "networks_old4.Vgg19.slice3", "networks_old4.Vgg19.slice4", "networks_old4.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.weights_init": [[15, 22], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.get_norm_layer": [[23, 31], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.define_G": [[32, 52], ["networks_old4.get_norm_layer", "print", "GlobalUNet.apply", "networks_old4.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old4.LocalEnhancer", "networks_old4.Encoder", "networks_old4.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.define_D": [[53, 62], ["networks_old4.get_norm_layer", "networks_old4.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old4.print_network": [[63, 71], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.name": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.init_loss_filter": [[15, 20], ["zip"], "methods", ["None"], ["", "def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ")", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ")", ":", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.initialize": [[21, 112], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_ori.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_ori.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "pix2pixHD_model_ori.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_ori.Pix2PixHDModel.load_network", "pix2pixHD_model_ori.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_ori.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_ori.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_ori.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_ori.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.encode_input": [[113, 145], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_ori.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.discriminate": [[146, 153], ["torch.cat", "pix2pixHD_model_ori.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_ori.Pix2PixHDModel.netD.forward", "pix2pixHD_model_ori.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.forward": [[154, 197], ["pix2pixHD_model_ori.Pix2PixHDModel.encode_input", "pix2pixHD_model_ori.Pix2PixHDModel.netG.forward", "pix2pixHD_model_ori.Pix2PixHDModel.discriminate", "pix2pixHD_model_ori.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_ori.Pix2PixHDModel.discriminate", "pix2pixHD_model_ori.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_ori.Pix2PixHDModel.netD.forward", "pix2pixHD_model_ori.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_ori.Pix2PixHDModel.loss_filter", "pix2pixHD_model_ori.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_ori.Pix2PixHDModel.criterionVGG", "len", "pix2pixHD_model_ori.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "# Real Detection and Loss        ", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# GAN loss (Fake Passability Loss)        ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.inference": [[198, 221], ["pix2pixHD_model_ori.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_ori.Pix2PixHDModel.netG.forward", "pix2pixHD_model_ori.Pix2PixHDModel.netE.forward", "pix2pixHD_model_ori.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_ori.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "_", "=", "self", ".", "encode_input", "(", "Variable", "(", "label", ")", ",", "Variable", "(", "inst", ")", ",", "image", ",", "infer", "=", "True", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.sample_features": [[222, 242], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_ori.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.encode_features": [[243, 264], ["torch.autograd.Variable", "pix2pixHD_model_ori.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.get_edges": [[265, 275], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.save": [[276, 281], ["pix2pixHD_model_ori.Pix2PixHDModel.save_network", "pix2pixHD_model_ori.Pix2PixHDModel.save_network", "pix2pixHD_model_ori.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.update_fixed_params": [[282, 290], ["list", "torch.optim.Adam", "pix2pixHD_model_ori.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_ori.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.Pix2PixHDModel.update_learning_rate": [[291, 301], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_ori.InferenceModel.forward": [[303, 306], ["pix2pixHD_model_ori.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.models.create_model": [[5, 23], ["InferenceModel.initialize", "UIModel", "print", "len", "torch.nn.DataParallel", "Pix2PixHDModel", "InferenceModel", "InferenceModel.name"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.name"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "model", "==", "'pix2pixHD'", ":", "\n", "        ", "from", ".", "pix2pixHD_model", "import", "Pix2PixHDModel", ",", "InferenceModel", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "model", "=", "Pix2PixHDModel", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "InferenceModel", "(", ")", "\n", "", "", "else", ":", "\n", "    \t", "from", ".", "ui_model", "import", "UIModel", "\n", "model", "=", "UIModel", "(", ")", "\n", "", "model", ".", "initialize", "(", "opt", ")", "\n", "if", "opt", ".", "verbose", ":", "\n", "        ", "print", "(", "\"model [%s] was created\"", "%", "(", "model", ".", "name", "(", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "len", "(", "opt", ".", "gpu_ids", ")", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GANLoss.__init__": [[79, 91], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GANLoss.get_target_tensor": [[92, 109], ["networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.real_label_var.numel", "input.numel", "networks.GANLoss.fake_label_var.numel", "input.numel", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GANLoss.__call__": [[110, 121], ["isinstance", "networks.GANLoss.get_target_tensor", "networks.GANLoss.loss", "networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.VGGLoss.__init__": [[137, 143], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.VGGLoss.forward": [[144, 165], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks.VGGLoss.criterion"], "methods", ["None"], ["# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n", "", "", "class", "CCLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.CCLoss.__init__": [[167, 173], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.CCLoss.forward": [[175, 225], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.KLLoss.__init__": [[228, 234], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.KLLoss.forward": [[236, 268], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n", "", "", "class", "NSSLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.NSSLoss.__init__": [[270, 276], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.NSSLoss.forward": [[278, 340], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.LocalEnhancer.__init__": [[346, 388], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks.GlobalGenerator", "range", "setattr", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "model_downsample_2", "=", "[", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_3'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample_2", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.LocalEnhancer.forward": [[389, 412], ["range", "networks.LocalEnhancer.model", "print", "range", "input_downsampled.append", "getattr.size", "getattr", "getattr", "getattr", "getattr.", "print", "networks.LocalEnhancer.downsample", "getattr.size", "getattr.", "str", "str", "str"], "methods", ["None"], ["### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator ", "\n", "print", "(", "\"output_prev_global :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "model_downsample_2", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_3'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "print", "(", "\"output_prev_local :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "# output_prev = model_downsample_2(output_prev) # this is my operation, in order to make sure that the resolution of final output saliency map is the same as input image", "\n", "\n", "", "return", "output_prev", "\n", "\n", "", "", "class", "GlobalGenerator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GlobalGenerator.__init__": [[414, 439], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GlobalGenerator.forward": [[440, 444], ["networks.GlobalGenerator.model", "print", "networks.GlobalGenerator.model", "networks.GlobalGenerator.size"], "methods", ["None"], ["        ", "outglobal", "=", "self", ".", "model", "(", "input", ")", "\n", "print", "(", "\"output_prev_global XXXXXXXXXXXXXXXXXXXXXXX:\"", ",", "outglobal", ".", "size", "(", ")", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n", "", "", "class", "encoderconv_1", "(", "nn", ".", "Module", ")", ":", "# basic conv of encoder", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.encoderconv_1.__init__": [[446, 455], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.encoderconv_1.forward": [[456, 458], ["networks.encoderconv_1.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "encoderconv_2", "(", "nn", ".", "Module", ")", ":", "# basic conv of encoder", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.encoderconv_2.__init__": [[460, 468], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.encoderconv_2.forward": [[469, 471], ["networks.encoderconv_2.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "decoderconv_1", "(", "nn", ".", "Module", ")", ":", "# basic conv of encoder", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_1.__init__": [[473, 483], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_1.forward": [[484, 486], ["networks.decoderconv_1.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "decoderconv_2", "(", "nn", ".", "Module", ")", ":", "# basic conv of encoder", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_2.__init__": [[488, 497], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_2.forward": [[498, 500], ["networks.decoderconv_2.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "decoderconv_3", "(", "nn", ".", "Module", ")", ":", "# basic conv of encoder", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_3.__init__": [[502, 511], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.decoderconv_3.forward": [[512, 514], ["networks.decoderconv_3.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "dimredconv", "(", "nn", ".", "Module", ")", ":", "# dim-reduction layer, i.e. bottleneck layer", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.dimredconv.__init__": [[516, 523], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.dimredconv.forward": [[524, 526], ["networks.dimredconv.conv"], "methods", ["None"], ["        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n", "", "", "class", "GlobalUNet", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GlobalUNet.__init__": [[528, 635], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.ResnetBlock", "networks.ResnetBlock", "networks.ResnetBlock", "networks.ResnetBlock", "networks.decoderconv_3", "networks.decoderconv_2", "networks.decoderconv_2", "networks.decoderconv_2", "networks.decoderconv_2", "networks.decoderconv_2", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "networks.dimredconv", "torch.AvgPool2d", "torch.AvgPool2d", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.encoderconv_2", "networks.ResnetBlock", "networks.decoderconv_3", "networks.decoderconv_2", "networks.decoderconv_2", "networks.decoderconv_2", "networks.decoderconv_2", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_2", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "# self.en_conv3 = encoderconv_2(128, 256) # local only", "\n", "self", ".", "en_conv3", "=", "encoderconv_2", "(", "128", "+", "128", ",", "256", ")", "# global + local", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# self.en_conv7 = encoderconv_2(1024, 1024)", "\n", "# self.en_conv8 = encoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# decoder of generator", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "# self.de_conv2 = decoderconv_1(1024+1024, 1024)", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "de_conv1", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "# self.de_conv5 = decoderconv_2(128+128, 64) # local only", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "128", "+", "256", ",", "64", ")", "# global + local", "\n", "self", ".", "de_conv6", "=", "decoderconv_2", "(", "64", "+", "64", ",", "output_nc", ")", "\n", "\n", "'''\n        self.de_conv1 = decoderconv_3(1024, 1024)\n        self.de_conv2 = decoderconv_2(1024, 512)\n        self.de_conv3 = decoderconv_2(512, 256)\n        self.de_conv4 = decoderconv_2(256, 128)\n        self.de_conv5 = decoderconv_2(128, 64)\n        self.de_conv6 = decoderconv_2(64, output_nc)\n        '''", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "# 2X downsampling model for input image", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "\n", "'''\n        self.en_conv1_g = encoderconv_2(input_nc, 64)\n        self.en_conv2_g = encoderconv_2(64, 128)\n        self.en_conv3_g = encoderconv_2(128, 256)\n        self.en_conv4_g = encoderconv_2(256, 512)\n        self.en_conv5_g = encoderconv_2(512, 1024)\n        self.res_g = ResnetBlock(1024, padding_type=padding_type, activation=activation, norm_layer=norm_layer)\n        self.de_conv1_g = decoderconv_3(1024, 512)\n        self.de_conv2_g = decoderconv_2(512+512, 256)\n        self.de_conv3_g = decoderconv_2(256+256, 128)\n        self.de_conv4_g = decoderconv_2(128+128, 64)\n        self.de_conv5_g = decoderconv_2(64+64, output_nc)\n        '''", "\n", "self", ".", "en_conv1_g", "=", "encoderconv_2", "(", "input_nc", ",", "128", ")", "\n", "self", ".", "en_conv2_g", "=", "encoderconv_2", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv3_g", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv4_g", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv5_g", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "self", ".", "res_g", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "de_conv1_g", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2_g", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3_g", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4_g", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "self", ".", "de_conv5_g", "=", "decoderconv_2", "(", "128", "+", "128", ",", "output_nc", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_ds", "=", "self", ".", "downsample", "(", "input", ")", "\n", "# print(\"input :\", input.size())", "\n", "# print(\"input_ds :\", input_ds.size())", "\n", "\n", "\n", "# global U-Net", "\n", "e1_g", "=", "self", ".", "en_conv1_g", "(", "input_ds", ")", "\n", "e2_g", "=", "self", ".", "en_conv2_g", "(", "e1_g", ")", "\n", "e3_g", "=", "self", ".", "en_conv3_g", "(", "e2_g", ")", "\n", "e4_g", "=", "self", ".", "en_conv4_g", "(", "e3_g", ")", "\n", "e5_g", "=", "self", ".", "en_conv5_g", "(", "e4_g", ")", "\n", "\n", "res1_g", "=", "self", ".", "res_g", "(", "e5_g", ")", "\n", "res2_g", "=", "self", ".", "res_g", "(", "res1_g", ")", "\n", "res3_g", "=", "self", ".", "res_g", "(", "res2_g", ")", "\n", "res4_g", "=", "self", ".", "res_g", "(", "res3_g", ")", "\n", "# print(\"res1_g :\", res1_g.size())", "\n", "\n", "d1_g", "=", "self", ".", "de_conv1_g", "(", "res4_g", ")", "\n", "# print(\"d1_g and e4_g are :\", d1_g.size(), e4_g.size())", "\n", "d2_g", "=", "self", ".", "de_conv2_g", "(", "torch", ".", "cat", "(", "[", "d1_g", ",", "e4_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d2_g and e3_g are :\", d2_g.size(), e3_g.size())", "\n", "d3_g", "=", "self", ".", "de_conv3_g", "(", "torch", ".", "cat", "(", "[", "d2_g", ",", "e3_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d3_g and e2_g are :\", d3_g.size(), e2_g.size())", "\n", "d4_g", "=", "self", ".", "de_conv4_g", "(", "torch", ".", "cat", "(", "[", "d3_g", ",", "e2_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d4_g and e1_g are :\", d4_g.size(), e1_g.size())", "\n", "d5_g", "=", "self", ".", "de_conv5_g", "(", "torch", ".", "cat", "(", "[", "d4_g", ",", "e1_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d5_g are :\", d5_g.size()) ", "\n", "d6_g", "=", "self", ".", "dimr_conv1", "(", "d5_g", ")", "# d6_g is a small output saliency map", "\n", "\n", "\n", "\n", "# local U-Net", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.GlobalUNet.forward": [[636, 804], ["networks.GlobalUNet.downsample", "networks.GlobalUNet.en_conv1_g", "networks.GlobalUNet.en_conv2_g", "networks.GlobalUNet.en_conv3_g", "networks.GlobalUNet.en_conv4_g", "networks.GlobalUNet.en_conv5_g", "networks.GlobalUNet.res_g", "networks.GlobalUNet.res_g", "networks.GlobalUNet.res_g", "networks.GlobalUNet.res_g", "networks.GlobalUNet.de_conv1_g", "print", "networks.GlobalUNet.de_conv1_g_csc", "networks.GlobalUNet.upsp_output_csc", "print", "networks.GlobalUNet.de_conv2_g", "networks.GlobalUNet.de_conv2_g_csc", "networks.GlobalUNet.upsp_output_csc", "print", "networks.GlobalUNet.de_conv3_g", "networks.GlobalUNet.relude_conv1_g_csc", "networks.GlobalUNet.s_attention_conv_1", "networks.GlobalUNet.relu_attention_1", "networks.GlobalUNet.softmax_1", "s_attention_map_1.repeat.repeat.repeat", "d1_g_csc.mul.mul.mul", "print", "networks.GlobalUNet.de_conv4_g", "print", "networks.GlobalUNet.relude_conv2_g_csc", "networks.GlobalUNet.s_attention_conv_2", "networks.GlobalUNet.relu_attention_2", "networks.GlobalUNet.softmax_2", "s_attention_map_2.repeat.repeat.repeat", "d2_g_csc.mul.mul.mul", "networks.GlobalUNet.de_conv5_g", "print", "networks.GlobalUNet.dimr_conv1", "networks.GlobalUNet.en_conv1", "print", "networks.GlobalUNet.en_conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.en_conv3", "print", "networks.GlobalUNet.en_conv4", "print", "networks.GlobalUNet.en_conv5", "print", "networks.GlobalUNet.en_conv6", "print", "networks.GlobalUNet.res_1", "networks.GlobalUNet.res_2", "networks.GlobalUNet.res_2", "networks.GlobalUNet.res_2", "networks.GlobalUNet.de_conv1", "print", "networks.GlobalUNet.de_conv1_csc", "networks.GlobalUNet.upsp_output_csc", "print", "networks.GlobalUNet.de_conv2", "print", "networks.GlobalUNet.de_conv2_csc", "networks.GlobalUNet.upsp_output_csc", "print", "networks.GlobalUNet.de_conv3", "networks.GlobalUNet.relude_conv1_csc", "networks.GlobalUNet.s_attention_conv_3", "networks.GlobalUNet.relu_attention_3", "networks.GlobalUNet.softmax_3", "s_attention_map_3.repeat.repeat.repeat", "d1_csc.mul.mul.mul", "print", "networks.GlobalUNet.de_conv4", "networks.GlobalUNet.relude_conv2_csc", "networks.GlobalUNet.s_attention_conv_4", "networks.GlobalUNet.relu_attention_4", "networks.GlobalUNet.softmax_4", "s_attention_map_4.repeat.repeat.repeat", "d2_csc.mul.mul.mul", "print", "print", "networks.GlobalUNet.de_conv5", "print", "networks.GlobalUNet.de_conv6", "print", "networks.GlobalUNet.dimr_conv1", "print", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "d1_g_csc.mul.mul.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "d1_csc.mul.mul.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.GlobalUNet.size", "networks.GlobalUNet.size"], "methods", ["None"], ["e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2_local", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "\n", "# e2 = torch.add(d4_g, e2_local) # pooling the global features into local UNet", "\n", "# e2 = d4_g + e2_local # pooling the global features into local UNet", "\n", "e2", "=", "torch", ".", "cat", "(", "[", "e2_local", ",", "d4_g", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "# e7 = self.en_conv7(e6)", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "# e8 = self.en_conv8(e7)", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e6", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_2", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "# print(\"res1 :\", res1.size())", "\n", "# print(\"res2 :\", res2.size())", "\n", "# print(\"res3 :\", res3.size())", "\n", "# print(\"res4 :\", res4.size())", "\n", "\n", "# d1 = self.de_conv1(e6)", "\n", "d1", "=", "self", ".", "de_conv1", "(", "res4", ")", "\n", "# print(\"d1 and e5 are :\", d1.size(), e5.size())", "\n", "d2", "=", "self", ".", "de_conv2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "e5", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d2 = self.de_conv2(d1)", "\n", "# print(\"d2 and e4 are :\", d2.size(), e4.size())", "\n", "d3", "=", "self", ".", "de_conv3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "e4", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d3 = self.de_conv3(d2)", "\n", "# print(\"d3 and e3 are :\", d3.size(), e3.size())", "\n", "d4", "=", "self", ".", "de_conv4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "e3", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d4 = self.de_conv4(d3)", "\n", "#print(\"d4 and e2 are :\", d4.size(), e2.size())", "\n", "d5", "=", "self", ".", "de_conv5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "e2", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d5 = self.de_conv5(d4)", "\n", "# print(\"d5 and e1 are :\", d5.size(), e1.size())", "\n", "d6", "=", "self", ".", "de_conv6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "e1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# d6 = self.de_conv6(d5)", "\n", "\n", "d7", "=", "self", ".", "dimr_conv1", "(", "d6", ")", "\n", "\n", "\n", "\n", "out", "=", "d7", "# the real final output", "\n", "# out = torch.squeeze(e1, 0)", "\n", "\n", "# out = e1", "\n", "# out = out[0:2, :, :]", "\n", "# print(\"out is :\", out, out.size())", "\n", "'''\n        out1 = d5\n        # out = out1[0:1, 0:3, :, :] # this is right\n        out = torch.mean(out1, 1) # mean across 64 channel direction\n        out = torch.unsqueeze(out, 0)\n        print(\"out1 size is :\", out1.size())\n        print(\"out size is :\", out.size())\n        print(\"d7 size is :\", d7.size())\n        '''", "\n", "\n", "return", "out", "\n", "\n", "# Define a resnet block", "\n", "", "", "class", "ResnetBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n", "", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n", "", "", "class", "Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n", "", "", "class", "MultiscaleDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.ResnetBlock.__init__": [[807, 810], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.ResnetBlock.build_conv_block": [[811, 842], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n", "# Defines the PatchGAN discriminator with the specified arguments.", "\n", "", "", "class", "NLayerDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.ResnetBlock.forward": [[843, 846], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.Encoder.__init__": [[848, 868], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.Encoder.forward": [[869, 883], ["networks.Encoder.model", "networks.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n", "", "", "", "from", "torchvision", "import", "models", "\n", "class", "Vgg19", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.MultiscaleDiscriminator.__init__": [[885, 901], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.MultiscaleDiscriminator.singleD_forward": [[902, 910], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.MultiscaleDiscriminator.forward": [[911, 924], ["range", "result.append", "getattr", "networks.MultiscaleDiscriminator.singleD_forward", "networks.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.NLayerDiscriminator.__init__": [[927, 966], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.NLayerDiscriminator.forward": [[967, 976], ["range", "networks.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.Vgg19.__init__": [[979, 1000], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks.Vgg19.slice1.add_module", "networks.Vgg19.slice2.add_module", "networks.Vgg19.slice3.add_module", "networks.Vgg19.slice4.add_module", "networks.Vgg19.slice5.add_module", "networks.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.Vgg19.forward": [[1001, 1009], ["networks.Vgg19.slice1", "networks.Vgg19.slice2", "networks.Vgg19.slice3", "networks.Vgg19.slice4", "networks.Vgg19.slice5"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.weights_init": [[18, 25], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.get_norm_layer": [[26, 34], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.define_G": [[35, 55], ["networks.get_norm_layer", "print", "GlobalUNet.apply", "networks.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks.LocalEnhancer", "networks.Encoder", "networks.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n", "", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.define_D": [[56, 65], ["networks.get_norm_layer", "networks.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n", "", "def", "print_network", "(", "net", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks.print_network": [[66, 74], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n", "##############################################################################", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.GANLoss.__init__": [[71, 83], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.GANLoss.get_target_tensor": [[84, 101], ["networks_ori.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_ori.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_ori.GANLoss.real_label_var.numel", "input.numel", "networks_ori.GANLoss.fake_label_var.numel", "input.numel", "networks_ori.GANLoss.Tensor", "networks_ori.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.GANLoss.__call__": [[102, 113], ["isinstance", "networks_ori.GANLoss.get_target_tensor", "networks_ori.GANLoss.loss", "networks_ori.GANLoss.get_target_tensor", "networks_ori.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.VGGLoss.__init__": [[115, 120], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_ori.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.VGGLoss.forward": [[121, 127], ["range", "networks_ori.VGGLoss.vgg", "networks_ori.VGGLoss.vgg", "len", "networks_ori.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.LocalEnhancer.__init__": [[132, 168], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_ori.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_ori.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.LocalEnhancer.forward": [[169, 186], ["range", "networks_ori.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_ori.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.GlobalGenerator.__init__": [[188, 213], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_ori.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.GlobalGenerator.forward": [[214, 216], ["networks_ori.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.ResnetBlock.__init__": [[219, 222], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_ori.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.ResnetBlock.build_conv_block": [[223, 254], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.ResnetBlock.forward": [[255, 258], ["networks_ori.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.Encoder.__init__": [[260, 280], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.Encoder.forward": [[281, 295], ["networks_ori.Encoder.model", "networks_ori.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.MultiscaleDiscriminator.__init__": [[297, 313], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_ori.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.MultiscaleDiscriminator.singleD_forward": [[314, 322], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.MultiscaleDiscriminator.forward": [[323, 336], ["range", "result.append", "getattr", "networks_ori.MultiscaleDiscriminator.singleD_forward", "networks_ori.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.NLayerDiscriminator.__init__": [[339, 378], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.NLayerDiscriminator.forward": [[379, 388], ["range", "networks_ori.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.Vgg19.__init__": [[391, 412], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_ori.Vgg19.slice1.add_module", "networks_ori.Vgg19.slice2.add_module", "networks_ori.Vgg19.slice3.add_module", "networks_ori.Vgg19.slice4.add_module", "networks_ori.Vgg19.slice5.add_module", "networks_ori.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.Vgg19.forward": [[413, 421], ["networks_ori.Vgg19.slice1", "networks_ori.Vgg19.slice2", "networks_ori.Vgg19.slice3", "networks_ori.Vgg19.slice4", "networks_ori.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.weights_init": [[12, 19], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.get_norm_layer": [[20, 28], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.define_G": [[29, 47], ["networks_ori.get_norm_layer", "print", "Encoder.apply", "networks_ori.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "Encoder.cuda", "networks_ori.LocalEnhancer", "networks_ori.Encoder"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.define_D": [[48, 57], ["networks_ori.get_norm_layer", "networks_ori.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_ori.print_network": [[58, 66], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.name": [[17, 19], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.init_loss_filter": [[29, 36], ["zip"], "methods", ["None"], ["# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n", "", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.initialize": [[37, 137], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model.Pix2PixHDModel.load_network", "pix2pixHD_model.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model.Pix2PixHDModel.netG.parameters", "pix2pixHD_model.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# def encode_input(self, label_map, inst_map=None, real_image=None, feat_map=None, infer=False):  ", "\n", "", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.encode_input": [[139, 175], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n", "", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.discriminate": [[176, 183], ["torch.cat", "pix2pixHD_model.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# def forward(self, label, inst, image, feat, infer=False):", "\n", "", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.forward": [[185, 267], ["pix2pixHD_model.Pix2PixHDModel.encode_input", "pix2pixHD_model.Pix2PixHDModel.netG.forward", "torch.nn.AvgPool2d", "pix2pixHD_model.Pix2PixHDModel.discriminate", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "pix2pixHD_model.Pix2PixHDModel.discriminate", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "input_label_small.mul", "input_label_small.mul", "pix2pixHD_model.Pix2PixHDModel.loss_filter", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model.Pix2PixHDModel.criterionVGG", "pix2pixHD_model.Pix2PixHDModel.criterionCC", "pix2pixHD_model.Pix2PixHDModel.criterionKL", "pix2pixHD_model.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "# Real Detection and Loss        ", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# GAN loss (Fake Passability Loss)        ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n", "", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n", "", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.inference": [[268, 291], ["pix2pixHD_model.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model.Pix2PixHDModel.netG.forward", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "pix2pixHD_model.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n", "", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.sample_features": [[292, 312], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n", "", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.encode_features": [[313, 334], ["torch.autograd.Variable", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n", "", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.get_edges": [[335, 345], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["\n", "", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.save": [[346, 351], ["pix2pixHD_model.Pix2PixHDModel.save_network", "pix2pixHD_model.Pix2PixHDModel.save_network", "pix2pixHD_model.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["\n", "", "", "class", "InferenceModel", "(", "Pix2PixHDModel", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.update_fixed_params": [[352, 360], ["list", "torch.optim.Adam", "pix2pixHD_model.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.update_learning_rate": [[361, 371], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.InferenceModel.forward": [[385, 388], ["pix2pixHD_model.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GANLoss.__init__": [[75, 87], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GANLoss.get_target_tensor": [[88, 105], ["networks_old3.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old3.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old3.GANLoss.real_label_var.numel", "input.numel", "networks_old3.GANLoss.fake_label_var.numel", "input.numel", "networks_old3.GANLoss.Tensor", "networks_old3.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GANLoss.__call__": [[106, 117], ["isinstance", "networks_old3.GANLoss.get_target_tensor", "networks_old3.GANLoss.loss", "networks_old3.GANLoss.get_target_tensor", "networks_old3.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.VGGLoss.__init__": [[119, 124], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old3.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.VGGLoss.forward": [[125, 131], ["range", "networks_old3.VGGLoss.vgg", "networks_old3.VGGLoss.vgg", "len", "networks_old3.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.CCLoss.__init__": [[133, 139], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.CCLoss.forward": [[141, 191], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "L1_loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "map_pred", "-", "map_gtd", ")", ")", "\n", "print", "(", "\"CC and L1 are :\"", ",", "CC", ",", "L1_loss", ")", "\n", "CC", "=", "CC", "+", "L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.KLLoss.__init__": [[194, 200], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.KLLoss.forward": [[202, 234], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.NSSLoss.__init__": [[236, 242], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.NSSLoss.forward": [[244, 306], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.LocalEnhancer.__init__": [[312, 348], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old3.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old3.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.LocalEnhancer.forward": [[349, 366], ["range", "networks_old3.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old3.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GlobalGenerator.__init__": [[368, 393], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old3.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GlobalGenerator.forward": [[394, 396], ["networks_old3.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.encoderconv_1.__init__": [[398, 407], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.encoderconv_1.forward": [[408, 410], ["networks_old3.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.encoderconv_2.__init__": [[412, 420], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.encoderconv_2.forward": [[421, 423], ["networks_old3.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.decoderconv_1.__init__": [[425, 435], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.decoderconv_1.forward": [[436, 438], ["networks_old3.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.decoderconv_2.__init__": [[440, 449], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.decoderconv_2.forward": [[450, 452], ["networks_old3.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.dimredconv.__init__": [[454, 461], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.dimredconv.forward": [[462, 464], ["networks_old3.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GlobalUNet.__init__": [[466, 488], ["torch.Module.__init__", "networks_old3.encoderconv_1", "networks_old3.encoderconv_2", "networks_old3.encoderconv_1", "networks_old3.encoderconv_2", "networks_old3.encoderconv_1", "networks_old3.encoderconv_2", "networks_old3.encoderconv_1", "networks_old3.encoderconv_2", "networks_old3.decoderconv_2", "networks_old3.decoderconv_1", "networks_old3.decoderconv_2", "networks_old3.decoderconv_1", "networks_old3.decoderconv_2", "networks_old3.decoderconv_1", "networks_old3.decoderconv_2", "networks_old3.decoderconv_1", "networks_old3.dimredconv"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_1", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "self", ".", "en_conv3", "=", "encoderconv_1", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_1", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "self", ".", "en_conv7", "=", "encoderconv_1", "(", "1024", ",", "1024", ")", "\n", "self", ".", "en_conv8", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# decoder of generator", "\n", "self", ".", "de_conv1", "=", "decoderconv_2", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_1", "(", "1024", "+", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_1", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv6", "=", "decoderconv_1", "(", "256", "+", "256", ",", "128", ")", "\n", "self", ".", "de_conv7", "=", "decoderconv_2", "(", "128", "+", "128", ",", "64", ")", "\n", "self", ".", "de_conv8", "=", "decoderconv_1", "(", "64", "+", "64", ",", "output_nc", ")", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.GlobalUNet.forward": [[489, 527], ["networks_old3.GlobalUNet.en_conv1", "networks_old3.GlobalUNet.en_conv2", "networks_old3.GlobalUNet.en_conv3", "networks_old3.GlobalUNet.en_conv4", "networks_old3.GlobalUNet.en_conv5", "networks_old3.GlobalUNet.en_conv6", "networks_old3.GlobalUNet.en_conv7", "networks_old3.GlobalUNet.en_conv8", "networks_old3.GlobalUNet.de_conv1", "networks_old3.GlobalUNet.de_conv2", "networks_old3.GlobalUNet.de_conv3", "networks_old3.GlobalUNet.de_conv4", "networks_old3.GlobalUNet.de_conv5", "networks_old3.GlobalUNet.de_conv6", "networks_old3.GlobalUNet.de_conv7", "networks_old3.GlobalUNet.de_conv8", "networks_old3.GlobalUNet.dimr_conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "e7", "=", "self", ".", "en_conv7", "(", "e6", ")", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "e8", "=", "self", ".", "en_conv8", "(", "e7", ")", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "d1", "=", "self", ".", "de_conv1", "(", "e8", ")", "\n", "# print(\"d1 and e7 are :\", d1.size(), e7.size())", "\n", "d2", "=", "self", ".", "de_conv2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "e7", "]", ",", "dim", "=", "1", ")", ")", "# channel-direction concat", "\n", "# print(\"d2 and e6 are :\", d2.size(), e6.size())", "\n", "d3", "=", "self", ".", "de_conv3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "e6", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d3 and e5 are :\", d3.size(), e5.size())", "\n", "d4", "=", "self", ".", "de_conv4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "e5", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d4 and e4 are :\", d4.size(), e4.size())", "\n", "d5", "=", "self", ".", "de_conv5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "e4", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d5 and e3 are :\", d5.size(), e3.size())", "\n", "d6", "=", "self", ".", "de_conv6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "e3", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d6 and e2 are :\", d6.size(), e2.size())", "\n", "d7", "=", "self", ".", "de_conv7", "(", "torch", ".", "cat", "(", "[", "d6", ",", "e2", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d7 and e1 are :\", d7.size(), e1.size())", "\n", "d8", "=", "self", ".", "de_conv8", "(", "torch", ".", "cat", "(", "[", "d7", ",", "e1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "d9", "=", "self", ".", "dimr_conv1", "(", "d8", ")", "\n", "\n", "return", "d9", "\n", "# return d8", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.ResnetBlock.__init__": [[536, 539], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old3.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.ResnetBlock.build_conv_block": [[540, 571], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.ResnetBlock.forward": [[572, 575], ["networks_old3.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.Encoder.__init__": [[577, 597], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.Encoder.forward": [[598, 612], ["networks_old3.Encoder.model", "networks_old3.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.MultiscaleDiscriminator.__init__": [[614, 630], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old3.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.MultiscaleDiscriminator.singleD_forward": [[631, 639], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.MultiscaleDiscriminator.forward": [[640, 653], ["range", "result.append", "getattr", "networks_old3.MultiscaleDiscriminator.singleD_forward", "networks_old3.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.NLayerDiscriminator.__init__": [[656, 695], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.NLayerDiscriminator.forward": [[696, 705], ["range", "networks_old3.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.Vgg19.__init__": [[708, 729], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old3.Vgg19.slice1.add_module", "networks_old3.Vgg19.slice2.add_module", "networks_old3.Vgg19.slice3.add_module", "networks_old3.Vgg19.slice4.add_module", "networks_old3.Vgg19.slice5.add_module", "networks_old3.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.Vgg19.forward": [[730, 738], ["networks_old3.Vgg19.slice1", "networks_old3.Vgg19.slice2", "networks_old3.Vgg19.slice3", "networks_old3.Vgg19.slice4", "networks_old3.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.weights_init": [[14, 21], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.get_norm_layer": [[22, 30], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.define_G": [[31, 51], ["networks_old3.get_norm_layer", "print", "GlobalUNet.apply", "networks_old3.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old3.LocalEnhancer", "networks_old3.Encoder", "networks_old3.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.define_D": [[52, 61], ["networks_old3.get_norm_layer", "networks_old3.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old3.print_network": [[62, 70], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GANLoss.__init__": [[79, 91], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GANLoss.get_target_tensor": [[92, 109], ["networks_old6.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old6.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old6.GANLoss.real_label_var.numel", "input.numel", "networks_old6.GANLoss.fake_label_var.numel", "input.numel", "networks_old6.GANLoss.Tensor", "networks_old6.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GANLoss.__call__": [[110, 121], ["isinstance", "networks_old6.GANLoss.get_target_tensor", "networks_old6.GANLoss.loss", "networks_old6.GANLoss.get_target_tensor", "networks_old6.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.VGGLoss.__init__": [[137, 144], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old6.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "# self.vgg = Vgg19().cuda(gpu_ids[0])", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.VGGLoss.forward": [[145, 166], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old6.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.CCLoss.__init__": [[168, 174], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.CCLoss.forward": [[176, 226], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.KLLoss.__init__": [[229, 235], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.KLLoss.forward": [[237, 269], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.NSSLoss.__init__": [[271, 277], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.NSSLoss.forward": [[279, 341], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.LocalEnhancer.__init__": [[347, 383], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old6.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old6.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.LocalEnhancer.forward": [[384, 401], ["range", "networks_old6.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old6.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GlobalGenerator.__init__": [[403, 428], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old6.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GlobalGenerator.forward": [[429, 431], ["networks_old6.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.encoderconv_1.__init__": [[433, 442], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.encoderconv_1.forward": [[443, 445], ["networks_old6.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.encoderconv_2.__init__": [[447, 455], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.encoderconv_2.forward": [[456, 458], ["networks_old6.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_1.__init__": [[460, 470], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_1.forward": [[471, 473], ["networks_old6.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_2.__init__": [[475, 484], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_2.forward": [[485, 487], ["networks_old6.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_3.__init__": [[489, 498], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.decoderconv_3.forward": [[499, 501], ["networks_old6.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.dimredconv.__init__": [[503, 510], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.dimredconv.forward": [[511, 513], ["networks_old6.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GlobalUNet.__init__": [[515, 557], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "networks_old6.encoderconv_2", "networks_old6.encoderconv_2", "networks_old6.encoderconv_2", "networks_old6.encoderconv_2", "networks_old6.encoderconv_2", "networks_old6.encoderconv_2", "networks_old6.ResnetBlock", "networks_old6.ResnetBlock", "networks_old6.ResnetBlock", "networks_old6.ResnetBlock", "networks_old6.decoderconv_3", "networks_old6.decoderconv_2", "networks_old6.decoderconv_2", "networks_old6.decoderconv_2", "networks_old6.decoderconv_2", "networks_old6.decoderconv_2", "networks_old6.dimredconv"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_2", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "self", ".", "en_conv3", "=", "encoderconv_2", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# self.en_conv7 = encoderconv_2(1024, 1024)", "\n", "# self.en_conv8 = encoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# decoder of generator", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "# self.de_conv2 = decoderconv_1(1024+1024, 1024)", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "'''\n        self.de_conv1 = decoderconv_3(1024, 1024)\n        self.de_conv2 = decoderconv_2(1024+1024, 512)\n        self.de_conv3 = decoderconv_2(512+512, 256)\n        self.de_conv4 = decoderconv_2(256+256, 128)\n        self.de_conv5 = decoderconv_2(128+128, 64)\n        self.de_conv6 = decoderconv_2(64+64, output_nc)\n        '''", "\n", "self", ".", "de_conv1", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_2", "(", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "512", ",", "256", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_2", "(", "256", ",", "128", ")", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "128", ",", "64", ")", "\n", "self", ".", "de_conv6", "=", "decoderconv_2", "(", "64", ",", "output_nc", ")", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.GlobalUNet.forward": [[558, 619], ["networks_old6.GlobalUNet.en_conv1", "networks_old6.GlobalUNet.en_conv2", "networks_old6.GlobalUNet.en_conv3", "networks_old6.GlobalUNet.en_conv4", "networks_old6.GlobalUNet.en_conv5", "networks_old6.GlobalUNet.en_conv6", "networks_old6.GlobalUNet.res_1", "networks_old6.GlobalUNet.res_2", "networks_old6.GlobalUNet.res_2", "networks_old6.GlobalUNet.res_2", "networks_old6.GlobalUNet.de_conv1", "networks_old6.GlobalUNet.de_conv2", "networks_old6.GlobalUNet.de_conv3", "networks_old6.GlobalUNet.de_conv4", "networks_old6.GlobalUNet.de_conv5", "networks_old6.GlobalUNet.de_conv6", "networks_old6.GlobalUNet.dimr_conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "# e7 = self.en_conv7(e6)", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "# e8 = self.en_conv8(e7)", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e6", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_2", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "# d1 = self.de_conv1(e6)", "\n", "d1", "=", "self", ".", "de_conv1", "(", "res4", ")", "\n", "# print(\"d1 and e5 are :\", d1.size(), e5.size())", "\n", "# d2 = self.de_conv2(torch.cat([d1, e5], dim=1))", "\n", "d2", "=", "self", ".", "de_conv2", "(", "d1", ")", "\n", "# print(\"d2 and e4 are :\", d2.size(), e4.size())", "\n", "# d3 = self.de_conv3(torch.cat([d2, e4], dim=1))", "\n", "d3", "=", "self", ".", "de_conv3", "(", "d2", ")", "\n", "# print(\"d3 and e3 are :\", d3.size(), e3.size())", "\n", "# d4 = self.de_conv4(torch.cat([d3, e3], dim=1))", "\n", "d4", "=", "self", ".", "de_conv4", "(", "d3", ")", "\n", "# print(\"d4 and e2 are :\", d4.size(), e2.size())", "\n", "# d5 = self.de_conv5(torch.cat([d4, e2], dim=1))", "\n", "d5", "=", "self", ".", "de_conv5", "(", "d4", ")", "\n", "# print(\"d5 and e1 are :\", d5.size(), e1.size())", "\n", "# d6 = self.de_conv6(torch.cat([d5, e1], dim=1))", "\n", "d6", "=", "self", ".", "de_conv6", "(", "d5", ")", "\n", "\n", "d7", "=", "self", ".", "dimr_conv1", "(", "d6", ")", "\n", "\n", "out", "=", "d7", "# the real final output", "\n", "# out = torch.squeeze(e1, 0)", "\n", "\n", "# out = e1", "\n", "# out = out[0:2, :, :]", "\n", "# print(\"out is :\", out, out.size())", "\n", "'''\n        out1 = d5\n        # out = out1[0:1, 0:3, :, :] # this is right\n        out = torch.mean(out1, 1) # mean across 64 channel direction\n        out = torch.unsqueeze(out, 0)\n        print(\"out1 size is :\", out1.size())\n        print(\"out size is :\", out.size())\n        print(\"d7 size is :\", d7.size())\n        '''", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.ResnetBlock.__init__": [[622, 625], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old6.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.ResnetBlock.build_conv_block": [[626, 657], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.ResnetBlock.forward": [[658, 661], ["networks_old6.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.Encoder.__init__": [[663, 683], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.Encoder.forward": [[684, 698], ["networks_old6.Encoder.model", "networks_old6.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.MultiscaleDiscriminator.__init__": [[700, 716], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old6.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.MultiscaleDiscriminator.singleD_forward": [[717, 725], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.MultiscaleDiscriminator.forward": [[726, 739], ["range", "result.append", "getattr", "networks_old6.MultiscaleDiscriminator.singleD_forward", "networks_old6.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.NLayerDiscriminator.__init__": [[742, 781], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.NLayerDiscriminator.forward": [[782, 791], ["range", "networks_old6.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.Vgg19.__init__": [[794, 815], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old6.Vgg19.slice1.add_module", "networks_old6.Vgg19.slice2.add_module", "networks_old6.Vgg19.slice3.add_module", "networks_old6.Vgg19.slice4.add_module", "networks_old6.Vgg19.slice5.add_module", "networks_old6.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.Vgg19.forward": [[816, 824], ["networks_old6.Vgg19.slice1", "networks_old6.Vgg19.slice2", "networks_old6.Vgg19.slice3", "networks_old6.Vgg19.slice4", "networks_old6.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.weights_init": [[17, 24], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.get_norm_layer": [[25, 33], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.define_G": [[34, 55], ["networks_old6.get_norm_layer", "print", "GlobalUNet.apply", "networks_old6.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old6.LocalEnhancer", "networks_old6.Encoder", "networks_old6.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "# print(\"cuda ids is :\", gpu_ids[0])  ", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.define_D": [[56, 65], ["networks_old6.get_norm_layer", "networks_old6.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old6.print_network": [[66, 74], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.GANLoss.__init__": [[72, 84], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.GANLoss.get_target_tensor": [[85, 102], ["networks_old2.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old2.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old2.GANLoss.real_label_var.numel", "input.numel", "networks_old2.GANLoss.fake_label_var.numel", "input.numel", "networks_old2.GANLoss.Tensor", "networks_old2.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.GANLoss.__call__": [[103, 114], ["isinstance", "networks_old2.GANLoss.get_target_tensor", "networks_old2.GANLoss.loss", "networks_old2.GANLoss.get_target_tensor", "networks_old2.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.VGGLoss.__init__": [[116, 121], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old2.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.VGGLoss.forward": [[122, 128], ["range", "networks_old2.VGGLoss.vgg", "networks_old2.VGGLoss.vgg", "len", "networks_old2.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.CCLoss.__init__": [[130, 136], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.CCLoss.forward": [[138, 181], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.KLLoss.__init__": [[184, 190], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.KLLoss.forward": [[192, 224], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.NSSLoss.__init__": [[226, 232], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.NSSLoss.forward": [[234, 296], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "print", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "print", "(", "\"early NSS is :\"", ",", "NSS", ")", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "print", "(", "bignss", ")", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.LocalEnhancer.__init__": [[302, 338], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old2.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old2.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.LocalEnhancer.forward": [[339, 356], ["range", "networks_old2.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old2.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.GlobalGenerator.__init__": [[358, 383], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old2.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.GlobalGenerator.forward": [[384, 386], ["networks_old2.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.ResnetBlock.__init__": [[389, 392], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old2.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.ResnetBlock.build_conv_block": [[393, 424], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.ResnetBlock.forward": [[425, 428], ["networks_old2.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.Encoder.__init__": [[430, 450], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.Encoder.forward": [[451, 465], ["networks_old2.Encoder.model", "networks_old2.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.MultiscaleDiscriminator.__init__": [[467, 483], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old2.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.MultiscaleDiscriminator.singleD_forward": [[484, 492], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.MultiscaleDiscriminator.forward": [[493, 506], ["range", "result.append", "getattr", "networks_old2.MultiscaleDiscriminator.singleD_forward", "networks_old2.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.NLayerDiscriminator.__init__": [[509, 548], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.NLayerDiscriminator.forward": [[549, 558], ["range", "networks_old2.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.Vgg19.__init__": [[561, 582], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old2.Vgg19.slice1.add_module", "networks_old2.Vgg19.slice2.add_module", "networks_old2.Vgg19.slice3.add_module", "networks_old2.Vgg19.slice4.add_module", "networks_old2.Vgg19.slice5.add_module", "networks_old2.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.Vgg19.forward": [[583, 591], ["networks_old2.Vgg19.slice1", "networks_old2.Vgg19.slice2", "networks_old2.Vgg19.slice3", "networks_old2.Vgg19.slice4", "networks_old2.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.weights_init": [[13, 20], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.get_norm_layer": [[21, 29], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.define_G": [[30, 48], ["networks_old2.get_norm_layer", "print", "Encoder.apply", "networks_old2.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "Encoder.cuda", "networks_old2.LocalEnhancer", "networks_old2.Encoder"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.define_D": [[49, 58], ["networks_old2.get_norm_layer", "networks_old2.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old2.print_network": [[59, 67], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GANLoss.__init__": [[77, 89], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GANLoss.get_target_tensor": [[90, 107], ["networks_old5.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old5.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old5.GANLoss.real_label_var.numel", "input.numel", "networks_old5.GANLoss.fake_label_var.numel", "input.numel", "networks_old5.GANLoss.Tensor", "networks_old5.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GANLoss.__call__": [[108, 119], ["isinstance", "networks_old5.GANLoss.get_target_tensor", "networks_old5.GANLoss.loss", "networks_old5.GANLoss.get_target_tensor", "networks_old5.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.VGGLoss.__init__": [[135, 141], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old5.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.VGGLoss.forward": [[142, 163], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old5.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.CCLoss.__init__": [[165, 171], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.CCLoss.forward": [[173, 223], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.KLLoss.__init__": [[226, 232], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.KLLoss.forward": [[234, 266], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.NSSLoss.__init__": [[268, 274], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.NSSLoss.forward": [[276, 338], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.LocalEnhancer.__init__": [[344, 380], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old5.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old5.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.LocalEnhancer.forward": [[381, 398], ["range", "networks_old5.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old5.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GlobalGenerator.__init__": [[400, 425], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old5.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GlobalGenerator.forward": [[426, 428], ["networks_old5.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.encoderconv_1.__init__": [[430, 439], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.encoderconv_1.forward": [[440, 442], ["networks_old5.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.encoderconv_2.__init__": [[444, 452], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.encoderconv_2.forward": [[453, 455], ["networks_old5.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_1.__init__": [[457, 467], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_1.forward": [[468, 470], ["networks_old5.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_2.__init__": [[472, 481], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_2.forward": [[482, 484], ["networks_old5.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_3.__init__": [[486, 495], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.decoderconv_3.forward": [[496, 498], ["networks_old5.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.dimredconv.__init__": [[500, 507], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.dimredconv.forward": [[508, 510], ["networks_old5.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GlobalUNet.__init__": [[512, 546], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "networks_old5.encoderconv_2", "networks_old5.encoderconv_2", "networks_old5.encoderconv_2", "networks_old5.encoderconv_2", "networks_old5.encoderconv_2", "networks_old5.encoderconv_2", "networks_old5.ResnetBlock", "networks_old5.ResnetBlock", "networks_old5.ResnetBlock", "networks_old5.ResnetBlock", "networks_old5.decoderconv_3", "networks_old5.decoderconv_2", "networks_old5.decoderconv_2", "networks_old5.decoderconv_2", "networks_old5.decoderconv_2", "networks_old5.decoderconv_2", "networks_old5.dimredconv"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_2", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "self", ".", "en_conv3", "=", "encoderconv_2", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# self.en_conv7 = encoderconv_2(1024, 1024)", "\n", "# self.en_conv8 = encoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# decoder of generator", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "# self.de_conv2 = decoderconv_1(1024+1024, 1024)", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "self", ".", "de_conv1", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "128", "+", "128", ",", "64", ")", "\n", "self", ".", "de_conv6", "=", "decoderconv_2", "(", "64", "+", "64", ",", "output_nc", ")", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.GlobalUNet.forward": [[547, 603], ["networks_old5.GlobalUNet.en_conv1", "networks_old5.GlobalUNet.en_conv2", "networks_old5.GlobalUNet.en_conv3", "networks_old5.GlobalUNet.en_conv4", "networks_old5.GlobalUNet.en_conv5", "networks_old5.GlobalUNet.en_conv6", "networks_old5.GlobalUNet.res_1", "networks_old5.GlobalUNet.res_2", "networks_old5.GlobalUNet.res_2", "networks_old5.GlobalUNet.res_2", "networks_old5.GlobalUNet.de_conv1", "networks_old5.GlobalUNet.de_conv2", "networks_old5.GlobalUNet.de_conv3", "networks_old5.GlobalUNet.de_conv4", "networks_old5.GlobalUNet.de_conv5", "networks_old5.GlobalUNet.de_conv6", "networks_old5.GlobalUNet.dimr_conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "# e7 = self.en_conv7(e6)", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "# e8 = self.en_conv8(e7)", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e6", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_2", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "# d1 = self.de_conv1(e6)", "\n", "d1", "=", "self", ".", "de_conv1", "(", "res4", ")", "\n", "# print(\"d1 and e5 are :\", d1.size(), e5.size())", "\n", "d2", "=", "self", ".", "de_conv2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "e5", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d2 and e4 are :\", d2.size(), e4.size())", "\n", "d3", "=", "self", ".", "de_conv3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "e4", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d3 and e3 are :\", d3.size(), e3.size())", "\n", "d4", "=", "self", ".", "de_conv4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "e3", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d4 and e2 are :\", d4.size(), e2.size())", "\n", "d5", "=", "self", ".", "de_conv5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "e2", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d5 and e1 are :\", d5.size(), e1.size())", "\n", "d6", "=", "self", ".", "de_conv6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "e1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "d7", "=", "self", ".", "dimr_conv1", "(", "d6", ")", "\n", "\n", "out", "=", "d7", "# the real final output", "\n", "# out = torch.squeeze(e1, 0)", "\n", "\n", "# out = e1", "\n", "# out = out[0:2, :, :]", "\n", "# print(\"out is :\", out, out.size())", "\n", "'''\n        out1 = d5\n        # out = out1[0:1, 0:3, :, :] # this is right\n        out = torch.mean(out1, 1) # mean across 64 channel direction\n        out = torch.unsqueeze(out, 0)\n        print(\"out1 size is :\", out1.size())\n        print(\"out size is :\", out.size())\n        print(\"d7 size is :\", d7.size())\n        '''", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.ResnetBlock.__init__": [[607, 610], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old5.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.ResnetBlock.build_conv_block": [[611, 642], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.ResnetBlock.forward": [[643, 646], ["networks_old5.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.Encoder.__init__": [[648, 668], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.Encoder.forward": [[669, 683], ["networks_old5.Encoder.model", "networks_old5.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.MultiscaleDiscriminator.__init__": [[685, 701], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old5.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.MultiscaleDiscriminator.singleD_forward": [[702, 710], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.MultiscaleDiscriminator.forward": [[711, 724], ["range", "result.append", "getattr", "networks_old5.MultiscaleDiscriminator.singleD_forward", "networks_old5.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.NLayerDiscriminator.__init__": [[727, 766], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.NLayerDiscriminator.forward": [[767, 776], ["range", "networks_old5.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.Vgg19.__init__": [[779, 800], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old5.Vgg19.slice1.add_module", "networks_old5.Vgg19.slice2.add_module", "networks_old5.Vgg19.slice3.add_module", "networks_old5.Vgg19.slice4.add_module", "networks_old5.Vgg19.slice5.add_module", "networks_old5.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.Vgg19.forward": [[801, 809], ["networks_old5.Vgg19.slice1", "networks_old5.Vgg19.slice2", "networks_old5.Vgg19.slice3", "networks_old5.Vgg19.slice4", "networks_old5.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.weights_init": [[16, 23], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.get_norm_layer": [[24, 32], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.define_G": [[33, 53], ["networks_old5.get_norm_layer", "print", "GlobalUNet.apply", "networks_old5.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old5.LocalEnhancer", "networks_old5.Encoder", "networks_old5.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.define_D": [[54, 63], ["networks_old5.get_norm_layer", "networks_old5.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old5.print_network": [[64, 72], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.name": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UIModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.initialize": [[17, 34], ["base_model.BaseModel.initialize", "networks.define_G", "ui_model.UIModel.load_network", "print"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "\n", "netG_input_nc", "=", "opt", ".", "label_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.toTensor": [[35, 42], ["torch.from_numpy", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "numpy.array", "len", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.float"], "methods", ["None"], ["", "def", "toTensor", "(", "self", ",", "img", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "tensor", "=", "tensor", ".", "view", "(", "1", ",", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ",", "len", "(", "img", ".", "mode", ")", ")", "\n", "tensor", "=", "tensor", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "if", "normalize", ":", "\n", "            ", "return", "(", "tensor", ".", "float", "(", ")", "/", "255.0", "-", "0.5", ")", "/", "0.5", "\n", "", "return", "tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.load_image": [[43, 92], ["PIL.Image.open", "int", "label_img.convert.convert.resize", "ui_model.UIModel.toTensor", "ui_model.UIModel.cuda", "ui_model.UIModel.Tensor().zero_", "ui_model.UIModel.scatter_", "numpy.load().item", "ui_model.UIModel.object_map.cpu().numpy().astype", "ui_model.UIModel.Tensor().zero_", "numpy.zeros", "numpy.unique", "ui_model.UIModel.net_input.clone", "ui_model.UIModel.label_map.clone", "ui_model.UIModel.feat_map.clone", "label_path.find", "label_img.convert.convert.convert", "ui_model.UIModel.long().cuda", "PIL.Image.open", "inst_img.resize.resize.resize", "ui_model.UIModel.toTensor().cuda", "ui_model.UIModel.get_edges", "torch.autograd.Variable", "torch.autograd.Variable", "ui_model.UIModel.inst_map.clone", "ui_model.UIModel.Tensor", "torch.cat", "numpy.load", "ui_model.UIModel.object_map.cpu().numpy", "ui_model.UIModel.Tensor", "numpy.random.seed", "numpy.random.randint", "ui_model.UIModel.set_features", "torch.Size", "ui_model.UIModel.long", "ui_model.UIModel.toTensor", "ui_model.UIModel.object_map.cpu"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.toTensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.toTensor"], ["", "def", "load_image", "(", "self", ",", "label_path", ",", "inst_path", ",", "feat_path", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "# read label map", "\n", "label_img", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "if", "label_path", ".", "find", "(", "'face'", ")", "!=", "-", "1", ":", "\n", "            ", "label_img", "=", "label_img", ".", "convert", "(", "'L'", ")", "\n", "", "ow", ",", "oh", "=", "label_img", ".", "size", "\n", "w", "=", "opt", ".", "loadSize", "\n", "h", "=", "int", "(", "w", "*", "oh", "/", "ow", ")", "\n", "label_img", "=", "label_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "label_map", "=", "self", ".", "toTensor", "(", "label_img", ")", "\n", "\n", "# onehot vector input for label map", "\n", "self", ".", "label_map", "=", "label_map", ".", "cuda", "(", ")", "\n", "oneHot_size", "=", "(", "1", ",", "opt", ".", "label_nc", ",", "h", ",", "w", ")", "\n", "input_label", "=", "self", ".", "Tensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "\n", "# read instance map", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "inst_img", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_img", "=", "inst_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "self", ".", "inst_map", "=", "self", ".", "toTensor", "(", "inst_img", ")", ".", "cuda", "(", ")", "\n", "self", ".", "edge_map", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "self", ".", "net_input", "=", "Variable", "(", "torch", ".", "cat", "(", "(", "self", ".", "input_label", ",", "self", ".", "edge_map", ")", ",", "dim", "=", "1", ")", ",", "volatile", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net_input", "=", "Variable", "(", "self", ".", "input_label", ",", "volatile", "=", "True", ")", "\n", "\n", "", "self", ".", "features_clustered", "=", "np", ".", "load", "(", "feat_path", ")", ".", "item", "(", ")", "\n", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n", "object_np", "=", "self", ".", "object_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "feat_map", "=", "self", ".", "Tensor", "(", "1", ",", "opt", ".", "feat_num", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "self", ".", "cluster_indices", "=", "np", ".", "zeros", "(", "self", ".", "opt", ".", "label_nc", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "object_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "self", ".", "features_clustered", ":", "\n", "                ", "feat", "=", "self", ".", "features_clustered", "[", "label", "]", "\n", "np", ".", "random", ".", "seed", "(", "i", "+", "1", ")", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "cluster_indices", "[", "label", "]", "=", "cluster_idx", "\n", "idx", "=", "(", "self", ".", "object_map", "==", "i", ")", ".", "nonzero", "(", ")", "\n", "self", ".", "set_features", "(", "idx", ",", "feat", ",", "cluster_idx", ")", "\n", "\n", "", "", "self", ".", "net_input_original", "=", "self", ".", "net_input", ".", "clone", "(", ")", "\n", "self", ".", "label_map_original", "=", "self", ".", "label_map", ".", "clone", "(", ")", "\n", "self", ".", "feat_map_original", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map_original", "=", "self", ".", "inst_map", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.reset": [[93, 100], ["ui_model.UIModel.net_input_original.clone", "ui_model.UIModel.label_map_original.clone", "ui_model.UIModel.feat_map_original.clone", "ui_model.UIModel.inst_map_original.clone"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input", "=", "self", ".", "net_input_prev", "=", "self", ".", "net_input_original", ".", "clone", "(", ")", "\n", "self", ".", "label_map", "=", "self", ".", "label_map_prev", "=", "self", ".", "label_map_original", ".", "clone", "(", ")", "\n", "self", ".", "feat_map", "=", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map_original", ".", "clone", "(", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map", "=", "self", ".", "inst_map_prev", "=", "self", ".", "inst_map_original", ".", "clone", "(", ")", "\n", "", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "self", ".", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.undo": [[101, 108], ["None"], "methods", ["None"], ["", "def", "undo", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input", "=", "self", ".", "net_input_prev", "\n", "self", ".", "label_map", "=", "self", ".", "label_map_prev", "\n", "self", ".", "feat_map", "=", "self", ".", "feat_map_prev", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map", "=", "self", ".", "inst_map_prev", "\n", "", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "self", ".", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.get_edges": [[110, 117], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.change_labels": [[119, 152], ["int", "int", "util.tensor2im", "ui_model.UIModel.backup_current_state", "ui_model.UIModel.get_edges", "ui_model.UIModel.single_forward", "ui_model.UIModel.copy_features", "ui_model.UIModel.inst_map[].max"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.copy_features"], ["", "def", "change_labels", "(", "self", ",", "click_src", ",", "click_tgt", ")", ":", "\n", "        ", "y_src", ",", "x_src", "=", "click_src", "[", "0", "]", ",", "click_src", "[", "1", "]", "\n", "y_tgt", ",", "x_tgt", "=", "click_tgt", "[", "0", "]", ",", "click_tgt", "[", "1", "]", "\n", "label_src", "=", "int", "(", "self", ".", "label_map", "[", "0", ",", "0", ",", "y_src", ",", "x_src", "]", ")", "\n", "inst_src", "=", "self", ".", "inst_map", "[", "0", ",", "0", ",", "y_src", ",", "x_src", "]", "\n", "label_tgt", "=", "int", "(", "self", ".", "label_map", "[", "0", ",", "0", ",", "y_tgt", ",", "x_tgt", "]", ")", "\n", "inst_tgt", "=", "self", ".", "inst_map", "[", "0", ",", "0", ",", "y_tgt", ",", "x_tgt", "]", "\n", "\n", "idx_src", "=", "(", "self", ".", "inst_map", "==", "inst_src", ")", ".", "nonzero", "(", ")", "\n", "# need to change 3 things: label map, instance map, and feature map", "\n", "if", "idx_src", ".", "shape", ":", "\n", "# backup current maps", "\n", "            ", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# change both the label map and the network input", "\n", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_src", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update the instance map (and the network input)", "\n", "if", "inst_tgt", ">", "1000", ":", "\n", "# if different instances have different ids, give the new object a new id", "\n", "                ", "tgt_indices", "=", "(", "self", ".", "inst_map", ">", "label_tgt", "*", "1000", ")", "&", "(", "self", ".", "inst_map", "<", "(", "label_tgt", "+", "1", ")", "*", "1000", ")", "\n", "inst_tgt", "=", "self", ".", "inst_map", "[", "tgt_indices", "]", ".", "max", "(", ")", "+", "1", "\n", "", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "inst_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# also copy the source features to the target position      ", "\n", "idx_tgt", "=", "(", "self", ".", "inst_map", "==", "inst_tgt", ")", ".", "nonzero", "(", ")", "\n", "if", "idx_tgt", ".", "shape", ":", "\n", "                ", "self", ".", "copy_features", "(", "idx_src", ",", "idx_tgt", "[", "0", ",", ":", "]", ")", "\n", "\n", "", "", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.add_strokes": [[154, 190], ["ui_model.UIModel.net_input.size", "torch.LongTensor().fill_", "range", "idx_src.cuda.cuda.cuda", "util.tensor2im", "min", "range", "range", "ui_model.UIModel.get_edges", "ui_model.UIModel.single_forward", "torch.LongTensor", "max", "min", "ui_model.UIModel.backup_current_state", "ui_model.UIModel.set_features", "max"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features"], ["", "def", "add_strokes", "(", "self", ",", "click_src", ",", "label_tgt", ",", "bw", ",", "save", ")", ":", "\n", "# get the region of the new strokes (bw is the brush width)        ", "\n", "        ", "size", "=", "self", ".", "net_input", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "size", "[", "2", "]", ",", "size", "[", "3", "]", "\n", "idx_src", "=", "torch", ".", "LongTensor", "(", "bw", "**", "2", ",", "4", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "bw", ")", ":", "\n", "            ", "idx_src", "[", "i", "*", "bw", ":", "(", "i", "+", "1", ")", "*", "bw", ",", "2", "]", "=", "min", "(", "h", "-", "1", ",", "max", "(", "0", ",", "click_src", "[", "0", "]", "-", "bw", "//", "2", "+", "i", ")", ")", "\n", "for", "j", "in", "range", "(", "bw", ")", ":", "\n", "                ", "idx_src", "[", "i", "*", "bw", "+", "j", ",", "3", "]", "=", "min", "(", "w", "-", "1", ",", "max", "(", "0", ",", "click_src", "[", "1", "]", "-", "bw", "//", "2", "+", "j", ")", ")", "\n", "", "", "idx_src", "=", "idx_src", ".", "cuda", "(", ")", "\n", "\n", "# again, need to update 3 things", "\n", "if", "idx_src", ".", "shape", ":", "\n", "# backup current maps", "\n", "            ", "if", "save", ":", "\n", "                ", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# update the label map (and the network input) in the stroke region            ", "\n", "", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "                ", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update the instance map (and the network input)", "\n", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# also update the features if available", "\n", "if", "self", ".", "opt", ".", "instance_feat", ":", "\n", "                ", "feat", "=", "self", ".", "features_clustered", "[", "label_tgt", "]", "\n", "#np.random.seed(label_tgt+1)   ", "\n", "#cluster_idx = np.random.randint(0, feat.shape[0])", "\n", "cluster_idx", "=", "self", ".", "cluster_indices", "[", "label_tgt", "]", "\n", "self", ".", "set_features", "(", "idx_src", ",", "feat", ",", "cluster_idx", ")", "\n", "\n", "", "", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.add_objects": [[192, 216], ["torch.from_numpy().cuda().nonzero", "ui_model.UIModel.backup_current_state", "range", "ui_model.UIModel.get_edges", "ui_model.UIModel.set_features", "util.tensor2im", "numpy.transpose", "ui_model.UIModel.single_forward", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward"], ["", "def", "add_objects", "(", "self", ",", "click_src", ",", "label_tgt", ",", "mask", ",", "style_id", "=", "0", ")", ":", "\n", "        ", "y", ",", "x", "=", "click_src", "[", "0", "]", ",", "click_src", "[", "1", "]", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "idx_src", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "cuda", "(", ")", ".", "nonzero", "(", ")", "\n", "idx_src", "[", ":", ",", "2", "]", "+=", "y", "\n", "idx_src", "[", ":", ",", "3", "]", "+=", "x", "\n", "\n", "# backup current maps", "\n", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# update label map", "\n", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update instance map", "\n", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# update feature map", "\n", "self", ".", "set_features", "(", "idx_src", ",", "self", ".", "feat", ",", "style_id", ")", "\n", "\n", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward": [[217, 224], ["torch.cat", "ui_model.UIModel.netG.forward", "ui_model.UIModel.size"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "single_forward", "(", "self", ",", "net_input", ",", "feat_map", ")", ":", "\n", "        ", "net_input", "=", "torch", ".", "cat", "(", "(", "net_input", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "net_input", ")", "\n", "\n", "if", "fake_image", ".", "size", "(", ")", "[", "0", "]", "==", "1", ":", "\n", "            ", "return", "fake_image", ".", "data", "[", "0", "]", "\n", "", "return", "fake_image", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.style_forward": [[227, 287], ["util.tensor2im", "int", "ui_model.UIModel.mask.nonzero", "ui_model.UIModel.get_crop_region", "ui_model.UIModel.size", "ui_model.UIModel.single_forward", "range", "ui_model.UIModel.set_features", "util.tensor2im", "ui_model.UIModel.set_features", "ui_model.UIModel.single_forward", "util.tensor2im", "ui_model.UIModel.fake_image.append", "ui_model.UIModel.single_forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.get_crop_region", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.single_forward"], ["", "def", "style_forward", "(", "self", ",", "click_pt", ",", "style_id", "=", "-", "1", ")", ":", "\n", "        ", "if", "click_pt", "is", "None", ":", "\n", "            ", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "self", ".", "crop", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "instToChange", "=", "int", "(", "self", ".", "object_map", "[", "0", ",", "0", ",", "click_pt", "[", "0", "]", ",", "click_pt", "[", "1", "]", "]", ")", "\n", "self", ".", "instToChange", "=", "instToChange", "\n", "label", "=", "instToChange", "if", "instToChange", "<", "1000", "else", "instToChange", "//", "1000", "\n", "self", ".", "feat", "=", "self", ".", "features_clustered", "[", "label", "]", "\n", "self", ".", "fake_image", "=", "[", "]", "\n", "self", ".", "mask", "=", "self", ".", "object_map", "==", "instToChange", "\n", "idx", "=", "self", ".", "mask", ".", "nonzero", "(", ")", "\n", "self", ".", "get_crop_region", "(", "idx", ")", "\n", "if", "idx", ".", "size", "(", ")", ":", "\n", "                ", "if", "style_id", "==", "-", "1", ":", "\n", "                    ", "(", "min_y", ",", "min_x", ",", "max_y", ",", "max_x", ")", "=", "self", ".", "crop", "\n", "### original", "\n", "for", "cluster_idx", "in", "range", "(", "self", ".", "opt", ".", "multiple_output", ")", ":", "\n", "                        ", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "cluster_idx", ")", "\n", "fake_image", "=", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", "\n", "fake_image", "=", "util", ".", "tensor2im", "(", "fake_image", "[", ":", ",", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", ")", "\n", "self", ".", "fake_image", ".", "append", "(", "fake_image", ")", "\n", "", "\"\"\"### To speed up previewing different style results, either crop or downsample the label maps\n                    if instToChange > 1000:\n                        (min_y, min_x, max_y, max_x) = self.crop                                                \n                        ### crop                                                \n                        _, _, h, w = self.net_input.size()\n                        offset = 512\n                        y_start, x_start = max(0, min_y-offset), max(0, min_x-offset)\n                        y_end, x_end = min(h, (max_y + offset)), min(w, (max_x + offset))\n                        y_region = slice(y_start, y_start+(y_end-y_start)//16*16)\n                        x_region = slice(x_start, x_start+(x_end-x_start)//16*16)\n                        net_input = self.net_input[:,:,y_region,x_region]                    \n                        for cluster_idx in range(self.opt.multiple_output):  \n                            self.set_features(idx, self.feat, cluster_idx)\n                            fake_image = self.single_forward(net_input, self.feat_map[:,:,y_region,x_region])                            \n                            fake_image = util.tensor2im(fake_image[:,min_y-y_start:max_y-y_start,min_x-x_start:max_x-x_start])\n                            self.fake_image.append(fake_image)\n                    else:\n                        ### downsample\n                        (min_y, min_x, max_y, max_x) = [crop//2 for crop in self.crop]                    \n                        net_input = self.net_input[:,:,::2,::2]                    \n                        size = net_input.size()\n                        net_input_batch = net_input.expand(self.opt.multiple_output, size[1], size[2], size[3])             \n                        for cluster_idx in range(self.opt.multiple_output):  \n                            self.set_features(idx, self.feat, cluster_idx)\n                            feat_map = self.feat_map[:,:,::2,::2]\n                            if cluster_idx == 0:\n                                feat_map_batch = feat_map\n                            else:\n                                feat_map_batch = torch.cat((feat_map_batch, feat_map), dim=0)\n                        fake_image_batch = self.single_forward(net_input_batch, feat_map_batch)\n                        for i in range(self.opt.multiple_output):\n                            self.fake_image.append(util.tensor2im(fake_image_batch[i,:,min_y:max_y,min_x:max_x]))\"\"\"", "\n", "\n", "", "else", ":", "\n", "                    ", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "style_id", ")", "\n", "self", ".", "cluster_indices", "[", "label", "]", "=", "style_id", "\n", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.backup_current_state": [[288, 293], ["ui_model.UIModel.net_input.clone", "ui_model.UIModel.label_map.clone", "ui_model.UIModel.inst_map.clone", "ui_model.UIModel.feat_map.clone"], "methods", ["None"], ["", "", "", "", "def", "backup_current_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input_prev", "=", "self", ".", "net_input", ".", "clone", "(", ")", "\n", "self", ".", "label_map_prev", "=", "self", ".", "label_map", ".", "clone", "(", ")", "\n", "self", ".", "inst_map_prev", "=", "self", ".", "inst_map", ".", "clone", "(", ")", "\n", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.get_crop_region": [[295, 309], ["ui_model.UIModel.net_input.size", "idx[].min", "idx[].min", "idx[].max", "idx[].max", "max", "min", "max", "min"], "methods", ["None"], ["", "def", "get_crop_region", "(", "self", ",", "idx", ")", ":", "\n", "        ", "size", "=", "self", ".", "net_input", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "size", "[", "2", "]", ",", "size", "[", "3", "]", "\n", "min_y", ",", "min_x", "=", "idx", "[", ":", ",", "2", "]", ".", "min", "(", ")", ",", "idx", "[", ":", ",", "3", "]", ".", "min", "(", ")", "\n", "max_y", ",", "max_x", "=", "idx", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "idx", "[", ":", ",", "3", "]", ".", "max", "(", ")", "\n", "crop_min", "=", "128", "\n", "if", "max_y", "-", "min_y", "<", "crop_min", ":", "\n", "            ", "min_y", "=", "max", "(", "0", ",", "(", "max_y", "+", "min_y", ")", "//", "2", "-", "crop_min", "//", "2", ")", "\n", "max_y", "=", "min", "(", "h", "-", "1", ",", "min_y", "+", "crop_min", ")", "\n", "", "if", "max_x", "-", "min_x", "<", "crop_min", ":", "\n", "            ", "min_x", "=", "max", "(", "0", ",", "(", "max_x", "+", "min_x", ")", "//", "2", "-", "crop_min", "//", "2", ")", "\n", "max_x", "=", "min", "(", "w", "-", "1", ",", "min_x", "+", "crop_min", ")", "\n", "", "self", ".", "crop", "=", "(", "min_y", ",", "min_x", ",", "max_y", ",", "max_x", ")", "\n", "self", ".", "mask", "=", "self", ".", "mask", "[", ":", ",", ":", ",", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.update_features": [[311, 326], ["ui_model.UIModel.feat_map.clone", "ui_model.UIModel.set_features", "torch.from_numpy().cuda().nonzero", "numpy.transpose", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features"], ["", "def", "update_features", "(", "self", ",", "cluster_idx", ",", "mask", "=", "None", ",", "click_pt", "=", "None", ")", ":", "\n", "        ", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "# adding a new object", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "y", ",", "x", "=", "click_pt", "[", "0", "]", ",", "click_pt", "[", "1", "]", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "idx", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "cuda", "(", ")", ".", "nonzero", "(", ")", "\n", "idx", "[", ":", ",", "2", "]", "+=", "y", "\n", "idx", "[", ":", ",", "3", "]", "+=", "x", "\n", "# changing the label of an existing object ", "\n", "", "else", ":", "\n", "            ", "idx", "=", "(", "self", ".", "object_map", "==", "self", ".", "instToChange", ")", ".", "nonzero", "(", ")", "\n", "\n", "# update feature map", "\n", "", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "cluster_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.set_features": [[328, 331], ["range"], "methods", ["None"], ["", "def", "set_features", "(", "self", ",", "idx", ",", "feat", ",", "cluster_idx", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "            ", "self", ".", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.copy_features": [[333, 337], ["range"], "methods", ["None"], ["", "", "def", "copy_features", "(", "self", ",", "idx_src", ",", "idx_tgt", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "            ", "val", "=", "self", ".", "feat_map", "[", "idx_tgt", "[", "0", "]", ",", "idx_tgt", "[", "1", "]", "+", "k", ",", "idx_tgt", "[", "2", "]", ",", "idx_tgt", "[", "3", "]", "]", "\n", "self", ".", "feat_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.ui_model.UIModel.get_current_visuals": [[338, 350], ["collections.OrderedDict", "numpy.transpose().astype", "util.tensor2label", "numpy.transpose", "ui_model.UIModel.mask[].cpu().float().numpy", "ui_model.UIModel.mask[].cpu().float", "ui_model.UIModel.mask[].cpu"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.tensor2label"], ["", "", "def", "get_current_visuals", "(", "self", ",", "getLabel", "=", "False", ")", ":", "\n", "        ", "mask", "=", "self", ".", "mask", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "np", ".", "transpose", "(", "self", ".", "mask", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "dict_list", "=", "[", "(", "'fake_image'", ",", "self", ".", "fake_image", ")", ",", "(", "'mask'", ",", "mask", ")", "]", "\n", "\n", "if", "getLabel", ":", "# only output label map if needed to save bandwidth", "\n", "            ", "label", "=", "util", ".", "tensor2label", "(", "self", ".", "net_input", ".", "data", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ")", "\n", "dict_list", "+=", "[", "(", "'label'", ",", "label", ")", "]", "\n", "\n", "", "return", "OrderedDict", "(", "dict_list", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.name": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.initialize": [[11, 17], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.set_input": [[18, 20], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.forward": [[21, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.test": [[25, 27], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.get_image_paths": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.optimize_parameters": [[31, 33], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.get_current_visuals": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.get_current_errors": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save": [[40, 42], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network": [[44, 50], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network": [[52, 91], ["os.path.join", "os.path.isfile", "print", "network.load_state_dict", "torch.load", "torch.load", "network.state_dict", "network.load_state_dict", "print", "print", "torch.load.items", "network.state_dict.items", "print", "network.load_state_dict", "torch.load.items", "set", "Set", "sorted", "v.size", "model_dict[].size", "Set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["None"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "network_label", "==", "'G'", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n", "", "", "else", ":", "\n", "#network.load_state_dict(torch.load(save_path))", "\n", "            ", "try", ":", "\n", "                ", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "", "except", ":", "\n", "                ", "pretrained_dict", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "model_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                    ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                        ", "print", "(", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "network_label", ")", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "network_label", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                        ", "not_initialized", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                        ", "from", "sets", "import", "Set", "\n", "not_initialized", "=", "Set", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.update_learning_rate": [[92, 94], ["None"], "methods", ["None"], ["", "", "", "", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.init_loss_filter": [[24, 29], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ")", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ")", ":", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.initialize": [[30, 127], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old2.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old2.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "pix2pixHD_model_old2.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old2.Pix2PixHDModel.load_network", "pix2pixHD_model_old2.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old2.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old2.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old2.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old2.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.encode_input": [[128, 160], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old2.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.discriminate": [[161, 168], ["torch.cat", "pix2pixHD_model_old2.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old2.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old2.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.forward": [[169, 221], ["pix2pixHD_model_old2.Pix2PixHDModel.encode_input", "pix2pixHD_model_old2.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old2.Pix2PixHDModel.discriminate", "pix2pixHD_model_old2.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old2.Pix2PixHDModel.discriminate", "pix2pixHD_model_old2.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old2.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old2.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_old2.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old2.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old2.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old2.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old2.Pix2PixHDModel.criterionVGG", "len", "pix2pixHD_model_old2.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "# Real Detection and Loss        ", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# GAN loss (Fake Passability Loss)        ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC # just for testing loss function", "\n", "\n", "loss_G_KL", "=", "0", "\n", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL # just for testing loss function", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.inference": [[222, 245], ["pix2pixHD_model_old2.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old2.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old2.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old2.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old2.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "_", "=", "self", ".", "encode_input", "(", "Variable", "(", "label", ")", ",", "Variable", "(", "inst", ")", ",", "image", ",", "infer", "=", "True", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.sample_features": [[246, 266], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old2.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.encode_features": [[267, 288], ["torch.autograd.Variable", "pix2pixHD_model_old2.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.get_edges": [[289, 299], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.save": [[300, 305], ["pix2pixHD_model_old2.Pix2PixHDModel.save_network", "pix2pixHD_model_old2.Pix2PixHDModel.save_network", "pix2pixHD_model_old2.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.update_fixed_params": [[306, 314], ["list", "torch.optim.Adam", "pix2pixHD_model_old2.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old2.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.Pix2PixHDModel.update_learning_rate": [[315, 325], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old2.InferenceModel.forward": [[327, 330], ["pix2pixHD_model_old2.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.GANLoss.__init__": [[72, 84], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.GANLoss.get_target_tensor": [[85, 102], ["networks_old1.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old1.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old1.GANLoss.real_label_var.numel", "input.numel", "networks_old1.GANLoss.fake_label_var.numel", "input.numel", "networks_old1.GANLoss.Tensor", "networks_old1.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.GANLoss.__call__": [[103, 114], ["isinstance", "networks_old1.GANLoss.get_target_tensor", "networks_old1.GANLoss.loss", "networks_old1.GANLoss.get_target_tensor", "networks_old1.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.VGGLoss.__init__": [[116, 121], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old1.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.VGGLoss.forward": [[122, 128], ["range", "networks_old1.VGGLoss.vgg", "networks_old1.VGGLoss.vgg", "len", "networks_old1.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.CCLoss.__init__": [[130, 136], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.CCLoss.forward": [[138, 173], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_pred_mean is :\", map_pred_mean)", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.LocalEnhancer.__init__": [[187, 223], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old1.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old1.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.LocalEnhancer.forward": [[224, 241], ["range", "networks_old1.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks_old1.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator   ", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.GlobalGenerator.__init__": [[243, 268], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old1.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.GlobalGenerator.forward": [[269, 271], ["networks_old1.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.ResnetBlock.__init__": [[274, 277], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old1.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.ResnetBlock.build_conv_block": [[278, 309], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.ResnetBlock.forward": [[310, 313], ["networks_old1.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.Encoder.__init__": [[315, 335], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.Encoder.forward": [[336, 350], ["networks_old1.Encoder.model", "networks_old1.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.MultiscaleDiscriminator.__init__": [[352, 368], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old1.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.MultiscaleDiscriminator.singleD_forward": [[369, 377], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.MultiscaleDiscriminator.forward": [[378, 391], ["range", "result.append", "getattr", "networks_old1.MultiscaleDiscriminator.singleD_forward", "networks_old1.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.NLayerDiscriminator.__init__": [[394, 433], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.NLayerDiscriminator.forward": [[434, 443], ["range", "networks_old1.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.Vgg19.__init__": [[446, 467], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old1.Vgg19.slice1.add_module", "networks_old1.Vgg19.slice2.add_module", "networks_old1.Vgg19.slice3.add_module", "networks_old1.Vgg19.slice4.add_module", "networks_old1.Vgg19.slice5.add_module", "networks_old1.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.Vgg19.forward": [[468, 476], ["networks_old1.Vgg19.slice1", "networks_old1.Vgg19.slice2", "networks_old1.Vgg19.slice3", "networks_old1.Vgg19.slice4", "networks_old1.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.weights_init": [[13, 20], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.get_norm_layer": [[21, 29], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.define_G": [[30, 48], ["networks_old1.get_norm_layer", "print", "Encoder.apply", "networks_old1.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "Encoder.cuda", "networks_old1.LocalEnhancer", "networks_old1.Encoder"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.define_D": [[49, 58], ["networks_old1.get_norm_layer", "networks_old1.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old1.print_network": [[59, 67], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.init_loss_filter": [[24, 29], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ")", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ")", ":", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.initialize": [[30, 126], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old1.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old1.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "pix2pixHD_model_old1.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old1.Pix2PixHDModel.load_network", "pix2pixHD_model_old1.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old1.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old1.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old1.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old1.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.encode_input": [[127, 159], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old1.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.discriminate": [[160, 167], ["torch.cat", "pix2pixHD_model_old1.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old1.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old1.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.forward": [[168, 215], ["pix2pixHD_model_old1.Pix2PixHDModel.encode_input", "pix2pixHD_model_old1.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old1.Pix2PixHDModel.discriminate", "pix2pixHD_model_old1.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old1.Pix2PixHDModel.discriminate", "pix2pixHD_model_old1.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old1.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old1.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_old1.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old1.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old1.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old1.Pix2PixHDModel.criterionVGG", "len", "pix2pixHD_model_old1.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "# Real Detection and Loss        ", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# GAN loss (Fake Passability Loss)        ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.inference": [[216, 239], ["pix2pixHD_model_old1.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old1.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old1.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old1.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old1.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "_", "=", "self", ".", "encode_input", "(", "Variable", "(", "label", ")", ",", "Variable", "(", "inst", ")", ",", "image", ",", "infer", "=", "True", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.sample_features": [[240, 260], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old1.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.encode_features": [[261, 282], ["torch.autograd.Variable", "pix2pixHD_model_old1.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.get_edges": [[283, 293], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.save": [[294, 299], ["pix2pixHD_model_old1.Pix2PixHDModel.save_network", "pix2pixHD_model_old1.Pix2PixHDModel.save_network", "pix2pixHD_model_old1.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.update_fixed_params": [[300, 308], ["list", "torch.optim.Adam", "pix2pixHD_model_old1.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old1.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.Pix2PixHDModel.update_learning_rate": [[309, 319], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old1.InferenceModel.forward": [[321, 324], ["pix2pixHD_model_old1.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GANLoss.__init__": [[99, 111], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GANLoss.get_target_tensor": [[112, 129], ["networks_old9.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old9.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old9.GANLoss.real_label_var.numel", "input.numel", "networks_old9.GANLoss.fake_label_var.numel", "input.numel", "networks_old9.GANLoss.Tensor", "networks_old9.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GANLoss.__call__": [[130, 141], ["isinstance", "networks_old9.GANLoss.get_target_tensor", "networks_old9.GANLoss.loss", "networks_old9.GANLoss.get_target_tensor", "networks_old9.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.VGGLoss.__init__": [[157, 164], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old9.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# self.criterion = KLLoss(gpu_ids) # KL/CC is better than L1 loss to serve as perceptual loss here", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.VGGLoss.forward": [[165, 186], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old9.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.CCLoss.__init__": [[188, 194], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.CCLoss.forward": [[196, 246], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.KLLoss.__init__": [[249, 255], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.KLLoss.forward": [[257, 289], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.NSSLoss.__init__": [[291, 297], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.NSSLoss.forward": [[299, 361], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.LocalEnhancer.__init__": [[367, 409], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old9.GlobalGenerator", "range", "setattr", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old9.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "model_downsample_2", "=", "[", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_3'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample_2", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.LocalEnhancer.forward": [[410, 433], ["range", "networks_old9.LocalEnhancer.model", "print", "range", "input_downsampled.append", "getattr.size", "getattr", "getattr", "getattr", "getattr.", "print", "networks_old9.LocalEnhancer.downsample", "getattr.size", "getattr.", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator ", "\n", "print", "(", "\"output_prev_global :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "model_downsample_2", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_3'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "print", "(", "\"output_prev_local :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "# output_prev = model_downsample_2(output_prev) # this is my operation, in order to make sure that the resolution of final output saliency map is the same as input image", "\n", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GlobalGenerator.__init__": [[435, 460], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old9.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GlobalGenerator.forward": [[461, 465], ["networks_old9.GlobalGenerator.model", "print", "networks_old9.GlobalGenerator.model", "networks_old9.GlobalGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outglobal", "=", "self", ".", "model", "(", "input", ")", "\n", "print", "(", "\"output_prev_global XXXXXXXXXXXXXXXXXXXXXXX:\"", ",", "outglobal", ".", "size", "(", ")", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.encoderconv_1.__init__": [[467, 476], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.encoderconv_1.forward": [[477, 479], ["networks_old9.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.encoderconv_2.__init__": [[481, 489], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.encoderconv_2.forward": [[490, 492], ["networks_old9.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_1.__init__": [[494, 504], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_1.forward": [[505, 507], ["networks_old9.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_2.__init__": [[509, 518], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_2.forward": [[519, 521], ["networks_old9.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_3.__init__": [[523, 532], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.decoderconv_3.forward": [[533, 535], ["networks_old9.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.dimredconv.__init__": [[537, 544], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.dimredconv.forward": [[545, 547], ["networks_old9.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GlobalUNet.__init__": [[550, 731], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "networks_old9.ResnetBlock", "networks_old9.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old9.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "\n", "\n", "self", ".", "conv1_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1_h", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3_h", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# self.conv6_1_h = nn.ConvTranspose2d(in_channels=512 + 512, out_channels=512, kernel_size=3, stride=2, padding=1, output_padding=1)", "\n", "self", ".", "conv6_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu6_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv7_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu7_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm7_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv8_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu8_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm8_h", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv9_1_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh9_1_h", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "'''\n        self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        # self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()\n        '''", "\n", "\n", "# self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()", "\n", "# self.dcn_2 = ModulatedDeformConvPack(512, 256, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()", "\n", "\n", "self", ".", "onemulone_ird_1_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_1", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_1_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_1", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_2_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_2", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_2_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_2", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_3_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_3", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_3_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_4_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_4", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_4_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_4", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_5_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_5", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_5_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_5", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_6_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_6", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_6_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_6", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_6", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_7_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_7", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_7_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_7", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_7", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_8_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_8", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_8_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_8", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_8", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_9_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_9", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_9_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_9", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_9", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_10_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_10", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_10_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_10", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_10", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.GlobalUNet.forward": [[739, 1006], ["networks_old9.GlobalUNet.conv1_1_h", "networks_old9.GlobalUNet.norm1_h", "networks_old9.GlobalUNet.relu1_2_h", "networks_old9.GlobalUNet.max1_h", "print", "networks_old9.GlobalUNet.conv2_1_h", "networks_old9.GlobalUNet.norm2_h", "networks_old9.GlobalUNet.relu2_2_h", "networks_old9.GlobalUNet.max2_h", "print", "networks_old9.GlobalUNet.conv3_1_h", "networks_old9.GlobalUNet.norm3_h", "networks_old9.GlobalUNet.relu3_3_h", "networks_old9.GlobalUNet.max3_h", "print", "networks_old9.GlobalUNet.onemulone_ird_1_A", "networks_old9.GlobalUNet.onemulone_ird_1_B", "networks_old9.GlobalUNet.dcn_ird_1_B", "networks_old9.GlobalUNet.onemulone_ird_1_C", "networks_old9.GlobalUNet.dcn_ird_1_C", "networks_old9.GlobalUNet.dcn_ird_1_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_1", "print", "networks_old9.GlobalUNet.onemulone_ird_1_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_2_A", "networks_old9.GlobalUNet.onemulone_ird_2_B", "networks_old9.GlobalUNet.dcn_ird_2_B", "networks_old9.GlobalUNet.onemulone_ird_2_C", "networks_old9.GlobalUNet.dcn_ird_2_C", "networks_old9.GlobalUNet.dcn_ird_2_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_2", "print", "networks_old9.GlobalUNet.onemulone_ird_2_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_3_A", "networks_old9.GlobalUNet.onemulone_ird_3_B", "networks_old9.GlobalUNet.dcn_ird_3_B", "networks_old9.GlobalUNet.onemulone_ird_3_C", "networks_old9.GlobalUNet.dcn_ird_3_C", "networks_old9.GlobalUNet.dcn_ird_3_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_3", "print", "networks_old9.GlobalUNet.onemulone_ird_3_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_4_A", "networks_old9.GlobalUNet.onemulone_ird_4_B", "networks_old9.GlobalUNet.dcn_ird_4_B", "networks_old9.GlobalUNet.onemulone_ird_4_C", "networks_old9.GlobalUNet.dcn_ird_4_C", "networks_old9.GlobalUNet.dcn_ird_4_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_4", "print", "networks_old9.GlobalUNet.onemulone_ird_4_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.conv4_1_h", "networks_old9.GlobalUNet.norm4_h", "networks_old9.GlobalUNet.relu4_3_h", "networks_old9.GlobalUNet.max4_h", "print", "networks_old9.GlobalUNet.onemulone_ird_5_A", "networks_old9.GlobalUNet.onemulone_ird_5_B", "networks_old9.GlobalUNet.dcn_ird_5_B", "networks_old9.GlobalUNet.onemulone_ird_5_C", "networks_old9.GlobalUNet.dcn_ird_5_C", "networks_old9.GlobalUNet.dcn_ird_5_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_5", "print", "networks_old9.GlobalUNet.onemulone_ird_5_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_6_A", "networks_old9.GlobalUNet.onemulone_ird_6_B", "networks_old9.GlobalUNet.dcn_ird_6_B", "networks_old9.GlobalUNet.onemulone_ird_6_C", "networks_old9.GlobalUNet.dcn_ird_6_C", "networks_old9.GlobalUNet.dcn_ird_6_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_6", "print", "networks_old9.GlobalUNet.onemulone_ird_6_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_7_A", "networks_old9.GlobalUNet.onemulone_ird_7_B", "networks_old9.GlobalUNet.dcn_ird_7_B", "networks_old9.GlobalUNet.onemulone_ird_7_C", "networks_old9.GlobalUNet.dcn_ird_7_C", "networks_old9.GlobalUNet.dcn_ird_7_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_7", "print", "networks_old9.GlobalUNet.onemulone_ird_7_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.onemulone_ird_8_A", "networks_old9.GlobalUNet.onemulone_ird_8_B", "networks_old9.GlobalUNet.dcn_ird_8_B", "networks_old9.GlobalUNet.onemulone_ird_8_C", "networks_old9.GlobalUNet.dcn_ird_8_C", "networks_old9.GlobalUNet.dcn_ird_8_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old9.GlobalUNet.se_8", "print", "networks_old9.GlobalUNet.onemulone_ird_8_D", "print", "networks_old9.GlobalUNet.relu", "networks_old9.GlobalUNet.conv5_1_h", "networks_old9.GlobalUNet.norm5_h", "networks_old9.GlobalUNet.relu5_3_h", "networks_old9.GlobalUNet.max5_h", "print", "networks_old9.GlobalUNet.conv6_1_h", "networks_old9.GlobalUNet.norm6_h", "networks_old9.GlobalUNet.relu6_1_h", "print", "networks_old9.GlobalUNet.conv7_1_h", "networks_old9.GlobalUNet.relu7_1_h", "print", "networks_old9.GlobalUNet.conv8_1_h", "networks_old9.GlobalUNet.relu8_1_h", "print", "networks_old9.GlobalUNet.conv9_1_h", "networks_old9.GlobalUNet.tanh9_1_h", "print", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size", "networks_old9.GlobalUNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "e1_h", "=", "self", ".", "conv1_1_h", "(", "input", ")", "\n", "# e1_h = self.relu1_1_h(e1_h)", "\n", "# e1_h = self.conv1_2_h(e1_h)", "\n", "e1_h", "=", "self", ".", "norm1_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "relu1_2_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "max1_h", "(", "e1_h", ")", "\n", "print", "(", "\"e1_h size is :\"", ",", "e1_h", ".", "size", "(", ")", ")", "\n", "\n", "e2_h", "=", "self", ".", "conv2_1_h", "(", "e1_h", ")", "\n", "# e2_h = self.relu2_1_h(e2_h)", "\n", "# e2_h = self.conv2_2_h(e2_h)", "\n", "e2_h", "=", "self", ".", "norm2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "relu2_2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "max2_h", "(", "e2_h", ")", "\n", "print", "(", "\"e2_h size is :\"", ",", "e2_h", ".", "size", "(", ")", ")", "\n", "\n", "e3_h", "=", "self", ".", "conv3_1_h", "(", "e2_h", ")", "\n", "# e3_h = self.relu3_1_h(e3_h)", "\n", "# e3_h = self.conv3_2_h(e3_h)", "\n", "# e3_h = self.relu3_2_h(e3_h)", "\n", "# e3_h = self.conv3_3_h(e3_h)", "\n", "e3_h", "=", "self", ".", "norm3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "relu3_3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "max3_h", "(", "e3_h", ")", "\n", "print", "(", "\"e3_h size is :\"", ",", "e3_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_1_A", "=", "self", ".", "onemulone_ird_1_A", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "onemulone_ird_1_B", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "dcn_ird_1_B", "(", "ird_1_B", ")", "\n", "ird_1_C", "=", "self", ".", "onemulone_ird_1_C", "(", "e3_h", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_1_A", ",", "ird_1_B", ",", "ird_1_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_1_concat_ori is:\"", ",", "ird_1_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_1_concat_se", "=", "self", ".", "se_1", "(", "ird_1_concat_ori", ")", "\n", "print", "(", "\"size ofird_1_concat_se is:\"", ",", "ird_1_concat_se", ".", "size", "(", ")", ")", "\n", "ird_1_concat_residual", "=", "self", ".", "onemulone_ird_1_D", "(", "ird_1_concat_se", ")", "\n", "# ird_1_concat_residual = self.norm_ird_1(ird_1_concat_residual)", "\n", "# ird_1_concat_residual = self.relu_ird_1(ird_1_concat_residual)", "\n", "ird_1", "=", "e3_h", "+", "ird_1_concat_residual", "\n", "print", "(", "\"ird_1 size is:\"", ",", "ird_1", ".", "size", "(", ")", ")", "\n", "ird_1", "=", "self", ".", "relu", "(", "ird_1", ")", "\n", "\n", "# ird_1_concat = self.GovalAvgPooling(ird_1_concat)", "\n", "# ird_1_concat = torch.mean(ird_1_concat_ori.view(ird_1_concat_ori.size(0), ird_1_concat_ori.size(1), -1), dim=2) # Global pooling", "\n", "# print(\"size of global pooling is:\", ird_1_concat.size())", "\n", "# ird_1_concat = self.relu_ird_1_1(self.fc_ird_1_1(ird_1_concat))", "\n", "# ird_1_concat = self.sigmoid_ird_1_2(self.fc_ird_1_2(ird_1_concat))", "\n", "# print(\"size of SEmodule tensor is:\", ird_1_concat, ird_1_concat.size())", "\n", "\n", "ird_2_A", "=", "self", ".", "onemulone_ird_2_A", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "onemulone_ird_2_B", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "dcn_ird_2_B", "(", "ird_2_B", ")", "\n", "ird_2_C", "=", "self", ".", "onemulone_ird_2_C", "(", "ird_1", ")", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "\n", "ird_2_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_2_A", ",", "ird_2_B", ",", "ird_2_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_2_concat_ori is:\"", ",", "ird_2_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_2_concat_se", "=", "self", ".", "se_2", "(", "ird_2_concat_ori", ")", "\n", "print", "(", "\"size ofird_2_concat_se is:\"", ",", "ird_2_concat_se", ".", "size", "(", ")", ")", "\n", "ird_2_concat_residual", "=", "self", ".", "onemulone_ird_2_D", "(", "ird_2_concat_se", ")", "\n", "# ird_2_concat_residual = self.norm_ird_2(ird_2_concat_residual)", "\n", "# ird_2_concat_residual = self.relu_ird_2(ird_2_concat_residual)", "\n", "ird_2", "=", "ird_1", "+", "ird_2_concat_residual", "\n", "print", "(", "\"ird_2 size is:\"", ",", "ird_2", ".", "size", "(", ")", ")", "\n", "ird_2", "=", "self", ".", "relu", "(", "ird_2", ")", "\n", "\n", "ird_3_A", "=", "self", ".", "onemulone_ird_3_A", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "onemulone_ird_3_B", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "dcn_ird_3_B", "(", "ird_3_B", ")", "\n", "ird_3_C", "=", "self", ".", "onemulone_ird_3_C", "(", "ird_2", ")", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "\n", "ird_3_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_3_A", ",", "ird_3_B", ",", "ird_3_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_3_concat_ori is:\"", ",", "ird_3_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_3_concat_se", "=", "self", ".", "se_3", "(", "ird_3_concat_ori", ")", "\n", "print", "(", "\"size ofird_3_concat_se is:\"", ",", "ird_3_concat_se", ".", "size", "(", ")", ")", "\n", "ird_3_concat_residual", "=", "self", ".", "onemulone_ird_3_D", "(", "ird_3_concat_se", ")", "\n", "# ird_3_concat_residual = self.norm_ird_3(ird_3_concat_residual)", "\n", "# ird_3_concat_residual = self.relu_ird_3(ird_3_concat_residual)", "\n", "ird_3", "=", "ird_2", "+", "ird_3_concat_residual", "\n", "print", "(", "\"ird_3 size is:\"", ",", "ird_3", ".", "size", "(", ")", ")", "\n", "ird_3", "=", "self", ".", "relu", "(", "ird_3", ")", "\n", "\n", "ird_4_A", "=", "self", ".", "onemulone_ird_4_A", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "onemulone_ird_4_B", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "dcn_ird_4_B", "(", "ird_4_B", ")", "\n", "ird_4_C", "=", "self", ".", "onemulone_ird_4_C", "(", "ird_3", ")", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "\n", "ird_4_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_4_A", ",", "ird_4_B", ",", "ird_4_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_4_concat_ori is:\"", ",", "ird_4_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_4_concat_se", "=", "self", ".", "se_4", "(", "ird_4_concat_ori", ")", "\n", "print", "(", "\"size ofird_4_concat_se is:\"", ",", "ird_4_concat_se", ".", "size", "(", ")", ")", "\n", "ird_4_concat_residual", "=", "self", ".", "onemulone_ird_4_D", "(", "ird_4_concat_se", ")", "\n", "# ird_4_concat_residual = self.norm_ird_4(ird_4_concat_residual)", "\n", "# ird_4_concat_residual = self.relu_ird_4(ird_4_concat_residual)", "\n", "ird_4", "=", "ird_3", "+", "ird_4_concat_residual", "\n", "print", "(", "\"ird_4 size is:\"", ",", "ird_4", ".", "size", "(", ")", ")", "\n", "ird_4", "=", "self", ".", "relu", "(", "ird_4", ")", "\n", "\n", "e4_h", "=", "self", ".", "conv4_1_h", "(", "ird_4", ")", "\n", "# e4_h = self.relu4_1_h(e4_h)", "\n", "# e4_h = self.conv4_2_h(e4_h)", "\n", "# e4_h = self.relu4_2_h(e4_h)", "\n", "# e4_h = self.conv4_3_h(e4_h)", "\n", "e4_h", "=", "self", ".", "norm4_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "relu4_3_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "max4_h", "(", "e4_h", ")", "\n", "print", "(", "\"e4_h size is :\"", ",", "e4_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_5_A", "=", "self", ".", "onemulone_ird_5_A", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "onemulone_ird_5_B", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "dcn_ird_5_B", "(", "ird_5_B", ")", "\n", "ird_5_C", "=", "self", ".", "onemulone_ird_5_C", "(", "e4_h", ")", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "\n", "ird_5_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_5_A", ",", "ird_5_B", ",", "ird_5_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_5_concat_ori is:\"", ",", "ird_5_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_5_concat_se", "=", "self", ".", "se_5", "(", "ird_5_concat_ori", ")", "\n", "print", "(", "\"size ofird_5_concat_se is:\"", ",", "ird_5_concat_se", ".", "size", "(", ")", ")", "\n", "ird_5_concat_residual", "=", "self", ".", "onemulone_ird_5_D", "(", "ird_5_concat_se", ")", "\n", "# ird_5_concat_residual = self.norm_ird_5(ird_5_concat_residual)", "\n", "# ird_5_concat_residual = self.relu_ird_5(ird_5_concat_residual)", "\n", "ird_5", "=", "e4_h", "+", "ird_5_concat_residual", "\n", "print", "(", "\"ird_5 size is:\"", ",", "ird_5", ".", "size", "(", ")", ")", "\n", "ird_5", "=", "self", ".", "relu", "(", "ird_5", ")", "\n", "\n", "ird_6_A", "=", "self", ".", "onemulone_ird_6_A", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "onemulone_ird_6_B", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "dcn_ird_6_B", "(", "ird_6_B", ")", "\n", "ird_6_C", "=", "self", ".", "onemulone_ird_6_C", "(", "ird_5", ")", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "\n", "ird_6_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_6_A", ",", "ird_6_B", ",", "ird_6_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_6_concat_ori is:\"", ",", "ird_6_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_6_concat_se", "=", "self", ".", "se_6", "(", "ird_6_concat_ori", ")", "\n", "print", "(", "\"size ofird_6_concat_se is:\"", ",", "ird_6_concat_se", ".", "size", "(", ")", ")", "\n", "ird_6_concat_residual", "=", "self", ".", "onemulone_ird_6_D", "(", "ird_6_concat_se", ")", "\n", "# ird_6_concat_residual = self.norm_ird_6(ird_6_concat_residual)", "\n", "# ird_6_concat_residual = self.relu_ird_6(ird_6_concat_residual)", "\n", "ird_6", "=", "ird_5", "+", "ird_6_concat_residual", "\n", "print", "(", "\"ird_6 size is:\"", ",", "ird_6", ".", "size", "(", ")", ")", "\n", "ird_6", "=", "self", ".", "relu", "(", "ird_6", ")", "\n", "\n", "ird_7_A", "=", "self", ".", "onemulone_ird_7_A", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "onemulone_ird_7_B", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "dcn_ird_7_B", "(", "ird_7_B", ")", "\n", "ird_7_C", "=", "self", ".", "onemulone_ird_7_C", "(", "ird_6", ")", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "\n", "ird_7_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_7_A", ",", "ird_7_B", ",", "ird_7_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_7_concat_ori is:\"", ",", "ird_7_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_7_concat_se", "=", "self", ".", "se_7", "(", "ird_7_concat_ori", ")", "\n", "print", "(", "\"size ofird_7_concat_se is:\"", ",", "ird_7_concat_se", ".", "size", "(", ")", ")", "\n", "ird_7_concat_residual", "=", "self", ".", "onemulone_ird_7_D", "(", "ird_7_concat_se", ")", "\n", "# ird_7_concat_residual = self.norm_ird_7(ird_7_concat_residual)", "\n", "# ird_7_concat_residual = self.relu_ird_7(ird_7_concat_residual)", "\n", "ird_7", "=", "ird_6", "+", "ird_7_concat_residual", "\n", "print", "(", "\"ird_7 size is:\"", ",", "ird_7", ".", "size", "(", ")", ")", "\n", "ird_7", "=", "self", ".", "relu", "(", "ird_7", ")", "\n", "\n", "ird_8_A", "=", "self", ".", "onemulone_ird_8_A", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "onemulone_ird_8_B", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "dcn_ird_8_B", "(", "ird_8_B", ")", "\n", "ird_8_C", "=", "self", ".", "onemulone_ird_8_C", "(", "ird_7", ")", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "\n", "ird_8_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_8_A", ",", "ird_8_B", ",", "ird_8_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_8_concat_ori is:\"", ",", "ird_8_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_8_concat_se", "=", "self", ".", "se_8", "(", "ird_8_concat_ori", ")", "\n", "print", "(", "\"size ofird_8_concat_se is:\"", ",", "ird_8_concat_se", ".", "size", "(", ")", ")", "\n", "ird_8_concat_residual", "=", "self", ".", "onemulone_ird_8_D", "(", "ird_8_concat_se", ")", "\n", "# ird_8_concat_residual = self.norm_ird_8(ird_8_concat_residual)", "\n", "# ird_8_concat_residual = self.relu_ird_8(ird_8_concat_residual)", "\n", "ird_8", "=", "ird_7", "+", "ird_8_concat_residual", "\n", "print", "(", "\"ird_8 size is:\"", ",", "ird_8", ".", "size", "(", ")", ")", "\n", "ird_8", "=", "self", ".", "relu", "(", "ird_8", ")", "\n", "\n", "e5_h", "=", "self", ".", "conv5_1_h", "(", "ird_8", ")", "\n", "# e5_h = self.relu5_1_h(e5_h)", "\n", "# e5_h = self.conv5_2_h(e5_h)", "\n", "# e5_h = self.relu5_2_h(e5_h)", "\n", "# e5_h = self.conv5_3_h(e5_h)", "\n", "e5_h", "=", "self", ".", "norm5_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "relu5_3_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "max5_h", "(", "e5_h", ")", "\n", "print", "(", "\"e5_h size is :\"", ",", "e5_h", ".", "size", "(", ")", ")", "\n", "\n", "'''\n        e5_h_2 = self.conv_2_h(e4_h)\n        e5_h_2 = self.relu5_2_h(e5_h_2)\n        e5_h_2 = self.conv5_3_h(e5_h_2)\n        e5_h_2 = self.relu5_3_h(e5_h_2)\n        \n        res1 = self.res_1(e5_h_2)\n        res2 = self.res_2(res1)\n\n        e5_h_concat = torch.cat([res2, e5_h], dim=1)\n        '''", "\n", "\n", "\n", "'''\n        ird_9_A = self.onemulone_ird_9_A(e5_h)\n        ird_9_B = self.onemulone_ird_9_B(e5_h)\n        ird_9_B = self.dcn_ird_9_B(ird_9_B)\n        ird_9_C = self.onemulone_ird_9_C(e5_h)\n        ird_9_C = self.dcn_ird_9_C(ird_9_C) # two 3X3 equals one 5X5 deformable conv\n        ird_9_C = self.dcn_ird_9_C(ird_9_C)\n        ird_9_concat_ori = torch.cat([ird_9_A, ird_9_B, ird_9_C], dim=1)\n        print(\"size ofird_9_concat_ori is:\", ird_9_concat_ori.size())\n        ird_9_concat_se = self.se_9(ird_9_concat_ori)\n        print(\"size ofird_9_concat_se is:\", ird_9_concat_se.size())\n        ird_9_concat_residual = self.onemulone_ird_9_D(ird_9_concat_se)\n        ird_9 = e5_h + ird_9_concat_residual\n        print(\"ird_9 size is:\", ird_9.size())\n        ird_9 = self.norm_ird_9(ird_9)\n        ird_9 = self.relu_ird_9(ird_9)\n\n        ird_10_A = self.onemulone_ird_10_A(ird_9)\n        ird_10_B = self.onemulone_ird_10_B(ird_9)\n        ird_10_B = self.dcn_ird_10_B(ird_10_B)\n        ird_10_C = self.onemulone_ird_10_C(ird_9)\n        ird_10_C = self.dcn_ird_10_C(ird_10_C) # two 3X3 equals one 5X5 deformable conv\n        ird_10_C = self.dcn_ird_10_C(ird_10_C)\n        ird_10_concat_ori = torch.cat([ird_10_A, ird_10_B, ird_10_C], dim=1)\n        print(\"size ofird_10_concat_ori is:\", ird_10_concat_ori.size())\n        ird_10_concat_se = self.se_10(ird_10_concat_ori)\n        print(\"size ofird_10_concat_se is:\", ird_10_concat_se.size())\n        ird_10_concat_residual = self.onemulone_ird_10_D(ird_10_concat_se)\n        ird_10 = ird_9 + ird_10_concat_residual\n        print(\"ird_10 size is:\", ird_10.size())\n        ird_10 = self.norm_ird_10(ird_10)\n        ird_10 = self.relu_ird_10(ird_10)\n        '''", "\n", "# res1 = self.res_1(e5_h)", "\n", "# res2 = self.res_2(res1)", "\n", "\n", "# e5_h_concat = torch.cat([e5_upsp, e5_h], dim=1)", "\n", "# e5_h_concat = torch.cat([res2, res2], dim=1)", "\n", "\n", "\n", "\n", "d1_h", "=", "self", ".", "conv6_1_h", "(", "e5_h", ")", "\n", "# d1_h = self.conv6_1_h(e5_h_concat)", "\n", "d1_h", "=", "self", ".", "norm6_h", "(", "d1_h", ")", "\n", "d1_h", "=", "self", ".", "relu6_1_h", "(", "d1_h", ")", "\n", "print", "(", "\"d1_h size is :\"", ",", "d1_h", ".", "size", "(", ")", ")", "\n", "\n", "d2_h", "=", "self", ".", "conv7_1_h", "(", "d1_h", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d2_h", "=", "self", ".", "relu7_1_h", "(", "d2_h", ")", "\n", "print", "(", "\"d2_h size is :\"", ",", "d2_h", ".", "size", "(", ")", ")", "\n", "\n", "d3_h", "=", "self", ".", "conv8_1_h", "(", "d2_h", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d3_h", "=", "self", ".", "relu8_1_h", "(", "d3_h", ")", "\n", "print", "(", "\"d3_h size is :\"", ",", "d3_h", ".", "size", "(", ")", ")", "\n", "\n", "d4_h", "=", "self", ".", "conv9_1_h", "(", "d3_h", ")", "\n", "d4_h", "=", "self", ".", "tanh9_1_h", "(", "d4_h", ")", "\n", "print", "(", "\"d4_h size is :\"", ",", "d4_h", ".", "size", "(", ")", ")", "\n", "\n", "\n", "return", "d4_h", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.SELayer.__init__": [[1009, 1017], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.SELayer.forward": [[1019, 1024], ["x.size", "networks_old9.SELayer.avg_pool().view", "networks_old9.SELayer.fc().view", "networks_old9.SELayer.expand_as", "networks_old9.SELayer.avg_pool", "networks_old9.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.ResnetBlock.__init__": [[1027, 1030], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old9.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.ResnetBlock.build_conv_block": [[1031, 1062], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.ResnetBlock.forward": [[1063, 1066], ["networks_old9.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.Encoder.__init__": [[1068, 1088], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.Encoder.forward": [[1089, 1103], ["networks_old9.Encoder.model", "networks_old9.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.MultiscaleDiscriminator.__init__": [[1105, 1121], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old9.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.MultiscaleDiscriminator.singleD_forward": [[1122, 1130], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.MultiscaleDiscriminator.forward": [[1131, 1144], ["range", "result.append", "getattr", "networks_old9.MultiscaleDiscriminator.singleD_forward", "networks_old9.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.NLayerDiscriminator.__init__": [[1147, 1186], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.NLayerDiscriminator.forward": [[1187, 1196], ["range", "networks_old9.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.Vgg19.__init__": [[1199, 1220], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old9.Vgg19.slice1.add_module", "networks_old9.Vgg19.slice2.add_module", "networks_old9.Vgg19.slice3.add_module", "networks_old9.Vgg19.slice4.add_module", "networks_old9.Vgg19.slice5.add_module", "networks_old9.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.Vgg19.forward": [[1221, 1229], ["networks_old9.Vgg19.slice1", "networks_old9.Vgg19.slice2", "networks_old9.Vgg19.slice3", "networks_old9.Vgg19.slice4", "networks_old9.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.weights_init": [[38, 45], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.get_norm_layer": [[46, 54], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.define_G": [[55, 75], ["networks_old9.get_norm_layer", "print", "GlobalUNet.apply", "networks_old9.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old9.LocalEnhancer", "networks_old9.Encoder", "networks_old9.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.define_D": [[76, 85], ["networks_old9.get_norm_layer", "networks_old9.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old9.print_network": [[86, 94], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GANLoss.__init__": [[106, 118], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GANLoss.get_target_tensor": [[119, 136], ["networks_old11.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old11.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old11.GANLoss.real_label_var.numel", "input.numel", "networks_old11.GANLoss.fake_label_var.numel", "input.numel", "networks_old11.GANLoss.Tensor", "networks_old11.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GANLoss.__call__": [[137, 148], ["isinstance", "networks_old11.GANLoss.get_target_tensor", "networks_old11.GANLoss.loss", "networks_old11.GANLoss.get_target_tensor", "networks_old11.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.VGGLoss.__init__": [[150, 155], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old11.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.VGGLoss.forward": [[156, 162], ["range", "networks_old11.VGGLoss.vgg", "networks_old11.VGGLoss.vgg", "len", "networks_old11.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.CCLoss.__init__": [[197, 203], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.CCLoss.forward": [[205, 255], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.KLLoss.__init__": [[258, 264], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.KLLoss.forward": [[266, 298], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.NSSLoss.__init__": [[300, 306], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.NSSLoss.forward": [[308, 370], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTMCell.__init__": [[375, 419], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n        \n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "MyLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "\n", "self", ".", "conv_lstm", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", "+", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "'''\n        self.conv_lstm = ModulatedDeformConvPack(in_channels=self.input_dim + self.hidden_dim,\n                              out_channels=4 * self.hidden_dim,\n                              kernel_size=self.kernel_size,\n                              stride=1,\n                              padding=1,\n                              deformable_groups=1,\n                              no_bias=True)\n        # ModulatedDeformConvPack(128, 128, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        '''", "\n", "", "def", "forward", "(", "self", ",", "input_tensor", ",", "cur_state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTMCell.forward": [[419, 436], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks_old11.MyLSTMCell.conv_lstm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "cur_state", ")", ":", "\n", "\n", "        ", "h_cur", ",", "c_cur", "=", "cur_state", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "h_cur", "]", ",", "dim", "=", "1", ")", "# concatenate along channel axis", "\n", "\n", "combined_conv", "=", "self", ".", "conv_lstm", "(", "combined", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", ")", "\n", "f", "=", "torch", ".", "sigmoid", "(", "cc_f", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", ")", "\n", "\n", "c_next", "=", "f", "*", "c_cur", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTMCell.init_hidden": [[437, 440], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM.__init__": [[444, 477], ["torch.Module.__init__", "networks_old11.MyLSTM._check_kernel_size_consistency", "networks_old11.MyLSTM._extend_for_multilayer", "networks_old11.MyLSTM._extend_for_multilayer", "range", "torch.ModuleList", "torch.ModuleList", "ValueError", "cell_list.append", "len", "len", "networks_old11.MyLSTMCell"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._check_kernel_size_consistency", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._extend_for_multilayer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._extend_for_multilayer"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "num_layers", ",", "\n", "batch_first", "=", "False", ",", "bias", "=", "True", ",", "return_all_layers", "=", "False", ")", ":", "\n", "        ", "super", "(", "MyLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_check_kernel_size_consistency", "(", "kernel_size", ")", "\n", "\n", "# Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers", "\n", "kernel_size", "=", "self", ".", "_extend_for_multilayer", "(", "kernel_size", ",", "num_layers", ")", "\n", "hidden_dim", "=", "self", ".", "_extend_for_multilayer", "(", "hidden_dim", ",", "num_layers", ")", "\n", "if", "not", "len", "(", "kernel_size", ")", "==", "len", "(", "hidden_dim", ")", "==", "num_layers", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent list length.'", ")", "\n", "\n", "", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "return_all_layers", "=", "return_all_layers", "\n", "\n", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "cur_input_dim", "=", "self", ".", "input_dim", "if", "i", "==", "0", "else", "self", ".", "hidden_dim", "[", "i", "-", "1", "]", "\n", "\n", "cell_list", ".", "append", "(", "MyLSTMCell", "(", "input_size", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "input_dim", "=", "cur_input_dim", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "[", "i", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "bias", "=", "self", ".", "bias", ")", ")", "\n", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM.forward": [[478, 531], ["input_tensor.permute.permute.size", "range", "input_tensor.permute.permute.permute", "NotImplementedError", "networks_old11.MyLSTM._init_hidden", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "layer_output_list.append", "last_state_list.append", "output_inner.append", "input_tensor.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._init_hidden"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        \n        Parameters\n        ----------\n        input_tensor: todo \n            5-D Tensor either of shape (t, b, c, h, w) or (b, t, c, h, w)\n        hidden_state: todo\n            None. todo implement stateful\n            \n        Returns\n        -------\n        last_state_list, layer_output\n        \"\"\"", "\n", "if", "not", "self", ".", "batch_first", ":", "\n", "# (t, b, c, h, w) -> (b, t, c, h, w)", "\n", "            ", "input_tensor", "=", "input_tensor", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "# Implement stateful ConvLSTM", "\n", "", "if", "hidden_state", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "hidden_state", "=", "self", ".", "_init_hidden", "(", "batch_size", "=", "input_tensor", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "layer_output_list", "=", "[", "]", "\n", "last_state_list", "=", "[", "]", "\n", "\n", "seq_len", "=", "input_tensor", ".", "size", "(", "1", ")", "\n", "cur_layer_input", "=", "input_tensor", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "\n", "            ", "h", ",", "c", "=", "hidden_state", "[", "layer_idx", "]", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "\n", "                ", "h", ",", "c", "=", "self", ".", "cell_list", "[", "layer_idx", "]", "(", "input_tensor", "=", "cur_layer_input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "cur_state", "=", "[", "h", ",", "c", "]", ")", "\n", "output_inner", ".", "append", "(", "h", ")", "\n", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "cur_layer_input", "=", "layer_output", "\n", "\n", "layer_output_list", ".", "append", "(", "layer_output", ")", "\n", "last_state_list", ".", "append", "(", "[", "h", ",", "c", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "return_all_layers", ":", "\n", "            ", "layer_output_list", "=", "layer_output_list", "[", "-", "1", ":", "]", "\n", "last_state_list", "=", "last_state_list", "[", "-", "1", ":", "]", "\n", "# layer_output_list = layer_output_list", "\n", "# last_state_list   = last_state_list", "\n", "\n", "", "return", "layer_output_list", ",", "last_state_list", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._init_hidden": [[532, 537], ["range", "init_states.append", "networks_old11.MyLSTM.cell_list[].init_hidden"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTMCell.init_hidden"], ["", "def", "_init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "init_states", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "init_states", ".", "append", "(", "self", ".", "cell_list", "[", "i", "]", ".", "init_hidden", "(", "batch_size", ")", ")", "\n", "", "return", "init_states", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._check_kernel_size_consistency": [[538, 543], ["ValueError", "isinstance", "isinstance", "all", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_kernel_size_consistency", "(", "kernel_size", ")", ":", "\n", "        ", "if", "not", "(", "isinstance", "(", "kernel_size", ",", "tuple", ")", "or", "\n", "(", "isinstance", "(", "kernel_size", ",", "list", ")", "and", "all", "(", "[", "isinstance", "(", "elem", ",", "tuple", ")", "for", "elem", "in", "kernel_size", "]", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'`kernel_size` must be tuple or list of tuples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MyLSTM._extend_for_multilayer": [[544, 549], ["isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_extend_for_multilayer", "(", "param", ",", "num_layers", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "            ", "param", "=", "[", "param", "]", "*", "num_layers", "\n", "", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.LocalEnhancer.__init__": [[556, 598], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old11.GlobalGenerator", "range", "setattr", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old11.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "model_downsample_2", "=", "[", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_3'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample_2", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.LocalEnhancer.forward": [[599, 622], ["range", "networks_old11.LocalEnhancer.model", "print", "range", "input_downsampled.append", "getattr.size", "getattr", "getattr", "getattr", "getattr.", "print", "networks_old11.LocalEnhancer.downsample", "getattr.size", "getattr.", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator ", "\n", "print", "(", "\"output_prev_global :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "model_downsample_2", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_3'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "print", "(", "\"output_prev_local :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "# output_prev = model_downsample_2(output_prev) # this is my operation, in order to make sure that the resolution of final output saliency map is the same as input image", "\n", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GlobalGenerator.__init__": [[624, 649], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old11.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GlobalGenerator.forward": [[650, 654], ["networks_old11.GlobalGenerator.model", "print", "networks_old11.GlobalGenerator.model", "networks_old11.GlobalGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outglobal", "=", "self", ".", "model", "(", "input", ")", "\n", "print", "(", "\"output_prev_global XXXXXXXXXXXXXXXXXXXXXXX:\"", ",", "outglobal", ".", "size", "(", ")", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.encoderconv_1.__init__": [[656, 665], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.encoderconv_1.forward": [[666, 668], ["networks_old11.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.encoderconv_2.__init__": [[670, 678], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.encoderconv_2.forward": [[679, 681], ["networks_old11.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_1.__init__": [[683, 693], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_1.forward": [[694, 696], ["networks_old11.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_2.__init__": [[698, 707], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_2.forward": [[708, 710], ["networks_old11.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_3.__init__": [[712, 721], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.decoderconv_3.forward": [[722, 724], ["networks_old11.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.dimredconv.__init__": [[726, 733], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.dimredconv.forward": [[734, 736], ["networks_old11.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GlobalUNet.__init__": [[739, 984], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "networks_old11.ResnetBlock", "networks_old11.ResnetBlock", "networks_old11.ResnetBlock", "networks_old11.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "networks_old11.ResnetBlock", "networks_old11.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old11.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks_old11.MyLSTM", "networks_old11.Spatial_Channel_Gate_Layer", "torch.Upsample", "torch.Upsample", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "conv6_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu6_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "self", ".", "conv1_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1_h", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3_h", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "conv6_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", "+", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "# self.conv6_1_h = nn.ConvTranspose2d(in_channels=512, out_channels=512, kernel_size=3, stride=2, padding=1, output_padding=1)", "\n", "self", ".", "relu6_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv7_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu7_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm7_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv8_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu8_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm8_h", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv9_1_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh9_1_h", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "'''\n        self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        # self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()\n        '''", "\n", "\n", "# self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()", "\n", "# self.dcn_2 = ModulatedDeformConvPack(512, 256, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()", "\n", "\n", "self", ".", "onemulone_ird_1_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_1", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_1_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_1", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_2_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_2", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_2_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_2", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_3_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_3", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_3_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_4_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_4", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_4_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_4", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_5_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_5", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_5_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_5", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_6_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_6", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_6_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_6", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_6", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_7_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_7", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_7_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_7", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_7", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_8_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_8", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_8_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_8", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_8", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_9_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_9", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_9_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_9", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_9", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_10_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_10", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_10_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_10", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_10", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# self.ConvLSTM_layer_1 = MyLSTM(input_size=(16,20), input_dim=1024, hidden_dim=[1024], ", "\n", "# kernel_size=(3,3), num_layers=1, batch_first=True, bias=True, return_all_layers=False)", "\n", "self", ".", "ConvLSTM_layer_1", "=", "MyLSTM", "(", "input_size", "=", "(", "64", ",", "80", ")", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "[", "128", "]", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "bias", "=", "True", ",", "return_all_layers", "=", "False", ")", "\n", "\n", "self", ".", "channel_spatial_gate_1", "=", "Spatial_Channel_Gate_Layer", "(", "dim_in", "=", "1024", ",", "dim_redu", "=", "256", ")", "\n", "\n", "self", ".", "upsp_output", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.GlobalUNet.forward": [[986, 1301], ["print", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "print", "networks_old11.GlobalUNet.downsample", "networks_old11.GlobalUNet.conv1_1", "networks_old11.GlobalUNet.relu1_1", "networks_old11.GlobalUNet.conv1_2", "networks_old11.GlobalUNet.norm1", "networks_old11.GlobalUNet.relu1_2", "networks_old11.GlobalUNet.max1", "print", "networks_old11.GlobalUNet.conv2_1", "networks_old11.GlobalUNet.relu2_1", "networks_old11.GlobalUNet.conv2_2", "networks_old11.GlobalUNet.norm2", "networks_old11.GlobalUNet.relu2_2", "networks_old11.GlobalUNet.max2", "print", "networks_old11.GlobalUNet.conv3_1", "networks_old11.GlobalUNet.relu3_1", "networks_old11.GlobalUNet.conv3_2", "networks_old11.GlobalUNet.relu3_2", "networks_old11.GlobalUNet.conv3_3", "networks_old11.GlobalUNet.norm3", "networks_old11.GlobalUNet.relu3_3", "networks_old11.GlobalUNet.max3", "print", "networks_old11.GlobalUNet.conv4_1", "networks_old11.GlobalUNet.relu4_1", "networks_old11.GlobalUNet.conv4_2", "networks_old11.GlobalUNet.relu4_2", "networks_old11.GlobalUNet.conv4_3", "networks_old11.GlobalUNet.norm4", "networks_old11.GlobalUNet.relu4_3", "networks_old11.GlobalUNet.max4", "print", "networks_old11.GlobalUNet.conv5_1", "networks_old11.GlobalUNet.relu5_1", "networks_old11.GlobalUNet.conv5_2", "networks_old11.GlobalUNet.relu5_2", "networks_old11.GlobalUNet.conv5_3", "networks_old11.GlobalUNet.norm5", "networks_old11.GlobalUNet.relu5_3", "networks_old11.GlobalUNet.max5", "print", "networks_old11.GlobalUNet.res_1", "networks_old11.GlobalUNet.res_2", "networks_old11.GlobalUNet.res_1", "networks_old11.GlobalUNet.res_2", "networks_old11.GlobalUNet.conv6_1", "networks_old11.GlobalUNet.norm6", "networks_old11.GlobalUNet.relu6_1", "print", "networks_old11.GlobalUNet.conv1_1_h", "networks_old11.GlobalUNet.norm1_h", "networks_old11.GlobalUNet.relu1_2_h", "networks_old11.GlobalUNet.max1_h", "print", "networks_old11.GlobalUNet.conv2_1_h", "networks_old11.GlobalUNet.norm2_h", "networks_old11.GlobalUNet.relu2_2_h", "networks_old11.GlobalUNet.max2_h", "print", "networks_old11.GlobalUNet.conv3_1_h", "networks_old11.GlobalUNet.norm3_h", "networks_old11.GlobalUNet.relu3_3_h", "networks_old11.GlobalUNet.max3_h", "print", "networks_old11.GlobalUNet.onemulone_ird_1_A", "networks_old11.GlobalUNet.onemulone_ird_1_B", "networks_old11.GlobalUNet.dcn_ird_1_B", "networks_old11.GlobalUNet.onemulone_ird_1_C", "networks_old11.GlobalUNet.dcn_ird_1_C", "networks_old11.GlobalUNet.dcn_ird_1_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_1", "print", "networks_old11.GlobalUNet.onemulone_ird_1_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_2_A", "networks_old11.GlobalUNet.onemulone_ird_2_B", "networks_old11.GlobalUNet.dcn_ird_2_B", "networks_old11.GlobalUNet.onemulone_ird_2_C", "networks_old11.GlobalUNet.dcn_ird_2_C", "networks_old11.GlobalUNet.dcn_ird_2_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_2", "print", "networks_old11.GlobalUNet.onemulone_ird_2_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_3_A", "networks_old11.GlobalUNet.onemulone_ird_3_B", "networks_old11.GlobalUNet.dcn_ird_3_B", "networks_old11.GlobalUNet.onemulone_ird_3_C", "networks_old11.GlobalUNet.dcn_ird_3_C", "networks_old11.GlobalUNet.dcn_ird_3_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_3", "print", "networks_old11.GlobalUNet.onemulone_ird_3_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_4_A", "networks_old11.GlobalUNet.onemulone_ird_4_B", "networks_old11.GlobalUNet.dcn_ird_4_B", "networks_old11.GlobalUNet.onemulone_ird_4_C", "networks_old11.GlobalUNet.dcn_ird_4_C", "networks_old11.GlobalUNet.dcn_ird_4_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_4", "print", "networks_old11.GlobalUNet.onemulone_ird_4_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.conv4_1_h", "networks_old11.GlobalUNet.norm4_h", "networks_old11.GlobalUNet.relu4_3_h", "networks_old11.GlobalUNet.max4_h", "print", "networks_old11.GlobalUNet.onemulone_ird_5_A", "networks_old11.GlobalUNet.onemulone_ird_5_B", "networks_old11.GlobalUNet.dcn_ird_5_B", "networks_old11.GlobalUNet.onemulone_ird_5_C", "networks_old11.GlobalUNet.dcn_ird_5_C", "networks_old11.GlobalUNet.dcn_ird_5_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_5", "print", "networks_old11.GlobalUNet.onemulone_ird_5_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_6_A", "networks_old11.GlobalUNet.onemulone_ird_6_B", "networks_old11.GlobalUNet.dcn_ird_6_B", "networks_old11.GlobalUNet.onemulone_ird_6_C", "networks_old11.GlobalUNet.dcn_ird_6_C", "networks_old11.GlobalUNet.dcn_ird_6_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_6", "print", "networks_old11.GlobalUNet.onemulone_ird_6_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_7_A", "networks_old11.GlobalUNet.onemulone_ird_7_B", "networks_old11.GlobalUNet.dcn_ird_7_B", "networks_old11.GlobalUNet.onemulone_ird_7_C", "networks_old11.GlobalUNet.dcn_ird_7_C", "networks_old11.GlobalUNet.dcn_ird_7_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_7", "print", "networks_old11.GlobalUNet.onemulone_ird_7_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.onemulone_ird_8_A", "networks_old11.GlobalUNet.onemulone_ird_8_B", "networks_old11.GlobalUNet.dcn_ird_8_B", "networks_old11.GlobalUNet.onemulone_ird_8_C", "networks_old11.GlobalUNet.dcn_ird_8_C", "networks_old11.GlobalUNet.dcn_ird_8_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.se_8", "print", "networks_old11.GlobalUNet.onemulone_ird_8_D", "print", "networks_old11.GlobalUNet.relu", "networks_old11.GlobalUNet.conv5_1_h", "networks_old11.GlobalUNet.norm5_h", "networks_old11.GlobalUNet.relu5_3_h", "networks_old11.GlobalUNet.max5_h", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old11.GlobalUNet.channel_spatial_gate_1", "print", "networks_old11.GlobalUNet.conv6_1_h", "networks_old11.GlobalUNet.norm6_h", "networks_old11.GlobalUNet.relu6_1_h", "print", "networks_old11.GlobalUNet.conv7_1_h", "networks_old11.GlobalUNet.relu7_1_h", "print", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "print", "range", "print", "networks_old11.GlobalUNet.ConvLSTM_layer_1", "print", "networks_old11.GlobalUNet.conv8_1_h", "networks_old11.GlobalUNet.relu8_1_h", "print", "networks_old11.GlobalUNet.conv9_1_h", "networks_old11.GlobalUNet.tanh9_1_h", "print", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear.size", "torch.nn.functional.upsample_bilinear.size", "torch.nn.functional.upsample_bilinear.size", "torch.nn.functional.upsample_bilinear.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "d2_h_refine.size", "networks_old11.GlobalUNet.size", "networks_old11.GlobalUNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "print", "(", "\"original input\"", ",", "input", ".", "size", "(", ")", ")", "\n", "input", "=", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "input", ",", "size", "=", "[", "512", ",", "640", "]", ")", "\n", "print", "(", "\"original input\"", ",", "input", ".", "size", "(", ")", ")", "\n", "input_small", "=", "self", ".", "downsample", "(", "input", ")", "\n", "\n", "e1", "=", "self", ".", "conv1_1", "(", "input_small", ")", "\n", "e1", "=", "self", ".", "relu1_1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "conv1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "norm1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "relu1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "max1", "(", "e1", ")", "\n", "print", "(", "\"e1 size is :\"", ",", "e1", ".", "size", "(", ")", ")", "\n", "\n", "e2", "=", "self", ".", "conv2_1", "(", "e1", ")", "\n", "e2", "=", "self", ".", "relu2_1", "(", "e2", ")", "\n", "e2", "=", "self", ".", "conv2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "norm2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "relu2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "max2", "(", "e2", ")", "\n", "print", "(", "\"e2 size is :\"", ",", "e2", ".", "size", "(", ")", ")", "\n", "\n", "e3", "=", "self", ".", "conv3_1", "(", "e2", ")", "\n", "e3", "=", "self", ".", "relu3_1", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "norm3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "max3", "(", "e3", ")", "\n", "print", "(", "\"e3 size is :\"", ",", "e3", ".", "size", "(", ")", ")", "\n", "\n", "e4", "=", "self", ".", "conv4_1", "(", "e3", ")", "\n", "e4", "=", "self", ".", "relu4_1", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "norm4", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "max4", "(", "e4", ")", "\n", "print", "(", "\"e4 size is :\"", ",", "e4", ".", "size", "(", ")", ")", "\n", "\n", "e5", "=", "self", ".", "conv5_1", "(", "e4", ")", "\n", "e5", "=", "self", ".", "relu5_1", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "norm5", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "max5", "(", "e5", ")", "\n", "print", "(", "\"e5 size is :\"", ",", "e5", ".", "size", "(", ")", ")", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e5", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_1", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "e5_upsp", "=", "self", ".", "conv6_1", "(", "res4", ")", "\n", "e5_upsp", "=", "self", ".", "norm6", "(", "e5_upsp", ")", "\n", "e5_upsp", "=", "self", ".", "relu6_1", "(", "e5_upsp", ")", "\n", "# e5_upsp = self.upsp(e5)", "\n", "print", "(", "\"e5_upsp size is :\"", ",", "e5_upsp", ".", "size", "(", ")", ")", "\n", "\n", "\n", "\n", "\n", "e1_h", "=", "self", ".", "conv1_1_h", "(", "input", ")", "\n", "# e1_h = self.relu1_1_h(e1_h)", "\n", "# e1_h = self.conv1_2_h(e1_h)", "\n", "e1_h", "=", "self", ".", "norm1_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "relu1_2_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "max1_h", "(", "e1_h", ")", "\n", "print", "(", "\"e1_h size is :\"", ",", "e1_h", ".", "size", "(", ")", ")", "\n", "\n", "e2_h", "=", "self", ".", "conv2_1_h", "(", "e1_h", ")", "\n", "# e2_h = self.relu2_1_h(e2_h)", "\n", "# e2_h = self.conv2_2_h(e2_h)", "\n", "e2_h", "=", "self", ".", "norm2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "relu2_2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "max2_h", "(", "e2_h", ")", "\n", "print", "(", "\"e2_h size is :\"", ",", "e2_h", ".", "size", "(", ")", ")", "\n", "\n", "e3_h", "=", "self", ".", "conv3_1_h", "(", "e2_h", ")", "\n", "# e3_h = self.relu3_1_h(e3_h)", "\n", "# e3_h = self.conv3_2_h(e3_h)", "\n", "# e3_h = self.relu3_2_h(e3_h)", "\n", "# e3_h = self.conv3_3_h(e3_h)", "\n", "e3_h", "=", "self", ".", "norm3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "relu3_3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "max3_h", "(", "e3_h", ")", "\n", "print", "(", "\"e3_h size is :\"", ",", "e3_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_1_A", "=", "self", ".", "onemulone_ird_1_A", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "onemulone_ird_1_B", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "dcn_ird_1_B", "(", "ird_1_B", ")", "\n", "ird_1_C", "=", "self", ".", "onemulone_ird_1_C", "(", "e3_h", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_1_A", ",", "ird_1_B", ",", "ird_1_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_1_concat_ori is:\"", ",", "ird_1_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_1_concat_se", "=", "self", ".", "se_1", "(", "ird_1_concat_ori", ")", "\n", "print", "(", "\"size ofird_1_concat_se is:\"", ",", "ird_1_concat_se", ".", "size", "(", ")", ")", "\n", "ird_1_concat_residual", "=", "self", ".", "onemulone_ird_1_D", "(", "ird_1_concat_se", ")", "\n", "# ird_1_concat_residual = self.norm_ird_1(ird_1_concat_residual)", "\n", "# ird_1_concat_residual = self.relu_ird_1(ird_1_concat_residual)", "\n", "ird_1", "=", "e3_h", "+", "ird_1_concat_residual", "\n", "print", "(", "\"ird_1 size is:\"", ",", "ird_1", ".", "size", "(", ")", ")", "\n", "ird_1", "=", "self", ".", "relu", "(", "ird_1", ")", "\n", "\n", "# ird_1_concat = self.GovalAvgPooling(ird_1_concat)", "\n", "# ird_1_concat = torch.mean(ird_1_concat_ori.view(ird_1_concat_ori.size(0), ird_1_concat_ori.size(1), -1), dim=2) # Global pooling", "\n", "# print(\"size of global pooling is:\", ird_1_concat.size())", "\n", "# ird_1_concat = self.relu_ird_1_1(self.fc_ird_1_1(ird_1_concat))", "\n", "# ird_1_concat = self.sigmoid_ird_1_2(self.fc_ird_1_2(ird_1_concat))", "\n", "# print(\"size of SEmodule tensor is:\", ird_1_concat, ird_1_concat.size())", "\n", "\n", "ird_2_A", "=", "self", ".", "onemulone_ird_2_A", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "onemulone_ird_2_B", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "dcn_ird_2_B", "(", "ird_2_B", ")", "\n", "ird_2_C", "=", "self", ".", "onemulone_ird_2_C", "(", "ird_1", ")", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "\n", "ird_2_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_2_A", ",", "ird_2_B", ",", "ird_2_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_2_concat_ori is:\"", ",", "ird_2_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_2_concat_se", "=", "self", ".", "se_2", "(", "ird_2_concat_ori", ")", "\n", "print", "(", "\"size ofird_2_concat_se is:\"", ",", "ird_2_concat_se", ".", "size", "(", ")", ")", "\n", "ird_2_concat_residual", "=", "self", ".", "onemulone_ird_2_D", "(", "ird_2_concat_se", ")", "\n", "# ird_2_concat_residual = self.norm_ird_2(ird_2_concat_residual)", "\n", "# ird_2_concat_residual = self.relu_ird_2(ird_2_concat_residual)", "\n", "ird_2", "=", "ird_1", "+", "ird_2_concat_residual", "\n", "print", "(", "\"ird_2 size is:\"", ",", "ird_2", ".", "size", "(", ")", ")", "\n", "ird_2", "=", "self", ".", "relu", "(", "ird_2", ")", "\n", "\n", "ird_3_A", "=", "self", ".", "onemulone_ird_3_A", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "onemulone_ird_3_B", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "dcn_ird_3_B", "(", "ird_3_B", ")", "\n", "ird_3_C", "=", "self", ".", "onemulone_ird_3_C", "(", "ird_2", ")", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "\n", "ird_3_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_3_A", ",", "ird_3_B", ",", "ird_3_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_3_concat_ori is:\"", ",", "ird_3_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_3_concat_se", "=", "self", ".", "se_3", "(", "ird_3_concat_ori", ")", "\n", "print", "(", "\"size ofird_3_concat_se is:\"", ",", "ird_3_concat_se", ".", "size", "(", ")", ")", "\n", "ird_3_concat_residual", "=", "self", ".", "onemulone_ird_3_D", "(", "ird_3_concat_se", ")", "\n", "# ird_3_concat_residual = self.norm_ird_3(ird_3_concat_residual)", "\n", "# ird_3_concat_residual = self.relu_ird_3(ird_3_concat_residual)", "\n", "ird_3", "=", "ird_2", "+", "ird_3_concat_residual", "\n", "print", "(", "\"ird_3 size is:\"", ",", "ird_3", ".", "size", "(", ")", ")", "\n", "ird_3", "=", "self", ".", "relu", "(", "ird_3", ")", "\n", "\n", "ird_4_A", "=", "self", ".", "onemulone_ird_4_A", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "onemulone_ird_4_B", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "dcn_ird_4_B", "(", "ird_4_B", ")", "\n", "ird_4_C", "=", "self", ".", "onemulone_ird_4_C", "(", "ird_3", ")", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "\n", "ird_4_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_4_A", ",", "ird_4_B", ",", "ird_4_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_4_concat_ori is:\"", ",", "ird_4_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_4_concat_se", "=", "self", ".", "se_4", "(", "ird_4_concat_ori", ")", "\n", "print", "(", "\"size ofird_4_concat_se is:\"", ",", "ird_4_concat_se", ".", "size", "(", ")", ")", "\n", "ird_4_concat_residual", "=", "self", ".", "onemulone_ird_4_D", "(", "ird_4_concat_se", ")", "\n", "# ird_4_concat_residual = self.norm_ird_4(ird_4_concat_residual)", "\n", "# ird_4_concat_residual = self.relu_ird_4(ird_4_concat_residual)", "\n", "ird_4", "=", "ird_3", "+", "ird_4_concat_residual", "\n", "print", "(", "\"ird_4 size is:\"", ",", "ird_4", ".", "size", "(", ")", ")", "\n", "ird_4", "=", "self", ".", "relu", "(", "ird_4", ")", "\n", "\n", "e4_h", "=", "self", ".", "conv4_1_h", "(", "ird_4", ")", "\n", "# e4_h = self.relu4_1_h(e4_h)", "\n", "# e4_h = self.conv4_2_h(e4_h)", "\n", "# e4_h = self.relu4_2_h(e4_h)", "\n", "# e4_h = self.conv4_3_h(e4_h)", "\n", "e4_h", "=", "self", ".", "norm4_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "relu4_3_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "max4_h", "(", "e4_h", ")", "\n", "print", "(", "\"e4_h size is :\"", ",", "e4_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_5_A", "=", "self", ".", "onemulone_ird_5_A", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "onemulone_ird_5_B", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "dcn_ird_5_B", "(", "ird_5_B", ")", "\n", "ird_5_C", "=", "self", ".", "onemulone_ird_5_C", "(", "e4_h", ")", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "\n", "ird_5_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_5_A", ",", "ird_5_B", ",", "ird_5_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_5_concat_ori is:\"", ",", "ird_5_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_5_concat_se", "=", "self", ".", "se_5", "(", "ird_5_concat_ori", ")", "\n", "print", "(", "\"size ofird_5_concat_se is:\"", ",", "ird_5_concat_se", ".", "size", "(", ")", ")", "\n", "ird_5_concat_residual", "=", "self", ".", "onemulone_ird_5_D", "(", "ird_5_concat_se", ")", "\n", "# ird_5_concat_residual = self.norm_ird_5(ird_5_concat_residual)", "\n", "# ird_5_concat_residual = self.relu_ird_5(ird_5_concat_residual)", "\n", "ird_5", "=", "e4_h", "+", "ird_5_concat_residual", "\n", "print", "(", "\"ird_5 size is:\"", ",", "ird_5", ".", "size", "(", ")", ")", "\n", "ird_5", "=", "self", ".", "relu", "(", "ird_5", ")", "\n", "\n", "ird_6_A", "=", "self", ".", "onemulone_ird_6_A", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "onemulone_ird_6_B", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "dcn_ird_6_B", "(", "ird_6_B", ")", "\n", "ird_6_C", "=", "self", ".", "onemulone_ird_6_C", "(", "ird_5", ")", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "\n", "ird_6_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_6_A", ",", "ird_6_B", ",", "ird_6_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_6_concat_ori is:\"", ",", "ird_6_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_6_concat_se", "=", "self", ".", "se_6", "(", "ird_6_concat_ori", ")", "\n", "print", "(", "\"size ofird_6_concat_se is:\"", ",", "ird_6_concat_se", ".", "size", "(", ")", ")", "\n", "ird_6_concat_residual", "=", "self", ".", "onemulone_ird_6_D", "(", "ird_6_concat_se", ")", "\n", "# ird_6_concat_residual = self.norm_ird_6(ird_6_concat_residual)", "\n", "# ird_6_concat_residual = self.relu_ird_6(ird_6_concat_residual)", "\n", "ird_6", "=", "ird_5", "+", "ird_6_concat_residual", "\n", "print", "(", "\"ird_6 size is:\"", ",", "ird_6", ".", "size", "(", ")", ")", "\n", "ird_6", "=", "self", ".", "relu", "(", "ird_6", ")", "\n", "\n", "ird_7_A", "=", "self", ".", "onemulone_ird_7_A", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "onemulone_ird_7_B", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "dcn_ird_7_B", "(", "ird_7_B", ")", "\n", "ird_7_C", "=", "self", ".", "onemulone_ird_7_C", "(", "ird_6", ")", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "\n", "ird_7_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_7_A", ",", "ird_7_B", ",", "ird_7_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_7_concat_ori is:\"", ",", "ird_7_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_7_concat_se", "=", "self", ".", "se_7", "(", "ird_7_concat_ori", ")", "\n", "print", "(", "\"size ofird_7_concat_se is:\"", ",", "ird_7_concat_se", ".", "size", "(", ")", ")", "\n", "ird_7_concat_residual", "=", "self", ".", "onemulone_ird_7_D", "(", "ird_7_concat_se", ")", "\n", "# ird_7_concat_residual = self.norm_ird_7(ird_7_concat_residual)", "\n", "# ird_7_concat_residual = self.relu_ird_7(ird_7_concat_residual)", "\n", "ird_7", "=", "ird_6", "+", "ird_7_concat_residual", "\n", "print", "(", "\"ird_7 size is:\"", ",", "ird_7", ".", "size", "(", ")", ")", "\n", "ird_7", "=", "self", ".", "relu", "(", "ird_7", ")", "\n", "\n", "ird_8_A", "=", "self", ".", "onemulone_ird_8_A", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "onemulone_ird_8_B", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "dcn_ird_8_B", "(", "ird_8_B", ")", "\n", "ird_8_C", "=", "self", ".", "onemulone_ird_8_C", "(", "ird_7", ")", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "\n", "ird_8_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_8_A", ",", "ird_8_B", ",", "ird_8_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_8_concat_ori is:\"", ",", "ird_8_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_8_concat_se", "=", "self", ".", "se_8", "(", "ird_8_concat_ori", ")", "\n", "print", "(", "\"size ofird_8_concat_se is:\"", ",", "ird_8_concat_se", ".", "size", "(", ")", ")", "\n", "ird_8_concat_residual", "=", "self", ".", "onemulone_ird_8_D", "(", "ird_8_concat_se", ")", "\n", "# ird_8_concat_residual = self.norm_ird_8(ird_8_concat_residual)", "\n", "# ird_8_concat_residual = self.relu_ird_8(ird_8_concat_residual)", "\n", "ird_8", "=", "ird_7", "+", "ird_8_concat_residual", "\n", "print", "(", "\"ird_8 size is:\"", ",", "ird_8", ".", "size", "(", ")", ")", "\n", "ird_8", "=", "self", ".", "relu", "(", "ird_8", ")", "\n", "\n", "e5_h", "=", "self", ".", "conv5_1_h", "(", "ird_8", ")", "\n", "# e5_h = self.relu5_1_h(e5_h)", "\n", "# e5_h = self.conv5_2_h(e5_h)", "\n", "# e5_h = self.relu5_2_h(e5_h)", "\n", "# e5_h = self.conv5_3_h(e5_h)", "\n", "e5_h", "=", "self", ".", "norm5_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "relu5_3_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "max5_h", "(", "e5_h", ")", "\n", "print", "(", "\"e5_h size is :\"", ",", "e5_h", ".", "size", "(", ")", ")", "\n", "\n", "e5_h_concat", "=", "torch", ".", "cat", "(", "[", "e5_upsp", ",", "e5_h", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"shape of e5_h_concat:\"", ",", "e5_h_concat", ".", "size", "(", ")", ")", "\n", "\n", "# e5_sd = torch.cat([e5_s, e5_d], dim=1)", "\n", "e5_sd", "=", "self", ".", "channel_spatial_gate_1", "(", "e5_h_concat", ")", "\n", "print", "(", "\"e5_sd size is :\"", ",", "e5_sd", ".", "size", "(", ")", ")", "\n", "\n", "# d1_h = self.conv6_1_h(e5_h)", "\n", "d1_h", "=", "self", ".", "conv6_1_h", "(", "e5_sd", ")", "\n", "# d1_h = self.conv6_1_h(e5_h_concat)", "\n", "# d1_h = self.conv6_1_h(e5_h_concat_refine)", "\n", "d1_h", "=", "self", ".", "norm6_h", "(", "d1_h", ")", "\n", "d1_h", "=", "self", ".", "relu6_1_h", "(", "d1_h", ")", "\n", "print", "(", "\"d1_h size is :\"", ",", "d1_h", ".", "size", "(", ")", ")", "\n", "\n", "d2_h", "=", "self", ".", "conv7_1_h", "(", "d1_h", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d2_h", "=", "self", ".", "relu7_1_h", "(", "d2_h", ")", "\n", "print", "(", "\"d2_h size is :\"", ",", "d2_h", ".", "size", "(", ")", ")", "\n", "\n", "d2_h_sequence_unit", "=", "torch", ".", "unsqueeze", "(", "d2_h", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"shape of d2_h_sequence_unit:\"", ",", "d2_h_sequence_unit", ".", "size", "(", ")", ")", "\n", "\n", "# e5_h_sequence_1 = []", "\n", "d2_h_sequence_2", "=", "d2_h_sequence_unit", "\n", "\n", "for", "n_sequence", "in", "range", "(", "4", ")", ":", "\n", "# e5_h_sequence_1.append(e5_h_sequence_unit)", "\n", "            ", "d2_h_sequence_2", "=", "torch", ".", "cat", "(", "[", "d2_h_sequence_2", ",", "d2_h_sequence_unit", "]", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "# print(\"shape of e5_h_sequence_1:\", e5_h_sequence_1.size())", "\n", "", "print", "(", "\"shape of d2_h_sequence_2:\"", ",", "d2_h_sequence_2", ".", "size", "(", ")", ")", "\n", "\n", "layer_output_list", ",", "last_state_list", "=", "self", ".", "ConvLSTM_layer_1", "(", "d2_h_sequence_2", ")", "\n", "# print(\"layer_output_list is:\", layer_output_list)", "\n", "d2_h_refine", "=", "layer_output_list", "[", "0", "]", "\n", "d2_h_refine", "=", "d2_h_refine", "[", ":", ",", "-", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "print", "(", "\"shape of d2_h_refine:\"", ",", "d2_h_refine", ".", "size", "(", ")", ")", "\n", "\n", "\n", "\n", "# d3_h = self.conv8_1_h(d2_h)", "\n", "d3_h", "=", "self", ".", "conv8_1_h", "(", "d2_h_refine", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d3_h", "=", "self", ".", "relu8_1_h", "(", "d3_h", ")", "\n", "print", "(", "\"d3_h size is :\"", ",", "d3_h", ".", "size", "(", ")", ")", "\n", "\n", "d4_h", "=", "self", ".", "conv9_1_h", "(", "d3_h", ")", "\n", "d4_h", "=", "self", ".", "tanh9_1_h", "(", "d4_h", ")", "\n", "print", "(", "\"d4_h size is :\"", ",", "d4_h", ".", "size", "(", ")", ")", "\n", "\n", "d4_out", "=", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "d4_h", ",", "size", "=", "[", "120", ",", "160", "]", ")", "\n", "\n", "# d4_h_upsp = self.upsp_output(d4_h)", "\n", "# print(\"d4_h_upsp size is :\", d4_h_upsp.size())", "\n", "# d4_h_upsp = torch.nn.functional.upsample_bilinear(d4_h_upsp, size=[480, 640])", "\n", "\n", "\n", "return", "d4_out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Spatial_Channel_Gate_Layer.__init__": [[1303, 1318], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "networks_old11.SELayer", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_redu", ")", ":", "\n", "        ", "super", "(", "Spatial_Channel_Gate_Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "onemulone_ird_1_A", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_redu", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "onemulone_ird_1_B", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_redu", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_B", "=", "ModulatedDeformConvPack", "(", "dim_redu", ",", "dim_redu", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_C", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_redu", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "dcn_ird_1_C_1", "=", "ModulatedDeformConvPack", "(", "dim_redu", ",", "dim_redu", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "dcn_ird_1_C_2", "=", "ModulatedDeformConvPack", "(", "dim_redu", ",", "dim_redu", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "s_attention_conv", "=", "nn", ".", "Conv2d", "(", "3", "*", "dim_redu", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_1", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "softmax_1", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "expanddim", "=", "dim_in", "\n", "\n", "self", ".", "channel_gate", "=", "SELayer", "(", "dim_in", ",", "reduction", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Spatial_Channel_Gate_Layer.forward": [[1319, 1338], ["networks_old11.Spatial_Channel_Gate_Layer.onemulone_ird_1_A", "networks_old11.Spatial_Channel_Gate_Layer.onemulone_ird_1_B", "networks_old11.Spatial_Channel_Gate_Layer.dcn_ird_1_B", "networks_old11.Spatial_Channel_Gate_Layer.onemulone_ird_1_C", "networks_old11.Spatial_Channel_Gate_Layer.dcn_ird_1_C_1", "networks_old11.Spatial_Channel_Gate_Layer.dcn_ird_1_C_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks_old11.Spatial_Channel_Gate_Layer.s_attention_conv", "networks_old11.Spatial_Channel_Gate_Layer.relu_ird_1", "networks_old11.Spatial_Channel_Gate_Layer.softmax_1", "s_attention_map.repeat.repeat.repeat", "networks_old11.Spatial_Channel_Gate_Layer.channel_gate", "networks_old11.Spatial_Channel_Gate_Layer.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputx", ")", ":", "\n", "\n", "        ", "s_gate_A", "=", "self", ".", "onemulone_ird_1_A", "(", "inputx", ")", "\n", "s_gate_B", "=", "self", ".", "onemulone_ird_1_B", "(", "inputx", ")", "\n", "s_gate_B", "=", "self", ".", "dcn_ird_1_B", "(", "s_gate_B", ")", "\n", "s_gate_C", "=", "self", ".", "onemulone_ird_1_C", "(", "inputx", ")", "\n", "s_gate_C", "=", "self", ".", "dcn_ird_1_C_1", "(", "s_gate_C", ")", "\n", "s_gate_C", "=", "self", ".", "dcn_ird_1_C_2", "(", "s_gate_C", ")", "\n", "s_gate_concat", "=", "torch", ".", "cat", "(", "[", "s_gate_A", ",", "s_gate_B", ",", "s_gate_C", "]", ",", "dim", "=", "1", ")", "\n", "s_attention_map", "=", "self", ".", "s_attention_conv", "(", "s_gate_concat", ")", "\n", "# s_attention_map = self.norm_ird_1(s_attention_map)", "\n", "s_attention_map", "=", "self", ".", "relu_ird_1", "(", "s_attention_map", ")", "\n", "s_attention_map", "=", "self", ".", "softmax_1", "(", "s_attention_map", ")", "\n", "s_attention_map", "=", "s_attention_map", ".", "repeat", "(", "1", ",", "self", ".", "expanddim", ",", "1", ",", "1", ")", "# extend from 1X1XWXH to 1XNXWXH", "\n", "\n", "input_channel_gate", "=", "self", ".", "channel_gate", "(", "inputx", ")", "# after channel-attention-gate", "\n", "outx", "=", "input_channel_gate", ".", "mul", "(", "s_attention_map", ")", "# after spatial-attention-gate", "\n", "\n", "return", "outx", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.SELayer.__init__": [[1340, 1348], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.SELayer.forward": [[1350, 1355], ["x.size", "networks_old11.SELayer.avg_pool().view", "networks_old11.SELayer.fc().view", "networks_old11.SELayer.expand_as", "networks_old11.SELayer.avg_pool", "networks_old11.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.ResnetBlock.__init__": [[1358, 1361], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old11.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.ResnetBlock.build_conv_block": [[1362, 1393], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.ResnetBlock.forward": [[1394, 1397], ["networks_old11.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Encoder.__init__": [[1399, 1419], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Encoder.forward": [[1420, 1434], ["networks_old11.Encoder.model", "networks_old11.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MultiscaleDiscriminator.__init__": [[1436, 1452], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old11.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MultiscaleDiscriminator.singleD_forward": [[1453, 1461], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.MultiscaleDiscriminator.forward": [[1462, 1475], ["range", "result.append", "getattr", "networks_old11.MultiscaleDiscriminator.singleD_forward", "networks_old11.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.NLayerDiscriminator.__init__": [[1478, 1517], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.NLayerDiscriminator.forward": [[1518, 1527], ["range", "networks_old11.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Vgg19.__init__": [[1530, 1551], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old11.Vgg19.slice1.add_module", "networks_old11.Vgg19.slice2.add_module", "networks_old11.Vgg19.slice3.add_module", "networks_old11.Vgg19.slice4.add_module", "networks_old11.Vgg19.slice5.add_module", "networks_old11.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.Vgg19.forward": [[1552, 1560], ["networks_old11.Vgg19.slice1", "networks_old11.Vgg19.slice2", "networks_old11.Vgg19.slice3", "networks_old11.Vgg19.slice4", "networks_old11.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.weights_init": [[45, 52], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.get_norm_layer": [[53, 61], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.define_G": [[62, 82], ["networks_old11.get_norm_layer", "print", "GlobalUNet.apply", "networks_old11.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old11.LocalEnhancer", "networks_old11.Encoder", "networks_old11.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.define_D": [[83, 92], ["networks_old11.get_norm_layer", "networks_old11.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old11.print_network": [[93, 101], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model.Pix2PixHDModel.tensor2saveimg": [[372, 383], ["torch.min", "torch.max", "numpy.clip.squeeze", "numpy.clip.cpu", "numpy.clip.detach().numpy", "numpy.clip", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.transpose", "numpy.clip.astype", "numpy.clip.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.name": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.init_loss_filter": [[29, 36], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", "\n", "# def loss_filter(g_gan, g_gan_feat, g_vgg, d_real, d_fake, loss_cc, loss_kl):", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ":", "\n", "# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.initialize": [[37, 137], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old4.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old4.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model_old4.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old4.Pix2PixHDModel.load_network", "pix2pixHD_model_old4.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old4.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old4.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old4.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old4.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.encode_input": [[139, 175], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old4.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.discriminate": [[176, 183], ["torch.cat", "pix2pixHD_model_old4.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old4.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old4.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.forward": [[185, 266], ["pix2pixHD_model_old4.Pix2PixHDModel.encode_input", "pix2pixHD_model_old4.Pix2PixHDModel.netG.forward", "torch.nn.AvgPool2d", "pix2pixHD_model_old4.Pix2PixHDModel.downsample", "pix2pixHD_model_old4.Pix2PixHDModel.discriminate", "pix2pixHD_model_old4.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old4.Pix2PixHDModel.discriminate", "pix2pixHD_model_old4.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old4.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old4.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_old4.Pix2PixHDModel.mul", "pix2pixHD_model_old4.Pix2PixHDModel.mul", "pix2pixHD_model_old4.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old4.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old4.Pix2PixHDModel.criterionVGG", "pix2pixHD_model_old4.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old4.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old4.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model_old4.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "# add the fixation maps as input", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "# print(\"input label and fake_image size :\", real_image.size(), fake_image.size())", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=8, padding=[1, 1], count_include_pad=False)", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "4", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "input_label_small", "=", "self", ".", "downsample", "(", "input_label", ")", "\n", "# print(\"input label small size :\", input_label_small.size())", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "\n", "# Real Detection and Loss    ", "\n", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "\n", "# GAN loss (Fake Passability Loss) ", "\n", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label_small", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "# if not self.opt.no_vgg_loss:", "\n", "#  loss_G_VGG = self.criterionVGG(fake_image, real_image) * self.opt.lambda_feat # default lambda_feat = 10", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "fake_image_vgg", "=", "input_label_small", ".", "mul", "(", "fake_image", ")", "# Hadamart product", "\n", "real_image_vgg", "=", "input_label_small", ".", "mul", "(", "real_image", ")", "# Hadamart product", "\n", "# print(\"The Hadamart product is:\", real_image_vgg.size())", "\n", "# self.tensor2saveimg(real_image_vgg, \"Conditional_VGG_Real\")", "\n", "# self.tensor2saveimg(fake_image_vgg, \"Conditional_VGG_fake\")", "\n", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image_vgg", ",", "real_image_vgg", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "# loss_D_fake = loss_G_KL", "\n", "# loss_D_real = loss_G_KL", "\n", "# loss_G_GAN = loss_G_KL", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.inference": [[267, 290], ["pix2pixHD_model_old4.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old4.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old4.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old4.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old4.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.sample_features": [[291, 311], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old4.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.encode_features": [[312, 333], ["torch.autograd.Variable", "pix2pixHD_model_old4.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.get_edges": [[334, 344], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.save": [[345, 350], ["pix2pixHD_model_old4.Pix2PixHDModel.save_network", "pix2pixHD_model_old4.Pix2PixHDModel.save_network", "pix2pixHD_model_old4.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.update_fixed_params": [[351, 359], ["list", "torch.optim.Adam", "pix2pixHD_model_old4.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old4.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.update_learning_rate": [[360, 370], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.Pix2PixHDModel.tensor2saveimg": [[371, 382], ["torch.min", "torch.max", "numpy.clip.squeeze", "numpy.clip.cpu", "numpy.clip.detach().numpy", "numpy.clip", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.transpose", "numpy.clip.astype", "numpy.clip.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "tensor2saveimg", "(", "self", ",", "input", ",", "svname", ")", ":", "# for tensor, visualization by saving as image, make sure that the input is a 4-dims tensor, and svname is a string", "\n", "        ", "min1", "=", "torch", ".", "min", "(", "input", ")", "\n", "max1", "=", "torch", ".", "max", "(", "input", ")", "\n", "input", "=", "(", "input", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "1e-8", ")", "\n", "input", "=", "input", ".", "squeeze", "(", "0", ")", "# for 4-dims input tensor", "\n", "input", "=", "input", ".", "cpu", "(", ")", "\n", "input", "=", "input", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "input", "=", "np", ".", "transpose", "(", "input", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "input", "=", "np", ".", "clip", "(", "input", ",", "0", ",", "255", ")", "\n", "input_sm", "=", "Image", ".", "fromarray", "(", "input", ".", "astype", "(", "'uint8'", ")", ")", "\n", "input_sm", ".", "save", "(", "\"/home/che-z/docker-czh/pix2pixHD/DCN_version_1/checkpointsMy/label2city_512p/web/intermediate_visulization/\"", "+", "svname", "+", "\".png\"", ",", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old4.InferenceModel.forward": [[384, 387], ["pix2pixHD_model_old4.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.name": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.init_loss_filter": [[29, 36], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", "\n", "# def loss_filter(g_gan, g_gan_feat, g_vgg, d_real, d_fake, loss_cc, loss_kl):", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ":", "\n", "# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.initialize": [[37, 137], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old5.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old5.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model_old5.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old5.Pix2PixHDModel.load_network", "pix2pixHD_model_old5.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old5.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old5.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old5.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old5.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.encode_input": [[139, 175], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old5.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.discriminate": [[176, 183], ["torch.cat", "pix2pixHD_model_old5.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old5.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old5.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.forward": [[185, 272], ["pix2pixHD_model_old5.Pix2PixHDModel.encode_input", "pix2pixHD_model_old5.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old5.Pix2PixHDModel.discriminate", "pix2pixHD_model_old5.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old5.Pix2PixHDModel.discriminate", "pix2pixHD_model_old5.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old5.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old5.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "print", "input_label.mul", "input_label.mul", "pix2pixHD_model_old5.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old5.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old5.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old5.Pix2PixHDModel.netE.forward", "range", "input_label.size", "pix2pixHD_model_old5.Pix2PixHDModel.size", "pix2pixHD_model_old5.Pix2PixHDModel.criterionVGG", "pix2pixHD_model_old5.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old5.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old5.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model_old5.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "# add the fixation maps as input", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "# print(\"input label and fake_image size :\", real_image.size(), fake_image.size())", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=8, padding=[1, 1], count_include_pad=False)", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=4, padding=[1, 1], count_include_pad=False)", "\n", "# input_label_small = self.downsample(input_label)", "\n", "# print(\"input label small size :\", input_label_small.size())", "\n", "# pred_fake_pool = self.discriminate(input_label_small, fake_image, use_pool=True)", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "\n", "# Real Detection and Loss    ", "\n", "\n", "# pred_real = self.discriminate(input_label_small, real_image)", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "\n", "# GAN loss (Fake Passability Loss) ", "\n", "\n", "# pred_fake = self.netD.forward(torch.cat((input_label_small, fake_image), dim=1)) ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "# if not self.opt.no_vgg_loss:", "\n", "#  loss_G_VGG = self.criterionVGG(fake_image, real_image) * self.opt.lambda_feat # default lambda_feat = 10", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "# fake_image_vgg = input_label_small.mul(fake_image) # Hadamart product", "\n", "# real_image_vgg = input_label_small.mul(real_image) # Hadamart product", "\n", "            ", "print", "(", "\"size of input_label and fake_image\"", ",", "input_label", ".", "size", "(", ")", ",", "fake_image", ".", "size", "(", ")", ")", "\n", "fake_image_vgg", "=", "input_label", ".", "mul", "(", "fake_image", ")", "# Hadamart product", "\n", "real_image_vgg", "=", "input_label", ".", "mul", "(", "real_image", ")", "# Hadamart product", "\n", "# print(\"The Hadamart product is:\", real_image_vgg.size())", "\n", "self", ".", "tensor2saveimg", "(", "real_image_vgg", ",", "\"Conditional_VGG_Real\"", ")", "\n", "self", ".", "tensor2saveimg", "(", "fake_image_vgg", ",", "\"Conditional_VGG_fake\"", ")", "\n", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image_vgg", ",", "real_image_vgg", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "# loss_D_fake = loss_G_KL", "\n", "# loss_D_real = loss_G_KL", "\n", "# loss_G_GAN = loss_G_KL", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.inference": [[273, 296], ["pix2pixHD_model_old5.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old5.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old5.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old5.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old5.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.sample_features": [[297, 317], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old5.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.encode_features": [[318, 339], ["torch.autograd.Variable", "pix2pixHD_model_old5.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.get_edges": [[340, 350], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.save": [[351, 356], ["pix2pixHD_model_old5.Pix2PixHDModel.save_network", "pix2pixHD_model_old5.Pix2PixHDModel.save_network", "pix2pixHD_model_old5.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.update_fixed_params": [[357, 365], ["list", "torch.optim.Adam", "pix2pixHD_model_old5.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old5.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.update_learning_rate": [[366, 376], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.Pix2PixHDModel.tensor2saveimg": [[377, 388], ["torch.min", "torch.max", "numpy.clip.squeeze", "numpy.clip.cpu", "numpy.clip.detach().numpy", "numpy.clip", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.transpose", "numpy.clip.astype", "numpy.clip.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "tensor2saveimg", "(", "self", ",", "input", ",", "svname", ")", ":", "# for tensor, visualization by saving as image, make sure that the input is a 4-dims tensor, and svname is a string", "\n", "        ", "min1", "=", "torch", ".", "min", "(", "input", ")", "\n", "max1", "=", "torch", ".", "max", "(", "input", ")", "\n", "input", "=", "(", "input", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "1e-8", ")", "\n", "input", "=", "input", ".", "squeeze", "(", "0", ")", "# for 4-dims input tensor", "\n", "input", "=", "input", ".", "cpu", "(", ")", "\n", "input", "=", "input", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "input", "=", "np", ".", "transpose", "(", "input", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "input", "=", "np", ".", "clip", "(", "input", ",", "0", ",", "255", ")", "\n", "input_sm", "=", "Image", ".", "fromarray", "(", "input", ".", "astype", "(", "'uint8'", ")", ")", "\n", "input_sm", ".", "save", "(", "\"/home/che-z/docker-czh/pix2pixHD/DCN_version_1/checkpointsMy/label2city_512p/web/intermediate_visulization/\"", "+", "svname", "+", "\".png\"", ",", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old5.InferenceModel.forward": [[390, 393], ["pix2pixHD_model_old5.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.name": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.init_loss_filter": [[29, 36], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", "\n", "# def loss_filter(g_gan, g_gan_feat, g_vgg, d_real, d_fake, loss_cc, loss_kl):", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ":", "\n", "# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.initialize": [[37, 137], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old6.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old6.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model_old6.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old6.Pix2PixHDModel.load_network", "pix2pixHD_model_old6.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old6.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old6.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old6.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old6.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.encode_input": [[139, 175], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old6.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.discriminate": [[176, 183], ["torch.cat", "pix2pixHD_model_old6.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old6.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old6.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.forward": [[185, 266], ["pix2pixHD_model_old6.Pix2PixHDModel.encode_input", "pix2pixHD_model_old6.Pix2PixHDModel.netG.forward", "torch.nn.AvgPool2d", "pix2pixHD_model_old6.Pix2PixHDModel.downsample", "pix2pixHD_model_old6.Pix2PixHDModel.discriminate", "pix2pixHD_model_old6.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old6.Pix2PixHDModel.discriminate", "pix2pixHD_model_old6.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old6.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old6.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_old6.Pix2PixHDModel.mul", "pix2pixHD_model_old6.Pix2PixHDModel.mul", "pix2pixHD_model_old6.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old6.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old6.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old6.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old6.Pix2PixHDModel.criterionVGG", "pix2pixHD_model_old6.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old6.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old6.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model_old6.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "# add the fixation maps as input", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "# print(\"input label and fake_image size :\", real_image.size(), fake_image.size())", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=8, padding=[1, 1], count_include_pad=False)", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "4", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "input_label_small", "=", "self", ".", "downsample", "(", "input_label", ")", "\n", "# print(\"input label small size :\", input_label_small.size())", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "\n", "# Real Detection and Loss    ", "\n", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "\n", "# GAN loss (Fake Passability Loss) ", "\n", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label_small", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "# if not self.opt.no_vgg_loss:", "\n", "#  loss_G_VGG = self.criterionVGG(fake_image, real_image) * self.opt.lambda_feat # default lambda_feat = 10", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "fake_image_vgg", "=", "input_label_small", ".", "mul", "(", "fake_image", ")", "# Hadamart product", "\n", "real_image_vgg", "=", "input_label_small", ".", "mul", "(", "real_image", ")", "# Hadamart product", "\n", "# print(\"The Hadamart product is:\", real_image_vgg.size())", "\n", "self", ".", "tensor2saveimg", "(", "real_image_vgg", ",", "\"Conditional_VGG_Real\"", ")", "\n", "self", ".", "tensor2saveimg", "(", "fake_image_vgg", ",", "\"Conditional_VGG_fake\"", ")", "\n", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image_vgg", ",", "real_image_vgg", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "# loss_D_fake = loss_G_KL", "\n", "# loss_D_real = loss_G_KL", "\n", "# loss_G_GAN = loss_G_KL", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.inference": [[267, 290], ["pix2pixHD_model_old6.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old6.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old6.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old6.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old6.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.sample_features": [[291, 311], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old6.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.encode_features": [[312, 333], ["torch.autograd.Variable", "pix2pixHD_model_old6.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.get_edges": [[334, 344], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.save": [[345, 350], ["pix2pixHD_model_old6.Pix2PixHDModel.save_network", "pix2pixHD_model_old6.Pix2PixHDModel.save_network", "pix2pixHD_model_old6.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.update_fixed_params": [[351, 359], ["list", "torch.optim.Adam", "pix2pixHD_model_old6.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old6.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.update_learning_rate": [[360, 370], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.Pix2PixHDModel.tensor2saveimg": [[371, 382], ["torch.min", "torch.max", "numpy.clip.squeeze", "numpy.clip.cpu", "numpy.clip.detach().numpy", "numpy.clip", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.transpose", "numpy.clip.astype", "numpy.clip.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "tensor2saveimg", "(", "self", ",", "input", ",", "svname", ")", ":", "# for tensor, visualization by saving as image, make sure that the input is a 4-dims tensor, and svname is a string", "\n", "        ", "min1", "=", "torch", ".", "min", "(", "input", ")", "\n", "max1", "=", "torch", ".", "max", "(", "input", ")", "\n", "input", "=", "(", "input", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "1e-8", ")", "\n", "input", "=", "input", ".", "squeeze", "(", "0", ")", "# for 4-dims input tensor", "\n", "input", "=", "input", ".", "cpu", "(", ")", "\n", "input", "=", "input", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "input", "=", "np", ".", "transpose", "(", "input", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "input", "=", "np", ".", "clip", "(", "input", ",", "0", ",", "255", ")", "\n", "input_sm", "=", "Image", ".", "fromarray", "(", "input", ".", "astype", "(", "'uint8'", ")", ")", "\n", "input_sm", ".", "save", "(", "\"/home/che-z/docker-czh/pix2pixHD/DCN_version_1/checkpointsMy/label2city_512p/web/intermediate_visulization/\"", "+", "svname", "+", "\".png\"", ",", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old6.InferenceModel.forward": [[384, 387], ["pix2pixHD_model_old6.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GANLoss.__init__": [[78, 90], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GANLoss.get_target_tensor": [[91, 108], ["networks_old7.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old7.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old7.GANLoss.real_label_var.numel", "input.numel", "networks_old7.GANLoss.fake_label_var.numel", "input.numel", "networks_old7.GANLoss.Tensor", "networks_old7.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GANLoss.__call__": [[109, 120], ["isinstance", "networks_old7.GANLoss.get_target_tensor", "networks_old7.GANLoss.loss", "networks_old7.GANLoss.get_target_tensor", "networks_old7.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.VGGLoss.__init__": [[136, 142], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old7.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.VGGLoss.forward": [[143, 164], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old7.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.CCLoss.__init__": [[166, 172], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.CCLoss.forward": [[174, 224], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.KLLoss.__init__": [[227, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.KLLoss.forward": [[235, 267], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.NSSLoss.__init__": [[269, 275], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.NSSLoss.forward": [[277, 339], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.LocalEnhancer.__init__": [[345, 387], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old7.GlobalGenerator", "range", "setattr", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old7.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "model_downsample_2", "=", "[", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_3'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample_2", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.LocalEnhancer.forward": [[388, 411], ["range", "networks_old7.LocalEnhancer.model", "print", "range", "input_downsampled.append", "getattr.size", "getattr", "getattr", "getattr", "getattr.", "print", "networks_old7.LocalEnhancer.downsample", "getattr.size", "getattr.", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator ", "\n", "print", "(", "\"output_prev_global :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "model_downsample_2", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_3'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "print", "(", "\"output_prev_local :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "# output_prev = model_downsample_2(output_prev) # this is my operation, in order to make sure that the resolution of final output saliency map is the same as input image", "\n", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalGenerator.__init__": [[413, 438], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old7.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalGenerator.forward": [[439, 443], ["networks_old7.GlobalGenerator.model", "print", "networks_old7.GlobalGenerator.model", "networks_old7.GlobalGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outglobal", "=", "self", ".", "model", "(", "input", ")", "\n", "print", "(", "\"output_prev_global XXXXXXXXXXXXXXXXXXXXXXX:\"", ",", "outglobal", ".", "size", "(", ")", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.encoderconv_1.__init__": [[445, 454], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.encoderconv_1.forward": [[455, 457], ["networks_old7.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.encoderconv_2.__init__": [[459, 467], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.encoderconv_2.forward": [[468, 470], ["networks_old7.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_1.__init__": [[472, 482], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_1.forward": [[483, 485], ["networks_old7.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_2.__init__": [[487, 496], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_2.forward": [[497, 499], ["networks_old7.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_3.__init__": [[501, 510], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.decoderconv_3.forward": [[511, 513], ["networks_old7.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.dimredconv.__init__": [[515, 522], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.dimredconv.forward": [[523, 525], ["networks_old7.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalUNet_old.__init__": [[527, 601], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.ResnetBlock", "networks_old7.ResnetBlock", "networks_old7.ResnetBlock", "networks_old7.ResnetBlock", "networks_old7.decoderconv_3", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.dimredconv", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.encoderconv_2", "networks_old7.ResnetBlock", "networks_old7.decoderconv_3", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2", "networks_old7.decoderconv_2"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "# encoder of generator", "\n", "self", ".", "en_conv1", "=", "encoderconv_2", "(", "input_nc", ",", "64", ")", "\n", "self", ".", "en_conv2", "=", "encoderconv_2", "(", "64", ",", "128", ")", "\n", "# self.en_conv3 = encoderconv_2(128, 256) # local only", "\n", "self", ".", "en_conv3", "=", "encoderconv_2", "(", "128", "+", "128", ",", "256", ")", "# global + local", "\n", "self", ".", "en_conv4", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv5", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv6", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "# self.en_conv7 = encoderconv_2(1024, 1024)", "\n", "# self.en_conv8 = encoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# decoder of generator", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "# self.de_conv2 = decoderconv_1(1024+1024, 1024)", "\n", "# self.de_conv1 = decoderconv_2(1024, 1024)", "\n", "\n", "self", ".", "de_conv1", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "# self.de_conv5 = decoderconv_2(128+128, 64) # local only", "\n", "self", ".", "de_conv5", "=", "decoderconv_2", "(", "128", "+", "256", ",", "64", ")", "# global + local", "\n", "self", ".", "de_conv6", "=", "decoderconv_2", "(", "64", "+", "64", ",", "output_nc", ")", "\n", "\n", "'''\n        self.de_conv1 = decoderconv_3(1024, 1024)\n        self.de_conv2 = decoderconv_2(1024, 512)\n        self.de_conv3 = decoderconv_2(512, 256)\n        self.de_conv4 = decoderconv_2(256, 128)\n        self.de_conv5 = decoderconv_2(128, 64)\n        self.de_conv6 = decoderconv_2(64, output_nc)\n        '''", "\n", "# bottle-neck layer", "\n", "self", ".", "dimr_conv1", "=", "dimredconv", "(", "output_nc", ",", "output_nc", ")", "\n", "# 2X downsampling model for input image", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "\n", "'''\n        self.en_conv1_g = encoderconv_2(input_nc, 64)\n        self.en_conv2_g = encoderconv_2(64, 128)\n        self.en_conv3_g = encoderconv_2(128, 256)\n        self.en_conv4_g = encoderconv_2(256, 512)\n        self.en_conv5_g = encoderconv_2(512, 1024)\n        self.res_g = ResnetBlock(1024, padding_type=padding_type, activation=activation, norm_layer=norm_layer)\n        self.de_conv1_g = decoderconv_3(1024, 512)\n        self.de_conv2_g = decoderconv_2(512+512, 256)\n        self.de_conv3_g = decoderconv_2(256+256, 128)\n        self.de_conv4_g = decoderconv_2(128+128, 64)\n        self.de_conv5_g = decoderconv_2(64+64, output_nc)\n        '''", "\n", "self", ".", "en_conv1_g", "=", "encoderconv_2", "(", "input_nc", ",", "128", ")", "\n", "self", ".", "en_conv2_g", "=", "encoderconv_2", "(", "128", ",", "256", ")", "\n", "self", ".", "en_conv3_g", "=", "encoderconv_2", "(", "256", ",", "512", ")", "\n", "self", ".", "en_conv4_g", "=", "encoderconv_2", "(", "512", ",", "1024", ")", "\n", "self", ".", "en_conv5_g", "=", "encoderconv_2", "(", "1024", ",", "1024", ")", "\n", "self", ".", "res_g", "=", "ResnetBlock", "(", "1024", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "de_conv1_g", "=", "decoderconv_3", "(", "1024", ",", "1024", ")", "\n", "self", ".", "de_conv2_g", "=", "decoderconv_2", "(", "1024", "+", "1024", ",", "512", ")", "\n", "self", ".", "de_conv3_g", "=", "decoderconv_2", "(", "512", "+", "512", ",", "256", ")", "\n", "self", ".", "de_conv4_g", "=", "decoderconv_2", "(", "256", "+", "256", ",", "128", ")", "\n", "self", ".", "de_conv5_g", "=", "decoderconv_2", "(", "128", "+", "128", ",", "output_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalUNet_old.forward": [[602, 709], ["networks_old7.GlobalUNet_old.downsample", "networks_old7.GlobalUNet_old.en_conv1_g", "networks_old7.GlobalUNet_old.en_conv2_g", "networks_old7.GlobalUNet_old.en_conv3_g", "networks_old7.GlobalUNet_old.en_conv4_g", "networks_old7.GlobalUNet_old.en_conv5_g", "networks_old7.GlobalUNet_old.res_g", "networks_old7.GlobalUNet_old.res_g", "networks_old7.GlobalUNet_old.res_g", "networks_old7.GlobalUNet_old.res_g", "networks_old7.GlobalUNet_old.de_conv1_g", "networks_old7.GlobalUNet_old.de_conv2_g", "networks_old7.GlobalUNet_old.de_conv3_g", "networks_old7.GlobalUNet_old.de_conv4_g", "networks_old7.GlobalUNet_old.de_conv5_g", "networks_old7.GlobalUNet_old.dimr_conv1", "networks_old7.GlobalUNet_old.en_conv1", "networks_old7.GlobalUNet_old.en_conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks_old7.GlobalUNet_old.en_conv3", "networks_old7.GlobalUNet_old.en_conv4", "networks_old7.GlobalUNet_old.en_conv5", "networks_old7.GlobalUNet_old.en_conv6", "networks_old7.GlobalUNet_old.res_1", "networks_old7.GlobalUNet_old.res_2", "networks_old7.GlobalUNet_old.res_2", "networks_old7.GlobalUNet_old.res_2", "networks_old7.GlobalUNet_old.de_conv1", "networks_old7.GlobalUNet_old.de_conv2", "networks_old7.GlobalUNet_old.de_conv3", "networks_old7.GlobalUNet_old.de_conv4", "networks_old7.GlobalUNet_old.de_conv5", "networks_old7.GlobalUNet_old.de_conv6", "networks_old7.GlobalUNet_old.dimr_conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_ds", "=", "self", ".", "downsample", "(", "input", ")", "\n", "# print(\"input :\", input.size())", "\n", "# print(\"input_ds :\", input_ds.size())", "\n", "\n", "\n", "# global U-Net", "\n", "e1_g", "=", "self", ".", "en_conv1_g", "(", "input_ds", ")", "\n", "e2_g", "=", "self", ".", "en_conv2_g", "(", "e1_g", ")", "\n", "e3_g", "=", "self", ".", "en_conv3_g", "(", "e2_g", ")", "\n", "e4_g", "=", "self", ".", "en_conv4_g", "(", "e3_g", ")", "\n", "e5_g", "=", "self", ".", "en_conv5_g", "(", "e4_g", ")", "\n", "\n", "res1_g", "=", "self", ".", "res_g", "(", "e5_g", ")", "\n", "res2_g", "=", "self", ".", "res_g", "(", "res1_g", ")", "\n", "res3_g", "=", "self", ".", "res_g", "(", "res2_g", ")", "\n", "res4_g", "=", "self", ".", "res_g", "(", "res3_g", ")", "\n", "# print(\"res1_g :\", res1_g.size())", "\n", "\n", "d1_g", "=", "self", ".", "de_conv1_g", "(", "res4_g", ")", "\n", "# print(\"d1_g and e4_g are :\", d1_g.size(), e4_g.size())", "\n", "d2_g", "=", "self", ".", "de_conv2_g", "(", "torch", ".", "cat", "(", "[", "d1_g", ",", "e4_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d2_g and e3_g are :\", d2_g.size(), e3_g.size())", "\n", "d3_g", "=", "self", ".", "de_conv3_g", "(", "torch", ".", "cat", "(", "[", "d2_g", ",", "e3_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d3_g and e2_g are :\", d3_g.size(), e2_g.size())", "\n", "d4_g", "=", "self", ".", "de_conv4_g", "(", "torch", ".", "cat", "(", "[", "d3_g", ",", "e2_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d4_g and e1_g are :\", d4_g.size(), e1_g.size())", "\n", "d5_g", "=", "self", ".", "de_conv5_g", "(", "torch", ".", "cat", "(", "[", "d4_g", ",", "e1_g", "]", ",", "dim", "=", "1", ")", ")", "\n", "# print(\"d5_g are :\", d5_g.size()) ", "\n", "d6_g", "=", "self", ".", "dimr_conv1", "(", "d5_g", ")", "# d6_g is a small output saliency map", "\n", "\n", "\n", "\n", "# local U-Net", "\n", "e1", "=", "self", ".", "en_conv1", "(", "input", ")", "\n", "# print(\"size of input is :\", input.size())", "\n", "# print(\"size of e1 is :\", e1.size())", "\n", "e2_local", "=", "self", ".", "en_conv2", "(", "e1", ")", "\n", "\n", "# e2 = torch.add(d4_g, e2_local) # pooling the global features into local UNet", "\n", "# e2 = d4_g + e2_local # pooling the global features into local UNet", "\n", "e2", "=", "torch", ".", "cat", "(", "[", "e2_local", ",", "d4_g", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# print(\"size of e2 is :\", e2.size())", "\n", "e3", "=", "self", ".", "en_conv3", "(", "e2", ")", "\n", "# print(\"size of e3 is :\", e3.size())", "\n", "e4", "=", "self", ".", "en_conv4", "(", "e3", ")", "\n", "# print(\"size of e4 is :\", e4.size())", "\n", "e5", "=", "self", ".", "en_conv5", "(", "e4", ")", "\n", "# print(\"size of e5 is :\", e5.size())", "\n", "e6", "=", "self", ".", "en_conv6", "(", "e5", ")", "\n", "# print(\"size of e6 is :\", e6.size())", "\n", "# e7 = self.en_conv7(e6)", "\n", "# print(\"size of e7 is :\", e7.size())", "\n", "# e8 = self.en_conv8(e7)", "\n", "# print(\"size of e8 is :\", e8.size())", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e6", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_2", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "# print(\"res1 :\", res1.size())", "\n", "# print(\"res2 :\", res2.size())", "\n", "# print(\"res3 :\", res3.size())", "\n", "# print(\"res4 :\", res4.size())", "\n", "\n", "# d1 = self.de_conv1(e6)", "\n", "d1", "=", "self", ".", "de_conv1", "(", "res4", ")", "\n", "# print(\"d1 and e5 are :\", d1.size(), e5.size())", "\n", "d2", "=", "self", ".", "de_conv2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "e5", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d2 = self.de_conv2(d1)", "\n", "# print(\"d2 and e4 are :\", d2.size(), e4.size())", "\n", "d3", "=", "self", ".", "de_conv3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "e4", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d3 = self.de_conv3(d2)", "\n", "# print(\"d3 and e3 are :\", d3.size(), e3.size())", "\n", "d4", "=", "self", ".", "de_conv4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "e3", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d4 = self.de_conv4(d3)", "\n", "#print(\"d4 and e2 are :\", d4.size(), e2.size())", "\n", "d5", "=", "self", ".", "de_conv5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "e2", "]", ",", "dim", "=", "1", ")", ")", "\n", "# d5 = self.de_conv5(d4)", "\n", "# print(\"d5 and e1 are :\", d5.size(), e1.size())", "\n", "d6", "=", "self", ".", "de_conv6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "e1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# d6 = self.de_conv6(d5)", "\n", "\n", "d7", "=", "self", ".", "dimr_conv1", "(", "d6", ")", "\n", "\n", "\n", "\n", "out", "=", "d7", "# the real final output", "\n", "# out = torch.squeeze(e1, 0)", "\n", "\n", "# out = e1", "\n", "# out = out[0:2, :, :]", "\n", "# print(\"out is :\", out, out.size())", "\n", "'''\n        out1 = d5\n        # out = out1[0:1, 0:3, :, :] # this is right\n        out = torch.mean(out1, 1) # mean across 64 channel direction\n        out = torch.unsqueeze(out, 0)\n        print(\"out1 size is :\", out1.size())\n        print(\"out size is :\", out.size())\n        print(\"d7 size is :\", d7.size())\n        '''", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalUNet.__init__": [[712, 770], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv6_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "4", ",", "padding", "=", "0", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu6_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv7_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "4", ",", "padding", "=", "0", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu7_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm7", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv8_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu8_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm8", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv9_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh9_1", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.GlobalUNet.forward": [[771, 839], ["networks_old7.GlobalUNet.conv1_1", "networks_old7.GlobalUNet.relu1_1", "networks_old7.GlobalUNet.conv1_2", "networks_old7.GlobalUNet.norm1", "networks_old7.GlobalUNet.relu1_2", "networks_old7.GlobalUNet.max1", "networks_old7.GlobalUNet.conv2_1", "networks_old7.GlobalUNet.relu2_1", "networks_old7.GlobalUNet.conv2_2", "networks_old7.GlobalUNet.norm2", "networks_old7.GlobalUNet.relu2_2", "networks_old7.GlobalUNet.max2", "networks_old7.GlobalUNet.conv3_1", "networks_old7.GlobalUNet.relu3_1", "networks_old7.GlobalUNet.conv3_2", "networks_old7.GlobalUNet.relu3_2", "networks_old7.GlobalUNet.conv3_3", "networks_old7.GlobalUNet.norm3", "networks_old7.GlobalUNet.relu3_3", "networks_old7.GlobalUNet.max3", "networks_old7.GlobalUNet.conv4_1", "networks_old7.GlobalUNet.relu4_1", "networks_old7.GlobalUNet.conv4_2", "networks_old7.GlobalUNet.relu4_2", "networks_old7.GlobalUNet.conv4_3", "networks_old7.GlobalUNet.norm4", "networks_old7.GlobalUNet.relu4_3", "networks_old7.GlobalUNet.max4", "networks_old7.GlobalUNet.conv5_1", "networks_old7.GlobalUNet.relu5_1", "networks_old7.GlobalUNet.conv5_2", "networks_old7.GlobalUNet.relu5_2", "networks_old7.GlobalUNet.conv5_3", "networks_old7.GlobalUNet.norm5", "networks_old7.GlobalUNet.relu5_3", "networks_old7.GlobalUNet.max5", "networks_old7.GlobalUNet.conv6_1", "networks_old7.GlobalUNet.norm6", "networks_old7.GlobalUNet.relu6_1", "networks_old7.GlobalUNet.conv7_1", "networks_old7.GlobalUNet.norm7", "networks_old7.GlobalUNet.relu7_1", "networks_old7.GlobalUNet.conv8_1", "networks_old7.GlobalUNet.relu8_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "e1", "=", "self", ".", "conv1_1", "(", "input", ")", "\n", "e1", "=", "self", ".", "relu1_1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "conv1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "norm1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "relu1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "max1", "(", "e1", ")", "\n", "# print(\"e1 size is :\", e1.size())", "\n", "\n", "e2", "=", "self", ".", "conv2_1", "(", "e1", ")", "\n", "e2", "=", "self", ".", "relu2_1", "(", "e2", ")", "\n", "e2", "=", "self", ".", "conv2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "norm2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "relu2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "max2", "(", "e2", ")", "\n", "# print(\"e2 size is :\", e2.size())", "\n", "\n", "e3", "=", "self", ".", "conv3_1", "(", "e2", ")", "\n", "e3", "=", "self", ".", "relu3_1", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "norm3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "max3", "(", "e3", ")", "\n", "# print(\"e3 size is :\", e3.size())", "\n", "\n", "e4", "=", "self", ".", "conv4_1", "(", "e3", ")", "\n", "e4", "=", "self", ".", "relu4_1", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "norm4", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "max4", "(", "e4", ")", "\n", "# print(\"e4 size is :\", e4.size())", "\n", "\n", "e5", "=", "self", ".", "conv5_1", "(", "e4", ")", "\n", "e5", "=", "self", ".", "relu5_1", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "norm5", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "max5", "(", "e5", ")", "\n", "# print(\"e5 size is :\", e5.size())", "\n", "\n", "d1", "=", "self", ".", "conv6_1", "(", "e5", ")", "\n", "d1", "=", "self", ".", "norm6", "(", "d1", ")", "\n", "d1", "=", "self", ".", "relu6_1", "(", "d1", ")", "\n", "# print(\"d1 size is :\", d1.size())", "\n", "\n", "d2", "=", "self", ".", "conv7_1", "(", "d1", ")", "\n", "d2", "=", "self", ".", "norm7", "(", "d2", ")", "\n", "d2", "=", "self", ".", "relu7_1", "(", "d2", ")", "\n", "# print(\"d2 size is :\", d2.size())", "\n", "\n", "d3", "=", "self", ".", "conv8_1", "(", "d2", ")", "\n", "# d3 = self.norm8(d3)", "\n", "d3", "=", "self", ".", "relu8_1", "(", "d3", ")", "\n", "# print(\"d3 size is :\", d3.size())", "\n", "\n", "# d4 = self.conv9_1(d3)", "\n", "# d4 = self.tanh9_1(d4)", "\n", "# print(\"d4 size is :\", d4.size())", "\n", "\n", "\n", "return", "d3", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.ResnetBlock.__init__": [[845, 848], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old7.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.ResnetBlock.build_conv_block": [[849, 880], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.ResnetBlock.forward": [[881, 884], ["networks_old7.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.Encoder.__init__": [[886, 906], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.Encoder.forward": [[907, 921], ["networks_old7.Encoder.model", "networks_old7.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.MultiscaleDiscriminator.__init__": [[923, 939], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old7.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.MultiscaleDiscriminator.singleD_forward": [[940, 948], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.MultiscaleDiscriminator.forward": [[949, 962], ["range", "result.append", "getattr", "networks_old7.MultiscaleDiscriminator.singleD_forward", "networks_old7.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.NLayerDiscriminator.__init__": [[965, 1004], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.NLayerDiscriminator.forward": [[1005, 1014], ["range", "networks_old7.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.Vgg19.__init__": [[1017, 1038], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old7.Vgg19.slice1.add_module", "networks_old7.Vgg19.slice2.add_module", "networks_old7.Vgg19.slice3.add_module", "networks_old7.Vgg19.slice4.add_module", "networks_old7.Vgg19.slice5.add_module", "networks_old7.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.Vgg19.forward": [[1039, 1047], ["networks_old7.Vgg19.slice1", "networks_old7.Vgg19.slice2", "networks_old7.Vgg19.slice3", "networks_old7.Vgg19.slice4", "networks_old7.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.weights_init": [[17, 24], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.get_norm_layer": [[25, 33], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.define_G": [[34, 54], ["networks_old7.get_norm_layer", "print", "GlobalUNet.apply", "networks_old7.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old7.LocalEnhancer", "networks_old7.Encoder", "networks_old7.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.define_D": [[55, 64], ["networks_old7.get_norm_layer", "networks_old7.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old7.print_network": [[65, 73], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.init_loss_filter": [[25, 32], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", "\n", "# def loss_filter(g_gan, g_gan_feat, g_vgg, d_real, d_fake, loss_cc, loss_kl):", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ":", "\n", "# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.initialize": [[33, 133], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old3.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old3.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model_old3.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old3.Pix2PixHDModel.load_network", "pix2pixHD_model_old3.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old3.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old3.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old3.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old3.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.encode_input": [[135, 171], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old3.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.discriminate": [[172, 179], ["torch.cat", "pix2pixHD_model_old3.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old3.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old3.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.forward": [[181, 255], ["pix2pixHD_model_old3.Pix2PixHDModel.encode_input", "pix2pixHD_model_old3.Pix2PixHDModel.netG.forward", "torch.nn.AvgPool2d", "pix2pixHD_model_old3.Pix2PixHDModel.downsample", "pix2pixHD_model_old3.Pix2PixHDModel.discriminate", "pix2pixHD_model_old3.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old3.Pix2PixHDModel.discriminate", "pix2pixHD_model_old3.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old3.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old3.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model_old3.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old3.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old3.Pix2PixHDModel.criterionVGG", "pix2pixHD_model_old3.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old3.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old3.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model_old3.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "# print(\"input label and fake_image size :\", real_image.size(), fake_image.size())", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=8, padding=[1, 1], count_include_pad=False)", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "4", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "input_label_small", "=", "self", ".", "downsample", "(", "input_label", ")", "\n", "# print(\"input label small size :\", input_label_small.size())", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "\n", "# Real Detection and Loss    ", "\n", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label_small", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "\n", "# GAN loss (Fake Passability Loss) ", "\n", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label_small", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "# loss_D_fake = loss_G_KL", "\n", "# loss_D_real = loss_G_KL", "\n", "# loss_G_GAN = loss_G_KL", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.inference": [[256, 279], ["pix2pixHD_model_old3.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old3.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old3.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old3.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old3.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.sample_features": [[280, 300], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old3.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.encode_features": [[301, 322], ["torch.autograd.Variable", "pix2pixHD_model_old3.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.get_edges": [[323, 333], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.save": [[334, 339], ["pix2pixHD_model_old3.Pix2PixHDModel.save_network", "pix2pixHD_model_old3.Pix2PixHDModel.save_network", "pix2pixHD_model_old3.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.update_fixed_params": [[340, 348], ["list", "torch.optim.Adam", "pix2pixHD_model_old3.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old3.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.Pix2PixHDModel.update_learning_rate": [[349, 359], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old3.InferenceModel.forward": [[361, 364], ["pix2pixHD_model_old3.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.name": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter": [[29, 36], ["zip"], "methods", ["None"], ["def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "use_cc_loss", ",", "use_kl_loss", ",", "use_nss_loss", ")", "\n", "# def loss_filter(g_gan, g_gan_feat, g_vgg, d_real, d_fake, loss_cc, loss_kl):", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ":", "\n", "# return [l for (l,f) in zip((g_gan,g_gan_feat,g_vgg,d_real,d_fake,loss_cc,loss_kl),flags) if f]", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ",", "loss_cc", ",", "loss_kl", ",", "loss_nss", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.initialize": [[37, 137], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model_old7.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "networks.CCLoss", "networks.KLLoss", "networks.NSSLoss", "pix2pixHD_model_old7.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model_old7.Pix2PixHDModel.load_network", "pix2pixHD_model_old7.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model_old7.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model_old7.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model_old7.Pix2PixHDModel.netG.parameters", "pix2pixHD_model_old7.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.init_loss_filter", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss)", "\n", "# self.loss_filter = self.init_loss_filter(not opt.no_ganFeat_loss, not opt.no_vgg_loss, not opt.no_cc_loss, not opt.no_kl_loss)", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ",", "not", "opt", ".", "no_cc_loss", ",", "not", "opt", ".", "no_kl_loss", ",", "not", "opt", ".", "no_nss_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "", "self", ".", "criterionCC", "=", "networks", ".", "CCLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionKL", "=", "networks", ".", "KLLoss", "(", "self", ".", "gpu_ids", ")", "\n", "self", ".", "criterionNSS", "=", "networks", ".", "NSSLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake')", "\n", "# self.loss_names = self.loss_filter('G_GAN','G_GAN_Feat','G_VGG','D_real', 'D_fake', 'Loss_CC', 'Loss_KL')", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ",", "'Loss_CC'", ",", "'Loss_KL'", ",", "'Loss_NSS'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input": [[139, 175], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model_old7.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "fix_pts", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# fixation points map for training", "\n", "", "if", "fix_pts", "is", "not", "None", ":", "\n", "            ", "fix_pts", "=", "Variable", "(", "fix_pts", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "# transfers a tensor from CPU to GPU", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate": [[176, 183], ["torch.cat", "pix2pixHD_model_old7.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model_old7.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old7.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.forward": [[185, 266], ["pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "pix2pixHD_model_old7.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "pix2pixHD_model_old7.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "pix2pixHD_model_old7.Pix2PixHDModel.criterionGAN", "pix2pixHD_model_old7.Pix2PixHDModel.netD.forward", "pix2pixHD_model_old7.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "input_label.mul", "input_label.mul", "pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "pix2pixHD_model_old7.Pix2PixHDModel.loss_filter", "pix2pixHD_model_old7.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model_old7.Pix2PixHDModel.criterionVGG", "pix2pixHD_model_old7.Pix2PixHDModel.criterionCC", "pix2pixHD_model_old7.Pix2PixHDModel.criterionKL", "pix2pixHD_model_old7.Pix2PixHDModel.criterionNSS", "len", "pix2pixHD_model_old7.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ",", "infer", "=", "False", ")", ":", "# add the fixation maps as input", "\n", "# Encode Inputs", "\n", "# input_label, inst_map, real_image, feat_map = self.encode_input(label, inst, image, feat) ", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "fixpts", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "# print(\"input label and fake_image size :\", real_image.size(), fake_image.size())", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=8, padding=[1, 1], count_include_pad=False)", "\n", "# self.downsample = torch.nn.AvgPool2d(3, stride=4, padding=[1, 1], count_include_pad=False)", "\n", "# input_label_small = self.downsample(input_label)", "\n", "# print(\"input label small size :\", input_label_small.size())", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "\n", "# Real Detection and Loss    ", "\n", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "\n", "# GAN loss (Fake Passability Loss) ", "\n", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "# I'm curious about what is the pred_real[i][j], should print and see; feature matching loss uses L1 loss", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "# if not self.opt.no_vgg_loss:", "\n", "#  loss_G_VGG = self.criterionVGG(fake_image, real_image) * self.opt.lambda_feat # default lambda_feat = 10", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "fake_image_vgg", "=", "input_label", ".", "mul", "(", "fake_image", ")", "# Hadamart product", "\n", "real_image_vgg", "=", "input_label", ".", "mul", "(", "real_image", ")", "# Hadamart product", "\n", "# print(\"The Hadamart product is:\", real_image_vgg.size())", "\n", "self", ".", "tensor2saveimg", "(", "real_image_vgg", ",", "\"Conditional_VGG_Real\"", ")", "\n", "self", ".", "tensor2saveimg", "(", "fake_image_vgg", ",", "\"Conditional_VGG_fake\"", ")", "\n", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image_vgg", ",", "real_image_vgg", ")", "*", "self", ".", "opt", ".", "lambda_feat", "# default lambda_feat = 10", "\n", "\n", "", "loss_G_CC", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_cc_loss", ":", "\n", "            ", "loss_G_CC", "=", "self", ".", "criterionCC", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_CC", "\n", "# loss_G_CC = self.criterionCC(real_image, real_image) * self.opt.lambda_CC", "\n", "\n", "", "loss_G_KL", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_kl_loss", ":", "\n", "            ", "loss_G_KL", "=", "self", ".", "criterionKL", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_KL", "\n", "# loss_G_KL = self.criterionKL(real_image, real_image) * self.opt.lambda_KL", "\n", "\n", "", "loss_G_NSS", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_nss_loss", ":", "\n", "            ", "loss_G_NSS", "=", "self", ".", "criterionNSS", "(", "fake_image", ",", "fix_pts", ")", "*", "self", ".", "opt", ".", "lambda_NSS", "\n", "# loss_G_NSS = self.criterionNSS(real_image, fix_pts) * self.opt.lambda_NSS", "\n", "\n", "# loss_D_fake = loss_G_KL", "\n", "# loss_D_real = loss_G_KL", "\n", "# loss_G_GAN = loss_G_KL", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "# return [ self.loss_filter( loss_G_GAN, loss_G_GAN_Feat, loss_G_VGG, loss_D_real, loss_D_fake ), None if not infer else fake_image ]", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_CC", ",", "loss_G_KL", ",", "loss_G_NSS", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference": [[267, 290], ["pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model_old7.Pix2PixHDModel.netG.forward", "pix2pixHD_model_old7.Pix2PixHDModel.netE.forward", "pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model_old7.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "# input_label, inst_map, real_image, _ = self.encode_input(Variable(label), Variable(inst), image, infer=True)", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "fix_pts", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "None", ",", "None", ",", "infer", "=", "True", ")", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.sample_features": [[291, 311], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model_old7.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.encode_features": [[312, 333], ["torch.autograd.Variable", "pix2pixHD_model_old7.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.get_edges": [[334, 344], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save": [[345, 350], ["pix2pixHD_model_old7.Pix2PixHDModel.save_network", "pix2pixHD_model_old7.Pix2PixHDModel.save_network", "pix2pixHD_model_old7.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.update_fixed_params": [[351, 359], ["list", "torch.optim.Adam", "pix2pixHD_model_old7.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model_old7.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.update_learning_rate": [[360, 370], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.tensor2saveimg": [[371, 382], ["torch.min", "torch.max", "numpy.clip.squeeze", "numpy.clip.cpu", "numpy.clip.detach().numpy", "numpy.clip", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.transpose", "numpy.clip.astype", "numpy.clip.detach"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.save"], ["", "def", "tensor2saveimg", "(", "self", ",", "input", ",", "svname", ")", ":", "# for tensor, visualization by saving as image, make sure that the input is a 4-dims tensor, and svname is a string", "\n", "        ", "min1", "=", "torch", ".", "min", "(", "input", ")", "\n", "max1", "=", "torch", ".", "max", "(", "input", ")", "\n", "input", "=", "(", "input", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "1e-8", ")", "\n", "input", "=", "input", ".", "squeeze", "(", "0", ")", "# for 4-dims input tensor", "\n", "input", "=", "input", ".", "cpu", "(", ")", "\n", "input", "=", "input", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "input", "=", "np", ".", "transpose", "(", "input", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "input", "=", "np", ".", "clip", "(", "input", ",", "0", ",", "255", ")", "\n", "input_sm", "=", "Image", ".", "fromarray", "(", "input", ".", "astype", "(", "'uint8'", ")", ")", "\n", "input_sm", ".", "save", "(", "\"/home/che-z/docker-czh/pix2pixHD/DCN_version_1/checkpointsMy/label2city_512p/web/intermediate_visulization/\"", "+", "svname", "+", "\".png\"", ",", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.InferenceModel.forward": [[384, 387], ["pix2pixHD_model_old7.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.pix2pixHD_model_old7.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.__init__": [[100, 112], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor": [[113, 130], ["networks_old10.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old10.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks_old10.GANLoss.real_label_var.numel", "input.numel", "networks_old10.GANLoss.fake_label_var.numel", "input.numel", "networks_old10.GANLoss.Tensor", "networks_old10.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.__call__": [[131, 142], ["isinstance", "networks_old10.GANLoss.get_target_tensor", "networks_old10.GANLoss.loss", "networks_old10.GANLoss.get_target_tensor", "networks_old10.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.VGGLoss.__init__": [[158, 165], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "networks_old10.Vgg19"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# self.criterion = KLLoss(gpu_ids) # KL/CC is better than L1 loss to serve as perceptual loss here", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.VGGLoss.forward": [[166, 187], ["x.view.view.float", "y.view.view.float", "x.view.view.view", "y.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "networks_old10.VGGLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x_vgg, y_vgg = self.vgg(x), self.vgg(y)", "\n", "# loss = 0", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "y", "=", "y", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "x", ")", "\n", "max1", "=", "torch", ".", "max", "(", "x", ")", "\n", "x", "=", "(", "x", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "y", ")", "\n", "max2", "=", "torch", ".", "max", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping L1 loss non-NAN", "\n", "\n", "# L1_loss =  torch.mean( torch.abs(x - y) )", "\n", "L1_loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "# for i in range(len(x_vgg)):", "\n", "#  loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        ", "\n", "return", "L1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.CCLoss.__init__": [[189, 195], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "CCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.CCLoss.forward": [[197, 247], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_gtd_std.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_gtd_mean.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# calculating the mean value of tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "# print(\"map_gtd_mean is :\", map_gtd_mean)", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "map_gtd_std", "=", "torch", ".", "std", "(", "map_gtd", ")", "# calculate the standard deviation", "\n", "map_gtd_std", "=", "map_gtd_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "map_gtd", "=", "(", "map_gtd", "-", "map_gtd_mean", ")", "/", "(", "map_gtd_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_gtd_mean", "=", "torch", ".", "mean", "(", "map_gtd", ")", "# re-calculating the mean value of normalized tensor", "\n", "map_gtd_mean", "=", "map_gtd_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "CC_1", "=", "torch", ".", "sum", "(", "(", "map_pred", "-", "map_pred_mean", ")", "*", "(", "map_gtd", "-", "map_gtd_mean", ")", ")", "\n", "CC_2", "=", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_pred", "-", "map_pred_mean", ",", "2", ")", ")", ")", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "map_gtd", "-", "map_gtd_mean", ",", "2", ")", ")", ")", "+", "self", ".", "epsilon", "\n", "CC", "=", "CC_1", "*", "CC_2", "\n", "# print(\"CC loss is :\", CC)", "\n", "CC", "=", "-", "CC", "# the bigger CC, the better", "\n", "\n", "\n", "\n", "# we put the L1 loss with CC together for avoiding building a new class", "\n", "# L1_loss =  torch.mean( torch.abs(map_pred - map_gtd) )", "\n", "# print(\"CC and L1 are :\", CC, L1_loss)", "\n", "# CC = CC + L1_loss", "\n", "\n", "return", "CC", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.KLLoss.__init__": [[250, 256], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.KLLoss.forward": [[258, 290], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are :\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_pred", "=", "map_pred", "/", "(", "torch", ".", "sum", "(", "map_pred", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_pred sum to 1", "\n", "map_gtd", "=", "map_gtd", "/", "(", "torch", ".", "sum", "(", "map_gtd", ")", "+", "self", ".", "epsilon", ")", "# normalization step to make sure that the map_gtd sum to 1", "\n", "# print(\"map_pred is :\", map_pred)", "\n", "# print(\"map_gtd is :\", map_gtd)", "\n", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "map_gtd", "/", "(", "map_pred", "+", "self", ".", "epsilon", ")", "+", "self", ".", "epsilon", ")", "\n", "# print(\"KL 1 is :\", KL)", "\n", "KL", "=", "map_gtd", "*", "KL", "\n", "# print(\"KL 2 is :\", KL)", "\n", "KL", "=", "torch", ".", "sum", "(", "KL", ")", "\n", "# print(\"KL 3 is :\", KL)", "\n", "# print(\"KL loss is :\", KL)", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.NSSLoss.__init__": [[292, 298], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "NSSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.vgg = Vgg19().cuda()", "\n", "# self.criterion = nn.L1Loss()", "\n", "# self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0] ", "\n", "self", ".", "epsilon", "=", "1e-8", "# the parameter to make sure the denominator non-zero", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.NSSLoss.forward": [[300, 362], ["map_pred.view.view.float", "map_gtd.view.view.float", "map_pred.view.view.view", "map_gtd.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "map_pred_mean.item.item.item", "torch.std", "torch.std", "torch.std", "torch.std", "map_pred_std.item.item.item", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_pred", ",", "map_gtd", ")", ":", "# map_pred : input prediction saliency map, map_gtd : input ground truth density map", "\n", "        ", "map_pred", "=", "map_pred", ".", "float", "(", ")", "\n", "map_gtd", "=", "map_gtd", ".", "float", "(", ")", "\n", "\n", "map_pred", "=", "map_pred", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "map_gtd", "=", "map_gtd", ".", "view", "(", "1", ",", "-", "1", ")", "# change the map_pred into a tensor with n rows and 1 cols", "\n", "\n", "min1", "=", "torch", ".", "min", "(", "map_pred", ")", "\n", "max1", "=", "torch", ".", "max", "(", "map_pred", ")", "\n", "# print(\"min1 and max1 are (saliecny map):\", min1, max1)", "\n", "map_pred", "=", "(", "map_pred", "-", "min1", ")", "/", "(", "max1", "-", "min1", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "min2", "=", "torch", ".", "min", "(", "map_gtd", ")", "\n", "max2", "=", "torch", ".", "max", "(", "map_gtd", ")", "\n", "# print(\"min2 and max2 are (fixation points) :\", min2, max2)", "\n", "map_gtd", "=", "(", "map_gtd", "-", "min2", ")", "/", "(", "max2", "-", "min2", "+", "self", ".", "epsilon", ")", "# min-max normalization for keeping KL loss non-NAN", "\n", "\n", "map_gtd_id_1", "=", "torch", ".", "gt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_0", "=", "torch", ".", "lt", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd_id_00", "=", "torch", ".", "eq", "(", "map_gtd", ",", "0.5", ")", "\n", "map_gtd", "[", "map_gtd_id_1", "]", "=", "1.0", "\n", "map_gtd", "[", "map_gtd_id_0", "]", "=", "0.0", "\n", "map_gtd", "[", "map_gtd_id_00", "]", "=", "0.0", "\n", "\n", "map_pred_mean", "=", "torch", ".", "mean", "(", "map_pred", ")", "# calculating the mean value of tensor", "\n", "map_pred_mean", "=", "map_pred_mean", ".", "item", "(", ")", "# change the tensor into a number", "\n", "\n", "map_pred_std", "=", "torch", ".", "std", "(", "map_pred", ")", "# calculate the standard deviation", "\n", "map_pred_std", "=", "map_pred_std", ".", "item", "(", ")", "# change the tensor into a number ", "\n", "\n", "map_pred", "=", "(", "map_pred", "-", "map_pred_mean", ")", "/", "(", "map_pred_std", "+", "self", ".", "epsilon", ")", "# normalization", "\n", "\n", "NSS", "=", "map_pred", "*", "map_gtd", "\n", "# print(\"early NSS is :\", NSS)", "\n", "'''\n        dim_NSS = NSS.size()\n        print(\"dim_NSS is :\", dim_NSS)\n        dim_NSS = dim_NSS[1]\n        sum_nss = 0\n        dim_sum = 0\n        \n        for idxnss in range(0, dim_NSS):\n            if (NSS[0, idxnss] > 0.05): # # should not be 0, because there are a lot of 0.00XXX in map1_NSS due to float format\n                sum_nss += NSS[0, idxnss]\n                dim_sum += 1\n        \n        NSS = sum_nss / dim_sum\n        '''", "\n", "# NSS = NSS # should not add anythin, because there are a lot of 0.00XXX in map1_NSS due to float format", "\n", "# id = torch.nonzero(NSS)", "\n", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "0.1", ")", "# find out the id of NSS > 0.1", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# print(bignss)", "\n", "if", "(", "len", "(", "bignss", ")", "==", "0", ")", ":", "# NSS[id] is empty ", "\n", "            ", "id", "=", "torch", ".", "gt", "(", "NSS", ",", "-", "0.00000001", ")", "# decrease the threshold, because must set it as tensor not inter", "\n", "bignss", "=", "NSS", "[", "id", "]", "\n", "# NSS = torch.sum(NSS[id])", "\n", "# NSS = torch.mean(NSS)", "\n", "", "NSS", "=", "torch", ".", "mean", "(", "bignss", ")", "\n", "\n", "NSS", "=", "-", "NSS", "# the bigger NSS the better", "\n", "return", "NSS", "\n", "# return 0 # if return, error : TypeError: mean(): argument 'input' (position 1) must be Tensor, not float", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.LocalEnhancer.__init__": [[368, 410], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old10.GlobalGenerator", "range", "setattr", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks_old10.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "model_downsample_2", "=", "[", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_3'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample_2", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.LocalEnhancer.forward": [[411, 434], ["range", "networks_old10.LocalEnhancer.model", "print", "range", "input_downsampled.append", "getattr.size", "getattr", "getattr", "getattr", "getattr.", "print", "networks_old10.LocalEnhancer.downsample", "getattr.size", "getattr.", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "# Here, the 1st output_prev is the output feature map of the global generator ", "\n", "print", "(", "\"output_prev_global :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "# This code is motivated to design a multi-local-generator architecture, ", "\n", "# although the original paper only use one local generator", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "model_downsample_2", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_3'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "# the encoder part of local generator, concat with the final output of global generator, ", "\n", "# then get into the decoder of the local generator, Notice that it's a direct \"add\" operation, not concat", "\n", "print", "(", "\"output_prev_local :\"", ",", "output_prev", ".", "size", "(", ")", ")", "\n", "# output_prev = model_downsample_2(output_prev) # this is my operation, in order to make sure that the resolution of final output saliency map is the same as input image", "\n", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GlobalGenerator.__init__": [[436, 461], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks_old10.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GlobalGenerator.forward": [[462, 466], ["networks_old10.GlobalGenerator.model", "print", "networks_old10.GlobalGenerator.model", "networks_old10.GlobalGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outglobal", "=", "self", ".", "model", "(", "input", ")", "\n", "print", "(", "\"output_prev_global XXXXXXXXXXXXXXXXXXXXXXX:\"", ",", "outglobal", ".", "size", "(", ")", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.encoderconv_1.__init__": [[468, 477], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.Conv2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=2),", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.encoderconv_1.forward": [[478, 480], ["networks_old10.encoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.encoderconv_2.__init__": [[482, 490], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "encoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.encoderconv_2.forward": [[491, 493], ["networks_old10.encoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_1.__init__": [[495, 505], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(in_ch, ou_ch, kernel_size=4, stride=1, padding=1, output_padding=0), ", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_1.forward": [[506, 508], ["networks_old10.decoderconv_1.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_2.__init__": [[510, 519], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_2.forward": [[520, 522], ["networks_old10.decoderconv_2.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_3.__init__": [[524, 533], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "decoderconv_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "# nn.BatchNorm2d(ou_ch),", "\n", "norm_layer", "(", "ou_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.decoderconv_3.forward": [[534, 536], ["networks_old10.decoderconv_3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.dimredconv.__init__": [[538, 545], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "ou_ch", ")", ":", "\n", "        ", "super", "(", "dimredconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "ou_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# output_shape = (image_shape-filter_shape+2*padding)/stride + 1, image_shape is odd number", "\n", "# nn.BatchNorm2d(ou_nc),", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.dimredconv.forward": [[546, 548], ["networks_old10.dimredconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GlobalUNet.__init__": [[551, 787], ["torch.Module.__init__", "functools.partial", "torch.ReLU", "torch.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "networks_old10.ResnetBlock", "networks_old10.ResnetBlock", "networks_old10.ResnetBlock", "networks_old10.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "networks_old10.ResnetBlock", "networks_old10.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack().cuda", "torch.Conv2d", "torch.Conv2d", "networks_old10.SELayer", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack", "DCN_lib.modules.modulated_dcn.ModulatedDeformConvPack"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "GlobalUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "# for resblock", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "# for resblock", "\n", "padding_type", "=", "'reflect'", "# for resblock", "\n", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_3", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_4", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "conv6_1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu6_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "self", ".", "conv1_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1_h", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max1_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv2_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max2_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv3_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3_h", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max3_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm4_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu4_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max4_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5_1_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3_h", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm5_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu5_3_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "max5_h", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "res_1", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "res_2", "=", "ResnetBlock", "(", "512", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "conv6_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", "+", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "# self.conv6_1_h = nn.ConvTranspose2d(in_channels=512, out_channels=512, kernel_size=3, stride=2, padding=1, output_padding=1)", "\n", "self", ".", "relu6_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm6_h", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv7_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu7_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm7_h", "=", "nn", ".", "InstanceNorm2d", "(", "128", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv8_1_h", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "relu8_1_h", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "norm8_h", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "conv9_1_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh9_1_h", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "'''\n        self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()\n        # self.dcn_2 = ModulatedDeformConvPack(256, 512, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()\n        '''", "\n", "\n", "# self.dcn_1 = ModulatedDeformConvPack(512, 256, kernel_size=(3,3), stride=1, padding=1, deformable_groups=2, no_bias=True).cuda()", "\n", "# self.dcn_2 = ModulatedDeformConvPack(512, 256, kernel_size=(5,5), stride=1, padding=2, deformable_groups=2, no_bias=True).cuda()", "\n", "\n", "self", ".", "onemulone_ird_1_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_1_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_1_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_1", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_1_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_1", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_2_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_2_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_2_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_2", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_2_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_2", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_3_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_3_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_3_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_3", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_3_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_3", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_4_A", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_B", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_4_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_4_C", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_4", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_4_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_4", "=", "nn", ".", "InstanceNorm2d", "(", "256", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_5_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_5_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_5_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_5", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_5_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_5", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_5", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_6_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_6_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_6_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_6", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_6_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_6", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_6", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_7_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_7_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_7_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_7", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_7_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_7", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_7", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_8_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_8_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_8_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_8", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_8_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_8", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_8", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_9_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_9_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_9_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_9", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_9_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_9", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_9", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "onemulone_ird_10_A", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_B", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_B", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "# 1X1 conv, keep the resolution of feature map unchanged, but reduce the channel", "\n", "self", ".", "dcn_ird_10_C", "=", "ModulatedDeformConvPack", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "onemulone_ird_10_C", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "se_10", "=", "SELayer", "(", "384", ",", "reduction", "=", "8", ")", "\n", "self", ".", "onemulone_ird_10_D", "=", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm_ird_10", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu_ird_10", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.GlobalUNet.forward": [[795, 1126], ["networks_old10.GlobalUNet.downsample", "networks_old10.GlobalUNet.conv1_1", "networks_old10.GlobalUNet.relu1_1", "networks_old10.GlobalUNet.conv1_2", "networks_old10.GlobalUNet.norm1", "networks_old10.GlobalUNet.relu1_2", "networks_old10.GlobalUNet.max1", "print", "networks_old10.GlobalUNet.conv2_1", "networks_old10.GlobalUNet.relu2_1", "networks_old10.GlobalUNet.conv2_2", "networks_old10.GlobalUNet.norm2", "networks_old10.GlobalUNet.relu2_2", "networks_old10.GlobalUNet.max2", "print", "networks_old10.GlobalUNet.conv3_1", "networks_old10.GlobalUNet.relu3_1", "networks_old10.GlobalUNet.conv3_2", "networks_old10.GlobalUNet.relu3_2", "networks_old10.GlobalUNet.conv3_3", "networks_old10.GlobalUNet.norm3", "networks_old10.GlobalUNet.relu3_3", "networks_old10.GlobalUNet.max3", "print", "networks_old10.GlobalUNet.conv4_1", "networks_old10.GlobalUNet.relu4_1", "networks_old10.GlobalUNet.conv4_2", "networks_old10.GlobalUNet.relu4_2", "networks_old10.GlobalUNet.conv4_3", "networks_old10.GlobalUNet.norm4", "networks_old10.GlobalUNet.relu4_3", "networks_old10.GlobalUNet.max4", "print", "networks_old10.GlobalUNet.conv5_1", "networks_old10.GlobalUNet.relu5_1", "networks_old10.GlobalUNet.conv5_2", "networks_old10.GlobalUNet.relu5_2", "networks_old10.GlobalUNet.conv5_3", "networks_old10.GlobalUNet.norm5", "networks_old10.GlobalUNet.relu5_3", "networks_old10.GlobalUNet.max5", "print", "networks_old10.GlobalUNet.res_1", "networks_old10.GlobalUNet.res_2", "networks_old10.GlobalUNet.res_1", "networks_old10.GlobalUNet.res_2", "networks_old10.GlobalUNet.conv6_1", "networks_old10.GlobalUNet.norm6", "networks_old10.GlobalUNet.relu6_1", "print", "networks_old10.GlobalUNet.conv1_1_h", "networks_old10.GlobalUNet.norm1_h", "networks_old10.GlobalUNet.relu1_2_h", "networks_old10.GlobalUNet.max1_h", "print", "networks_old10.GlobalUNet.conv2_1_h", "networks_old10.GlobalUNet.norm2_h", "networks_old10.GlobalUNet.relu2_2_h", "networks_old10.GlobalUNet.max2_h", "print", "networks_old10.GlobalUNet.conv3_1_h", "networks_old10.GlobalUNet.norm3_h", "networks_old10.GlobalUNet.relu3_3_h", "networks_old10.GlobalUNet.max3_h", "print", "networks_old10.GlobalUNet.onemulone_ird_1_A", "networks_old10.GlobalUNet.onemulone_ird_1_B", "networks_old10.GlobalUNet.dcn_ird_1_B", "networks_old10.GlobalUNet.onemulone_ird_1_C", "networks_old10.GlobalUNet.dcn_ird_1_C", "networks_old10.GlobalUNet.dcn_ird_1_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_1", "print", "networks_old10.GlobalUNet.onemulone_ird_1_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_2_A", "networks_old10.GlobalUNet.onemulone_ird_2_B", "networks_old10.GlobalUNet.dcn_ird_2_B", "networks_old10.GlobalUNet.onemulone_ird_2_C", "networks_old10.GlobalUNet.dcn_ird_2_C", "networks_old10.GlobalUNet.dcn_ird_2_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_2", "print", "networks_old10.GlobalUNet.onemulone_ird_2_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_3_A", "networks_old10.GlobalUNet.onemulone_ird_3_B", "networks_old10.GlobalUNet.dcn_ird_3_B", "networks_old10.GlobalUNet.onemulone_ird_3_C", "networks_old10.GlobalUNet.dcn_ird_3_C", "networks_old10.GlobalUNet.dcn_ird_3_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_3", "print", "networks_old10.GlobalUNet.onemulone_ird_3_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_4_A", "networks_old10.GlobalUNet.onemulone_ird_4_B", "networks_old10.GlobalUNet.dcn_ird_4_B", "networks_old10.GlobalUNet.onemulone_ird_4_C", "networks_old10.GlobalUNet.dcn_ird_4_C", "networks_old10.GlobalUNet.dcn_ird_4_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_4", "print", "networks_old10.GlobalUNet.onemulone_ird_4_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.conv4_1_h", "networks_old10.GlobalUNet.norm4_h", "networks_old10.GlobalUNet.relu4_3_h", "networks_old10.GlobalUNet.max4_h", "print", "networks_old10.GlobalUNet.onemulone_ird_5_A", "networks_old10.GlobalUNet.onemulone_ird_5_B", "networks_old10.GlobalUNet.dcn_ird_5_B", "networks_old10.GlobalUNet.onemulone_ird_5_C", "networks_old10.GlobalUNet.dcn_ird_5_C", "networks_old10.GlobalUNet.dcn_ird_5_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_5", "print", "networks_old10.GlobalUNet.onemulone_ird_5_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_6_A", "networks_old10.GlobalUNet.onemulone_ird_6_B", "networks_old10.GlobalUNet.dcn_ird_6_B", "networks_old10.GlobalUNet.onemulone_ird_6_C", "networks_old10.GlobalUNet.dcn_ird_6_C", "networks_old10.GlobalUNet.dcn_ird_6_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_6", "print", "networks_old10.GlobalUNet.onemulone_ird_6_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_7_A", "networks_old10.GlobalUNet.onemulone_ird_7_B", "networks_old10.GlobalUNet.dcn_ird_7_B", "networks_old10.GlobalUNet.onemulone_ird_7_C", "networks_old10.GlobalUNet.dcn_ird_7_C", "networks_old10.GlobalUNet.dcn_ird_7_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_7", "print", "networks_old10.GlobalUNet.onemulone_ird_7_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.onemulone_ird_8_A", "networks_old10.GlobalUNet.onemulone_ird_8_B", "networks_old10.GlobalUNet.dcn_ird_8_B", "networks_old10.GlobalUNet.onemulone_ird_8_C", "networks_old10.GlobalUNet.dcn_ird_8_C", "networks_old10.GlobalUNet.dcn_ird_8_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "networks_old10.GlobalUNet.se_8", "print", "networks_old10.GlobalUNet.onemulone_ird_8_D", "print", "networks_old10.GlobalUNet.relu", "networks_old10.GlobalUNet.conv5_1_h", "networks_old10.GlobalUNet.norm5_h", "networks_old10.GlobalUNet.relu5_3_h", "networks_old10.GlobalUNet.max5_h", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks_old10.GlobalUNet.conv6_1_h", "networks_old10.GlobalUNet.norm6_h", "networks_old10.GlobalUNet.relu6_1_h", "print", "networks_old10.GlobalUNet.conv7_1_h", "networks_old10.GlobalUNet.relu7_1_h", "print", "networks_old10.GlobalUNet.conv8_1_h", "networks_old10.GlobalUNet.relu8_1_h", "print", "networks_old10.GlobalUNet.conv9_1_h", "networks_old10.GlobalUNet.tanh9_1_h", "print", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "torch.cat.size", "torch.cat.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size", "networks_old10.GlobalUNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "input_small", "=", "self", ".", "downsample", "(", "input", ")", "\n", "\n", "e1", "=", "self", ".", "conv1_1", "(", "input_small", ")", "\n", "e1", "=", "self", ".", "relu1_1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "conv1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "norm1", "(", "e1", ")", "\n", "e1", "=", "self", ".", "relu1_2", "(", "e1", ")", "\n", "e1", "=", "self", ".", "max1", "(", "e1", ")", "\n", "print", "(", "\"e1 size is :\"", ",", "e1", ".", "size", "(", ")", ")", "\n", "\n", "e2", "=", "self", ".", "conv2_1", "(", "e1", ")", "\n", "e2", "=", "self", ".", "relu2_1", "(", "e2", ")", "\n", "e2", "=", "self", ".", "conv2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "norm2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "relu2_2", "(", "e2", ")", "\n", "e2", "=", "self", ".", "max2", "(", "e2", ")", "\n", "print", "(", "\"e2 size is :\"", ",", "e2", ".", "size", "(", ")", ")", "\n", "\n", "e3", "=", "self", ".", "conv3_1", "(", "e2", ")", "\n", "e3", "=", "self", ".", "relu3_1", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_2", "(", "e3", ")", "\n", "e3", "=", "self", ".", "conv3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "norm3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "relu3_3", "(", "e3", ")", "\n", "e3", "=", "self", ".", "max3", "(", "e3", ")", "\n", "print", "(", "\"e3 size is :\"", ",", "e3", ".", "size", "(", ")", ")", "\n", "\n", "e4", "=", "self", ".", "conv4_1", "(", "e3", ")", "\n", "e4", "=", "self", ".", "relu4_1", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_2", "(", "e4", ")", "\n", "e4", "=", "self", ".", "conv4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "norm4", "(", "e4", ")", "\n", "e4", "=", "self", ".", "relu4_3", "(", "e4", ")", "\n", "e4", "=", "self", ".", "max4", "(", "e4", ")", "\n", "print", "(", "\"e4 size is :\"", ",", "e4", ".", "size", "(", ")", ")", "\n", "\n", "e5", "=", "self", ".", "conv5_1", "(", "e4", ")", "\n", "e5", "=", "self", ".", "relu5_1", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_2", "(", "e5", ")", "\n", "e5", "=", "self", ".", "conv5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "norm5", "(", "e5", ")", "\n", "e5", "=", "self", ".", "relu5_3", "(", "e5", ")", "\n", "e5", "=", "self", ".", "max5", "(", "e5", ")", "\n", "print", "(", "\"e5 size is :\"", ",", "e5", ".", "size", "(", ")", ")", "\n", "\n", "res1", "=", "self", ".", "res_1", "(", "e5", ")", "\n", "res2", "=", "self", ".", "res_2", "(", "res1", ")", "\n", "res3", "=", "self", ".", "res_1", "(", "res2", ")", "\n", "res4", "=", "self", ".", "res_2", "(", "res3", ")", "\n", "\n", "e5_upsp", "=", "self", ".", "conv6_1", "(", "res4", ")", "\n", "e5_upsp", "=", "self", ".", "norm6", "(", "e5_upsp", ")", "\n", "e5_upsp", "=", "self", ".", "relu6_1", "(", "e5_upsp", ")", "\n", "# e5_upsp = self.upsp(e5)", "\n", "print", "(", "\"e5_upsp size is :\"", ",", "e5_upsp", ".", "size", "(", ")", ")", "\n", "\n", "\n", "\n", "\n", "e1_h", "=", "self", ".", "conv1_1_h", "(", "input", ")", "\n", "# e1_h = self.relu1_1_h(e1_h)", "\n", "# e1_h = self.conv1_2_h(e1_h)", "\n", "e1_h", "=", "self", ".", "norm1_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "relu1_2_h", "(", "e1_h", ")", "\n", "e1_h", "=", "self", ".", "max1_h", "(", "e1_h", ")", "\n", "print", "(", "\"e1_h size is :\"", ",", "e1_h", ".", "size", "(", ")", ")", "\n", "\n", "e2_h", "=", "self", ".", "conv2_1_h", "(", "e1_h", ")", "\n", "# e2_h = self.relu2_1_h(e2_h)", "\n", "# e2_h = self.conv2_2_h(e2_h)", "\n", "e2_h", "=", "self", ".", "norm2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "relu2_2_h", "(", "e2_h", ")", "\n", "e2_h", "=", "self", ".", "max2_h", "(", "e2_h", ")", "\n", "print", "(", "\"e2_h size is :\"", ",", "e2_h", ".", "size", "(", ")", ")", "\n", "\n", "e3_h", "=", "self", ".", "conv3_1_h", "(", "e2_h", ")", "\n", "# e3_h = self.relu3_1_h(e3_h)", "\n", "# e3_h = self.conv3_2_h(e3_h)", "\n", "# e3_h = self.relu3_2_h(e3_h)", "\n", "# e3_h = self.conv3_3_h(e3_h)", "\n", "e3_h", "=", "self", ".", "norm3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "relu3_3_h", "(", "e3_h", ")", "\n", "e3_h", "=", "self", ".", "max3_h", "(", "e3_h", ")", "\n", "print", "(", "\"e3_h size is :\"", ",", "e3_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_1_A", "=", "self", ".", "onemulone_ird_1_A", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "onemulone_ird_1_B", "(", "e3_h", ")", "\n", "ird_1_B", "=", "self", ".", "dcn_ird_1_B", "(", "ird_1_B", ")", "\n", "ird_1_C", "=", "self", ".", "onemulone_ird_1_C", "(", "e3_h", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_C", "=", "self", ".", "dcn_ird_1_C", "(", "ird_1_C", ")", "\n", "ird_1_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_1_A", ",", "ird_1_B", ",", "ird_1_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_1_concat_ori is:\"", ",", "ird_1_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_1_concat_se", "=", "self", ".", "se_1", "(", "ird_1_concat_ori", ")", "\n", "print", "(", "\"size ofird_1_concat_se is:\"", ",", "ird_1_concat_se", ".", "size", "(", ")", ")", "\n", "ird_1_concat_residual", "=", "self", ".", "onemulone_ird_1_D", "(", "ird_1_concat_se", ")", "\n", "# ird_1_concat_residual = self.norm_ird_1(ird_1_concat_residual)", "\n", "# ird_1_concat_residual = self.relu_ird_1(ird_1_concat_residual)", "\n", "ird_1", "=", "e3_h", "+", "ird_1_concat_residual", "\n", "print", "(", "\"ird_1 size is:\"", ",", "ird_1", ".", "size", "(", ")", ")", "\n", "ird_1", "=", "self", ".", "relu", "(", "ird_1", ")", "\n", "\n", "# ird_1_concat = self.GovalAvgPooling(ird_1_concat)", "\n", "# ird_1_concat = torch.mean(ird_1_concat_ori.view(ird_1_concat_ori.size(0), ird_1_concat_ori.size(1), -1), dim=2) # Global pooling", "\n", "# print(\"size of global pooling is:\", ird_1_concat.size())", "\n", "# ird_1_concat = self.relu_ird_1_1(self.fc_ird_1_1(ird_1_concat))", "\n", "# ird_1_concat = self.sigmoid_ird_1_2(self.fc_ird_1_2(ird_1_concat))", "\n", "# print(\"size of SEmodule tensor is:\", ird_1_concat, ird_1_concat.size())", "\n", "\n", "ird_2_A", "=", "self", ".", "onemulone_ird_2_A", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "onemulone_ird_2_B", "(", "ird_1", ")", "\n", "ird_2_B", "=", "self", ".", "dcn_ird_2_B", "(", "ird_2_B", ")", "\n", "ird_2_C", "=", "self", ".", "onemulone_ird_2_C", "(", "ird_1", ")", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_2_C", "=", "self", ".", "dcn_ird_2_C", "(", "ird_2_C", ")", "\n", "ird_2_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_2_A", ",", "ird_2_B", ",", "ird_2_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_2_concat_ori is:\"", ",", "ird_2_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_2_concat_se", "=", "self", ".", "se_2", "(", "ird_2_concat_ori", ")", "\n", "print", "(", "\"size ofird_2_concat_se is:\"", ",", "ird_2_concat_se", ".", "size", "(", ")", ")", "\n", "ird_2_concat_residual", "=", "self", ".", "onemulone_ird_2_D", "(", "ird_2_concat_se", ")", "\n", "# ird_2_concat_residual = self.norm_ird_2(ird_2_concat_residual)", "\n", "# ird_2_concat_residual = self.relu_ird_2(ird_2_concat_residual)", "\n", "ird_2", "=", "ird_1", "+", "ird_2_concat_residual", "\n", "print", "(", "\"ird_2 size is:\"", ",", "ird_2", ".", "size", "(", ")", ")", "\n", "ird_2", "=", "self", ".", "relu", "(", "ird_2", ")", "\n", "\n", "ird_3_A", "=", "self", ".", "onemulone_ird_3_A", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "onemulone_ird_3_B", "(", "ird_2", ")", "\n", "ird_3_B", "=", "self", ".", "dcn_ird_3_B", "(", "ird_3_B", ")", "\n", "ird_3_C", "=", "self", ".", "onemulone_ird_3_C", "(", "ird_2", ")", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_3_C", "=", "self", ".", "dcn_ird_3_C", "(", "ird_3_C", ")", "\n", "ird_3_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_3_A", ",", "ird_3_B", ",", "ird_3_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_3_concat_ori is:\"", ",", "ird_3_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_3_concat_se", "=", "self", ".", "se_3", "(", "ird_3_concat_ori", ")", "\n", "print", "(", "\"size ofird_3_concat_se is:\"", ",", "ird_3_concat_se", ".", "size", "(", ")", ")", "\n", "ird_3_concat_residual", "=", "self", ".", "onemulone_ird_3_D", "(", "ird_3_concat_se", ")", "\n", "# ird_3_concat_residual = self.norm_ird_3(ird_3_concat_residual)", "\n", "# ird_3_concat_residual = self.relu_ird_3(ird_3_concat_residual)", "\n", "ird_3", "=", "ird_2", "+", "ird_3_concat_residual", "\n", "print", "(", "\"ird_3 size is:\"", ",", "ird_3", ".", "size", "(", ")", ")", "\n", "ird_3", "=", "self", ".", "relu", "(", "ird_3", ")", "\n", "\n", "ird_4_A", "=", "self", ".", "onemulone_ird_4_A", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "onemulone_ird_4_B", "(", "ird_3", ")", "\n", "ird_4_B", "=", "self", ".", "dcn_ird_4_B", "(", "ird_4_B", ")", "\n", "ird_4_C", "=", "self", ".", "onemulone_ird_4_C", "(", "ird_3", ")", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_4_C", "=", "self", ".", "dcn_ird_4_C", "(", "ird_4_C", ")", "\n", "ird_4_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_4_A", ",", "ird_4_B", ",", "ird_4_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_4_concat_ori is:\"", ",", "ird_4_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_4_concat_se", "=", "self", ".", "se_4", "(", "ird_4_concat_ori", ")", "\n", "print", "(", "\"size ofird_4_concat_se is:\"", ",", "ird_4_concat_se", ".", "size", "(", ")", ")", "\n", "ird_4_concat_residual", "=", "self", ".", "onemulone_ird_4_D", "(", "ird_4_concat_se", ")", "\n", "# ird_4_concat_residual = self.norm_ird_4(ird_4_concat_residual)", "\n", "# ird_4_concat_residual = self.relu_ird_4(ird_4_concat_residual)", "\n", "ird_4", "=", "ird_3", "+", "ird_4_concat_residual", "\n", "print", "(", "\"ird_4 size is:\"", ",", "ird_4", ".", "size", "(", ")", ")", "\n", "ird_4", "=", "self", ".", "relu", "(", "ird_4", ")", "\n", "\n", "e4_h", "=", "self", ".", "conv4_1_h", "(", "ird_4", ")", "\n", "# e4_h = self.relu4_1_h(e4_h)", "\n", "# e4_h = self.conv4_2_h(e4_h)", "\n", "# e4_h = self.relu4_2_h(e4_h)", "\n", "# e4_h = self.conv4_3_h(e4_h)", "\n", "e4_h", "=", "self", ".", "norm4_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "relu4_3_h", "(", "e4_h", ")", "\n", "e4_h", "=", "self", ".", "max4_h", "(", "e4_h", ")", "\n", "print", "(", "\"e4_h size is :\"", ",", "e4_h", ".", "size", "(", ")", ")", "\n", "\n", "ird_5_A", "=", "self", ".", "onemulone_ird_5_A", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "onemulone_ird_5_B", "(", "e4_h", ")", "\n", "ird_5_B", "=", "self", ".", "dcn_ird_5_B", "(", "ird_5_B", ")", "\n", "ird_5_C", "=", "self", ".", "onemulone_ird_5_C", "(", "e4_h", ")", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_5_C", "=", "self", ".", "dcn_ird_5_C", "(", "ird_5_C", ")", "\n", "ird_5_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_5_A", ",", "ird_5_B", ",", "ird_5_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_5_concat_ori is:\"", ",", "ird_5_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_5_concat_se", "=", "self", ".", "se_5", "(", "ird_5_concat_ori", ")", "\n", "print", "(", "\"size ofird_5_concat_se is:\"", ",", "ird_5_concat_se", ".", "size", "(", ")", ")", "\n", "ird_5_concat_residual", "=", "self", ".", "onemulone_ird_5_D", "(", "ird_5_concat_se", ")", "\n", "# ird_5_concat_residual = self.norm_ird_5(ird_5_concat_residual)", "\n", "# ird_5_concat_residual = self.relu_ird_5(ird_5_concat_residual)", "\n", "ird_5", "=", "e4_h", "+", "ird_5_concat_residual", "\n", "print", "(", "\"ird_5 size is:\"", ",", "ird_5", ".", "size", "(", ")", ")", "\n", "ird_5", "=", "self", ".", "relu", "(", "ird_5", ")", "\n", "\n", "ird_6_A", "=", "self", ".", "onemulone_ird_6_A", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "onemulone_ird_6_B", "(", "ird_5", ")", "\n", "ird_6_B", "=", "self", ".", "dcn_ird_6_B", "(", "ird_6_B", ")", "\n", "ird_6_C", "=", "self", ".", "onemulone_ird_6_C", "(", "ird_5", ")", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_6_C", "=", "self", ".", "dcn_ird_6_C", "(", "ird_6_C", ")", "\n", "ird_6_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_6_A", ",", "ird_6_B", ",", "ird_6_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_6_concat_ori is:\"", ",", "ird_6_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_6_concat_se", "=", "self", ".", "se_6", "(", "ird_6_concat_ori", ")", "\n", "print", "(", "\"size ofird_6_concat_se is:\"", ",", "ird_6_concat_se", ".", "size", "(", ")", ")", "\n", "ird_6_concat_residual", "=", "self", ".", "onemulone_ird_6_D", "(", "ird_6_concat_se", ")", "\n", "# ird_6_concat_residual = self.norm_ird_6(ird_6_concat_residual)", "\n", "# ird_6_concat_residual = self.relu_ird_6(ird_6_concat_residual)", "\n", "ird_6", "=", "ird_5", "+", "ird_6_concat_residual", "\n", "print", "(", "\"ird_6 size is:\"", ",", "ird_6", ".", "size", "(", ")", ")", "\n", "ird_6", "=", "self", ".", "relu", "(", "ird_6", ")", "\n", "\n", "ird_7_A", "=", "self", ".", "onemulone_ird_7_A", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "onemulone_ird_7_B", "(", "ird_6", ")", "\n", "ird_7_B", "=", "self", ".", "dcn_ird_7_B", "(", "ird_7_B", ")", "\n", "ird_7_C", "=", "self", ".", "onemulone_ird_7_C", "(", "ird_6", ")", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_7_C", "=", "self", ".", "dcn_ird_7_C", "(", "ird_7_C", ")", "\n", "ird_7_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_7_A", ",", "ird_7_B", ",", "ird_7_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_7_concat_ori is:\"", ",", "ird_7_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_7_concat_se", "=", "self", ".", "se_7", "(", "ird_7_concat_ori", ")", "\n", "print", "(", "\"size ofird_7_concat_se is:\"", ",", "ird_7_concat_se", ".", "size", "(", ")", ")", "\n", "ird_7_concat_residual", "=", "self", ".", "onemulone_ird_7_D", "(", "ird_7_concat_se", ")", "\n", "# ird_7_concat_residual = self.norm_ird_7(ird_7_concat_residual)", "\n", "# ird_7_concat_residual = self.relu_ird_7(ird_7_concat_residual)", "\n", "ird_7", "=", "ird_6", "+", "ird_7_concat_residual", "\n", "print", "(", "\"ird_7 size is:\"", ",", "ird_7", ".", "size", "(", ")", ")", "\n", "ird_7", "=", "self", ".", "relu", "(", "ird_7", ")", "\n", "\n", "ird_8_A", "=", "self", ".", "onemulone_ird_8_A", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "onemulone_ird_8_B", "(", "ird_7", ")", "\n", "ird_8_B", "=", "self", ".", "dcn_ird_8_B", "(", "ird_8_B", ")", "\n", "ird_8_C", "=", "self", ".", "onemulone_ird_8_C", "(", "ird_7", ")", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "# two 3X3 equals one 5X5 deformable conv", "\n", "ird_8_C", "=", "self", ".", "dcn_ird_8_C", "(", "ird_8_C", ")", "\n", "ird_8_concat_ori", "=", "torch", ".", "cat", "(", "[", "ird_8_A", ",", "ird_8_B", ",", "ird_8_C", "]", ",", "dim", "=", "1", ")", "\n", "print", "(", "\"size ofird_8_concat_ori is:\"", ",", "ird_8_concat_ori", ".", "size", "(", ")", ")", "\n", "ird_8_concat_se", "=", "self", ".", "se_8", "(", "ird_8_concat_ori", ")", "\n", "print", "(", "\"size ofird_8_concat_se is:\"", ",", "ird_8_concat_se", ".", "size", "(", ")", ")", "\n", "ird_8_concat_residual", "=", "self", ".", "onemulone_ird_8_D", "(", "ird_8_concat_se", ")", "\n", "# ird_8_concat_residual = self.norm_ird_8(ird_8_concat_residual)", "\n", "# ird_8_concat_residual = self.relu_ird_8(ird_8_concat_residual)", "\n", "ird_8", "=", "ird_7", "+", "ird_8_concat_residual", "\n", "print", "(", "\"ird_8 size is:\"", ",", "ird_8", ".", "size", "(", ")", ")", "\n", "ird_8", "=", "self", ".", "relu", "(", "ird_8", ")", "\n", "\n", "e5_h", "=", "self", ".", "conv5_1_h", "(", "ird_8", ")", "\n", "# e5_h = self.relu5_1_h(e5_h)", "\n", "# e5_h = self.conv5_2_h(e5_h)", "\n", "# e5_h = self.relu5_2_h(e5_h)", "\n", "# e5_h = self.conv5_3_h(e5_h)", "\n", "e5_h", "=", "self", ".", "norm5_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "relu5_3_h", "(", "e5_h", ")", "\n", "e5_h", "=", "self", ".", "max5_h", "(", "e5_h", ")", "\n", "print", "(", "\"e5_h size is :\"", ",", "e5_h", ".", "size", "(", ")", ")", "\n", "\n", "'''\n        e5_h_2 = self.conv_2_h(e4_h)\n        e5_h_2 = self.relu5_2_h(e5_h_2)\n        e5_h_2 = self.conv5_3_h(e5_h_2)\n        e5_h_2 = self.relu5_3_h(e5_h_2)\n        \n        res1 = self.res_1(e5_h_2)\n        res2 = self.res_2(res1)\n\n        e5_h_concat = torch.cat([res2, e5_h], dim=1)\n        '''", "\n", "\n", "\n", "'''\n        ird_9_A = self.onemulone_ird_9_A(e5_h)\n        ird_9_B = self.onemulone_ird_9_B(e5_h)\n        ird_9_B = self.dcn_ird_9_B(ird_9_B)\n        ird_9_C = self.onemulone_ird_9_C(e5_h)\n        ird_9_C = self.dcn_ird_9_C(ird_9_C) # two 3X3 equals one 5X5 deformable conv\n        ird_9_C = self.dcn_ird_9_C(ird_9_C)\n        ird_9_concat_ori = torch.cat([ird_9_A, ird_9_B, ird_9_C], dim=1)\n        print(\"size ofird_9_concat_ori is:\", ird_9_concat_ori.size())\n        ird_9_concat_se = self.se_9(ird_9_concat_ori)\n        print(\"size ofird_9_concat_se is:\", ird_9_concat_se.size())\n        ird_9_concat_residual = self.onemulone_ird_9_D(ird_9_concat_se)\n        ird_9 = e5_h + ird_9_concat_residual\n        print(\"ird_9 size is:\", ird_9.size())\n        ird_9 = self.norm_ird_9(ird_9)\n        ird_9 = self.relu_ird_9(ird_9)\n\n        ird_10_A = self.onemulone_ird_10_A(ird_9)\n        ird_10_B = self.onemulone_ird_10_B(ird_9)\n        ird_10_B = self.dcn_ird_10_B(ird_10_B)\n        ird_10_C = self.onemulone_ird_10_C(ird_9)\n        ird_10_C = self.dcn_ird_10_C(ird_10_C) # two 3X3 equals one 5X5 deformable conv\n        ird_10_C = self.dcn_ird_10_C(ird_10_C)\n        ird_10_concat_ori = torch.cat([ird_10_A, ird_10_B, ird_10_C], dim=1)\n        print(\"size ofird_10_concat_ori is:\", ird_10_concat_ori.size())\n        ird_10_concat_se = self.se_10(ird_10_concat_ori)\n        print(\"size ofird_10_concat_se is:\", ird_10_concat_se.size())\n        ird_10_concat_residual = self.onemulone_ird_10_D(ird_10_concat_se)\n        ird_10 = ird_9 + ird_10_concat_residual\n        print(\"ird_10 size is:\", ird_10.size())\n        ird_10 = self.norm_ird_10(ird_10)\n        ird_10 = self.relu_ird_10(ird_10)\n        '''", "\n", "# res1 = self.res_1(e5_h)", "\n", "# res2 = self.res_2(res1)", "\n", "\n", "# e5_h_concat = torch.cat([e5_upsp, e5_h], dim=1)", "\n", "# e5_h_concat = torch.cat([res2, res2], dim=1)", "\n", "\n", "e5_h_concat", "=", "torch", ".", "cat", "(", "[", "e5_upsp", ",", "e5_h", "]", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "\n", "# d1_h = self.conv6_1_h(e5_h)", "\n", "d1_h", "=", "self", ".", "conv6_1_h", "(", "e5_h_concat", ")", "\n", "d1_h", "=", "self", ".", "norm6_h", "(", "d1_h", ")", "\n", "d1_h", "=", "self", ".", "relu6_1_h", "(", "d1_h", ")", "\n", "print", "(", "\"d1_h size is :\"", ",", "d1_h", ".", "size", "(", ")", ")", "\n", "\n", "d2_h", "=", "self", ".", "conv7_1_h", "(", "d1_h", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d2_h", "=", "self", ".", "relu7_1_h", "(", "d2_h", ")", "\n", "print", "(", "\"d2_h size is :\"", ",", "d2_h", ".", "size", "(", ")", ")", "\n", "\n", "d3_h", "=", "self", ".", "conv8_1_h", "(", "d2_h", ")", "\n", "# d2 = self.norm7(d2)", "\n", "d3_h", "=", "self", ".", "relu8_1_h", "(", "d3_h", ")", "\n", "print", "(", "\"d3_h size is :\"", ",", "d3_h", ".", "size", "(", ")", ")", "\n", "\n", "d4_h", "=", "self", ".", "conv9_1_h", "(", "d3_h", ")", "\n", "d4_h", "=", "self", ".", "tanh9_1_h", "(", "d4_h", ")", "\n", "print", "(", "\"d4_h size is :\"", ",", "d4_h", ".", "size", "(", ")", ")", "\n", "\n", "\n", "return", "d4_h", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.SELayer.__init__": [[1129, 1137], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.SELayer.forward": [[1139, 1144], ["x.size", "networks_old10.SELayer.avg_pool().view", "networks_old10.SELayer.fc().view", "networks_old10.SELayer.expand_as", "networks_old10.SELayer.avg_pool", "networks_old10.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.__init__": [[1147, 1150], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks_old10.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.build_conv_block": [[1151, 1182], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.ResnetBlock.forward": [[1183, 1186], ["networks_old10.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.Encoder.__init__": [[1188, 1208], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.Encoder.forward": [[1209, 1223], ["networks_old10.Encoder.model", "networks_old10.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.__init__": [[1225, 1241], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "networks_old10.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward": [[1242, 1250], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.forward": [[1251, 1264], ["range", "result.append", "getattr", "networks_old10.MultiscaleDiscriminator.singleD_forward", "networks_old10.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.NLayerDiscriminator.__init__": [[1267, 1306], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.NLayerDiscriminator.forward": [[1307, 1316], ["range", "networks_old10.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.Vgg19.__init__": [[1319, 1340], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks_old10.Vgg19.slice1.add_module", "networks_old10.Vgg19.slice2.add_module", "networks_old10.Vgg19.slice3.add_module", "networks_old10.Vgg19.slice4.add_module", "networks_old10.Vgg19.slice5.add_module", "networks_old10.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.Vgg19.forward": [[1341, 1349], ["networks_old10.Vgg19.slice1", "networks_old10.Vgg19.slice2", "networks_old10.Vgg19.slice3", "networks_old10.Vgg19.slice4", "networks_old10.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.weights_init": [[39, 46], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer": [[47, 55], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_G": [[56, 76], ["networks_old10.get_norm_layer", "print", "GlobalUNet.apply", "networks_old10.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "GlobalUNet.cuda", "networks_old10.LocalEnhancer", "networks_old10.Encoder", "networks_old10.GlobalUNet"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'global_unet'", ":", "\n", "        ", "netG", "=", "GlobalUNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.define_D": [[77, 86], ["networks_old10.get_norm_layer", "networks_old10.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.models.networks_old10.print_network": [[87, 95], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset.AlignedDataset.initialize": [[10, 73], ["os.path.join", "sorted", "len", "data.image_folder.make_dataset", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "print", "sorted", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "### input A (label maps)", "\n", "# dir_A = '_A' if self.opt.label_nc == 0 else '_label'", "\n", "# self.dir_A = os.path.join(opt.dataroot, opt.phase + dir_A)", "\n", "# self.A_paths = sorted(make_dataset(self.dir_A))", "\n", "\n", "# dir_A = 'maps/train/' if self.opt.label_nc == 0 else '_label'", "\n", "# dir_A = 'images/train/' if self.opt.label_nc == 0 else '_label' # in our task, sourece domain A is the Image", "\n", "dir_A", "=", "'nontargettransfer/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_label'", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_A", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ")", ")", "\n", "\n", "### input B (real images)", "\n", "# if opt.isTrain or opt.use_encoded_image:", "\n", "#  dir_B = '_B' if self.opt.label_nc == 0 else '_img'", "\n", "#  self.dir_B = os.path.join(opt.dataroot, opt.phase + dir_B)  ", "\n", "#  self.B_paths = sorted(make_dataset(self.dir_B))", "\n", "\n", "if", "opt", ".", "isTrain", "or", "opt", ".", "use_encoded_image", ":", "\n", "# dir_B = 'images/train/' if self.opt.label_nc == 0 else '_img'", "\n", "# dir_B = 'maps/train/' if self.opt.label_nc == 0 else '_img' # in our task, sourece domain B is the Saliency Map", "\n", "            ", "dir_B", "=", "'nontargettransfer/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_B", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ")", ")", "\n", "\n", "# dir_C = 'fixations_img/train/' if self.opt.label_nc == 0 else '_img' # in our task, sourece domain B is the Saliency Map", "\n", "dir_C", "=", "'nontargettransfer/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "\n", "self", ".", "dir_C", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_C", ")", "\n", "self", ".", "C_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_C", ")", ")", "\n", "\n", "### instance maps", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "dir_inst", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_inst'", ")", "\n", "self", ".", "inst_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_inst", ")", ")", "\n", "\n", "### load precomputed instance-wise encoded features", "\n", "", "if", "opt", ".", "load_features", ":", "\n", "            ", "self", ".", "dir_feat", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_feat'", ")", "\n", "print", "(", "'----------- loading features from %s ----------'", "%", "self", ".", "dir_feat", ")", "\n", "self", ".", "feat_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_feat", ")", ")", "\n", "\n", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "### input A (label maps)", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "A", "=", "A", ".", "resize", "(", "(", "640", ",", "480", ")", ",", "Image", ".", "BILINEAR", ")", "# for SALICON only      ", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ")", "*", "255.0", "\n", "\n", "# B_tensor = inst_tensor = feat_tensor = 0", "\n", "", "B_tensor", "=", "C_tensor", "=", "inst_tensor", "=", "feat_tensor", "=", "0", "\n", "### input B (real images)", "\n", "if", "self", ".", "opt", ".", "isTrain", "or", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "            ", "B_path", "=", "self", ".", "B_paths", "[", "index", "]", "\n", "B", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset.AlignedDataset.__getitem__": [[74, 137], ["PIL.Image.open", "A.resize.resize.resize", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "PIL.Image.open().convert", "B.resize.resize.resize", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "C.resize.resize.resize", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.", "A.resize.resize.convert", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.normalize", "data.base_dataset.normalize.", "PIL.Image.open", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize"], ["transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "B_tensor", "=", "transform_B", "(", "B", ")", "\n", "\n", "C_path", "=", "self", ".", "C_paths", "[", "index", "]", "\n", "C", "=", "Image", ".", "open", "(", "C_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_C", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "C_tensor", "=", "transform_C", "(", "C", ")", "\n", "\n", "### if using instance maps        ", "\n", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_path", "=", "self", ".", "inst_paths", "[", "index", "]", "\n", "inst", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_tensor", "=", "transform_A", "(", "inst", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_path", "=", "self", ".", "feat_paths", "[", "index", "]", "\n", "feat", "=", "Image", ".", "open", "(", "feat_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "norm", "=", "normalize", "(", ")", "\n", "feat_tensor", "=", "norm", "(", "transform_A", "(", "feat", ")", ")", "\n", "\n", "# input_dict = {'label': A_tensor, 'inst': inst_tensor, 'image': B_tensor,  ", "\n", "#            'feat': feat_tensor, 'path': A_path}", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "A_tensor", ",", "'inst'", ":", "inst_tensor", ",", "'image'", ":", "B_tensor", ",", "'fixpts'", ":", "C_tensor", ",", "\n", "'feat'", ":", "feat_tensor", ",", "'path'", ":", "A_path", "}", "\n", "\n", "return", "input_dict", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "//", "self", ".", "opt", ".", "batchSize", "*", "self", ".", "opt", ".", "batchSize", "\n", "\n", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset.AlignedDataset.__len__": [[138, 140], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset.AlignedDataset.name": [[141, 143], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.data_loader.CreateDataLoader": [[2, 8], ["CustomDatasetDataLoader", "print", "CustomDatasetDataLoader.initialize", "CustomDatasetDataLoader.name"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.name"], ["def", "CreateDataLoader", "(", "opt", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "print", "(", "data_loader", ".", "name", "(", ")", ")", "\n", "data_loader", ".", "initialize", "(", "opt", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old.AlignedDataset.initialize": [[9, 47], ["os.path.join", "sorted", "len", "data.image_folder.make_dataset", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "print", "sorted", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "### input A (label maps)", "\n", "# dir_A = '_A' if self.opt.label_nc == 0 else '_label'", "\n", "# self.dir_A = os.path.join(opt.dataroot, opt.phase + dir_A)", "\n", "# self.A_paths = sorted(make_dataset(self.dir_A))", "\n", "\n", "# dir_A = 'maps/train/' if self.opt.label_nc == 0 else '_label'", "\n", "dir_A", "=", "'images/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_label'", "# in our task, sourece domain A is the Image", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_A", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ")", ")", "\n", "\n", "### input B (real images)", "\n", "# if opt.isTrain or opt.use_encoded_image:", "\n", "#  dir_B = '_B' if self.opt.label_nc == 0 else '_img'", "\n", "#  self.dir_B = os.path.join(opt.dataroot, opt.phase + dir_B)  ", "\n", "#  self.B_paths = sorted(make_dataset(self.dir_B))", "\n", "\n", "if", "opt", ".", "isTrain", "or", "opt", ".", "use_encoded_image", ":", "\n", "# dir_B = 'images/train/' if self.opt.label_nc == 0 else '_img'", "\n", "            ", "dir_B", "=", "'maps/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_B", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ")", ")", "\n", "\n", "### instance maps", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "dir_inst", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_inst'", ")", "\n", "self", ".", "inst_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_inst", ")", ")", "\n", "\n", "### load precomputed instance-wise encoded features", "\n", "", "if", "opt", ".", "load_features", ":", "\n", "            ", "self", ".", "dir_feat", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_feat'", ")", "\n", "print", "(", "'----------- loading features from %s ----------'", "%", "self", ".", "dir_feat", ")", "\n", "self", ".", "feat_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_feat", ")", ")", "\n", "\n", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old.AlignedDataset.__getitem__": [[48, 84], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open.convert", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.normalize", "data.base_dataset.normalize.", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "### input A (label maps)", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ")", "*", "255.0", "\n", "\n", "", "B_tensor", "=", "inst_tensor", "=", "feat_tensor", "=", "0", "\n", "### input B (real images)", "\n", "if", "self", ".", "opt", ".", "isTrain", "or", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "            ", "B_path", "=", "self", ".", "B_paths", "[", "index", "]", "\n", "B", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "B_tensor", "=", "transform_B", "(", "B", ")", "\n", "\n", "### if using instance maps        ", "\n", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_path", "=", "self", ".", "inst_paths", "[", "index", "]", "\n", "inst", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_tensor", "=", "transform_A", "(", "inst", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_path", "=", "self", ".", "feat_paths", "[", "index", "]", "\n", "feat", "=", "Image", ".", "open", "(", "feat_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "norm", "=", "normalize", "(", ")", "\n", "feat_tensor", "=", "norm", "(", "transform_A", "(", "feat", ")", ")", "\n", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "A_tensor", ",", "'inst'", ":", "inst_tensor", ",", "'image'", ":", "B_tensor", ",", "\n", "'feat'", ":", "feat_tensor", ",", "'path'", ":", "A_path", "}", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old.AlignedDataset.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "//", "self", ".", "opt", ".", "batchSize", "*", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old.AlignedDataset.name": [[88, 90], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old4.AlignedDataset.initialize": [[9, 51], ["os.path.join", "sorted", "len", "data.image_folder.make_dataset", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "print", "sorted", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "### input A (label maps)", "\n", "# dir_A = '_A' if self.opt.label_nc == 0 else '_label'", "\n", "# self.dir_A = os.path.join(opt.dataroot, opt.phase + dir_A)", "\n", "# self.A_paths = sorted(make_dataset(self.dir_A))", "\n", "\n", "# dir_A = 'maps/train/' if self.opt.label_nc == 0 else '_label'", "\n", "dir_A", "=", "'images/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_label'", "# in our task, sourece domain A is the Image", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_A", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ")", ")", "\n", "\n", "### input B (real images)", "\n", "# if opt.isTrain or opt.use_encoded_image:", "\n", "#  dir_B = '_B' if self.opt.label_nc == 0 else '_img'", "\n", "#  self.dir_B = os.path.join(opt.dataroot, opt.phase + dir_B)  ", "\n", "#  self.B_paths = sorted(make_dataset(self.dir_B))", "\n", "\n", "if", "opt", ".", "isTrain", "or", "opt", ".", "use_encoded_image", ":", "\n", "# dir_B = 'images/train/' if self.opt.label_nc == 0 else '_img'", "\n", "            ", "dir_B", "=", "'maps/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_B", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ")", ")", "\n", "\n", "dir_C", "=", "'fixations_img/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_C", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_C", ")", "\n", "self", ".", "C_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_C", ")", ")", "\n", "\n", "### instance maps", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "dir_inst", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_inst'", ")", "\n", "self", ".", "inst_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_inst", ")", ")", "\n", "\n", "### load precomputed instance-wise encoded features", "\n", "", "if", "opt", ".", "load_features", ":", "\n", "            ", "self", ".", "dir_feat", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_feat'", ")", "\n", "print", "(", "'----------- loading features from %s ----------'", "%", "self", ".", "dir_feat", ")", "\n", "self", ".", "feat_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_feat", ")", ")", "\n", "\n", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old4.AlignedDataset.__getitem__": [[52, 97], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open.convert", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.normalize", "data.base_dataset.normalize.", "PIL.Image.open", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "### input A (label maps)", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ")", "*", "255.0", "\n", "\n", "# B_tensor = inst_tensor = feat_tensor = 0", "\n", "", "B_tensor", "=", "C_tensor", "=", "inst_tensor", "=", "feat_tensor", "=", "0", "\n", "### input B (real images)", "\n", "if", "self", ".", "opt", ".", "isTrain", "or", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "            ", "B_path", "=", "self", ".", "B_paths", "[", "index", "]", "\n", "B", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "B_tensor", "=", "transform_B", "(", "B", ")", "\n", "\n", "C_path", "=", "self", ".", "C_paths", "[", "index", "]", "\n", "C", "=", "Image", ".", "open", "(", "C_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_C", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "C_tensor", "=", "transform_C", "(", "C", ")", "\n", "\n", "### if using instance maps        ", "\n", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_path", "=", "self", ".", "inst_paths", "[", "index", "]", "\n", "inst", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_tensor", "=", "transform_A", "(", "inst", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_path", "=", "self", ".", "feat_paths", "[", "index", "]", "\n", "feat", "=", "Image", ".", "open", "(", "feat_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "norm", "=", "normalize", "(", ")", "\n", "feat_tensor", "=", "norm", "(", "transform_A", "(", "feat", ")", ")", "\n", "\n", "# input_dict = {'label': A_tensor, 'inst': inst_tensor, 'image': B_tensor,  ", "\n", "#            'feat': feat_tensor, 'path': A_path}", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "A_tensor", ",", "'inst'", ":", "inst_tensor", ",", "'image'", ":", "B_tensor", ",", "'fixpts'", ":", "C_tensor", ",", "\n", "'feat'", ":", "feat_tensor", ",", "'path'", ":", "A_path", "}", "\n", "\n", "return", "input_dict", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old4.AlignedDataset.__len__": [[98, 100], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "A_paths", ")", "//", "self", ".", "opt", ".", "batchSize", "*", "self", ".", "opt", ".", "batchSize", "\n", "\n", "", "def", "name", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old4.AlignedDataset.name": [[101, 103], ["None"], "methods", ["None"], ["        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old3.AlignedDataset.initialize": [[10, 60], ["os.path.join", "sorted", "len", "data.image_folder.make_dataset", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "print", "sorted", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "### input A (label maps)", "\n", "# dir_A = '_A' if self.opt.label_nc == 0 else '_label'", "\n", "# self.dir_A = os.path.join(opt.dataroot, opt.phase + dir_A) # opt.phase can control the train set or test set", "\n", "# self.A_paths = sorted(make_dataset(self.dir_A))", "\n", "\n", "# dir_A = 'maps/train/' if self.opt.label_nc == 0 else '_label'", "\n", "# dir_A = 'images/train/' if self.opt.label_nc == 0 else '_label' # in our task, sourece domain A is the Image", "\n", "# dir_A = 'image/img/Noise_2/' if self.opt.label_nc == 0 else '_label' # in our task, source domain A is the Image", "\n", "dir_A", "=", "'img_gray_adv/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_label'", "# in our task, source domain A is the Image", "\n", "# dir_A = 'ScaleDatabase/Compression_2/' if self.opt.label_nc == 0 else '_label' # in our task, source domain A is the Image", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_A", ")", "\n", "# self.dir_A = os.path.join(dir_A)", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ")", ")", "\n", "\n", "### input B (real images)", "\n", "# if opt.isTrain or opt.use_encoded_image:", "\n", "#  dir_B = '_B' if self.opt.label_nc == 0 else '_img'", "\n", "#  self.dir_B = os.path.join(opt.dataroot, opt.phase + dir_B)  # opt.phase can control the train set or test set ", "\n", "#  self.B_paths = sorted(make_dataset(self.dir_B))", "\n", "\n", "if", "opt", ".", "isTrain", "or", "opt", ".", "use_encoded_image", ":", "\n", "# dir_B = 'images/train/' if self.opt.label_nc == 0 else '_img'", "\n", "# dir_B = 'maps/train/' if self.opt.label_nc == 0 else '_img' # in our task, sourece domain B is the Saliency Map", "\n", "            ", "dir_B", "=", "'map/ContrastChange_2/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "# self.dir_B = os.path.join(dir_B)", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_B", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ")", ")", "\n", "\n", "# dir_C = 'fixations_img/train/' if self.opt.label_nc == 0 else '_img' # in our task, sourece domain B is the Saliency Map", "\n", "# self.dir_C = os.path.join(opt.dataroot, dir_C)  ", "\n", "dir_C", "=", "'fixation_img/ContrastChange_2/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_C", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_C", ")", "\n", "self", ".", "C_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_C", ")", ")", "\n", "\n", "### instance maps", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "dir_inst", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_inst'", ")", "\n", "self", ".", "inst_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_inst", ")", ")", "\n", "\n", "### load precomputed instance-wise encoded features", "\n", "", "if", "opt", ".", "load_features", ":", "\n", "            ", "self", ".", "dir_feat", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_feat'", ")", "\n", "print", "(", "'----------- loading features from %s ----------'", "%", "self", ".", "dir_feat", ")", "\n", "self", ".", "feat_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_feat", ")", ")", "\n", "\n", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old3.AlignedDataset.__getitem__": [[61, 108], ["PIL.Image.open", "A.resize.resize.resize", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "PIL.Image.open().convert", "B.resize.resize.resize", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "C.resize.resize.resize", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.", "A.resize.resize.convert", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.normalize", "data.base_dataset.normalize.", "PIL.Image.open", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "### input A (label maps)", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "A", "=", "A", ".", "resize", "(", "(", "640", ",", "480", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ")", "*", "255.0", "\n", "\n", "# B_tensor = inst_tensor = feat_tensor = 0", "\n", "", "B_tensor", "=", "C_tensor", "=", "inst_tensor", "=", "feat_tensor", "=", "0", "\n", "### input B (real images)", "\n", "if", "self", ".", "opt", ".", "isTrain", "or", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "            ", "B_path", "=", "self", ".", "B_paths", "[", "index", "]", "\n", "B", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B", "=", "B", ".", "resize", "(", "(", "640", ",", "480", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "B_tensor", "=", "transform_B", "(", "B", ")", "\n", "\n", "C_path", "=", "self", ".", "C_paths", "[", "index", "]", "\n", "C", "=", "Image", ".", "open", "(", "C_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "C", "=", "C", ".", "resize", "(", "(", "640", ",", "480", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "transform_C", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "C_tensor", "=", "transform_C", "(", "C", ")", "\n", "\n", "### if using instance maps        ", "\n", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_path", "=", "self", ".", "inst_paths", "[", "index", "]", "\n", "inst", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_tensor", "=", "transform_A", "(", "inst", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_path", "=", "self", ".", "feat_paths", "[", "index", "]", "\n", "feat", "=", "Image", ".", "open", "(", "feat_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "norm", "=", "normalize", "(", ")", "\n", "feat_tensor", "=", "norm", "(", "transform_A", "(", "feat", ")", ")", "\n", "\n", "# input_dict = {'label': A_tensor, 'inst': inst_tensor, 'image': B_tensor,  ", "\n", "#            'feat': feat_tensor, 'path': A_path}", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "A_tensor", ",", "'inst'", ":", "inst_tensor", ",", "'image'", ":", "B_tensor", ",", "'fixpts'", ":", "C_tensor", ",", "\n", "'feat'", ":", "feat_tensor", ",", "'path'", ":", "A_path", "}", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old3.AlignedDataset.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "//", "self", ".", "opt", ".", "batchSize", "*", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old3.AlignedDataset.name": [[112, 114], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.BaseDataset.__init__": [[10, 12], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.BaseDataset.name": [[13, 15], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.BaseDataset.initialize": [[16, 18], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params": [[19, 34], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "loadSize", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "loadSize", "\n", "new_h", "=", "opt", ".", "loadSize", "*", "h", "//", "w", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "fineSize", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "fineSize", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform": [[35, 61], ["torchvision.Compose", "transform_list.append", "transform_list.append", "float", "transform_list.append", "torchvision.ToTensor", "torchvision.Scale", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Normalize", "torchvision.Lambda", "base_dataset.__crop", "base_dataset.__flip", "base_dataset.__scale_width"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__crop", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__flip", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__scale_width"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "resize_or_crop", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "osize", ",", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "resize_or_crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "resize_or_crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "resize_or_crop", "==", "'none'", ":", "\n", "        ", "base", "=", "float", "(", "2", "**", "opt", ".", "n_downsample_global", ")", "\n", "if", "opt", ".", "netG", "==", "'local'", ":", "\n", "            ", "base", "*=", "(", "2", "**", "opt", ".", "n_local_enhancers", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize": [[62, 64], ["torchvision.Normalize"], "function", ["None"], ["", "def", "normalize", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__make_power_2": [[65, 72], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__scale_width": [[73, 80], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__crop": [[81, 88], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "if", "(", "ow", ">", "tw", "or", "oh", ">", "th", ")", ":", "\n", "        ", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.__flip": [[89, 93], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[18, 26], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "opt", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[27, 29], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[30, 32], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "opt", ".", "max_dataset_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.custom_dataset_data_loader.CreateDataset": [[5, 13], ["AlignedDataset", "print", "AlignedDataset.initialize", "AlignedDataset.name"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.name"], ["def", "CreateDataset", "(", "opt", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "from", "data", ".", "aligned_dataset", "import", "AlignedDataset", "\n", "dataset", "=", "AlignedDataset", "(", ")", "\n", "\n", "print", "(", "\"dataset [%s] was created\"", "%", "(", "dataset", ".", "name", "(", ")", ")", ")", "\n", "dataset", ".", "initialize", "(", "opt", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.ImageFolder.__init__": [[40, 53], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.ImageFolder.__getitem__": [[54, 63], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.ImageFolder.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.is_image_file": [[17, 19], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset": [[21, 32], ["os.path.isdir", "sorted", "os.walk", "image_folder.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "# return a string array containing the path_filenames of the images under the 'dir'", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.default_loader": [[34, 36], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_data_loader.BaseDataLoader.initialize": [[6, 9], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_data_loader.BaseDataLoader.load_data": [[10, 12], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.initialize": [[9, 51], ["os.path.join", "sorted", "len", "data.image_folder.make_dataset", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "sorted", "os.path.join", "print", "sorted", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "### input A (label maps)", "\n", "# dir_A = '_A' if self.opt.label_nc == 0 else '_label'", "\n", "# self.dir_A = os.path.join(opt.dataroot, opt.phase + dir_A)", "\n", "# self.A_paths = sorted(make_dataset(self.dir_A))", "\n", "\n", "# dir_A = 'maps/train/' if self.opt.label_nc == 0 else '_label'", "\n", "dir_A", "=", "'images/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_label'", "# in our task, sourece domain A is the Image", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_A", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ")", ")", "\n", "\n", "### input B (real images)", "\n", "# if opt.isTrain or opt.use_encoded_image:", "\n", "#  dir_B = '_B' if self.opt.label_nc == 0 else '_img'", "\n", "#  self.dir_B = os.path.join(opt.dataroot, opt.phase + dir_B)  ", "\n", "#  self.B_paths = sorted(make_dataset(self.dir_B))", "\n", "\n", "if", "opt", ".", "isTrain", "or", "opt", ".", "use_encoded_image", ":", "\n", "# dir_B = 'images/train/' if self.opt.label_nc == 0 else '_img'", "\n", "            ", "dir_B", "=", "'maps/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_B", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ")", ")", "\n", "\n", "dir_C", "=", "'fixations_img/train/'", "if", "self", ".", "opt", ".", "label_nc", "==", "0", "else", "'_img'", "# in our task, sourece domain B is the Saliency Map", "\n", "self", ".", "dir_C", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "dir_C", ")", "\n", "self", ".", "C_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_C", ")", ")", "\n", "\n", "### instance maps", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "dir_inst", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_inst'", ")", "\n", "self", ".", "inst_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_inst", ")", ")", "\n", "\n", "### load precomputed instance-wise encoded features", "\n", "", "if", "opt", ".", "load_features", ":", "\n", "            ", "self", ".", "dir_feat", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'_feat'", ")", "\n", "print", "(", "'----------- loading features from %s ----------'", "%", "self", ".", "dir_feat", ")", "\n", "self", ".", "feat_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_feat", ")", ")", "\n", "\n", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.__getitem__": [[52, 96], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open.convert", "data.base_dataset.get_transform.", "PIL.Image.open().convert", "data.base_dataset.normalize", "data.base_dataset.normalize.", "PIL.Image.open", "PIL.Image.open", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_params", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.base_dataset.normalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "### input A (label maps)", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "A_tensor", "=", "transform_A", "(", "A", ")", "*", "255.0", "\n", "\n", "# B_tensor = inst_tensor = feat_tensor = 0", "\n", "", "B_tensor", "=", "C_tensor", "=", "inst_tensor", "=", "feat_tensor", "=", "0", "\n", "### input B (real images)", "\n", "if", "self", ".", "opt", ".", "isTrain", "or", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "            ", "B_path", "=", "self", ".", "B_paths", "[", "index", "]", "\n", "B", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "B_tensor", "=", "transform_B", "(", "B", ")", "\n", "\n", "C_path", "=", "self", ".", "C_paths", "[", "index", "]", "\n", "C", "=", "Image", ".", "open", "(", "C_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_C", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "C_tensor", "=", "transform_C", "(", "C", ")", "\n", "\n", "### if using instance maps        ", "\n", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_path", "=", "self", ".", "inst_paths", "[", "index", "]", "\n", "inst", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_tensor", "=", "transform_A", "(", "inst", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_path", "=", "self", ".", "feat_paths", "[", "index", "]", "\n", "feat", "=", "Image", ".", "open", "(", "feat_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "norm", "=", "normalize", "(", ")", "\n", "feat_tensor", "=", "norm", "(", "transform_A", "(", "feat", ")", ")", "\n", "\n", "# input_dict = {'label': A_tensor, 'inst': inst_tensor, 'image': B_tensor,  ", "\n", "#            'feat': feat_tensor, 'path': A_path}", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "A_tensor", ",", "'inst'", ":", "inst_tensor", ",", "'image'", ":", "B_tensor", ",", "'fixpts'", ":", "C_tensor", ",", "\n", "'feat'", ":", "feat_tensor", ",", "'path'", ":", "A_path", "}", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "//", "self", ".", "opt", ".", "batchSize", "*", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.data.aligned_dataset_old2.AlignedDataset.name": [[100, 102], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.train_options_ori.TrainOptions.initialize": [[6, 39], ["base_options.BaseOptions.initialize", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument", "train_options_ori.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# self.parser.add_argument('--niter', type=int, default=100, help='# of iter at starting learning rate')", "\n", "# self.parser.add_argument('--niter_decay', type=int, default=100, help='# of iter to linearly decay learning rate to zero')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'# of iter at starting learning rate'", ")", "# 2", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "# 0", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators        ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.train_options_old1.TrainOptions.initialize": [[6, 40], ["base_options.BaseOptions.initialize", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument", "train_options_old1.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators        ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_CC'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for CC loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_cc_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use CC loss'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old2.BaseOptions.__init__": [[9, 12], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old2.BaseOptions.initialize": [[13, 70], ["base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "base_options_old2.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2city'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "# self.parser.add_argument('--gpu_ids', type=str, default='1', help='gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU')", "\n", "# self.parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpointsMy'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pixHD'", ",", "help", "=", "'which model to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_type'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "choices", "=", "[", "8", ",", "16", ",", "32", "]", ",", "help", "=", "\"Supported data type i.e. 8, 16, 32 bit\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "# self.parser.add_argument('--loadSize', type=int, default=1024, help='scale images to this size')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'scale images to this size'", ")", "# My input size, width of the image", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "help", "=", "'# of input label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "# self.parser.add_argument('--dataroot', type=str, default='./datasets/cityscapes/') ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'/home/che-z/docker-czh/datasets/SALICON/'", ")", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/MyDistortedDataset/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/') # for adv examples", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'scale_width'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for generator", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_global'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_local'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of residual blocks in the local enhancer network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_local_enhancers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local enhancers to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_fix_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs that we only train the outmost local enhancer'", ")", "\n", "\n", "# for instance-wise features", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--instance_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded instance features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded label features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feat_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'vector length for encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, load precomputed feature maps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_E'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of downsampling layers in encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of clusters for features'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old2.BaseOptions.parse": [[71, 106], ["base_options_old2.BaseOptions.parser.parse_args", "base_options_old2.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "base_options_old2.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "base_options_old2.BaseOptions.opt.gpu_ids.append", "open", "opt_file.write", "sorted", "opt_file.write", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk        ", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old1.BaseOptions.__init__": [[9, 12], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old1.BaseOptions.initialize": [[13, 69], ["base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "base_options_old1.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2city'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "# self.parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpointsMy'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pixHD'", ",", "help", "=", "'which model to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_type'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "choices", "=", "[", "8", ",", "16", ",", "32", "]", ",", "help", "=", "\"Supported data type i.e. 8, 16, 32 bit\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "# self.parser.add_argument('--loadSize', type=int, default=1024, help='scale images to this size')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'scale images to this size'", ")", "# My input size, width of the image", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "help", "=", "'# of input label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "# self.parser.add_argument('--dataroot', type=str, default='./datasets/cityscapes/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/SALICON/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/MyDistortedDataset/') ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'/home/che-z/docker-czh/datasets/'", ")", "# for adv examples", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'scale_width'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for generator", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_global'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_local'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of residual blocks in the local enhancer network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_local_enhancers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local enhancers to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_fix_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs that we only train the outmost local enhancer'", ")", "\n", "\n", "# for instance-wise features", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--instance_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded instance features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded label features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feat_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'vector length for encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, load precomputed feature maps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_E'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of downsampling layers in encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of clusters for features'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old1.BaseOptions.parse": [[70, 105], ["base_options_old1.BaseOptions.parser.parse_args", "base_options_old1.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "base_options_old1.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "base_options_old1.BaseOptions.opt.gpu_ids.append", "open", "opt_file.write", "sorted", "opt_file.write", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk        ", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.test_options.TestOptions.initialize": [[6, 21], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "# self.parser.add_argument('--how_many', type=int, default=50, help='how many test images to run')   ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "140", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--cluster_path'", ",", "type", "=", "str", ",", "default", "=", "'features_clustered_010.npy'", ",", "help", "=", "'the path for clustered results of encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_encoded_image'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, encode the real image to get the feature map'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--export_onnx\"", ",", "type", "=", "str", ",", "help", "=", "\"export ONNX model to a given file\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--engine\"", ",", "type", "=", "str", ",", "help", "=", "\"run serialized TRT engine\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--onnx\"", ",", "type", "=", "str", ",", "help", "=", "\"run ONNX model via TRT\"", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.train_options.TrainOptions.initialize": [[6, 55], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# self.parser.add_argument('--niter', type=int, default=100, help='# of iter at starting learning rate')", "\n", "# self.parser.add_argument('--niter_decay', type=int, default=100, help='# of iter to linearly decay learning rate to zero')", "\n", "# self.parser.add_argument('--niter', type=int, default=15, help='# of iter at starting learning rate')", "\n", "# self.parser.add_argument('--niter_decay', type=int, default=2, help='# of iter to linearly decay learning rate to zero')", "\n", "# self.parser.add_argument('--niter', type=int, default=17+3, help='# of iter at starting learning rate')", "\n", "# self.parser.add_argument('--niter', type=int, default=7+3, help='# of iter at starting learning rate')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "2", "+", "18", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "# self.parser.add_argument('--niter_decay', type=int, default=2, help='# of iter to linearly decay learning rate to zero')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators        ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "# self.parser.add_argument('--lambda_feat', type=float, default=10.0, help='weight for feature matching loss')  # weights of both GAN feature mapping loss and VGG loss     ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for feature matching loss'", ")", "# we decrease the weight in finetune stage           ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_CC'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for CC loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_cc_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use CC loss'", ")", "\n", "\n", "# self.parser.add_argument('--lambda_KL', type=float, default=1.0, help='weight for KL loss')  ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_KL'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for KL loss'", ")", "# we increase the weight of KL in finetune stage ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_kl_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use KL loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_NSS'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for NSS loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_nss_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use NSS loss'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.train_options_old2.TrainOptions.initialize": [[6, 46], ["base_options.BaseOptions.initialize", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument", "train_options_old2.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators        ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_CC'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for CC loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_cc_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use CC loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_KL'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for KL loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_kl_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use KL loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_NSS'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for NSS loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_nss_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use NSS loss'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options.BaseOptions.__init__": [[9, 12], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options.BaseOptions.initialize": [[13, 77], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2city'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "# self.parser.add_argument('--gpu_ids', type=str, default='1', help='gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU')", "\n", "# self.parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpointsMy'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pixHD'", ",", "help", "=", "'which model to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_type'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "choices", "=", "[", "8", ",", "16", ",", "32", "]", ",", "help", "=", "\"Supported data type i.e. 8, 16, 32 bit\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "# self.parser.add_argument('--loadSize', type=int, default=1024, help='scale images to this size')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'scale images to this size'", ")", "# My input size, width of the image", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "help", "=", "'# of input label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "# self.parser.add_argument('--dataroot', type=str, default='./datasets/cityscapes/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/SALICON/') ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'/home/che-z/docker-czh/datasets/forGazeGAN//'", ")", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/MyDistortedDataset/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/') # for adv examples", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'scale_width'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for generator", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_global'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_local'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of residual blocks in the local enhancer network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_local_enhancers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local enhancers to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_fix_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs that we only train the outmost local enhancer'", ")", "\n", "\n", "# for instance-wise features", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--instance_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded instance features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded label features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feat_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'vector length for encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, load precomputed feature maps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_E'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of downsampling layers in encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of clusters for features'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n", "", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options.BaseOptions.parse": [[78, 114], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "base_options.BaseOptions.opt.gpu_ids.append", "open", "opt_file.write", "sorted", "opt_file.write", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "# torch.cuda.set_device(1)", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk        ", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.__init__": [[9, 12], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize": [[13, 70], ["base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "base_options_old3.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2city'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "# self.parser.add_argument('--gpu_ids', type=str, default='1', help='gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU')", "\n", "# self.parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpointsMy'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pixHD'", ",", "help", "=", "'which model to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_type'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "choices", "=", "[", "8", ",", "16", ",", "32", "]", ",", "help", "=", "\"Supported data type i.e. 8, 16, 32 bit\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "# self.parser.add_argument('--loadSize', type=int, default=1024, help='scale images to this size')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'scale images to this size'", ")", "# My input size, width of the image", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "help", "=", "'# of input label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "# self.parser.add_argument('--dataroot', type=str, default='./datasets/cityscapes/') ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'/home/che-z/docker-czh/datasets/SALICON/'", ")", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/MyDistortedDataset/') ", "\n", "# self.parser.add_argument('--dataroot', type=str, default='/home/che-z/docker-czh/datasets/') # for adv examples", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'scale_width'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for generator", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_global'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_local'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of residual blocks in the local enhancer network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_local_enhancers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local enhancers to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_fix_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs that we only train the outmost local enhancer'", ")", "\n", "\n", "# for instance-wise features", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--instance_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded instance features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded label features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feat_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'vector length for encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, load precomputed feature maps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_E'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of downsampling layers in encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of clusters for features'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.parse": [[71, 107], ["base_options_old3.BaseOptions.parser.parse_args", "base_options_old3.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "base_options_old3.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "base_options_old3.BaseOptions.opt.gpu_ids.append", "open", "opt_file.write", "sorted", "opt_file.write", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.util.util.mkdirs", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "# torch.cuda.set_device(1)", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk        ", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.build_dataset_New_3._image_preprocessing": [[163, 177], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "# if filename.endswith('.jpg'):", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New_2.Pix2pix.__init__": [[10, 47], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator_New_2.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ichan", ",", "ochan", ",", "l1_weight", "=", "100.", ",", "lr", "=", "0.0002", ",", "beta1", "=", "0.5", ")", ":", "\n", "# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "# self._fake_d = Discriminator(tf.concat([self._d_inputs_a, self._g._decoder['cl9']['fmap']], axis=3), self._is_training, reuse=True)", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "\n", "#self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._decoder['cl9']['fmap']))", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ")", ")", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New_2.Pix2pix.train_step": [[48, 54], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "_", ",", "gloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New_2.Pix2pix.sample_generator": [[58, 60], ["sess.run"], "methods", ["None"], ["", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New.Pix2pix.__init__": [[72, 163], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator_New.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.divide", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.add", "tensorflow.add", "tensorflow.multiply", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.log", "tensorflow.abs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ichan", ",", "ochan", ",", "l1_weight", "=", "100.", ",", "lr", "=", "0.0002", ",", "beta1", "=", "0.5", ")", ":", "\n", "# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "# self._fake_d = Discriminator(tf.concat([self._d_inputs_a, self._g._decoder['cl9']['fmap']], axis=3), self._is_training, reuse=True)", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "\n", "#self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._decoder['cl9']['fmap']))", "\n", "# self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._resout['rsl7']['fmap']))", "\n", "# with tf.Session() as sess:", "\n", "#  img_true = (self._d_inputs_b).eval()", "\n", "#  img_pred = (self._g._resout['rsl7']['fmap']).eval()", "\n", "# img_true = (self._d_inputs_b)", "\n", "# sess.run(", "\n", "# img_true = (self._g._resout['rsl7']['fmap'])", "\n", "# img_pred = (self._g._resout['rsl7']['fmap'])", "\n", "# print(\"img_true shape:\", img_true.shape)", "\n", "# Saliency_Loss = New_Loss.final_loss(img_true, img_pred)", "\n", "\n", "\n", "# img_true_tensor = tf.to_float(self._d_inputs_b[0,:,:,1], name='ToFloat')", "\n", "img_true_tensor", "=", "tf", ".", "to_float", "(", "self", ".", "_d_inputs_b", ",", "name", "=", "'ToFloat'", ")", "\n", "# img_true_tensor = tf.to_double(self._d_inputs_b, name='ToDouble')", "\n", "# img_pred_tensor = tf.to_float(self._g._resout['rsl7']['fmap'][0,:,:,1], name='ToFloat')", "\n", "img_pred_tensor", "=", "tf", ".", "to_float", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "name", "=", "'ToFloat'", ")", "\n", "img_pred_tensor", "=", "img_pred_tensor", "+", "1", "# normalize because generator use tanh activation in its output layer", "\n", "# img_pred_tensor = tf.to_float(self._d_inputs_b, name='ToFloat') # In this case, KLD ~= 0", "\n", "\n", "# sum_true = tf.constant(tf.reduce_sum(img_true_tensor))", "\n", "# sum_pred = tf.constant(tf.reduce_sum(img_pred_tensor))", "\n", "big1", "=", "tf", ".", "reduce_max", "(", "img_true_tensor", ")", "\n", "sml1", "=", "tf", ".", "reduce_min", "(", "img_true_tensor", ")", "\n", "img_true_tensor", "=", "(", "img_true_tensor", "-", "sml1", ")", "/", "(", "big1", "-", "sml1", ")", "\n", "big2", "=", "tf", ".", "reduce_max", "(", "img_pred_tensor", ")", "\n", "sml2", "=", "tf", ".", "reduce_min", "(", "img_pred_tensor", ")", "\n", "img_pred_tensor", "=", "(", "img_pred_tensor", "-", "sml2", ")", "/", "(", "big2", "-", "sml2", ")", "\n", "\n", "# print(\"img_true_tensor is :::::::\", img_true_tensor)", "\n", "sum_true", "=", "tf", ".", "reduce_sum", "(", "img_true_tensor", ")", "\n", "# print(\"sum_true is ::::::::::\", sum_true)", "\n", "sum_pred", "=", "tf", ".", "reduce_sum", "(", "img_pred_tensor", ")", "\n", "\n", "img_true_tensor", "=", "img_true_tensor", "/", "sum_true", "\n", "img_pred_tensor", "=", "img_pred_tensor", "/", "sum_pred", "\n", "# epsilon = tf.constant(1e-08)", "\n", "epsilon", "=", "1e-08", "\n", "epsilon", "=", "tf", ".", "to_float", "(", "epsilon", ",", "name", "=", "'ToFloat'", ")", "\n", "map2", "=", "img_true_tensor", "\n", "map1", "=", "img_pred_tensor", "\n", "\n", "KLD_1", "=", "tf", ".", "divide", "(", "map2", ",", "tf", ".", "add", "(", "map1", ",", "epsilon", ",", "name", "=", "None", ")", ",", "name", "=", "None", ")", "\n", "KLD_2", "=", "tf", ".", "log", "(", "tf", ".", "add", "(", "epsilon", ",", "KLD_1", ",", "name", "=", "None", ")", ",", "name", "=", "None", ")", "\n", "KLD_3", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "map2", ",", "KLD_2", ",", "name", "=", "None", ")", ")", "\n", "# print(\"KLD is :\", KLD_3)", "\n", "\n", "# self.KLD = sum_true # This is just a monitor output, for debugging, for output the variables you want to see, refer to \"example_New.py\" line 47", "\n", "self", ".", "monitor", "=", "sum_true", "# This is just a monitor output, for debugging, for output the variables you want to see, refer to \"example_New.py\" line 47", "\n", "# And pay attention that: we have to add \"self.\" in front of \"monitor\", so that we can calculate it in sess.run (refer to the 172 line of this code)", "\n", "\n", "l2_weight", "=", "100", "\n", "# self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._resout['rsl7']['fmap']))", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ")", ")", "+", "l2_weight", "*", "KLD_3", "\n", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New.Pix2pix.train_step": [[166, 175], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n", "# _, gloss_curr = sess.run([self._g_train_step, self._g_loss],", "\n", "#      feed_dict={self._g_inputs : g_inputs, self._d_inputs_a : d_inputs_a,   self._d_inputs_b : d_inputs_b,self._is_training : is_training})        ", "\n", "_", ",", "gloss_curr", ",", "_monitor", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", ",", "self", ".", "monitor", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ",", "_monitor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix_New.Pix2pix.sample_generator": [[179, 181], ["sess.run"], "methods", ["None"], ["", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix.Pix2pix.__init__": [[8, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ichan", ",", "ochan", ",", "l1_weight", "=", "100.", ",", "lr", "=", "0.0002", ",", "beta1", "=", "0.5", ")", ":", "\n", "# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ")", ")", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix.Pix2pix.train_step": [[43, 49], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "_", ",", "gloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.pix2pix.Pix2pix.sample_generator": [[50, 52], ["sess.run"], "methods", ["None"], ["", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.New_Loss.kl_divergence": [[19, 32], ["keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.epsilon", "keras.epsilon", "keras.sum", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.sum", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.max", "keras.sum", "keras.sum", "keras.log", "keras.max", "keras.sum", "keras.sum", "keras.epsilon", "keras.epsilon"], "function", ["None"], ["def", "kl_divergence", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "max_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "max", "(", "K", ".", "max", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "\n", "sum_y_true", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "sum_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_true", "/=", "(", "sum_y_true", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "y_pred", "/=", "(", "sum_y_pred", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "10", "*", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "K", ".", "log", "(", "(", "y_true", "/", "(", "y_pred", "+", "K", ".", "epsilon", "(", ")", ")", ")", "+", "K", ".", "epsilon", "(", ")", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "# weight: 10", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.New_Loss.correlation_coefficient": [[35, 61], ["keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sqrt", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.epsilon", "keras.epsilon", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.square", "keras.square", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.max", "keras.sum", "keras.sum", "keras.square", "keras.square", "keras.max", "keras.sum", "keras.sum"], "function", ["None"], ["", "def", "correlation_coefficient", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "max_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "max", "(", "K", ".", "max", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "\n", "sum_y_true", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "sum_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_true", "/=", "(", "sum_y_true", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "y_pred", "/=", "(", "sum_y_pred", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "N", "=", "shape_r_out", "*", "shape_c_out", "\n", "sum_prod", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_x", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_y", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_x_square", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "y_true", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_y_square", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "y_pred", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "\n", "num", "=", "sum_prod", "-", "(", "(", "sum_x", "*", "sum_y", ")", "/", "N", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "(", "sum_x_square", "-", "K", ".", "square", "(", "sum_x", ")", "/", "N", ")", "*", "(", "sum_y_square", "-", "K", ".", "square", "(", "sum_y", ")", "/", "N", ")", ")", "\n", "\n", "# print(\"num is :\", num)", "\n", "# print(\"den is :\", den)", "\n", "return", "-", "2", "*", "num", "/", "den", "# weight: -2", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.New_Loss.nss": [[65, 82], ["keras.repeat_elements", "keras.batch_flatten", "keras.mean", "keras.repeat_elements", "keras.std", "keras.repeat_elements", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.epsilon", "keras.sum", "keras.sum", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.sum", "keras.sum", "keras.max", "keras.expand_dims", "keras.expand_dims", "keras.max"], "function", ["None"], ["", "def", "nss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "max_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "max", "(", "K", ".", "max", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "y_pred_flatten", "=", "K", ".", "batch_flatten", "(", "y_pred", ")", "\n", "\n", "y_mean", "=", "K", ".", "mean", "(", "y_pred_flatten", ",", "axis", "=", "-", "1", ")", "\n", "y_mean", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "expand_dims", "(", "y_mean", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_std", "=", "K", ".", "std", "(", "y_pred_flatten", ",", "axis", "=", "-", "1", ")", "\n", "y_std", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "expand_dims", "(", "y_std", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_pred", "=", "(", "y_pred", "-", "y_mean", ")", "/", "(", "y_std", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "-", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "/", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", "# weight: -1", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.New_Loss.final_loss": [[84, 128], ["tensorflow.InteractiveSession", "y_true.eval.eval", "y_pred.eval.eval", "numpy.expand_dims", "print", "print", "numpy.zeros", "a_2.astype", "numpy.expand_dims", "numpy.zeros", "b_2.astype", "New_Loss.kl_divergence", "New_Loss.correlation_coefficient", "New_Loss.nss", "nss.eval", "kl_divergence.eval", "correlation_coefficient.eval"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.kl_divergence", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.correlation_coefficient", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.nss"], ["", "def", "final_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "\n", "    ", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "y_true", "=", "y_true", ".", "eval", "(", "session", "=", "sess", ")", "\n", "y_pred", "=", "y_pred", ".", "eval", "(", "session", "=", "sess", ")", "\n", "# y_true = sess.run(y_true)", "\n", "\n", "a_1", "=", "np", ".", "expand_dims", "(", "y_true", ",", "axis", "=", "0", ")", "# add the batch_size to channel 0", "\n", "print", "(", "\"a_1 shape :\"", ",", "a_1", ".", "shape", ")", "\n", "print", "(", "\"a_1 is :\"", ",", "a_1", ")", "\n", "a_2", "=", "a_1", "[", ":", ",", ":", ",", ":", ",", "1", "]", "# extract the one of the color channel from 3 channels: one of R/G/B channel", "\n", "a_3", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "240", ",", "320", ")", ")", "\n", "a_3", "[", "0", ",", "0", "]", "=", "a_2", ".", "astype", "(", "np", ".", "float32", ")", "# subset of a_3, the inner element of a_3", "\n", "a_3", "[", "0", ",", "0", "]", "/=", "255.0", "\n", "\n", "b_1", "=", "np", ".", "expand_dims", "(", "y_pred", ",", "axis", "=", "0", ")", "# add the batch_size to channel 0", "\n", "b_2", "=", "b_1", "[", ":", ",", ":", ",", ":", ",", "1", "]", "# extract the one of the color channel from 3 channels: one of R/G/B channel", "\n", "b_3", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "240", ",", "320", ")", ")", "\n", "b_3", "[", "0", ",", "0", "]", "=", "b_2", ".", "astype", "(", "np", ".", "float32", ")", "# subset of b_3, the inner element of b_3", "\n", "b_3", "[", "0", ",", "0", "]", "/=", "255.0", "\n", "\n", "\n", "'''\n    y_pred = cv2.imread('/media/ubuntu/CZHhy/GAN/BorjiGAN/Code/result/SALICON_300_val/0_SM.jpg', 0)\n    b_3 = np.zeros((1, 1, 240, 320))\n    b_3[0, 0] = y_pred.astype(np.float32)\n    b_3[0, 0] /= 255.0\n    '''", "\n", "\n", "\n", "kld", "=", "kl_divergence", "(", "a_3", ",", "b_3", ")", "\n", "cc", "=", "correlation_coefficient", "(", "a_3", ",", "b_3", ")", "\n", "nss_score", "=", "nss", "(", "a_3", ",", "b_3", ")", "\n", "final_loss", "=", "kld", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "+", "cc", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "+", "nss_score", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "'''\n    print(\"KLD is :\", kld.eval()[0][0]/(10))\n    print(\"CC is :\", cc.eval()[0][0]/(-2))\n    print(\"NSS is :\", nss_score.eval()[0][0]/(-1))  \n    print(\"Final Loss is :\", final_loss)\n    '''", "\n", "\n", "return", "final_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.build_dataset_New._image_preprocessing": [[42, 56], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "# if filename.endswith('.jpg'):", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.build_dataset_My._image_preprocessing": [[41, 55], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "# if filename.endswith('.jpg'):", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.version1.build_dataset._image_preprocessing": [[6, 17], ["PIL.Image.open", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.Profiler.__init__": [[42, 46], ["trt.infer.Profiler.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["def", "__init__", "(", "self", ",", "timing_iter", ")", ":", "\n", "        ", "trt", ".", "infer", ".", "Profiler", ".", "__init__", "(", "self", ")", "\n", "self", ".", "timing_iterations", "=", "timing_iter", "\n", "self", ".", "profile", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.Profiler.report_layer_time": [[47, 53], ["next", "run_engine.Profiler.profile.append", "run_engine.Profiler.profile.index"], "methods", ["None"], ["", "def", "report_layer_time", "(", "self", ",", "layerName", ",", "ms", ")", ":", "\n", "        ", "record", "=", "next", "(", "(", "r", "for", "r", "in", "self", ".", "profile", "if", "r", "[", "0", "]", "==", "layerName", ")", ",", "(", "None", ",", "None", ")", ")", "\n", "if", "record", "==", "(", "None", ",", "None", ")", ":", "\n", "            ", "self", ".", "profile", ".", "append", "(", "(", "layerName", ",", "ms", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "profile", "[", "self", ".", "profile", ".", "index", "(", "record", ")", "]", "=", "(", "record", "[", "0", "]", ",", "record", "[", "1", "]", "+", "ms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.Profiler.print_layer_times": [[54, 60], ["range", "print", "len", "print"], "methods", ["None"], ["", "", "def", "print_layer_times", "(", "self", ")", ":", "\n", "        ", "totalTime", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "profile", ")", ")", ":", "\n", "            ", "print", "(", "\"{:40.40} {:4.3f}ms\"", ".", "format", "(", "self", ".", "profile", "[", "i", "]", "[", "0", "]", ",", "self", ".", "profile", "[", "i", "]", "[", "1", "]", "/", "self", ".", "timing_iterations", ")", ")", "\n", "totalTime", "+=", "self", ".", "profile", "[", "i", "]", "[", "1", "]", "\n", "", "print", "(", "\"Time over all layers: {:4.2f} ms per iteration\"", ".", "format", "(", "totalTime", "/", "self", ".", "timing_iterations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.get_input_output_names": [[62, 81], ["trt_engine.get_nb_bindings", "range", "trt_engine.get_binding_dimensions().to_DimsCHW", "trt_engine.get_binding_name", "trt_engine.get_binding_data_type", "trt_engine.binding_is_input", "print", "print", "maps.append", "print", "maps.append", "print", "trt_engine.get_binding_dimensions", "str", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.W", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.H", "str", "trt_engine.get_binding_dimensions().to_DimsCHW.C"], "function", ["None"], ["", "", "def", "get_input_output_names", "(", "trt_engine", ")", ":", "\n", "    ", "nbindings", "=", "trt_engine", ".", "get_nb_bindings", "(", ")", ";", "\n", "maps", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "0", ",", "nbindings", ")", ":", "\n", "        ", "dims", "=", "trt_engine", ".", "get_binding_dimensions", "(", "b", ")", ".", "to_DimsCHW", "(", ")", "\n", "name", "=", "trt_engine", ".", "get_binding_name", "(", "b", ")", "\n", "type", "=", "trt_engine", ".", "get_binding_data_type", "(", "b", ")", "\n", "\n", "if", "(", "trt_engine", ".", "binding_is_input", "(", "b", ")", ")", ":", "\n", "            ", "maps", ".", "append", "(", "name", ")", "\n", "print", "(", "\"Found input: \"", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "maps", ".", "append", "(", "name", ")", "\n", "print", "(", "\"Found output: \"", ",", "name", ")", "\n", "\n", "", "print", "(", "\"shape=\"", "+", "str", "(", "dims", ".", "C", "(", ")", ")", "+", "\" , \"", "+", "str", "(", "dims", ".", "H", "(", ")", ")", "+", "\" , \"", "+", "str", "(", "dims", ".", "W", "(", ")", ")", ")", "\n", "print", "(", "\"dtype=\"", "+", "str", "(", "type", ")", ")", "\n", "", "return", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.create_memory": [[82, 101], ["engine.get_binding_index", "print", "engine.get_binding_dimensions().to_DimsCHW", "engine.binding_is_input", "cuda.mem_alloc", "cuda.memcpy_htod", "buf.insert", "mem.append", "AttributeError", "numpy.random.uniform().astype", "int", "str", "engine.get_binding_dimensions", "engine.get_binding_dimensions().to_DimsCHW.W", "numpy.dtype", "engine.get_binding_dimensions().to_DimsCHW.C", "engine.get_binding_dimensions().to_DimsCHW.H", "numpy.random.uniform"], "function", ["None"], ["", "def", "create_memory", "(", "engine", ",", "name", ",", "buf", ",", "mem", ",", "batchsize", ",", "inp", ",", "inp_idx", ")", ":", "\n", "    ", "binding_idx", "=", "engine", ".", "get_binding_index", "(", "name", ")", "\n", "if", "binding_idx", "==", "-", "1", ":", "\n", "        ", "raise", "AttributeError", "(", "\"Not a valid binding\"", ")", "\n", "", "print", "(", "\"Binding: name={}, bindingIndex={}\"", ".", "format", "(", "name", ",", "str", "(", "binding_idx", ")", ")", ")", "\n", "dims", "=", "engine", ".", "get_binding_dimensions", "(", "binding_idx", ")", ".", "to_DimsCHW", "(", ")", "\n", "eltCount", "=", "dims", ".", "C", "(", ")", "*", "dims", ".", "H", "(", ")", "*", "dims", ".", "W", "(", ")", "*", "batchsize", "\n", "\n", "if", "engine", ".", "binding_is_input", "(", "binding_idx", ")", ":", "\n", "        ", "h_mem", "=", "inp", "[", "inp_idx", "]", "\n", "inp_idx", "=", "inp_idx", "+", "1", "\n", "", "else", ":", "\n", "        ", "h_mem", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "255.0", ",", "eltCount", ")", ".", "astype", "(", "np", ".", "dtype", "(", "'f4'", ")", ")", "\n", "\n", "", "d_mem", "=", "cuda", ".", "mem_alloc", "(", "eltCount", "*", "4", ")", "\n", "cuda", ".", "memcpy_htod", "(", "d_mem", ",", "h_mem", ")", "\n", "buf", ".", "insert", "(", "binding_idx", ",", "int", "(", "d_mem", ")", ")", "\n", "mem", ".", "append", "(", "d_mem", ")", "\n", "return", "inp_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.time_inference": [[104, 121], ["run_engine.get_input_output_names", "engine.create_execution_context", "run_engine.Profiler", "engine.create_execution_context.set_profiler", "range", "run_engine.Profiler.print_layer_times", "engine.create_execution_context.destroy", "run_engine.create_memory", "engine.create_execution_context.execute"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.get_input_output_names", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.Profiler.print_layer_times", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.create_memory"], ["", "def", "time_inference", "(", "engine", ",", "batch_size", ",", "inp", ")", ":", "\n", "    ", "bindings", "=", "[", "]", "\n", "mem", "=", "[", "]", "\n", "inp_idx", "=", "0", "\n", "for", "io", "in", "get_input_output_names", "(", "engine", ")", ":", "\n", "        ", "inp_idx", "=", "create_memory", "(", "engine", ",", "io", ",", "bindings", ",", "mem", ",", "\n", "batch_size", ",", "inp", ",", "inp_idx", ")", "\n", "\n", "", "context", "=", "engine", ".", "create_execution_context", "(", ")", "\n", "g_prof", "=", "Profiler", "(", "500", ")", "\n", "context", ".", "set_profiler", "(", "g_prof", ")", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "        ", "context", ".", "execute", "(", "batch_size", ",", "bindings", ")", "\n", "", "g_prof", ".", "print_layer_times", "(", ")", "\n", "\n", "context", ".", "destroy", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.convert_to_datatype": [[123, 133], ["print", "str"], "function", ["None"], ["", "def", "convert_to_datatype", "(", "v", ")", ":", "\n", "    ", "if", "v", "==", "8", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "INT8", "\n", "", "elif", "v", "==", "16", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "HALF", "\n", "", "elif", "v", "==", "32", ":", "\n", "        ", "return", "trt", ".", "infer", ".", "DataType", ".", "FLOAT", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"ERROR: Invalid model data type bit depth: \"", "+", "str", "(", "v", ")", ")", "\n", "return", "trt", ".", "infer", ".", "DataType", ".", "INT8", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.run_trt_engine": [[134, 137], ["trt.utils.load_engine", "run_engine.time_inference"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.time_inference"], ["", "", "def", "run_trt_engine", "(", "engine_file", ",", "bs", ",", "it", ")", ":", "\n", "    ", "engine", "=", "trt", ".", "utils", ".", "load_engine", "(", "G_LOGGER", ",", "engine_file", ")", "\n", "time_inference", "(", "engine", ",", "bs", ",", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.run_onnx": [[138, 174], ["onnxparser.create_onnxconfig", "onnxparser.create_onnxconfig.set_model_file_name", "onnxparser.create_onnxconfig.set_model_dtype", "onnxparser.create_onnxparser", "onnxparser.create_onnxconfig.get_model_dtype", "onnxparser.create_onnxconfig.get_model_file_name", "onnxparser.create_onnxparser.parse", "onnxparser.create_onnxparser.report_parsing_info", "onnxparser.create_onnxparser.convert_to_trtnetwork", "onnxparser.create_onnxparser.get_trtnetwork", "trt.infer.create_infer_builder", "trt.infer.create_infer_builder.set_max_batch_size", "trt.infer.create_infer_builder.set_max_workspace_size", "print", "print", "trt.infer.create_infer_builder.build_cuda_engine", "print", "run_engine.time_inference", "run_engine.convert_to_datatype", "onnxparser.create_onnxconfig.get_model_dtype", "print", "trt.infer.create_infer_builder.set_half2_mode", "onnxparser.create_onnxconfig.get_model_dtype", "print", "trt.infer.create_infer_builder.set_int8_mode", "print"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.options.base_options_old3.BaseOptions.parse", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.time_inference", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.GazeGAN_using_CSC.run_engine.convert_to_datatype"], ["", "def", "run_onnx", "(", "onnx_file", ",", "data_type", ",", "bs", ",", "inp", ")", ":", "\n", "# Create onnx_config", "\n", "    ", "apex", "=", "onnxparser", ".", "create_onnxconfig", "(", ")", "\n", "apex", ".", "set_model_file_name", "(", "onnx_file", ")", "\n", "apex", ".", "set_model_dtype", "(", "convert_to_datatype", "(", "data_type", ")", ")", "\n", "\n", "# create parser", "\n", "trt_parser", "=", "onnxparser", ".", "create_onnxparser", "(", "apex", ")", "\n", "assert", "(", "trt_parser", ")", "\n", "data_type", "=", "apex", ".", "get_model_dtype", "(", ")", "\n", "onnx_filename", "=", "apex", ".", "get_model_file_name", "(", ")", "\n", "trt_parser", ".", "parse", "(", "onnx_filename", ",", "data_type", ")", "\n", "trt_parser", ".", "report_parsing_info", "(", ")", "\n", "trt_parser", ".", "convert_to_trtnetwork", "(", ")", "\n", "trt_network", "=", "trt_parser", ".", "get_trtnetwork", "(", ")", "\n", "assert", "(", "trt_network", ")", "\n", "\n", "# create infer builder", "\n", "trt_builder", "=", "trt", ".", "infer", ".", "create_infer_builder", "(", "G_LOGGER", ")", "\n", "trt_builder", ".", "set_max_batch_size", "(", "max_batch_size", ")", "\n", "trt_builder", ".", "set_max_workspace_size", "(", "max_workspace_size", ")", "\n", "\n", "if", "(", "apex", ".", "get_model_dtype", "(", ")", "==", "trt", ".", "infer", ".", "DataType_kHALF", ")", ":", "\n", "        ", "print", "(", "\"-------------------  Running FP16 -----------------------------\"", ")", "\n", "trt_builder", ".", "set_half2_mode", "(", "True", ")", "\n", "", "elif", "(", "apex", ".", "get_model_dtype", "(", ")", "==", "trt", ".", "infer", ".", "DataType_kINT8", ")", ":", "\n", "        ", "print", "(", "\"-------------------  Running INT8 -----------------------------\"", ")", "\n", "trt_builder", ".", "set_int8_mode", "(", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"-------------------  Running FP32 -----------------------------\"", ")", "\n", "\n", "", "print", "(", "\"----- Builder is Done -----\"", ")", "\n", "print", "(", "\"----- Creating Engine -----\"", ")", "\n", "trt_engine", "=", "trt_builder", ".", "build_cuda_engine", "(", "trt_network", ")", "\n", "print", "(", "\"----- Engine is built -----\"", ")", "\n", "time_inference", "(", "engine", ",", "bs", ",", "inp", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.DCN_lib.test_modulated_My_1.example_dconv": [[23, 65], ["torch.randn().cuda", "torch.randn().cuda", "modules.modulated_dcn.ModulatedDeformConvPack().cuda", "ModulatedDeformConvPack().cuda.", "ModulatedDeformConvPack().cuda.", "print", "ModulatedDeformConvPack().cuda.", "print", "torch.randn().cuda.register_hook", "dcn.new", "output.new.data.uniform_", "error.backward", "print", "print", "print", "print", "torch.randn", "torch.randn", "modules.modulated_dcn.ModulatedDeformConvPack", "dcn.size"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward"], ["def", "example_dconv", "(", ")", ":", "\n", "    ", "from", "modules", ".", "modulated_dcn", "import", "ModulatedDeformConv", "\n", "# input = torch.randn(2, 64, 128, 128).cuda()", "\n", "input", "=", "torch", ".", "randn", "(", "(", "2", ",", "64", ",", "128", ",", "128", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "# input = Variable( torch.randn(2, 64, 128, 128).cuda(), requires_grad=True)", "\n", "\n", "# wrap all things (offset and mask) in DCN", "\n", "dcn", "=", "ModulatedDeformConvPack", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "output_1", "=", "dcn", "(", "input", ")", "\n", "output_2", "=", "dcn", "(", "output_1", ")", "\n", "print", "(", "\"output_2.requires_grad:\"", ",", "output_2", ".", "requires_grad", ")", "\n", "output", "=", "dcn", "(", "output_2", ")", "\n", "\n", "print", "(", "\"The hooked gradient information of input:\"", ")", "\n", "input", ".", "register_hook", "(", "print", ")", "# MyOp: The autograd will calculate all gradient of all leave points as default. ", "\n", "# However, for saving storage memory, these gradients will be released automatically.", "\n", "# Therefore, we could use the \"register_hook\" function to see the gradient of these released gradient information", "\n", "# Notice that the \"register_hook\" functions should be put before the \"error.backward()\" sentence!!!!", "\n", "'''\n    print(\"The hooked gradient information of output_1:\")\n    output_1.register_hook(print)\n    print(\"The hooked gradient information of output_2:\")\n    output_2.register_hook(print)\n    print(\"The hooked gradient information of output:\")\n    output.register_hook(print)\n    '''", "\n", "\n", "# output = output_3", "\n", "# print(\"output is:\", output, output.shape)", "\n", "targert", "=", "output", ".", "new", "(", "*", "output", ".", "size", "(", ")", ")", "# MyOp Constructs a new tensor of the same data type as self tensor.", "\n", "# The targert is a \"fake\" and \"random\" grount-truth label for demo of loss backward.", "\n", "# print(\"target is:\", targert, targert.shape)", "\n", "targert", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "# print(\"normalized target is:\", targert, targert.shape)", "\n", "error", "=", "(", "targert", "-", "output", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "output", ".", "shape", ")", "\n", "\n", "\n", "print", "(", "\"data of input is:\"", ",", "input", ".", "data", ")", "\n", "print", "(", "\"gradient of input is:\"", ",", "input", ".", "grad", ")", "\n", "print", "(", "\"gradient of output_2 is:\"", ",", "output_2", ".", "grad", ")", "\n", "# print(\"data of gradient of input is:\", input.grad.data)", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.DCN_lib.test_modulated.example_dconv": [[21, 32], ["torch.randn().cuda", "torch.randn().cuda", "modules.modulated_dcn.ModulatedDeformConvPack().cuda", "ModulatedDeformConvPack().cuda.", "dcn.new", "output.new.data.uniform_", "error.backward", "print", "torch.randn", "torch.randn", "modules.modulated_dcn.ModulatedDeformConvPack", "dcn.size"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward"], ["def", "example_dconv", "(", ")", ":", "\n", "    ", "from", "modules", ".", "modulated_dcn", "import", "ModulatedDeformConv", "\n", "input", "=", "torch", ".", "randn", "(", "2", ",", "64", ",", "128", ",", "128", ")", ".", "cuda", "(", ")", "\n", "# wrap all things (offset and mask) in DCN", "\n", "dcn", "=", "ModulatedDeformConvPack", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "output", "=", "dcn", "(", "input", ")", "\n", "targert", "=", "output", ".", "new", "(", "*", "output", ".", "size", "(", ")", ")", "\n", "targert", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "error", "=", "(", "targert", "-", "output", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "output", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.DCN_lib.test_modulated.example_dpooling": [[33, 75], ["torch.randn().cuda", "torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.cat", "torch.randn().cuda", "torch.randn().cuda", "modules.modulated_dcn.DeformRoIPooling().cuda", "modules.modulated_dcn.DeformRoIPooling().cuda", "DeformRoIPooling().cuda.", "DeformRoIPooling().cuda.", "print", "print", "pooling.new", "out.new.data.uniform_", "dpooling.new", "dout.new.data.uniform_", "e.backward", "e.backward", "torch.randn", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randn", "torch.randn", "modules.modulated_dcn.DeformRoIPooling", "modules.modulated_dcn.DeformRoIPooling", "pooling.size", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward"], ["", "def", "example_dpooling", "(", ")", ":", "\n", "    ", "from", "modules", ".", "modulated_dcn", "import", "ModulatedDeformRoIPoolingPack", "\n", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "randn", "(", "20", ",", "2", ",", "7", ",", "7", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "offset", ".", "requires_grad", "=", "True", "\n", "\n", "# normal roi_align", "\n", "pooling", "=", "DeformRoIPooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "True", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "# deformable pooling", "\n", "dpooling", "=", "DeformRoIPooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "pooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "dout", "=", "dpooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "print", "(", "out", ".", "shape", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n", "target_out", "=", "out", ".", "new", "(", "*", "out", ".", "size", "(", ")", ")", "\n", "target_out", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "target_dout", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target_dout", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "e", "=", "(", "target_out", "-", "out", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "e", "=", "(", "target_dout", "-", "dout", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.DCN_lib.test_modulated.example_mdpooling": [[76, 102], ["torch.randn().cuda", "torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.cat", "modules.modulated_dcn.ModulatedDeformRoIPoolingPack().cuda", "range", "ModulatedDeformRoIPoolingPack().cuda.", "dpooling.new", "dout.new.data.uniform_", "error.backward", "print", "torch.randn", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "modules.modulated_dcn.ModulatedDeformRoIPoolingPack", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward"], ["", "def", "example_mdpooling", "(", ")", ":", "\n", "    ", "from", "modules", ".", "modulated_dcn", "import", "ModulatedDeformRoIPoolingPack", "\n", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# mdformable pooling (V2)", "\n", "dpooling", "=", "ModulatedDeformRoIPoolingPack", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "dout", "=", "dpooling", "(", "input", ",", "rois", ")", "\n", "target", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "error", "=", "(", "target", "-", "dout", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.DeformConvFunction.__init__": [[29, 36], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", "=", "1", ",", "im2col_step", "=", "64", ")", ":", "\n", "        ", "super", "(", "DeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "im2col_step", "=", "im2col_step", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.DeformConvFunction.forward": [[37, 62], ["DCN_lib._ext.deform_conv.DeformConvFunction.save_for_backward", "input.new", "input.new", "input.new", "isinstance", "min", "DCN_lib._ext.deform_conv.deform_conv_forward_cuda", "DCN_lib._ext.deform_conv.DeformConvFunction._output_size", "weight.size", "weight.size", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.DeformConvFunction._output_size"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "weight", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_output_size", "(", "input", ",", "weight", ")", ")", "\n", "\n", "self", ".", "bufs_", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "input", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "input", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "cur_im2col_step", "=", "min", "(", "self", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv", ".", "deform_conv_forward_cuda", "(", "\n", "input", ",", "weight", ",", "offset", ",", "output", ",", "self", ".", "bufs_", "[", "0", "]", ",", "self", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.DeformConvFunction.backward": [[63, 102], ["isinstance", "min", "input.new().zero_", "offset.new().zero_", "DCN_lib._ext.deform_conv.deform_conv_backward_input_cuda", "weight.new().zero_", "DCN_lib._ext.deform_conv.deform_conv_backward_parameters_cuda", "isinstance", "isinstance", "weight.size", "weight.size", "weight.size", "weight.size", "input.new", "offset.new", "weight.new", "input.size", "offset.size", "weight.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "self", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "grad_output", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "grad_output", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "grad_output", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "cur_im2col_step", "=", "min", "(", "self", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", "or", "self", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "input", ".", "new", "(", "*", "input", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "deform_conv", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "\n", "grad_offset", ",", "weight", ",", "self", ".", "bufs_", "[", "0", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "\n", "\n", "", "if", "self", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "weight", ".", "new", "(", "*", "weight", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "deform_conv", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "\n", "grad_weight", ",", "self", ".", "bufs_", "[", "0", "]", ",", "self", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "1", ",", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "grad_input", ",", "grad_offset", ",", "grad_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.DeformConvFunction._output_size": [[103, 118], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["None"], ["", "def", "_output_size", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "self", ".", "padding", "[", "d", "]", "\n", "kernel", "=", "self", ".", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride", "=", "self", ".", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"convolution input is too small (output would be {})\"", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.deform_conv_function": [[9, 26], ["deform_conv.DeformConvFunction", "DeformConvFunction.", "ValueError", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "input.dim", "input.dim"], "function", ["None"], ["def", "deform_conv_function", "(", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "\n", "    ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n", "", "f", "=", "DeformConvFunction", "(", "\n", "_pair", "(", "stride", ")", ",", "_pair", "(", "padding", ")", ",", "_pair", "(", "dilation", ")", ",", "deform_groups", ",", "im2col_step", ")", "\n", "return", "f", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.ModulatedDeformConvFunction.__init__": [[14, 20], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.ModulatedDeformConvFunction.forward": [[21, 38], ["input.new", "DCN_lib._ext.modulated_dcn.modulated_deform_conv_cuda_forward", "modulated_dcn_func.ModulatedDeformConvFunction.save_for_backward", "input.new", "input.new", "modulated_dcn_func.ModulatedDeformConvFunction._infer_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", ":", "\n", "        ", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "input", ",", "weight", ")", ")", "\n", "self", ".", "_bufs", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "\n", "_backend", ".", "modulated_deform_conv_cuda_forward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "self", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "mask", ",", "\n", "output", ",", "self", ".", "_bufs", "[", "1", "]", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "\n", "self", ".", "stride", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.ModulatedDeformConvFunction.backward": [[39, 62], ["input.new().zero_", "offset.new().zero_", "mask.new().zero_", "weight.new().zero_", "bias.new().zero_", "DCN_lib._ext.modulated_dcn.modulated_deform_conv_cuda_backward", "input.new", "offset.new", "mask.new", "weight.new", "bias.new", "input.size", "offset.size", "mask.size", "weight.size", "bias.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "self", ".", "saved_tensors", "\n", "grad_input", "=", "input", ".", "new", "(", "*", "input", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_mask", "=", "mask", ".", "new", "(", "*", "mask", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_weight", "=", "weight", ".", "new", "(", "*", "weight", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_bias", "=", "bias", ".", "new", "(", "*", "bias", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "_backend", ".", "modulated_deform_conv_cuda_backward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "self", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "mask", ",", "\n", "self", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "grad_weight", ",", "\n", "grad_bias", ",", "grad_offset", ",", "\n", "grad_mask", ",", "grad_output", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "\n", "self", ".", "stride", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n", "return", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.ModulatedDeformConvFunction._infer_shape": [[63, 73], ["input.size", "weight.size"], "methods", ["None"], ["", "def", "_infer_shape", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "self", ".", "padding", "-", "\n", "(", "self", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "self", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "self", ".", "padding", "-", "(", "self", ".", "dilation", "*", "\n", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "self", ".", "stride", "+", "1", "\n", "return", "(", "n", ",", "channels_out", ",", "height_out", ",", "width_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.__init__": [[77, 97], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPoolingFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n", "assert", "self", ".", "trans_std", ">=", "0.0", "and", "self", ".", "trans_std", "<=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.forward": [[98, 119], ["data.new", "data.new", "DCN_lib._ext.modulated_dcn.deform_psroi_pooling_cuda_forward", "modulated_dcn_func.DeformRoIPoolingFunction._infer_shape", "modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "if", "not", "data", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "data", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "data", ",", "rois", ")", ")", "\n", "output_count", "=", "data", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "data", ",", "rois", ")", ")", "\n", "_backend", ".", "deform_psroi_pooling_cuda_forward", "(", "data", ",", "rois", ",", "offset", ",", "\n", "output", ",", "output_count", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "output_dim", ",", "self", ".", "group_size", ",", "\n", "self", ".", "pooled_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "\n", "# if data.requires_grad or rois.requires_grad or offset.requires_grad:", "\n", "#     self.save_for_backward(data, rois, offset, output_count)", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "rois", "=", "rois", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "output_count", "=", "output_count", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward": [[120, 148], ["data.new().zero_", "offset.new().zero_", "DCN_lib._ext.modulated_dcn.deform_psroi_pooling_cuda_backward", "torch.zeros().cuda", "data.new", "offset.new", "torch.zeros", "data.size", "offset.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# data, rois, offset, output_count = self.saved_tensors", "\n", "", "data", "=", "self", ".", "data", "\n", "rois", "=", "self", ".", "rois", "\n", "offset", "=", "self", ".", "offset", "\n", "output_count", "=", "self", ".", "output_count", "\n", "grad_input", "=", "data", ".", "new", "(", "*", "data", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "_backend", ".", "deform_psroi_pooling_cuda_backward", "(", "grad_output", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output_count", ",", "\n", "grad_input", ",", "\n", "grad_offset", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "return", "grad_input", ",", "torch", ".", "zeros", "(", "rois", ".", "shape", ")", ".", "cuda", "(", ")", ",", "grad_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape": [[149, 154], ["None"], "methods", ["None"], ["", "def", "_infer_shape", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "# _, c, h, w = data.shape[:4]", "\n", "        ", "c", "=", "data", ".", "shape", "[", "1", "]", "\n", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "return", "(", "n", ",", "self", ".", "output_dim", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.deform_conv.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modulated_dcn.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.deform_conv.DeformConv.__init__": [[12, 33], ["torch.nn.modules.module.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConv.reset_parameters"], ["stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "\n", "    ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n", "", "f", "=", "DeformConvFunction", "(", "\n", "_pair", "(", "stride", ")", ",", "_pair", "(", "padding", ")", ",", "_pair", "(", "dilation", ")", ",", "deform_groups", ",", "im2col_step", ")", "\n", "return", "f", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "\n", "", "class", "DeformConvFunction", "(", "Function", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", "=", "1", ",", "im2col_step", "=", "64", ")", ":", "\n", "        ", "super", "(", "DeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.deform_conv.DeformConv.reset_parameters": [[34, 40], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "weight", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_output_size", "(", "input", ",", "weight", ")", ")", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.deform_conv.DeformConv.forward": [[41, 45], ["DCN_lib.functions.deform_conv_function"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.functions.deform_conv.deform_conv_function"], ["\n", "self", ".", "bufs_", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConv.__init__": [[16, 33], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "modulated_dcn.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ",", "no_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "no_bias", "=", "no_bias", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "if", "self", ".", "no_bias", ":", "\n", "            ", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConv.reset_parameters": [[34, 41], ["modulated_dcn.ModulatedDeformConv.weight.data.uniform_", "modulated_dcn.ModulatedDeformConv.bias.data.zero_", "math.sqrt"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConv.forward": [[42, 45], ["DCN_lib.functions.modulated_dcn_func.ModulatedDeformConvFunction", "DCN_lib.functions.modulated_dcn_func.ModulatedDeformConvFunction."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "func", "=", "ModulatedDeformConvFunction", "(", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "deformable_groups", ")", "\n", "return", "func", "(", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConvPack.__init__": [[49, 62], ["modulated_dcn.ModulatedDeformConv.__init__", "torch.nn.Conv2d", "modulated_dcn.ModulatedDeformConvPack.init_offset"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ",", "no_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ",", "no_bias", ")", "\n", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", "padding", "=", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConvPack.init_offset": [[63, 66], ["modulated_dcn.ModulatedDeformConvPack.conv_offset_mask.weight.data.zero_", "modulated_dcn.ModulatedDeformConvPack.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformConvPack.forward": [[67, 74], ["modulated_dcn.ModulatedDeformConvPack.conv_offset_mask", "torch.chunk", "torch.cat", "torch.sigmoid", "DCN_lib.functions.modulated_dcn_func.ModulatedDeformConvFunction", "DCN_lib.functions.modulated_dcn_func.ModulatedDeformConvFunction."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "input", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "func", "=", "ModulatedDeformConvFunction", "(", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "deformable_groups", ")", "\n", "return", "func", "(", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.DeformRoIPooling.__init__": [[78, 104], ["torch.nn.Module.__init__", "DCN_lib.functions.modulated_dcn_func.DeformRoIPoolingFunction"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "self", ".", "func", "=", "DeformRoIPoolingFunction", "(", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.DeformRoIPooling.forward": [[105, 110], ["modulated_dcn.DeformRoIPooling.func", "data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new", "(", ")", "\n", "", "return", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.__init__": [[113, 160], ["modulated_dcn.DeformRoIPooling.__init__", "DCN_lib.functions.modulated_dcn_func.DeformRoIPoolingFunction", "torch.nn.Sequential", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc[].weight.data.zero_", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc[].bias.data.zero_", "torch.nn.Sequential", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc[].weight.data.zero_", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_dim", "=", "1024", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformRoIPoolingPack", ",", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", ",", "\n", "part_size", ",", "\n", "sample_per_part", ",", "\n", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_dim", "=", "deform_fc_dim", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "func_offset", "=", "DeformRoIPoolingFunction", "(", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "True", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "2", ")", "\n", ")", "\n", "self", ".", "offset_fc", "[", "4", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "4", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward": [[161, 175], ["modulated_dcn.ModulatedDeformRoIPoolingPack.func", "data.new", "data.new", "modulated_dcn.ModulatedDeformRoIPoolingPack.func_offset", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc", "offset.view.view.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc", "mask.view.view.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new", "(", ")", "\n", "x", "=", "self", ".", "func_offset", "(", "data", ",", "rois", ",", "offset", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "mask", "=", "self", ".", "mask_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "1", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "feat", "=", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "*", "mask", "\n", "return", "feat", "\n", "", "return", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.build_dataset_New_3._image_preprocessing": [[363, 377], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New_2.Pix2pix.__init__": [[10, 47], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator_New_2.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ichan", ",", "ochan", ",", "l1_weight", "=", "100.", ",", "lr", "=", "0.0002", ",", "beta1", "=", "0.5", ")", ":", "\n", "# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "# self._fake_d = Discriminator(tf.concat([self._d_inputs_a, self._g._decoder['cl9']['fmap']], axis=3), self._is_training, reuse=True)", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "\n", "#self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._decoder['cl9']['fmap']))", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ")", ")", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New_2.Pix2pix.train_step": [[48, 54], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "_", ",", "gloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New_2.Pix2pix.sample_generator": [[58, 60], ["sess.run"], "methods", ["None"], ["", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New.Pix2pix.__init__": [[73, 279], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator_New.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.divide", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.nn.moments", "tensorflow.nn.moments", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.nn.moments", "tensorflow.where", "tensorflow.gather_nd", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.to_float", "tensorflow.shape", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.to_float", "tensorflow.histogram_fixed_width", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.to_float", "tensorflow.reduce_min", "tensorflow.to_float", "tensorflow.divide", "tensorflow.add", "tensorflow.histogram_fixed_width", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.to_float", "tensorflow.reduce_min", "tensorflow.to_float", "tensorflow.divide", "tensorflow.add", "tensorflow.square", "tensorflow.add", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.add", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.add", "tensorflow.add", "tensorflow.multiply", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.subtract", "tensorflow.multiply", "tensorflow.subtract", "tensorflow.multiply", "tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.add", "tensorflow.add", "tensorflow.square", "tensorflow.square", "tensorflow.add", "tensorflow.divide", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs"], "methods", ["None"], ["# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "# self._fake_d = Discriminator(tf.concat([self._d_inputs_a, self._g._decoder['cl9']['fmap']], axis=3), self._is_training, reuse=True)", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "\n", "#self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._decoder['cl9']['fmap']))", "\n", "# self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._resout['rsl7']['fmap']))", "\n", "# with tf.Session() as sess:", "\n", "#  img_true = (self._d_inputs_b).eval()", "\n", "#  img_pred = (self._g._resout['rsl7']['fmap']).eval()", "\n", "# img_true = (self._d_inputs_b)", "\n", "# sess.run(", "\n", "# img_true = (self._g._resout['rsl7']['fmap'])", "\n", "# img_pred = (self._g._resout['rsl7']['fmap'])", "\n", "# print(\"img_true shape:\", img_true.shape)", "\n", "# Saliency_Loss = New_Loss.final_loss(img_true, img_pred)", "\n", "\n", "\n", "# img_true_tensor = tf.to_float(self._d_inputs_b[0,:,:,1], name='ToFloat')", "\n", "img_true_tensor", "=", "tf", ".", "to_float", "(", "self", ".", "_d_inputs_b", ",", "name", "=", "'ToFloat'", ")", "\n", "# img_true_tensor = tf.to_double(self._d_inputs_b, name='ToDouble')", "\n", "# img_pred_tensor = tf.to_float(self._g._resout['rsl7']['fmap'][0,:,:,1], name='ToFloat')", "\n", "img_pred_tensor", "=", "tf", ".", "to_float", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "name", "=", "'ToFloat'", ")", "\n", "img_pred_tensor", "=", "img_pred_tensor", "+", "1", "# normalize because generator use tanh activation in its output layer", "\n", "# img_pred_tensor = tf.to_float(self._d_inputs_b, name='ToFloat') # In this case, KLD ~= 0", "\n", "\n", "# sum_true = tf.constant(tf.reduce_sum(img_true_tensor))", "\n", "# sum_pred = tf.constant(tf.reduce_sum(img_pred_tensor))", "\n", "big1", "=", "tf", ".", "reduce_max", "(", "img_true_tensor", ")", "\n", "sml1", "=", "tf", ".", "reduce_min", "(", "img_true_tensor", ")", "\n", "img_true_tensor", "=", "(", "img_true_tensor", "-", "sml1", ")", "/", "(", "big1", "-", "sml1", ")", "\n", "big2", "=", "tf", ".", "reduce_max", "(", "img_pred_tensor", ")", "\n", "sml2", "=", "tf", ".", "reduce_min", "(", "img_pred_tensor", ")", "\n", "img_pred_tensor", "=", "(", "img_pred_tensor", "-", "sml2", ")", "/", "(", "big2", "-", "sml2", ")", "\n", "\n", "# print(\"img_true_tensor is :::::::\", img_true_tensor)", "\n", "sum_true", "=", "tf", ".", "reduce_sum", "(", "img_true_tensor", ")", "\n", "# print(\"sum_true is ::::::::::\", sum_true)", "\n", "sum_pred", "=", "tf", ".", "reduce_sum", "(", "img_pred_tensor", ")", "\n", "\n", "img_true_tensor", "=", "img_true_tensor", "/", "sum_true", "\n", "img_pred_tensor", "=", "img_pred_tensor", "/", "sum_pred", "\n", "# epsilon = tf.constant(1e-08)", "\n", "epsilon", "=", "1e-08", "\n", "epsilon", "=", "tf", ".", "to_float", "(", "epsilon", ",", "name", "=", "'ToFloat'", ")", "\n", "map2", "=", "img_true_tensor", "\n", "map1", "=", "img_pred_tensor", "\n", "\n", "KLD_1", "=", "tf", ".", "divide", "(", "map2", ",", "tf", ".", "add", "(", "map1", ",", "epsilon", ",", "name", "=", "None", ")", ",", "name", "=", "None", ")", "\n", "KLD_2", "=", "tf", ".", "log", "(", "tf", ".", "add", "(", "epsilon", ",", "KLD_1", ",", "name", "=", "None", ")", ",", "name", "=", "None", ")", "\n", "KLD_3", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "map2", ",", "KLD_2", ",", "name", "=", "None", ")", ")", "\n", "# print(\"KLD is :\", KLD_3)", "\n", "\n", "# self.KLD = sum_true # This is just a monitor output, for debugging, for output the variables you want to see, refer to \"example_New.py\" line 47", "\n", "self", ".", "monitor", "=", "sum_true", "# This is just a monitor output, for debugging, for output the variables you want to see, refer to \"example_New.py\" line 47", "\n", "# And pay attention that: we have to add \"self.\" in front of \"monitor\", so that we can calculate it in sess.run (refer to the 172 line of this code)", "\n", "\n", "l2_weight", "=", "100", "\n", "# self._g_loss = -tf.reduce_mean(tf.log(self._fake_d._discriminator['l5']['fmap'])) + l1_weight * tf.reduce_mean(tf.abs(self._d_inputs_b - self._g._resout['rsl7']['fmap']))", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ")", ")", "+", "l2_weight", "*", "KLD_3", "\n", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n", "\n", "\n", "", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n", "# _, gloss_curr = sess.run([self._g_train_step, self._g_loss],", "\n", "#      feed_dict={self._g_inputs : g_inputs, self._d_inputs_a : d_inputs_a,   self._d_inputs_b : d_inputs_b,self._is_training : is_training})        ", "\n", "_", ",", "gloss_curr", ",", "_monitor", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", ",", "self", ".", "monitor", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ",", "_monitor", ")", "\n", "\n", "# def sample_generator(self, sess, g_inputs, is_training=False):", "\n", "#   return sess.run(self._g._decoder['cl9']['fmap'], feed_dict={self._g_inputs : g_inputs, self._is_training : is_training})", "\n", "\n", "", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_resout", "[", "'rsl7'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New.Pix2pix.train_step": [[282, 293], ["sess.run", "sess.run"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix_New.Pix2pix.sample_generator": [[297, 299], ["sess.run"], "methods", ["None"], []], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix.Pix2pix.__init__": [[8, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.generator.Generator", "model.discriminator.Discriminator", "model.discriminator.Discriminator", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ichan", ",", "ochan", ",", "l1_weight", "=", "100.", ",", "lr", "=", "0.0002", ",", "beta1", "=", "0.5", ")", ":", "\n", "# def __init__(self, width, height, ichan, ochan, l1_weight=1000., lr=0.0002, beta1=0.5): # I enlarge the l1_weight to see what will happen", "\n", "        ", "\"\"\"\n            width: image width in pixel.\n            height: image height in pixel.\n            ichan: number of channels used by input images.\n            ochan: number of channels used by output images.\n            l1_weight: L1 loss weight.\n            lr: learning rate for ADAM optimizer.\n            beta1: beta1 parameter for ADAM optimizer.\n        \"\"\"", "\n", "self", ".", "_is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_g_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ichan", "]", ")", "\n", "self", ".", "_d_inputs_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "width", ",", "height", ",", "ochan", "]", ")", "\n", "self", ".", "_g", "=", "Generator", "(", "self", ".", "_g_inputs", ",", "self", ".", "_is_training", ",", "ochan", ")", "\n", "self", ".", "_real_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_d_inputs_b", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ")", "\n", "self", ".", "_fake_d", "=", "Discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "_d_inputs_a", ",", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", ",", "self", ".", "_is_training", ",", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "_g_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "+", "l1_weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "_d_inputs_b", "-", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ")", ")", "\n", "self", ".", "_d_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "_real_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", "+", "tf", ".", "log", "(", "1.0", "-", "self", ".", "_fake_d", ".", "_discriminator", "[", "'l5'", "]", "[", "'fmap'", "]", ")", ")", "\n", "# self._g_loss = tf.reduce_mean(tf.square(self._d_inputs_b - self._g._decoder['cl9']['fmap'])) # set g_loss = mse loss !!!!!", "\n", "# self._d_loss = -tf.reduce_mean(tf.log(self._real_d._discriminator['l5']['fmap']) + tf.log(1.0 - self._fake_d._discriminator['l5']['fmap']))", "\n", "\n", "g_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'G'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "g_update_ops", ")", ":", "\n", "            ", "self", ".", "_g_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_g_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'G'", ")", ")", "\n", "\n", "", "d_update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "'D'", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "d_update_ops", ")", ":", "\n", "            ", "self", ".", "_d_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "beta1", ")", ".", "minimize", "(", "self", ".", "_d_loss", ",", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix.Pix2pix.train_step": [[43, 49], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "g_inputs", ",", "d_inputs_a", ",", "d_inputs_b", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "_", ",", "dloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_d_train_step", ",", "self", ".", "_d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "_", ",", "gloss_curr", "=", "sess", ".", "run", "(", "[", "self", ".", "_g_train_step", ",", "self", ".", "_g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_d_inputs_a", ":", "d_inputs_a", ",", "self", ".", "_d_inputs_b", ":", "d_inputs_b", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "return", "(", "gloss_curr", ",", "dloss_curr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.pix2pix.Pix2pix.sample_generator": [[50, 52], ["sess.run"], "methods", ["None"], ["", "def", "sample_generator", "(", "self", ",", "sess", ",", "g_inputs", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "_g", ".", "_decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ",", "feed_dict", "=", "{", "self", ".", "_g_inputs", ":", "g_inputs", ",", "self", ".", "_is_training", ":", "is_training", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.kl_divergence": [[21, 34], ["keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.epsilon", "keras.epsilon", "keras.sum", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.sum", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.max", "keras.sum", "keras.sum", "keras.log", "keras.max", "keras.sum", "keras.sum", "keras.epsilon", "keras.epsilon"], "function", ["None"], ["shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "\n", "sum_y_true", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "sum_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_true", "/=", "(", "sum_y_true", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "y_pred", "/=", "(", "sum_y_pred", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "10", "*", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "K", ".", "log", "(", "(", "y_true", "/", "(", "y_pred", "+", "K", ".", "epsilon", "(", ")", ")", ")", "+", "K", ".", "epsilon", "(", ")", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "# weight: 10", "\n", "\n", "\n", "# Correlation Coefficient Loss", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.correlation_coefficient": [[37, 63], ["keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sqrt", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.epsilon", "keras.epsilon", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.sum", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.square", "keras.square", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.max", "keras.sum", "keras.sum", "keras.square", "keras.square", "keras.max", "keras.sum", "keras.sum"], "function", ["None"], ["shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "\n", "sum_y_true", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "sum_y_pred", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_true", "/=", "(", "sum_y_true", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "y_pred", "/=", "(", "sum_y_pred", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "N", "=", "shape_r_out", "*", "shape_c_out", "\n", "sum_prod", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_x", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_y", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_x_square", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "y_true", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "sum_y_square", "=", "K", ".", "sum", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "y_pred", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "\n", "num", "=", "sum_prod", "-", "(", "(", "sum_x", "*", "sum_y", ")", "/", "N", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "(", "sum_x_square", "-", "K", ".", "square", "(", "sum_x", ")", "/", "N", ")", "*", "(", "sum_y_square", "-", "K", ".", "square", "(", "sum_y", ")", "/", "N", ")", ")", "\n", "\n", "# print(\"num is :\", num)", "\n", "# print(\"den is :\", den)", "\n", "return", "-", "2", "*", "num", "/", "den", "# weight: -2", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.nss": [[67, 84], ["keras.repeat_elements", "keras.batch_flatten", "keras.mean", "keras.repeat_elements", "keras.std", "keras.repeat_elements", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.repeat_elements", "keras.repeat_elements", "keras.repeat_elements", "keras.epsilon", "keras.sum", "keras.sum", "keras.expand_dims", "keras.expand_dims", "keras.expand_dims", "keras.sum", "keras.sum", "keras.max", "keras.expand_dims", "keras.expand_dims", "keras.max"], "function", ["None"], ["shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "y_pred", "/=", "max_y_pred", "\n", "y_pred_flatten", "=", "K", ".", "batch_flatten", "(", "y_pred", ")", "\n", "\n", "y_mean", "=", "K", ".", "mean", "(", "y_pred_flatten", ",", "axis", "=", "-", "1", ")", "\n", "y_mean", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "expand_dims", "(", "y_mean", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_std", "=", "K", ".", "std", "(", "y_pred_flatten", ",", "axis", "=", "-", "1", ")", "\n", "y_std", "=", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "repeat_elements", "(", "K", ".", "expand_dims", "(", "K", ".", "expand_dims", "(", "y_std", ")", ")", ",", "\n", "shape_r_out", ",", "axis", "=", "-", "1", ")", ")", ",", "shape_c_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "y_pred", "=", "(", "y_pred", "-", "y_mean", ")", "/", "(", "y_std", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "-", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "/", "K", ".", "sum", "(", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", ")", "# weight: -1", "\n", "\n", "\n", "", "def", "final_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.final_loss": [[86, 130], ["tensorflow.InteractiveSession", "y_true.eval.eval", "y_pred.eval.eval", "numpy.expand_dims", "print", "print", "numpy.zeros", "a_2.astype", "numpy.expand_dims", "numpy.zeros", "b_2.astype", "New_Loss.kl_divergence", "New_Loss.correlation_coefficient", "New_Loss.nss", "nss.eval", "kl_divergence.eval", "correlation_coefficient.eval"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.kl_divergence", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.correlation_coefficient", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.New_Loss.nss"], ["\n", "    ", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "y_true", "=", "y_true", ".", "eval", "(", "session", "=", "sess", ")", "\n", "y_pred", "=", "y_pred", ".", "eval", "(", "session", "=", "sess", ")", "\n", "# y_true = sess.run(y_true)", "\n", "\n", "a_1", "=", "np", ".", "expand_dims", "(", "y_true", ",", "axis", "=", "0", ")", "# add the batch_size to channel 0", "\n", "print", "(", "\"a_1 shape :\"", ",", "a_1", ".", "shape", ")", "\n", "print", "(", "\"a_1 is :\"", ",", "a_1", ")", "\n", "a_2", "=", "a_1", "[", ":", ",", ":", ",", ":", ",", "1", "]", "# extract the one of the color channel from 3 channels: one of R/G/B channel", "\n", "a_3", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "240", ",", "320", ")", ")", "\n", "a_3", "[", "0", ",", "0", "]", "=", "a_2", ".", "astype", "(", "np", ".", "float32", ")", "# subset of a_3, the inner element of a_3", "\n", "a_3", "[", "0", ",", "0", "]", "/=", "255.0", "\n", "\n", "b_1", "=", "np", ".", "expand_dims", "(", "y_pred", ",", "axis", "=", "0", ")", "# add the batch_size to channel 0", "\n", "b_2", "=", "b_1", "[", ":", ",", ":", ",", ":", ",", "1", "]", "# extract the one of the color channel from 3 channels: one of R/G/B channel", "\n", "b_3", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "240", ",", "320", ")", ")", "\n", "b_3", "[", "0", ",", "0", "]", "=", "b_2", ".", "astype", "(", "np", ".", "float32", ")", "# subset of b_3, the inner element of b_3", "\n", "b_3", "[", "0", ",", "0", "]", "/=", "255.0", "\n", "\n", "\n", "'''\n    y_pred = cv2.imread('/media/ubuntu/CZHhy/GAN/BorjiGAN/Code/result/SALICON_300_val/0_SM.jpg', 0)\n    b_3 = np.zeros((1, 1, 240, 320))\n    b_3[0, 0] = y_pred.astype(np.float32)\n    b_3[0, 0] /= 255.0\n    '''", "\n", "\n", "\n", "kld", "=", "kl_divergence", "(", "a_3", ",", "b_3", ")", "\n", "cc", "=", "correlation_coefficient", "(", "a_3", ",", "b_3", ")", "\n", "nss_score", "=", "nss", "(", "a_3", ",", "b_3", ")", "\n", "final_loss", "=", "kld", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "+", "cc", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "+", "nss_score", ".", "eval", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "'''\n    print(\"KLD is :\", kld.eval()[0][0]/(10))\n    print(\"CC is :\", cc.eval()[0][0]/(-2))\n    print(\"NSS is :\", nss_score.eval()[0][0]/(-1))  \n    print(\"Final Loss is :\", final_loss)\n    '''", "\n", "\n", "return", "final_loss", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.build_dataset_New._image_preprocessing": [[42, 56], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "# if filename.endswith('.jpg'):", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.build_dataset_My._image_preprocessing": [[41, 55], ["PIL.Image.open", "filename.endswith", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "# if filename.endswith('.jpg'):", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "if", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.versionGitHub.build_dataset._image_preprocessing": [[6, 17], ["PIL.Image.open", "filename.endswith", "PIL.ImageOps.fit", "ImageOps.fit.close", "im.convert.close", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "_image_preprocessing", "(", "filename", ",", "xsize", ",", "ysize", ")", ":", "\n", "    ", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "downsampled_im", "=", "ImageOps", ".", "fit", "(", "im", ",", "(", "xsize", ",", "ysize", ")", ",", "method", "=", "Image", ".", "LANCZOS", ")", "\n", "norm_im", "=", "np", ".", "array", "(", "downsampled_im", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "downsampled_im", ".", "close", "(", ")", "\n", "im", ".", "close", "(", ")", "\n", "return", "norm_im", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator.__init__": [[7, 17], ["tensorflow.variable_scope", "discriminator.Discriminator._build_discriminator", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_discriminator"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "is_training", ",", "stddev", "=", "0.02", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "is_training", "\n", "self", ".", "_stddev", "=", "stddev", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'D'", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "self", ".", "_stddev", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "self", ".", "_center", "=", "center", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_prob", "=", "0.5", "# constant from pix2pix paper", "\n", "self", ".", "_inputs", "=", "inputs", "\n", "self", ".", "_discriminator", "=", "self", ".", "_build_discriminator", "(", "inputs", ",", "reuse", "=", "reuse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_layer": [[18, 27], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "", "def", "_build_layer", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_discriminator": [[28, 44], ["dict", "dict.Discriminator._build_layer", "dict.Discriminator._build_layer", "dict.Discriminator._build_layer", "dict.Discriminator._build_layer", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.batch_norm", "tensorflow.nn.sigmoid", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.discriminator.Discriminator._build_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_discriminator", "(", "self", ",", "inputs", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "discriminator", "=", "dict", "(", ")", "\n", "\n", "# C64-C128-C256-C512 -> PatchGAN", "\n", "discriminator", "[", "'l1'", "]", "=", "self", ".", "_build_layer", "(", "'l1'", ",", "inputs", ",", "64", ",", "bn", "=", "False", ")", "\n", "discriminator", "[", "'l2'", "]", "=", "self", ".", "_build_layer", "(", "'l2'", ",", "discriminator", "[", "'l1'", "]", "[", "'fmap'", "]", ",", "128", ")", "\n", "discriminator", "[", "'l3'", "]", "=", "self", ".", "_build_layer", "(", "'l3'", ",", "discriminator", "[", "'l2'", "]", "[", "'fmap'", "]", ",", "256", ")", "\n", "discriminator", "[", "'l4'", "]", "=", "self", ".", "_build_layer", "(", "'l4'", ",", "discriminator", "[", "'l3'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'l5'", ")", ":", "\n", "            ", "l5", "=", "dict", "(", ")", "\n", "l5", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "discriminator", "[", "'l4'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "1", "]", ")", "\n", "l5", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "discriminator", "[", "'l4'", "]", "[", "'fmap'", "]", ",", "l5", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "l5", "[", "'bn'", "]", "=", "batch_norm", "(", "l5", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "l5", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "sigmoid", "(", "l5", "[", "'bn'", "]", ")", "\n", "discriminator", "[", "'l5'", "]", "=", "l5", "\n", "", "return", "discriminator", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator.__init__": [[8, 20], ["tensorflow.variable_scope", "generator_New_2.Generator._build_encoder", "generator_New_2.Generator._build_decoder", "generator_New_2.Generator._build_ResBlock", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "is_training", ",", "ochan", ",", "stddev", "=", "0.02", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "is_training", "\n", "self", ".", "_stddev", "=", "stddev", "\n", "self", ".", "_ochan", "=", "ochan", "\n", "with", "tf", ".", "variable_scope", "(", "'G'", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "self", ".", "_stddev", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "self", ".", "_center", "=", "center", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_prob", "=", "0.5", "# constant from pix2pix paper", "\n", "self", ".", "_inputs", "=", "inputs", "\n", "self", ".", "_encoder", "=", "self", ".", "_build_encoder", "(", "inputs", ")", "\n", "self", ".", "_decoder", "=", "self", ".", "_build_decoder", "(", "self", ".", "_encoder", ")", "\n", "self", ".", "_resout", "=", "self", ".", "_build_ResBlock", "(", "self", ".", "_decoder", ")", "# Attention !!!!! add a logogram here to express the self._resout, which will be used in pix2pix_New.py", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_encoder_layer": [[21, 30], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "", "def", "_build_encoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_encoder": [[31, 45], ["dict", "tensorflow.variable_scope", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer", "generator_New_2.Generator._build_encoder_layer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer"], ["", "def", "_build_encoder", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "encoder", "=", "dict", "(", ")", "\n", "\n", "# C64-C128-C256-C512-C512-C512-C512-C512", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "encoder", "[", "'l1'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l1'", ",", "inputs", ",", "64", ",", "bn", "=", "False", ")", "\n", "encoder", "[", "'l2'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l2'", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ",", "128", ")", "\n", "encoder", "[", "'l3'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l3'", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ",", "256", ")", "\n", "encoder", "[", "'l4'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l4'", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l5'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l5'", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l6'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l6'", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l7'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l7'", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l8'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l8'", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_decoder_layer": [[46, 57], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_center_surround_layer": [[61, 81], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.subtract", "tensorflow.where", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.zeros_like", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_center_surround_layer", "(", "self", ",", "name", ",", "inputs_small", ",", "inputs_big", ",", "use_dropout", "=", "False", ")", ":", "#inputs_big: the bigger feature map groups, ", "\n", "# inputs_small: the smaller feature map groups whcich need be upsampling; output_shape_from: 1/3 of the layer (inputs_big+1)", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs_big", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs_small", ")", "[", "-", "1", "]", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs_small", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "tf", ".", "shape", "(", "inputs_big", ")", ",", "strides", "=", "[", "1", ",", "8", ",", "8", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# layer['bn'] = batch_norm(tf.reshape(layer['conv'], output_shape), center=self._center, scale=self._scale, training=self._is_training)", "\n", "layer", "[", "'bn_1'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "tf", ".", "shape", "(", "inputs_big", ")", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout_1'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn_1'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn_1'", "]", "\n", "layer", "[", "'fmap_1'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout_1'", "]", ")", "\n", "layer", "[", "'fmap_2'", "]", "=", "tf", ".", "subtract", "(", "inputs_big", ",", "layer", "[", "'fmap_1'", "]", ")", "# non linear subtraction", "\n", "layer", "[", "'fmap_2'", "]", "=", "tf", ".", "where", "(", "layer", "[", "'fmap_2'", "]", ">", "0", ",", "layer", "[", "'fmap_2'", "]", ",", "tf", ".", "zeros_like", "(", "layer", "[", "'fmap_2'", "]", ")", ")", "# non linear subtraction", "\n", "# layer['fmap_2'] = tf.gather_nd(layer['fmap_2'], tf.where(layer['fmap_2'] > 0))", "\n", "# layer['fmap_2'] = tf.square(layer['fmap_2'])            ", "\n", "layer", "[", "'bn_2'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "tf", ".", "shape", "(", "inputs_big", ")", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout_2'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn_2'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn_2'", "]", "\n", "layer", "[", "'fmap_2'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout_2'", "]", ")", "\n", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_decoder": [[84, 129], ["dict", "tensorflow.variable_scope", "generator_New_2.Generator._build_decoder_layer", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "generator_New_2.Generator._build_center_surround_layer", "tensorflow.concat", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "generator_New_2.Generator._build_center_surround_layer", "tensorflow.concat", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "generator_New_2.Generator._build_center_surround_layer", "tensorflow.concat", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "generator_New_2.Generator._build_center_surround_layer", "tensorflow.concat", "tensorflow.concat", "generator_New_2.Generator._build_decoder_layer", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.tanh", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_center_surround_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_center_surround_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_center_surround_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_center_surround_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "decoder", "=", "dict", "(", ")", "\n", "\n", "# CD512-CD1024-CD1024-C1024-C1024-C512-C256-C128", "\n", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "# U-Net", "\n", "            ", "decoder", "[", "'dl1'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl1'", ",", "encoder", "[", "'l8'", "]", "[", "'fmap'", "]", ",", "output_shape_from", "=", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "# fmap_concat represent skip connections", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl1'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl2'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl2'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl2'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl3'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl3'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl3'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl4'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl4'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "center_surround_dl5", "=", "self", ".", "_build_center_surround_layer", "(", "'cs_dl5'", ",", "decoder", "[", "'dl1'", "]", "[", "'fmap'", "]", ",", "decoder", "[", "'dl4'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "False", ")", "\n", "# print(\"Center_Surround_Features are :\", center_surround_dl5['fmap_2'])", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl4'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "fmap_concat", ",", "center_surround_dl5", "[", "'fmap_2'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl5'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl5'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "center_surround_dl6", "=", "self", ".", "_build_center_surround_layer", "(", "'cs_dl6'", ",", "decoder", "[", "'dl2'", "]", "[", "'fmap'", "]", ",", "decoder", "[", "'dl5'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "False", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl5'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "fmap_concat", ",", "center_surround_dl6", "[", "'fmap_2'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl6'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl6'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "center_surround_dl7", "=", "self", ".", "_build_center_surround_layer", "(", "'cs_dl7'", ",", "decoder", "[", "'dl3'", "]", "[", "'fmap'", "]", ",", "decoder", "[", "'dl6'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "False", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl6'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "fmap_concat", ",", "center_surround_dl7", "[", "'fmap_2'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl7'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl7'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "center_surround_dl8", "=", "self", ".", "_build_center_surround_layer", "(", "'cs_dl8'", ",", "decoder", "[", "'dl4'", "]", "[", "'fmap'", "]", ",", "decoder", "[", "'dl7'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "False", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl7'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "fmap_concat", ",", "center_surround_dl8", "[", "'fmap_2'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl8'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl8'", ",", "fmap_concat", ",", "output_shape_from", "=", "self", ".", "_inputs", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'cl9'", ")", ":", "\n", "                ", "cl9", "=", "dict", "(", ")", "\n", "cl9", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "self", ".", "_ochan", "]", ")", "\n", "cl9", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ",", "cl9", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "cl9", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "tanh", "(", "cl9", "[", "'conv'", "]", ")", "\n", "decoder", "[", "'cl9'", "]", "=", "cl9", "\n", "", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock_layer_downsample_1": [[131, 140], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_downsample_1", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock_layer_downsample_2": [[141, 150], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_downsample_2", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock_layer_resblock": [[151, 170], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.add", "tensorflow.nn.relu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_resblock", "(", "self", ",", "name", ",", "inputs", ",", "k", "=", "128", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "# layer['bn'] = batch_norm(layer['conv'], center=self._center, scale=False, training=self._is_training) if bn else layer['conv']", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "\n", "layer", "[", "'filters_2'", "]", "=", "tf", ".", "get_variable", "(", "'filters_2'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv_2'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "layer", "[", "'fmap'", "]", ",", "layer", "[", "'filters_2'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn_2'", "]", "=", "batch_norm", "(", "layer", "[", "'conv_2'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv_2'", "]", "\n", "# layer['bn_2'] = batch_norm(layer['conv_2'], center=self._center, scale=False, training=self._is_training) if bn else layer['conv_2']", "\n", "layer", "[", "'dropout_2'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn_2'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn_2'", "]", "\n", "layer", "[", "'fmap_2'", "]", "=", "tf", ".", "add", "(", "inputs", ",", "layer", "[", "'dropout_2'", "]", ")", "\n", "\n", "layer", "[", "'fmap_3'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'fmap_2'", "]", ")", "# shortcut connection + residual information", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock_layer_upsample_1": [[171, 187], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_upsample_1", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "# output_shape = [1, 60, 80, 128]", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "# [filter_width, filter_height, output_channels, input_channels]", "\n", "# layer['filters'] = tf.get_variable('filters', [3, 3, get_shape(output_shape_from)[-1] / 2, get_shape(inputs)[-1]])", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')", "\n", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape/2, strides=[1, 2, 2, 1], padding='SAME')", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock_layer_upsample_2": [[188, 204], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_upsample_2", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "# output_shape = [1, 30, 30, 3]", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "# [filter_width, filter_height, output_channels, input_channels]", "\n", "# layer['filters'] = tf.get_variable('filters', [3, 3, get_shape(output_shape_from)[-1] / 2, get_shape(inputs)[-1]])", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')", "\n", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape/2, strides=[1, 2, 2, 1], padding='SAME')", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New_2.Generator._build_ResBlock": [[205, 226], ["dict", "tensorflow.variable_scope", "generator_New_2.Generator._build_ResBlock_layer_downsample_1", "generator_New_2.Generator._build_ResBlock_layer_downsample_2", "generator_New_2.Generator._build_ResBlock_layer_resblock", "generator_New_2.Generator._build_ResBlock_layer_resblock", "generator_New_2.Generator._build_ResBlock_layer_upsample_1", "generator_New_2.Generator._build_ResBlock_layer_upsample_2", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.tanh", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_1", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_2", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_resblock", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_resblock", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_1", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_2", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "resout", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'ResBlock'", ")", ":", "\n", "            ", "resout", "[", "'rsl1'", "]", "=", "self", ".", "_build_ResBlock_layer_downsample_1", "(", "'rsl1'", ",", "decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ",", "64", ",", "bn", "=", "True", ")", "# downsample 1 7X7X64        Size of resout['rsl1']['fmap'] is: 120X160", "\n", "resout", "[", "'rsl2'", "]", "=", "self", ".", "_build_ResBlock_layer_downsample_2", "(", "'rsl2'", ",", "resout", "[", "'rsl1'", "]", "[", "'fmap'", "]", ",", "128", ",", "bn", "=", "True", ")", "# downsample 2 3X3X128 240X320 size of resout['rsl2']['fmap'] is: 60X80", "\n", "resout", "[", "'rsl3'", "]", "=", "self", ".", "_build_ResBlock_layer_resblock", "(", "'rsl3'", ",", "resout", "[", "'rsl2'", "]", "[", "'fmap'", "]", ",", "128", ",", "bn", "=", "True", ")", "# resblock 1", "\n", "resout", "[", "'rsl4'", "]", "=", "self", ".", "_build_ResBlock_layer_resblock", "(", "'rsl4'", ",", "resout", "[", "'rsl3'", "]", "[", "'fmap_3'", "]", ",", "128", ",", "bn", "=", "True", ")", "# resblock 2", "\n", "resout", "[", "'rsl5'", "]", "=", "self", ".", "_build_ResBlock_layer_upsample_1", "(", "'rsl5'", ",", "resout", "[", "'rsl4'", "]", "[", "'fmap_3'", "]", ",", "output_shape_from", "=", "resout", "[", "'rsl1'", "]", "[", "'fmap'", "]", ")", "# upsample 5X5X12     Size of resout['rsl1']['fmap'] is: 120X160              ", "\n", "resout", "[", "'rsl6'", "]", "=", "self", ".", "_build_ResBlock_layer_upsample_2", "(", "'rsl6'", ",", "resout", "[", "'rsl5'", "]", "[", "'fmap'", "]", ",", "output_shape_from", "=", "self", ".", "_inputs", ")", "# upsample 5X5X3 240X320  size of self._inputs is: 240X320", "\n", "\n", "# with tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)) as sess:", "\n", "#  print(\"Shape is :\", sess.run(tf.shape(resout['rsl1']['fmap'])))", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'rsl7'", ")", ":", "\n", "                ", "rsl7", "=", "dict", "(", ")", "\n", "rsl7", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "resout", "[", "'rsl6'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "self", ".", "_ochan", "]", ")", "\n", "rsl7", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "resout", "[", "'rsl6'", "]", "[", "'fmap'", "]", ",", "rsl7", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "rsl7", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "tanh", "(", "rsl7", "[", "'conv'", "]", ")", "\n", "resout", "[", "'rsl7'", "]", "=", "rsl7", "\n", "", "", "return", "resout", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator.Generator.__init__": [[7, 18], ["tensorflow.variable_scope", "generator.Generator._build_encoder", "generator.Generator._build_decoder", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "is_training", ",", "ochan", ",", "stddev", "=", "0.02", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "is_training", "\n", "self", ".", "_stddev", "=", "stddev", "\n", "self", ".", "_ochan", "=", "ochan", "\n", "with", "tf", ".", "variable_scope", "(", "'G'", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "self", ".", "_stddev", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "self", ".", "_center", "=", "center", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_prob", "=", "0.5", "# constant from pix2pix paper", "\n", "self", ".", "_inputs", "=", "inputs", "\n", "self", ".", "_encoder", "=", "self", ".", "_build_encoder", "(", "inputs", ")", "\n", "self", ".", "_decoder", "=", "self", ".", "_build_decoder", "(", "self", ".", "_encoder", ")", "# Pay Attention !!!! _decoder = _build_decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator.Generator._build_encoder_layer": [[19, 28], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "", "def", "_build_encoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator.Generator._build_encoder": [[29, 43], ["dict", "tensorflow.variable_scope", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer", "generator.Generator._build_encoder_layer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer"], ["", "def", "_build_encoder", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "encoder", "=", "dict", "(", ")", "\n", "\n", "# C64-C128-C256-C512-C512-C512-C512-C512", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "encoder", "[", "'l1'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l1'", ",", "inputs", ",", "64", ",", "bn", "=", "False", ")", "\n", "encoder", "[", "'l2'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l2'", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ",", "128", ")", "\n", "encoder", "[", "'l3'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l3'", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ",", "256", ")", "\n", "encoder", "[", "'l4'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l4'", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l5'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l5'", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l6'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l6'", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l7'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l7'", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l8'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l8'", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator.Generator._build_decoder_layer": [[44, 55], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator.Generator._build_decoder": [[56, 92], ["dict", "tensorflow.variable_scope", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.concat", "generator.Generator._build_decoder_layer", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.tanh", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "decoder", "=", "dict", "(", ")", "\n", "\n", "# CD512-CD1024-CD1024-C1024-C1024-C512-C256-C128", "\n", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "# U-Net", "\n", "            ", "decoder", "[", "'dl1'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl1'", ",", "encoder", "[", "'l8'", "]", "[", "'fmap'", "]", ",", "output_shape_from", "=", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "# fmap_concat represent skip connections", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl1'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl2'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl2'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl2'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl3'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl3'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl3'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl4'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl4'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl4'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl5'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl5'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl5'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl6'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl6'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl6'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl7'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl7'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl7'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl8'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl8'", ",", "fmap_concat", ",", "output_shape_from", "=", "self", ".", "_inputs", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'cl9'", ")", ":", "\n", "                ", "cl9", "=", "dict", "(", ")", "\n", "cl9", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "self", ".", "_ochan", "]", ")", "\n", "cl9", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ",", "cl9", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "cl9", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "tanh", "(", "cl9", "[", "'conv'", "]", ")", "\n", "decoder", "[", "'cl9'", "]", "=", "cl9", "\n", "", "", "return", "decoder", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator.__init__": [[7, 19], ["tensorflow.variable_scope", "generator_New.Generator._build_encoder", "generator_New.Generator._build_decoder", "generator_New.Generator._build_ResBlock", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "is_training", ",", "ochan", ",", "stddev", "=", "0.02", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_training", "=", "is_training", "\n", "self", ".", "_stddev", "=", "stddev", "\n", "self", ".", "_ochan", "=", "ochan", "\n", "with", "tf", ".", "variable_scope", "(", "'G'", ",", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "self", ".", "_stddev", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "self", ".", "_center", "=", "center", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_prob", "=", "0.5", "# constant from pix2pix paper", "\n", "self", ".", "_inputs", "=", "inputs", "\n", "self", ".", "_encoder", "=", "self", ".", "_build_encoder", "(", "inputs", ")", "\n", "self", ".", "_decoder", "=", "self", ".", "_build_decoder", "(", "self", ".", "_encoder", ")", "\n", "self", ".", "_resout", "=", "self", ".", "_build_ResBlock", "(", "self", ".", "_decoder", ")", "# Attention !!!!! add a logogram here to express the self._resout, which will be used in pix2pix_New.py", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer": [[20, 29], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "", "def", "_build_encoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder": [[30, 44], ["dict", "tensorflow.variable_scope", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer", "generator_New.Generator._build_encoder_layer"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_encoder_layer"], ["", "def", "_build_encoder", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "encoder", "=", "dict", "(", ")", "\n", "\n", "# C64-C128-C256-C512-C512-C512-C512-C512", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "encoder", "[", "'l1'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l1'", ",", "inputs", ",", "64", ",", "bn", "=", "False", ")", "\n", "encoder", "[", "'l2'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l2'", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ",", "128", ")", "\n", "encoder", "[", "'l3'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l3'", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ",", "256", ")", "\n", "encoder", "[", "'l4'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l4'", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l5'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l5'", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l6'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l6'", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l7'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l7'", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "encoder", "[", "'l8'", "]", "=", "self", ".", "_build_encoder_layer", "(", "'l8'", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "512", ")", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer": [[45, 56], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder_layer", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder": [[57, 93], ["dict", "tensorflow.variable_scope", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.concat", "generator_New.Generator._build_decoder_layer", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.tanh", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_decoder_layer", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_decoder", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "decoder", "=", "dict", "(", ")", "\n", "\n", "# CD512-CD1024-CD1024-C1024-C1024-C512-C256-C128", "\n", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "# U-Net", "\n", "            ", "decoder", "[", "'dl1'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl1'", ",", "encoder", "[", "'l8'", "]", "[", "'fmap'", "]", ",", "output_shape_from", "=", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "# fmap_concat represent skip connections", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl1'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l7'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl2'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl2'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl2'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l6'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl3'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl3'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", ",", "use_dropout", "=", "True", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl3'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l5'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl4'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl4'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl4'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l4'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl5'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl5'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl5'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l3'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl6'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl6'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl6'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l2'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl7'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl7'", ",", "fmap_concat", ",", "output_shape_from", "=", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", ")", "\n", "\n", "fmap_concat", "=", "tf", ".", "concat", "(", "[", "decoder", "[", "'dl7'", "]", "[", "'fmap'", "]", ",", "encoder", "[", "'l1'", "]", "[", "'fmap'", "]", "]", ",", "axis", "=", "3", ")", "\n", "decoder", "[", "'dl8'", "]", "=", "self", ".", "_build_decoder_layer", "(", "'dl8'", ",", "fmap_concat", ",", "output_shape_from", "=", "self", ".", "_inputs", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'cl9'", ")", ":", "\n", "                ", "cl9", "=", "dict", "(", ")", "\n", "cl9", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "self", ".", "_ochan", "]", ")", "\n", "cl9", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "decoder", "[", "'dl8'", "]", "[", "'fmap'", "]", ",", "cl9", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "cl9", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "tanh", "(", "cl9", "[", "'conv'", "]", ")", "\n", "decoder", "[", "'cl9'", "]", "=", "cl9", "\n", "", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_1": [[95, 104], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_downsample_1", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_2": [[105, 114], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "utils.lkrelu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_downsample_2", "(", "self", ",", "name", ",", "inputs", ",", "k", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "lkrelu", "(", "layer", "[", "'dropout'", "]", ",", "slope", "=", "0.2", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_resblock": [[115, 134], ["dict", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.add", "tensorflow.nn.relu", "utils.batch_norm", "tensorflow.nn.dropout", "utils.batch_norm", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_resblock", "(", "self", ",", "name", ",", "inputs", ",", "k", "=", "128", ",", "bn", "=", "True", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "layer", "[", "'conv'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv'", "]", "\n", "# layer['bn'] = batch_norm(layer['conv'], center=self._center, scale=False, training=self._is_training) if bn else layer['conv']", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "\n", "layer", "[", "'filters_2'", "]", "=", "tf", ".", "get_variable", "(", "'filters_2'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", ",", "k", "]", ")", "\n", "layer", "[", "'conv_2'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "layer", "[", "'fmap'", "]", ",", "layer", "[", "'filters_2'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "layer", "[", "'bn_2'", "]", "=", "batch_norm", "(", "layer", "[", "'conv_2'", "]", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "if", "bn", "else", "layer", "[", "'conv_2'", "]", "\n", "# layer['bn_2'] = batch_norm(layer['conv_2'], center=self._center, scale=False, training=self._is_training) if bn else layer['conv_2']", "\n", "layer", "[", "'dropout_2'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn_2'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn_2'", "]", "\n", "layer", "[", "'fmap_2'", "]", "=", "tf", ".", "add", "(", "inputs", ",", "layer", "[", "'dropout_2'", "]", ")", "\n", "\n", "layer", "[", "'fmap_3'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'fmap_2'", "]", ")", "# shortcut connection + residual information", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_1": [[135, 151], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_upsample_1", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "# output_shape = [1, 60, 80, 128]", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "# [filter_width, filter_height, output_channels, input_channels]", "\n", "# layer['filters'] = tf.get_variable('filters', [3, 3, get_shape(output_shape_from)[-1] / 2, get_shape(inputs)[-1]])", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')", "\n", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape/2, strides=[1, 2, 2, 1], padding='SAME')", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_2": [[152, 168], ["dict", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "utils.batch_norm", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.dropout", "utils.get_shape", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock_layer_upsample_2", "(", "self", ",", "name", ",", "inputs", ",", "output_shape_from", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "layer", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "output_shape", "=", "tf", ".", "shape", "(", "output_shape_from", ")", "\n", "# output_shape = [1, 30, 30, 3]", "\n", "layer", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "3", ",", "3", ",", "get_shape", "(", "output_shape_from", ")", "[", "-", "1", "]", ",", "get_shape", "(", "inputs", ")", "[", "-", "1", "]", "]", ")", "# [filter_width, filter_height, output_channels, input_channels]", "\n", "# layer['filters'] = tf.get_variable('filters', [3, 3, get_shape(output_shape_from)[-1] / 2, get_shape(inputs)[-1]])", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape, strides=[1, 2, 2, 1], padding='SAME')", "\n", "\n", "layer", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "layer", "[", "'filters'", "]", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "# layer['conv'] = tf.nn.conv2d_transpose(inputs, layer['filters'], output_shape=output_shape/2, strides=[1, 2, 2, 1], padding='SAME')", "\n", "layer", "[", "'bn'", "]", "=", "batch_norm", "(", "tf", ".", "reshape", "(", "layer", "[", "'conv'", "]", ",", "output_shape", ")", ",", "center", "=", "self", ".", "_center", ",", "scale", "=", "self", ".", "_scale", ",", "training", "=", "self", ".", "_is_training", ")", "\n", "layer", "[", "'dropout'", "]", "=", "tf", ".", "nn", ".", "dropout", "(", "layer", "[", "'bn'", "]", ",", "self", ".", "_prob", ")", "if", "use_dropout", "else", "layer", "[", "'bn'", "]", "\n", "layer", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "relu", "(", "layer", "[", "'dropout'", "]", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock": [[169, 190], ["dict", "tensorflow.variable_scope", "generator_New.Generator._build_ResBlock_layer_downsample_1", "generator_New.Generator._build_ResBlock_layer_downsample_2", "generator_New.Generator._build_ResBlock_layer_resblock", "generator_New.Generator._build_ResBlock_layer_resblock", "generator_New.Generator._build_ResBlock_layer_upsample_1", "generator_New.Generator._build_ResBlock_layer_upsample_2", "tensorflow.variable_scope", "dict", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.tanh", "utils.get_shape"], "methods", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_1", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_downsample_2", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_resblock", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_resblock", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_1", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.generator_New.Generator._build_ResBlock_layer_upsample_2", "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["", "def", "_build_ResBlock", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "resout", "=", "dict", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'ResBlock'", ")", ":", "\n", "            ", "resout", "[", "'rsl1'", "]", "=", "self", ".", "_build_ResBlock_layer_downsample_1", "(", "'rsl1'", ",", "decoder", "[", "'cl9'", "]", "[", "'fmap'", "]", ",", "64", ",", "bn", "=", "True", ")", "# downsample 1 7X7X64        Size of resout['rsl1']['fmap'] is: 120X160", "\n", "resout", "[", "'rsl2'", "]", "=", "self", ".", "_build_ResBlock_layer_downsample_2", "(", "'rsl2'", ",", "resout", "[", "'rsl1'", "]", "[", "'fmap'", "]", ",", "128", ",", "bn", "=", "True", ")", "# downsample 2 3X3X128 240X320 size of resout['rsl2']['fmap'] is: 60X80", "\n", "resout", "[", "'rsl3'", "]", "=", "self", ".", "_build_ResBlock_layer_resblock", "(", "'rsl3'", ",", "resout", "[", "'rsl2'", "]", "[", "'fmap'", "]", ",", "128", ",", "bn", "=", "True", ")", "# resblock 1", "\n", "resout", "[", "'rsl4'", "]", "=", "self", ".", "_build_ResBlock_layer_resblock", "(", "'rsl4'", ",", "resout", "[", "'rsl3'", "]", "[", "'fmap_3'", "]", ",", "128", ",", "bn", "=", "True", ")", "# resblock 2", "\n", "resout", "[", "'rsl5'", "]", "=", "self", ".", "_build_ResBlock_layer_upsample_1", "(", "'rsl5'", ",", "resout", "[", "'rsl4'", "]", "[", "'fmap_3'", "]", ",", "output_shape_from", "=", "resout", "[", "'rsl1'", "]", "[", "'fmap'", "]", ")", "# upsample 5X5X12     Size of resout['rsl1']['fmap'] is: 120X160              ", "\n", "resout", "[", "'rsl6'", "]", "=", "self", ".", "_build_ResBlock_layer_upsample_2", "(", "'rsl6'", ",", "resout", "[", "'rsl5'", "]", "[", "'fmap'", "]", ",", "output_shape_from", "=", "self", ".", "_inputs", ")", "# upsample 5X5X3 240X320  size of self._inputs is: 240X320", "\n", "\n", "# with tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)) as sess:", "\n", "#  print(\"Shape is :\", sess.run(tf.shape(resout['rsl1']['fmap'])))", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'rsl7'", ")", ":", "\n", "                ", "rsl7", "=", "dict", "(", ")", "\n", "rsl7", "[", "'filters'", "]", "=", "tf", ".", "get_variable", "(", "'filters'", ",", "[", "4", ",", "4", ",", "get_shape", "(", "resout", "[", "'rsl6'", "]", "[", "'fmap'", "]", ")", "[", "-", "1", "]", ",", "self", ".", "_ochan", "]", ")", "\n", "rsl7", "[", "'conv'", "]", "=", "tf", ".", "nn", ".", "conv2d", "(", "resout", "[", "'rsl6'", "]", "[", "'fmap'", "]", ",", "rsl7", "[", "'filters'", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "rsl7", "[", "'fmap'", "]", "=", "tf", ".", "nn", ".", "tanh", "(", "rsl7", "[", "'conv'", "]", ")", "\n", "resout", "[", "'rsl7'", "]", "=", "rsl7", "\n", "", "", "return", "resout", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape": [[3, 5], ["tensor.get_shape().as_list", "tensor.get_shape"], "function", ["home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.get_shape"], ["def", "get_shape", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.batch_norm": [[6, 10], ["tensorflow.name_scope", "tensorflow.layers.batch_normalization"], "function", ["None"], ["", "def", "batch_norm", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'bn'", ")", ":", "\n", "        ", "bn", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.CZHQuality_Sal-CFS-GAN.model.utils.lkrelu": [[11, 13], ["tensorflow.maximum"], "function", ["None"], ["", "def", "lkrelu", "(", "x", ",", "slope", "=", "0.01", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "slope", "*", "x", ",", "x", ")", "\n", "", ""]]}