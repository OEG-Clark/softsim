{"home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.param.params": [[5, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Anomaly Detection in Videos'", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"tcn\"", ",", "help", "=", "\"mlp | tcn\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss\"", ",", "type", "=", "str", ",", "default", "=", "\"tcn\"", ",", "help", "=", "\"mlp | tcn | ad\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adLossLambda\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--adLossMargin\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--featureSize\"", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "\"size of extracted feature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--numFeatureMaps\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"size of extracted feature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--kernelSize\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"size of TCN filter kernel size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--windowSize\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--maxVideoSize\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--subWindows\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--maskValue\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "\n", "# MS-TCN", "\n", "parser", ".", "add_argument", "(", "\"--numStages\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# MCB-TCN", "\n", "parser", ".", "add_argument", "(", "\"--numClassStages\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--numBinaryStages\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--firstStageRepeat\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--consecutiveStagesRepeat\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--numLayers\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trainNormalFolder\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/normal/train\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trainNormalAnnotations\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/normal/TrainLabels.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trainNormalTopK\"", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trainAbnormalFolder\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/abnormal/train\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trainAbnormalAnnotations\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/abnormal/TrainLabels.json\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--valNormalFolder\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/normal/val\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valNormalAnnotations\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/normal/ValLabels.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valNormalTopK\"", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--valAbnormalFolder\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/abnormal/val\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valAbnormalAnnotations\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"../data/ucfcrime_features/abnormal/ValLabels.json\"", ")", "\n", "\n", "# parser.add_argument(\"--testFolder\", type=str)", "\n", "# parser.add_argument(\"--testAnnotations\", type=str)", "\n", "# parser.add_argument(\"--testNormalTopK\", type=int)", "\n", "\n", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchSize\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--numWorkers\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--schedulerStepSize\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--schedulerGamma\"", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--learningRate\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "type", "=", "str", ",", "default", "=", "\"adam\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--expFolder\"", ",", "type", "=", "str", ",", "default", "=", "\"../exps/1-window_20\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--modelPath\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--noNormalSegmentation\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--json-conf\"", ",", "type", "=", "str", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.param.parseJson": [[76, 86], ["json.load.items", "open", "json.load", "hasattr", "setattr"], "function", ["None"], ["", "def", "parseJson", "(", "args", ",", "jsonPath", ")", ":", "\n", "    ", "with", "open", "(", "jsonPath", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "jsonConfs", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "jsonConfs", ".", "items", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "args", ",", "key", ")", ":", "\n", "            ", "setattr", "(", "args", ",", "key", ",", "value", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"the key is not in added arguments \"", "+", "key", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time": [[5, 24], ["range", "labels.append", "starts.append", "len", "ends.append", "labels.append", "starts.append", "ends.append"], "function", ["None"], ["def", "get_labels_start_end_time", "(", "frame_wise_labels", ",", "bg_class", "=", "0", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "starts", "=", "[", "]", "\n", "ends", "=", "[", "]", "\n", "last_label", "=", "frame_wise_labels", "[", "0", "]", "\n", "if", "frame_wise_labels", "[", "0", "]", "!=", "bg_class", ":", "\n", "        ", "labels", ".", "append", "(", "frame_wise_labels", "[", "0", "]", ")", "\n", "starts", ".", "append", "(", "0", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "frame_wise_labels", ")", ")", ":", "\n", "        ", "if", "frame_wise_labels", "[", "i", "]", "!=", "last_label", ":", "\n", "            ", "if", "frame_wise_labels", "[", "i", "]", "!=", "bg_class", ":", "\n", "                ", "labels", ".", "append", "(", "frame_wise_labels", "[", "i", "]", ")", "\n", "starts", ".", "append", "(", "i", ")", "\n", "", "if", "last_label", "!=", "bg_class", ":", "\n", "                ", "ends", ".", "append", "(", "i", ")", "\n", "", "last_label", "=", "frame_wise_labels", "[", "i", "]", "\n", "", "", "if", "last_label", "!=", "bg_class", ":", "\n", "        ", "ends", ".", "append", "(", "i", ")", "\n", "", "return", "labels", ",", "starts", ",", "ends", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.levenstein": [[26, 50], ["len", "len", "numpy.zeros", "range", "range", "range", "range", "min", "max"], "function", ["None"], ["", "def", "levenstein", "(", "p", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "    ", "m_row", "=", "len", "(", "p", ")", "\n", "n_col", "=", "len", "(", "y", ")", "\n", "D", "=", "np", ".", "zeros", "(", "[", "m_row", "+", "1", ",", "n_col", "+", "1", "]", ",", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "m_row", "+", "1", ")", ":", "\n", "        ", "D", "[", "i", ",", "0", "]", "=", "i", "\n", "", "for", "i", "in", "range", "(", "n_col", "+", "1", ")", ":", "\n", "        ", "D", "[", "0", ",", "i", "]", "=", "i", "\n", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_col", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "m_row", "+", "1", ")", ":", "\n", "            ", "if", "y", "[", "j", "-", "1", "]", "==", "p", "[", "i", "-", "1", "]", ":", "\n", "                ", "D", "[", "i", ",", "j", "]", "=", "D", "[", "i", "-", "1", ",", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "D", "[", "i", ",", "j", "]", "=", "min", "(", "D", "[", "i", "-", "1", ",", "j", "]", "+", "1", ",", "\n", "D", "[", "i", ",", "j", "-", "1", "]", "+", "1", ",", "\n", "D", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "1", ")", "\n", "\n", "", "", "", "if", "norm", ":", "\n", "        ", "score", "=", "(", "1", "-", "D", "[", "-", "1", ",", "-", "1", "]", "/", "max", "(", "m_row", ",", "n_col", ")", ")", "*", "100", "\n", "", "else", ":", "\n", "        ", "score", "=", "D", "[", "-", "1", ",", "-", "1", "]", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.edit_score": [[52, 56], ["metrics.get_labels_start_end_time", "metrics.get_labels_start_end_time", "metrics.levenstein"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.levenstein"], ["", "def", "edit_score", "(", "recognized", ",", "ground_truth", ",", "norm", "=", "True", ",", "bg_class", "=", "0", ")", ":", "\n", "    ", "P", ",", "_", ",", "_", "=", "get_labels_start_end_time", "(", "recognized", ",", "bg_class", ")", "\n", "Y", ",", "_", ",", "_", "=", "get_labels_start_end_time", "(", "ground_truth", ",", "bg_class", ")", "\n", "return", "levenstein", "(", "P", ",", "Y", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score": [[58, 87], ["metrics.get_labels_start_end_time", "metrics.get_labels_start_end_time", "numpy.zeros", "range", "len", "len", "numpy.array().argmax", "len", "sum", "float", "float", "float", "len", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.array", "range", "len"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time"], ["", "def", "f_score", "(", "recognized", ",", "ground_truth", ",", "overlap", ",", "bg_class", "=", "0", ")", ":", "\n", "    ", "p_label", ",", "p_start", ",", "p_end", "=", "get_labels_start_end_time", "(", "recognized", ",", "bg_class", "=", "bg_class", ")", "\n", "y_label", ",", "y_start", ",", "y_end", "=", "get_labels_start_end_time", "(", "ground_truth", ",", "bg_class", "=", "bg_class", ")", "\n", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "\n", "hits", "=", "np", ".", "zeros", "(", "len", "(", "y_label", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "p_label", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "y_label", ")", "==", "0", ":", "\n", "            ", "fp", "+=", "1", "\n", "continue", "\n", "\n", "", "intersection", "=", "np", ".", "minimum", "(", "p_end", "[", "j", "]", ",", "y_end", ")", "-", "np", ".", "maximum", "(", "p_start", "[", "j", "]", ",", "y_start", ")", "\n", "union", "=", "np", ".", "maximum", "(", "p_end", "[", "j", "]", ",", "y_end", ")", "-", "np", ".", "minimum", "(", "p_start", "[", "j", "]", ",", "y_start", ")", "\n", "# print(union)", "\n", "IoU", "=", "(", "1.0", "*", "intersection", "/", "union", ")", "*", "(", "[", "p_label", "[", "j", "]", "==", "y_label", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "y_label", ")", ")", "]", ")", "\n", "# Get the best scoring segment", "\n", "idx", "=", "np", ".", "array", "(", "IoU", ")", ".", "argmax", "(", ")", "\n", "\n", "if", "IoU", "[", "idx", "]", ">=", "overlap", "and", "not", "hits", "[", "idx", "]", ":", "\n", "            ", "tp", "+=", "1", "\n", "hits", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "fp", "+=", "1", "\n", "", "", "fn", "=", "len", "(", "y_label", ")", "-", "sum", "(", "hits", ")", "\n", "return", "float", "(", "tp", ")", ",", "float", "(", "fp", ")", ",", "float", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1": [[89, 95], ["float", "float", "float", "addict.Dict", "float", "float", "numpy.nan_to_num"], "function", ["None"], ["", "def", "calc_f1", "(", "fn", ",", "fp", ",", "tp", ")", ":", "\n", "    ", "precision", "=", "float", "(", "tp", "/", "float", "(", "tp", "+", "fp", "+", "1e-10", ")", ")", "\n", "recall", "=", "float", "(", "tp", "/", "float", "(", "tp", "+", "fn", "+", "1e-10", ")", ")", "\n", "f1", "=", "2.0", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", "+", "1e-10", ")", "\n", "f1", "=", "float", "(", "np", ".", "nan_to_num", "(", "f1", ")", "*", "100", ")", "\n", "return", "Dict", "(", "f1", "=", "f1", ",", "precision", "=", "precision", ",", "recall", "=", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.__init__": [[22, 84], ["dataset.ucf_crime.get_dataloaders", "violance.ViolenceDetection.model.float", "torch.optim.lr_scheduler.StepLR", "torch.cuda.is_available", "violance.ViolenceDetection.model.float", "torch.nn.CrossEntropyLoss", "models.Loss.TemporalHardPairLoss", "torch.nn.MSELoss", "models.MLP.MLP", "torch.optim.Adam", "violance.ViolenceDetection.loadCheckpoint", "print", "violance.ViolenceDetection.model.cuda", "torch.utils.tensorboard.SummaryWriter", "models.TCN.EDTCN", "violance.ViolenceDetection.model.parameters", "models.MSTCN.MultiStageModel", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_dataloaders", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.loadCheckpoint"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "trainLoader", ",", "valLoader", "=", "get_dataloaders", "(", "args", ".", "trainNormalFolder", ",", "args", ".", "trainNormalAnnotations", ",", "\n", "args", ".", "trainAbnormalFolder", ",", "args", ".", "trainAbnormalAnnotations", ",", "\n", "args", ".", "trainNormalTopK", ",", "\n", "args", ".", "valNormalFolder", ",", "args", ".", "valNormalAnnotations", ",", "\n", "args", ".", "valAbnormalFolder", ",", "args", ".", "valAbnormalAnnotations", ",", "\n", "args", ".", "valNormalTopK", ",", "\n", "args", ".", "batchSize", ",", "args", ".", "numWorkers", ",", "args", ".", "model", ",", "\n", "args", ".", "windowSize", ",", "args", ".", "subWindows", ",", "args", ".", "featureSize", ",", "\n", "args", ".", "maxVideoSize", ")", "\n", "\n", "self", ".", "modelType", "=", "args", ".", "model", "\n", "self", ".", "trainLoader", "=", "trainLoader", "\n", "self", ".", "valLoader", "=", "valLoader", "\n", "self", ".", "expFolder", "=", "args", ".", "expFolder", "\n", "self", ".", "maskValue", "=", "args", ".", "maskValue", "\n", "self", ".", "stepCounter", "=", "0", "\n", "self", ".", "bestAUC", "=", "0", "\n", "self", ".", "noNormalSegmentation", "=", "args", ".", "noNormalSegmentation", "\n", "self", ".", "lossType", "=", "args", ".", "loss", "\n", "\n", "if", "args", ".", "model", "==", "\"mlp\"", ":", "\n", "            ", "self", ".", "model", "=", "MLP", "(", "featureSize", "=", "args", ".", "featureSize", ")", "\n", "", "elif", "args", ".", "model", "==", "\"tcn\"", ":", "\n", "            ", "self", ".", "model", "=", "EDTCN", "(", "featureSize", "=", "args", ".", "featureSize", ",", "kernelSize", "=", "args", ".", "kernelSize", ")", "\n", "", "elif", "args", ".", "model", "==", "\"mstcn\"", ":", "\n", "            ", "self", ".", "model", "=", "MultiStageModel", "(", "num_stages", "=", "args", ".", "numStages", ",", "num_layers", "=", "args", ".", "numLayers", ",", "\n", "num_f_maps", "=", "args", ".", "numFeatureMaps", ",", "\n", "dim", "=", "args", ".", "featureSize", ",", "ssRepeat", "=", "args", ".", "firstStageRepeat", ")", "\n", "print", "(", "\"[Info] MS-TCN W{}-S{}-L{} have been created\"", ".", "format", "(", "args", ".", "windowSize", ",", "args", ".", "numStages", ",", "args", ".", "numLayers", ")", ")", "\n", "# elif args.model == \"mcbtcn\":", "\n", "#     self.model = MultiClassBinaryTCN(numClassStages=args.numClassStages, numBinaryStages=args.numBinaryStages,", "\n", "#                                      num_layers=args.numLayers, num_f_maps=args.numFeatureMaps,", "\n", "#                                      dim=args.featureSize, numClasses=16)", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "float", "(", ")", "\n", "\n", "# if torch.cuda.is_available():", "\n", "#     self.model = self.model.cuda()", "\n", "\n", "if", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learningRate", ",", "\n", "betas", "=", "(", "0.5", ",", "0.9", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "step_size", "=", "args", ".", "schedulerStepSize", ",", "\n", "gamma", "=", "args", ".", "schedulerGamma", ")", "\n", "if", "args", ".", "modelPath", ":", "\n", "            ", "self", ".", "loadCheckpoint", "(", "args", ".", "modelPath", ")", "\n", "print", "(", "\"[Info] Model have been loaded at {}\"", ".", "format", "(", "args", ".", "modelPath", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "float", "(", ")", "\n", "\n", "self", ".", "ceLoss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "self", ".", "ASLoss", "=", "TemporalHardPairLoss", "(", "max_violation", "=", "True", ",", "margin", "=", "args", ".", "adLossMargin", ",", "measure", "=", "\"output\"", ")", "\n", "self", ".", "mseLoss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "lossLambda", "=", "args", ".", "adLossLambda", "\n", "\n", "self", ".", "writer", "=", "None", "\n", "if", "not", "args", ".", "test", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "expFolder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.train": [[85, 179], ["range", "violance.ViolenceDetection.binaryValidation", "tqdm.autonotebook.tqdm.autonotebook.tqdm", "enumerate", "violance.ViolenceDetection.binaryValidation", "violance.ViolenceDetection.saveCheckpoint", "violance.ViolenceDetection.model.train", "violance.ViolenceDetection.optimizer.zero_grad", "violance.ViolenceDetection.writer.add_scalar", "torch.cuda.is_available", "violance.ViolenceDetection.backward", "violance.ViolenceDetection.optimizer.step", "os.path.join", "shutil.copy", "data.float().cuda.float().cuda.float().cuda", "anomaly.view.view.float().cuda", "masks.float().cuda.float().cuda.float().cuda", "category.long().cuda.long().cuda.long().cuda", "violance.ViolenceDetection.model", "enumerate", "violance.ViolenceDetection.writer.add_scalar", "tqdm.autonotebook.tqdm.autonotebook.tqdm.set_description", "os.path.join", "os.path.join", "output.transpose.transpose.squeeze", "torch.zeros_like", "anomaly.view.view.transpose", "output.transpose.transpose.transpose", "zip", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.model", "enumerate", "enumerate", "violance.ViolenceDetection.item", "data.float().cuda.float().cuda.float", "anomaly.view.view.float", "masks.float().cuda.float().cuda.float", "category.long().cuda.long().cuda.long", "anomaly.view.view.view", "violance.ViolenceDetection.ASLoss", "adValues.transpose.transpose.reshape", "adValues.transpose.transpose.transpose", "violance.ViolenceDetection.mseLoss", "mseLoss.item", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.ceLoss", "violance.ViolenceDetection.mseLoss", "anomaly.view.view.view", "violance.ViolenceDetection.model", "violance.ViolenceDetection.mseLoss", "violance.ViolenceDetection.model", "violance.ViolenceDetection.mseLoss", "violance.ViolenceDetection.trainLoader.__len__", "violance.ViolenceDetection.item", "adValueT[].mean", "torch.tensor().float().cuda", "adLoss.item", "output.transpose.transpose.mean().view", "anomaly.view.view.view", "violance.ViolenceDetection.squeeze", "violance.ViolenceDetection.squeeze", "anomaly.view.view.view", "output.transpose.transpose.view", "torch.tensor().float", "anomaly.view.view.view", "output.transpose.transpose.mean", "anomaly.view.view.view", "torch.tensor", "float"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.binaryValidation", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.binaryValidation", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.saveCheckpoint", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.InplaceShift.backward", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__len__"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "# currentScore = self.binaryValidation(-1)", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "# print(\"########## {} Epoch Training Starts ##########\".format(epoch))", "\n", "            ", "progress_bar", "=", "tqdm", "(", "self", ".", "trainLoader", ")", "\n", "for", "step", ",", "(", "data", ",", "masks", ",", "anomaly", ",", "category", ",", "_", ",", "_", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "# self.scheduler.step()", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Learning Rate\"", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "self", ".", "stepCounter", ")", "\n", "\n", "# if self.modelType == \"tcn\" or self.modelType == \"mstcn\":", "\n", "#     anomaly = anomaly.view(-1)", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", "=", "data", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "anomaly", "=", "anomaly", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "masks", "=", "masks", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "category", "=", "category", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "modelType", "==", "\"mstcn\"", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "data", ",", "masks", ")", "\n", "loss", "=", "0", "\n", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "outputs", ")", ":", "\n", "                        ", "mseLoss", "=", "0", "\n", "adLoss", "=", "0", "\n", "# output = output.view(-1)", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "mask", "=", "(", "anomaly", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "adValues", "=", "torch", ".", "zeros_like", "(", "anomaly", ".", "view", "(", "-", "1", ")", ")", "\n", "if", "self", ".", "lossType", "==", "\"ad\"", ":", "\n", "                            ", "adValues", "[", "mask", "]", "=", "self", ".", "ASLoss", "(", "anomaly", ".", "view", "(", "-", "1", ")", "[", "mask", "]", ",", "output", ".", "view", "(", "-", "1", ")", "[", "mask", "]", ")", "\n", "adValues", "=", "adValues", ".", "reshape", "(", "(", "anomaly", ".", "shape", "[", "0", "]", ",", "anomaly", ".", "shape", "[", "1", "]", ")", ")", "\n", "adValues", "=", "adValues", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "", "anomalies", "=", "anomaly", ".", "transpose", "(", "1", ",", "0", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "0", ")", "\n", "# calculate each window loss separately", "\n", "for", "anomalyT", ",", "outputT", ",", "adValueT", ",", "maskT", "in", "zip", "(", "anomalies", ",", "output", ",", "adValues", ",", "masks", ")", ":", "\n", "                            ", "maskIndex", "=", "(", "anomalyT", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "mseLoss", "+=", "self", ".", "mseLoss", "(", "outputT", "[", "maskIndex", "]", ",", "anomalyT", "[", "maskIndex", "]", ")", "\n", "if", "self", ".", "lossType", "==", "\"ad\"", ":", "\n", "                                ", "adLoss", "+=", "adValueT", "[", "maskIndex", "]", ".", "mean", "(", ")", "\n", "", "", "self", ".", "writer", ".", "add_scalar", "(", "\"Loss/Layer-MSE-{}\"", ".", "format", "(", "i", ")", ",", "mseLoss", ".", "item", "(", ")", ",", "self", ".", "stepCounter", ")", "\n", "loss", "+=", "mseLoss", "\n", "if", "self", ".", "lossType", "==", "\"ad\"", ":", "\n", "                            ", "loss", "+=", "torch", ".", "tensor", "(", "float", "(", "self", ".", "lossLambda", ")", ",", "requires_grad", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "adLoss", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Loss/Layer-AD-{}\"", ".", "format", "(", "i", ")", ",", "adLoss", ".", "item", "(", ")", ",", "self", ".", "stepCounter", ")", "\n", "\n", "", "", "", "elif", "self", ".", "modelType", "==", "\"mcbtcn\"", ":", "\n", "                    ", "classOutputs", ",", "binaryOutputs", "=", "self", ".", "model", "(", "data", ",", "masks", ")", "\n", "loss", "=", "0", "\n", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "classOutputs", ")", ":", "\n", "                        ", "loss", "+=", "self", ".", "ceLoss", "(", "output", ",", "category", ")", "\n", "\n", "", "for", "i", ",", "output", "in", "enumerate", "(", "binaryOutputs", ")", ":", "\n", "# eliminate end of the windows", "\n", "                        ", "mask", "=", "(", "anomaly", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", "\n", "filteredOutput", "=", "output", ".", "mean", "(", "1", ")", ".", "view", "(", "-", "1", ")", "[", "mask", "]", "\n", "filteredAnomaly", "=", "anomaly", ".", "view", "(", "-", "1", ")", "[", "mask", "]", "\n", "loss", "+=", "self", ".", "mseLoss", "(", "filteredOutput", ",", "filteredAnomaly", ")", "\n", "", "", "elif", "self", ".", "modelType", "==", "\"tcn\"", ":", "\n", "                    ", "anomaly", "=", "anomaly", ".", "view", "(", "-", "1", ")", "\n", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "outputs", "=", "outputs", "[", "(", "anomaly", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "anomaly", "=", "anomaly", "[", "(", "anomaly", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "loss", "=", "self", ".", "mseLoss", "(", "outputs", ".", "squeeze", "(", ")", ",", "anomaly", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "outputs", "=", "outputs", "[", "(", "anomaly", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "anomaly", "=", "anomaly", "[", "(", "anomaly", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "loss", "=", "self", ".", "mseLoss", "(", "outputs", ".", "squeeze", "(", ")", ",", "anomaly", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "stepCounter", "%", "10", "==", "0", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "\"Loss/Train\"", ",", "loss", ".", "item", "(", ")", ",", "self", ".", "stepCounter", ")", "\n", "progress_bar", ".", "set_description", "(", "\n", "\"Train [{}]:[{}/{}] Global Step:{} Loss: {:.2f}\"", ".", "format", "(", "epoch", ",", "step", ",", "self", ".", "trainLoader", ".", "__len__", "(", ")", ",", "\n", "self", ".", "stepCounter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "stepCounter", "+=", "1", "\n", "\n", "", "currentScore", "=", "self", ".", "binaryValidation", "(", "epoch", ")", "\n", "\n", "self", ".", "saveCheckpoint", "(", "os", ".", "path", ".", "join", "(", "self", ".", "expFolder", ",", "\"last.pth\"", ")", ")", "\n", "if", "currentScore", ">", "self", ".", "bestAUC", ":", "\n", "                ", "self", ".", "bestAUC", "=", "currentScore", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "self", ".", "expFolder", ",", "\"last.pth\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "expFolder", ",", "\"best.pth\"", ")", ")", "\n", "\n", "", "", "currentScore", "=", "self", ".", "binaryValidation", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.binaryValidation": [[180, 310], ["violance.ViolenceDetection.model.eval", "sklearn.roc_curve", "sklearn.auc", "print", "torch.no_grad", "tqdm.autonotebook.tqdm.autonotebook.tqdm", "enumerate", "violance.ViolenceDetection.valLoader.dataset.__getVideoClips__", "violance.ViolenceDetection.writer.add_scalar", "torch.cuda.is_available", "[].tolist", "violance.ViolenceDetection.mseLoss", "violance.ViolenceDetection.reshape().cpu().numpy().tolist", "anomaly.float().cuda.float().cuda.cpu().numpy().flatten().tolist", "zip", "enumerate", "anomaly.float().cuda.float().cuda.view", "numpy.array().reshape().tolist", "data.float().cuda.float().cuda.float().cuda", "anomaly.float().cuda.float().cuda.float().cuda", "masks.float().cuda.float().cuda.float().cuda", "violance.ViolenceDetection.model", "outputs[].view", "violance.ViolenceDetection.squeeze", "tqdm.autonotebook.tqdm.autonotebook.tqdm.set_description", "predictions[].append", "targets[].append", "tqdm.autonotebook.tqdm.autonotebook.tqdm", "metrics.calc_f1", "print", "metrics.calc_f1", "print", "metrics.calc_f1", "print", "violance.ViolenceDetection.model", "binaryOutputs[].view", "violance.ViolenceDetection.model", "violance.ViolenceDetection.reshape().cpu().numpy", "anomaly.float().cuda.float().cuda.cpu().numpy().flatten", "violance.ViolenceDetection.items", "metrics.f_score", "metrics.f_score", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "numpy.array().reshape", "data.float().cuda.float().cuda.float", "anomaly.float().cuda.float().cuda.float", "masks.float().cuda.float().cuda.float", "numpy.array", "violance.ViolenceDetection.valLoader.__len__", "violance.ViolenceDetection.item", "clipPredictions.append", "clipTargets.append", "utils.utils.utils.visualizeTemporalPredictions", "metrics.f_score", "metrics.f_score", "violance.ViolenceDetection.reshape().cpu", "anomaly.float().cuda.float().cuda.cpu().numpy", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "violance.ViolenceDetection.reshape", "anomaly.float().cuda.float().cuda.cpu", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__getVideoClips__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__len__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score"], ["", "def", "binaryValidation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "anomalyPredictions", "=", "[", "]", "\n", "anomalyTargets", "=", "[", "]", "\n", "predictions", "=", "{", "}", "\n", "targets", "=", "{", "}", "\n", "\n", "thresholds", "=", "[", "0.5", ",", "0.75", ",", "0.9", "]", "\n", "IOUs", "=", "[", "0.1", ",", "0.25", ",", "0.5", "]", "\n", "score", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "progress_bar", "=", "tqdm", "(", "self", ".", "valLoader", ")", "\n", "for", "step", ",", "(", "data", ",", "masks", ",", "anomaly", ",", "category", ",", "_", ",", "clipNames", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "\n", "                ", "if", "self", ".", "modelType", "==", "\"tcn\"", "or", "self", ".", "modelType", "==", "\"mstcn\"", "or", "self", ".", "modelType", "==", "\"mcbtcn\"", ":", "\n", "                    ", "anomaly", "=", "anomaly", ".", "view", "(", "-", "1", ")", "\n", "clipNames", "=", "np", ".", "array", "(", "clipNames", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", "=", "data", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "anomaly", "=", "anomaly", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "masks", "=", "masks", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "modelType", "==", "\"mstcn\"", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "data", ",", "masks", ")", "\n", "outputs", "=", "outputs", "[", "-", "1", "]", ".", "view", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "modelType", "==", "\"mcbtcn\"", ":", "\n", "                    ", "classOutputs", ",", "binaryOutputs", "=", "self", ".", "model", "(", "data", ",", "masks", ")", "\n", "outputs", "=", "binaryOutputs", "[", "-", "1", "]", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "", "mask", "=", "(", "anomaly", "!=", "self", ".", "maskValue", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "\n", "outputs", "=", "outputs", "[", "mask", "]", "\n", "\n", "clipNames", "=", "np", ".", "array", "(", "clipNames", ")", "[", "mask", "]", ".", "tolist", "(", ")", "\n", "anomaly", "=", "anomaly", "[", "mask", "]", "\n", "loss", "=", "self", ".", "mseLoss", "(", "outputs", ".", "squeeze", "(", ")", ",", "anomaly", ")", "\n", "\n", "outputs", "=", "outputs", ".", "reshape", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "anomaly", "=", "anomaly", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "anomalyTargets", "+=", "anomaly", "\n", "anomalyPredictions", "+=", "outputs", "\n", "\n", "if", "step", "%", "10", "==", "0", ":", "\n", "                    ", "progress_bar", ".", "set_description", "(", "\"Val [{}]:[{}/{}] Loss: {:.2f}\"", ".", "format", "(", "\n", "epoch", ",", "step", ",", "self", ".", "valLoader", ".", "__len__", "(", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "for", "clipName", ",", "prediction", ",", "target", "in", "zip", "(", "clipNames", ",", "outputs", ",", "anomaly", ")", ":", "\n", "                    ", "if", "clipName", "not", "in", "predictions", ":", "\n", "                        ", "predictions", "[", "clipName", "]", "=", "[", "]", "\n", "", "if", "clipName", "not", "in", "targets", ":", "\n", "                        ", "targets", "[", "clipName", "]", "=", "[", "]", "\n", "", "predictions", "[", "clipName", "]", ".", "append", "(", "prediction", ")", "\n", "targets", "[", "clipName", "]", ".", "append", "(", "target", ")", "\n", "\n", "", "", "videoClips", "=", "self", ".", "valLoader", ".", "dataset", ".", "__getVideoClips__", "(", ")", "\n", "for", "iou", "in", "IOUs", ":", "\n", "                ", "for", "s", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "                    ", "tp", ",", "fp", ",", "fn", "=", "0", ",", "0", ",", "0", "\n", "normal", "=", "{", "\"tp\"", ":", "0", ",", "\"fp\"", ":", "0", ",", "\"fn\"", ":", "0", "}", "\n", "abnormal", "=", "{", "\"tp\"", ":", "0", ",", "\"fp\"", ":", "0", ",", "\"fn\"", ":", "0", "}", "\n", "for", "videoName", ",", "clipList", "in", "tqdm", "(", "videoClips", ".", "items", "(", ")", ")", ":", "\n", "                        ", "clipPredictions", "=", "[", "]", "\n", "clipTargets", "=", "[", "]", "\n", "for", "clipName", "in", "clipList", ":", "\n", "                            ", "clipPredictions", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "predictions", "[", "clipName", "]", ")", ")", ")", "\n", "clipTargets", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "targets", "[", "clipName", "]", ")", ")", ")", "\n", "# if \"Assault010_x264\" in videoName:", "\n", "#     auc_score = sklrn.roc_auc_score(clipTargets, clipPredictions)", "\n", "#     utils.visualizeHeatMapPredictions(clipPredictions, clipTargets, self.expFolder, videoName)", "\n", "#     print(\"AUC Score of selected video: {}\".format(auc_score))", "\n", "", "clipPredictions", "=", "(", "np", ".", "array", "(", "clipPredictions", ")", ">", "threshold", ")", ".", "astype", "(", "\"float32\"", ")", ".", "tolist", "(", ")", "\n", "if", "iou", "==", "0.25", "and", "threshold", "==", "0.5", ":", "\n", "                            ", "utils", ".", "visualizeTemporalPredictions", "(", "clipPredictions", ",", "clipTargets", ",", "self", ".", "expFolder", ",", "videoName", ")", "\n", "\n", "", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clipPredictions", ",", "clipTargets", ",", "iou", ",", "bg_class", "=", "0", ")", "\n", "abnormal", "[", "\"tp\"", "]", "+=", "tp1", "\n", "abnormal", "[", "\"fp\"", "]", "+=", "fp1", "\n", "abnormal", "[", "\"fn\"", "]", "+=", "fn1", "\n", "\n", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clipPredictions", ",", "clipTargets", ",", "iou", ",", "bg_class", "=", "1", ")", "\n", "normal", "[", "\"tp\"", "]", "+=", "tp1", "\n", "normal", "[", "\"fp\"", "]", "+=", "fp1", "\n", "normal", "[", "\"fn\"", "]", "+=", "fn1", "\n", "\n", "if", "self", ".", "noNormalSegmentation", ":", "\n", "                            ", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clipPredictions", ",", "clipTargets", ",", "iou", ",", "bg_class", "=", "0", ")", "\n", "", "else", ":", "\n", "                            ", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clipPredictions", ",", "clipTargets", ",", "iou", ",", "bg_class", "=", "-", "1", ")", "\n", "# if \"Assault010_x264\" in videoName:", "\n", "#     precision = tp1 / float(tp1 + fp1 + 1e-10)", "\n", "#     recall = tp1 / float(tp1 + fn1 + 1e-10)", "\n", "#     f1 = 2.0 * (precision * recall) / (precision + recall + 1e-10)", "\n", "#     print(\"F1 Score of selected video: {}\".format(f1))", "\n", "\n", "", "tp", "+=", "tp1", ";", "\n", "fp", "+=", "fp1", ";", "\n", "fn", "+=", "fn1", ";", "\n", "\n", "", "a_f1", ",", "a_precision", ",", "a_recall", "=", "calc_f1", "(", "abnormal", "[", "\"fn\"", "]", ",", "abnormal", "[", "\"fp\"", "]", ",", "abnormal", "[", "\"tp\"", "]", ")", "\n", "print", "(", "'Abnormal F1@%0.2f-%0.2f : %.4f, Precision: %.4f, Recall: %.4f'", "%", "(", "iou", ",", "threshold", ",", "a_f1", ",", "\n", "a_precision", "*", "100", ",", "\n", "a_recall", "*", "100", ")", ")", "\n", "n_f1", ",", "n_precision", ",", "n_recall", "=", "calc_f1", "(", "normal", "[", "\"fn\"", "]", ",", "normal", "[", "\"fp\"", "]", ",", "normal", "[", "\"tp\"", "]", ")", "\n", "print", "(", "'Normal F1@%0.2f-%0.2f : %.4f, Precision: %.4f, Recall: %.4f'", "%", "(", "iou", ",", "threshold", ",", "n_f1", ",", "\n", "n_precision", "*", "100", ",", "\n", "n_recall", "*", "100", ")", ")", "\n", "f1", ",", "precision", ",", "recall", "=", "calc_f1", "(", "fn", ",", "fp", ",", "tp", ")", "\n", "if", "iou", "==", "0.25", "and", "threshold", "==", "0.5", ":", "\n", "                        ", "score", "=", "f1", "\n", "", "print", "(", "'F1@%0.2f-%0.2f : %.2f, TP: %.2f, FP: %.2f, FN: %.2f'", "%", "(", "iou", ",", "threshold", ",", "f1", ",", "tp", ",", "fp", ",", "fn", ")", ")", "\n", "# print('Precision@%0.2f-%0.2f : %.2f, Recall@%0.2f-%0.2f: %.2f' % (iou, threshold, precision * 100,", "\n", "#                                                                   iou, threshold, recall * 100))", "\n", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "                        ", "self", ".", "writer", ".", "add_scalar", "(", "\"Eval/F1_%0.2f-%0.2f\"", "%", "(", "iou", ",", "threshold", ")", ",", "f1", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/TP_%0.2f-%0.2f\"", "%", "(", "iou", ",", "threshold", ")", ",", "tp", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/FP_%0.2f-%0.2f\"", "%", "(", "iou", ",", "threshold", ")", ",", "fp", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/FN_%0.2f-%0.2f\"", "%", "(", "iou", ",", "threshold", ")", ",", "fn", ",", "self", ".", "stepCounter", ")", "\n", "\n", "", "", "", "", "fpr", ",", "tpr", ",", "_", "=", "sklrn", ".", "roc_curve", "(", "anomalyTargets", ",", "anomalyPredictions", ")", "\n", "rocAUC", "=", "sklrn", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "\"Eval/AUC\"", ",", "rocAUC", ",", "self", ".", "stepCounter", ")", "\n", "", "print", "(", "'AUC Score %0.2f'", "%", "(", "rocAUC", "*", "100", ")", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.classValidation": [[311, 371], ["violance.ViolenceDetection.model.eval", "metrics.calc_f1", "print", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "violance.ViolenceDetection.writer.add_scalar", "torch.no_grad", "tqdm.autonotebook.tqdm.autonotebook.tqdm", "enumerate", "violance.ViolenceDetection.valLoader.dataset.__getVideoClips__", "tqdm.autonotebook.tqdm.autonotebook.tqdm", "torch.cuda.is_available", "violance.ViolenceDetection.model", "outputs[].transpose().reshape().cpu().numpy", "anomaly.cuda().float.cuda().float.cpu().numpy().flatten().tolist", "zip", "violance.ViolenceDetection.items", "numpy.argmax", "utils.utils.utils.visualizeTemporalPredictions", "metrics.f_score", "anomaly.cuda().float.cuda().float.view", "numpy.array().reshape().tolist", "data.cuda().float.cuda().float.cuda().float", "anomaly.cuda().float.cuda().float.cuda().float", "masks.cuda().float.cuda().float.cuda().float", "violance.ViolenceDetection.ceLoss", "tqdm.autonotebook.tqdm.autonotebook.tqdm.set_description", "numpy.argmax.append", "clipTargets.append", "numpy.array", "output.transpose().reshape", "anomaly.cuda().float.cuda().float.long", "outputs[].transpose().reshape().cpu", "anomaly.cuda().float.cuda().float.cpu().numpy().flatten", "numpy.array().reshape", "data.cuda().float.cuda().float.cuda", "anomaly.cuda().float.cuda().float.cuda", "masks.cuda().float.cuda().float.cuda", "violance.ViolenceDetection.valLoader.__len__", "loss.item", "output.transpose", "outputs[].transpose().reshape", "anomaly.cuda().float.cuda().float.cpu().numpy", "numpy.array", "outputs[].transpose", "anomaly.cuda().float.cuda().float.cpu"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__getVideoClips__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__len__"], ["", "def", "classValidation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "predictions", "=", "{", "}", "\n", "targets", "=", "{", "}", "\n", "\n", "tp", ",", "fp", ",", "fn", "=", "0", ",", "0", ",", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "progress_bar", "=", "tqdm", "(", "self", ".", "valLoader", ")", "\n", "\n", "for", "step", ",", "(", "data", ",", "masks", ",", "anomaly", ",", "category", ",", "_", ",", "clipNames", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "\n", "                ", "if", "self", ".", "modelType", "==", "\"mstcn\"", ":", "\n", "                    ", "anomaly", "=", "anomaly", ".", "view", "(", "-", "1", ")", "\n", "clipNames", "=", "np", ".", "array", "(", "clipNames", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", "=", "data", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "anomaly", "=", "anomaly", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "masks", "=", "masks", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "outputs", "=", "self", ".", "model", "(", "data", ",", "masks", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "output", "in", "outputs", ":", "\n", "                    ", "loss", "+=", "self", ".", "ceLoss", "(", "output", ".", "transpose", "(", "2", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "anomaly", ".", "long", "(", ")", ")", "\n", "\n", "", "outputs", "=", "outputs", "[", "-", "1", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "anomaly", "=", "anomaly", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "step", "%", "10", "==", "0", ":", "\n", "                    ", "progress_bar", ".", "set_description", "(", "\"Val [{}]:[{}/{}] Loss: {:.2f}\"", ".", "format", "(", "\n", "epoch", ",", "step", ",", "self", ".", "valLoader", ".", "__len__", "(", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "for", "clipName", ",", "prediction", ",", "target", "in", "zip", "(", "clipNames", ",", "outputs", ",", "anomaly", ")", ":", "\n", "                    ", "predictions", "[", "clipName", "]", "=", "prediction", "\n", "targets", "[", "clipName", "]", "=", "target", "\n", "\n", "", "", "videoClips", "=", "self", ".", "valLoader", ".", "dataset", ".", "__getVideoClips__", "(", ")", "\n", "for", "videoName", ",", "clipList", "in", "tqdm", "(", "videoClips", ".", "items", "(", ")", ")", ":", "\n", "                ", "clipPredictions", "=", "[", "]", "\n", "clipTargets", "=", "[", "]", "\n", "for", "clipName", "in", "clipList", ":", "\n", "                    ", "clipPredictions", ".", "append", "(", "predictions", "[", "clipName", "]", ")", "\n", "clipTargets", ".", "append", "(", "targets", "[", "clipName", "]", ")", "\n", "", "clipPredictions", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "clipPredictions", ")", ",", "axis", "=", "1", ")", "\n", "utils", ".", "visualizeTemporalPredictions", "(", "clipPredictions", ",", "clipTargets", ",", "self", ".", "expFolder", ",", "videoName", ")", "\n", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clipPredictions", ",", "clipTargets", ",", "0.1", ",", "bg_class", "=", "-", "1", ")", "\n", "tp", "+=", "tp1", ";", "\n", "fp", "+=", "fp1", ";", "\n", "fn", "+=", "fn1", ";", "\n", "\n", "", "", "f1", ",", "precision", ",", "recall", "=", "calc_f1", "(", "fn", ",", "fp", ",", "tp", ")", "\n", "print", "(", "'F1@%0.2f-%0.2f : %.4f, TP: %.4f, FP: %.4f, FN: %.4f'", "%", "(", "0.1", ",", "0.5", ",", "f1", ",", "tp", ",", "fp", ",", "fn", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Eval/F1_0.10-%0.2f\"", "%", "0.5", ",", "f1", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/%0.2f/TP_0.10\"", "%", "0.5", ",", "tp", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/%0.2f/FP_0.10\"", "%", "0.5", ",", "fp", ",", "self", ".", "stepCounter", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Confusion/%0.2f/TP_0.10\"", "%", "0.5", ",", "fn", ",", "self", ".", "stepCounter", ")", "\n", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.saveCheckpoint": [[372, 378], ["torch.save", "violance.ViolenceDetection.model.state_dict", "violance.ViolenceDetection.optimizer.state_dict", "violance.ViolenceDetection.scheduler.state_dict"], "methods", ["None"], ["", "def", "saveCheckpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "\"model\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"stepCounter\"", ":", "self", ".", "stepCounter", ",", "\n", "\"bestScore\"", ":", "self", ".", "bestAUC", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance.ViolenceDetection.loadCheckpoint": [[379, 386], ["torch.load", "violance.ViolenceDetection.model.load_state_dict", "violance.ViolenceDetection.optimizer.load_state_dict", "violance.ViolenceDetection.scheduler.load_state_dict"], "methods", ["None"], ["", "def", "loadCheckpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "self", ".", "bestAUC", "=", "checkpoint", "[", "\"bestScore\"", "]", "\n", "self", ".", "stepCounter", "=", "checkpoint", "[", "\"stepCounter\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.__init__": [[20, 43], ["logger.info", "hasattr", "addict.Dict", "hasattr", "models.handlers.handler.HANDLERS.get", "violance_v2.ViolenceDetection.load_checkpoint", "os.path.join", "violance_v2.ViolenceDetection.backup_src", "os.path.exists", "os.makedirs", "hasattr", "getattr", "torch.utils.tensorboard.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.load_checkpoint", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.backup_src"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "logger", ".", "info", "(", "cfg", ".", "pretty_text", ")", "\n", "self", ".", "handler", "=", "HANDLERS", ".", "get", "(", "cfg", ".", "model_type", ")", "(", "cfg", ")", "\n", "\n", "if", "hasattr", "(", "cfg", ",", "\"load_from\"", ")", ":", "\n", "            ", "self", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "\n", "", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "step_counter", "=", "0", "\n", "self", ".", "config", "=", "Dict", "(", "log_step", "=", "cfg", ".", "log_step", ")", "\n", "\n", "if", "hasattr", "(", "cfg", ",", "\"train\"", ")", ":", "\n", "            ", "self", ".", "config", ".", "exp_dir", "=", "cfg", ".", "train", ".", "exp_dir", "\n", "self", ".", "config", ".", "chk_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "train", ".", "exp_dir", ",", "\"checkpoints\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "chk_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "chk_dir", ")", "\n", "\n", "", "self", ".", "backup_src", "(", ")", "\n", "self", ".", "num_epochs", "=", "cfg", ".", "train", ".", "num_epochs", "\n", "\n", "if", "hasattr", "(", "cfg", ".", "train", ",", "\"tensorboard\"", ")", "and", "getattr", "(", "cfg", ".", "train", ",", "\"tensorboard\"", ")", ":", "\n", "                ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "train", ".", "exp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.train": [[44, 60], ["range", "violance_v2.ViolenceDetection.handler.init_train_epoch_dict", "violance_v2.ViolenceDetection.handler.model.train", "enumerate", "violance_v2.ViolenceDetection.handler.epoch_report", "violance_v2.ViolenceDetection.report", "violance_v2.ViolenceDetection.save_checkpoint", "violance_v2.ViolenceDetection.eval_epoch", "violance_v2.ViolenceDetection.handler.train_iteration", "violance_v2.ViolenceDetection.iter_info", "violance_v2.ViolenceDetection.report", "os.path.join", "len", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_train_epoch_dict", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.epoch_report", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.report", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.save_checkpoint", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.eval_epoch", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.train_iteration", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.iter_info", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.report"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "epoch_dict", "=", "self", ".", "handler", ".", "init_train_epoch_dict", "(", ")", "\n", "self", ".", "handler", ".", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "self", ".", "handler", ".", "train_loader", ")", ":", "\n", "                ", "iter_report", ",", "epoch_dict", "=", "self", ".", "handler", ".", "train_iteration", "(", "data", ",", "epoch_dict", ")", "\n", "self", ".", "step_counter", "+=", "1", "\n", "info", "=", "self", ".", "iter_info", "(", "\"train\"", ",", "step", ",", "len", "(", "self", ".", "handler", ".", "train_loader", ")", ",", "iter_report", ")", "\n", "if", "step", "%", "self", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                    ", "print", "(", "info", ")", "\n", "", "self", ".", "report", "(", "iter_report", ",", "\"train\"", ")", "\n", "", "epoch_report", "=", "self", ".", "handler", ".", "epoch_report", "(", "epoch_dict", ")", "\n", "self", ".", "report", "(", "epoch_report", ",", "\"train/epoch\"", ")", "\n", "self", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "chk_dir", ",", "\"epoch-{}.pth\"", ".", "format", "(", "self", ".", "epoch", ")", ")", ")", "\n", "self", ".", "eval_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.test": [[61, 63], ["violance_v2.ViolenceDetection.eval_epoch"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.eval_epoch"], ["", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval_epoch", "(", "split", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.eval_epoch": [[64, 76], ["violance_v2.ViolenceDetection.handler.model.eval", "violance_v2.ViolenceDetection.handler.init_eval_epoch_dict", "getattr", "enumerate", "violance_v2.ViolenceDetection.handler.epoch_report", "violance_v2.ViolenceDetection.handler.calculate_score", "violance_v2.ViolenceDetection.report", "violance_v2.ViolenceDetection.handler.eval_iteration", "violance_v2.ViolenceDetection.iter_info", "len", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.init_eval_epoch_dict", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.epoch_report", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.calculate_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.report", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.eval_iteration", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.iter_info"], ["", "def", "eval_epoch", "(", "self", ",", "split", "=", "\"val\"", ")", ":", "\n", "        ", "self", ".", "handler", ".", "model", ".", "eval", "(", ")", "\n", "epoch_dict", "=", "self", ".", "handler", ".", "init_eval_epoch_dict", "(", ")", "\n", "dataloader", "=", "getattr", "(", "self", ".", "handler", ",", "\"{}_loader\"", ".", "format", "(", "split", ")", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "iter_report", ",", "epoch_dict", "=", "self", ".", "handler", ".", "eval_iteration", "(", "data", ",", "epoch_dict", ")", "\n", "info", "=", "self", ".", "iter_info", "(", "split", ",", "step", ",", "len", "(", "dataloader", ")", ",", "iter_report", ")", "\n", "if", "step", "%", "self", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "print", "(", "info", ")", "\n", "", "", "epoch_report", "=", "self", ".", "handler", ".", "epoch_report", "(", "epoch_dict", ")", "\n", "epoch_report", ",", "output_data", "=", "self", ".", "handler", ".", "calculate_score", "(", "epoch_dict", ",", "epoch_report", ")", "\n", "self", ".", "report", "(", "epoch_report", ",", "split", ")", "\n", "# TODO: visualize outputs", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.report": [[78, 93], ["hasattr", "print", "print", "print", "report_data.items", "logger.debug", "str", "violance_v2.ViolenceDetection.report", "violance_v2.ViolenceDetection.writer.add_scalar", "type", "type"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.report"], ["", "def", "report", "(", "self", ",", "report_data", ",", "phase", ")", ":", "\n", "        ", "if", "'message'", "in", "report_data", ":", "\n", "            ", "print", "(", "'-'", "*", "50", ")", "\n", "print", "(", "\"{:5} [{:3}] : {}\"", ".", "format", "(", "phase", ",", "self", ".", "epoch", ",", "report_data", "[", "'message'", "]", ")", ")", "\n", "print", "(", "'-'", "*", "50", ")", "\n", "del", "report_data", "[", "'message'", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"writer\"", ")", ":", "\n", "            ", "for", "label", ",", "data", "in", "report_data", ".", "items", "(", ")", ":", "\n", "                ", "absolute_label", "=", "phase", "+", "\"/\"", "+", "str", "(", "label", ")", "\n", "if", "type", "(", "data", ")", "==", "dict", "or", "type", "(", "data", ")", "==", "Dict", ":", "\n", "                    ", "self", ".", "report", "(", "data", ",", "absolute_label", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "absolute_label", ",", "data", ",", "self", ".", "step_counter", ")", "\n", "", "", "", "else", ":", "\n", "            ", "logger", ".", "debug", "(", "\"report has not written anywhere because tensorboard was not defined\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.iter_info": [[94, 99], ["violance_v2.ViolenceDetection.handler.iter_info"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.iter_info"], ["", "", "def", "iter_info", "(", "self", ",", "phase", ",", "step", ",", "total_step", ",", "report_data", ")", ":", "\n", "        ", "pre_info", "=", "\"{:5} [{:3}] : [{:3} / {}]   global_step:{:5} \"", ".", "format", "(", "phase", ",", "self", ".", "epoch", ",", "step", ",", "\n", "total_step", ",", "self", ".", "step_counter", ")", "\n", "info", "=", "self", ".", "handler", ".", "iter_info", "(", "report_data", ")", "\n", "return", "pre_info", "+", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.save_checkpoint": [[100, 104], ["violance_v2.ViolenceDetection.handler.save_variables", "torch.save", "violance_v2.ViolenceDetection.to_dict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.save_variables"], ["", "def", "save_checkpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "save_dict", "=", "self", ".", "handler", ".", "save_variables", "(", ")", "\n", "save_dict", ".", "step_counter", "=", "self", ".", "step_counter", "\n", "torch", ".", "save", "(", "save_dict", ".", "to_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.load_checkpoint": [[105, 109], ["torch.load", "violance_v2.ViolenceDetection.handler.load_variables"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.load_variables"], ["", "def", "load_checkpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "step_counter", "=", "checkpoint", "[", "\"step_counter\"", "]", "\n", "self", ".", "handler", ".", "load_variables", "(", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.violance_v2.ViolenceDetection.backup_src": [[110, 123], ["os.path.join", "os.path.exists", "shutil.copytree", "os.path.abspath().rsplit", "utils.utils.input_with_timeout", "shutil.rmtree", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.input_with_timeout"], ["", "def", "backup_src", "(", "self", ")", ":", "\n", "        ", "src_folder", "=", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "0", "]", "\n", "dst_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "exp_dir", ",", "\"backup_code\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_folder", ")", ":", "\n", "            ", "answer", "=", "input_with_timeout", "(", "\"Do you want to delete already exist backup code / keep old backup?(y/n): \"", ",", "\n", "5", ",", "default_answer", "=", "'y'", ")", "\n", "if", "answer", "==", "\"y\"", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "dst_folder", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n", "", "", "shutil", ".", "copytree", "(", "src_folder", ",", "dst_folder", ",", "ignore", "=", "ignore_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.ConfigDict.__missing__": [[33, 35], ["KeyError"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.ConfigDict.__getattr__": [[36, 47], ["super().__getattr__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "value", "=", "super", "(", "ConfigDict", ",", "self", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "ex", "=", "AttributeError", "(", "f\"'{self.__class__.__name__}' object has no \"", "\n", "f\"attribute '{name}'\"", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "ex", "=", "e", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "", "raise", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._validate_py_syntax": [[93, 101], ["open", "f.read", "ast.parse", "SyntaxError"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_validate_py_syntax", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "try", ":", "\n", "            ", "ast", ".", "parse", "(", "content", ")", "\n", "", "except", "SyntaxError", "as", "e", ":", "\n", "            ", "raise", "SyntaxError", "(", "'There are syntax errors in config '", "\n", "f'file {filename}: {e}'", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._substitute_predefined_vars": [[103, 122], ["os.dirname", "os.basename", "dict", "dict.items", "os.splitext", "os.splitext", "open", "f.read", "value.replace.replace.replace", "re.sub", "open", "tmp_config_file.write", "str"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_substitute_predefined_vars", "(", "filename", ",", "temp_config_name", ")", ":", "\n", "        ", "file_dirname", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "file_basename", "=", "osp", ".", "basename", "(", "filename", ")", "\n", "file_basename_no_extension", "=", "osp", ".", "splitext", "(", "file_basename", ")", "[", "0", "]", "\n", "file_extname", "=", "osp", ".", "splitext", "(", "filename", ")", "[", "1", "]", "\n", "support_templates", "=", "dict", "(", "\n", "fileDirname", "=", "file_dirname", ",", "\n", "fileBasename", "=", "file_basename", ",", "\n", "fileBasenameNoExtension", "=", "file_basename_no_extension", ",", "\n", "fileExtname", "=", "file_extname", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config_file", "=", "f", ".", "read", "(", ")", "\n", "", "for", "key", ",", "value", "in", "support_templates", ".", "items", "(", ")", ":", "\n", "            ", "regexp", "=", "r'\\{\\{\\s*'", "+", "str", "(", "key", ")", "+", "r'\\s*\\}\\}'", "\n", "value", "=", "value", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "config_file", "=", "re", ".", "sub", "(", "regexp", ",", "value", ",", "config_file", ")", "\n", "", "with", "open", "(", "temp_config_name", ",", "'w'", ")", "as", "tmp_config_file", ":", "\n", "            ", "tmp_config_file", ".", "write", "(", "config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._file2dict": [[123, 194], ["os.abspath", "config.check_file_exist", "os.expanduser", "os.splitext", "IOError", "tempfile.TemporaryDirectory", "tempfile.NamedTemporaryFile", "os.basename", "os.abspath.endswith", "tempfile.NamedTemporaryFile.close", "open", "f.read", "os.dirname", "mmcv.load.pop", "list", "list", "dict", "config.Config._merge_a_into_b", "list.append", "platform.system", "tempfile.NamedTemporaryFile.close", "config.Config._substitute_predefined_vars", "shutil.copyfile", "sys.path.insert", "config.Config._validate_py_syntax", "importlib.import_module", "sys.path.pop", "os.abspath.endswith", "isinstance", "config.Config._file2dict", "list.append", "list.append", "config.Config._merge_a_into_b", "os.splitext", "mmcv.load", "os.join", "len", "KeyError", "importlib.import_module.__dict__.items", "name.startswith", "config.Config._merge_a_into_b", "c.keys"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.check_file_exist", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._substitute_predefined_vars", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._validate_py_syntax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._file2dict", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b"], ["", "", "@", "staticmethod", "\n", "def", "_file2dict", "(", "filename", ",", "use_predefined_variables", "=", "True", ")", ":", "\n", "        ", "filename", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "filename", ")", ")", "\n", "check_file_exist", "(", "filename", ")", "\n", "fileExtname", "=", "osp", ".", "splitext", "(", "filename", ")", "[", "1", "]", "\n", "if", "fileExtname", "not", "in", "[", "'.py'", ",", "'.json'", ",", "'.yaml'", ",", "'.yml'", "]", ":", "\n", "            ", "raise", "IOError", "(", "'Only py/yml/yaml/json type are supported now!'", ")", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "temp_config_dir", ":", "\n", "            ", "temp_config_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", "\n", "dir", "=", "temp_config_dir", ",", "suffix", "=", "fileExtname", ")", "\n", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "                ", "temp_config_file", ".", "close", "(", ")", "\n", "", "temp_config_name", "=", "osp", ".", "basename", "(", "temp_config_file", ".", "name", ")", "\n", "# Substitute predefined variables", "\n", "if", "use_predefined_variables", ":", "\n", "                ", "Config", ".", "_substitute_predefined_vars", "(", "filename", ",", "\n", "temp_config_file", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "filename", ",", "temp_config_file", ".", "name", ")", "\n", "\n", "", "if", "filename", ".", "endswith", "(", "'.py'", ")", ":", "\n", "                ", "temp_module_name", "=", "osp", ".", "splitext", "(", "temp_config_name", ")", "[", "0", "]", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "temp_config_dir", ")", "\n", "Config", ".", "_validate_py_syntax", "(", "filename", ")", "\n", "mod", "=", "import_module", "(", "temp_module_name", ")", "\n", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "cfg_dict", "=", "{", "\n", "name", ":", "value", "\n", "for", "name", ",", "value", "in", "mod", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "not", "name", ".", "startswith", "(", "'__'", ")", "\n", "}", "\n", "# delete imported module", "\n", "del", "sys", ".", "modules", "[", "temp_module_name", "]", "\n", "", "elif", "filename", ".", "endswith", "(", "(", "'.yml'", ",", "'.yaml'", ",", "'.json'", ")", ")", ":", "\n", "                ", "import", "mmcv", "\n", "cfg_dict", "=", "mmcv", ".", "load", "(", "temp_config_file", ".", "name", ")", "\n", "# close temp file", "\n", "", "temp_config_file", ".", "close", "(", ")", "\n", "\n", "", "cfg_text", "=", "filename", "+", "'\\n'", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg_text", "+=", "f", ".", "read", "(", ")", "\n", "\n", "", "if", "BASE_KEY", "in", "cfg_dict", ":", "\n", "            ", "cfg_dir", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "base_filename", "=", "cfg_dict", ".", "pop", "(", "BASE_KEY", ")", "\n", "base_filename", "=", "base_filename", "if", "isinstance", "(", "\n", "base_filename", ",", "list", ")", "else", "[", "base_filename", "]", "\n", "\n", "cfg_dict_list", "=", "list", "(", ")", "\n", "cfg_text_list", "=", "list", "(", ")", "\n", "for", "f", "in", "base_filename", ":", "\n", "                ", "_cfg_dict", ",", "_cfg_text", "=", "Config", ".", "_file2dict", "(", "osp", ".", "join", "(", "cfg_dir", ",", "f", ")", ")", "\n", "cfg_dict_list", ".", "append", "(", "_cfg_dict", ")", "\n", "cfg_text_list", ".", "append", "(", "_cfg_text", ")", "\n", "\n", "", "base_cfg_dict", "=", "dict", "(", ")", "\n", "for", "c", "in", "cfg_dict_list", ":", "\n", "                ", "if", "len", "(", "base_cfg_dict", ".", "keys", "(", ")", "&", "c", ".", "keys", "(", ")", ")", ">", "0", ":", "\n", "                    ", "raise", "KeyError", "(", "'Duplicate key is not allowed among bases'", ")", "\n", "", "base_cfg_dict", ".", "update", "(", "c", ")", "\n", "\n", "", "base_cfg_dict", "=", "Config", ".", "_merge_a_into_b", "(", "cfg_dict", ",", "base_cfg_dict", ")", "\n", "cfg_dict", "=", "base_cfg_dict", "\n", "\n", "# merge cfg_text", "\n", "cfg_text_list", ".", "append", "(", "cfg_text", ")", "\n", "cfg_text", "=", "'\\n'", ".", "join", "(", "cfg_text_list", ")", "\n", "\n", "", "return", "cfg_dict", ",", "cfg_text", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b": [[195, 213], ["b.copy.copy.copy", "a.items", "isinstance", "config.Config._merge_a_into_b", "v.pop", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b"], ["", "@", "staticmethod", "\n", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "# merge dict `a` into dict `b` (non-inplace). values in `a` will", "\n", "# overwrite `b`.", "\n", "# copy first to avoid inplace modification", "\n", "        ", "b", "=", "b", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", "and", "k", "in", "b", "and", "not", "v", ".", "pop", "(", "DELETE_KEY", ",", "False", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "b", "[", "k", "]", ",", "dict", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "f'{k}={v} in child config cannot inherit from base '", "\n", "f'because {k} is a dict in the child config but is of '", "\n", "f'type {type(b[k])} in base config. You may set '", "\n", "f'`{DELETE_KEY}=True` to ignore the base config'", ")", "\n", "", "b", "[", "k", "]", "=", "Config", ".", "_merge_a_into_b", "(", "v", ",", "b", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "b", "[", "k", "]", "=", "v", "\n", "", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.fromfile": [[214, 219], ["config.Config._file2dict", "config.Config"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._file2dict"], ["", "@", "staticmethod", "\n", "def", "fromfile", "(", "filename", ",", "use_predefined_variables", "=", "True", ")", ":", "\n", "        ", "cfg_dict", ",", "cfg_text", "=", "Config", ".", "_file2dict", "(", "filename", ",", "\n", "use_predefined_variables", ")", "\n", "return", "Config", "(", "cfg_dict", ",", "cfg_text", "=", "cfg_text", ",", "filename", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.auto_argparser": [[220, 231], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.Config.fromfile", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.add_args", "argparse.ArgumentParser.parse_known_args"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.fromfile", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.add_args"], ["", "@", "staticmethod", "\n", "def", "auto_argparser", "(", "description", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate argparser from config file automatically (experimental)\"\"\"", "\n", "partial_parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "partial_parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "cfg_file", "=", "partial_parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "config", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "cfg_file", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "add_args", "(", "parser", ",", "cfg", ")", "\n", "return", "parser", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__init__": [[232, 252], ["super().__setattr__", "super().__setattr__", "super().__setattr__", "dict", "config.ConfigDict", "isinstance", "TypeError", "KeyError", "open", "f.read", "type"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__"], ["", "def", "__init__", "(", "self", ",", "cfg_dict", "=", "None", ",", "cfg_text", "=", "None", ",", "filename", "=", "None", ")", ":", "\n", "        ", "if", "cfg_dict", "is", "None", ":", "\n", "            ", "cfg_dict", "=", "dict", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "cfg_dict", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'cfg_dict must be a dict, but '", "\n", "f'got {type(cfg_dict)}'", ")", "\n", "", "for", "key", "in", "cfg_dict", ":", "\n", "            ", "if", "key", "in", "RESERVED_KEYS", ":", "\n", "                ", "raise", "KeyError", "(", "f'{key} is reserved for config file'", ")", "\n", "\n", "", "", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_cfg_dict'", ",", "ConfigDict", "(", "cfg_dict", ")", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_filename'", ",", "filename", ")", "\n", "if", "cfg_text", ":", "\n", "            ", "text", "=", "cfg_text", "\n", "", "elif", "filename", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "text", "=", "f", ".", "read", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "text", "=", "''", "\n", "", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_text'", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.filename": [[253, 256], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filename", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.text": [[257, 260], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "text", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.pretty_text": [[261, 354], ["config.Config._cfg_dict.to_dict", "config.Config.pretty_text._format_dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "pretty_text", "(", "self", ")", ":", "\n", "\n", "        ", "indent", "=", "4", "\n", "\n", "def", "_indent", "(", "s_", ",", "num_spaces", ")", ":", "\n", "            ", "s", "=", "s_", ".", "split", "(", "'\\n'", ")", "\n", "if", "len", "(", "s", ")", "==", "1", ":", "\n", "                ", "return", "s_", "\n", "", "first", "=", "s", ".", "pop", "(", "0", ")", "\n", "s", "=", "[", "(", "num_spaces", "*", "' '", ")", "+", "line", "for", "line", "in", "s", "]", "\n", "s", "=", "'\\n'", ".", "join", "(", "s", ")", "\n", "s", "=", "first", "+", "'\\n'", "+", "s", "\n", "return", "s", "\n", "\n", "", "def", "_format_basic_types", "(", "k", ",", "v", ",", "use_mapping", "=", "False", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "v_str", "=", "f\"'{v}'\"", "\n", "", "else", ":", "\n", "                ", "v_str", "=", "str", "(", "v", ")", "\n", "\n", "", "if", "use_mapping", ":", "\n", "                ", "k_str", "=", "f\"'{k}'\"", "if", "isinstance", "(", "k", ",", "str", ")", "else", "str", "(", "k", ")", "\n", "attr_str", "=", "f'{k_str}: {v_str}'", "\n", "", "else", ":", "\n", "                ", "attr_str", "=", "f'{str(k)}={v_str}'", "\n", "", "attr_str", "=", "_indent", "(", "attr_str", ",", "indent", ")", "\n", "\n", "return", "attr_str", "\n", "\n", "", "def", "_format_list", "(", "k", ",", "v", ",", "use_mapping", "=", "False", ")", ":", "\n", "# check if all items in the list are dict", "\n", "            ", "if", "all", "(", "isinstance", "(", "_", ",", "dict", ")", "for", "_", "in", "v", ")", ":", "\n", "                ", "v_str", "=", "'[\\n'", "\n", "v_str", "+=", "'\\n'", ".", "join", "(", "\n", "f'dict({_indent(_format_dict(v_), indent)}),'", "\n", "for", "v_", "in", "v", ")", ".", "rstrip", "(", "','", ")", "\n", "if", "use_mapping", ":", "\n", "                    ", "k_str", "=", "f\"'{k}'\"", "if", "isinstance", "(", "k", ",", "str", ")", "else", "str", "(", "k", ")", "\n", "attr_str", "=", "f'{k_str}: {v_str}'", "\n", "", "else", ":", "\n", "                    ", "attr_str", "=", "f'{str(k)}={v_str}'", "\n", "", "attr_str", "=", "_indent", "(", "attr_str", ",", "indent", ")", "+", "']'", "\n", "", "else", ":", "\n", "                ", "attr_str", "=", "_format_basic_types", "(", "k", ",", "v", ",", "use_mapping", ")", "\n", "", "return", "attr_str", "\n", "\n", "", "def", "_contain_invalid_identifier", "(", "dict_str", ")", ":", "\n", "            ", "contain_invalid_identifier", "=", "False", "\n", "for", "key_name", "in", "dict_str", ":", "\n", "                ", "contain_invalid_identifier", "|=", "(", "not", "str", "(", "key_name", ")", ".", "isidentifier", "(", ")", ")", "\n", "", "return", "contain_invalid_identifier", "\n", "\n", "", "def", "_format_dict", "(", "input_dict", ",", "outest_level", "=", "False", ")", ":", "\n", "            ", "r", "=", "''", "\n", "s", "=", "[", "]", "\n", "\n", "use_mapping", "=", "_contain_invalid_identifier", "(", "input_dict", ")", "\n", "if", "use_mapping", ":", "\n", "                ", "r", "+=", "'{'", "\n", "", "for", "idx", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "input_dict", ".", "items", "(", ")", ")", ":", "\n", "                ", "is_last", "=", "idx", ">=", "len", "(", "input_dict", ")", "-", "1", "\n", "end", "=", "''", "if", "outest_level", "or", "is_last", "else", "','", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                    ", "v_str", "=", "'\\n'", "+", "_format_dict", "(", "v", ")", "\n", "if", "use_mapping", ":", "\n", "                        ", "k_str", "=", "f\"'{k}'\"", "if", "isinstance", "(", "k", ",", "str", ")", "else", "str", "(", "k", ")", "\n", "attr_str", "=", "f'{k_str}: dict({v_str}'", "\n", "", "else", ":", "\n", "                        ", "attr_str", "=", "f'{str(k)}=dict({v_str}'", "\n", "", "attr_str", "=", "_indent", "(", "attr_str", ",", "indent", ")", "+", "')'", "+", "end", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                    ", "attr_str", "=", "_format_list", "(", "k", ",", "v", ",", "use_mapping", ")", "+", "end", "\n", "", "else", ":", "\n", "                    ", "attr_str", "=", "_format_basic_types", "(", "k", ",", "v", ",", "use_mapping", ")", "+", "end", "\n", "\n", "", "s", ".", "append", "(", "attr_str", ")", "\n", "", "r", "+=", "'\\n'", ".", "join", "(", "s", ")", "\n", "if", "use_mapping", ":", "\n", "                ", "r", "+=", "'}'", "\n", "", "return", "r", "\n", "\n", "", "cfg_dict", "=", "self", ".", "_cfg_dict", ".", "to_dict", "(", ")", "\n", "text", "=", "_format_dict", "(", "cfg_dict", ",", "outest_level", "=", "True", ")", "\n", "# copied from setup.cfg", "\n", "yapf_style", "=", "dict", "(", "\n", "based_on_style", "=", "'pep8'", ",", "\n", "blank_line_before_nested_class_or_def", "=", "True", ",", "\n", "split_before_expression_after_opening_paren", "=", "True", ")", "\n", "text", ",", "_", "=", "FormatCode", "(", "text", ",", "style_config", "=", "yapf_style", ",", "verify", "=", "True", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__repr__": [[355, 357], ["config.Config._cfg_dict.__repr__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'Config (path: {self.filename}): {self._cfg_dict.__repr__()}'", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__len__": [[358, 360], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_cfg_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__getattr__": [[361, 363], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg_dict", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__getitem__": [[364, 366], ["config.Config._cfg_dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_cfg_dict", ".", "__getitem__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__": [[367, 371], ["isinstance", "config.Config._cfg_dict.__setattr__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setattr__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setitem__": [[372, 376], ["isinstance", "config.Config._cfg_dict.__setitem__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setitem__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__iter__": [[377, 379], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_cfg_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__getstate__": [[380, 382], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_cfg_dict", ",", "self", ".", "_filename", ",", "self", ".", "_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setstate__": [[383, 388], ["super().__setattr__", "super().__setattr__", "super().__setattr__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "_cfg_dict", ",", "_filename", ",", "_text", "=", "state", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_cfg_dict'", ",", "_cfg_dict", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_filename'", ",", "_filename", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_text'", ",", "_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump": [[389, 404], ["super().__getattribute__().to_dict", "config.Config.filename.endswith", "super().__getattribute__", "mmcv.dump", "mmcv.dump", "open", "f.write", "config.Config.filename.split"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "dump", "(", "self", ",", "file", "=", "None", ")", ":", "\n", "        ", "cfg_dict", "=", "super", "(", "Config", ",", "self", ")", ".", "__getattribute__", "(", "'_cfg_dict'", ")", ".", "to_dict", "(", ")", "\n", "if", "self", ".", "filename", ".", "endswith", "(", "'.py'", ")", ":", "\n", "            ", "if", "file", "is", "None", ":", "\n", "                ", "return", "self", ".", "pretty_text", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "self", ".", "pretty_text", ")", "\n", "", "", "", "else", ":", "\n", "            ", "import", "mmcv", "\n", "if", "file", "is", "None", ":", "\n", "                ", "file_format", "=", "self", ".", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "return", "mmcv", ".", "dump", "(", "cfg_dict", ",", "file_format", "=", "file_format", ")", "\n", "", "else", ":", "\n", "                ", "mmcv", ".", "dump", "(", "cfg_dict", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.merge_from_dict": [[405, 435], ["options.items", "super().__getattribute__", "super().__setattr__", "full_key.split", "config.Config._merge_a_into_b", "d.setdefault", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config._merge_a_into_b"], ["", "", "", "def", "merge_from_dict", "(", "self", ",", "options", ")", ":", "\n", "        ", "\"\"\"Merge list into cfg_dict.\n\n        Merge the dict parsed by MultipleKVAction into this cfg.\n\n        Examples:\n            >>> options = {'model.backbone.depth': 50,\n            ...            'model.backbone.with_cp':True}\n            >>> cfg = Config(dict(model=dict(backbone=dict(type='ResNet'))))\n            >>> cfg.merge_from_dict(options)\n            >>> cfg_dict = super(Config, self).__getattribute__('_cfg_dict')\n            >>> assert cfg_dict == dict(\n            ...     model=dict(backbone=dict(depth=50, with_cp=True)))\n\n        Args:\n            options (dict): dict of configs to merge from.\n        \"\"\"", "\n", "option_cfg_dict", "=", "{", "}", "\n", "for", "full_key", ",", "v", "in", "options", ".", "items", "(", ")", ":", "\n", "            ", "d", "=", "option_cfg_dict", "\n", "key_list", "=", "full_key", ".", "split", "(", "'.'", ")", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "                ", "d", ".", "setdefault", "(", "subkey", ",", "ConfigDict", "(", ")", ")", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "d", "[", "subkey", "]", "=", "v", "\n", "\n", "", "cfg_dict", "=", "super", "(", "Config", ",", "self", ")", ".", "__getattribute__", "(", "'_cfg_dict'", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "\n", "'_cfg_dict'", ",", "Config", ".", "_merge_a_into_b", "(", "option_cfg_dict", ",", "cfg_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.DictAction._parse_int_float_bool": [[444, 457], ["int", "float", "val.lower", "val.lower"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_parse_int_float_bool", "(", "val", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "int", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "try", ":", "\n", "            ", "return", "float", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "if", "val", ".", "lower", "(", ")", "in", "[", "'true'", ",", "'false'", "]", ":", "\n", "            ", "return", "True", "if", "val", ".", "lower", "(", ")", "==", "'true'", "else", "False", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.DictAction.__call__": [[458, 467], ["setattr", "kv.split", "config.DictAction._parse_int_float_bool", "len", "val.split"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.DictAction._parse_int_float_bool", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "options", "=", "{", "}", "\n", "for", "kv", "in", "values", ":", "\n", "            ", "key", ",", "val", "=", "kv", ".", "split", "(", "'='", ",", "maxsplit", "=", "1", ")", "\n", "val", "=", "[", "self", ".", "_parse_int_float_bool", "(", "v", ")", "for", "v", "in", "val", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "val", ")", "==", "1", ":", "\n", "                ", "val", "=", "val", "[", "0", "]", "\n", "", "options", "[", "key", "]", "=", "val", "\n", "", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "options", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.check_file_exist": [[16, 19], ["os.isfile", "FileNotFoundError", "msg_tmpl.format"], "function", ["None"], ["def", "check_file_exist", "(", "filename", ",", "msg_tmpl", "=", "'file \"{}\" does not exist'", ")", ":", "\n", "    ", "if", "not", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "msg_tmpl", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.add_args": [[49, 66], ["cfg.items", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "config.add_args", "isinstance", "parser.add_argument", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.add_args"], ["", "", "def", "add_args", "(", "parser", ",", "cfg", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "int", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "int", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "float", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "action", "=", "'store_true'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "add_args", "(", "parser", ",", "v", ",", "prefix", "+", "k", "+", "'.'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "abc", ".", "Iterable", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "type", "(", "v", "[", "0", "]", ")", ",", "nargs", "=", "'+'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'cannot parse key {prefix + k} of type {type(v)}'", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.logger.create_logger": [[4, 12], ["logging.getLogger", "logging.StreamHandler", "logging.getLogger.addHandler", "logging.StreamHandler.setFormatter", "logging.Formatter"], "function", ["None"], ["def", "create_logger", "(", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "not", "logger", ".", "handlers", ":", "\n", "        ", "logger", ".", "propagate", "=", "0", "\n", "hd", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logger", ".", "addHandler", "(", "hd", ")", "\n", "hd", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s - [%(filename)s]:%(funcName)s - %(levelname)s - %(message)s'", ")", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.__init__": [[20, 23], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_module_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.__contains__": [[27, 29], ["registry.Registry.get"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "get", "(", "key", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.__repr__": [[30, 35], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(name={self._name}, '", "f'items={self._module_dict})'", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.name": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.module_dict": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.get": [[44, 54], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Get the registry record.\n\n        Args:\n            key (str): The class name in string format.\n\n        Returns:\n            class: The corresponding class.\n        \"\"\"", "\n", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry._register_module": [[55, 66], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ",", "module_name", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, '", "\n", "f'but got {type(module_class)}'", ")", "\n", "\n", "", "if", "module_name", "is", "None", ":", "\n", "            ", "module_name", "=", "module_class", ".", "__name__", "\n", "", "if", "not", "force", "and", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "f'{module_name} is already registered '", "\n", "f'in {self.name}'", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.deprecated_register_module": [[67, 76], ["warnings.warn", "registry.Registry._register_module", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry._register_module"], ["", "def", "deprecated_register_module", "(", "self", ",", "cls", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The old API of register_module(module, force=False) '", "\n", "'is deprecated and will be removed, please use the new API '", "\n", "'register_module(name=None, force=False, module=None) instead.'", ")", "\n", "if", "cls", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "deprecated_register_module", ",", "force", "=", "force", ")", "\n", "", "self", ".", "_register_module", "(", "cls", ",", "force", "=", "force", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.register_module": [[77, 131], ["isinstance", "isinstance", "TypeError", "registry.Registry.deprecated_register_module", "registry.Registry._register_module", "TypeError", "registry.Registry._register_module", "isinstance", "type", "type"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry.deprecated_register_module", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry._register_module", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "name", "=", "None", ",", "force", "=", "False", ",", "module", "=", "None", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        A record will be added to `self._module_dict`, whose key is the class\n        name or the specified name, and value is the class itself.\n        It can be used as a decorator or a normal function.\n\n        Example:\n            >>> backbones = Registry('backbone')\n            >>> @backbones.register_module()\n            >>> class ResNet:\n            >>>     pass\n\n            >>> backbones = Registry('backbone')\n            >>> @backbones.register_module(name='mnet')\n            >>> class MobileNet:\n            >>>     pass\n\n            >>> backbones = Registry('backbone')\n            >>> class ResNet:\n            >>>     pass\n            >>> backbones.register_module(ResNet)\n\n        Args:\n            name (str | None): The module name to be registered. If not\n                specified, the class name will be used.\n            force (bool, optional): Whether to override an existing class with\n                the same name. Default: False.\n            module (type): Module class to be registered.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "force", ",", "bool", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'force must be a boolean, but got {type(force)}'", ")", "\n", "# NOTE: This is a walkaround to be compatible with the old api,", "\n", "# while it may introduce unexpected bugs.", "\n", "", "if", "isinstance", "(", "name", ",", "type", ")", ":", "\n", "            ", "return", "self", ".", "deprecated_register_module", "(", "name", ",", "force", "=", "force", ")", "\n", "\n", "# use it as a normal method: x.register_module(module=SomeClass)", "\n", "", "if", "module", "is", "not", "None", ":", "\n", "            ", "self", ".", "_register_module", "(", "\n", "module_class", "=", "module", ",", "module_name", "=", "name", ",", "force", "=", "force", ")", "\n", "return", "module", "\n", "\n", "# raise the error ahead of time", "\n", "", "if", "not", "(", "name", "is", "None", "or", "isinstance", "(", "name", ",", "str", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'name must be a str, but got {type(name)}'", ")", "\n", "\n", "# use it as a decorator: @x.register_module()", "\n", "", "def", "_register", "(", "cls", ")", ":", "\n", "            ", "self", ".", "_register_module", "(", "\n", "module_class", "=", "cls", ",", "module_name", "=", "name", ",", "force", "=", "force", ")", "\n", "return", "cls", "\n", "\n", "", "return", "_register", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.is_str": [[6, 11], ["isinstance"], "function", ["None"], ["def", "is_str", "(", "x", ")", ":", "\n", "    ", "\"\"\"Whether the input is an string instance.\n    Note: This method is deprecated since python 2 is no longer supported.\n    \"\"\"", "\n", "return", "isinstance", "(", "x", ",", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.build_from_cfg": [[133, 177], ["cfg.copy", "cfg.copy.pop", "registry.is_str", "registry.get.", "isinstance", "TypeError", "isinstance", "TypeError", "TypeError", "default_args.items", "registry.get", "inspect.isclass", "KeyError", "isinstance", "cfg.copy.setdefault", "KeyError", "TypeError", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.registry.is_str", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        object: The constructed object.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'cfg must be a dict, but got {type(cfg)}'", ")", "\n", "", "if", "'type'", "not", "in", "cfg", ":", "\n", "        ", "if", "default_args", "is", "None", "or", "'type'", "not", "in", "default_args", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'`cfg` or `default_args` must contain the key \"type\", '", "\n", "f'but got {cfg}\\n{default_args}'", ")", "\n", "", "", "if", "not", "isinstance", "(", "registry", ",", "Registry", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'registry must be an mmcv.Registry object, '", "\n", "f'but got {type(registry)}'", ")", "\n", "", "if", "not", "(", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'default_args must be a dict or None, '", "\n", "f'but got {type(default_args)}'", ")", "\n", "\n", "", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "\n", "", "", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "f'{obj_type} is not in the {registry.name} registry'", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'type must be a str or valid type, but got {type(obj_type)}'", ")", "\n", "\n", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.get_input": [[10, 13], ["input", "channel.put"], "function", ["None"], ["def", "get_input", "(", "message", ",", "channel", ")", ":", "\n", "    ", "response", "=", "input", "(", "message", ")", "\n", "channel", ".", "put", "(", "response", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.input_with_timeout": [[15, 29], ["queue.Queue", "threading.Thread", "threading.Thread.start", "queue.Queue.get"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get"], ["", "def", "input_with_timeout", "(", "message", ",", "timeout", ",", "default_answer", ")", ":", "\n", "    ", "channel", "=", "queue", ".", "Queue", "(", ")", "\n", "message", "=", "message", "+", "\" [{} sec timeout] \"", ".", "format", "(", "timeout", ")", "\n", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "get_input", ",", "args", "=", "(", "message", ",", "channel", ")", ")", "\n", "# by setting this as a daemon thread, python won't wait for it to complete", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "response", "=", "channel", ".", "get", "(", "True", ",", "timeout", ")", "\n", "return", "response", "\n", "", "except", "queue", ".", "Empty", ":", "\n", "        ", "pass", "\n", "", "return", "default_answer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.ignore_func": [[31, 39], ["os.path.join", "os.path.isdir", "os.path.join.endswith", "ignored.append"], "function", ["None"], ["", "def", "ignore_func", "(", "dir", ",", "file_list", ",", "ext", "=", "\".py\"", ")", ":", "\n", "    ", "ignored", "=", "[", "]", "\n", "for", "file_name", "in", "file_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "file_path", ")", ":", "\n", "            ", "if", "not", "file_path", ".", "endswith", "(", "ext", ")", ":", "\n", "                ", "ignored", ".", "append", "(", "file_name", ")", "\n", "", "", "", "return", "ignored", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.imshow_": [[41, 48], ["matplotlib.axis", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.yticks"], "function", ["None"], ["", "def", "imshow_", "(", "x", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "2", ":", "\n", "        ", "plt", ".", "imshow", "(", "x", ",", "interpolation", "=", "\"nearest\"", ",", "**", "kwargs", ")", "\n", "", "elif", "x", ".", "ndim", "==", "1", ":", "\n", "        ", "plt", ".", "imshow", "(", "x", "[", ":", ",", "None", "]", ".", "T", ",", "interpolation", "=", "\"nearest\"", ",", "**", "kwargs", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "", "plt", ".", "axis", "(", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.visualizeHeatMapPredictions": [[50, 81], ["numpy.arange", "matplotlib.subplots", "ax.imshow", "ax.set_yticks", "ax.set_xlim", "ax2.imshow", "ax2.set_yticks", "ax3.plot", "ax3.set_yticks", "ax3.set_xticks", "fig.subplots_adjust", "fig.add_axes", "matplotlib.colorbar", "os.path.join", "matplotlib.savefig", "matplotlib.close", "len", "os.path.exists", "os.makedirs", "os.path.join", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "visualizeHeatMapPredictions", "(", "P_test", ",", "y_test", ",", "expFolder", ",", "videoName", ")", ":", "\n", "# np.random.seed(1)", "\n", "    ", "plt", ".", "rcParams", "[", "\"figure.figsize\"", "]", "=", "10", ",", "3", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "P_test", ")", ")", "\n", "fig", ",", "(", "ax", ",", "ax2", ",", "ax3", ")", "=", "plt", ".", "subplots", "(", "nrows", "=", "3", ",", "sharex", "=", "True", ")", "\n", "\n", "extent", "=", "[", "x", "[", "0", "]", "-", "(", "x", "[", "1", "]", "-", "x", "[", "0", "]", ")", "/", "2.", ",", "x", "[", "-", "1", "]", "+", "(", "x", "[", "1", "]", "-", "x", "[", "0", "]", ")", "/", "2.", ",", "0", ",", "1", "]", "\n", "im", "=", "ax", ".", "imshow", "(", "np", ".", "array", "(", "y_test", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "cmap", "=", "\"plasma\"", ",", "aspect", "=", "\"auto\"", ",", "extent", "=", "extent", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "set_xlim", "(", "extent", "[", "0", "]", ",", "extent", "[", "1", "]", ")", "\n", "\n", "im", "=", "ax2", ".", "imshow", "(", "np", ".", "array", "(", "P_test", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "cmap", "=", "\"plasma\"", ",", "aspect", "=", "\"auto\"", ",", "extent", "=", "extent", ")", "\n", "ax2", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax3", ".", "plot", "(", "x", ",", "P_test", ")", "\n", "ax3", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax3", ".", "set_xticks", "(", "[", "]", ")", "\n", "\n", "fig", ".", "subplots_adjust", "(", "right", "=", "0.82", ")", "\n", "\n", "cbar_ax", "=", "fig", ".", "add_axes", "(", "[", "0.85", ",", "0.15", ",", "0.05", ",", "0.7", "]", ")", "\n", "\n", "cb", "=", "plt", ".", "colorbar", "(", "im", ",", "cax", "=", "cbar_ax", ")", "\n", "\n", "# plt.show()", "\n", "\n", "saveFolder", "=", "os", ".", "path", ".", "join", "(", "expFolder", ",", "\"heatmap\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saveFolder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saveFolder", ")", "\n", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "saveFolder", ",", "videoName", "+", "\".pdf\"", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.visualize_temporal_action": [[83, 108], ["matplotlib.subplots", "ax.broken_barh", "ax.broken_barh", "ax.set_ylim", "ax.set_xlim", "ax.set_xlabel", "ax.set_yticks", "ax.set_yticklabels", "metrics.get_labels_start_end_time", "metrics.get_labels_start_end_time", "zip", "zip", "matplotlib.savefig", "matplotlib.close", "len", "ax.broken_barh", "ax.broken_barh", "len", "len"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.get_labels_start_end_time"], ["", "def", "visualize_temporal_action", "(", "P_test", ",", "y_test", ",", "save_path", ",", "videoName", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "4", ")", ")", "\n", "\n", "ax", ".", "broken_barh", "(", "[", "(", "0", ",", "len", "(", "y_test", ")", ")", "]", ",", "(", "3", ",", "5", ")", ",", "facecolors", "=", "'papayawhip'", ")", "\n", "ax", ".", "broken_barh", "(", "[", "(", "0", ",", "len", "(", "P_test", ")", ")", "]", ",", "(", "0", ",", "2", ")", ",", "facecolors", "=", "'papayawhip'", ")", "\n", "\n", "ax", ".", "set_ylim", "(", "0", ",", "5", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "len", "(", "y_test", ")", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'seconds'", ")", "\n", "ax", ".", "set_yticks", "(", "[", "1", ",", "4", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "'Pred'", ",", "'GT'", "]", ")", "\n", "\n", "p_label", ",", "p_start", ",", "p_end", "=", "metrics", ".", "get_labels_start_end_time", "(", "P_test", ")", "\n", "y_label", ",", "y_start", ",", "y_end", "=", "metrics", ".", "get_labels_start_end_time", "(", "y_test", ")", "\n", "\n", "for", "ystart", ",", "yend", "in", "zip", "(", "y_start", ",", "y_end", ")", ":", "\n", "        ", "ax", ".", "broken_barh", "(", "[", "(", "ystart", ",", "yend", ")", "]", ",", "(", "3", ",", "5", ")", ",", "facecolors", "=", "'darkred'", ")", "\n", "\n", "", "for", "pstart", ",", "pend", "in", "zip", "(", "p_start", ",", "p_end", ")", ":", "\n", "        ", "ax", ".", "broken_barh", "(", "[", "(", "pstart", ",", "pend", ")", "]", ",", "(", "0", ",", "2", ")", ",", "facecolors", "=", "'darkred'", ")", "\n", "\n", "# plt.show()", "\n", "", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeDataset.__init__": [[56, 98], ["getattr", "ucf_crime.UCFCrimeDataset.abnormal.annotations[].items", "ucf_crime.UCFCrimeDataset.normal.annotations[].items", "enumerate", "enumerate", "print", "print", "print", "open", "addict.Dict", "open", "addict.Dict", "ucf_crime.UCFCrimeDataset.clips.append", "ucf_crime.UCFCrimeDataset.clips.append", "dict", "dict", "len", "len", "os.path.join", "os.path.join", "json.load", "json.load", "hasattr", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_cfg", ",", "split", ")", ":", "\n", "\n", "        ", "split_cfg", "=", "getattr", "(", "data_cfg", ",", "split", ")", "\n", "with", "open", "(", "split_cfg", ".", "abnormal", ".", "annotations", ")", "as", "fp", ":", "\n", "            ", "self", ".", "abnormal", "=", "Dict", "(", "dict", "(", "\n", "annotations", "=", "json", ".", "load", "(", "fp", ")", ",", "\n", "clip_features", "=", "split_cfg", ".", "abnormal", ".", "clip_features", ",", "\n", "top_k", "=", "split_cfg", ".", "abnormal", ".", "top_k", "if", "hasattr", "(", "split_cfg", ".", "abnormal", ",", "\"top_k\"", ")", "else", "None", "\n", ")", ")", "\n", "", "with", "open", "(", "split_cfg", ".", "normal", ".", "annotations", ")", "as", "fp", ":", "\n", "            ", "self", ".", "normal", "=", "Dict", "(", "dict", "(", "\n", "annotations", "=", "json", ".", "load", "(", "fp", ")", ",", "\n", "clip_features", "=", "split_cfg", ".", "normal", ".", "clip_features", ",", "\n", "top_k", "=", "split_cfg", ".", "abnormal", ".", "top_k", "if", "hasattr", "(", "split_cfg", ".", "abnormal", ",", "\"top_k\"", ")", "else", "None", "\n", ")", ")", "\n", "\n", "", "self", ".", "clips", "=", "[", "]", "\n", "self", ".", "clipLists", "=", "{", "}", "\n", "\n", "for", "clipName", ",", "value", "in", "self", ".", "abnormal", ".", "annotations", "[", "\"all_clips\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "clips", ".", "append", "(", "{", "\"path\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "abnormal", ".", "clip_features", ",", "clipName", "+", "\".npy\"", ")", ",", "\n", "\"anomaly\"", ":", "value", "[", "\"anomaly\"", "]", ",", "\n", "\"category\"", ":", "value", "[", "\"category\"", "]", ",", "\n", "\"category_name\"", ":", "value", "[", "\"category_name\"", "]", ",", "\n", "\"clip_name\"", ":", "clipName", "}", ")", "\n", "\n", "", "for", "clipName", ",", "value", "in", "self", ".", "normal", ".", "annotations", "[", "\"all_clips\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "clips", ".", "append", "(", "{", "\"path\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "normal", ".", "clip_features", ",", "clipName", "+", "\".npy\"", ")", ",", "\n", "\"anomaly\"", ":", "value", "[", "\"anomaly\"", "]", ",", "\n", "\"category\"", ":", "value", "[", "\"category\"", "]", ",", "\n", "\"category_name\"", ":", "value", "[", "\"category_name\"", "]", ",", "\n", "\"clip_name\"", ":", "clipName", "}", ")", "\n", "\n", "", "for", "videoIndex", ",", "videoName", "in", "enumerate", "(", "self", ".", "abnormal", ".", "annotations", "[", "\"video_clips\"", "]", ")", ":", "\n", "            ", "self", ".", "clipLists", "[", "videoName", "]", "=", "self", ".", "abnormal", ".", "annotations", "[", "\"video_clips\"", "]", "[", "videoName", "]", "\n", "\n", "", "for", "videoIndex", ",", "videoName", "in", "enumerate", "(", "self", ".", "normal", ".", "annotations", "[", "\"video_clips\"", "]", ")", ":", "\n", "            ", "self", ".", "clipLists", "[", "videoName", "]", "=", "self", ".", "normal", ".", "annotations", "[", "\"video_clips\"", "]", "[", "videoName", "]", "\n", "\n", "", "print", "(", "\"Dataset has been constructed\"", ")", "\n", "print", "(", "\"# abnormal clips: {}\"", ".", "format", "(", "len", "(", "self", ".", "abnormal", ".", "annotations", "[", "\"abnormal_clips\"", "]", ")", ")", ")", "\n", "print", "(", "\"# normal clips: {}\"", ".", "format", "(", "len", "(", "self", ".", "abnormal", ".", "annotations", "[", "\"normal_clips\"", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeDataset.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "clips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeDataset.__getVideoClips__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__getVideoClips__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "clipLists", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeDataset.__getitem__": [[105, 111], ["numpy.load", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "annotation", "=", "self", ".", "clips", "[", "idx", "]", "\n", "feature", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "annotation", "[", "\"path\"", "]", ")", ")", "\n", "\n", "return", "feature", ",", "1", ",", "annotation", "[", "\"anomaly\"", "]", ",", "annotation", "[", "\"category\"", "]", ",", "annotation", "[", "\"category_name\"", "]", ",", "annotation", "[", "\"clip_name\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__init__": [[114, 159], ["getattr", "int", "dict().items", "logger.info", "logger.info", "logger.info", "open", "addict.Dict", "open", "addict.Dict", "part.annotations.all_clips.items", "ucf_crime.UCFCrimeTemporal.__prepare_windows", "logger.info", "len", "hasattr", "dict", "dict", "dict", "logger.info", "os.path.join", "json.load", "json.load", "len", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__prepare_windows"], ["    ", "def", "__init__", "(", "self", ",", "data_cfg", ",", "split", ")", ":", "\n", "\n", "        ", "split_cfg", "=", "getattr", "(", "data_cfg", ",", "split", ")", "\n", "with", "open", "(", "split_cfg", ".", "abnormal", ".", "annotations", ")", "as", "fp", ":", "\n", "            ", "self", ".", "abnormal", "=", "Dict", "(", "dict", "(", "\n", "annotations", "=", "json", ".", "load", "(", "fp", ")", ",", "\n", "clip_features", "=", "split_cfg", ".", "abnormal", ".", "clip_features", ",", "\n", "top_k", "=", "split_cfg", ".", "abnormal", ".", "top_k", "if", "hasattr", "(", "split_cfg", ".", "abnormal", ",", "\"top_k\"", ")", "else", "None", "\n", ")", ")", "\n", "", "with", "open", "(", "split_cfg", ".", "normal", ".", "annotations", ")", "as", "fp", ":", "\n", "            ", "self", ".", "normal", "=", "Dict", "(", "dict", "(", "\n", "annotations", "=", "json", ".", "load", "(", "fp", ")", ",", "\n", "clip_features", "=", "split_cfg", ".", "normal", ".", "clip_features", ",", "\n", "top_k", "=", "split_cfg", ".", "abnormal", ".", "top_k", "if", "hasattr", "(", "split_cfg", ".", "abnormal", ",", "\"top_k\"", ")", "else", "None", "\n", ")", ")", "\n", "\n", "", "self", ".", "clips", "=", "{", "}", "\n", "for", "part", "in", "[", "self", ".", "abnormal", ",", "self", ".", "normal", "]", ":", "\n", "            ", "for", "clip_name", ",", "value", "in", "part", ".", "annotations", ".", "all_clips", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "clips", "[", "clip_name", "]", "=", "{", "\"path\"", ":", "os", ".", "path", ".", "join", "(", "part", ".", "clip_features", ",", "clip_name", "+", "\".npy\"", ")", ",", "\n", "\"anomaly\"", ":", "value", "[", "\"anomaly\"", "]", ",", "\n", "\"category\"", ":", "value", "[", "\"category\"", "]", ",", "\n", "\"category_name\"", ":", "value", "[", "\"category_name\"", "]", "}", "\n", "\n", "", "", "self", ".", "window_size", "=", "data_cfg", ".", "window_size", "\n", "self", ".", "featureSize", "=", "data_cfg", ".", "feature_size", "\n", "self", ".", "sub_window_size", "=", "int", "(", "self", ".", "window_size", "/", "data_cfg", ".", "sub_windows", ")", "\n", "self", ".", "mask_value", "=", "data_cfg", ".", "mask_value", "\n", "self", ".", "clipLists", "=", "{", "}", "\n", "self", ".", "windows", "=", "[", "]", "\n", "\n", "total_windows", "=", "0", "\n", "for", "part_name", ",", "part", "in", "dict", "(", "normal", "=", "self", ".", "normal", ",", "abnormal", "=", "self", ".", "abnormal", ")", ".", "items", "(", ")", ":", "\n", "            ", "num_clips", "=", "self", ".", "__prepare_windows", "(", "part", ".", "annotations", ",", "maxVideoSize", "=", "data_cfg", ".", "max_video_len", ",", "topK", "=", "part", ".", "top_k", ")", "\n", "part", ".", "num_clips", "=", "num_clips", "\n", "logger", ".", "info", "(", "\"# of {} windows: {}\"", ".", "format", "(", "part_name", ",", "len", "(", "self", ".", "windows", ")", "-", "total_windows", ")", ")", "\n", "total_windows", "+=", "len", "(", "self", ".", "windows", ")", "\n", "if", "hasattr", "(", "part", ",", "\"top_k\"", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"first {} {} videos have been included\"", ".", "format", "(", "part", ".", "top_k", ",", "part_name", ")", ")", "\n", "\n", "# Abnormal clips in only abnormal videos", "\n", "# Normal clips are in normal and abnormal videos", "\n", "", "", "logger", ".", "info", "(", "\"# abnormal clips: {}\"", ".", "format", "(", "self", ".", "abnormal", ".", "num_clips", ")", ")", "\n", "logger", ".", "info", "(", "\"# normal clips: {}\"", ".", "format", "(", "self", ".", "abnormal", ".", "num_clips", "+", "self", ".", "normal", ".", "num_clips", ")", ")", "\n", "logger", ".", "info", "(", "\"dataset has been constructed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__prepare_windows": [[160, 186], ["list", "list.sort", "numpy.array", "numpy.sum", "numpy.ceil", "enumerate", "annotations[].keys", "copy.deepcopy", "range", "range", "len", "numpy.where", "len", "max", "copy.deepcopy.append", "max", "ucf_crime.UCFCrimeTemporal.windows.append", "enumerate", "int", "len", "int"], "methods", ["None"], ["", "def", "__prepare_windows", "(", "self", ",", "annotations", ",", "maxVideoSize", "=", "None", ",", "topK", "=", "None", ")", ":", "\n", "        ", "videoNames", "=", "list", "(", "annotations", "[", "\"video_clips\"", "]", ".", "keys", "(", ")", ")", "\n", "videoNames", ".", "sort", "(", ")", "\n", "if", "topK", "is", "not", "None", ":", "\n", "            ", "videoNames", "=", "videoNames", "[", ":", "topK", "]", "\n", "", "clipLengths", "=", "np", ".", "array", "(", "[", "len", "(", "annotations", "[", "\"video_clips\"", "]", "[", "key", "]", ")", "for", "key", "in", "videoNames", "]", ")", "\n", "# print(\"[Info] Max clip length for dataset is {}\".format(np.max(clipLengths)))", "\n", "if", "maxVideoSize", "is", "not", "None", ":", "\n", "            ", "filteredClips", "=", "np", ".", "where", "(", "clipLengths", "<", "maxVideoSize", ")", "[", "0", "]", "\n", "clipLengths", "=", "clipLengths", "[", "filteredClips", "]", "\n", "videoNames", "=", "[", "videoName", "for", "i", ",", "videoName", "in", "enumerate", "(", "videoNames", ")", "if", "i", "in", "filteredClips", "]", "\n", "", "numOfClips", "=", "np", ".", "sum", "(", "clipLengths", ")", "\n", "videoWindows", "=", "np", ".", "ceil", "(", "clipLengths", "/", "self", ".", "sub_window_size", ")", "\n", "for", "videoIndex", ",", "videoName", "in", "enumerate", "(", "videoNames", ")", ":", "\n", "            ", "self", ".", "clipLists", "[", "videoName", "]", "=", "annotations", "[", "\"video_clips\"", "]", "[", "videoName", "]", "\n", "videoClipList", "=", "copy", ".", "deepcopy", "(", "annotations", "[", "\"video_clips\"", "]", "[", "videoName", "]", ")", "\n", "for", "clipIndex", "in", "range", "(", "len", "(", "videoClipList", ")", ",", "\n", "max", "(", "int", "(", "videoWindows", "[", "videoIndex", "]", "*", "self", ".", "sub_window_size", ")", ",", "self", ".", "window_size", ")", ")", ":", "\n", "                ", "videoClipList", ".", "append", "(", "\"\"", ")", "\n", "\n", "", "for", "windowIndex", "in", "range", "(", "max", "(", "int", "(", "videoWindows", "[", "videoIndex", "]", ")", "-", "1", ",", "1", ")", ")", ":", "\n", "                ", "start", "=", "windowIndex", "*", "self", ".", "sub_window_size", "\n", "window", "=", "videoClipList", "[", "start", ":", "start", "+", "self", ".", "window_size", "]", "\n", "assert", "len", "(", "window", ")", "==", "self", ".", "window_size", ",", "\"window size does not match\"", "\n", "self", ".", "windows", ".", "append", "(", "window", ")", "\n", "", "", "return", "numOfClips", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__len__": [[187, 189], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "windows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__getVideoClips__": [[190, 192], ["None"], "methods", ["None"], ["", "def", "__getVideoClips__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "clipLists", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__getitem__": [[193, 227], ["numpy.zeros", "numpy.zeros", "enumerate", "torch.from_numpy", "torch.from_numpy", "numpy.array", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.ones_like", "numpy.array", "numpy.array", "numpy.load", "torch.from_numpy.append", "torch.from_numpy.append", "categoryNames.append", "torch.from_numpy.append", "torch.from_numpy.append", "categoryNames.append", "numpy.zeros"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "windowClipNames", "=", "self", ".", "windows", "[", "item", "]", "\n", "inputData", "=", "np", ".", "zeros", "(", "(", "self", ".", "window_size", ",", "self", ".", "featureSize", ")", ")", "\n", "anomalies", "=", "[", "]", "\n", "categories", "=", "[", "]", "\n", "categoryNames", "=", "[", "]", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "self", ".", "window_size", ",", "1", ")", ")", "\n", "for", "index", ",", "clipName", "in", "enumerate", "(", "windowClipNames", ")", ":", "\n", "            ", "if", "clipName", "!=", "\"\"", ":", "\n", "                ", "clip", "=", "np", ".", "load", "(", "self", ".", "clips", "[", "clipName", "]", "[", "\"path\"", "]", ")", "\n", "mask", "=", "1", "\n", "# annotation = self.abnormalAnnotations[\"allClips\"][clipName]", "\n", "anomalies", ".", "append", "(", "self", ".", "clips", "[", "clipName", "]", "[", "\"anomaly\"", "]", ")", "\n", "categories", ".", "append", "(", "self", ".", "clips", "[", "clipName", "]", "[", "\"category\"", "]", ")", "\n", "categoryNames", ".", "append", "(", "(", "self", ".", "clips", "[", "clipName", "]", "[", "\"category_name\"", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "clip", "=", "np", ".", "zeros", "(", "self", ".", "featureSize", ")", "+", "self", ".", "mask_value", "\n", "mask", "=", "0", "\n", "anomalies", ".", "append", "(", "-", "1", ")", "\n", "categories", ".", "append", "(", "-", "1", ")", "\n", "categoryNames", ".", "append", "(", "\"\"", ")", "\n", "", "inputData", "[", "index", ",", ":", "]", "=", "clip", "\n", "masks", "[", "index", ",", ":", "]", "=", "mask", "\n", "", "inputData", "=", "torch", ".", "from_numpy", "(", "inputData", ")", "\n", "anomalies", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "anomalies", ")", ")", "\n", "\n", "# abnormal video normal clips classified as normal (15)", "\n", "categoriesMerged", "=", "np", ".", "ones_like", "(", "anomalies", ")", "*", "15", "\n", "categories", "=", "np", ".", "array", "(", "categories", ")", "\n", "categoriesMerged", "[", "anomalies", "==", "1", "]", "=", "categories", "[", "anomalies", "==", "1", "]", "\n", "\n", "categories", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "categories", ")", ")", "\n", "masks", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "masks", ")", ")", "\n", "return", "inputData", ",", "masks", ",", "anomalies", ",", "categories", ",", "categoryNames", ",", "windowClipNames", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.get_dataloaders": [[15, 53], ["ucf_crime.UCFCrimeDataset", "torch.utils.data.DataLoader", "ucf_crime.UCFCrimeDataset", "torch.utils.data.DataLoader", "ucf_crime.UCFCrimeTemporal", "torch.utils.data.DataLoader", "ucf_crime.UCFCrimeTemporal", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_dataloaders", "(", "trainNormalFolder", ":", "str", ",", "trainNormalAnnotations", ":", "str", ",", "\n", "trainAbnormalFolder", ":", "str", ",", "trainAbnormalAnnotations", ":", "str", ",", "\n", "trainTopK", ":", "int", ",", "\n", "valNormalFolder", ":", "str", ",", "valNormalAnnotations", ":", "str", ",", "\n", "valAbnormalFolder", ":", "str", ",", "valAbnormalAnnotations", ":", "str", ",", "\n", "valTopK", ":", "int", ",", "\n", "batchSize", ":", "int", ",", "numWorkers", ":", "int", ",", "\n", "model", ":", "str", ",", "windowSize", ":", "int", ",", "subWindow", ":", "int", ",", "featureSize", ":", "int", ",", "\n", "maxVideoSize", ":", "int", ")", ":", "\n", "    ", "if", "model", "==", "\"mlp\"", ":", "\n", "        ", "trainDataset", "=", "UCFCrimeDataset", "(", "trainAbnormalFolder", ",", "trainAbnormalAnnotations", ",", "\n", "trainNormalFolder", ",", "trainNormalAnnotations", ")", "\n", "trainLoader", "=", "DataLoader", "(", "trainDataset", ",", "batch_size", "=", "batchSize", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "numWorkers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "model", "==", "\"tcn\"", "or", "model", "==", "\"mstcn\"", "or", "model", "==", "\"mcbtcn\"", ":", "\n", "        ", "trainDataset", "=", "UCFCrimeTemporal", "(", "trainAbnormalFolder", ",", "trainAbnormalAnnotations", ",", "\n", "trainNormalFolder", ",", "trainNormalAnnotations", ",", "\n", "windowSize", "=", "windowSize", ",", "normalTopK", "=", "trainTopK", ",", "\n", "subWindow", "=", "subWindow", ",", "featureSize", "=", "featureSize", ",", "\n", "maxVideoSize", "=", "maxVideoSize", ")", "\n", "trainLoader", "=", "DataLoader", "(", "trainDataset", ",", "batch_size", "=", "batchSize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "numWorkers", ",", "\n", "collate_fn", "=", "collate_fn_precomp", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "if", "model", "==", "\"mlp\"", ":", "\n", "        ", "valDataset", "=", "UCFCrimeDataset", "(", "valAbnormalFolder", ",", "valAbnormalAnnotations", ",", "\n", "valNormalFolder", ",", "valNormalAnnotations", ")", "\n", "valLoader", "=", "DataLoader", "(", "valDataset", ",", "batch_size", "=", "batchSize", ",", "shuffle", "=", "False", ",", "num_workers", "=", "numWorkers", ")", "\n", "", "elif", "model", "==", "\"tcn\"", "or", "model", "==", "\"mstcn\"", "or", "model", "==", "\"mcbtcn\"", ":", "\n", "        ", "valDataset", "=", "UCFCrimeTemporal", "(", "valAbnormalFolder", ",", "valAbnormalAnnotations", ",", "\n", "valNormalFolder", ",", "valNormalAnnotations", ",", "\n", "windowSize", "=", "windowSize", ",", "normalTopK", "=", "valTopK", ",", "\n", "subWindow", "=", "subWindow", ",", "featureSize", "=", "featureSize", ",", "\n", "maxVideoSize", "=", "maxVideoSize", ")", "\n", "\n", "valLoader", "=", "DataLoader", "(", "valDataset", ",", "batch_size", "=", "batchSize", ",", "shuffle", "=", "False", ",", "num_workers", "=", "numWorkers", ",", "\n", "collate_fn", "=", "collate_fn_precomp", ")", "\n", "\n", "", "return", "trainLoader", ",", "valLoader", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.collate_fn_precomp": [[229, 238], ["zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "collate_fn_precomp", "(", "data", ")", ":", "\n", "    ", "inputData", ",", "masks", ",", "anomalies", ",", "categories", ",", "categoryNames", ",", "windowClipNames", "=", "zip", "(", "*", "data", ")", "\n", "\n", "inputData", "=", "torch", ".", "stack", "(", "inputData", ",", "0", ")", "\n", "anomalies", "=", "torch", ".", "stack", "(", "anomalies", ",", "0", ")", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "0", ")", "\n", "categories", "=", "torch", ".", "stack", "(", "categories", ",", "0", ")", "\n", "\n", "return", "inputData", ",", "masks", ",", "anomalies", ",", "categories", ",", "categoryNames", ",", "windowClipNames", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.preprocess.split.main": [[7, 134], ["split.readTestFiles", "print", "temporalAnnotations.items", "numpy.array", "numpy.arange", "numpy.random.shuffle", "print", "print", "print", "open", "json.load", "open", "json.load", "len", "list", "numpy.array", "list", "numpy.array", "list", "list", "enumerate", "print", "print", "print", "len", "open", "json.dump", "open", "json.dump", "open", "json.dump", "len", "math.floor", "math.floor", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "json.load.keys", "enumerate", "json.load.keys", "enumerate", "newAnnotations.keys", "json.load.keys", "list", "len", "len", "newAnnotations.keys", "valAnnotations.keys", "includedIndexes.append", "len", "len", "np.array.append", "np.array.append", "print"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.preprocess.split.readTestFiles", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump"], ["def", "main", "(", ")", ":", "\n", "    ", "trainJson", "=", "\"../../data/Annotations/TemporalAnnotations/abnormal/train.json\"", "\n", "testJson", "=", "\"../../data/Annotations/TemporalAnnotations/abnormal/test.json\"", "\n", "testVideosList", "=", "\"../../data/Annotations/Anomaly_Detection_splits/Anomaly_Test.txt\"", "\n", "excludeNormal", "=", "True", "\n", "excludeAbnormal", "=", "False", "\n", "\n", "fixWrongSplit", "=", "True", "\n", "\n", "validationRatio", "=", "0.1", "\n", "\n", "with", "open", "(", "trainJson", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "trainAnnotations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "testList", "=", "readTestFiles", "(", "testVideosList", ",", "excludeNormal", "=", "excludeNormal", ")", "\n", "with", "open", "(", "testJson", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "testAnnotations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "temporalAnnotations", "=", "{", "**", "trainAnnotations", ",", "**", "testAnnotations", "}", "\n", "print", "(", "\"Num of total temporal annotations: {}\"", ".", "format", "(", "len", "(", "temporalAnnotations", ")", ")", ")", "\n", "\n", "# Eliminate normal videos", "\n", "newAnnotations", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "temporalAnnotations", ".", "items", "(", ")", ":", "\n", "        ", "if", "excludeNormal", "and", "\"Normal_Videos\"", "not", "in", "key", ":", "\n", "            ", "newAnnotations", "[", "key", "]", "=", "temporalAnnotations", "[", "key", "]", "\n", "", "elif", "excludeAbnormal", "and", "\"Normal_Videos\"", "in", "key", ":", "\n", "            ", "newAnnotations", "[", "key", "]", "=", "temporalAnnotations", "[", "key", "]", "\n", "\n", "", "", "newTestAnnotations", "=", "{", "}", "\n", "for", "testVideo", "in", "testList", ":", "\n", "        ", "if", "excludeNormal", "and", "\"Normal_Videos\"", "not", "in", "testVideo", ":", "\n", "            ", "newTestAnnotations", "[", "testVideo", "]", "=", "newAnnotations", "[", "testVideo", "]", "\n", "del", "(", "newAnnotations", "[", "testVideo", "]", ")", "\n", "", "elif", "excludeAbnormal", "and", "\"Normal_Videos\"", "in", "testVideo", ":", "\n", "            ", "newTestAnnotations", "[", "testVideo", "]", "=", "newAnnotations", "[", "testVideo", "]", "\n", "del", "(", "newAnnotations", "[", "testVideo", "]", ")", "\n", "\n", "", "", "keyList", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "newAnnotations", ".", "keys", "(", ")", "]", ")", "\n", "indexList", "=", "np", ".", "arange", "(", "len", "(", "keyList", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indexList", ")", "\n", "\n", "trainIndexes", "=", "indexList", "[", ":", "math", ".", "floor", "(", "len", "(", "indexList", ")", "*", "(", "1", "-", "validationRatio", ")", ")", "]", "\n", "valIndexes", "=", "indexList", "[", "math", ".", "floor", "(", "len", "(", "indexList", ")", "*", "(", "1", "-", "validationRatio", ")", ")", ":", "]", "\n", "\n", "if", "fixWrongSplit", ":", "\n", "\n", "        ", "with", "open", "(", "\"../../data/i3d_features/abnormal/ValLabels.json\"", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "valJson", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "\"../../data/Annotations/Splits/abnormal/val.json\"", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "valSplit", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "\"../../data/i3d_features/abnormal/TrainLabels.json\"", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "trainJson", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "\"../../data/Annotations/Splits/abnormal/train.json\"", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "trainSplit", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "trainIndexes", "=", "[", "]", "\n", "# for videoName in list(trainJson[\"videoClips\"].keys()):", "\n", "for", "videoName", "in", "list", "(", "trainSplit", ".", "keys", "(", ")", ")", ":", "\n", "            ", "counter", "=", "0", "\n", "for", "i", ",", "videoN", "in", "enumerate", "(", "keyList", ")", ":", "\n", "                ", "if", "videoName", "in", "videoN", ":", "\n", "                    ", "counter", "+=", "1", "\n", "trainIndexes", ".", "append", "(", "i", ")", "\n", "if", "counter", ">", "1", ":", "\n", "                        ", "print", "(", "\"Error!!! Duplicate\"", ")", "\n", "", "", "", "", "trainIndexes", "=", "np", ".", "array", "(", "trainIndexes", ")", "\n", "\n", "valIndexes", "=", "[", "]", "\n", "# for videoName in list(valJson[\"videoClips\"].keys()):", "\n", "for", "videoName", "in", "list", "(", "valSplit", ".", "keys", "(", ")", ")", ":", "\n", "            ", "for", "i", ",", "videoN", "in", "enumerate", "(", "keyList", ")", ":", "\n", "                ", "if", "videoName", "in", "videoN", ":", "\n", "                    ", "valIndexes", ".", "append", "(", "i", ")", "\n", "", "", "", "valIndexes", "=", "np", ".", "array", "(", "valIndexes", ")", "\n", "\n", "", "trainKeys", "=", "keyList", "[", "trainIndexes", "]", "\n", "valKeys", "=", "keyList", "[", "valIndexes", "]", "\n", "\n", "valAnnotations", "=", "{", "}", "\n", "for", "key", "in", "valKeys", ":", "\n", "        ", "valAnnotations", "[", "key", "]", "=", "newAnnotations", "[", "key", "]", "\n", "del", "(", "newAnnotations", "[", "key", "]", ")", "\n", "\n", "", "trainAnnotations", "=", "{", "}", "\n", "for", "key", "in", "trainKeys", ":", "\n", "        ", "trainAnnotations", "[", "key", "]", "=", "newAnnotations", "[", "key", "]", "\n", "del", "(", "newAnnotations", "[", "key", "]", ")", "\n", "\n", "", "if", "fixWrongSplit", ":", "\n", "        ", "restKeys", "=", "list", "(", "newAnnotations", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "restKeys", ":", "\n", "            ", "trainAnnotations", "[", "key", "]", "=", "newAnnotations", "[", "key", "]", "\n", "del", "(", "newAnnotations", "[", "key", "]", ")", "\n", "\n", "", "valVideoNames", "=", "list", "(", "valSplit", ".", "keys", "(", ")", ")", "\n", "includedIndexes", "=", "[", "]", "\n", "for", "i", ",", "videoName", "in", "enumerate", "(", "valVideoNames", ")", ":", "\n", "            ", "include", "=", "True", "\n", "for", "extractedVideoName", "in", "list", "(", "valAnnotations", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "extractedVideoName", "in", "videoName", ":", "\n", "                    ", "include", "=", "False", "\n", "", "", "if", "include", ":", "\n", "                ", "includedIndexes", ".", "append", "(", "i", ")", "\n", "", "", "print", "(", "\"Omitted validation videos in feature extraction:\"", ")", "\n", "print", "(", "len", "(", "[", "valVideoNames", "[", "i", "]", "for", "i", "in", "includedIndexes", "]", ")", ")", "\n", "print", "(", "[", "valVideoNames", "[", "i", "]", "for", "i", "in", "includedIndexes", "]", ")", "\n", "\n", "", "assert", "(", "len", "(", "newAnnotations", ")", "==", "0", ")", "\n", "\n", "with", "open", "(", "\"test.json\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "newTestAnnotations", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\"train.json\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "trainAnnotations", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\"val.json\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "valAnnotations", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"# Videos in train set: {}\"", ".", "format", "(", "trainIndexes", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"# Videos in val set: {}\"", ".", "format", "(", "valIndexes", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"# Videos in test set: {}\"", ".", "format", "(", "len", "(", "newTestAnnotations", ")", ")", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.preprocess.split.readTestFiles": [[136, 144], ["open", "testList.append", "testVideo.strip"], "function", ["None"], ["", "def", "readTestFiles", "(", "testVideosList", ",", "excludeNormal", "=", "False", ")", ":", "\n", "    ", "testList", "=", "[", "]", "\n", "with", "open", "(", "testVideosList", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "for", "testVideo", "in", "fp", ":", "\n", "            ", "if", "excludeNormal", "and", "\"Normal_Videos\"", "in", "testVideo", ":", "\n", "                ", "continue", "\n", "", "testList", ".", "append", "(", "testVideo", ".", "strip", "(", ")", ")", "\n", "", "", "return", "testList", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.preprocess.txt_2_json.listdir_nohidden_ext": [[6, 12], ["os.path.join", "glob.glob", "f.split", "filename.startswith", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["def", "listdir_nohidden_ext", "(", "AllVideos_Path", ",", "ext", "=", "'*_C.txt'", ")", ":", "# To ignore hidden files", "\n", "    ", "file_dir_extension", "=", "os", ".", "path", ".", "join", "(", "AllVideos_Path", ",", "ext", ")", "\n", "for", "f", "in", "glob", ".", "glob", "(", "file_dir_extension", ")", ":", "\n", "        ", "filename", "=", "f", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "not", "filename", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "yield", "os", ".", "path", ".", "basename", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.preprocess.txt_2_json.read_test_annotations": [[14, 61], ["eliminatedContents.items", "open", "f.readlines", "x.strip", "open", "f.readlines", "x.strip", "line.split", "print", "print", "int", "annotations[].append", "int", "annotations[].append", "round", "round", "round", "round", "[].split", "int", "int", "int", "int", "content.split"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "", "", "def", "read_test_annotations", "(", ")", ":", "\n", "    ", "annotation_path", "=", "'../../data/UCF_Crimes/Temporal_Anomaly_Annotation_For_Testing_Videos/Txt_formate'", "'/Temporal_Anomaly_Annotation.txt'", "\n", "\n", "test_split", "=", "\"../../data/UCF_Crimes/Anomaly_Detection_splits/Anomaly_Test.txt\"", "\n", "\n", "with", "open", "(", "annotation_path", ")", "as", "f", ":", "\n", "        ", "contents", "=", "f", ".", "readlines", "(", ")", "\n", "", "contents", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "contents", "]", "\n", "\n", "with", "open", "(", "test_split", ")", "as", "f", ":", "\n", "        ", "video_paths", "=", "f", ".", "readlines", "(", ")", "\n", "", "video_paths", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "video_paths", "]", "\n", "\n", "eliminatedContents", "=", "{", "}", "\n", "for", "path", "in", "video_paths", ":", "\n", "        ", "for", "content", "in", "contents", ":", "\n", "            ", "if", "content", ".", "split", "(", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "in", "path", ":", "\n", "                ", "eliminatedContents", "[", "path", "]", "=", "content", "\n", "\n", "", "", "", "fps", "=", "30", "# fps is fixed in ucf crime", "\n", "annotations", "=", "{", "}", "\n", "\n", "for", "path", ",", "line", "in", "eliminatedContents", ".", "items", "(", ")", ":", "\n", "        ", "line_parts", "=", "line", ".", "split", "(", ")", "\n", "video_filename", "=", "line_parts", "[", "0", "]", "\n", "\n", "# if not path.startswith(\"Testing_Normal_Videos_Anomaly\"):", "\n", "#     continue", "\n", "\n", "# if path.startswith(\"Testing_Normal_Videos_Anomaly\"):", "\n", "#     continue", "\n", "\n", "if", "not", "(", "video_filename", "in", "path", ")", ":", "\n", "            ", "print", "(", "'Warning!!!'", ")", "\n", "print", "(", "video_filename", ")", "\n", "\n", "", "annotations", "[", "path", "]", "=", "[", "]", "\n", "\n", "if", "int", "(", "line_parts", "[", "2", "]", ")", "!=", "-", "1", ":", "\n", "            ", "temporal_annotation", "=", "{", "'start'", ":", "round", "(", "int", "(", "line_parts", "[", "2", "]", ")", "/", "fps", ")", ",", "'end'", ":", "round", "(", "int", "(", "line_parts", "[", "3", "]", ")", "/", "fps", ")", "}", "\n", "annotations", "[", "path", "]", ".", "append", "(", "temporal_annotation", ")", "\n", "\n", "", "if", "int", "(", "line_parts", "[", "4", "]", ")", "!=", "-", "1", ":", "\n", "            ", "temporal_annotation", "=", "{", "'start'", ":", "round", "(", "int", "(", "line_parts", "[", "4", "]", ")", "/", "fps", ")", ",", "'end'", ":", "round", "(", "int", "(", "line_parts", "[", "5", "]", ")", "/", "fps", ")", "}", "\n", "annotations", "[", "path", "]", ".", "append", "(", "temporal_annotation", ")", "\n", "", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.MultiClassBinaryTCN.__init__": [[8, 16], ["torch.Module.__init__", "MCBTCN.SingleStageModel", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MCBTCN.SingleStageModel", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "copy.deepcopy", "MCBTCN.SingleStageModel", "range", "MCBTCN.SingleStageModel", "range"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "numClassStages", ",", "numBinaryStages", ",", "num_layers", ",", "num_f_maps", ",", "dim", ",", "numClasses", ",", "ssRepeat", "=", "1", ")", ":", "\n", "        ", "super", "(", "MultiClassBinaryTCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stage1", "=", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "dim", ",", "numClasses", ",", "repeat", "=", "ssRepeat", ")", "\n", "self", ".", "multiClassStages", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "numClasses", ",", "numClasses", ")", ")", "\n", "for", "s", "in", "range", "(", "numClassStages", "-", "1", ")", "]", ")", "\n", "self", ".", "stage2", "=", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "numClasses", ",", "1", ")", "\n", "self", ".", "binaryStages", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "1", ",", "1", ")", ")", "\n", "for", "s", "in", "range", "(", "numBinaryStages", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.MultiClassBinaryTCN.forward": [[17, 37], ["x.transpose.transpose.transpose", "MCBTCN.MultiClassBinaryTCN.stage1", "out.unsqueeze", "MCBTCN.MultiClassBinaryTCN.stage2", "out.unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "s", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "s", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out.unsqueeze", "out.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "out", ",", "lastLayer", "=", "self", ".", "stage1", "(", "x", ",", "mask", ")", "\n", "# out = torch.sigmoid(out) * mask[:, 0:1, :]", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "classOutputs", "=", "out", ".", "unsqueeze", "(", "0", ")", "\n", "for", "s", "in", "self", ".", "multiClassStages", ":", "\n", "            ", "out", ",", "lastLayer", "=", "s", "(", "out", ",", "mask", ")", "\n", "# out = torch.sigmoid(out) * mask[:, 0:1, :]", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "classOutputs", "=", "torch", ".", "cat", "(", "(", "classOutputs", ",", "out", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "out", ",", "lastLayer", "=", "self", ".", "stage2", "(", "out", ",", "mask", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "binaryOutputs", "=", "out", ".", "unsqueeze", "(", "0", ")", "\n", "for", "s", "in", "self", ".", "binaryStages", ":", "\n", "            ", "out", ",", "lastLayer", "=", "s", "(", "out", ",", "mask", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "binaryOutputs", "=", "torch", ".", "cat", "(", "(", "binaryOutputs", ",", "out", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "classOutputs", ",", "binaryOutputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.SingleStageModel.__init__": [[40, 48], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "range", "MCBTCN.SingleStageModel.layers.append", "MCBTCN.DilatedResidualLayer"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_f_maps", ",", "dim", ",", "numClasses", ",", "repeat", "=", "1", ")", ":", "\n", "        ", "super", "(", "SingleStageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv1d", "(", "dim", ",", "num_f_maps", ",", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "r", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "DilatedResidualLayer", "(", "2", "**", "i", ",", "num_f_maps", ",", "num_f_maps", ")", ")", "\n", "", "", "self", ".", "conv_out", "=", "nn", ".", "Conv1d", "(", "num_f_maps", ",", "numClasses", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.SingleStageModel.forward": [[49, 58], ["MCBTCN.SingleStageModel.conv_1x1", "layer", "MCBTCN.SingleStageModel.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "previousLastLayer", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_1x1", "(", "x", ")", "\n", "if", "previousLastLayer", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "previousLastLayer", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "mask", ")", "\n", "", "lastLayer", "=", "out", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "out", "=", "self", ".", "conv_out", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "return", "out", ",", "lastLayer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.DilatedResidualLayer.__init__": [[61, 68], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DilatedResidualLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_dilated", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv1d", "(", "out_channels", ",", "out_channels", ",", "1", ")", "\n", "# self.batchnorm1 = nn.BatchNorm1d(out_channels)", "\n", "# self.batchnorm2 = nn.BatchNorm1d(out_channels)", "\n", "self", ".", "dropout2d", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MCBTCN.DilatedResidualLayer.forward": [[69, 80], ["MCBTCN.DilatedResidualLayer.conv_dilated", "torch.relu", "torch.relu", "torch.relu", "MCBTCN.DilatedResidualLayer.conv_1x1", "MCBTCN.DilatedResidualLayer.dropout2d", "MCBTCN.DilatedResidualLayer.unsqueeze", "MCBTCN.DilatedResidualLayer.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_dilated", "(", "x", ")", "\n", "# out = self.batchnorm1(out)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_1x1", "(", "out", ")", "\n", "# out = self.batchnorm2(out)", "\n", "out", "=", "self", ".", "dropout2d", "(", "out", ".", "unsqueeze", "(", "3", ")", ")", "\n", "out", "=", "x", "+", "out", ".", "mean", "(", "3", ")", "\n", "# out = F.relu(out)", "\n", "out", "=", "out", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.TCN.EDTCN.__init__": [[7, 20], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Upsample", "torch.Upsample", "torch.Conv1d", "torch.Conv1d", "torch.Upsample", "torch.Upsample", "torch.Conv1d", "torch.Conv1d", "models.MLP.MLP"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernelSize", "=", "11", ",", "featureSize", "=", "1024", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "kernelSize", "%", "2", "==", "1", ",", "\"kernel should be odd\"", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "featureSize", ",", "64", ",", "kernelSize", ",", "padding", "=", "kernelSize", "//", "2", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool1d", "(", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "96", ",", "kernelSize", ",", "padding", "=", "kernelSize", "//", "2", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool1d", "(", "2", ")", "\n", "self", ".", "upsample1", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "96", ",", "64", ",", "kernelSize", ",", "padding", "=", "kernelSize", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "featureSize", ",", "kernelSize", ",", "padding", "=", "kernelSize", "//", "2", ")", "\n", "self", ".", "classifier", "=", "MLP", "(", "featureSize", ")", "\n", "self", ".", "featureSize", "=", "featureSize", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.TCN.EDTCN.forward": [[21, 42], ["x.view.view.transpose", "TCN.EDTCN.conv1", "TCN.EDTCN.maxpool1", "TCN.EDTCN.conv2", "TCN.EDTCN.maxpool2", "TCN.EDTCN.upsample1", "TCN.EDTCN.conv3", "TCN.EDTCN.upsample2", "TCN.EDTCN.conv4", "x.view.view.transpose", "x.view.view.reshape", "TCN.EDTCN.classifier", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Batchsize: N, Steps: S, Channels=C", "\n", "# N, S, C -> # N, C, S", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "%", "4", "==", "0", ",", "\"data will be pooled twice, it should be divisible to 4\"", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "# N, C, S -> # N, S, C", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "batchSize", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "self", ".", "featureSize", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.TemporalHardPairLoss.__init__": [[42, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "measure", "=", "False", ",", "max_violation", "=", "False", ")", ":", "\n", "        ", "super", "(", "TemporalHardPairLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "if", "measure", "==", "'order'", ":", "\n", "            ", "self", ".", "sim", "=", "order_sim", "\n", "", "elif", "measure", "==", "\"output\"", ":", "\n", "            ", "self", ".", "sim", "=", "output_sim", "\n", "", "else", ":", "\n", "            ", "self", ".", "sim", "=", "cosine_sim", "\n", "\n", "", "self", ".", "max_violation", "=", "max_violation", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.TemporalHardPairLoss.forward": [[54, 87], ["torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "output[].mean", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "output[].mean", "Loss.TemporalHardPairLoss.sim", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.nonzero.squeeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "Loss.TemporalHardPairLoss.argmin", "Loss.TemporalHardPairLoss.argmin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anomalies", ",", "output", ")", ":", "\n", "        ", "abnormalMask", "=", "torch", ".", "nonzero", "(", "anomalies", "==", "1", ")", "\n", "outputAbnormal", "=", "output", "[", "abnormalMask", "]", ".", "mean", "(", "1", ")", "\n", "normalMask", "=", "torch", ".", "nonzero", "(", "anomalies", "==", "0", ")", "\n", "outputNormal", "=", "output", "[", "normalMask", "]", ".", "mean", "(", "1", ")", "\n", "# compute image-sentence score matrix", "\n", "if", "outputNormal", ".", "shape", "[", "0", "]", "==", "0", "or", "outputAbnormal", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "output", ",", "requires_grad", "=", "True", ")", "\n", "", "scores", "=", "self", ".", "sim", "(", "outputAbnormal", ",", "outputNormal", ")", "\n", "# abnormalScores = self.sim(outputAbnormal, outputAbnormal)", "\n", "# mask = torch.eye(outputAbnormal.shape[0], outputAbnormal.shape[0]).bool().cuda()", "\n", "# abnormalScores.masked_fill_(mask, abnormalScores.min()-5)", "\n", "# normalScores = self.sim(outputNormal, outputNormal)", "\n", "# mask = torch.eye(outputNormal.shape[0], outputNormal.shape[0]).bool().cuda()", "\n", "# normalScores.masked_fill_(mask, normalScores.min()-5)", "\n", "\n", "# tempAbnormal = outputAbnormal - outputAbnormal[abnormalScores.argmax(dim=0)]", "\n", "# tempNormal = outputAbnormal - outputNormal[scores.argmin(dim=0)]", "\n", "# abnormalLoss = tempAbnormal**2 - tempNormal**2 + self.margin", "\n", "# abnormalLoss = -((outputAbnormal - outputNormal[scores.argmin(dim=0)]) - self.margin)", "\n", "losses", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "abnormalLoss", "=", "-", "(", "(", "torch", ".", "log", "(", "outputAbnormal", ")", "-", "torch", ".", "log", "(", "outputNormal", "[", "scores", ".", "argmin", "(", "dim", "=", "0", ")", "]", ")", ")", "-", "self", ".", "margin", ")", "\n", "losses", "[", "abnormalMask", ".", "squeeze", "(", ")", "]", "=", "abnormalLoss", "\n", "# tempNormal = outputNormal - outputNormal[normalScores.argmax(dim=0)]", "\n", "# tempAbnormal = outputNormal - outputAbnormal[scores.argmin(dim=1)]", "\n", "# normalLoss = tempNormal**2 - tempAbnormal**2 + self.margin", "\n", "normalLoss", "=", "-", "(", "(", "torch", ".", "log", "(", "outputAbnormal", "[", "scores", ".", "argmin", "(", "dim", "=", "1", ")", "]", ")", "-", "torch", ".", "log", "(", "outputNormal", ")", ")", "-", "self", ".", "margin", ")", "\n", "losses", "[", "normalMask", ".", "squeeze", "(", ")", "]", "=", "normalLoss", "\n", "\n", "loss", "=", "torch", ".", "cat", "(", "(", "abnormalLoss", ",", "normalLoss", ")", ",", "0", ")", "\n", "filteredDists", "=", "torch", ".", "max", "(", "loss", ",", "torch", ".", "zeros_like", "(", "loss", ")", ")", "\n", "\n", "return", "filteredDists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.l2norm": [[9, 15], ["torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.div", "torch.div", "torch.div", "torch.div", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "l2norm", "(", "X", ")", ":", "\n", "    ", "\"\"\"L2-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "torch", ".", "pow", "(", "X", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "X", "=", "torch", ".", "div", "(", "X", ",", "norm", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.cosine_sim": [[17, 21], ["im.mm", "s.t"], "function", ["None"], ["", "def", "cosine_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Cosine similarity between all the image and sentence pairs\n    \"\"\"", "\n", "return", "im", ".", "mm", "(", "s", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.order_sim": [[23, 30], ["s.unsqueeze().expand", "im.unsqueeze().expand", "YmX.clamp().pow().sum().sqrt().t", "s.size", "im.size", "s.size", "s.size", "im.size", "s.size", "s.unsqueeze", "im.unsqueeze", "YmX.clamp().pow().sum().sqrt", "YmX.clamp().pow().sum", "YmX.clamp().pow", "YmX.clamp"], "function", ["None"], ["", "def", "order_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Order embeddings similarity measure $max(0, s-im)$\n    \"\"\"", "\n", "YmX", "=", "(", "s", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", "\n", "-", "im", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", ")", "\n", "score", "=", "-", "YmX", ".", "clamp", "(", "min", "=", "0", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "sqrt", "(", ")", ".", "t", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.Loss.output_sim": [[32, 34], ["score0.unsqueeze().repeat", "score1.unsqueeze().repeat", "score0.unsqueeze", "score1.unsqueeze"], "function", ["None"], ["", "def", "output_sim", "(", "score0", ",", "score1", ")", ":", "\n", "    ", "return", "(", "score0", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "score1", ".", "shape", "[", "0", "]", ",", "1", ")", "-", "score1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "score0", ".", "shape", "[", "0", "]", ")", ")", "**", "2", "\n", "# return score1.unsqueeze(1).mm(score2.unsqueeze(0))", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.MultiStageModel.__init__": [[8, 13], ["torch.Module.__init__", "MSTCN.SingleStageModel", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "MSTCN.SingleStageModel", "range"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_stages", ",", "num_layers", ",", "num_f_maps", ",", "dim", ",", "ssRepeat", "=", "1", ",", "msRepeat", "=", "1", ")", ":", "\n", "        ", "super", "(", "MultiStageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stage1", "=", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "dim", ",", "repeat", "=", "ssRepeat", ")", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "SingleStageModel", "(", "num_layers", ",", "num_f_maps", ",", "1", ",", "repeat", "=", "msRepeat", ")", ")", "\n", "for", "s", "in", "range", "(", "num_stages", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.MultiStageModel.forward": [[14, 25], ["x.transpose.transpose.transpose", "mask.transpose.transpose.transpose", "MSTCN.MultiStageModel.stage1", "out.unsqueeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "s", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "2", ",", "1", ")", "\n", "out", ",", "lastLayer", "=", "self", ".", "stage1", "(", "x", ",", "mask", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "outputs", "=", "out", ".", "unsqueeze", "(", "0", ")", "\n", "for", "s", "in", "self", ".", "stages", ":", "\n", "            ", "out", ",", "lastLayer", "=", "s", "(", "out", ",", "mask", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs", ",", "out", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.SingleStageModel.__init__": [[28, 36], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "range", "MSTCN.SingleStageModel.layers.append", "MSTCN.DilatedResidualLayer"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_f_maps", ",", "dim", ",", "repeat", "=", "1", ")", ":", "\n", "        ", "super", "(", "SingleStageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv1d", "(", "dim", ",", "num_f_maps", ",", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "r", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "DilatedResidualLayer", "(", "2", "**", "i", ",", "num_f_maps", ",", "num_f_maps", ")", ")", "\n", "", "", "self", ".", "conv_out", "=", "nn", ".", "Conv1d", "(", "num_f_maps", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.SingleStageModel.forward": [[37, 46], ["MSTCN.SingleStageModel.conv_1x1", "layer", "MSTCN.SingleStageModel.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "previousLastLayer", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_1x1", "(", "x", ")", "\n", "if", "previousLastLayer", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "previousLastLayer", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "mask", ")", "\n", "", "lastLayer", "=", "out", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "out", "=", "self", ".", "conv_out", "(", "out", ")", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "return", "out", ",", "lastLayer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.DilatedResidualLayer.__init__": [[49, 56], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DilatedResidualLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_dilated", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv1d", "(", "out_channels", ",", "out_channels", ",", "1", ")", "\n", "# self.batchnorm1 = nn.BatchNorm1d(out_channels)", "\n", "# self.batchnorm2 = nn.BatchNorm1d(out_channels)", "\n", "self", ".", "dropout2d", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MSTCN.DilatedResidualLayer.forward": [[57, 68], ["MSTCN.DilatedResidualLayer.conv_dilated", "torch.relu", "torch.relu", "torch.relu", "MSTCN.DilatedResidualLayer.conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_dilated", "(", "x", ")", "\n", "# out = self.batchnorm1(out)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_1x1", "(", "out", ")", "\n", "# out = self.batchnorm2(out)", "\n", "# out = self.dropout2d(out.unsqueeze(3))", "\n", "out", "=", "x", "+", "out", "\n", "# out = F.relu(out)", "\n", "out", "=", "out", "*", "mask", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MLP.MLP.__init__": [[7, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featureSize", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "featureSize", ",", "512", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "32", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.models.MLP.MLP.forward": [[14, 24], ["MLP.MLP.linear1", "torch.relu", "torch.relu", "torch.relu", "MLP.MLP.linear2", "torch.relu", "torch.relu", "torch.relu", "MLP.MLP.linear3", "torch.relu", "torch.relu", "torch.relu", "MLP.MLP.linear4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear4", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.__init__": [[13, 18], ["models.handlers.temporal_action.TemporalActionSegHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "TemporalActionSegHandler", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "thresholds", "=", "cfg", ".", "evaluation", ".", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.get_model": [[19, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.model_forward": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.get_dataloaders": [[27, 52], ["dataset.ucf_crime.UCFCrimeTemporal", "torch.utils.data.DataLoader", "dataset.ucf_crime.UCFCrimeTemporal", "torch.utils.data.DataLoader", "dataset.ucf_crime.UCFCrimeTemporal", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_dataloaders", "(", "self", ",", "data_cfg", ",", "mode", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "train_dataset", "=", "UCFCrimeTemporal", "(", "data_cfg", ",", "split", "=", "\"train\"", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn_precomp", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataset", "=", "UCFCrimeTemporal", "(", "data_cfg", ",", "split", "=", "\"val\"", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn_precomp", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "test_dataset", "=", "UCFCrimeTemporal", "(", "data_cfg", ",", "split", "=", "\"test\"", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn_precomp", ")", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.filter_data": [[53, 58], ["None"], "methods", ["None"], ["", "", "def", "filter_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "mask", "=", "data", "[", "\"anomalies\"", "]", "!=", "self", ".", "mask_value", "\n", "for", "key", "in", "data", ":", "\n", "            ", "data", "[", "key", "]", "=", "data", "[", "key", "]", "[", "mask", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.clip_outputs": [[59, 69], ["addict.Dict", "clip_targets.view().detach().cpu().numpy", "numpy.array().reshape", "output.view().detach().cpu().numpy", "temporal_anomaly.TemporalAnomalyDetectionHandler.filter_data", "temporal_anomaly.TemporalAnomalyDetectionHandler.clip_names.tolist", "clip_targets.view().detach().cpu", "numpy.array", "output.view().detach().cpu", "clip_targets.view().detach", "output.view().detach", "clip_targets.view", "output.view"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.filter_data"], ["", "def", "clip_outputs", "(", "self", ",", "output", ",", "clip_targets", ",", "clip_names", ")", ":", "\n", "        ", "clip_data", "=", "Dict", "(", ")", "\n", "clip_data", ".", "anomalies", "=", "clip_targets", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "clip_data", ".", "clip_names", "=", "np", ".", "array", "(", "clip_names", ")", ".", "reshape", "(", "-", "1", ")", "\n", "clip_data", ".", "outputs", "=", "output", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "clip_data", "=", "self", ".", "filter_data", "(", "clip_data", ")", "\n", "clip_data", ".", "clip_names", "=", "clip_data", ".", "clip_names", ".", "tolist", "(", ")", "\n", "\n", "return", "clip_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.visualize_outputs": [[70, 72], ["None"], "methods", ["None"], ["", "def", "visualize_outputs", "(", "self", ",", "video_clips", ",", "exp_dir", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.append_overlapped_clips": [[73, 87], ["addict.Dict", "zip", "addict.Dict.predictions[].append", "addict.Dict.targets[].append", "dict", "dict"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "append_overlapped_clips", "(", "clip_data", ")", ":", "\n", "        ", "clip_dicts", "=", "Dict", "(", "predictions", "=", "dict", "(", ")", ",", "\n", "targets", "=", "dict", "(", ")", ")", "\n", "\n", "for", "clip_name", ",", "prediction", ",", "target", "in", "zip", "(", "clip_data", ".", "clip_names", ",", "clip_data", ".", "outputs", ",", "\n", "clip_data", ".", "anomalies", ")", ":", "\n", "            ", "if", "clip_name", "not", "in", "clip_dicts", ".", "predictions", ":", "\n", "                ", "clip_dicts", ".", "predictions", "[", "clip_name", "]", "=", "[", "]", "\n", "", "if", "clip_name", "not", "in", "clip_dicts", ".", "targets", ":", "\n", "                ", "clip_dicts", ".", "targets", "[", "clip_name", "]", "=", "[", "]", "\n", "", "clip_dicts", ".", "predictions", "[", "clip_name", "]", ".", "append", "(", "prediction", ")", "\n", "clip_dicts", ".", "targets", "[", "clip_name", "]", ".", "append", "(", "target", ")", "\n", "", "return", "clip_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.create_losses": [[88, 106], ["addict.Dict", "addict.Dict", "addict.Dict", "Exception", "torch.nn.MSELoss", "models.Loss.TemporalHardPairLoss"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_losses", "(", "loss_cfg", ")", ":", "\n", "        ", "losses", "=", "Dict", "(", ")", "\n", "for", "loss_dict", "in", "loss_cfg", ":", "\n", "            ", "if", "loss_dict", ".", "type", "==", "\"mse\"", ":", "\n", "                ", "losses", "[", "\"mse\"", "]", "=", "Dict", "(", "loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ",", "\n", "factor", "=", "loss_dict", ".", "factor", ")", "\n", "", "elif", "loss_dict", ".", "type", "==", "\"thp\"", ":", "\n", "                ", "losses", "[", "\"thp\"", "]", "=", "Dict", "(", "loss", "=", "TemporalHardPairLoss", "(", "margin", "=", "loss_dict", ".", "params", ".", "margin", ",", "\n", "max_violation", "=", "loss_dict", ".", "params", ".", "max_violation", ",", "\n", "measure", "=", "loss_dict", ".", "params", ".", "measure", ")", ",", "\n", "factor", "=", "loss_dict", ".", "factor", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"loss not handled\"", ")", "\n", "\n", "# TODO: cross entropy loss", "\n", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.move_2_gpu": [[107, 117], ["addict.Dict", "torch.cuda.is_available", "input_data.float().cuda", "anomalies.float().cuda", "masks.float().cuda", "input_data.float", "anomalies.float", "masks.float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "move_2_gpu", "(", "data", ")", ":", "\n", "        ", "input_data", ",", "masks", ",", "anomalies", ",", "category", ",", "_", ",", "clip_names", "=", "data", "\n", "gpu_data", "=", "Dict", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "gpu_data", ".", "input", "=", "input_data", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "gpu_data", ".", "anomalies", "=", "anomalies", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "gpu_data", ".", "masks", "=", "masks", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "gpu_data", ".", "clip_names", "=", "clip_names", "\n", "return", "gpu_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.temporal_score": [[118, 126], ["addict.Dict", "super().temporal_score", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.temporal_score"], ["", "def", "temporal_score", "(", "self", ",", "iou_list", ",", "video_clips", ",", "bg_class", "=", "0", ")", ":", "\n", "        ", "threshold_scores", "=", "Dict", "(", ")", "\n", "for", "threshold", "in", "self", ".", "thresholds", ":", "\n", "            ", "for", "video_name", "in", "video_clips", ":", "\n", "                ", "video_clips", "[", "video_name", "]", ".", "predictions", "=", "(", "np", ".", "array", "(", "video_clips", "[", "video_name", "]", ".", "predictions", ")", ">", "threshold", ")", ".", "tolist", "(", ")", "\n", "", "output_scores", "=", "super", "(", ")", ".", "temporal_score", "(", "iou_list", ",", "video_clips", ",", "bg_class", "=", "0", ")", "\n", "threshold_scores", "[", "\"thr_{:.2f}\"", ".", "format", "(", "threshold", ")", "]", "=", "output_scores", "\n", "", "return", "threshold_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.calculate_loss": [[127, 145], ["dict", "temporal_anomaly.TemporalAnomalyDetectionHandler.losses.items", "torch.tensor().float", "torch.cuda.is_available", "temporal_anomaly.TemporalAnomalyDetectionHandler.mse_loss_calculate", "factor.cuda.cuda.cuda", "temporal_anomaly.TemporalAnomalyDetectionHandler.thp_loss_calculate", "Exception", "torch.tensor", "float"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.mse_loss_calculate", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.thp_loss_calculate"], ["", "def", "calculate_loss", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "loss_outputs", "=", "dict", "(", ")", "\n", "for", "loss_type", ",", "loss_cfg", "in", "self", ".", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "loss_type", "==", "\"mse\"", ":", "\n", "                ", "partial_loss", "=", "self", ".", "mse_loss_calculate", "(", "output", ",", "target", ")", "\n", "", "elif", "loss_type", "==", "\"thp\"", ":", "\n", "                ", "partial_loss", "=", "self", ".", "thp_loss_calculate", "(", "output", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"loss not handled\"", ")", "\n", "\n", "", "loss_outputs", "[", "loss_type", "]", "=", "partial_loss", "\n", "\n", "factor", "=", "torch", ".", "tensor", "(", "float", "(", "loss_cfg", ".", "factor", ")", ",", "requires_grad", "=", "True", ")", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "factor", "=", "factor", ".", "cuda", "(", ")", "\n", "", "total_loss", "+=", "factor", "*", "partial_loss", "\n", "", "return", "total_loss", ",", "loss_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.thp_loss_calculate": [[146, 158], ["torch.zeros_like", "temporal_anomaly.TemporalAnomalyDetectionHandler.losses.thp.loss", "hp_values.reshape.reshape.reshape", "zip", "target.view", "hp_value_win[].mean", "target.view", "output.view", "target.view"], "methods", ["None"], ["", "def", "thp_loss_calculate", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "mask", "=", "(", "target", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "mask_value", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "hp_values", "=", "torch", ".", "zeros_like", "(", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "hp_values", "[", "mask", "]", "=", "self", ".", "losses", ".", "thp", ".", "loss", "(", "target", ".", "view", "(", "-", "1", ")", "[", "mask", "]", ",", "output", ".", "view", "(", "-", "1", ")", "[", "mask", "]", ")", "\n", "hp_values", "=", "hp_values", ".", "reshape", "(", "(", "target", ".", "shape", "[", "0", "]", ",", "target", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "thp_loss", "=", "0", "\n", "for", "target_win", ",", "output_win", ",", "hp_value_win", "in", "zip", "(", "target", ",", "output", ",", "hp_values", ")", ":", "\n", "            ", "clip_filter", "=", "(", "target_win", "!=", "self", ".", "mask_value", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "thp_loss", "+=", "hp_value_win", "[", "clip_filter", "]", ".", "mean", "(", ")", "\n", "\n", "", "return", "thp_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.mse_loss_calculate": [[159, 165], ["zip", "temporal_anomaly.TemporalAnomalyDetectionHandler.losses.mse.loss"], "methods", ["None"], ["", "def", "mse_loss_calculate", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "mse_loss", "=", "0", "\n", "for", "target_win", ",", "output_win", "in", "zip", "(", "target", ",", "output", ")", ":", "\n", "            ", "clip_filter", "=", "(", "target_win", "!=", "self", ".", "mask_value", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "mse_loss", "+=", "self", ".", "losses", ".", "mse", ".", "loss", "(", "output_win", "[", "clip_filter", "]", ",", "target_win", "[", "clip_filter", "]", ")", "\n", "", "return", "mse_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.edtcn_handler.EDCTNHandler.__init__": [[12, 14], ["models.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "TemporalAnomalyDetectionHandler", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.edtcn_handler.EDCTNHandler.get_model": [[15, 18], ["models.TCN.EDTCN"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "model", "=", "EDTCN", "(", "featureSize", "=", "model_cfg", ".", "feature_size", ",", "kernelSize", "=", "model_cfg", ".", "kernel_size", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.edtcn_handler.EDCTNHandler.model_forward": [[19, 41], ["edtcn_handler.EDCTNHandler.move_2_gpu", "dict", "edtcn_handler.EDCTNHandler.model", "edtcn_handler.EDCTNHandler.calculate_loss", "loss_parts.items", "loss.item", "loss.item", "loss_value.item", "loss_value.item", "edtcn_handler.EDCTNHandler.clip_outputs", "edtcn_handler.EDCTNHandler.append_overlapped_clips", "edtcn_handler.EDCTNHandler.losses.items"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.move_2_gpu", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.calculate_loss", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.clip_outputs", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.append_overlapped_clips"], ["", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "data", "=", "self", ".", "move_2_gpu", "(", "data", ")", "\n", "\n", "report", "=", "dict", "(", ")", "\n", "clip_dicts", "=", "None", "\n", "loss_dict", "=", "{", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", ":", "0", "for", "loss_type", ",", "loss_cfg", "in", "self", ".", "losses", ".", "items", "(", ")", "}", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "data", "[", "\"input\"", "]", ")", "\n", "\n", "loss", ",", "loss_parts", "=", "self", ".", "calculate_loss", "(", "outputs", ",", "data", "[", "'anomalies'", "]", ")", "\n", "for", "loss_type", ",", "loss_value", "in", "loss_parts", ".", "items", "(", ")", ":", "\n", "            ", "loss_dict", "[", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "report", "[", "\"loss/{}\"", ".", "format", "(", "loss_type", ")", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "loss_dict", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "report", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "evaluate", ":", "\n", "            ", "c_data", "=", "self", ".", "clip_outputs", "(", "outputs", ",", "data", "[", "'anomalies'", "]", ",", "data", "[", "'clip_names'", "]", ")", "\n", "clip_dicts", "=", "self", ".", "append_overlapped_clips", "(", "c_data", ")", "\n", "\n", "", "return", "loss", ",", "report", ",", "clip_dicts", ",", "loss_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mstcn_handler.MSTCNHandler.__init__": [[11, 13], ["models.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "TemporalAnomalyDetectionHandler", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mstcn_handler.MSTCNHandler.get_model": [[14, 19], ["models.MSTCN.MultiStageModel"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "model", "=", "MultiStageModel", "(", "num_stages", "=", "model_cfg", ".", "num_stages", ",", "num_layers", "=", "model_cfg", ".", "num_layers", ",", "\n", "num_f_maps", "=", "model_cfg", ".", "hidden_win_size", ",", "\n", "dim", "=", "model_cfg", ".", "feature_size", ",", "ssRepeat", "=", "model_cfg", ".", "first_stage_repeat", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mstcn_handler.MSTCNHandler.model_forward": [[20, 49], ["mstcn_handler.MSTCNHandler.move_2_gpu", "dict", "mstcn_handler.MSTCNHandler.model", "enumerate", "mstcn_handler.MSTCNHandler.losses.items", "loss.item", "loss.item", "stage_output.mean.mean.mean", "mstcn_handler.MSTCNHandler.calculate_loss", "loss_outputs.items", "numpy.array().mean", "mstcn_handler.MSTCNHandler.clip_outputs", "mstcn_handler.MSTCNHandler.append_overlapped_clips", "mstcn_handler.MSTCNHandler.losses.items", "loss_value.item", "loss_dict[].append", "loss_value.item", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.move_2_gpu", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.calculate_loss", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.clip_outputs", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.append_overlapped_clips"], ["", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "# TODO: report can be generated by model handler class (?)", "\n", "        ", "data", "=", "self", ".", "move_2_gpu", "(", "data", ")", "\n", "\n", "loss", "=", "0", "\n", "report", "=", "dict", "(", ")", "\n", "clip_dicts", "=", "None", "\n", "loss_dict", "=", "{", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", ":", "[", "]", "for", "loss_type", ",", "loss_cfg", "in", "self", ".", "losses", ".", "items", "(", ")", "}", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "data", "[", "\"input\"", "]", ",", "data", "[", "\"masks\"", "]", ")", "\n", "for", "stage_index", ",", "stage_output", "in", "enumerate", "(", "outputs", ")", ":", "\n", "            ", "stage_output", "=", "stage_output", ".", "mean", "(", "1", ")", "\n", "stage_loss", ",", "loss_outputs", "=", "self", ".", "calculate_loss", "(", "stage_output", ",", "data", "[", "'anomalies'", "]", ")", "\n", "for", "loss_type", ",", "loss_value", "in", "loss_outputs", ".", "items", "(", ")", ":", "\n", "                ", "report", "[", "\"loss/layer-{}-{}\"", ".", "format", "(", "loss_type", ",", "stage_index", ")", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", "]", ".", "append", "(", "loss_value", ".", "item", "(", ")", ")", "\n", "", "loss", "+=", "stage_loss", "\n", "\n", "", "for", "loss_type", ",", "loss_cfg", "in", "self", ".", "losses", ".", "items", "(", ")", ":", "\n", "            ", "loss_dict", "[", "'{}_loss'", ".", "format", "(", "loss_type", ")", "]", "=", "np", ".", "array", "(", "loss_dict", "[", "'{}_loss'", ".", "format", "(", "loss_type", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n", "", "loss_dict", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "report", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "evaluate", ":", "\n", "            ", "c_data", "=", "self", ".", "clip_outputs", "(", "outputs", "[", "-", "1", "]", ",", "data", "[", "'anomalies'", "]", ",", "data", "[", "'clip_names'", "]", ")", "\n", "clip_dicts", "=", "self", ".", "append_overlapped_clips", "(", "c_data", ")", "\n", "\n", "", "return", "loss", ",", "report", ",", "clip_dicts", ",", "loss_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.__init__": [[15, 37], ["logger.info", "handler.ModelHandler.get_model", "handler.ModelHandler.create_losses", "handler.ModelHandler.model_cast_move", "torch.optim.Adam", "hasattr", "handler.ModelHandler.get_dataloaders", "handler.ModelHandler.model.parameters", "torch.optim.lr_scheduler.StepLR", "handler.ModelHandler.get_dataloaders"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_model", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.create_losses", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.model_cast_move", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_dataloaders", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_dataloaders"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "self", ".", "mode", "=", "cfg", ".", "mode", "\n", "logger", ".", "info", "(", "\"model handler switched to {} mode\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "get_model", "(", "cfg", ".", "model", ")", "\n", "self", ".", "losses", "=", "self", ".", "create_losses", "(", "cfg", ".", "model", ".", "losses", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "train", ".", "optimizer", ".", "lr", ",", "\n", "betas", "=", "(", "0.5", ",", "0.9", ")", ",", "eps", "=", "1e-08", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "if", "hasattr", "(", "cfg", ".", "train", ".", "optimizer", ",", "\"scheduler\"", ")", ":", "\n", "                ", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "cfg", ".", "train", ".", "optimizer", ".", "scheduler", ".", "step_size", ",", "\n", "gamma", "=", "cfg", ".", "train", ".", "optimizer", ".", "scheduler", ".", "gamma", ")", "\n", "", "self", ".", "train_loader", ",", "self", ".", "val_loader", "=", "self", ".", "get_dataloaders", "(", "cfg", ".", "dataset", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "self", ".", "test_loader", "=", "self", ".", "get_dataloaders", "(", "cfg", ".", "dataset", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "", "self", ".", "model_cast_move", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.get_model": [[38, 41], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.get_dataloaders": [[42, 45], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_dataloaders", "(", "self", ",", "data_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.model_forward": [[46, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.calculate_score": [[50, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "calculate_score", "(", "self", ",", "epoch_dict", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.visualize_outputs": [[54, 57], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "visualize_outputs", "(", "self", ",", "output_data", ",", "exp_dir", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_epoch_dict": [[58, 61], ["addict.Dict", "dict"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_epoch_dict", "(", ")", ":", "\n", "        ", "return", "Dict", "(", "losses", "=", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_train_epoch_dict": [[62, 65], ["handler.ModelHandler.init_epoch_dict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_epoch_dict"], ["", "def", "init_train_epoch_dict", "(", "self", ")", ":", "\n", "        ", "epoch_dict", "=", "self", ".", "init_epoch_dict", "(", ")", "\n", "return", "epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_eval_epoch_dict": [[66, 69], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "init_eval_epoch_dict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.create_losses": [[70, 74], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "abstractmethod", "\n", "def", "create_losses", "(", "loss_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.train_iteration": [[75, 91], ["handler.ModelHandler.optimizer.zero_grad", "hasattr", "handler.ModelHandler.model_forward", "logger.debug", "loss.backward", "handler.ModelHandler.optimizer.step", "handler.ModelHandler.scheduler.step", "epoch_dict.losses[].append"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.model_forward", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.InplaceShift.backward"], ["", "def", "train_iteration", "(", "self", ",", "data", ",", "epoch_dict", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "hasattr", "(", "self", ",", "\"scheduler\"", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "loss", ",", "report", ",", "_", ",", "loss_dict", "=", "self", ".", "model_forward", "(", "data", ")", "\n", "\n", "for", "loss_key", "in", "loss_dict", ":", "\n", "            ", "if", "loss_key", "not", "in", "epoch_dict", ".", "losses", ":", "\n", "                ", "epoch_dict", ".", "losses", "[", "loss_key", "]", "=", "[", "]", "\n", "", "epoch_dict", ".", "losses", "[", "loss_key", "]", ".", "append", "(", "loss_dict", "[", "loss_key", "]", ")", "\n", "\n", "", "report", "[", "\"lr\"", "]", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "logger", ".", "debug", "(", "\"iteration report:\\n{}\"", ".", "format", "(", "report", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "report", ",", "epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.eval_iteration": [[92, 103], ["handler.ModelHandler.model_forward", "epoch_dict.predictions.update", "epoch_dict.targets.update", "epoch_dict.losses[].append"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.model_forward", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update"], ["", "def", "eval_iteration", "(", "self", ",", "data", ",", "epoch_dict", ")", ":", "\n", "        ", "loss", ",", "report", ",", "clip_dicts", ",", "loss_dict", "=", "self", ".", "model_forward", "(", "data", ",", "evaluate", "=", "True", ")", "\n", "\n", "for", "loss_key", "in", "loss_dict", ":", "\n", "            ", "if", "loss_key", "not", "in", "epoch_dict", ".", "losses", ":", "\n", "                ", "epoch_dict", ".", "losses", "[", "loss_key", "]", "=", "[", "]", "\n", "", "epoch_dict", ".", "losses", "[", "loss_key", "]", ".", "append", "(", "loss_dict", "[", "loss_key", "]", ")", "\n", "\n", "", "epoch_dict", ".", "predictions", ".", "update", "(", "clip_dicts", ".", "predictions", ")", "\n", "epoch_dict", ".", "targets", ".", "update", "(", "clip_dicts", ".", "targets", ")", "\n", "return", "report", ",", "epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.iter_info": [[104, 108], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "iter_info", "(", "report_data", ")", ":", "\n", "        ", "info", "=", "\"Loss {:.3f}\"", ".", "format", "(", "report_data", "[", "\"total_loss\"", "]", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.epoch_report": [[109, 118], ["dict", "logger.debug", "float", "numpy.array().mean", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "epoch_report", "(", "epoch_dict", ")", ":", "\n", "        ", "report", "=", "dict", "(", ")", "\n", "report", "[", "'message'", "]", "=", "\"\"", "\n", "for", "loss_key", "in", "epoch_dict", ".", "losses", ":", "\n", "            ", "report", "[", "\"epoch/{}\"", ".", "format", "(", "loss_key", ")", "]", "=", "float", "(", "np", ".", "array", "(", "epoch_dict", ".", "losses", "[", "loss_key", "]", ")", ".", "mean", "(", ")", ")", "\n", "report", "[", "'message'", "]", "+=", "\" {}: {:.2f} \"", ".", "format", "(", "loss_key", ",", "report", "[", "\"epoch/{}\"", ".", "format", "(", "loss_key", ")", "]", ")", "\n", "", "logger", ".", "debug", "(", "\"\\n{}\"", ".", "format", "(", "report", ")", ")", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.save_variables": [[119, 126], ["addict.Dict", "hasattr", "handler.ModelHandler.scheduler.state_dict", "handler.ModelHandler.optimizer.state_dict", "handler.ModelHandler.model.state_dict"], "methods", ["None"], ["", "def", "save_variables", "(", "self", ")", ":", "\n", "        ", "variables_dict", "=", "Dict", "(", "optimizer", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "model", "=", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "\"scheduler\"", ")", ":", "\n", "            ", "variables_dict", ".", "scheduler", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "\n", "", "return", "variables_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.load_variables": [[127, 134], ["handler.ModelHandler.model.load_state_dict", "handler.ModelHandler.model_cast_move", "handler.ModelHandler.optimizer.load_state_dict", "hasattr", "handler.ModelHandler.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.model_cast_move"], ["", "def", "load_variables", "(", "self", ",", "variables", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "variables", "[", "\"model\"", "]", ")", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "variables", "[", "\"optimizer\"", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "\"scheduler\"", ")", ":", "\n", "                ", "self", ".", "scheduler", ".", "load_state_dict", "(", "variables", "[", "\"scheduler\"", "]", ")", "\n", "", "", "self", ".", "model_cast_move", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.model_cast_move": [[135, 140], ["torch.cuda.is_available", "handler.ModelHandler.model.float", "handler.ModelHandler.model.cuda", "logger.info"], "methods", ["None"], ["", "def", "model_cast_move", "(", "self", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "logger", ".", "info", "(", "\"model has been moved to gpu\"", ")", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "float", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.__init__": [[11, 13], ["models.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "TemporalAnomalyDetectionHandler", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.get_dataloaders": [[14, 35], ["dataset.ucf_crime.UCFCrimeDataset", "torch.utils.data.DataLoader", "dataset.ucf_crime.UCFCrimeDataset", "torch.utils.data.DataLoader", "dataset.ucf_crime.UCFCrimeDataset", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_dataloaders", "(", "self", ",", "data_cfg", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "train_dataset", "=", "UCFCrimeDataset", "(", "data_cfg", ",", "split", "=", "\"train\"", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ")", "\n", "\n", "val_dataset", "=", "UCFCrimeDataset", "(", "data_cfg", ",", "split", "=", "\"val\"", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "test_dataset", "=", "UCFCrimeDataset", "(", "data_cfg", ",", "split", "=", "\"test\"", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "data_cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_cfg", ".", "num_workers", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.get_model": [[36, 39], ["models.MLP.MLP"], "methods", ["None"], ["", "", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "model", "=", "MLP", "(", "featureSize", "=", "model_cfg", ".", "feature_size", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.model_forward": [[40, 60], ["mlp_handler.MLPHandler.move_2_gpu", "dict", "mlp_handler.MLPHandler.model", "mlp_handler.MLPHandler.calculate_loss", "loss_parts.items", "loss.item", "loss.item", "loss_value.item", "loss_value.item", "mlp_handler.MLPHandler.clip_outputs", "mlp_handler.MLPHandler.append_overlapped_clips", "mlp_handler.MLPHandler.losses.items"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.move_2_gpu", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.calculate_loss", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.clip_outputs", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_anomaly.TemporalAnomalyDetectionHandler.append_overlapped_clips"], ["", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "data", "=", "self", ".", "move_2_gpu", "(", "data", ")", "\n", "\n", "report", "=", "dict", "(", ")", "\n", "clip_dicts", "=", "None", "\n", "loss_dict", "=", "{", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", ":", "0", "for", "loss_type", ",", "loss_cfg", "in", "self", ".", "losses", ".", "items", "(", ")", "}", "\n", "outputs", "=", "self", ".", "model", "(", "data", "[", "\"input\"", "]", ")", "\n", "loss", ",", "loss_parts", "=", "self", ".", "calculate_loss", "(", "outputs", ",", "data", "[", "'anomalies'", "]", ")", "\n", "for", "loss_type", ",", "loss_value", "in", "loss_parts", ".", "items", "(", ")", ":", "\n", "            ", "loss_dict", "[", "\"{}_loss\"", ".", "format", "(", "loss_type", ")", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "report", "[", "\"loss/{}\"", ".", "format", "(", "loss_type", ")", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "loss_dict", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "report", "[", "'total_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "evaluate", ":", "\n", "            ", "c_data", "=", "self", ".", "clip_outputs", "(", "outputs", ",", "data", "[", "'anomalies'", "]", ",", "data", "[", "'clip_names'", "]", ")", "\n", "clip_dicts", "=", "self", ".", "append_overlapped_clips", "(", "c_data", ")", "\n", "\n", "", "return", "loss", ",", "report", ",", "clip_dicts", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.filter_data": [[61, 63], ["None"], "methods", ["None"], ["", "def", "filter_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.mse_loss_calculate": [[64, 66], ["mlp_handler.MLPHandler.losses.mse.loss"], "methods", ["None"], ["", "def", "mse_loss_calculate", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "losses", ".", "mse", ".", "loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.mlp_handler.MLPHandler.thp_loss_calculate": [[67, 69], ["Exception"], "methods", ["None"], ["", "def", "thp_loss_calculate", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"loss not handled\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.__init__": [[11, 17], ["models.handlers.handler.ModelHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "ModelHandler", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "self", ".", "mask_value", "=", "cfg", ".", "dataset", ".", "mask_value", "\n", "self", ".", "num_classes", "=", "1", "\n", "self", ".", "iou_list", "=", "cfg", ".", "evaluation", ".", "iou_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_dataloaders": [[18, 21], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_dataloaders", "(", "self", ",", "data_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.get_model": [[22, 25], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.model_forward": [[26, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "model_forward", "(", "self", ",", "data", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.create_losses": [[30, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "abstractmethod", "\n", "def", "create_losses", "(", "loss_cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.init_eval_epoch_dict": [[35, 41], ["temporal_action.TemporalActionSegHandler.init_epoch_dict", "addict.Dict", "temporal_action.TemporalActionSegHandler.update", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.handler.ModelHandler.init_epoch_dict", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update"], ["", "def", "init_eval_epoch_dict", "(", "self", ")", ":", "\n", "        ", "epoch_dict", "=", "self", ".", "init_epoch_dict", "(", ")", "\n", "val_epoch_dict", "=", "Dict", "(", "targets", "=", "dict", "(", ")", ",", "\n", "predictions", "=", "dict", "(", ")", ")", "\n", "epoch_dict", ".", "update", "(", "val_epoch_dict", ")", "\n", "return", "epoch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.calculate_score": [[42, 50], ["temporal_action.TemporalActionSegHandler.organize_video_clip", "temporal_action.TemporalActionSegHandler.temporal_score", "temporal_action.TemporalActionSegHandler.score_message"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.organize_video_clip", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.temporal_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.score_message"], ["", "def", "calculate_score", "(", "self", ",", "epoch_dict", ",", "epoch_report", ")", ":", "\n", "        ", "video_clips", "=", "self", ".", "organize_video_clip", "(", "epoch_dict", ")", "\n", "temporal_scores", "=", "self", ".", "temporal_score", "(", "iou_list", "=", "self", ".", "iou_list", ",", "\n", "video_clips", "=", "video_clips", ")", "\n", "epoch_report", "[", "'scores'", "]", "=", "temporal_scores", "\n", "epoch_report", "[", "'message'", "]", "+=", "self", ".", "score_message", "(", "temporal_scores", ")", "\n", "\n", "return", "epoch_report", ",", "video_clips", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.visualize_outputs": [[51, 56], ["os.path.join", "os.path.exists", "temporal_action.TemporalActionSegHandler.temporal_visualize", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.temporal_visualize"], ["", "def", "visualize_outputs", "(", "self", ",", "video_clips", ",", "exp_dir", ")", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "\"output\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "self", ".", "temporal_visualize", "(", "video_clips", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.temporal_visualize": [[57, 62], ["video_clips.items", "os.path.join", "utils.utils.visualize_temporal_action", "video_name.split"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.utils.visualize_temporal_action", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "@", "staticmethod", "\n", "def", "temporal_visualize", "(", "video_clips", ",", "output_dir", ")", ":", "\n", "        ", "for", "video_name", ",", "clips", "in", "video_clips", ".", "items", "(", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", ")", "\n", "visualize_temporal_action", "(", "clips", ".", "predictions", ",", "clips", ".", "targets", ",", "save_path", ",", "video_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.score_message": [[63, 75], ["scores.items", "iou_scores[].items"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "score_message", "(", "scores", ")", ":", "\n", "        ", "message", "=", "\"\\n\"", "\n", "for", "thresh", ",", "iou_scores", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "for", "score_set", "in", "iou_scores", ":", "\n", "                ", "message", "+=", "\"#\"", "*", "10", "+", "\" \"", "+", "score_set", "+", "\" \"", "+", "\"#\"", "*", "10", "+", "\"\\n\"", "\n", "for", "iou_thresh", ",", "thresh_scores", "in", "iou_scores", "[", "score_set", "]", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "\"{} {} - f1: {:.2f} pr: {:.2f} rc: {:.2f}\\n\"", ".", "format", "(", "thresh", ",", "iou_thresh", ",", "\n", "thresh_scores", "[", "'f1'", "]", ",", "\n", "thresh_scores", "[", "'precision'", "]", "*", "100", ",", "\n", "thresh_scores", "[", "'recall'", "]", "*", "100", ")", "\n", "", "", "", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.organize_video_clip": [[76, 88], ["dict", "getattr", "getattr.dataset.__getVideoClips__", "getattr.dataset.__getVideoClips__.items", "addict.Dict", "addict.Dict.predictions.append", "addict.Dict.targets.append", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.dataset.ucf_crime.UCFCrimeTemporal.__getVideoClips__"], ["", "def", "organize_video_clip", "(", "self", ",", "epoch_dict", ")", ":", "\n", "        ", "video_clips", "=", "dict", "(", ")", "\n", "\n", "dataloader", "=", "getattr", "(", "self", ",", "\"{}_loader\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "video_clip_list", "=", "dataloader", ".", "dataset", ".", "__getVideoClips__", "(", ")", "\n", "for", "video_name", ",", "clip_list", "in", "video_clip_list", ".", "items", "(", ")", ":", "\n", "            ", "clips", "=", "Dict", "(", "predictions", "=", "[", "]", ",", "targets", "=", "[", "]", ")", "\n", "for", "clip_name", "in", "clip_list", ":", "\n", "                ", "clips", ".", "predictions", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "epoch_dict", ".", "predictions", "[", "clip_name", "]", ")", ")", ")", "\n", "clips", ".", "targets", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "epoch_dict", ".", "targets", "[", "clip_name", "]", ")", ")", ")", "\n", "", "video_clips", "[", "video_name", "]", "=", "clips", "\n", "", "return", "video_clips", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.temporal_score": [[89, 124], ["temporal_action.TemporalActionSegHandler.__init_out_score_dict", "addict.Dict", "addict.Dict", "range", "video_clips.items", "range", "metrics.calc_f1", "addict.Dict", "range", "metrics.f_score", "metrics.calc_f1", "metrics.f_score", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.__init_out_score_dict", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.calc_f1", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.src.metrics.f_score"], ["", "def", "temporal_score", "(", "self", ",", "iou_list", ",", "video_clips", ",", "bg_class", "=", "0", ")", ":", "\n", "        ", "output_scores", "=", "self", ".", "__init_out_score_dict", "(", "iou_list", ")", "\n", "\n", "for", "iou", "in", "iou_list", ":", "\n", "            ", "confusion_mat", "=", "Dict", "(", "fp", "=", "0", ",", "tp", "=", "0", ",", "fn", "=", "0", ")", "\n", "class_confusion_mat", "=", "Dict", "(", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "class_confusion_mat", "[", "c", "]", "=", "Dict", "(", "fp", "=", "0", ",", "tp", "=", "0", ",", "fn", "=", "0", ")", "\n", "", "for", "video_name", ",", "clip_list", "in", "video_clips", ".", "items", "(", ")", ":", "\n", "                ", "clips", "=", "video_clips", "[", "video_name", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                    ", "targets", "=", "(", "np", ".", "array", "(", "clips", ".", "targets", ")", "==", "c", ")", "\n", "predictions", "=", "(", "np", ".", "array", "(", "clips", ".", "predictions", ")", "==", "c", ")", "\n", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "predictions", ",", "targets", ",", "iou", ",", "bg_class", "=", "0", ")", "\n", "\n", "class_confusion_mat", "[", "c", "]", ".", "fp", "+=", "fp1", "\n", "class_confusion_mat", "[", "c", "]", ".", "tp", "+=", "tp1", "\n", "class_confusion_mat", "[", "c", "]", ".", "fn", "+=", "fn1", "\n", "\n", "", "tp1", ",", "fp1", ",", "fn1", "=", "f_score", "(", "clips", ".", "predictions", ",", "clips", ".", "targets", ",", "iou", ",", "bg_class", "=", "bg_class", ")", "\n", "\n", "confusion_mat", ".", "tp", "+=", "tp1", "\n", "confusion_mat", ".", "fp", "+=", "fp1", "\n", "confusion_mat", ".", "fn", "+=", "fn1", "\n", "\n", "", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "output_scores", "[", "\"class_{}\"", ".", "format", "(", "c", ")", "]", "[", "\"iou_{:.2f}\"", ".", "format", "(", "iou", ")", "]", "=", "calc_f1", "(", "class_confusion_mat", "[", "c", "]", ".", "fn", ",", "\n", "class_confusion_mat", "[", "c", "]", ".", "fp", ",", "\n", "class_confusion_mat", "[", "c", "]", ".", "tp", ")", "\n", "\n", "", "output_scores", ".", "overall", "[", "\"iou_{:.2f}\"", ".", "format", "(", "iou", ")", "]", "=", "calc_f1", "(", "confusion_mat", ".", "fn", ",", "\n", "confusion_mat", ".", "fp", ",", "\n", "confusion_mat", ".", "tp", ")", "\n", "\n", "", "return", "output_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.handlers.temporal_action.TemporalActionSegHandler.__init_out_score_dict": [[125, 133], ["addict.Dict", "range", "dict", "dict", "addict.Dict", "addict.Dict"], "methods", ["None"], ["", "def", "__init_out_score_dict", "(", "self", ",", "iou_list", ")", ":", "\n", "        ", "output_scores", "=", "Dict", "(", "overall", "=", "dict", "(", ")", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "output_scores", "[", "\"class_{}\"", ".", "format", "(", "c", ")", "]", "=", "dict", "(", ")", "\n", "for", "iou", "in", "iou_list", ":", "\n", "                ", "output_scores", "[", "\"class_{}\"", ".", "format", "(", "c", ")", "]", "[", "\"iou_{:.2f}\"", ".", "format", "(", "iou", ")", "]", "=", "Dict", "(", "f1", "=", "0", ",", "precesion", "=", "0", ",", "recall", "=", "0", ")", "\n", "output_scores", ".", "overall", "[", "\"iou_{:.2f}\"", ".", "format", "(", "iou", ")", "]", "=", "Dict", "(", "f1", "=", "0", ",", "precesion", "=", "0", ",", "recall", "=", "0", ")", "\n", "", "", "return", "output_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.TSMProcessor.TSMProcessor.__init__": [[13, 18], ["feature_extract.batch_process.BatchProcessor.BatchProcessor.__init__", "feature_extract.models.tsm.feature_extractor.TSMFeatureExtractor", "logger.info"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "input_length", ",", "batch", ":", "queue", ".", "Queue", ",", "outputs", ":", "queue", ".", "Queue", ",", "\n", "dry_run", ":", "bool", ",", "num_crops", "=", "1", ")", ":", "\n", "        ", "BatchProcessor", ".", "__init__", "(", "self", ",", "batch", ",", "outputs", ",", "dry_run", ")", "\n", "self", ".", "model", "=", "TSMFeatureExtractor", "(", "model_path", ",", "segments", "=", "input_length", ",", "crops", "=", "num_crops", ")", "\n", "logger", ".", "info", "(", "\"tsm model has been created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.TSMProcessor.TSMProcessor.process_batch": [[19, 28], ["torch.no_grad", "TSMProcessor.TSMProcessor.model.feature_extract", "numpy.zeros.data.cpu().detach().numpy", "numpy.zeros", "numpy.zeros.data.cpu().detach", "len", "len", "numpy.zeros.data.cpu"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.feature_extract"], ["", "def", "process_batch", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "dry_run", ":", "\n", "                ", "out_tensor", "=", "self", ".", "model", ".", "feature_extract", "(", "self", ".", "local_batch", ")", "\n", "out_tensor", "=", "out_tensor", ".", "data", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "out_tensor", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "local_batch", ")", ",", "len", "(", "self", ".", "clip_names", "[", "0", "]", ")", ",", "10", ")", ")", "\n", "\n", "", "", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.TSMProcessor.TSMProcessor.put_queue": [[29, 38], ["range", "len", "len", "len", "range", "TSMProcessor.TSMProcessor.outputs.put"], "methods", ["None"], ["", "def", "put_queue", "(", "self", ",", "output", ")", ":", "\n", "        ", "assert", "output", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "clip_names", ")", "==", "len", "(", "self", ".", "video_names", ")", "==", "len", "(", "self", ".", "targets", ")", ",", "\"[TSM Processor] # of elements are not same\"", "\n", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "output", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "self", ".", "outputs", ".", "put", "(", "{", "\"out_tensor\"", ":", "output", "[", "i", "]", "[", "j", "]", ",", "\n", "\"clip_name\"", ":", "self", ".", "clip_names", "[", "i", "]", "[", "j", "]", ",", "\n", "\"video_name\"", ":", "self", ".", "video_names", "[", "i", "]", "[", "j", "]", ",", "\n", "\"anomaly\"", ":", "self", ".", "targets", "[", "i", "]", "[", "j", "]", "}", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.I3DProcessor.I3DProcessor.__init__": [[13, 23], ["feature_extract.batch_process.BatchProcessor.BatchProcessor.__init__", "feature_extract.models.i3d.i3dpt.I3D", "I3DProcessor.I3DProcessor.model.eval", "I3DProcessor.I3DProcessor.model.load_state_dict", "torch.cuda.is_available", "logger.info", "torch.load", "I3DProcessor.I3DProcessor.model.cuda"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "batch", ":", "queue", ".", "Queue", ",", "\n", "outputs", ":", "queue", ".", "Queue", ",", "dry_run", ":", "bool", ")", ":", "\n", "        ", "BatchProcessor", ".", "__init__", "(", "self", ",", "batch", ",", "outputs", ",", "dry_run", ")", "\n", "self", ".", "model", "=", "I3D", "(", "num_classes", "=", "400", ",", "modality", "=", "'rgb'", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "logger", ".", "info", "(", "\"i3d model has been created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.I3DProcessor.I3DProcessor.process_batch": [[24, 35], ["torch.no_grad", "torch.from_numpy", "I3DProcessor.I3DProcessor.local_batch.cuda", "I3DProcessor.I3DProcessor.model.feature_extract", "numpy.zeros.data.cpu().detach().numpy", "numpy.zeros", "numpy.array", "numpy.zeros.data.cpu().detach", "len", "numpy.zeros.data.cpu"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.feature_extract"], ["", "def", "process_batch", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "dry_run", ":", "\n", "                ", "self", ".", "local_batch", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "local_batch", ")", ")", "\n", "self", ".", "local_batch", "=", "self", ".", "local_batch", ".", "cuda", "(", ")", "\n", "output", "=", "self", ".", "model", ".", "feature_extract", "(", "self", ".", "local_batch", ")", "\n", "output", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "local_batch", ")", ",", "10", ")", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.I3DProcessor.I3DProcessor.put_queue": [[36, 44], ["range", "len", "len", "len", "I3DProcessor.I3DProcessor.outputs.put"], "methods", ["None"], ["", "", "def", "put_queue", "(", "self", ",", "output", ")", ":", "\n", "        ", "assert", "output", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "clip_names", ")", "==", "len", "(", "self", ".", "video_names", ")", "==", "len", "(", "self", ".", "targets", ")", ",", "\"# of elements are not same\"", "\n", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "outputs", ".", "put", "(", "{", "\"out_tensor\"", ":", "output", "[", "i", "]", ",", "\n", "\"clip_name\"", ":", "self", ".", "clip_names", "[", "i", "]", ",", "\n", "\"video_name\"", ":", "self", ".", "video_names", "[", "i", "]", ",", "\n", "\"anomaly\"", ":", "self", ".", "targets", "[", "i", "]", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.C3DProcessor.C3DProcessor.__init__": [[10, 15], ["feature_extract.batch_process.BatchProcessor.BatchProcessor.__init__", "C3DProcessor.C3DProcessor.__prepare_model"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.C3DProcessor.C3DProcessor.__prepare_model"], ["    ", "def", "__init__", "(", "self", ",", "model_json", ",", "model_weight", ",", "batch", ":", "queue", ".", "Queue", ",", "\n", "outputs", ":", "queue", ".", "Queue", ",", "dry_run", ":", "bool", ")", ":", "\n", "        ", "BatchProcessor", ".", "__init__", "(", "self", ",", "batch", ",", "outputs", ",", "dry_run", ")", "\n", "self", ".", "model", "=", "self", ".", "__prepare_model", "(", "model_json", ",", "model_weight", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.C3DProcessor.C3DProcessor.__prepare_model": [[16, 41], ["print", "print", "keras.models.model_from_json", "print", "keras.models.model_from_json.load_weights", "numpy.random.random", "print", "open().read", "keras.backend.function", "func", "open", "keras.backend.learning_phase"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__prepare_model", "(", "model_json", ",", "model_weight", ")", ":", "\n", "# override backend if provided as an input arg", "\n", "        ", "backend", "=", "'tf'", "\n", "print", "(", "\"[Info] Using backend={}\"", ".", "format", "(", "backend", ")", ")", "\n", "\n", "print", "(", "\"[Info] Reading model architecture...\"", ")", "\n", "model", "=", "model_from_json", "(", "open", "(", "model_json", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "# model = c3d_model.get_model(backend=backend)", "\n", "\n", "print", "(", "\"[Info] Loading model weights...\"", ")", "\n", "model", ".", "load_weights", "(", "model_weight", ")", "\n", "\n", "inp", "=", "model", ".", "input", "# input placeholder", "\n", "outputs", "=", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "if", "layer", ".", "name", "==", "\"fc6\"", "]", "# all layer outputs", "\n", "functors", "=", "[", "K", ".", "function", "(", "[", "inp", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "[", "out", "]", ")", "for", "out", "in", "outputs", "]", "# evaluation functions", "\n", "\n", "# Testing", "\n", "test", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "16", ",", "112", ",", "112", ",", "3", ")", ")", "\n", "layer_outs", "=", "[", "func", "(", "[", "test", ",", "1.", "]", ")", "for", "func", "in", "functors", "]", "\n", "print", "(", "layer_outs", ")", "\n", "\n", "# int_model = c3d_model.get_int_model(model=model, layer='fc6', backend=backend)", "\n", "int_model", "=", "functors", "[", "0", "]", "\n", "return", "int_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.C3DProcessor.C3DProcessor.process_batch": [[42, 49], ["numpy.zeros", "C3DProcessor.C3DProcessor.model", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "process_batch", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "dry_run", ":", "\n", "            ", "out_tensor", "=", "self", ".", "model", "(", "[", "self", ".", "local_batch", ",", "1", "]", ")", "[", "0", "]", "\n", "out_tensor", "=", "out_tensor", "/", "np", ".", "linalg", ".", "norm", "(", "out_tensor", ")", "\n", "", "else", ":", "\n", "            ", "out_tensor", "=", "np", ".", "zeros", "(", "(", "self", ".", "local_batch", ".", "shape", "[", "0", "]", ",", "10", ")", ")", "\n", "", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.C3DProcessor.C3DProcessor.put_queue": [[50, 58], ["range", "len", "len", "len", "C3DProcessor.C3DProcessor.outputs.put"], "methods", ["None"], ["", "def", "put_queue", "(", "self", ",", "output", ")", ":", "\n", "        ", "assert", "output", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "clip_names", ")", "==", "len", "(", "self", ".", "video_names", ")", "==", "len", "(", "self", ".", "targets", ")", ",", "\"# of elements are not same\"", "\n", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "outputs", ".", "put", "(", "{", "\"out_tensor\"", ":", "output", "[", "i", "]", ",", "\n", "\"clip_name\"", ":", "self", ".", "clip_names", "[", "i", "]", ",", "\n", "\"video_name\"", ":", "self", ".", "video_names", "[", "i", "]", ",", "\n", "\"anomaly\"", ":", "self", ".", "targets", "[", "i", "]", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__init__": [[11, 27], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ":", "queue", ".", "Queue", ",", "\n", "outputs", ":", "queue", ".", "Queue", ",", "\n", "dry_run", ":", "bool", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "dry_run", "=", "dry_run", "\n", "\n", "self", ".", "local_batch", "=", "[", "]", "\n", "self", ".", "clip_names", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "video_names", "=", "[", "]", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.run": [[28, 47], ["BatchProcessor.BatchProcessor.batch.qsize", "BatchProcessor.BatchProcessor.batch.get", "time.sleep", "len", "BatchProcessor.BatchProcessor.process_batch", "BatchProcessor.BatchProcessor.put_queue", "BatchProcessor.BatchProcessor.__clean_elements", "BatchProcessor.BatchProcessor.__kill_thread", "BatchProcessor.BatchProcessor.__extract_element"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.process_batch", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.put_queue", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__clean_elements", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__kill_thread", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__extract_element"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "if", "self", ".", "batch", ".", "qsize", "(", ")", ">", "0", ":", "\n", "                ", "element", "=", "self", ".", "batch", ".", "get", "(", ")", "\n", "if", "element", "is", "None", ":", "\n", "                    ", "self", ".", "__kill_thread", "(", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__extract_element", "(", "element", ")", "\n", "", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "local_batch", ")", "!=", "0", ":", "\n", "                ", "output", "=", "self", ".", "process_batch", "(", ")", "\n", "assert", "output", "is", "not", "None", ",", "\"Batch not processed properly\"", "\n", "self", ".", "put_queue", "(", "output", ")", "\n", "self", ".", "__clean_elements", "(", ")", "\n", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.process_batch": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "process_batch", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.put_queue": [[52, 55], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "put_queue", "(", "self", ",", "output", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__clean_elements": [[56, 61], ["None"], "methods", ["None"], ["", "def", "__clean_elements", "(", "self", ")", ":", "\n", "        ", "self", ".", "local_batch", "=", "[", "]", "\n", "self", ".", "clip_names", "=", "[", "]", "\n", "self", ".", "video_names", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__extract_element": [[62, 68], ["None"], "methods", ["None"], ["", "def", "__extract_element", "(", "self", ",", "element", ")", ":", "\n", "        ", "self", ".", "local_batch", "=", "element", "[", "\"inputClip\"", "]", "\n", "self", ".", "clip_names", "=", "element", "[", "\"clipName\"", "]", "\n", "self", ".", "video_names", "=", "element", "[", "\"videoName\"", "]", "\n", "self", ".", "targets", "=", "element", "[", "\"target\"", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.batch_process.BatchProcessor.BatchProcessor.__kill_thread": [[69, 76], ["BatchProcessor.BatchProcessor.outputs.put", "logger.info", "BatchProcessor.BatchProcessor.batch.empty", "logger.debug", "BatchProcessor.BatchProcessor.outputs.empty", "time.sleep"], "methods", ["None"], ["", "def", "__kill_thread", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "batch", ".", "empty", "(", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "\"thread will be killed but batch is not empty\"", ")", "\n", "", "while", "not", "self", ".", "outputs", ".", "empty", "(", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "outputs", ".", "put", "(", "None", ")", "\n", "logger", ".", "info", "(", "\"thread has been killed\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__init__": [[14, 35], ["threading.Thread.__init__", "dict", "addict.Dict", "logger.info", "dict", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outputs", ":", "queue", ".", "Queue", ",", "output_path", ":", "str", ",", "\n", "json_path", ":", "str", ",", "categories", ":", "dict", ",", "\n", "dry_run", ":", "bool", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "json_path", "=", "json_path", "\n", "self", ".", "categories", "=", "categories", "\n", "self", ".", "dry_run", "=", "dry_run", "\n", "self", ".", "clip_labels", "=", "dict", "(", "\n", "category_info", "=", "dict", "(", ")", ",", "\n", "abnormal_clips", "=", "dict", "(", ")", ",", "\n", "normal_clips", "=", "dict", "(", ")", ",", "\n", "all_clips", "=", "dict", "(", ")", ",", "\n", "video_clips", "=", "dict", "(", ")", "\n", ")", "\n", "self", ".", "clip_labels", "=", "Dict", "(", "self", ".", "clip_labels", ")", "\n", "self", ".", "output_elements", "=", "[", "]", "\n", "self", ".", "max_write", "=", "24", "\n", "\n", "logger", ".", "info", "(", "\"writer has been created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.run": [[36, 54], ["Writer.Writer.outputs.qsize", "Writer.Writer.__get_outputs", "len", "Writer.Writer.__write_outputs", "time.sleep", "logger.info", "Writer.Writer.__terminate", "Writer.Writer.outputs.qsize"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__get_outputs", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__write_outputs", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__terminate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "info_counter", "=", "0", "\n", "while", "True", ":", "\n", "            ", "info_counter", "+=", "1", "\n", "if", "self", ".", "outputs", ".", "qsize", "(", ")", ">", "0", ":", "\n", "                ", "outputs", ",", "finish", "=", "self", ".", "__get_outputs", "(", ")", "\n", "self", ".", "output_elements", "+=", "outputs", "\n", "if", "finish", ":", "\n", "                    ", "self", ".", "__terminate", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "len", "(", "self", ".", "output_elements", ")", "!=", "0", ":", "\n", "                ", "self", ".", "__write_outputs", "(", ")", "\n", "self", ".", "output_elements", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.5", ")", "\n", "", "if", "info_counter", "%", "50", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"# clip features wait to write: {}\"", ".", "format", "(", "self", ".", "outputs", ".", "qsize", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__get_outputs": [[55, 64], ["range", "min", "Writer.Writer.outputs.get", "local_outputs.append", "Writer.Writer.outputs.qsize"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get"], ["", "", "", "def", "__get_outputs", "(", "self", ")", ":", "\n", "        ", "local_outputs", "=", "[", "]", "\n", "finish", "=", "False", "\n", "for", "gi", "in", "range", "(", "min", "(", "self", ".", "outputs", ".", "qsize", "(", ")", ",", "24", ")", ")", ":", "\n", "            ", "element", "=", "self", ".", "outputs", ".", "get", "(", ")", "\n", "if", "element", "is", "None", ":", "\n", "                ", "finish", "=", "True", "\n", "", "local_outputs", ".", "append", "(", "element", ")", "\n", "", "return", "local_outputs", ",", "finish", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__terminate": [[65, 69], ["logger.info", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.utils.config.Config.dump"], ["", "def", "__terminate", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "json_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "clip_labels", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "logger", ".", "info", "(", "\"output writer has been killed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__write_outputs": [[70, 83], ["dict", "Writer.Writer.__append_clip_labels", "numpy.save", "os.path.join", "Writer.Writer.categories.items", "label.lower", "output_element[].lower"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__append_clip_labels"], ["", "def", "__write_outputs", "(", "self", ")", ":", "\n", "        ", "for", "output_element", "in", "self", ".", "output_elements", ":", "\n", "\n", "            ", "category", "=", "[", "value", "for", "label", ",", "value", "in", "self", ".", "categories", ".", "items", "(", ")", "\n", "if", "label", ".", "lower", "(", ")", "in", "output_element", "[", "\"clip_name\"", "]", ".", "lower", "(", ")", "]", "[", "0", "]", "\n", "\n", "item", "=", "dict", "(", "clip_name", "=", "output_element", "[", "\"clip_name\"", "]", ",", "\n", "category_name", "=", "category", "[", "0", "]", ",", "\n", "category", "=", "category", "[", "1", "]", ",", "\n", "anomaly", "=", "output_element", "[", "\"anomaly\"", "]", ")", "\n", "self", ".", "__append_clip_labels", "(", "item", ",", "output_element", ")", "\n", "if", "not", "self", ".", "dry_run", ":", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "output_element", "[", "\"clip_name\"", "]", ")", ",", "output_element", "[", "\"out_tensor\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.output_writer.Writer.Writer.__append_clip_labels": [[84, 95], ["Writer.Writer.clip_labels.video_clips[].append", "Writer.Writer.clip_labels.video_clips[].sort"], "methods", ["None"], ["", "", "", "def", "__append_clip_labels", "(", "self", ",", "item", ",", "output_element", ")", ":", "\n", "        ", "self", ".", "clip_labels", ".", "all_clips", "[", "output_element", "[", "\"clip_name\"", "]", "]", "=", "item", "\n", "if", "output_element", "[", "\"anomaly\"", "]", ":", "\n", "            ", "self", ".", "clip_labels", ".", "abnormal_clips", "[", "output_element", "[", "\"clip_name\"", "]", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "self", ".", "clip_labels", ".", "normal_clips", "[", "output_element", "[", "\"clip_name\"", "]", "]", "=", "item", "\n", "\n", "", "if", "not", "output_element", "[", "\"video_name\"", "]", "in", "self", ".", "clip_labels", ".", "video_clips", ":", "\n", "            ", "self", ".", "clip_labels", ".", "video_clips", "[", "output_element", "[", "\"video_name\"", "]", "]", "=", "[", "]", "\n", "", "self", ".", "clip_labels", ".", "video_clips", "[", "output_element", "[", "\"video_name\"", "]", "]", ".", "append", "(", "output_element", "[", "\"clip_name\"", "]", ")", "\n", "self", ".", "clip_labels", ".", "video_clips", "[", "output_element", "[", "\"video_name\"", "]", "]", ".", "sort", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.AverageMeter.__init__": [[57, 59], ["test_models.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.AverageMeter.reset": [[60, 65], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.AverageMeter.update": [[66, 71], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.accuracy": [[73, 85], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "         ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.parse_shift_option_from_log_name": [[87, 96], ["log_name.split", "enumerate", "int", "strings[].replace"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "parse_shift_option_from_log_name", "(", "log_name", ")", ":", "\n", "    ", "if", "'shift'", "in", "log_name", ":", "\n", "        ", "strings", "=", "log_name", ".", "split", "(", "'_'", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "if", "'shift'", "in", "s", ":", "\n", "                ", "break", "\n", "", "", "return", "True", ",", "int", "(", "strings", "[", "i", "]", ".", "replace", "(", "'shift'", ",", "''", ")", ")", ",", "strings", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_models.eval_video": [[215, 254], ["net.eval", "torch.no_grad", "torch.no_grad", "label.numel", "data.view", "net", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.data.cpu().numpy().copy", "data.size", "data.size", "data_in.view.view", "torch.nn.functional.softmax", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.reshape().mean().reshape", "data_in.view.size", "data_in.view.size", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.data.cpu().numpy", "ValueError", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.data.cpu", "rst.reshape().mean().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax"], ["def", "eval_video", "(", "video_data", ",", "net", ",", "this_test_segments", ",", "modality", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "i", ",", "data", ",", "label", "=", "video_data", "\n", "batch_size", "=", "label", ".", "numel", "(", ")", "\n", "num_crop", "=", "args", ".", "test_crops", "\n", "if", "args", ".", "dense_sample", ":", "\n", "            ", "num_crop", "*=", "10", "# 10 clips for testing when using dense sample", "\n", "\n", "", "if", "args", ".", "twice_sample", ":", "\n", "            ", "num_crop", "*=", "2", "\n", "\n", "", "if", "modality", "==", "'RGB'", ":", "\n", "            ", "length", "=", "3", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "            ", "length", "=", "10", "\n", "", "elif", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "length", "=", "18", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown modality \"", "+", "modality", ")", "\n", "\n", "", "data_in", "=", "data", ".", "view", "(", "-", "1", ",", "length", ",", "data", ".", "size", "(", "2", ")", ",", "data", ".", "size", "(", "3", ")", ")", "\n", "if", "is_shift", ":", "\n", "            ", "data_in", "=", "data_in", ".", "view", "(", "batch_size", "*", "num_crop", ",", "this_test_segments", ",", "length", ",", "data_in", ".", "size", "(", "2", ")", ",", "data_in", ".", "size", "(", "3", ")", ")", "\n", "", "rst", "=", "net", "(", "data_in", ")", "\n", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_crop", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "if", "args", ".", "softmax", ":", "\n", "# take the softmax to normalize the output to probability", "\n", "            ", "rst", "=", "F", ".", "softmax", "(", "rst", ",", "dim", "=", "1", ")", "\n", "\n", "", "rst", "=", "rst", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "if", "net", ".", "module", ".", "is_shift", ":", "\n", "            ", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_class", ")", "\n", "", "else", ":", "\n", "            ", "rst", "=", "rst", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "batch_size", ",", "num_class", ")", ")", "\n", "\n", "", "return", "i", ",", "rst", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.feature_extractor.TSMFeatureExtractor.__init__": [[19, 97], ["feature_extractor.parse_shift_option_from_log_name", "print", "feature_extract.models.tsm.ops.models.TSN", "torch.load", "replace_dict.items", "feature_extractor.TSMFeatureExtractor.net.load_state_dict", "torchvision.transforms.Compose", "feature_extractor.TSMFeatureExtractor.net.cuda", "feature_extractor.TSMFeatureExtractor.net.eval", "[].split", "make_temporal_pool", "torchvision.transforms.Compose", "list", "base_dict.pop", "torchvision.transforms.Compose", "Stack", "ToTorchFormatTensor", "GroupNormalize", "k.split", "torch.load.items", "GroupScale", "GroupCenterCrop", "torchvision.transforms.Compose", "feature_extractor.TSMFeatureExtractor.weightPath.split", "GroupFullResSample", "torchvision.transforms.Compose", "ValueError", "GroupOverSample", "GroupOverSample"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_video.parse_shift_option_from_log_name", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["    ", "def", "__init__", "(", "self", ",", "weightPath", ",", "segments", ",", "crops", ",", "fullSize", "=", "True", ")", ":", "\n", "        ", "self", ".", "weightPath", "=", "weightPath", "\n", "self", ".", "segments", "=", "segments", "\n", "self", ".", "crops", "=", "crops", "\n", "self", ".", "fullSize", "=", "fullSize", "\n", "\n", "self", ".", "is_shift", ",", "shift_div", ",", "shift_place", "=", "parse_shift_option_from_log_name", "(", "self", ".", "weightPath", ")", "\n", "if", "'RGB'", "in", "self", ".", "weightPath", ":", "\n", "            ", "self", ".", "modality", "=", "'RGB'", "\n", "", "else", ":", "\n", "            ", "self", ".", "modality", "=", "'Flow'", "\n", "", "this_arch", "=", "self", ".", "weightPath", ".", "split", "(", "'TSM_'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", "\n", "self", ".", "num_class", "=", "400", "\n", "print", "(", "'=> shift: {}, shift_div: {}, shift_place: {}'", ".", "format", "(", "self", ".", "is_shift", ",", "shift_div", ",", "shift_place", ")", ")", "\n", "self", ".", "net", "=", "TSN", "(", "self", ".", "num_class", ",", "self", ".", "segments", "if", "self", ".", "is_shift", "else", "1", ",", "self", ".", "modality", ",", "\n", "base_model", "=", "this_arch", ",", "\n", "consensus_type", "=", "\"avg\"", ",", "\n", "img_feature_dim", "=", "256", ",", "\n", "pretrain", "=", "\"imagenet\"", ",", "\n", "is_shift", "=", "self", ".", "is_shift", ",", "shift_div", "=", "shift_div", ",", "shift_place", "=", "shift_place", ",", "\n", "non_local", "=", "'_nl'", "in", "self", ".", "weightPath", ",", "\n", ")", "\n", "\n", "if", "'tpool'", "in", "self", ".", "weightPath", ":", "\n", "            ", "from", "ops", ".", "temporal_shift", "import", "make_temporal_pool", "\n", "make_temporal_pool", "(", "self", ".", "net", ".", "base_model", ",", "self", ".", "segments", ")", "# since DataParallel", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "weightPath", ")", "\n", "checkpoint", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "base_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "list", "(", "checkpoint", ".", "items", "(", ")", ")", "}", "\n", "replace_dict", "=", "{", "'base_model.classifier.weight'", ":", "'new_fc.weight'", ",", "\n", "'base_model.classifier.bias'", ":", "'new_fc.bias'", ",", "\n", "}", "\n", "\n", "for", "k", ",", "v", "in", "replace_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "base_dict", ":", "\n", "                ", "base_dict", "[", "v", "]", "=", "base_dict", ".", "pop", "(", "k", ")", "\n", "\n", "", "", "self", ".", "net", ".", "load_state_dict", "(", "base_dict", ")", "\n", "\n", "input_size", "=", "self", ".", "net", ".", "scale_size", "if", "self", ".", "fullSize", "else", "self", ".", "net", ".", "input_size", "\n", "if", "self", ".", "crops", "==", "1", ":", "\n", "            ", "cropping", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "self", ".", "net", ".", "scale_size", ")", ",", "\n", "GroupCenterCrop", "(", "input_size", ")", ",", "\n", "]", ")", "\n", "", "elif", "self", ".", "crops", "==", "3", ":", "# do not flip, so only 5 crops", "\n", "            ", "cropping", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupFullResSample", "(", "input_size", ",", "self", ".", "net", ".", "scale_size", ",", "flip", "=", "False", ")", "\n", "]", ")", "\n", "", "elif", "self", ".", "crops", "==", "5", ":", "# do not flip, so only 5 crops", "\n", "            ", "cropping", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupOverSample", "(", "input_size", ",", "self", ".", "net", ".", "scale_size", ",", "flip", "=", "False", ")", "\n", "]", ")", "\n", "", "elif", "self", ".", "crops", "==", "10", ":", "\n", "            ", "cropping", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupOverSample", "(", "input_size", ",", "self", ".", "net", ".", "scale_size", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only 1, 5, 10 crops are supported while we got {}\"", ".", "format", "(", "self", ".", "crops", ")", ")", "\n", "\n", "", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "cropping", ",", "\n", "Stack", "(", "roll", "=", "(", "this_arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "this_arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "GroupNormalize", "(", "self", ".", "net", ".", "input_mean", ",", "self", ".", "net", ".", "input_std", ")", "]", ")", "\n", "\n", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "self", ".", "length", "=", "3", "\n", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "self", ".", "length", "=", "10", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "self", ".", "length", "=", "18", "\n", "\n", "", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.feature_extractor.TSMFeatureExtractor.feature_extract": [[98, 118], ["len", "len", "torch.no_grad", "torch.stack", "data.cuda.cuda.cuda", "data.cuda.cuda.view", "feature_extractor.TSMFeatureExtractor.net", "features.reshape().mean.reshape().mean.reshape().mean", "data.cuda.cuda.append", "data.cuda.cuda.size", "data.cuda.cuda.size", "data_in.view.view.view", "torch.tensor", "data_in.view.view.size", "data_in.view.view.size", "features.reshape().mean.reshape().mean.reshape", "feature_extractor.TSMFeatureExtractor.transform", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.transform"], ["", "def", "feature_extract", "(", "self", ",", "inputBatch", ")", ":", "\n", "        ", "assert", "len", "(", "inputBatch", "[", "0", "]", ")", "==", "self", ".", "segments", ",", "\"{} frames should be in clip not {}\"", ".", "format", "(", "self", ".", "segments", ",", "\n", "len", "(", "inputBatch", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", "=", "[", "]", "\n", "for", "inputFrames", "in", "inputBatch", ":", "\n", "                ", "data", ".", "append", "(", "torch", ".", "tensor", "(", "self", ".", "transform", "(", "inputFrames", ")", ")", ")", "\n", "# data = self.transform(inputBatch)", "\n", "", "data", "=", "torch", ".", "stack", "(", "data", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "data_in", "=", "data", ".", "view", "(", "-", "1", ",", "self", ".", "length", ",", "data", ".", "size", "(", "2", ")", ",", "data", ".", "size", "(", "3", ")", ")", "\n", "\n", "if", "self", ".", "is_shift", ":", "\n", "                ", "data_in", "=", "data_in", ".", "view", "(", "len", "(", "inputBatch", ")", "*", "self", ".", "crops", ",", "self", ".", "segments", ",", "\n", "self", ".", "length", ",", "data_in", ".", "size", "(", "2", ")", ",", "data_in", ".", "size", "(", "3", ")", ")", "\n", "\n", "", "rst", ",", "base_out", ",", "features", "=", "self", ".", "net", "(", "data_in", ")", "\n", "features", "=", "features", ".", "reshape", "(", "len", "(", "inputBatch", ")", ",", "self", ".", "crops", ",", "self", ".", "segments", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.feature_extractor.parse_shift_option_from_log_name": [[7, 16], ["log_name.split", "enumerate", "int", "strings[].replace"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["def", "parse_shift_option_from_log_name", "(", "log_name", ")", ":", "\n", "    ", "if", "'shift'", "in", "log_name", ":", "\n", "        ", "strings", "=", "log_name", ".", "split", "(", "'_'", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "if", "'shift'", "in", "s", ":", "\n", "                ", "break", "\n", "", "", "return", "True", ",", "int", "(", "strings", "[", "i", "]", ".", "replace", "(", "'shift'", ",", "''", ")", ")", ",", "strings", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.main": [[27, 217], ["opts.parser.parse_args", "ops.dataset_config.return_dataset", "print", "main.check_rootfolders", "ops.models.TSN", "torch.nn.DataParallel().cuda.get_optim_policies", "torch.nn.DataParallel().cuda.get_augmentation", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "tensorboardX.SummaryWriter", "range", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "torch.load.items", "model.state_dict.items", "set", "set", "print", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "ops.temporal_shift.make_temporal_pool", "ops.transforms.GroupNormalize", "ops.transforms.IdentityTransform", "ops.dataset.TSNDataSet", "ops.dataset.TSNDataSet", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main.validate", "os.path.join", "open", "f.write", "main.adjust_learning_rate", "main.train", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "ops.temporal_shift.make_temporal_pool", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torch.load.pop", "list", "list", "print", "os.path.join", "str", "os.path.join", "main.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main.save_checkpoint", "print", "replace_dict.append", "print", "replace_dict.append", "torch.load.keys", "model.state_dict.keys", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "k.replace", "k.replace", "torch.load.items", "torch.load.items", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "k.replace", "k.replace", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "ops.transforms.GroupScale", "ops.transforms.GroupCenterCrop", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "int"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_dataset", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.check_rootfolders", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.get_optim_policies", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.get_augmentation", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.validate", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.adjust_learning_rate", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.validate", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "full_arch_name", "=", "args", ".", "arch", "\n", "if", "args", ".", "shift", ":", "\n", "        ", "full_arch_name", "+=", "'_shift{}_{}'", ".", "format", "(", "args", ".", "shift_div", ",", "args", ".", "shift_place", ")", "\n", "", "if", "args", ".", "temporal_pool", ":", "\n", "        ", "full_arch_name", "+=", "'_tpool'", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "'TSM'", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "full_arch_name", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "if", "args", ".", "pretrain", "!=", "'imagenet'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "pretrain", ")", "\n", "", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense'", "\n", "", "if", "args", ".", "non_local", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "model", "=", "TSN", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "img_feature_dim", "=", "args", ".", "img_feature_dim", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "pretrain", "=", "args", ".", "pretrain", ",", "\n", "is_shift", "=", "args", ".", "shift", ",", "shift_div", "=", "args", ".", "shift_div", ",", "shift_place", "=", "args", ".", "shift_place", ",", "\n", "fc_lr5", "=", "not", "(", "args", ".", "tune_from", "and", "args", ".", "dataset", "in", "args", ".", "tune_from", ")", ",", "\n", "temporal_pool", "=", "args", ".", "temporal_pool", ",", "\n", "non_local", "=", "args", ".", "non_local", ")", "\n", "\n", "crop_size", "=", "model", ".", "crop_size", "\n", "scale_size", "=", "model", ".", "scale_size", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", "flip", "=", "False", "if", "'something'", "in", "args", ".", "dataset", "or", "'jester'", "in", "args", ".", "dataset", "else", "True", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "# early temporal pool so that we can load the state_dict", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tune_from", ":", "\n", "        ", "print", "(", "(", "\"=> fine-tuning from '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n", "sd", "=", "torch", ".", "load", "(", "args", ".", "tune_from", ")", "\n", "sd", "=", "sd", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "replace_dict", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "model_dict", ":", "\n", "                ", "print", "(", "'=> Load after remove .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ",", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "sd", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "sd", ":", "\n", "                ", "print", "(", "'=> Load after adding .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ",", "k", ")", ")", "\n", "\n", "", "", "for", "k", ",", "k_new", "in", "replace_dict", ":", "\n", "            ", "sd", "[", "k_new", "]", "=", "sd", ".", "pop", "(", "k", ")", "\n", "", "keys1", "=", "set", "(", "list", "(", "sd", ".", "keys", "(", ")", ")", ")", "\n", "keys2", "=", "set", "(", "list", "(", "model_dict", ".", "keys", "(", ")", ")", ")", "\n", "set_diff", "=", "(", "keys1", "-", "keys2", ")", "|", "(", "keys2", "-", "keys1", ")", "\n", "print", "(", "'#### Notice: keys that failed to load: {}'", ".", "format", "(", "set_diff", ")", ")", "\n", "if", "args", ".", "dataset", "not", "in", "args", ".", "tune_from", ":", "# new dataset", "\n", "            ", "print", "(", "'=> New dataset, do not load fc weights'", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "", "if", "args", ".", "modality", "==", "'Flow'", "and", "'Flow'", "not", "in", "args", ".", "tune_from", ":", "\n", "            ", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'conv1.weight'", "not", "in", "k", "}", "\n", "", "model_dict", ".", "update", "(", "sd", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "if", "args", ".", "temporal_pool", "and", "not", "args", ".", "resume", ":", "\n", "        ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "if", "args", ".", "modality", "!=", "'RGBDiff'", ":", "\n", "        ", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.train": [[219, 283], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "ops.utils.AverageMeter.update", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "ops.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "torch.nn.utils.clip_grad_norm_", "print", "log.write", "log.flush", "time.time", "model.parameters", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.accuracy", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.InplaceShift.backward", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "            ", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.validate": [[285, 340], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "target.cuda.cuda", "model", "criterion", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "print", "time.time", "len", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.accuracy", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.save_checkpoint": [[342, 347], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.adjust_learning_rate": [[349, 364], ["sum", "np.array", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.main.check_rootfolders": [[366, 375], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_video.accuracy": [[58, 70], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "         ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tsm.test_video.parse_shift_option_from_log_name": [[72, 81], ["log_name.split", "enumerate", "int", "strings[].replace"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "parse_shift_option_from_log_name", "(", "log_name", ")", ":", "\n", "    ", "if", "'shift'", "in", "log_name", ":", "\n", "        ", "strings", "=", "log_name", ".", "split", "(", "'_'", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "if", "'shift'", "in", "s", ":", "\n", "                ", "break", "\n", "", "", "return", "True", ",", "int", "(", "strings", "[", "i", "]", ".", "replace", "(", "'shift'", ",", "''", ")", ")", ",", "strings", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_kinetics.vid2jpg": [[16, 41], ["os.path.splitext", "os.path.join", "os.path.join", "subprocess.call", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "print", "os.path.join"], "function", ["None"], ["def", "vid2jpg", "(", "file_name", ",", "class_path", ",", "dst_class_path", ")", ":", "\n", "    ", "if", "'.mp4'", "not", "in", "file_name", ":", "\n", "        ", "return", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'img_00001.jpg'", ")", ")", ":", "\n", "                ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'*** convert has been done: {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "        ", "print", "(", "dst_directory_path", ")", "\n", "return", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -threads 1 -vf scale=-1:331 -q:v 0 \\\"{}/img_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "# print(cmd)", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ",", "\n", "stdout", "=", "subprocess", ".", "DEVNULL", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_kinetics.class_process": [[43, 66], ["print", "os.path.join", "os.path.join", "os.listdir", "os.listdir.sort", "multiprocessing.Pool", "partial", "tqdm.tqdm", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.path.isdir", "print", "os.path.exists", "os.mkdir", "multiprocessing.Pool.imap_unordered", "len"], "function", ["None"], ["", "def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "    ", "print", "(", "'*'", "*", "20", ",", "class_name", ",", "'*'", "*", "20", ")", "\n", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "        ", "print", "(", "'*** is not a dir {}'", ".", "format", "(", "class_path", ")", ")", "\n", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "vid_list", "=", "os", ".", "listdir", "(", "class_path", ")", "\n", "vid_list", ".", "sort", "(", ")", "\n", "p", "=", "Pool", "(", "n_thread", ")", "\n", "from", "functools", "import", "partial", "\n", "worker", "=", "partial", "(", "vid2jpg", ",", "class_path", "=", "class_path", ",", "dst_class_path", "=", "dst_class_path", ")", "\n", "for", "_", "in", "tqdm", "(", "p", ".", "imap_unordered", "(", "worker", ",", "vid_list", ")", ",", "total", "=", "len", "(", "vid_list", ")", ")", ":", "\n", "        ", "pass", "\n", "# p.map(worker, vid_list)", "\n", "", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split": [[14, 18], ["range", "len"], "function", ["None"], ["def", "split", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.extract": [[20, 26], ["os.system"], "function", ["None"], ["", "", "def", "extract", "(", "video", ",", "tmpl", "=", "'%06d.jpg'", ")", ":", "\n", "# os.system(f'ffmpeg -i {VIDEO_ROOT}/{video} -vf -threads 1 -vf scale=-1:256 -q:v 0 '", "\n", "#           f'{FRAME_ROOT}/{video[:-5]}/{tmpl}')", "\n", "    ", "cmd", "=", "'ffmpeg -i \\\"{}/{}\\\" -threads 1 -vf scale=-1:256 -q:v 0 \\\"{}/{}/%06d.jpg\\\"'", ".", "format", "(", "VIDEO_ROOT", ",", "video", ",", "\n", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.target": [[28, 32], ["os.makedirs", "vid2img_sthv2.extract", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.extract"], ["", "def", "target", "(", "video_list", ")", ":", "\n", "    ", "for", "video", "in", "video_list", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "extract", "(", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupScale.__init__": [[117, 119], ["torchvision.transforms.Scale"], "methods", ["None"], ["if", "args", ".", "dataset", "not", "in", "args", ".", "tune_from", ":", "# new dataset", "\n", "            ", "print", "(", "'=> New dataset, do not load fc weights'", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupScale.__call__": [[120, 122], ["main.GroupScale.worker"], "methods", ["None"], ["", "if", "args", ".", "modality", "==", "'Flow'", "and", "'Flow'", "not", "in", "args", ".", "tune_from", ":", "\n", "            ", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'conv1.weight'", "not", "in", "k", "}", "\n", "", "model_dict", ".", "update", "(", "sd", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupCenterCrop.__init__": [[125, 127], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["", "if", "args", ".", "temporal_pool", "and", "not", "args", ".", "resume", ":", "\n", "        ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupCenterCrop.__call__": [[128, 130], ["main.GroupCenterCrop.worker"], "methods", ["None"], ["", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.Stack.__init__": [[134, 136], ["None"], "methods", ["None"], ["        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.Stack.__call__": [[137, 145], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.ToTorchFormatTensor.__init__": [[151, 153], ["None"], "methods", ["None"], ["]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.ToTorchFormatTensor.__call__": [[154, 166], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.from_numpy().permute().contiguous", "torch.from_numpy().permute().contiguous", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "len", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupNormalize.__init__": [[169, 172], ["None"], "methods", ["None"], ["batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.GroupNormalize.__call__": [[173, 181], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.torch2tvm_module": [[21, 39], ["torch_module.eval", "torch.no_grad", "torch.no_grad", "enumerate", "io.BytesIO", "torch.onnx.export", "torch.onnx.export", "torch_module", "io.BytesIO.seek", "onnx.load_model", "tvm.relay.frontend.from_onnx", "tvm.relay.frontend.from_onnx", "tvm.relay.frontend.from_onnx", "tvm.relay.build_config", "tvm.relay.build_config", "tvm.relay.build_config", "tvm.relay.build", "tvm.relay.build", "tvm.relay.build", "input_names.append", "str", "str", "range", "len"], "function", ["None"], ["\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "\n", "best_prec1", "=", "0", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "full_arch_name", "=", "args", ".", "arch", "\n", "if", "args", ".", "shift", ":", "\n", "        ", "full_arch_name", "+=", "'_shift{}_{}'", ".", "format", "(", "args", ".", "shift_div", ",", "args", ".", "shift_place", ")", "\n", "", "if", "args", ".", "temporal_pool", ":", "\n", "        ", "full_arch_name", "+=", "'_tpool'", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "'TSM'", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "full_arch_name", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.torch2executor": [[41, 71], ["tvm.create", "tvm.relay.load_param_dict.items", "os.path.exists", "os.path.exists", "os.path.exists", "tvm.module.load", "tvm.module.load", "tvm.module.load", "tvm.relay.load_param_dict", "tvm.relay.load_param_dict", "tvm.relay.load_param_dict", "main.torch2tvm_module", "tvm.module.load.export_library", "target.startswith", "tvm.gpu", "tvm.gpu", "tvm.gpu", "tvm.cpu", "tvm.cpu", "tvm.cpu", "graph_runtime.create.set_input", "enumerate", "graph_runtime.create.run", "tuple", "open", "f.read", "bytearray", "open", "f.write", "open", "f.write", "graph_runtime.create.set_input", "open().read", "tvm.relay.save_param_dict", "tvm.relay.save_param_dict", "tvm.relay.save_param_dict", "graph_runtime.create.get_output", "range", "open", "len"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.torch2tvm_module", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run"], ["if", "args", ".", "pretrain", "!=", "'imagenet'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "pretrain", ")", "\n", "", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense'", "\n", "", "if", "args", ".", "non_local", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "model", "=", "TSN", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "img_feature_dim", "=", "args", ".", "img_feature_dim", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "pretrain", "=", "args", ".", "pretrain", ",", "\n", "is_shift", "=", "args", ".", "shift", ",", "shift_div", "=", "args", ".", "shift_div", ",", "shift_place", "=", "args", ".", "shift_place", ",", "\n", "fc_lr5", "=", "not", "(", "args", ".", "tune_from", "and", "args", ".", "dataset", "in", "args", ".", "tune_from", ")", ",", "\n", "temporal_pool", "=", "args", ".", "temporal_pool", ",", "\n", "non_local", "=", "args", ".", "non_local", ")", "\n", "\n", "crop_size", "=", "model", ".", "crop_size", "\n", "scale_size", "=", "model", ".", "scale_size", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.get_executor": [[73, 97], ["mobilenet_v2_tsm.MobileNetV2", "mobilenet_v2_tsm.MobileNetV2.load_state_dict", "main.torch2executor", "os.path.exists", "print", "urllib.request.urlretrieve", "torch.load", "torch.load", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.torch2executor"], ["\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "# early temporal pool so that we can load the state_dict", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tune_from", ":", "\n", "        ", "print", "(", "(", "\"=> fine-tuning from '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.transform": [[99, 106], ["cv2.resize", "numpy.transpose", "numpy.expand_dims"], "function", ["None"], ["sd", "=", "sd", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "replace_dict", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "model_dict", ":", "\n", "                ", "print", "(", "'=> Load after remove .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ",", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.get_transform": [[183, 195], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "main.GroupScale", "main.GroupCenterCrop", "main.Stack", "main.ToTorchFormatTensor", "main.GroupNormalize"], "function", ["None"], ["        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.process_output": [[229, 255], ["history.append"], "function", ["None"], ["        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.main": [[258, 383], ["print", "cv2.VideoCapture", "print", "cv2.VideoCapture.set", "cv2.VideoCapture.set", "cv2.namedWindow", "cv2.resizeWindow", "cv2.moveWindow", "cv2.setWindowTitle", "print", "main.get_transform", "print", "main.get_executor", "print", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "tvm.nd.empty", "cv2.VideoCapture.read", "cv2.resize", "cv2.putText", "cv2.putText", "numpy.concatenate", "cv2.imshow", "cv2.waitKey", "time.time", "get_transform.", "torch.autograd.Variable", "torch.autograd.Variable", "tvm.nd.array", "tvm.nd.array", "tvm.nd.array", "main.torch2executor.executor", "isinstance", "main.process_output", "time.time", "print", "numpy.zeros().astype", "time.time", "time.time", "transform.view", "torch.autograd.Variable.detach().numpy", "feat.asnumpy().reshape", "feat.asnumpy().reshape.max", "print", "history_logit.append", "sum", "int", "int", "ord", "print", "PIL.Image.fromarray().convert", "transform.size", "transform.size", "numpy.exp", "numpy.sum", "max", "max", "numpy.argmax", "feat.asnumpy", "numpy.argmax", "numpy.zeros", "ord", "ord", "print", "cv2.setWindowProperty", "cv2.setWindowProperty", "torch.autograd.Variable.detach", "feat.asnumpy", "numpy.exp", "numpy.argmax", "feat.asnumpy", "PIL.Image.fromarray", "feat.asnumpy"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.get_transform", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.get_executor", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.process_output"], ["\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n", "\n", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n", "\n", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n", "\n", "", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.InvertedResidual.__init__": [[28, 59], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.InvertedResidual.forward": [[61, 66], ["mobilenet_v2_tsm.InvertedResidual.conv", "mobilenet_v2_tsm.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.InvertedResidualWithShift.__init__": [[68, 91], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidualWithShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "assert", "expand_ratio", ">", "1", "\n", "\n", "hidden_dim", "=", "int", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "assert", "self", ".", "use_res_connect", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.InvertedResidualWithShift.forward": [[93, 97], ["x.size", "mobilenet_v2_tsm.InvertedResidualWithShift.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "shift_buffer", ")", ":", "\n", "        ", "c", "=", "x", ".", "size", "(", "1", ")", "\n", "x1", ",", "x2", "=", "x", "[", ":", ",", ":", "c", "//", "8", "]", ",", "x", "[", ":", ",", "c", "//", "8", ":", "]", "\n", "return", "x", "+", "self", ".", "conv", "(", "torch", ".", "cat", "(", "(", "shift_buffer", ",", "x2", ")", ",", "dim", "=", "1", ")", ")", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.MobileNetV2.__init__": [[100, 144], ["torch.Module.__init__", "mobilenet_v2_tsm.MobileNetV2.features.append", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "mobilenet_v2_tsm.MobileNetV2._initialize_weights", "mobilenet_v2_tsm.make_divisible", "mobilenet_v2_tsm.conv_bn", "range", "mobilenet_v2_tsm.conv_1x1_bn", "mobilenet_v2_tsm.make_divisible", "mobilenet_v2_tsm.MobileNetV2.features.append", "mobilenet_v2_tsm.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.make_divisible", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_bn", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_1x1_bn", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)  # first channel is always 32!", "\n", "self", ".", "last_channel", "=", "make_divisible", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "global_idx", "=", "0", "\n", "shift_block_idx", "=", "[", "2", ",", "4", ",", "5", ",", "7", ",", "8", ",", "9", ",", "11", ",", "12", ",", "14", ",", "15", "]", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "block", "=", "InvertedResidualWithShift", "if", "global_idx", "in", "shift_block_idx", "else", "InvertedResidual", "\n", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "global_idx", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "block", "=", "InvertedResidualWithShift", "if", "global_idx", "in", "shift_block_idx", "else", "InvertedResidual", "\n", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "global_idx", "+=", "1", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.MobileNetV2.forward": [[145, 158], ["f.mean().mean", "mobilenet_v2_tsm.MobileNetV2.classifier", "isinstance", "f", "out_buffer.append", "f", "f.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "shift_buffer", ")", ":", "\n", "        ", "shift_buffer_idx", "=", "0", "\n", "out_buffer", "=", "[", "]", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "if", "isinstance", "(", "f", ",", "InvertedResidualWithShift", ")", ":", "\n", "                ", "x", ",", "s", "=", "f", "(", "x", ",", "shift_buffer", "[", "shift_buffer_idx", "]", ")", "\n", "shift_buffer_idx", "+=", "1", "\n", "out_buffer", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "", "", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "(", "x", ",", "*", "out_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.MobileNetV2._initialize_weights": [[159, 173], ["mobilenet_v2_tsm.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.conv_bn": [[6, 11], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.conv_1x1_bn": [[14, 19], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.make_divisible": [[22, 25], ["int", "np.ceil"], "function", ["None"], ["", "def", "make_divisible", "(", "x", ",", "divisible_by", "=", "8", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "return", "int", "(", "np", ".", "ceil", "(", "x", "*", "1.", "/", "divisible_by", ")", "*", "divisible_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.mobilenet_v2_tsm.mobilenet_v2_140": [[175, 177], ["mobilenet_v2_tsm.MobileNetV2"], "function", ["None"], ["", "", "", "", "def", "mobilenet_v2_140", "(", ")", ":", "\n", "    ", "return", "MobileNetV2", "(", "width_mult", "=", "1.4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomCrop.__init__": [[11, 16], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomCrop.__call__": [[17, 35], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupCenterCrop.__init__": [[38, 40], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupCenterCrop.__call__": [[41, 43], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomHorizontalFlip.__init__": [[48, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomHorizontalFlip.__call__": [[51, 61], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "return", "img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupNormalize.__init__": [[64, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupNormalize.__call__": [[68, 76], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupScale.__init__": [[87, 89], ["torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupScale.__call__": [[90, 92], ["transforms.GroupScale.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupOverSample.__init__": [[95, 103], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupOverSample.__call__": [[104, 131], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.extend", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                ", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupFullResSample.__init__": [[134, 142], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupFullResSample.__call__": [[143, 177], ["list", "list.append", "list.append", "list.append", "list", "transforms.GroupFullResSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                    ", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                        ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop.__init__": [[181, 188], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop.__call__": [[189, 198], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop._sample_crop_size": [[199, 222], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop._sample_fix_offset": [[223, 226], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupMultiScaleCrop.fill_fix_offset": [[227, 251], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomSizedCrop.__init__": [[260, 263], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.GroupRandomSizedCrop.__call__": [[264, 298], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.Stack.__init__": [[302, 304], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.Stack.__call__": [[305, 313], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.ToTorchFormatTensor.__init__": [[318, 320], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.ToTorchFormatTensor.__call__": [[321, 333], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.ByteStorage.from_buffer", "len", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.transforms.IdentityTransform.__call__": [[337, 339], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.__init__": [[14, 80], ["torch.nn.Module.__init__", "models.TSN._prepare_base_model", "models.TSN._prepare_tsn", "feature_extract.models.tsm.ops.basic_ops.ConsensusModule", "ValueError", "print", "print", "models.TSN._construct_flow_model", "print", "torch.nn.Softmax", "models.TSN.partialBN", "print", "models.TSN._construct_diff_model", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._prepare_base_model", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._prepare_tsn", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._construct_flow_model", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._construct_diff_model"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet101'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "img_feature_dim", "=", "256", ",", "\n", "crop_num", "=", "1", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "\n", "is_shift", "=", "False", ",", "shift_div", "=", "8", ",", "shift_place", "=", "'blockres'", ",", "fc_lr5", "=", "False", ",", "\n", "temporal_pool", "=", "False", ",", "non_local", "=", "False", ")", ":", "\n", "        ", "super", "(", "TSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "# the dimension of the CNN feature to represent each frame", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "self", ".", "is_shift", "=", "is_shift", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "self", ".", "shift_place", "=", "shift_place", "\n", "self", ".", "base_model_name", "=", "base_model", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "temporal_pool", "=", "temporal_pool", "\n", "self", ".", "non_local", "=", "non_local", "\n", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "", "if", "print_spec", ":", "\n", "            ", "print", "(", "(", "\"\"\"\n    Initializing TSN with base model: {}.\n    TSN Configurations:\n        input_modality:     {}\n        num_segments:       {}\n        new_length:         {}\n        consensus_module:   {}\n        dropout_ratio:      {}\n        img_feature_dim:    {}\n            \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ",", "self", ".", "img_feature_dim", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_base_model", "(", "base_model", ")", "\n", "\n", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "print", "(", "\"Converting the ImageNet model to a flow init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_flow_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"Done. Flow model ready...\"", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "print", "(", "\"Converting the ImageNet model to RGB+Diff init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_diff_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"Done. RGBDiff model ready.\"", ")", "\n", "\n", "", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._prepare_tsn": [[81, 99], ["getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "", "", "return", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._prepare_base_model": [[100, 171], ["print", "torch.nn.AdaptiveAvgPool2d", "getattr", "print", "make_temporal_shift", "print", "make_non_local", "mobilenet_v2", "torch.nn.AdaptiveAvgPool2d", "np.mean", "models.TSN.base_model.modules", "bninception", "ValueError", "np.mean", "print", "models.TSN.base_model.build_temporal_ops", "isinstance", "TemporalShift", "len", "print", "np.mean", "np.mean"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_shift", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.make_non_local", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.mobilenet_v2", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.bninception", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.build_temporal_ops"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "print", "(", "'=> base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n", "if", "'resnet'", "in", "base_model", ":", "\n", "            ", "self", ".", "base_model", "=", "getattr", "(", "torchvision", ".", "models", ",", "base_model", ")", "(", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "if", "self", ".", "is_shift", ":", "\n", "                ", "print", "(", "'Adding temporal shift...'", ")", "\n", "from", "model", ".", "ops", ".", "temporal_shift", "import", "make_temporal_shift", "\n", "make_temporal_shift", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ",", "\n", "n_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "temporal_pool", "=", "self", ".", "temporal_pool", ")", "\n", "\n", "", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'Adding non-local module...'", ")", "\n", "from", "model", ".", "ops", ".", "non_local", "import", "make_non_local", "\n", "make_non_local", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ")", "\n", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.5", "]", "\n", "self", ".", "input_std", "=", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "+", "[", "0", "]", "*", "3", "*", "self", ".", "new_length", "\n", "self", ".", "input_std", "=", "self", ".", "input_std", "+", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "*", "2", "]", "*", "3", "*", "self", ".", "new_length", "\n", "\n", "", "", "elif", "base_model", "==", "'mobilenetv2'", ":", "\n", "            ", "from", "model", ".", "archs", ".", "mobilenet_v2", "import", "mobilenet_v2", ",", "InvertedResidual", "\n", "self", ".", "base_model", "=", "mobilenet_v2", "(", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'classifier'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "if", "self", ".", "is_shift", ":", "\n", "                ", "from", "model", ".", "ops", ".", "temporal_shift", "import", "TemporalShift", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "InvertedResidual", ")", "and", "len", "(", "m", ".", "conv", ")", "==", "8", "and", "m", ".", "use_res_connect", ":", "\n", "                        ", "if", "self", ".", "print_spec", ":", "\n", "                            ", "print", "(", "'Adding temporal shift... {}'", ".", "format", "(", "m", ".", "use_res_connect", ")", ")", "\n", "", "m", ".", "conv", "[", "0", "]", "=", "TemporalShift", "(", "m", ".", "conv", "[", "0", "]", ",", "n_segment", "=", "self", ".", "num_segments", ",", "n_div", "=", "self", ".", "shift_div", ")", "\n", "", "", "", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.5", "]", "\n", "self", ".", "input_std", "=", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "+", "[", "0", "]", "*", "3", "*", "self", ".", "new_length", "\n", "self", ".", "input_std", "=", "self", ".", "input_std", "+", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "*", "2", "]", "*", "3", "*", "self", ".", "new_length", "\n", "\n", "", "", "elif", "base_model", "==", "'BNInception'", ":", "\n", "            ", "from", "model", ".", "archs", ".", "bn_inception", "import", "bninception", "\n", "self", ".", "base_model", "=", "bninception", "(", "pretrained", "=", "self", ".", "pretrain", ")", "\n", "self", ".", "input_size", "=", "self", ".", "base_model", ".", "input_size", "\n", "self", ".", "input_mean", "=", "self", ".", "base_model", ".", "mean", "\n", "self", ".", "input_std", "=", "self", ".", "base_model", ".", "std", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "128", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "self", ".", "input_mean", "*", "(", "1", "+", "self", ".", "new_length", ")", "\n", "", "if", "self", ".", "is_shift", ":", "\n", "                ", "print", "(", "'Adding temporal shift...'", ")", "\n", "self", ".", "base_model", ".", "build_temporal_ops", "(", "\n", "self", ".", "num_segments", ",", "is_temporal_shift", "=", "self", ".", "shift_place", ",", "shift_div", "=", "self", ".", "shift_div", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train": [[172, 189], ["super().train", "print", "models.TSN.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "TSN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.partialBN": [[190, 192], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.get_optim_policies": [[193, 261], ["models.TSN.modules", "isinstance", "isinstance", "isinstance", "list", "isinstance", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "isinstance", "lr10_bias.append", "normal_bias.append", "bn.extend", "list", "bn.extend", "len", "m.parameters", "list", "len", "ValueError", "m.parameters", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                    ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                    ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "10", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.forward": [[263, 289], ["models.TSN.base_model", "models.TSN.base_model", "models.TSN.new_fc", "models.TSN.softmax", "models.TSN.consensus", "models.TSN._get_diff", "models.TSN.view", "base_out.view.view.view", "base_out.view.view.view", "features.reshape.reshape.reshape", "models.TSN.squeeze", "features.reshape.reshape.size", "models.TSN.size", "base_out.view.view.size", "base_out.view.view.size"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._get_diff"], ["", "def", "forward", "(", "self", ",", "input", ",", "no_reshape", "=", "False", ")", ":", "\n", "        ", "if", "not", "no_reshape", ":", "\n", "            ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "==", "\"RGB\"", "else", "2", ")", "*", "self", ".", "new_length", "\n", "\n", "if", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "sample_len", "=", "3", "*", "self", ".", "new_length", "\n", "input", "=", "self", ".", "_get_diff", "(", "input", ")", "\n", "\n", "", "features", "=", "self", ".", "base_model", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "base_model", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "features", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "if", "self", ".", "reshape", ":", "\n", "            ", "if", "self", ".", "is_shift", "and", "self", ".", "temporal_pool", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", "//", "2", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "features", "=", "features", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_segments", ",", "features", ".", "size", "(", "1", ")", ")", "\n", "", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "return", "output", ".", "squeeze", "(", "1", ")", ",", "base_out", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._get_diff": [[290, 305], ["input.view", "reversed", "input.view.clone", "input_view[].clone", "list", "range", "input.size"], "methods", ["None"], ["", "", "def", "_get_diff", "(", "self", ",", "input", ",", "keep_rgb", "=", "False", ")", ":", "\n", "        ", "input_c", "=", "3", "if", "self", ".", "modality", "in", "[", "\"RGB\"", ",", "\"RGBDiff\"", "]", "else", "2", "\n", "input_view", "=", "input", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", "+", "1", ",", "input_c", ",", ")", "+", "input", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "if", "keep_rgb", ":", "\n", "            ", "new_data", "=", "input_view", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "new_data", "=", "input_view", "[", ":", ",", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "for", "x", "in", "reversed", "(", "list", "(", "range", "(", "1", ",", "self", ".", "new_length", "+", "1", ")", ")", ")", ":", "\n", "            ", "if", "keep_rgb", ":", "\n", "                ", "new_data", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "=", "input_view", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "-", "input_view", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "new_data", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "=", "input_view", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "-", "input_view", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._construct_flow_model": [[306, 340], ["list", "params[].size", "params[].data.mean().expand().contiguous", "torch.nn.Conv2d", "setattr", "models.TSN.base_model.modules", "list", "x.clone", "len", "model_zoo.load_url", "base_model.load_state_dict", "print", "print", "filter", "conv_layer.parameters", "params[].data.mean().expand", "list", "list", "container.state_dict().keys", "isinstance", "range", "params[].data.mean", "len", "len", "container.state_dict"], "methods", ["None"], ["", "def", "_construct_flow_model", "(", "self", ",", "base_model", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "self", ".", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "2", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_conv", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "new_length", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convlution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "\n", "if", "self", ".", "base_model_name", "==", "'BNInception'", ":", "\n", "            ", "import", "torch", ".", "utils", ".", "model_zoo", "as", "model_zoo", "\n", "sd", "=", "model_zoo", ".", "load_url", "(", "'https://www.dropbox.com/s/35ftw2t4mxxgjae/BNInceptionFlow-ef652051.pth.tar?dl=1'", ")", "\n", "base_model", ".", "load_state_dict", "(", "sd", ")", "\n", "print", "(", "'=> Loading pretrained Flow weight done...'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'#'", "*", "30", ",", "'Warning! No Flow pretrained model is found'", ")", "\n", "", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN._construct_diff_model": [[341, 373], ["list", "params[].size", "torch.nn.Conv2d", "setattr", "models.TSN.base_model.modules", "filter", "x.clone", "params[].data.mean().expand().contiguous", "torch.cat", "len", "list", "conv_layer.parameters", "list", "isinstance", "range", "params[].data.mean().expand", "params[].data.mean().expand().contiguous", "container.state_dict().keys", "len", "len", "params[].data.mean", "params[].data.mean().expand", "container.state_dict", "params[].data.mean"], "methods", ["None"], ["", "def", "_construct_diff_model", "(", "self", ",", "base_model", ",", "keep_rgb", "=", "False", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "self", ".", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "not", "keep_rgb", ":", "\n", "            ", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "torch", ".", "cat", "(", "(", "params", "[", "0", "]", ".", "data", ",", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", ")", ",", "\n", "1", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "+", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "\n", "", "new_conv", "=", "nn", ".", "Conv2d", "(", "new_kernel_size", "[", "1", "]", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convolution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.crop_size": [[374, 377], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.scale_size": [[378, 381], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "256", "//", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.models.TSN.get_augmentation": [[382, 396], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'#'", "*", "20", ",", "'NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "True", ")", "]", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local._NonLocalBlockND.__init__": [[10, 64], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local._NonLocalBlockND.forward": [[65, 89], ["x.size", "non_local._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local._NonLocalBlockND.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local._NonLocalBlockND.W", "non_local._NonLocalBlockND.g", "non_local._NonLocalBlockND.theta", "non_local._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.NONLocalBlock1D.__init__": [[92, 97], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.NONLocalBlock2D.__init__": [[100, 105], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.NONLocalBlock3D.__init__": [[108, 113], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.NL3DWrapper.__init__": [[116, 121], ["torch.nn.Module.__init__", "non_local.NONLocalBlock3D"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "NL3DWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "nl", "=", "NONLocalBlock3D", "(", "block", ".", "bn3", ".", "num_features", ")", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.NL3DWrapper.forward": [[122, 130], ["non_local.NL3DWrapper.block", "x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "non_local.NL3DWrapper.nl", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "\n", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "nt", "//", "self", ".", "n_segment", ",", "self", ".", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "self", ".", "nl", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.non_local.make_non_local": [[132, 152], ["isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper"], "function", ["None"], ["", "", "def", "make_non_local", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "import", "model", ".", "archs", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "net", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "3", "]", ",", "\n", ")", "\n", "net", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "3", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "4", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "5", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_ucf101": [[11, 26], ["NotImplementedError"], "function", ["None"], ["def", "return_ucf101", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'UCF101/labels/classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'UCF101/jpg'", "\n", "filename_imglist_train", "=", "'UCF101/file_list/ucf101_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'UCF101/file_list/ucf101_rgb_val_split_1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'UCF101/jpg'", "\n", "filename_imglist_train", "=", "'UCF101/file_list/ucf101_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'UCF101/file_list/ucf101_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_hmdb51": [[28, 43], ["NotImplementedError"], "function", ["None"], ["", "def", "return_hmdb51", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "51", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_rgb_val_split_1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_something": [[45, 61], ["print"], "function", ["None"], ["", "def", "return_something", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'something/v1/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v1/20bn-something-something-v1'", "\n", "filename_imglist_train", "=", "'something/v1/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'something/v1/val_videofolder.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v1/20bn-something-something-v1-flow'", "\n", "filename_imglist_train", "=", "'something/v1/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'something/v1/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:06d}-{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_somethingv2": [[63, 78], ["NotImplementedError"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'something/v2/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v2/20bn-something-something-v2-frames'", "\n", "filename_imglist_train", "=", "'something/v2/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'something/v2/val_videofolder.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v2/20bn-something-something-v2-flow'", "\n", "filename_imglist_train", "=", "'something/v2/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'something/v2/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_jester": [[80, 90], ["NotImplementedError"], "function", ["None"], ["", "def", "return_jester", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'jester/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'{:05d}.jpg'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'jester/20bn-jester-v1'", "\n", "filename_imglist_train", "=", "'jester/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'jester/val_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_kinetics": [[92, 102], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "400", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'kinetics/images'", "\n", "filename_imglist_train", "=", "'kinetics/labels/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'kinetics/labels/val_videofolder.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset_config.return_dataset": [[104, 125], ["os.path.join", "os.path.join", "isinstance", "len", "print", "ValueError", "os.path.join", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "dict_single", "=", "{", "'jester'", ":", "return_jester", ",", "'something'", ":", "return_something", ",", "'somethingv2'", ":", "return_somethingv2", ",", "\n", "'ucf101'", ":", "return_ucf101", ",", "'hmdb51'", ":", "return_hmdb51", ",", "\n", "'kinetics'", ":", "return_kinetics", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "", "file_imglist_train", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_train", ")", "\n", "file_imglist_val", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_val", ")", "\n", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "        ", "file_categories", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_categories", ")", "\n", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "print", "(", "'{}: {} classes'", ".", "format", "(", "dataset", ",", "n_class", ")", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.VideoRecord.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.VideoRecord.path": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.VideoRecord.num_frames": [[22, 25], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.VideoRecord.label": [[26, 29], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__init__": [[32, 59], ["dataset.TSNDataSet._parse_list", "print", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._parse_list"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "list_file", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "1", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "\n", "remove_missing", "=", "False", ",", "dense_sample", "=", "False", ",", "twice_sample", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "remove_missing", "=", "remove_missing", "\n", "self", ".", "dense_sample", "=", "dense_sample", "# using dense sample as I3D", "\n", "self", ".", "twice_sample", "=", "twice_sample", "# twice sample for more validation", "\n", "if", "self", ".", "dense_sample", ":", "\n", "            ", "print", "(", "'=> Using dense sample for the dataset...'", ")", "\n", "", "if", "self", ".", "twice_sample", ":", "\n", "            ", "print", "(", "'=> Using twice sample for the dataset...'", ")", "\n", "\n", "", "if", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "self", ".", "new_length", "+=", "1", "# Diff needs one more image to calculate diff", "\n", "\n", "", "self", ".", "_parse_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._load_image": [[60, 93], ["PIL.Image.open().convert", "print", "PIL.Image.open().convert", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.split", "flow_x.convert", "flow_y.convert", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open", "os.path.join", "os.path.join", "PIL.Image.open", "PIL.Image.open", "print", "PIL.Image.open().convert", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "PIL.Image.open", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "PIL.Image.open", "int", "int", "int", "int", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", "or", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "'error loading image:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "# ucf", "\n", "                ", "x_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'L'", ")", "\n", "y_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'y'", ",", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'L'", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "# something v1 flow", "\n", "                ", "x_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "directory", ")", ")", ",", "self", ".", "image_tmpl", ".", "\n", "format", "(", "int", "(", "directory", ")", ",", "'x'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "y_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "directory", ")", ")", ",", "self", ".", "image_tmpl", ".", "\n", "format", "(", "int", "(", "directory", ")", ",", "'y'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "# idx_skip = 1 + (idx-1)*5", "\n", "                    ", "flow", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'RGB'", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "'error loading flow file:'", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "flow", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# the input flow file is RGB image with (flow_x, flow_y, blank) for each channel", "\n", "", "flow_x", ",", "flow_y", ",", "_", "=", "flow", ".", "split", "(", ")", "\n", "x_img", "=", "flow_x", ".", "convert", "(", "'L'", ")", "\n", "y_img", "=", "flow_y", ".", "convert", "(", "'L'", ")", "\n", "\n", "", "return", "[", "x_img", ",", "y_img", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._parse_list": [[94, 105], ["print", "x.strip().split", "dataset.VideoRecord", "open", "len", "x.strip", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "# check the frame number is large >3:", "\n", "        ", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "if", "not", "self", ".", "test_mode", "or", "self", ".", "remove_missing", ":", "\n", "            ", "tmp", "=", "[", "item", "for", "item", "in", "tmp", "if", "int", "(", "item", "[", "1", "]", ")", ">=", "3", "]", "\n", "", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "for", "v", "in", "self", ".", "video_list", ":", "\n", "                ", "v", ".", "_data", "[", "1", "]", "=", "int", "(", "v", ".", "_data", "[", "1", "]", ")", "/", "2", "\n", "", "", "print", "(", "'video number:%d'", "%", "(", "len", "(", "self", ".", "video_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._sample_indices": [[106, 128], ["max", "numpy.random.randint", "numpy.array", "range", "numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["", "def", "_sample_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n\n        :param record: VideoRecord\n        :return: list\n        \"\"\"", "\n", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "# normal sample", "\n", "            ", "average_duration", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "//", "self", ".", "num_segments", "\n", "if", "average_duration", ">", "0", ":", "\n", "                ", "offsets", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "\n", "size", "=", "self", ".", "num_segments", ")", "\n", "", "elif", "record", ".", "num_frames", ">", "self", ".", "num_segments", ":", "\n", "                ", "offsets", "=", "np", ".", "sort", "(", "randint", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._get_val_indices": [[129, 143], ["max", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.zeros", "range", "float", "int", "range"], "methods", ["None"], ["", "", "def", "_get_val_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "record", ".", "num_frames", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._get_test_indices": [[144, 164], ["max", "numpy.linspace", "numpy.linspace.tolist", "numpy.array", "numpy.array", "numpy.array", "float", "float", "range", "int", "int", "int", "range", "range", "range"], "methods", ["None"], ["", "", "def", "_get_test_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_list", "=", "np", ".", "linspace", "(", "0", ",", "sample_pos", "-", "1", ",", "num", "=", "10", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "[", "]", "\n", "for", "start_idx", "in", "start_list", ".", "tolist", "(", ")", ":", "\n", "                ", "offsets", "+=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "elif", "self", ".", "twice_sample", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "\n", "[", "int", "(", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "\n", "return", "offsets", "+", "1", "\n", "", "else", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__getitem__": [[165, 198], ["dataset.TSNDataSet.get", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.exists", "print", "numpy.random.randint", "dataset.TSNDataSet._get_test_indices", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "len", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices", "int", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._get_val_indices"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "# check this is a legit video folder", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "int", "(", "record", ".", "path", ")", ",", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "record", ".", "path", ")", ")", ",", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "\n", "", "while", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "            ", "print", "(", "'################## Not Found:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "video_list", ")", ")", "\n", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "int", "(", "record", ".", "path", ")", ",", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "record", ".", "path", ")", ")", ",", "file_name", ")", "\n", "", "else", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "\n", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "record", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "record", ")", "\n", "", "else", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "record", ")", "\n", "", "return", "self", ".", "get", "(", "record", ",", "segment_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get": [[199, 212], ["list", "dataset.TSNDataSet.transform", "int", "range", "dataset.TSNDataSet._load_image", "list.extend"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.online_demo.main.transform", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet._load_image"], ["", "def", "get", "(", "self", ",", "record", ",", "indices", ")", ":", "\n", "\n", "        ", "images", "=", "list", "(", ")", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "new_length", ")", ":", "\n", "                ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ")", "\n", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "if", "p", "<", "record", ".", "num_frames", ":", "\n", "                    ", "p", "+=", "1", "\n", "\n", "", "", "", "process_data", "=", "self", ".", "transform", "(", "images", ")", "\n", "return", "process_data", ",", "record", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.__len__": [[213, 215], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.basic_ops.Identity.forward": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.basic_ops.SegmentConsensus.__init__": [[11, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegmentConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.basic_ops.SegmentConsensus.forward": [[17, 27], ["input_tensor.size", "input_tensor.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.basic_ops.ConsensusModule.__init__": [[31, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.basic_ops.ConsensusModule.forward": [[36, 38], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "SegmentConsensus", "(", "self", ".", "consensus_type", ",", "self", ".", "dim", ")", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.__init__": [[12, 21], ["torch.Module.__init__", "print", "print"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", "=", "3", ",", "n_div", "=", "8", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "TemporalShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "n_div", "\n", "self", ".", "inplace", "=", "inplace", "\n", "if", "inplace", ":", "\n", "            ", "print", "(", "'=> Using in-place shift...'", ")", "\n", "", "print", "(", "'=> Using fold div: {}'", ".", "format", "(", "self", ".", "fold_div", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.forward": [[22, 25], ["temporal_shift.TemporalShift.shift", "temporal_shift.TemporalShift.net"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.shift"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shift", "(", "x", ",", "self", ".", "n_segment", ",", "fold_div", "=", "self", ".", "fold_div", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.shift": [[26, 45], ["x.view.view.size", "x.view.view.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "3", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "fold", "=", "c", "//", "fold_div", "\n", "if", "inplace", ":", "\n", "# Due to some out of order error when performing parallel computing. ", "\n", "# May need to write a CUDA kernel.", "\n", "            ", "raise", "NotImplementedError", "\n", "# out = InplaceShift.apply(x, fold)", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "out", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "=", "x", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "# shift left", "\n", "out", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "x", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "# shift right", "\n", "out", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "=", "x", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "# not shift", "\n", "\n", "", "return", "out", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.InplaceShift.forward": [[49, 62], ["input.size", "input.data.new().zero_", "input.data.new().zero_.zero_", "input.data.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "fold", ")", ":", "\n", "# not support higher order gradient", "\n", "# input = input.detach_()", "\n", "        ", "ctx", ".", "fold_", "=", "fold", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "buffer", "=", "input", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "input", ".", "data", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "input", ".", "data", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.InplaceShift.backward": [[63, 75], ["grad_output.size", "grad_output.data.new().zero_", "grad_output.data.new().zero_.zero_", "grad_output.data.new"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# grad_output = grad_output.detach_()", "\n", "        ", "fold", "=", "ctx", ".", "fold_", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "grad_output", ".", "size", "(", ")", "\n", "buffer", "=", "grad_output", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "grad_output", ".", "data", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "grad_output", ".", "data", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalPool.__init__": [[78, 82], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "TemporalPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalPool.forward": [[83, 86], ["temporal_shift.TemporalPool.temporal_pool", "temporal_shift.TemporalPool.net"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalPool.temporal_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_pool", "(", "x", ",", "n_segment", "=", "self", ".", "n_segment", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalPool.temporal_pool": [[87, 95], ["x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "torch.max_pool3d", "torch.max_pool3d", "torch.max_pool3d", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "temporal_pool", "(", "x", ",", "n_segment", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "F", ".", "max_pool3d", "(", "x", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", "//", "2", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_shift": [[97, 140], ["print", "isinstance", "NotImplementedError", "temporal_shift.make_temporal_shift.make_block_temporal"], "function", ["None"], ["", "", "def", "make_temporal_shift", "(", "net", ",", "n_segment", ",", "n_div", "=", "8", ",", "place", "=", "'blockres'", ",", "temporal_pool", "=", "False", ")", ":", "\n", "    ", "if", "temporal_pool", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", "]", "\n", "", "else", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "", "assert", "n_segment_list", "[", "-", "1", "]", ">", "0", "\n", "print", "(", "'=> n_segment per stage: {}'", ".", "format", "(", "n_segment_list", ")", ")", "\n", "\n", "import", "torchvision", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "if", "place", "==", "'block'", ":", "\n", "            ", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "print", "(", "'=> Processing stage with {} blocks'", ".", "format", "(", "len", "(", "blocks", ")", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "blocks", "[", "i", "]", "=", "TemporalShift", "(", "b", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "(", "blocks", ")", ")", "\n", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "\n", "", "elif", "'blockres'", "in", "place", ":", "\n", "            ", "n_round", "=", "1", "\n", "if", "len", "(", "list", "(", "net", ".", "layer3", ".", "children", "(", ")", ")", ")", ">=", "23", ":", "\n", "                ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert temporal shift'", ".", "format", "(", "n_round", ")", ")", "\n", "\n", "", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "print", "(", "'=> Processing stage with {} blocks residual'", ".", "format", "(", "len", "(", "blocks", ")", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                        ", "blocks", "[", "i", "]", ".", "conv1", "=", "TemporalShift", "(", "b", ".", "conv1", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "place", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.make_temporal_pool": [[142, 149], ["isinstance", "print", "temporal_shift.TemporalPool"], "function", ["None"], ["", "", "def", "make_temporal_pool", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "print", "(", "'=> Injecting nonlocal pooling'", ")", "\n", "net", ".", "layer2", "=", "TemporalPool", "(", "net", ".", "layer2", ",", "n_segment", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.__init__": [[12, 14], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.reset"], ["channel", ".", "put", "(", "response", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["", "def", "input_with_timeout", "(", "message", ",", "timeout", ",", "default_answer", ")", ":", "\n", "    ", "channel", "=", "queue", ".", "Queue", "(", ")", "\n", "message", "=", "message", "+", "\" [{} sec timeout] \"", ".", "format", "(", "timeout", ")", "\n", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "get_input", ",", "args", "=", "(", "message", ",", "channel", ")", ")", "\n", "# by setting this as a daemon thread, python won't wait for it to complete", "\n", "thread", ".", "daemon", "=", "True", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.AverageMeter.update": [[21, 26], ["None"], "methods", ["None"], ["thread", ".", "start", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "response", "=", "channel", ".", "get", "(", "True", ",", "timeout", ")", "\n", "return", "response", "\n", "", "except", "queue", ".", "Empty", ":", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax": [[4, 7], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "import", "threading", "\n", "import", "queue", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.accuracy": [[28, 42], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "return", "default_answer", "\n", "\n", "\n", "", "def", "ignore_func", "(", "dir", ",", "file_list", ",", "ext", "=", "\".py\"", ")", ":", "\n", "    ", "ignored", "=", "[", "]", "\n", "for", "file_name", "in", "file_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "file_path", ")", ":", "\n", "            ", "if", "not", "file_path", ".", "endswith", "(", "ext", ")", ":", "\n", "                ", "ignored", ".", "append", "(", "file_name", ")", "\n", "", "", "", "return", "ignored", "\n", "\n", "\n", "", "def", "imshow_", "(", "x", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "2", ":", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.InvertedResidual.__init__": [[29, 60], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.InvertedResidual.forward": [[62, 67], ["mobilenet_v2.InvertedResidual.conv", "mobilenet_v2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.MobileNetV2.__init__": [[70, 109], ["torch.Module.__init__", "mobilenet_v2.MobileNetV2.features.append", "torch.Sequential", "torch.Linear", "mobilenet_v2.MobileNetV2._initialize_weights", "mobilenet_v2.make_divisible", "mobilenet_v2.conv_bn", "range", "mobilenet_v2.conv_1x1_bn", "mobilenet_v2.make_divisible", "mobilenet_v2.MobileNetV2.features.append", "mobilenet_v2.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.make_divisible", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_bn", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_1x1_bn", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)  # first channel is always 32!", "\n", "self", ".", "last_channel", "=", "make_divisible", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.MobileNetV2.forward": [[110, 115], ["mobilenet_v2.MobileNetV2.features", "mobilenet_v2.MobileNetV2.mean().mean", "mobilenet_v2.MobileNetV2.classifier", "mobilenet_v2.MobileNetV2.mean"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.MobileNetV2._initialize_weights": [[116, 130], ["mobilenet_v2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_bn": [[7, 12], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.conv_1x1_bn": [[15, 20], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.make_divisible": [[23, 26], ["int", "np.ceil"], "function", ["None"], ["", "def", "make_divisible", "(", "x", ",", "divisible_by", "=", "8", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "return", "int", "(", "np", ".", "ceil", "(", "x", "*", "1.", "/", "divisible_by", ")", "*", "divisible_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.mobilenet_v2.mobilenet_v2": [[132, 144], ["mobilenet_v2.MobileNetV2", "load_state_dict_from_url", "MobileNetV2.load_state_dict"], "function", ["None"], ["", "", "", "", "def", "mobilenet_v2", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "MobileNetV2", "(", "width_mult", "=", "1", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "torch", ".", "hub", "import", "load_state_dict_from_url", "\n", "", "except", "ImportError", ":", "\n", "            ", "from", "torch", ".", "utils", ".", "model_zoo", "import", "load_url", "as", "load_state_dict_from_url", "\n", "", "state_dict", "=", "load_state_dict_from_url", "(", "\n", "'https://www.dropbox.com/s/47tyzpofuuyyv1b/mobilenetv2_1.0-f2a8633.pth.tar?dl=1'", ",", "progress", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.__init__": [[35, 39], ["torch.Module.__init__", "bn_inception.BNInception._build_features"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._build_features"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "BNInception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inplace", "=", "True", "\n", "self", ".", "_build_features", "(", "inplace", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.forward": [[40, 47], ["bn_inception.BNInception.features", "bn_inception.BNInception.logits"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.features", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# if self.input_space == 'BGR':", "\n", "#     assert len(x.size()) == 4", "\n", "#     x = x[:, (2, 1, 0)]", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.features": [[48, 69], ["bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "# stage1", "\n", "        ", "pool1_3x3_s2_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_1", ",", "0", ")", "(", "x", ")", "\n", "# stage2", "\n", "pool2_3x3_s2_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_2", ",", "1", ")", "(", "pool1_3x3_s2_out", ")", "\n", "\n", "# stage3", "\n", "inception_3a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3a", ",", "2", ")", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3b", ",", "3", ")", "(", "inception_3a_output_out", ")", "\n", "inception_3c_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3c", ",", "4", ")", "(", "inception_3b_output_out", ")", "\n", "\n", "inception_4a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4a", ",", "5", ")", "(", "inception_3c_output_out", ")", "\n", "inception_4b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4b", ",", "6", ")", "(", "inception_4a_output_out", ")", "\n", "inception_4c_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4c", ",", "7", ")", "(", "inception_4b_output_out", ")", "\n", "inception_4d_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4d", ",", "8", ")", "(", "inception_4c_output_out", ")", "\n", "inception_4e_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4e", ",", "9", ")", "(", "inception_4d_output_out", ")", "\n", "\n", "inception_5a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_5a", ",", "10", ")", "(", "inception_4e_output_out", ")", "\n", "inception_5b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_5b", ",", "11", ")", "(", "inception_5a_output_out", ")", "\n", "\n", "return", "inception_5b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.logits": [[70, 75], ["bn_inception.BNInception.global_pool", "bn_inception.BNInception.view", "bn_inception.BNInception.fc", "bn_inception.BNInception.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "global_pool", "(", "features", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception.build_temporal_ops": [[76, 93], ["print", "print", "print", "len"], "methods", ["None"], ["", "def", "build_temporal_ops", "(", "self", ",", "n_segment", ",", "is_temporal_shift", "=", "'0'", "*", "12", ",", "shift_div", "=", "8", ")", ":", "\n", "# must call after loading weights", "\n", "        ", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "residual", "=", "'res'", "in", "is_temporal_shift", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "print", "(", "'=> Using residual shift functions...'", ")", "\n", "", "if", "is_temporal_shift", "in", "[", "'block'", ",", "'blockres'", "]", ":", "\n", "            ", "self", ".", "is_temporal_shift", "=", "'1'", "*", "12", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_temporal_shift", "=", "is_temporal_shift", "\n", "", "self", ".", "is_temporal_shift", "=", "'0'", "+", "self", ".", "is_temporal_shift", "[", "1", ":", "]", "# image input does not shift", "\n", "\n", "assert", "len", "(", "self", ".", "is_temporal_shift", ")", "==", "12", "\n", "\n", "print", "(", "'=> Injecting temporal shift with mask {}'", ".", "format", "(", "self", ".", "is_temporal_shift", ")", ")", "\n", "self", ".", "fold_div", "=", "shift_div", "\n", "print", "(", "'=> Using fold div: {}'", ".", "format", "(", "self", ".", "fold_div", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._temporal_forward_wrap": [[94, 109], ["hasattr", "partial", "TemporalShift.shift", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "TemporalShift.shift", "layer_func", "layer_func"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.shift", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.temporal_shift.TemporalShift.shift"], ["", "def", "_temporal_forward_wrap", "(", "self", ",", "layer_func", ",", "index", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'is_temporal_shift'", ")", "and", "self", ".", "is_temporal_shift", "[", "index", "]", "==", "'1'", ":", "# run temporal shuffling", "\n", "            ", "from", "ops", ".", "temporal_shift", "import", "TemporalShift", "\n", "def", "wrapped_func", "(", "x", ",", "is_residual", ",", "n_segment", ",", "fold_div", ")", ":", "\n", "                ", "if", "is_residual", ":", "\n", "                    ", "x_shift", "=", "TemporalShift", ".", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "fold_div", ")", "\n", "return", "F", ".", "relu", "(", "x", "+", "layer_func", "(", "x_shift", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "TemporalShift", ".", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "fold_div", ")", "\n", "return", "layer_func", "(", "x", ")", "\n", "", "", "from", "functools", "import", "partial", "\n", "return", "partial", "(", "wrapped_func", ",", "is_residual", "=", "self", ".", "residual", ",", "n_segment", "=", "self", ".", "n_segment", ",", "\n", "fold_div", "=", "self", ".", "fold_div", ")", "\n", "", "else", ":", "\n", "            ", "return", "layer_func", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_1": [[110, 116], ["bn_inception.BNInception.conv1_7x7_s2", "bn_inception.BNInception.conv1_7x7_s2_bn", "bn_inception.BNInception.conv1_relu_7x7", "bn_inception.BNInception.pool1_3x3_s2"], "methods", ["None"], ["", "", "def", "_block_1", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1_7x7_s2_out", "=", "self", ".", "conv1_7x7_s2", "(", "x", ")", "\n", "conv1_7x7_s2_bn_out", "=", "self", ".", "conv1_7x7_s2_bn", "(", "conv1_7x7_s2_out", ")", "\n", "conv1_relu_7x7_out", "=", "self", ".", "conv1_relu_7x7", "(", "conv1_7x7_s2_bn_out", ")", "\n", "pool1_3x3_s2_out", "=", "self", ".", "pool1_3x3_s2", "(", "conv1_7x7_s2_bn_out", ")", "\n", "return", "pool1_3x3_s2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_2": [[117, 126], ["bn_inception.BNInception.conv2_3x3_reduce", "bn_inception.BNInception.conv2_3x3_reduce_bn", "bn_inception.BNInception.conv2_relu_3x3_reduce", "bn_inception.BNInception.conv2_3x3", "bn_inception.BNInception.conv2_3x3_bn", "bn_inception.BNInception.conv2_relu_3x3", "bn_inception.BNInception.pool2_3x3_s2"], "methods", ["None"], ["", "def", "_block_2", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv2_3x3_reduce_out", "=", "self", ".", "conv2_3x3_reduce", "(", "x", ")", "\n", "conv2_3x3_reduce_bn_out", "=", "self", ".", "conv2_3x3_reduce_bn", "(", "conv2_3x3_reduce_out", ")", "\n", "conv2_relu_3x3_reduce_out", "=", "self", ".", "conv2_relu_3x3_reduce", "(", "conv2_3x3_reduce_bn_out", ")", "\n", "conv2_3x3_out", "=", "self", ".", "conv2_3x3", "(", "conv2_3x3_reduce_bn_out", ")", "\n", "conv2_3x3_bn_out", "=", "self", ".", "conv2_3x3_bn", "(", "conv2_3x3_out", ")", "\n", "conv2_relu_3x3_out", "=", "self", ".", "conv2_relu_3x3", "(", "conv2_3x3_bn_out", ")", "\n", "pool2_3x3_s2_out", "=", "self", ".", "pool2_3x3_s2", "(", "conv2_3x3_bn_out", ")", "\n", "return", "pool2_3x3_s2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_3a": [[127, 156], ["bn_inception.BNInception.inception_3a_1x1", "bn_inception.BNInception.inception_3a_1x1_bn", "bn_inception.BNInception.inception_3a_relu_1x1", "bn_inception.BNInception.inception_3a_3x3_reduce", "bn_inception.BNInception.inception_3a_3x3_reduce_bn", "bn_inception.BNInception.inception_3a_relu_3x3_reduce", "bn_inception.BNInception.inception_3a_3x3", "bn_inception.BNInception.inception_3a_3x3_bn", "bn_inception.BNInception.inception_3a_relu_3x3", "bn_inception.BNInception.inception_3a_double_3x3_reduce", "bn_inception.BNInception.inception_3a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3a_double_3x3_1", "bn_inception.BNInception.inception_3a_double_3x3_1_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_1", "bn_inception.BNInception.inception_3a_double_3x3_2", "bn_inception.BNInception.inception_3a_double_3x3_2_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_2", "bn_inception.BNInception.inception_3a_pool", "bn_inception.BNInception.inception_3a_pool_proj", "bn_inception.BNInception.inception_3a_pool_proj_bn", "bn_inception.BNInception.inception_3a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3a", "(", "self", ",", "pool2_3x3_s2_out", ")", ":", "\n", "        ", "inception_3a_1x1_out", "=", "self", ".", "inception_3a_1x1", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_1x1_bn_out", "=", "self", ".", "inception_3a_1x1_bn", "(", "inception_3a_1x1_out", ")", "\n", "inception_3a_relu_1x1_out", "=", "self", ".", "inception_3a_relu_1x1", "(", "inception_3a_1x1_bn_out", ")", "\n", "inception_3a_3x3_reduce_out", "=", "self", ".", "inception_3a_3x3_reduce", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_3x3_reduce_bn_out", "=", "self", ".", "inception_3a_3x3_reduce_bn", "(", "inception_3a_3x3_reduce_out", ")", "\n", "inception_3a_relu_3x3_reduce_out", "=", "self", ".", "inception_3a_relu_3x3_reduce", "(", "inception_3a_3x3_reduce_bn_out", ")", "\n", "inception_3a_3x3_out", "=", "self", ".", "inception_3a_3x3", "(", "inception_3a_3x3_reduce_bn_out", ")", "\n", "inception_3a_3x3_bn_out", "=", "self", ".", "inception_3a_3x3_bn", "(", "inception_3a_3x3_out", ")", "\n", "inception_3a_relu_3x3_out", "=", "self", ".", "inception_3a_relu_3x3", "(", "inception_3a_3x3_bn_out", ")", "\n", "inception_3a_double_3x3_reduce_out", "=", "self", ".", "inception_3a_double_3x3_reduce", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3a_double_3x3_reduce_bn", "(", "\n", "inception_3a_double_3x3_reduce_out", ")", "\n", "inception_3a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3a_relu_double_3x3_reduce", "(", "\n", "inception_3a_double_3x3_reduce_bn_out", ")", "\n", "inception_3a_double_3x3_1_out", "=", "self", ".", "inception_3a_double_3x3_1", "(", "inception_3a_double_3x3_reduce_bn_out", ")", "\n", "inception_3a_double_3x3_1_bn_out", "=", "self", ".", "inception_3a_double_3x3_1_bn", "(", "inception_3a_double_3x3_1_out", ")", "\n", "inception_3a_relu_double_3x3_1_out", "=", "self", ".", "inception_3a_relu_double_3x3_1", "(", "inception_3a_double_3x3_1_bn_out", ")", "\n", "inception_3a_double_3x3_2_out", "=", "self", ".", "inception_3a_double_3x3_2", "(", "inception_3a_double_3x3_1_bn_out", ")", "\n", "inception_3a_double_3x3_2_bn_out", "=", "self", ".", "inception_3a_double_3x3_2_bn", "(", "inception_3a_double_3x3_2_out", ")", "\n", "inception_3a_relu_double_3x3_2_out", "=", "self", ".", "inception_3a_relu_double_3x3_2", "(", "inception_3a_double_3x3_2_bn_out", ")", "\n", "inception_3a_pool_out", "=", "self", ".", "inception_3a_pool", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_pool_proj_out", "=", "self", ".", "inception_3a_pool_proj", "(", "inception_3a_pool_out", ")", "\n", "inception_3a_pool_proj_bn_out", "=", "self", ".", "inception_3a_pool_proj_bn", "(", "inception_3a_pool_proj_out", ")", "\n", "inception_3a_relu_pool_proj_out", "=", "self", ".", "inception_3a_relu_pool_proj", "(", "inception_3a_pool_proj_bn_out", ")", "\n", "inception_3a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3a_1x1_bn_out", ",", "inception_3a_3x3_bn_out", ",", "inception_3a_double_3x3_2_bn_out", ",", "\n", "inception_3a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_3a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_3b": [[157, 186], ["bn_inception.BNInception.inception_3b_1x1", "bn_inception.BNInception.inception_3b_1x1_bn", "bn_inception.BNInception.inception_3b_relu_1x1", "bn_inception.BNInception.inception_3b_3x3_reduce", "bn_inception.BNInception.inception_3b_3x3_reduce_bn", "bn_inception.BNInception.inception_3b_relu_3x3_reduce", "bn_inception.BNInception.inception_3b_3x3", "bn_inception.BNInception.inception_3b_3x3_bn", "bn_inception.BNInception.inception_3b_relu_3x3", "bn_inception.BNInception.inception_3b_double_3x3_reduce", "bn_inception.BNInception.inception_3b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3b_double_3x3_1", "bn_inception.BNInception.inception_3b_double_3x3_1_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_1", "bn_inception.BNInception.inception_3b_double_3x3_2", "bn_inception.BNInception.inception_3b_double_3x3_2_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_2", "bn_inception.BNInception.inception_3b_pool", "bn_inception.BNInception.inception_3b_pool_proj", "bn_inception.BNInception.inception_3b_pool_proj_bn", "bn_inception.BNInception.inception_3b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3b", "(", "self", ",", "inception_3a_output_out", ")", ":", "\n", "        ", "inception_3b_1x1_out", "=", "self", ".", "inception_3b_1x1", "(", "inception_3a_output_out", ")", "\n", "inception_3b_1x1_bn_out", "=", "self", ".", "inception_3b_1x1_bn", "(", "inception_3b_1x1_out", ")", "\n", "inception_3b_relu_1x1_out", "=", "self", ".", "inception_3b_relu_1x1", "(", "inception_3b_1x1_bn_out", ")", "\n", "inception_3b_3x3_reduce_out", "=", "self", ".", "inception_3b_3x3_reduce", "(", "inception_3a_output_out", ")", "\n", "inception_3b_3x3_reduce_bn_out", "=", "self", ".", "inception_3b_3x3_reduce_bn", "(", "inception_3b_3x3_reduce_out", ")", "\n", "inception_3b_relu_3x3_reduce_out", "=", "self", ".", "inception_3b_relu_3x3_reduce", "(", "inception_3b_3x3_reduce_bn_out", ")", "\n", "inception_3b_3x3_out", "=", "self", ".", "inception_3b_3x3", "(", "inception_3b_3x3_reduce_bn_out", ")", "\n", "inception_3b_3x3_bn_out", "=", "self", ".", "inception_3b_3x3_bn", "(", "inception_3b_3x3_out", ")", "\n", "inception_3b_relu_3x3_out", "=", "self", ".", "inception_3b_relu_3x3", "(", "inception_3b_3x3_bn_out", ")", "\n", "inception_3b_double_3x3_reduce_out", "=", "self", ".", "inception_3b_double_3x3_reduce", "(", "inception_3a_output_out", ")", "\n", "inception_3b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3b_double_3x3_reduce_bn", "(", "\n", "inception_3b_double_3x3_reduce_out", ")", "\n", "inception_3b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3b_relu_double_3x3_reduce", "(", "\n", "inception_3b_double_3x3_reduce_bn_out", ")", "\n", "inception_3b_double_3x3_1_out", "=", "self", ".", "inception_3b_double_3x3_1", "(", "inception_3b_double_3x3_reduce_bn_out", ")", "\n", "inception_3b_double_3x3_1_bn_out", "=", "self", ".", "inception_3b_double_3x3_1_bn", "(", "inception_3b_double_3x3_1_out", ")", "\n", "inception_3b_relu_double_3x3_1_out", "=", "self", ".", "inception_3b_relu_double_3x3_1", "(", "inception_3b_double_3x3_1_bn_out", ")", "\n", "inception_3b_double_3x3_2_out", "=", "self", ".", "inception_3b_double_3x3_2", "(", "inception_3b_double_3x3_1_bn_out", ")", "\n", "inception_3b_double_3x3_2_bn_out", "=", "self", ".", "inception_3b_double_3x3_2_bn", "(", "inception_3b_double_3x3_2_out", ")", "\n", "inception_3b_relu_double_3x3_2_out", "=", "self", ".", "inception_3b_relu_double_3x3_2", "(", "inception_3b_double_3x3_2_bn_out", ")", "\n", "inception_3b_pool_out", "=", "self", ".", "inception_3b_pool", "(", "inception_3a_output_out", ")", "\n", "inception_3b_pool_proj_out", "=", "self", ".", "inception_3b_pool_proj", "(", "inception_3b_pool_out", ")", "\n", "inception_3b_pool_proj_bn_out", "=", "self", ".", "inception_3b_pool_proj_bn", "(", "inception_3b_pool_proj_out", ")", "\n", "inception_3b_relu_pool_proj_out", "=", "self", ".", "inception_3b_relu_pool_proj", "(", "inception_3b_pool_proj_bn_out", ")", "\n", "inception_3b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3b_1x1_bn_out", ",", "inception_3b_3x3_bn_out", ",", "inception_3b_double_3x3_2_bn_out", ",", "\n", "inception_3b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_3b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_3c": [[187, 209], ["bn_inception.BNInception.inception_3c_3x3_reduce", "bn_inception.BNInception.inception_3c_3x3_reduce_bn", "bn_inception.BNInception.inception_3c_relu_3x3_reduce", "bn_inception.BNInception.inception_3c_3x3", "bn_inception.BNInception.inception_3c_3x3_bn", "bn_inception.BNInception.inception_3c_relu_3x3", "bn_inception.BNInception.inception_3c_double_3x3_reduce", "bn_inception.BNInception.inception_3c_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3c_double_3x3_1", "bn_inception.BNInception.inception_3c_double_3x3_1_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_1", "bn_inception.BNInception.inception_3c_double_3x3_2", "bn_inception.BNInception.inception_3c_double_3x3_2_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_2", "bn_inception.BNInception.inception_3c_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3c", "(", "self", ",", "inception_3b_output_out", ")", ":", "\n", "        ", "inception_3c_3x3_reduce_out", "=", "self", ".", "inception_3c_3x3_reduce", "(", "inception_3b_output_out", ")", "\n", "inception_3c_3x3_reduce_bn_out", "=", "self", ".", "inception_3c_3x3_reduce_bn", "(", "inception_3c_3x3_reduce_out", ")", "\n", "inception_3c_relu_3x3_reduce_out", "=", "self", ".", "inception_3c_relu_3x3_reduce", "(", "inception_3c_3x3_reduce_bn_out", ")", "\n", "inception_3c_3x3_out", "=", "self", ".", "inception_3c_3x3", "(", "inception_3c_3x3_reduce_bn_out", ")", "\n", "inception_3c_3x3_bn_out", "=", "self", ".", "inception_3c_3x3_bn", "(", "inception_3c_3x3_out", ")", "\n", "inception_3c_relu_3x3_out", "=", "self", ".", "inception_3c_relu_3x3", "(", "inception_3c_3x3_bn_out", ")", "\n", "inception_3c_double_3x3_reduce_out", "=", "self", ".", "inception_3c_double_3x3_reduce", "(", "inception_3b_output_out", ")", "\n", "inception_3c_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3c_double_3x3_reduce_bn", "(", "\n", "inception_3c_double_3x3_reduce_out", ")", "\n", "inception_3c_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3c_relu_double_3x3_reduce", "(", "\n", "inception_3c_double_3x3_reduce_bn_out", ")", "\n", "inception_3c_double_3x3_1_out", "=", "self", ".", "inception_3c_double_3x3_1", "(", "inception_3c_double_3x3_reduce_bn_out", ")", "\n", "inception_3c_double_3x3_1_bn_out", "=", "self", ".", "inception_3c_double_3x3_1_bn", "(", "inception_3c_double_3x3_1_out", ")", "\n", "inception_3c_relu_double_3x3_1_out", "=", "self", ".", "inception_3c_relu_double_3x3_1", "(", "inception_3c_double_3x3_1_bn_out", ")", "\n", "inception_3c_double_3x3_2_out", "=", "self", ".", "inception_3c_double_3x3_2", "(", "inception_3c_double_3x3_1_bn_out", ")", "\n", "inception_3c_double_3x3_2_bn_out", "=", "self", ".", "inception_3c_double_3x3_2_bn", "(", "inception_3c_double_3x3_2_out", ")", "\n", "inception_3c_relu_double_3x3_2_out", "=", "self", ".", "inception_3c_relu_double_3x3_2", "(", "inception_3c_double_3x3_2_bn_out", ")", "\n", "inception_3c_pool_out", "=", "self", ".", "inception_3c_pool", "(", "inception_3b_output_out", ")", "\n", "inception_3c_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3c_3x3_bn_out", ",", "inception_3c_double_3x3_2_bn_out", ",", "inception_3c_pool_out", "]", ",", "1", ")", "\n", "return", "inception_3c_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_4a": [[210, 239], ["bn_inception.BNInception.inception_4a_1x1", "bn_inception.BNInception.inception_4a_1x1_bn", "bn_inception.BNInception.inception_4a_relu_1x1", "bn_inception.BNInception.inception_4a_3x3_reduce", "bn_inception.BNInception.inception_4a_3x3_reduce_bn", "bn_inception.BNInception.inception_4a_relu_3x3_reduce", "bn_inception.BNInception.inception_4a_3x3", "bn_inception.BNInception.inception_4a_3x3_bn", "bn_inception.BNInception.inception_4a_relu_3x3", "bn_inception.BNInception.inception_4a_double_3x3_reduce", "bn_inception.BNInception.inception_4a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4a_double_3x3_1", "bn_inception.BNInception.inception_4a_double_3x3_1_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_1", "bn_inception.BNInception.inception_4a_double_3x3_2", "bn_inception.BNInception.inception_4a_double_3x3_2_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_2", "bn_inception.BNInception.inception_4a_pool", "bn_inception.BNInception.inception_4a_pool_proj", "bn_inception.BNInception.inception_4a_pool_proj_bn", "bn_inception.BNInception.inception_4a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4a", "(", "self", ",", "inception_3c_output_out", ")", ":", "\n", "        ", "inception_4a_1x1_out", "=", "self", ".", "inception_4a_1x1", "(", "inception_3c_output_out", ")", "\n", "inception_4a_1x1_bn_out", "=", "self", ".", "inception_4a_1x1_bn", "(", "inception_4a_1x1_out", ")", "\n", "inception_4a_relu_1x1_out", "=", "self", ".", "inception_4a_relu_1x1", "(", "inception_4a_1x1_bn_out", ")", "\n", "inception_4a_3x3_reduce_out", "=", "self", ".", "inception_4a_3x3_reduce", "(", "inception_3c_output_out", ")", "\n", "inception_4a_3x3_reduce_bn_out", "=", "self", ".", "inception_4a_3x3_reduce_bn", "(", "inception_4a_3x3_reduce_out", ")", "\n", "inception_4a_relu_3x3_reduce_out", "=", "self", ".", "inception_4a_relu_3x3_reduce", "(", "inception_4a_3x3_reduce_bn_out", ")", "\n", "inception_4a_3x3_out", "=", "self", ".", "inception_4a_3x3", "(", "inception_4a_3x3_reduce_bn_out", ")", "\n", "inception_4a_3x3_bn_out", "=", "self", ".", "inception_4a_3x3_bn", "(", "inception_4a_3x3_out", ")", "\n", "inception_4a_relu_3x3_out", "=", "self", ".", "inception_4a_relu_3x3", "(", "inception_4a_3x3_bn_out", ")", "\n", "inception_4a_double_3x3_reduce_out", "=", "self", ".", "inception_4a_double_3x3_reduce", "(", "inception_3c_output_out", ")", "\n", "inception_4a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4a_double_3x3_reduce_bn", "(", "\n", "inception_4a_double_3x3_reduce_out", ")", "\n", "inception_4a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4a_relu_double_3x3_reduce", "(", "\n", "inception_4a_double_3x3_reduce_bn_out", ")", "\n", "inception_4a_double_3x3_1_out", "=", "self", ".", "inception_4a_double_3x3_1", "(", "inception_4a_double_3x3_reduce_bn_out", ")", "\n", "inception_4a_double_3x3_1_bn_out", "=", "self", ".", "inception_4a_double_3x3_1_bn", "(", "inception_4a_double_3x3_1_out", ")", "\n", "inception_4a_relu_double_3x3_1_out", "=", "self", ".", "inception_4a_relu_double_3x3_1", "(", "inception_4a_double_3x3_1_bn_out", ")", "\n", "inception_4a_double_3x3_2_out", "=", "self", ".", "inception_4a_double_3x3_2", "(", "inception_4a_double_3x3_1_bn_out", ")", "\n", "inception_4a_double_3x3_2_bn_out", "=", "self", ".", "inception_4a_double_3x3_2_bn", "(", "inception_4a_double_3x3_2_out", ")", "\n", "inception_4a_relu_double_3x3_2_out", "=", "self", ".", "inception_4a_relu_double_3x3_2", "(", "inception_4a_double_3x3_2_bn_out", ")", "\n", "inception_4a_pool_out", "=", "self", ".", "inception_4a_pool", "(", "inception_3c_output_out", ")", "\n", "inception_4a_pool_proj_out", "=", "self", ".", "inception_4a_pool_proj", "(", "inception_4a_pool_out", ")", "\n", "inception_4a_pool_proj_bn_out", "=", "self", ".", "inception_4a_pool_proj_bn", "(", "inception_4a_pool_proj_out", ")", "\n", "inception_4a_relu_pool_proj_out", "=", "self", ".", "inception_4a_relu_pool_proj", "(", "inception_4a_pool_proj_bn_out", ")", "\n", "inception_4a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4a_1x1_bn_out", ",", "inception_4a_3x3_bn_out", ",", "inception_4a_double_3x3_2_bn_out", ",", "\n", "inception_4a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_4b": [[240, 269], ["bn_inception.BNInception.inception_4b_1x1", "bn_inception.BNInception.inception_4b_1x1_bn", "bn_inception.BNInception.inception_4b_relu_1x1", "bn_inception.BNInception.inception_4b_3x3_reduce", "bn_inception.BNInception.inception_4b_3x3_reduce_bn", "bn_inception.BNInception.inception_4b_relu_3x3_reduce", "bn_inception.BNInception.inception_4b_3x3", "bn_inception.BNInception.inception_4b_3x3_bn", "bn_inception.BNInception.inception_4b_relu_3x3", "bn_inception.BNInception.inception_4b_double_3x3_reduce", "bn_inception.BNInception.inception_4b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4b_double_3x3_1", "bn_inception.BNInception.inception_4b_double_3x3_1_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_1", "bn_inception.BNInception.inception_4b_double_3x3_2", "bn_inception.BNInception.inception_4b_double_3x3_2_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_2", "bn_inception.BNInception.inception_4b_pool", "bn_inception.BNInception.inception_4b_pool_proj", "bn_inception.BNInception.inception_4b_pool_proj_bn", "bn_inception.BNInception.inception_4b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4b", "(", "self", ",", "inception_4a_output_out", ")", ":", "\n", "        ", "inception_4b_1x1_out", "=", "self", ".", "inception_4b_1x1", "(", "inception_4a_output_out", ")", "\n", "inception_4b_1x1_bn_out", "=", "self", ".", "inception_4b_1x1_bn", "(", "inception_4b_1x1_out", ")", "\n", "inception_4b_relu_1x1_out", "=", "self", ".", "inception_4b_relu_1x1", "(", "inception_4b_1x1_bn_out", ")", "\n", "inception_4b_3x3_reduce_out", "=", "self", ".", "inception_4b_3x3_reduce", "(", "inception_4a_output_out", ")", "\n", "inception_4b_3x3_reduce_bn_out", "=", "self", ".", "inception_4b_3x3_reduce_bn", "(", "inception_4b_3x3_reduce_out", ")", "\n", "inception_4b_relu_3x3_reduce_out", "=", "self", ".", "inception_4b_relu_3x3_reduce", "(", "inception_4b_3x3_reduce_bn_out", ")", "\n", "inception_4b_3x3_out", "=", "self", ".", "inception_4b_3x3", "(", "inception_4b_3x3_reduce_bn_out", ")", "\n", "inception_4b_3x3_bn_out", "=", "self", ".", "inception_4b_3x3_bn", "(", "inception_4b_3x3_out", ")", "\n", "inception_4b_relu_3x3_out", "=", "self", ".", "inception_4b_relu_3x3", "(", "inception_4b_3x3_bn_out", ")", "\n", "inception_4b_double_3x3_reduce_out", "=", "self", ".", "inception_4b_double_3x3_reduce", "(", "inception_4a_output_out", ")", "\n", "inception_4b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4b_double_3x3_reduce_bn", "(", "\n", "inception_4b_double_3x3_reduce_out", ")", "\n", "inception_4b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4b_relu_double_3x3_reduce", "(", "\n", "inception_4b_double_3x3_reduce_bn_out", ")", "\n", "inception_4b_double_3x3_1_out", "=", "self", ".", "inception_4b_double_3x3_1", "(", "inception_4b_double_3x3_reduce_bn_out", ")", "\n", "inception_4b_double_3x3_1_bn_out", "=", "self", ".", "inception_4b_double_3x3_1_bn", "(", "inception_4b_double_3x3_1_out", ")", "\n", "inception_4b_relu_double_3x3_1_out", "=", "self", ".", "inception_4b_relu_double_3x3_1", "(", "inception_4b_double_3x3_1_bn_out", ")", "\n", "inception_4b_double_3x3_2_out", "=", "self", ".", "inception_4b_double_3x3_2", "(", "inception_4b_double_3x3_1_bn_out", ")", "\n", "inception_4b_double_3x3_2_bn_out", "=", "self", ".", "inception_4b_double_3x3_2_bn", "(", "inception_4b_double_3x3_2_out", ")", "\n", "inception_4b_relu_double_3x3_2_out", "=", "self", ".", "inception_4b_relu_double_3x3_2", "(", "inception_4b_double_3x3_2_bn_out", ")", "\n", "inception_4b_pool_out", "=", "self", ".", "inception_4b_pool", "(", "inception_4a_output_out", ")", "\n", "inception_4b_pool_proj_out", "=", "self", ".", "inception_4b_pool_proj", "(", "inception_4b_pool_out", ")", "\n", "inception_4b_pool_proj_bn_out", "=", "self", ".", "inception_4b_pool_proj_bn", "(", "inception_4b_pool_proj_out", ")", "\n", "inception_4b_relu_pool_proj_out", "=", "self", ".", "inception_4b_relu_pool_proj", "(", "inception_4b_pool_proj_bn_out", ")", "\n", "inception_4b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4b_1x1_bn_out", ",", "inception_4b_3x3_bn_out", ",", "inception_4b_double_3x3_2_bn_out", ",", "\n", "inception_4b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_4c": [[270, 299], ["bn_inception.BNInception.inception_4c_1x1", "bn_inception.BNInception.inception_4c_1x1_bn", "bn_inception.BNInception.inception_4c_relu_1x1", "bn_inception.BNInception.inception_4c_3x3_reduce", "bn_inception.BNInception.inception_4c_3x3_reduce_bn", "bn_inception.BNInception.inception_4c_relu_3x3_reduce", "bn_inception.BNInception.inception_4c_3x3", "bn_inception.BNInception.inception_4c_3x3_bn", "bn_inception.BNInception.inception_4c_relu_3x3", "bn_inception.BNInception.inception_4c_double_3x3_reduce", "bn_inception.BNInception.inception_4c_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4c_double_3x3_1", "bn_inception.BNInception.inception_4c_double_3x3_1_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_1", "bn_inception.BNInception.inception_4c_double_3x3_2", "bn_inception.BNInception.inception_4c_double_3x3_2_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_2", "bn_inception.BNInception.inception_4c_pool", "bn_inception.BNInception.inception_4c_pool_proj", "bn_inception.BNInception.inception_4c_pool_proj_bn", "bn_inception.BNInception.inception_4c_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4c", "(", "self", ",", "inception_4b_output_out", ")", ":", "\n", "        ", "inception_4c_1x1_out", "=", "self", ".", "inception_4c_1x1", "(", "inception_4b_output_out", ")", "\n", "inception_4c_1x1_bn_out", "=", "self", ".", "inception_4c_1x1_bn", "(", "inception_4c_1x1_out", ")", "\n", "inception_4c_relu_1x1_out", "=", "self", ".", "inception_4c_relu_1x1", "(", "inception_4c_1x1_bn_out", ")", "\n", "inception_4c_3x3_reduce_out", "=", "self", ".", "inception_4c_3x3_reduce", "(", "inception_4b_output_out", ")", "\n", "inception_4c_3x3_reduce_bn_out", "=", "self", ".", "inception_4c_3x3_reduce_bn", "(", "inception_4c_3x3_reduce_out", ")", "\n", "inception_4c_relu_3x3_reduce_out", "=", "self", ".", "inception_4c_relu_3x3_reduce", "(", "inception_4c_3x3_reduce_bn_out", ")", "\n", "inception_4c_3x3_out", "=", "self", ".", "inception_4c_3x3", "(", "inception_4c_3x3_reduce_bn_out", ")", "\n", "inception_4c_3x3_bn_out", "=", "self", ".", "inception_4c_3x3_bn", "(", "inception_4c_3x3_out", ")", "\n", "inception_4c_relu_3x3_out", "=", "self", ".", "inception_4c_relu_3x3", "(", "inception_4c_3x3_bn_out", ")", "\n", "inception_4c_double_3x3_reduce_out", "=", "self", ".", "inception_4c_double_3x3_reduce", "(", "inception_4b_output_out", ")", "\n", "inception_4c_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4c_double_3x3_reduce_bn", "(", "\n", "inception_4c_double_3x3_reduce_out", ")", "\n", "inception_4c_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4c_relu_double_3x3_reduce", "(", "\n", "inception_4c_double_3x3_reduce_bn_out", ")", "\n", "inception_4c_double_3x3_1_out", "=", "self", ".", "inception_4c_double_3x3_1", "(", "inception_4c_double_3x3_reduce_bn_out", ")", "\n", "inception_4c_double_3x3_1_bn_out", "=", "self", ".", "inception_4c_double_3x3_1_bn", "(", "inception_4c_double_3x3_1_out", ")", "\n", "inception_4c_relu_double_3x3_1_out", "=", "self", ".", "inception_4c_relu_double_3x3_1", "(", "inception_4c_double_3x3_1_bn_out", ")", "\n", "inception_4c_double_3x3_2_out", "=", "self", ".", "inception_4c_double_3x3_2", "(", "inception_4c_double_3x3_1_bn_out", ")", "\n", "inception_4c_double_3x3_2_bn_out", "=", "self", ".", "inception_4c_double_3x3_2_bn", "(", "inception_4c_double_3x3_2_out", ")", "\n", "inception_4c_relu_double_3x3_2_out", "=", "self", ".", "inception_4c_relu_double_3x3_2", "(", "inception_4c_double_3x3_2_bn_out", ")", "\n", "inception_4c_pool_out", "=", "self", ".", "inception_4c_pool", "(", "inception_4b_output_out", ")", "\n", "inception_4c_pool_proj_out", "=", "self", ".", "inception_4c_pool_proj", "(", "inception_4c_pool_out", ")", "\n", "inception_4c_pool_proj_bn_out", "=", "self", ".", "inception_4c_pool_proj_bn", "(", "inception_4c_pool_proj_out", ")", "\n", "inception_4c_relu_pool_proj_out", "=", "self", ".", "inception_4c_relu_pool_proj", "(", "inception_4c_pool_proj_bn_out", ")", "\n", "inception_4c_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4c_1x1_bn_out", ",", "inception_4c_3x3_bn_out", ",", "inception_4c_double_3x3_2_bn_out", ",", "\n", "inception_4c_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4c_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_4d": [[300, 329], ["bn_inception.BNInception.inception_4d_1x1", "bn_inception.BNInception.inception_4d_1x1_bn", "bn_inception.BNInception.inception_4d_relu_1x1", "bn_inception.BNInception.inception_4d_3x3_reduce", "bn_inception.BNInception.inception_4d_3x3_reduce_bn", "bn_inception.BNInception.inception_4d_relu_3x3_reduce", "bn_inception.BNInception.inception_4d_3x3", "bn_inception.BNInception.inception_4d_3x3_bn", "bn_inception.BNInception.inception_4d_relu_3x3", "bn_inception.BNInception.inception_4d_double_3x3_reduce", "bn_inception.BNInception.inception_4d_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4d_double_3x3_1", "bn_inception.BNInception.inception_4d_double_3x3_1_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_1", "bn_inception.BNInception.inception_4d_double_3x3_2", "bn_inception.BNInception.inception_4d_double_3x3_2_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_2", "bn_inception.BNInception.inception_4d_pool", "bn_inception.BNInception.inception_4d_pool_proj", "bn_inception.BNInception.inception_4d_pool_proj_bn", "bn_inception.BNInception.inception_4d_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4d", "(", "self", ",", "inception_4c_output_out", ")", ":", "\n", "        ", "inception_4d_1x1_out", "=", "self", ".", "inception_4d_1x1", "(", "inception_4c_output_out", ")", "\n", "inception_4d_1x1_bn_out", "=", "self", ".", "inception_4d_1x1_bn", "(", "inception_4d_1x1_out", ")", "\n", "inception_4d_relu_1x1_out", "=", "self", ".", "inception_4d_relu_1x1", "(", "inception_4d_1x1_bn_out", ")", "\n", "inception_4d_3x3_reduce_out", "=", "self", ".", "inception_4d_3x3_reduce", "(", "inception_4c_output_out", ")", "\n", "inception_4d_3x3_reduce_bn_out", "=", "self", ".", "inception_4d_3x3_reduce_bn", "(", "inception_4d_3x3_reduce_out", ")", "\n", "inception_4d_relu_3x3_reduce_out", "=", "self", ".", "inception_4d_relu_3x3_reduce", "(", "inception_4d_3x3_reduce_bn_out", ")", "\n", "inception_4d_3x3_out", "=", "self", ".", "inception_4d_3x3", "(", "inception_4d_3x3_reduce_bn_out", ")", "\n", "inception_4d_3x3_bn_out", "=", "self", ".", "inception_4d_3x3_bn", "(", "inception_4d_3x3_out", ")", "\n", "inception_4d_relu_3x3_out", "=", "self", ".", "inception_4d_relu_3x3", "(", "inception_4d_3x3_bn_out", ")", "\n", "inception_4d_double_3x3_reduce_out", "=", "self", ".", "inception_4d_double_3x3_reduce", "(", "inception_4c_output_out", ")", "\n", "inception_4d_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4d_double_3x3_reduce_bn", "(", "\n", "inception_4d_double_3x3_reduce_out", ")", "\n", "inception_4d_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4d_relu_double_3x3_reduce", "(", "\n", "inception_4d_double_3x3_reduce_bn_out", ")", "\n", "inception_4d_double_3x3_1_out", "=", "self", ".", "inception_4d_double_3x3_1", "(", "inception_4d_double_3x3_reduce_bn_out", ")", "\n", "inception_4d_double_3x3_1_bn_out", "=", "self", ".", "inception_4d_double_3x3_1_bn", "(", "inception_4d_double_3x3_1_out", ")", "\n", "inception_4d_relu_double_3x3_1_out", "=", "self", ".", "inception_4d_relu_double_3x3_1", "(", "inception_4d_double_3x3_1_bn_out", ")", "\n", "inception_4d_double_3x3_2_out", "=", "self", ".", "inception_4d_double_3x3_2", "(", "inception_4d_double_3x3_1_bn_out", ")", "\n", "inception_4d_double_3x3_2_bn_out", "=", "self", ".", "inception_4d_double_3x3_2_bn", "(", "inception_4d_double_3x3_2_out", ")", "\n", "inception_4d_relu_double_3x3_2_out", "=", "self", ".", "inception_4d_relu_double_3x3_2", "(", "inception_4d_double_3x3_2_bn_out", ")", "\n", "inception_4d_pool_out", "=", "self", ".", "inception_4d_pool", "(", "inception_4c_output_out", ")", "\n", "inception_4d_pool_proj_out", "=", "self", ".", "inception_4d_pool_proj", "(", "inception_4d_pool_out", ")", "\n", "inception_4d_pool_proj_bn_out", "=", "self", ".", "inception_4d_pool_proj_bn", "(", "inception_4d_pool_proj_out", ")", "\n", "inception_4d_relu_pool_proj_out", "=", "self", ".", "inception_4d_relu_pool_proj", "(", "inception_4d_pool_proj_bn_out", ")", "\n", "inception_4d_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4d_1x1_bn_out", ",", "inception_4d_3x3_bn_out", ",", "inception_4d_double_3x3_2_bn_out", ",", "\n", "inception_4d_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4d_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_4e": [[330, 352], ["bn_inception.BNInception.inception_4e_3x3_reduce", "bn_inception.BNInception.inception_4e_3x3_reduce_bn", "bn_inception.BNInception.inception_4e_relu_3x3_reduce", "bn_inception.BNInception.inception_4e_3x3", "bn_inception.BNInception.inception_4e_3x3_bn", "bn_inception.BNInception.inception_4e_relu_3x3", "bn_inception.BNInception.inception_4e_double_3x3_reduce", "bn_inception.BNInception.inception_4e_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4e_double_3x3_1", "bn_inception.BNInception.inception_4e_double_3x3_1_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_1", "bn_inception.BNInception.inception_4e_double_3x3_2", "bn_inception.BNInception.inception_4e_double_3x3_2_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_2", "bn_inception.BNInception.inception_4e_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4e", "(", "self", ",", "inception_4d_output_out", ")", ":", "\n", "        ", "inception_4e_3x3_reduce_out", "=", "self", ".", "inception_4e_3x3_reduce", "(", "inception_4d_output_out", ")", "\n", "inception_4e_3x3_reduce_bn_out", "=", "self", ".", "inception_4e_3x3_reduce_bn", "(", "inception_4e_3x3_reduce_out", ")", "\n", "inception_4e_relu_3x3_reduce_out", "=", "self", ".", "inception_4e_relu_3x3_reduce", "(", "inception_4e_3x3_reduce_bn_out", ")", "\n", "inception_4e_3x3_out", "=", "self", ".", "inception_4e_3x3", "(", "inception_4e_3x3_reduce_bn_out", ")", "\n", "inception_4e_3x3_bn_out", "=", "self", ".", "inception_4e_3x3_bn", "(", "inception_4e_3x3_out", ")", "\n", "inception_4e_relu_3x3_out", "=", "self", ".", "inception_4e_relu_3x3", "(", "inception_4e_3x3_bn_out", ")", "\n", "inception_4e_double_3x3_reduce_out", "=", "self", ".", "inception_4e_double_3x3_reduce", "(", "inception_4d_output_out", ")", "\n", "inception_4e_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4e_double_3x3_reduce_bn", "(", "\n", "inception_4e_double_3x3_reduce_out", ")", "\n", "inception_4e_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4e_relu_double_3x3_reduce", "(", "\n", "inception_4e_double_3x3_reduce_bn_out", ")", "\n", "inception_4e_double_3x3_1_out", "=", "self", ".", "inception_4e_double_3x3_1", "(", "inception_4e_double_3x3_reduce_bn_out", ")", "\n", "inception_4e_double_3x3_1_bn_out", "=", "self", ".", "inception_4e_double_3x3_1_bn", "(", "inception_4e_double_3x3_1_out", ")", "\n", "inception_4e_relu_double_3x3_1_out", "=", "self", ".", "inception_4e_relu_double_3x3_1", "(", "inception_4e_double_3x3_1_bn_out", ")", "\n", "inception_4e_double_3x3_2_out", "=", "self", ".", "inception_4e_double_3x3_2", "(", "inception_4e_double_3x3_1_bn_out", ")", "\n", "inception_4e_double_3x3_2_bn_out", "=", "self", ".", "inception_4e_double_3x3_2_bn", "(", "inception_4e_double_3x3_2_out", ")", "\n", "inception_4e_relu_double_3x3_2_out", "=", "self", ".", "inception_4e_relu_double_3x3_2", "(", "inception_4e_double_3x3_2_bn_out", ")", "\n", "inception_4e_pool_out", "=", "self", ".", "inception_4e_pool", "(", "inception_4d_output_out", ")", "\n", "inception_4e_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4e_3x3_bn_out", ",", "inception_4e_double_3x3_2_bn_out", ",", "inception_4e_pool_out", "]", ",", "1", ")", "\n", "return", "inception_4e_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_5a": [[353, 382], ["bn_inception.BNInception.inception_5a_1x1", "bn_inception.BNInception.inception_5a_1x1_bn", "bn_inception.BNInception.inception_5a_relu_1x1", "bn_inception.BNInception.inception_5a_3x3_reduce", "bn_inception.BNInception.inception_5a_3x3_reduce_bn", "bn_inception.BNInception.inception_5a_relu_3x3_reduce", "bn_inception.BNInception.inception_5a_3x3", "bn_inception.BNInception.inception_5a_3x3_bn", "bn_inception.BNInception.inception_5a_relu_3x3", "bn_inception.BNInception.inception_5a_double_3x3_reduce", "bn_inception.BNInception.inception_5a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_5a_double_3x3_1", "bn_inception.BNInception.inception_5a_double_3x3_1_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_1", "bn_inception.BNInception.inception_5a_double_3x3_2", "bn_inception.BNInception.inception_5a_double_3x3_2_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_2", "bn_inception.BNInception.inception_5a_pool", "bn_inception.BNInception.inception_5a_pool_proj", "bn_inception.BNInception.inception_5a_pool_proj_bn", "bn_inception.BNInception.inception_5a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_5a", "(", "self", ",", "inception_4e_output_out", ")", ":", "\n", "        ", "inception_5a_1x1_out", "=", "self", ".", "inception_5a_1x1", "(", "inception_4e_output_out", ")", "\n", "inception_5a_1x1_bn_out", "=", "self", ".", "inception_5a_1x1_bn", "(", "inception_5a_1x1_out", ")", "\n", "inception_5a_relu_1x1_out", "=", "self", ".", "inception_5a_relu_1x1", "(", "inception_5a_1x1_bn_out", ")", "\n", "inception_5a_3x3_reduce_out", "=", "self", ".", "inception_5a_3x3_reduce", "(", "inception_4e_output_out", ")", "\n", "inception_5a_3x3_reduce_bn_out", "=", "self", ".", "inception_5a_3x3_reduce_bn", "(", "inception_5a_3x3_reduce_out", ")", "\n", "inception_5a_relu_3x3_reduce_out", "=", "self", ".", "inception_5a_relu_3x3_reduce", "(", "inception_5a_3x3_reduce_bn_out", ")", "\n", "inception_5a_3x3_out", "=", "self", ".", "inception_5a_3x3", "(", "inception_5a_3x3_reduce_bn_out", ")", "\n", "inception_5a_3x3_bn_out", "=", "self", ".", "inception_5a_3x3_bn", "(", "inception_5a_3x3_out", ")", "\n", "inception_5a_relu_3x3_out", "=", "self", ".", "inception_5a_relu_3x3", "(", "inception_5a_3x3_bn_out", ")", "\n", "inception_5a_double_3x3_reduce_out", "=", "self", ".", "inception_5a_double_3x3_reduce", "(", "inception_4e_output_out", ")", "\n", "inception_5a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_5a_double_3x3_reduce_bn", "(", "\n", "inception_5a_double_3x3_reduce_out", ")", "\n", "inception_5a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_5a_relu_double_3x3_reduce", "(", "\n", "inception_5a_double_3x3_reduce_bn_out", ")", "\n", "inception_5a_double_3x3_1_out", "=", "self", ".", "inception_5a_double_3x3_1", "(", "inception_5a_double_3x3_reduce_bn_out", ")", "\n", "inception_5a_double_3x3_1_bn_out", "=", "self", ".", "inception_5a_double_3x3_1_bn", "(", "inception_5a_double_3x3_1_out", ")", "\n", "inception_5a_relu_double_3x3_1_out", "=", "self", ".", "inception_5a_relu_double_3x3_1", "(", "inception_5a_double_3x3_1_bn_out", ")", "\n", "inception_5a_double_3x3_2_out", "=", "self", ".", "inception_5a_double_3x3_2", "(", "inception_5a_double_3x3_1_bn_out", ")", "\n", "inception_5a_double_3x3_2_bn_out", "=", "self", ".", "inception_5a_double_3x3_2_bn", "(", "inception_5a_double_3x3_2_out", ")", "\n", "inception_5a_relu_double_3x3_2_out", "=", "self", ".", "inception_5a_relu_double_3x3_2", "(", "inception_5a_double_3x3_2_bn_out", ")", "\n", "inception_5a_pool_out", "=", "self", ".", "inception_5a_pool", "(", "inception_4e_output_out", ")", "\n", "inception_5a_pool_proj_out", "=", "self", ".", "inception_5a_pool_proj", "(", "inception_5a_pool_out", ")", "\n", "inception_5a_pool_proj_bn_out", "=", "self", ".", "inception_5a_pool_proj_bn", "(", "inception_5a_pool_proj_out", ")", "\n", "inception_5a_relu_pool_proj_out", "=", "self", ".", "inception_5a_relu_pool_proj", "(", "inception_5a_pool_proj_bn_out", ")", "\n", "inception_5a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_5a_1x1_bn_out", ",", "inception_5a_3x3_bn_out", ",", "inception_5a_double_3x3_2_bn_out", ",", "\n", "inception_5a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_5a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._block_5b": [[383, 412], ["bn_inception.BNInception.inception_5b_1x1", "bn_inception.BNInception.inception_5b_1x1_bn", "bn_inception.BNInception.inception_5b_relu_1x1", "bn_inception.BNInception.inception_5b_3x3_reduce", "bn_inception.BNInception.inception_5b_3x3_reduce_bn", "bn_inception.BNInception.inception_5b_relu_3x3_reduce", "bn_inception.BNInception.inception_5b_3x3", "bn_inception.BNInception.inception_5b_3x3_bn", "bn_inception.BNInception.inception_5b_relu_3x3", "bn_inception.BNInception.inception_5b_double_3x3_reduce", "bn_inception.BNInception.inception_5b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_5b_double_3x3_1", "bn_inception.BNInception.inception_5b_double_3x3_1_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_1", "bn_inception.BNInception.inception_5b_double_3x3_2", "bn_inception.BNInception.inception_5b_double_3x3_2_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_2", "bn_inception.BNInception.inception_5b_pool", "bn_inception.BNInception.inception_5b_pool_proj", "bn_inception.BNInception.inception_5b_pool_proj_bn", "bn_inception.BNInception.inception_5b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_5b", "(", "self", ",", "inception_5a_output_out", ")", ":", "\n", "        ", "inception_5b_1x1_out", "=", "self", ".", "inception_5b_1x1", "(", "inception_5a_output_out", ")", "\n", "inception_5b_1x1_bn_out", "=", "self", ".", "inception_5b_1x1_bn", "(", "inception_5b_1x1_out", ")", "\n", "inception_5b_relu_1x1_out", "=", "self", ".", "inception_5b_relu_1x1", "(", "inception_5b_1x1_bn_out", ")", "\n", "inception_5b_3x3_reduce_out", "=", "self", ".", "inception_5b_3x3_reduce", "(", "inception_5a_output_out", ")", "\n", "inception_5b_3x3_reduce_bn_out", "=", "self", ".", "inception_5b_3x3_reduce_bn", "(", "inception_5b_3x3_reduce_out", ")", "\n", "inception_5b_relu_3x3_reduce_out", "=", "self", ".", "inception_5b_relu_3x3_reduce", "(", "inception_5b_3x3_reduce_bn_out", ")", "\n", "inception_5b_3x3_out", "=", "self", ".", "inception_5b_3x3", "(", "inception_5b_3x3_reduce_bn_out", ")", "\n", "inception_5b_3x3_bn_out", "=", "self", ".", "inception_5b_3x3_bn", "(", "inception_5b_3x3_out", ")", "\n", "inception_5b_relu_3x3_out", "=", "self", ".", "inception_5b_relu_3x3", "(", "inception_5b_3x3_bn_out", ")", "\n", "inception_5b_double_3x3_reduce_out", "=", "self", ".", "inception_5b_double_3x3_reduce", "(", "inception_5a_output_out", ")", "\n", "inception_5b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_5b_double_3x3_reduce_bn", "(", "\n", "inception_5b_double_3x3_reduce_out", ")", "\n", "inception_5b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_5b_relu_double_3x3_reduce", "(", "\n", "inception_5b_double_3x3_reduce_bn_out", ")", "\n", "inception_5b_double_3x3_1_out", "=", "self", ".", "inception_5b_double_3x3_1", "(", "inception_5b_double_3x3_reduce_bn_out", ")", "\n", "inception_5b_double_3x3_1_bn_out", "=", "self", ".", "inception_5b_double_3x3_1_bn", "(", "inception_5b_double_3x3_1_out", ")", "\n", "inception_5b_relu_double_3x3_1_out", "=", "self", ".", "inception_5b_relu_double_3x3_1", "(", "inception_5b_double_3x3_1_bn_out", ")", "\n", "inception_5b_double_3x3_2_out", "=", "self", ".", "inception_5b_double_3x3_2", "(", "inception_5b_double_3x3_1_bn_out", ")", "\n", "inception_5b_double_3x3_2_bn_out", "=", "self", ".", "inception_5b_double_3x3_2_bn", "(", "inception_5b_double_3x3_2_out", ")", "\n", "inception_5b_relu_double_3x3_2_out", "=", "self", ".", "inception_5b_relu_double_3x3_2", "(", "inception_5b_double_3x3_2_bn_out", ")", "\n", "inception_5b_pool_out", "=", "self", ".", "inception_5b_pool", "(", "inception_5a_output_out", ")", "\n", "inception_5b_pool_proj_out", "=", "self", ".", "inception_5b_pool_proj", "(", "inception_5b_pool_out", ")", "\n", "inception_5b_pool_proj_bn_out", "=", "self", ".", "inception_5b_pool_proj_bn", "(", "inception_5b_pool_proj_out", ")", "\n", "inception_5b_relu_pool_proj_out", "=", "self", ".", "inception_5b_relu_pool_proj", "(", "inception_5b_pool_proj_bn_out", ")", "\n", "inception_5b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_5b_1x1_bn_out", ",", "inception_5b_3x3_bn_out", ",", "inception_5b_double_3x3_2_bn_out", ",", "\n", "inception_5b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_5b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.BNInception._build_features": [[413, 635], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "_build_features", "(", "self", ",", "inplace", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "conv1_7x7_s2", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "conv1_7x7_s2_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv1_relu_7x7", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "pool1_3x3_s2", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv2_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "conv2_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "pool2_3x3_s2", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_3a_1x1", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_3a_pool_proj", "=", "nn", ".", "Conv2d", "(", "192", ",", "32", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "32", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_1x1", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_3b_pool_proj", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "320", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "320", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_4a_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "224", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4a_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_3x3", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4b_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "160", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4c_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_1x1", "=", "nn", ".", "Conv2d", "(", "608", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "160", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4d_pool_proj", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "192", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_5a_1x1", "=", "nn", ".", "Conv2d", "(", "1056", ",", "352", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "352", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1056", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_3x3", "=", "nn", ".", "Conv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "320", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1056", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "160", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "224", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_5a_pool_proj", "=", "nn", ".", "Conv2d", "(", "1056", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_1x1", "=", "nn", ".", "Conv2d", "(", "1024", ",", "352", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "352", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1024", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_3x3", "=", "nn", ".", "Conv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "320", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1024", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "192", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "224", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_5b_pool_proj", "=", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.archs.bn_inception.bninception": [[637, 654], ["print", "bn_inception.BNInception", "BNInception.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "bninception", "(", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "r\"\"\"BNInception model architecture from <https://arxiv.org/pdf/1502.03167.pdf>`_ paper.\n    \"\"\"", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "print", "(", "'=> Loading from pretrained model: {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "settings", "=", "pretrained_settings", "[", "'bninception'", "]", "[", "pretrained", "]", "\n", "num_classes", "=", "settings", "[", "'num_classes'", "]", "\n", "model", "=", "BNInception", "(", "num_classes", "=", "num_classes", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.Unit3Dpy.__init__": [[39, 97], ["super().__init__", "i3dpt.get_padding_shape", "i3dpt.simplify_padding", "torch.nn.BatchNorm3d", "ValueError", "torch.nn.ConstantPad3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_padding_shape", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.simplify_padding"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_bias", "=", "False", ",", "\n", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Unit3Dpy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "if", "padding", "==", "'SAME'", ":", "\n", "            ", "padding_shape", "=", "get_padding_shape", "(", "kernel_size", ",", "stride", ")", "\n", "simplify_pad", ",", "pad_size", "=", "simplify_padding", "(", "padding_shape", ")", "\n", "self", ".", "simplify_pad", "=", "simplify_pad", "\n", "", "elif", "padding", "==", "'VALID'", ":", "\n", "            ", "padding_shape", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'padding should be in [VALID|SAME] but got {}'", ".", "format", "(", "padding", ")", ")", "\n", "\n", "", "if", "padding", "==", "'SAME'", ":", "\n", "            ", "if", "not", "simplify_pad", ":", "\n", "                ", "self", ".", "pad", "=", "torch", ".", "nn", ".", "ConstantPad3d", "(", "padding_shape", ",", "0", ")", "\n", "self", ".", "conv3d", "=", "torch", ".", "nn", ".", "Conv3d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "use_bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv3d", "=", "torch", ".", "nn", ".", "Conv3d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "pad_size", ",", "\n", "bias", "=", "use_bias", ")", "\n", "", "", "elif", "padding", "==", "'VALID'", ":", "\n", "            ", "self", ".", "conv3d", "=", "torch", ".", "nn", ".", "Conv3d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "padding_shape", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "use_bias", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'padding should be in [VALID|SAME] but got {}'", ".", "format", "(", "padding", ")", ")", "\n", "\n", "", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "batch3d", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.Unit3Dpy.forward": [[98, 107], ["i3dpt.Unit3Dpy.conv3d", "i3dpt.Unit3Dpy.pad", "i3dpt.Unit3Dpy.batch3d", "torch.nn.functional.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "padding", "==", "'SAME'", "and", "self", ".", "simplify_pad", "is", "False", ":", "\n", "            ", "inp", "=", "self", ".", "pad", "(", "inp", ")", "\n", "", "out", "=", "self", ".", "conv3d", "(", "inp", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "out", "=", "self", ".", "batch3d", "(", "out", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "out", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.MaxPool3dTFPadding.__init__": [[110, 117], ["super().__init__", "torch.nn.MaxPool3d", "i3dpt.get_padding_shape", "torch.nn.ConstantPad3d"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_padding_shape"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "None", ",", "padding", "=", "'SAME'", ")", ":", "\n", "        ", "super", "(", "MaxPool3dTFPadding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "padding", "==", "'SAME'", ":", "\n", "            ", "padding_shape", "=", "get_padding_shape", "(", "kernel_size", ",", "stride", ")", "\n", "self", ".", "padding_shape", "=", "padding_shape", "\n", "self", ".", "pad", "=", "torch", ".", "nn", ".", "ConstantPad3d", "(", "padding_shape", ",", "0", ")", "\n", "", "self", ".", "pool", "=", "torch", ".", "nn", ".", "MaxPool3d", "(", "kernel_size", ",", "stride", ",", "ceil_mode", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.MaxPool3dTFPadding.forward": [[118, 122], ["i3dpt.MaxPool3dTFPadding.pad", "i3dpt.MaxPool3dTFPadding.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "inp", "=", "self", ".", "pad", "(", "inp", ")", "\n", "out", "=", "self", ".", "pool", "(", "inp", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.Mixed.__init__": [[125, 151], ["super().__init__", "i3dpt.Unit3Dpy", "i3dpt.Unit3Dpy", "i3dpt.Unit3Dpy", "torch.nn.Sequential", "i3dpt.Unit3Dpy", "i3dpt.Unit3Dpy", "torch.nn.Sequential", "i3dpt.MaxPool3dTFPadding", "i3dpt.Unit3Dpy", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "Mixed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Branch 0", "\n", "self", ".", "branch_0", "=", "Unit3Dpy", "(", "\n", "in_channels", ",", "out_channels", "[", "0", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Branch 1", "\n", "branch_1_conv1", "=", "Unit3Dpy", "(", "\n", "in_channels", ",", "out_channels", "[", "1", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "branch_1_conv2", "=", "Unit3Dpy", "(", "\n", "out_channels", "[", "1", "]", ",", "out_channels", "[", "2", "]", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "branch_1", "=", "torch", ".", "nn", ".", "Sequential", "(", "branch_1_conv1", ",", "branch_1_conv2", ")", "\n", "\n", "# Branch 2", "\n", "branch_2_conv1", "=", "Unit3Dpy", "(", "\n", "in_channels", ",", "out_channels", "[", "3", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "branch_2_conv2", "=", "Unit3Dpy", "(", "\n", "out_channels", "[", "3", "]", ",", "out_channels", "[", "4", "]", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "branch_2", "=", "torch", ".", "nn", ".", "Sequential", "(", "branch_2_conv1", ",", "branch_2_conv2", ")", "\n", "\n", "# Branch3", "\n", "branch_3_pool", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "'SAME'", ")", "\n", "branch_3_conv2", "=", "Unit3Dpy", "(", "\n", "in_channels", ",", "out_channels", "[", "5", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "branch_3", "=", "torch", ".", "nn", ".", "Sequential", "(", "branch_3_pool", ",", "branch_3_conv2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.Mixed.forward": [[152, 159], ["i3dpt.Mixed.branch_0", "i3dpt.Mixed.branch_1", "i3dpt.Mixed.branch_2", "i3dpt.Mixed.branch_3", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "out_0", "=", "self", ".", "branch_0", "(", "inp", ")", "\n", "out_1", "=", "self", ".", "branch_1", "(", "inp", ")", "\n", "out_2", "=", "self", ".", "branch_2", "(", "inp", ")", "\n", "out_3", "=", "self", ".", "branch_3", "(", "inp", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out_0", ",", "out_1", ",", "out_2", ",", "out_3", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.__init__": [[162, 239], ["super().__init__", "i3dpt.Unit3Dpy", "i3dpt.MaxPool3dTFPadding", "i3dpt.Unit3Dpy", "i3dpt.Unit3Dpy", "i3dpt.MaxPool3dTFPadding", "i3dpt.Mixed", "i3dpt.Mixed", "i3dpt.MaxPool3dTFPadding", "i3dpt.Mixed", "i3dpt.Mixed", "i3dpt.Mixed", "i3dpt.Mixed", "i3dpt.Mixed", "i3dpt.MaxPool3dTFPadding", "i3dpt.Mixed", "i3dpt.Mixed", "torch.nn.AvgPool3d", "torch.nn.AvgPool3d", "torch.nn.Dropout", "i3dpt.Unit3Dpy", "torch.nn.Softmax", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "modality", "=", "'rgb'", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "name", "=", "'inception'", ")", ":", "\n", "        ", "super", "(", "I3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "modality", "==", "'rgb'", ":", "\n", "            ", "in_channels", "=", "3", "\n", "", "elif", "modality", "==", "'flow'", ":", "\n", "            ", "in_channels", "=", "2", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'{} not among known modalities [rgb|flow]'", ".", "format", "(", "modality", ")", ")", "\n", "", "self", ".", "modality", "=", "modality", "\n", "\n", "conv3d_1a_7x7", "=", "Unit3Dpy", "(", "\n", "out_channels", "=", "64", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "kernel_size", "=", "(", "7", ",", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "# 1st conv-pool", "\n", "self", ".", "conv3d_1a_7x7", "=", "conv3d_1a_7x7", "\n", "self", ".", "maxPool3d_2a_3x3", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ")", "\n", "# conv conv", "\n", "conv3d_2b_1x1", "=", "Unit3Dpy", "(", "\n", "out_channels", "=", "64", ",", "\n", "in_channels", "=", "64", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "self", ".", "conv3d_2b_1x1", "=", "conv3d_2b_1x1", "\n", "conv3d_2c_3x3", "=", "Unit3Dpy", "(", "\n", "out_channels", "=", "192", ",", "\n", "in_channels", "=", "64", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "self", ".", "conv3d_2c_3x3", "=", "conv3d_2c_3x3", "\n", "self", ".", "maxPool3d_3a_3x3", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# Mixed_3b", "\n", "self", ".", "mixed_3b", "=", "Mixed", "(", "192", ",", "[", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", "]", ")", "\n", "self", ".", "mixed_3c", "=", "Mixed", "(", "256", ",", "[", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "]", ")", "\n", "\n", "self", ".", "maxPool3d_4a_3x3", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# Mixed 4", "\n", "self", ".", "mixed_4b", "=", "Mixed", "(", "480", ",", "[", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "]", ")", "\n", "self", ".", "mixed_4c", "=", "Mixed", "(", "512", ",", "[", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "]", ")", "\n", "self", ".", "mixed_4d", "=", "Mixed", "(", "512", ",", "[", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "]", ")", "\n", "self", ".", "mixed_4e", "=", "Mixed", "(", "512", ",", "[", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "]", ")", "\n", "self", ".", "mixed_4f", "=", "Mixed", "(", "528", ",", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ")", "\n", "\n", "self", ".", "maxPool3d_5a_2x2", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# Mixed 5", "\n", "self", ".", "mixed_5b", "=", "Mixed", "(", "832", ",", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ")", "\n", "self", ".", "mixed_5c", "=", "Mixed", "(", "832", ",", "[", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "]", ")", "\n", "\n", "self", ".", "avg_pool", "=", "torch", ".", "nn", ".", "AvgPool3d", "(", "(", "2", ",", "7", ",", "7", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "avg_pool2", "=", "torch", ".", "nn", ".", "AvgPool3d", "(", "(", "10", ",", "7", ",", "7", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout_prob", ")", "\n", "self", ".", "conv3d_0c_1x1", "=", "Unit3Dpy", "(", "\n", "in_channels", "=", "1024", ",", "\n", "out_channels", "=", "self", ".", "num_classes", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_bn", "=", "False", ")", "\n", "self", ".", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.forward": [[240, 267], ["i3dpt.I3D.conv3d_1a_7x7", "i3dpt.I3D.maxPool3d_2a_3x3", "i3dpt.I3D.conv3d_2b_1x1", "i3dpt.I3D.conv3d_2c_3x3", "i3dpt.I3D.maxPool3d_3a_3x3", "i3dpt.I3D.mixed_3b", "i3dpt.I3D.mixed_3c", "i3dpt.I3D.maxPool3d_4a_3x3", "i3dpt.I3D.mixed_4b", "i3dpt.I3D.mixed_4c", "i3dpt.I3D.mixed_4d", "i3dpt.I3D.mixed_4e", "i3dpt.I3D.mixed_4f", "i3dpt.I3D.maxPool3d_5a_2x2", "i3dpt.I3D.mixed_5b", "i3dpt.I3D.mixed_5c", "i3dpt.I3D.avg_pool", "i3dpt.I3D.dropout", "i3dpt.I3D.conv3d_0c_1x1", "i3dpt.I3D.squeeze", "i3dpt.I3D.squeeze", "i3dpt.I3D.mean", "i3dpt.I3D.softmax"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.utils.softmax"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "# Preprocessing", "\n", "        ", "out", "=", "self", ".", "conv3d_1a_7x7", "(", "inp", ")", "\n", "out", "=", "self", ".", "maxPool3d_2a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_2b_1x1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_2c_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_3a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_3b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_3c", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_4a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4c", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4d", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4e", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4f", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_5a_2x2", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_5b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_5c", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_0c_1x1", "(", "out", ")", "\n", "out", "=", "out", ".", "squeeze", "(", "3", ")", "\n", "out", "=", "out", ".", "squeeze", "(", "3", ")", "\n", "out", "=", "out", ".", "mean", "(", "2", ")", "\n", "out_logits", "=", "out", "\n", "out", "=", "self", ".", "softmax", "(", "out_logits", ")", "\n", "return", "out", ",", "out_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.feature_extract": [[268, 288], ["i3dpt.I3D.conv3d_1a_7x7", "i3dpt.I3D.maxPool3d_2a_3x3", "i3dpt.I3D.conv3d_2b_1x1", "i3dpt.I3D.conv3d_2c_3x3", "i3dpt.I3D.maxPool3d_3a_3x3", "i3dpt.I3D.mixed_3b", "i3dpt.I3D.mixed_3c", "i3dpt.I3D.maxPool3d_4a_3x3", "i3dpt.I3D.mixed_4b", "i3dpt.I3D.mixed_4c", "i3dpt.I3D.mixed_4d", "i3dpt.I3D.mixed_4e", "i3dpt.I3D.mixed_4f", "i3dpt.I3D.maxPool3d_5a_2x2", "i3dpt.I3D.mixed_5b", "i3dpt.I3D.mixed_5c", "i3dpt.I3D.avg_pool2"], "methods", ["None"], ["", "def", "feature_extract", "(", "self", ",", "inp", ")", ":", "\n", "# Preprocessing", "\n", "        ", "out", "=", "self", ".", "conv3d_1a_7x7", "(", "inp", ")", "\n", "out", "=", "self", ".", "maxPool3d_2a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_2b_1x1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_2c_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_3a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_3b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_3c", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_4a_3x3", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4c", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4d", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4e", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_4f", "(", "out", ")", "\n", "out", "=", "self", ".", "maxPool3d_5a_2x2", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_5b", "(", "out", ")", "\n", "out", "=", "self", ".", "mixed_5c", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool2", "(", "out", ")", "\n", "return", "out", "[", ":", ",", ":", ",", "0", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.I3D.load_tf_weights": [[289, 334], ["i3dpt.load_conv3d", "i3dpt.load_conv3d", "i3dpt.load_conv3d", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_mixed", "i3dpt.load_conv3d", "i3dpt.I3D.load_state_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d"], ["", "def", "load_tf_weights", "(", "self", ",", "sess", ")", ":", "\n", "        ", "state_dict", "=", "{", "}", "\n", "if", "self", ".", "modality", "==", "'rgb'", ":", "\n", "            ", "prefix", "=", "'RGB/inception_i3d'", "\n", "", "elif", "self", ".", "modality", "==", "'flow'", ":", "\n", "            ", "prefix", "=", "'Flow/inception_i3d'", "\n", "", "load_conv3d", "(", "state_dict", ",", "'conv3d_1a_7x7'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Conv3d_1a_7x7'", ")", ")", "\n", "load_conv3d", "(", "state_dict", ",", "'conv3d_2b_1x1'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Conv3d_2b_1x1'", ")", ")", "\n", "load_conv3d", "(", "state_dict", ",", "'conv3d_2c_3x3'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Conv3d_2c_3x3'", ")", ")", "\n", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_3b'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_3b'", ")", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_3c'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_3c'", ")", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_4b'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_4b'", ")", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_4c'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_4c'", ")", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_4d'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_4d'", ")", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_4e'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_4e'", ")", ")", "\n", "# Here goest to 0.1 max error with tf", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_4f'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_4f'", ")", ")", "\n", "\n", "load_mixed", "(", "\n", "state_dict", ",", "\n", "'mixed_5b'", ",", "\n", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_5b'", ")", ",", "\n", "fix_typo", "=", "True", ")", "\n", "load_mixed", "(", "state_dict", ",", "'mixed_5c'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Mixed_5c'", ")", ")", "\n", "load_conv3d", "(", "\n", "state_dict", ",", "\n", "'conv3d_0c_1x1'", ",", "\n", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Logits'", ",", "'Conv3d_0c_1x1'", ")", ",", "\n", "bias", "=", "True", ",", "\n", "bn", "=", "False", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_padding_shape": [[9, 27], ["zip", "padding_shape.pop", "padding_shape.pop", "padding_shape.append", "padding_shape.append", "tuple", "max", "i3dpt.get_padding_shape._pad_top_bottom"], "function", ["None"], ["def", "get_padding_shape", "(", "filter_shape", ",", "stride", ")", ":", "\n", "    ", "def", "_pad_top_bottom", "(", "filter_dim", ",", "stride_val", ")", ":", "\n", "        ", "pad_along", "=", "max", "(", "filter_dim", "-", "stride_val", ",", "0", ")", "\n", "pad_top", "=", "pad_along", "//", "2", "\n", "pad_bottom", "=", "pad_along", "-", "pad_top", "\n", "return", "pad_top", ",", "pad_bottom", "\n", "\n", "", "padding_shape", "=", "[", "]", "\n", "for", "filter_dim", ",", "stride_val", "in", "zip", "(", "filter_shape", ",", "stride", ")", ":", "\n", "        ", "pad_top", ",", "pad_bottom", "=", "_pad_top_bottom", "(", "filter_dim", ",", "stride_val", ")", "\n", "padding_shape", ".", "append", "(", "pad_top", ")", "\n", "padding_shape", ".", "append", "(", "pad_bottom", ")", "\n", "", "depth_top", "=", "padding_shape", ".", "pop", "(", "0", ")", "\n", "depth_bottom", "=", "padding_shape", ".", "pop", "(", "0", ")", "\n", "padding_shape", ".", "append", "(", "depth_top", ")", "\n", "padding_shape", ".", "append", "(", "depth_bottom", ")", "\n", "\n", "return", "tuple", "(", "padding_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.simplify_padding": [[29, 36], ["None"], "function", ["None"], ["", "def", "simplify_padding", "(", "padding_shapes", ")", ":", "\n", "    ", "all_same", "=", "True", "\n", "padding_init", "=", "padding_shapes", "[", "0", "]", "\n", "for", "pad", "in", "padding_shapes", "[", "1", ":", "]", ":", "\n", "        ", "if", "pad", "!=", "padding_init", ":", "\n", "            ", "all_same", "=", "False", "\n", "", "", "return", "all_same", ",", "padding_init", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_conv_params": [[336, 363], ["sess.graph.get_tensor_by_name", "sess.run", "sess.graph.get_operation_by_name", "sess.graph.get_operation_by_name.get_attr", "i3dpt._get_padding", "sess.graph.get_operation_by_name.get_attr", "os.path.join", "sess.graph.get_tensor_by_name", "sess.run", "os.path.join", "conv_params.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt._get_padding", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run"], ["", "", "def", "get_conv_params", "(", "sess", ",", "name", ",", "bias", "=", "False", ")", ":", "\n", "# Get conv weights", "\n", "    ", "conv_weights_tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "\n", "os", ".", "path", ".", "join", "(", "name", ",", "'w:0'", ")", ")", "\n", "if", "bias", ":", "\n", "        ", "conv_bias_tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "\n", "os", ".", "path", ".", "join", "(", "name", ",", "'b:0'", ")", ")", "\n", "conv_bias", "=", "sess", ".", "run", "(", "conv_bias_tensor", ")", "\n", "", "conv_weights", "=", "sess", ".", "run", "(", "conv_weights_tensor", ")", "\n", "conv_shape", "=", "conv_weights", ".", "shape", "\n", "\n", "kernel_shape", "=", "conv_shape", "[", "0", ":", "3", "]", "\n", "in_channels", "=", "conv_shape", "[", "3", "]", "\n", "out_channels", "=", "conv_shape", "[", "4", "]", "\n", "\n", "conv_op", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\n", "os", ".", "path", ".", "join", "(", "name", ",", "'convolution'", ")", ")", "\n", "padding_name", "=", "conv_op", ".", "get_attr", "(", "'padding'", ")", "\n", "padding", "=", "_get_padding", "(", "padding_name", ",", "kernel_shape", ")", "\n", "all_strides", "=", "conv_op", ".", "get_attr", "(", "'strides'", ")", "\n", "strides", "=", "all_strides", "[", "1", ":", "4", "]", "\n", "conv_params", "=", "[", "\n", "conv_weights", ",", "kernel_shape", ",", "in_channels", ",", "out_channels", ",", "strides", ",", "padding", "\n", "]", "\n", "if", "bias", ":", "\n", "        ", "conv_params", ".", "append", "(", "conv_bias", ")", "\n", "", "return", "conv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_bn_params": [[365, 375], ["sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "sess.run", "sess.run", "sess.run", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run"], ["", "def", "get_bn_params", "(", "sess", ",", "name", ")", ":", "\n", "    ", "moving_mean_tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "\n", "os", ".", "path", ".", "join", "(", "name", ",", "'moving_mean:0'", ")", ")", "\n", "moving_var_tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "\n", "os", ".", "path", ".", "join", "(", "name", ",", "'moving_variance:0'", ")", ")", "\n", "beta_tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "os", ".", "path", ".", "join", "(", "name", ",", "'beta:0'", ")", ")", "\n", "moving_mean", "=", "sess", ".", "run", "(", "moving_mean_tensor", ")", "\n", "moving_var", "=", "sess", ".", "run", "(", "moving_var_tensor", ")", "\n", "beta", "=", "sess", ".", "run", "(", "beta_tensor", ")", "\n", "return", "moving_mean", ",", "moving_var", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt._get_padding": [[377, 390], ["padding_name.decode.decode", "ValueError", "math.floor", "math.floor", "math.floor", "int", "int", "int"], "function", ["None"], ["", "def", "_get_padding", "(", "padding_name", ",", "conv_shape", ")", ":", "\n", "    ", "padding_name", "=", "padding_name", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "padding_name", "==", "\"VALID\"", ":", "\n", "        ", "return", "[", "0", ",", "0", "]", "\n", "", "elif", "padding_name", "==", "\"SAME\"", ":", "\n", "# return [math.ceil(int(conv_shape[0])/2), math.ceil(int(conv_shape[1])/2)]", "\n", "        ", "return", "[", "\n", "math", ".", "floor", "(", "int", "(", "conv_shape", "[", "0", "]", ")", "/", "2", ")", ",", "\n", "math", ".", "floor", "(", "int", "(", "conv_shape", "[", "1", "]", ")", "/", "2", ")", ",", "\n", "math", ".", "floor", "(", "int", "(", "conv_shape", "[", "2", "]", ")", "/", "2", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid padding name '", "+", "padding_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d": [[392, 421], ["os.path.join", "i3dpt.get_conv_params", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "os.path.join", "i3dpt.get_bn_params", "torch.ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "beta.squeeze", "moving_mean.squeeze", "moving_var.squeeze"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_conv_params", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.get_bn_params"], ["", "", "def", "load_conv3d", "(", "state_dict", ",", "name_pt", ",", "sess", ",", "name_tf", ",", "bias", "=", "False", ",", "bn", "=", "True", ")", ":", "\n", "# Transfer convolution params", "\n", "    ", "conv_name_tf", "=", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'conv_3d'", ")", "\n", "conv_params", "=", "get_conv_params", "(", "sess", ",", "conv_name_tf", ",", "bias", "=", "bias", ")", "\n", "if", "bias", ":", "\n", "        ", "conv_weights", ",", "kernel_shape", ",", "in_channels", ",", "out_channels", ",", "strides", ",", "padding", ",", "conv_bias", "=", "conv_params", "\n", "", "else", ":", "\n", "        ", "conv_weights", ",", "kernel_shape", ",", "in_channels", ",", "out_channels", ",", "strides", ",", "padding", "=", "conv_params", "\n", "\n", "", "conv_weights_rs", "=", "np", ".", "transpose", "(", "\n", "conv_weights", ",", "(", "4", ",", "3", ",", "0", ",", "1", ",", "\n", "2", ")", ")", "# to pt format (out_c, in_c, depth, height, width)", "\n", "state_dict", "[", "name_pt", "+", "'.conv3d.weight'", "]", "=", "torch", ".", "from_numpy", "(", "conv_weights_rs", ")", "\n", "if", "bias", ":", "\n", "        ", "state_dict", "[", "name_pt", "+", "'.conv3d.bias'", "]", "=", "torch", ".", "from_numpy", "(", "conv_bias", ")", "\n", "\n", "# Transfer batch norm params", "\n", "", "if", "bn", ":", "\n", "        ", "conv_tf_name", "=", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'batch_norm'", ")", "\n", "moving_mean", ",", "moving_var", ",", "beta", "=", "get_bn_params", "(", "sess", ",", "conv_tf_name", ")", "\n", "\n", "out_planes", "=", "conv_weights_rs", ".", "shape", "[", "0", "]", "\n", "state_dict", "[", "name_pt", "+", "'.batch3d.weight'", "]", "=", "torch", ".", "ones", "(", "out_planes", ")", "\n", "state_dict", "[", "name_pt", "+", "\n", "'.batch3d.bias'", "]", "=", "torch", ".", "from_numpy", "(", "beta", ".", "squeeze", "(", ")", ")", "\n", "state_dict", "[", "name_pt", "\n", "+", "'.batch3d.running_mean'", "]", "=", "torch", ".", "from_numpy", "(", "moving_mean", ".", "squeeze", "(", ")", ")", "\n", "state_dict", "[", "name_pt", "\n", "+", "'.batch3d.running_var'", "]", "=", "torch", ".", "from_numpy", "(", "moving_var", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_mixed": [[423, 447], ["i3dpt.load_conv3d", "i3dpt.load_conv3d", "i3dpt.load_conv3d", "i3dpt.load_conv3d", "i3dpt.load_conv3d", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "i3dpt.load_conv3d", "i3dpt.load_conv3d", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.i3d.i3dpt.load_conv3d"], ["", "", "def", "load_mixed", "(", "state_dict", ",", "name_pt", ",", "sess", ",", "name_tf", ",", "fix_typo", "=", "False", ")", ":", "\n", "# Branch 0", "\n", "    ", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_0'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_0/Conv3d_0a_1x1'", ")", ")", "\n", "\n", "# Branch .1", "\n", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_1.0'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_1/Conv3d_0a_1x1'", ")", ")", "\n", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_1.1'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_1/Conv3d_0b_3x3'", ")", ")", "\n", "\n", "# Branch 2", "\n", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_2.0'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_2/Conv3d_0a_1x1'", ")", ")", "\n", "if", "fix_typo", ":", "\n", "        ", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_2.1'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_2/Conv3d_0a_3x3'", ")", ")", "\n", "", "else", ":", "\n", "        ", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_2.1'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_2/Conv3d_0b_3x3'", ")", ")", "\n", "\n", "# Branch 3", "\n", "", "load_conv3d", "(", "state_dict", ",", "name_pt", "+", "'.branch_3.1'", ",", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "name_tf", ",", "'Branch_3/Conv3d_0b_1x1'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.TSMInput.TSMInput.__init__": [[11, 19], ["feature_extract.input_process.InputOutput.InputOutput.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ":", "queue", ".", "Queue", ",", "videoPath", ":", "str", ",", "annotations", ":", "dict", ",", "\n", "inputLength", ":", "int", ",", "batchSize", ":", "int", ",", "inputSize", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "temporalSlide", "=", "64", "//", "inputLength", "\n", "InputOutput", ".", "__init__", "(", "self", ",", "batch", ",", "videoPath", ",", "annotations", ",", "temporalSlide", ",", "\n", "inputLength", ",", "batchSize", ",", "inputSize", ")", "\n", "\n", "self", ".", "frameTargets", "=", "[", "]", "\n", "self", ".", "featureNames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.TSMInput.TSMInput.prepare_frame": [[20, 23], ["PIL.Image.fromarray"], "methods", ["None"], ["", "def", "prepare_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "Image", ".", "fromarray", "(", "frame", ")", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.TSMInput.TSMInput.prepare_input": [[24, 33], ["TSMInput.TSMInput.__is_abnormal", "len", "TSMInput.TSMInput.inputClips.append", "TSMInput.TSMInput.clipNames.append", "TSMInput.TSMInput.videoNames.append", "TSMInput.TSMInput.targets.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__is_abnormal"], ["", "def", "prepare_input", "(", "self", ",", "fps", ")", ":", "\n", "        ", "self", ".", "__is_abnormal", "(", "fps", ")", "\n", "if", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "inputLength", ":", "\n", "            ", "self", ".", "inputClips", ".", "append", "(", "copy", ".", "deepcopy", "(", "self", ".", "frames", ")", ")", "\n", "self", ".", "clipNames", ".", "append", "(", "copy", ".", "deepcopy", "(", "self", ".", "featureNames", ")", ")", "\n", "self", ".", "videoNames", ".", "append", "(", "[", "self", ".", "videoName", "]", "*", "self", ".", "inputLength", ")", "\n", "self", ".", "targets", ".", "append", "(", "copy", ".", "deepcopy", "(", "self", ".", "frameTargets", ")", ")", "\n", "self", ".", "frames", ",", "self", ".", "featureNames", ",", "self", ".", "frameTargets", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.TSMInput.TSMInput.__is_abnormal": [[34, 44], ["TSMInput.TSMInput.frameTargets.append", "TSMInput.TSMInput.featureNames.append", "str().zfill", "str"], "methods", ["None"], ["", "def", "__is_abnormal", "(", "self", ",", "fps", ")", ":", "\n", "        ", "anomaly", "=", "0", "\n", "for", "actionSpace", "in", "self", ".", "annotations", ":", "\n", "            ", "if", "actionSpace", "[", "\"start\"", "]", "*", "fps", "<", "self", ".", "frameCounter", "-", "1", "<", "actionSpace", "[", "\"end\"", "]", "*", "fps", ":", "\n", "                ", "anomaly", "=", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "anomaly", "=", "0", "\n", "", "", "self", ".", "frameTargets", ".", "append", "(", "anomaly", ")", "\n", "self", ".", "featureNames", ".", "append", "(", "self", ".", "videoName", "+", "\"_\"", "+", "str", "(", "self", ".", "frameCounter", "-", "1", ")", ".", "zfill", "(", "10", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__init__": [[14, 37], ["threading.Thread.__init__", "logger.info", "[].split", "videoPath.split", "InputOutput.InputOutput.videoPath.split"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["    ", "def", "__init__", "(", "self", ",", "batch", ":", "queue", ".", "Queue", ",", "videoPath", ":", "str", ",", "annotations", ":", "dict", ",", "temporalSlide", ":", "int", ",", "\n", "inputLength", ":", "int", ",", "batchSize", ":", "int", ",", "inputSize", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "videoPath", "=", "videoPath", "\n", "self", ".", "videoName", "=", "self", ".", "videoPath", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "self", ".", "annotations", "=", "annotations", "\n", "self", ".", "temporalSlide", "=", "temporalSlide", "\n", "self", ".", "inputLength", "=", "inputLength", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "inputSize", "=", "inputSize", "\n", "\n", "self", ".", "frames", "=", "[", "]", "\n", "self", ".", "inputClips", "=", "[", "]", "\n", "self", ".", "clipNames", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "videoNames", "=", "[", "]", "\n", "\n", "self", ".", "frameCounter", "=", "0", "\n", "self", ".", "clipFrame", "=", "0", "\n", "logger", ".", "info", "(", "\"clips of {} are extracting\"", ".", "format", "(", "videoPath", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.run": [[38, 65], ["cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.read", "cv2.resize", "InputOutput.InputOutput.prepare_frame", "InputOutput.InputOutput.frames.append", "InputOutput.InputOutput.prepare_input", "InputOutput.InputOutput.__queue_full", "logger.info", "len", "logger.debug", "InputOutput.InputOutput.__put_queue", "logger.debug", "len", "InputOutput.InputOutput.__put_queue", "InputOutput.InputOutput.batch.qsize", "InputOutput.InputOutput.videoPath.split"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.ops.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.prepare_frame", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.prepare_input", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__queue_full", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__put_queue", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__put_queue", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.tools.vid2img_sthv2.split"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "capture", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "videoPath", ")", "\n", "fps", "=", "capture", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "ret", ",", "img", "=", "capture", ".", "read", "(", ")", "\n", "if", "not", "ret", ":", "\n", "                ", "if", "len", "(", "self", ".", "inputClips", ")", "!=", "0", ":", "\n", "                    ", "self", ".", "__put_queue", "(", ")", "\n", "", "logger", ".", "info", "(", "\"{} has been finished\"", ".", "format", "(", "self", ".", "videoPath", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", ")", "\n", "return", "0", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "self", ".", "inputSize", ")", "\n", "img", "=", "self", ".", "prepare_frame", "(", "img", ")", "\n", "\n", "self", ".", "frames", ".", "append", "(", "img", ")", "\n", "self", ".", "frameCounter", "+=", "1", "\n", "\n", "self", ".", "prepare_input", "(", "fps", ")", "\n", "\n", "self", ".", "__queue_full", "(", ")", "\n", "if", "len", "(", "self", ".", "inputClips", ")", "==", "self", ".", "batchSize", ":", "\n", "                ", "logger", ".", "debug", "(", "\"targets: {}\"", ".", "format", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "__put_queue", "(", ")", "\n", "logger", ".", "debug", "(", "\"batch size: {} (new batch)\"", ".", "format", "(", "self", ".", "batch", ".", "qsize", "(", ")", ")", ")", "\n", "# TODO: last clips are lost, solve", "\n", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__put_queue": [[66, 76], ["InputOutput.InputOutput.batch.put", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__put_queue", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "inputClips", ")", "==", "len", "(", "self", ".", "clipNames", ")", "==", "len", "(", "self", ".", "videoNames", ")", "==", "len", "(", "self", ".", "targets", ")", ",", "\"# of elements are not same\"", "\n", "self", ".", "inputClips", "=", "self", ".", "inputClips", "\n", "self", ".", "batch", ".", "put", "(", "{", "\"inputClip\"", ":", "self", ".", "inputClips", ",", "\n", "\"clipName\"", ":", "self", ".", "clipNames", ",", "\n", "\"videoName\"", ":", "self", ".", "videoNames", ",", "\n", "\"target\"", ":", "self", ".", "targets", ",", "\n", "\"batchSize\"", ":", "len", "(", "self", ".", "inputClips", ")", "}", ")", "\n", "self", ".", "inputClips", ",", "self", ".", "clipNames", ",", "self", ".", "targets", ",", "self", ".", "videoNames", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.prepare_input": [[77, 80], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "prepare_input", "(", "self", ",", "fps", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.prepare_frame": [[81, 84], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "prepare_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.InputOutput.InputOutput.__queue_full": [[85, 89], ["InputOutput.InputOutput.batch.full", "logger.debug", "time.sleep", "InputOutput.InputOutput.batch.qsize"], "methods", ["None"], ["", "def", "__queue_full", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "batch", ".", "full", "(", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "\"batch size: {} (full)\"", ".", "format", "(", "self", ".", "batch", ".", "qsize", "(", ")", ")", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.__init__": [[7, 19], ["feature_extract.input_process.InputOutput.InputOutput.__init__", "numpy.load", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ":", "queue", ".", "Queue", ",", "videoPath", ":", "str", ",", "annotations", ":", "dict", ",", "temporalSlide", ":", "int", ",", "\n", "inputLength", ":", "int", ",", "batchSize", ":", "int", ",", "dataMeanPath", ",", "inputSize", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "InputOutput", ".", "__init__", "(", "self", ",", "batch", ",", "videoPath", ",", "annotations", ",", "temporalSlide", ",", "\n", "inputLength", ",", "batchSize", ",", "inputSize", ")", "\n", "\n", "self", ".", "height_start", "=", "8", "\n", "self", ".", "width_start", "=", "29", "\n", "\n", "self", ".", "mean_cube", "=", "np", ".", "load", "(", "dataMeanPath", ")", "\n", "self", ".", "mean_cube", "=", "np", ".", "transpose", "(", "self", ".", "mean_cube", ",", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "self", ".", "mean_cube", "=", "self", ".", "mean_cube", "[", ":", ",", "self", ".", "height_start", ":", "self", ".", "height_start", "+", "self", ".", "inputSize", "[", "0", "]", ",", "\n", "self", ".", "width_start", ":", "self", ".", "width_start", "+", "self", ".", "inputSize", "[", "1", "]", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.prepare_input": [[20, 28], ["len", "C3DInput.C3DInput.__is_abnormal", "C3DInput.C3DInput.__preprocess_input", "C3DInput.C3DInput.__put_clip"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__is_abnormal", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__preprocess_input", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__put_clip"], ["", "def", "prepare_input", "(", "self", ",", "fps", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "inputLength", ":", "\n", "            ", "anomaly", "=", "self", ".", "__is_abnormal", "(", "fps", ",", "0.7", ")", "\n", "\n", "video_clip_np", "=", "self", ".", "__preprocess_input", "(", "self", ".", "frames", "[", "0", ":", "self", ".", "inputLength", "]", ")", "\n", "self", ".", "frames", "=", "self", ".", "frames", "[", "self", ".", "temporalSlide", ":", "self", ".", "inputLength", "]", "\n", "\n", "self", ".", "__put_clip", "(", "video_clip_np", ",", "anomaly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.__put_clip": [[29, 35], ["C3DInput.C3DInput.inputClips.append", "C3DInput.C3DInput.clipNames.append", "C3DInput.C3DInput.videoNames.append", "C3DInput.C3DInput.targets.append", "str().zfill", "str"], "methods", ["None"], ["", "", "def", "__put_clip", "(", "self", ",", "video_clip_np", ",", "anomaly", ")", ":", "\n", "\n", "        ", "self", ".", "inputClips", ".", "append", "(", "video_clip_np", ")", "\n", "self", ".", "clipNames", ".", "append", "(", "self", ".", "videoName", "+", "\"_\"", "+", "str", "(", "self", ".", "frameCounter", ")", ".", "zfill", "(", "10", ")", ")", "\n", "self", ".", "videoNames", ".", "append", "(", "self", ".", "videoName", ")", "\n", "self", ".", "targets", ".", "append", "(", "anomaly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.__preprocess_input": [[36, 40], ["numpy.array"], "methods", ["None"], ["", "def", "__preprocess_input", "(", "self", ",", "clipFrames", ")", ":", "\n", "        ", "video_clip_np", "=", "np", ".", "array", "(", "clipFrames", ",", "dtype", "=", "'float32'", ")", "\n", "video_clip_np", "=", "video_clip_np", "-", "self", ".", "mean_cube", "\n", "return", "video_clip_np", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.__is_abnormal": [[41, 52], ["min", "max"], "methods", ["None"], ["", "def", "__is_abnormal", "(", "self", ",", "fps", ",", "intersectionThreshold", ")", ":", "\n", "        ", "anomaly", "=", "0", "\n", "for", "actionSpace", "in", "self", ".", "annotations", ":", "\n", "            ", "intersectionEnd", "=", "min", "(", "self", ".", "frameCounter", ",", "actionSpace", "[", "\"end\"", "]", "*", "fps", ")", "\n", "intersectionStart", "=", "max", "(", "self", ".", "frameCounter", "-", "self", ".", "inputLength", ",", "actionSpace", "[", "\"start\"", "]", "*", "fps", ")", "\n", "if", "(", "intersectionEnd", "-", "intersectionStart", ")", "/", "self", ".", "inputLength", ">", "intersectionThreshold", ":", "\n", "                ", "anomaly", "=", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "anomaly", "=", "0", "\n", "", "", "return", "anomaly", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.C3DInput.C3DInput.prepare_frame": [[53, 55], ["None"], "methods", ["None"], ["", "def", "prepare_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "return", "frame", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__init__": [[11, 15], ["feature_extract.input_process.InputOutput.InputOutput.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ":", "queue", ".", "Queue", ",", "videoPath", ":", "str", ",", "annotations", ":", "dict", ",", "temporalSlide", ":", "int", ",", "\n", "inputLength", ":", "int", ",", "batchSize", ":", "int", ",", "inputSize", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "InputOutput", ".", "__init__", "(", "self", ",", "batch", ",", "videoPath", ",", "annotations", ",", "temporalSlide", ",", "\n", "inputLength", ",", "batchSize", ",", "inputSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.prepare_frame": [[16, 18], ["None"], "methods", ["None"], ["", "def", "prepare_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.prepare_input": [[19, 27], ["len", "I3DInput.I3DInput.__is_abnormal", "I3DInput.I3DInput.__preprocess_input", "I3DInput.I3DInput.__put_clip"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__is_abnormal", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__preprocess_input", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__put_clip"], ["", "def", "prepare_input", "(", "self", ",", "fps", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "inputLength", ":", "\n", "            ", "anomaly", "=", "self", ".", "__is_abnormal", "(", "fps", ",", "0.7", ")", "\n", "\n", "video_clip_np", "=", "self", ".", "__preprocess_input", "(", "self", ".", "frames", "[", "0", ":", "self", ".", "inputLength", "]", ")", "\n", "self", ".", "frames", "=", "self", ".", "frames", "[", "self", ".", "temporalSlide", ":", "self", ".", "inputLength", "]", "\n", "\n", "self", ".", "__put_clip", "(", "video_clip_np", ",", "anomaly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__put_clip": [[28, 34], ["I3DInput.I3DInput.inputClips.append", "I3DInput.I3DInput.clipNames.append", "I3DInput.I3DInput.videoNames.append", "I3DInput.I3DInput.targets.append", "str().zfill", "str"], "methods", ["None"], ["", "", "def", "__put_clip", "(", "self", ",", "video_clip_np", ",", "anomaly", ")", ":", "\n", "\n", "        ", "self", ".", "inputClips", ".", "append", "(", "video_clip_np", ")", "\n", "self", ".", "clipNames", ".", "append", "(", "self", ".", "videoName", "+", "\"_\"", "+", "str", "(", "self", ".", "frameCounter", ")", ".", "zfill", "(", "10", ")", ")", "\n", "self", ".", "videoNames", ".", "append", "(", "self", ".", "videoName", ")", "\n", "self", ".", "targets", ".", "append", "(", "anomaly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__preprocess_input": [[35, 41], ["numpy.array", "numpy.interp", "numpy.transpose().astype", "numpy.transpose().astype.min", "numpy.transpose().astype.max", "numpy.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__preprocess_input", "(", "clipFrames", ")", ":", "\n", "        ", "video_clip_np", "=", "np", ".", "array", "(", "clipFrames", ",", "dtype", "=", "'float32'", ")", "\n", "video_clip_np", "=", "np", ".", "interp", "(", "video_clip_np", ",", "(", "video_clip_np", ".", "min", "(", ")", ",", "video_clip_np", ".", "max", "(", ")", ")", ",", "(", "-", "1", ",", "+", "1", ")", ")", "\n", "video_clip_np", "=", "np", ".", "transpose", "(", "video_clip_np", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "video_clip_np", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.input_process.I3DInput.I3DInput.__is_abnormal": [[42, 53], ["min", "max"], "methods", ["None"], ["", "def", "__is_abnormal", "(", "self", ",", "fps", ",", "intersectionThreshold", ")", ":", "\n", "        ", "anomaly", "=", "0", "\n", "for", "actionSpace", "in", "self", ".", "annotations", ":", "\n", "            ", "intersectionEnd", "=", "min", "(", "self", ".", "frameCounter", ",", "actionSpace", "[", "\"end\"", "]", "*", "fps", ")", "\n", "intersectionStart", "=", "max", "(", "self", ".", "frameCounter", "-", "self", ".", "inputLength", ",", "actionSpace", "[", "\"start\"", "]", "*", "fps", ")", "\n", "if", "(", "intersectionEnd", "-", "intersectionStart", ")", "/", "self", ".", "inputLength", ">", "intersectionThreshold", ":", "\n", "                ", "anomaly", "=", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "anomaly", "=", "0", "\n", "", "", "return", "anomaly", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.I3DExtractor.I3DExtractor.__init__": [[11, 14], ["feature_extract.extractors.Extractor.Extractor.__init__", "logger.info"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "Extractor", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "logger", ".", "info", "(", "'i3d extractor has been created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.I3DExtractor.I3DExtractor.get_producer": [[15, 20], ["feature_extract.input_process.I3DInput.I3DInput"], "methods", ["None"], ["", "def", "get_producer", "(", "self", ",", "video_path", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "producer", "=", "I3DInput", "(", "self", ".", "batch", ",", "video_path", ",", "annotations", ",", "kwargs", "[", "\"cfg\"", "]", ".", "temporal_stride", ",", "\n", "kwargs", "[", "\"cfg\"", "]", ".", "input_length", ",", "\n", "kwargs", "[", "\"cfg\"", "]", ".", "batch_size", ",", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", ")", "\n", "return", "producer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.I3DExtractor.I3DExtractor.get_consumer": [[21, 24], ["feature_extract.batch_process.I3DProcessor.I3DProcessor"], "methods", ["None"], ["", "def", "get_consumer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "consumer", "=", "I3DProcessor", "(", "kwargs", "[", "\"cfg\"", "]", ".", "path", ",", "self", ".", "batch", ",", "self", ".", "outputs", ",", "self", ".", "dry_run", ")", "\n", "return", "consumer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.TSMExtractor.TSMExtractor.__init__": [[12, 15], ["feature_extract.extractors.Extractor.Extractor.__init__", "logger.info"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "Extractor", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "logger", ".", "info", "(", "'tsm extractor has been created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.TSMExtractor.TSMExtractor.get_consumer": [[16, 20], ["feature_extract.batch_process.TSMProcessor.TSMProcessor"], "methods", ["None"], ["", "def", "get_consumer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "temporal_stride", "=", "64", "//", "kwargs", "[", "\"cfg\"", "]", ".", "input_length", "\n", "consumer", "=", "TSMProcessor", "(", "kwargs", "[", "\"cfg\"", "]", ".", "path", ",", "temporal_stride", ",", "self", ".", "batch", ",", "self", ".", "outputs", ",", "self", ".", "dry_run", ")", "\n", "return", "consumer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.TSMExtractor.TSMExtractor.get_producer": [[21, 28], ["feature_extract.input_process.TSMInput.TSMInput", "type", "tuple"], "methods", ["None"], ["", "def", "get_producer", "(", "self", ",", "video_path", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "type", "(", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", ")", "==", "list", ":", "\n", "            ", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", "=", "tuple", "(", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", ")", "\n", "\n", "", "producer", "=", "TSMInput", "(", "self", ".", "batch", ",", "video_path", ",", "annotations", ",", "kwargs", "[", "\"cfg\"", "]", ".", "input_length", ",", "\n", "kwargs", "[", "\"cfg\"", "]", ".", "batch_size", ",", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", ")", "\n", "return", "producer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.C3DExtractor.C3DExtractor.__init__": [[10, 12], ["feature_extract.extractors.Extractor.Extractor.__init__"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "Extractor", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.C3DExtractor.C3DExtractor.get_consumer": [[13, 16], ["feature_extract.batch_process.C3DProcessor.C3DProcessor"], "methods", ["None"], ["", "def", "get_consumer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "consumer", "=", "C3DProcessor", "(", "kwargs", "[", "\"cfg\"", "]", ".", "json", ",", "kwargs", "[", "\"cfg\"", "]", ".", "weight", ",", "self", ".", "batch", ",", "self", ".", "outputs", ",", "self", ".", "dry_run", ")", "\n", "return", "consumer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.C3DExtractor.C3DExtractor.get_producer": [[17, 22], ["feature_extract.input_process.C3DInput.C3DInput"], "methods", ["None"], ["", "def", "get_producer", "(", "self", ",", "video_path", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "producer", "=", "C3DInput", "(", "self", ".", "batch", ",", "video_path", ",", "annotations", ",", "kwargs", "[", "\"cfg\"", "]", ".", "temporal_stride", ",", "\n", "kwargs", "[", "\"cfg\"", "]", ".", "input_length", ",", "kwargs", "[", "\"cfg\"", "]", ".", "batch_size", ",", "kwargs", "[", "\"cfg\"", "]", ".", "input_mean", ",", "\n", "kwargs", "[", "\"cfg\"", "]", ".", "input_size", ")", "\n", "return", "producer", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__init__": [[16, 39], ["logger.info", "queue.Queue", "queue.Queue", "feature_extract.output_writer.Writer.Writer", "Extractor.Extractor.get_consumer", "hasattr", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.get_consumer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "\n", "logger", ".", "info", "(", "cfg", ".", "pretty_text", ")", "\n", "\n", "self", ".", "num_producers", "=", "cfg", ".", "extractor", ".", "num_producers", "\n", "self", ".", "dry_run", "=", "cfg", ".", "extractor", ".", "dry_run", "\n", "self", ".", "top_k", "=", "cfg", ".", "extractor", ".", "top_k", "if", "hasattr", "(", "cfg", ".", "extractor", ",", "\"top_k\"", ")", "else", "None", "\n", "\n", "self", ".", "batch", "=", "queue", ".", "Queue", "(", "10", ")", "\n", "self", ".", "outputs", "=", "queue", ".", "Queue", "(", ")", "\n", "\n", "self", ".", "producers", "=", "[", "]", "\n", "\n", "self", ".", "writer", "=", "Writer", "(", "self", ".", "outputs", ",", "cfg", ".", "output_writer", ".", "clip_folder", ",", "\n", "cfg", ".", "output_writer", ".", "json_path", ",", "cfg", ".", "extractor", ".", "categories", ",", "\n", "self", ".", "dry_run", ")", "\n", "self", ".", "consumer", "=", "self", ".", "get_consumer", "(", "cfg", "=", "cfg", ".", "model", ")", "\n", "self", ".", "producer_cfg", "=", "cfg", ".", "input_processor", "\n", "\n", "self", ".", "video_folder", "=", "cfg", ".", "extractor", ".", "video_folder", "\n", "with", "open", "(", "cfg", ".", "extractor", ".", "temporal_annotions", ")", "as", "fp", ":", "\n", "            ", "self", ".", "temporal_annotations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.get_consumer": [[40, 43], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "get_consumer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.get_producer": [[44, 47], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_producer", "(", "self", ",", "video_path", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__call__": [[48, 65], ["logger.debug", "Extractor.Extractor.consumer.start", "Extractor.Extractor.writer.start", "enumerate", "Extractor.Extractor.__finalize", "logger.debug", "Extractor.Extractor.temporal_annotations.items", "os.path.join", "Extractor.Extractor.get_producer", "Extractor.Extractor.start", "time.sleep", "Extractor.Extractor.producers.append", "Extractor.Extractor.__wait_producers", "logger.info"], "methods", ["home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__finalize", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.get_producer", "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__wait_producers"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"extraction process starts\"", ")", "\n", "self", ".", "consumer", ".", "start", "(", ")", "\n", "self", ".", "writer", ".", "start", "(", ")", "\n", "for", "indx", ",", "(", "video_name", ",", "annotations", ")", "in", "enumerate", "(", "self", ".", "temporal_annotations", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "indx", "==", "self", ".", "top_k", ":", "\n", "                ", "logger", ".", "info", "(", "\"top {} videos has been processed\"", ".", "format", "(", "self", ".", "top_k", ")", ")", "\n", "break", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_folder", ",", "video_name", ")", "\n", "producer", "=", "self", ".", "get_producer", "(", "video_path", ",", "annotations", ",", "cfg", "=", "self", ".", "producer_cfg", ")", "\n", "\n", "producer", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "self", ".", "producers", ".", "append", "(", "producer", ")", "\n", "self", ".", "__wait_producers", "(", ")", "\n", "", "self", ".", "__finalize", "(", ")", "\n", "logger", ".", "debug", "(", "\"extraction process has been finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__wait_producers": [[66, 75], ["len", "logger.debug", "time.sleep", "producer.is_alive", "tempList.append", "len"], "methods", ["None"], ["", "def", "__wait_producers", "(", "self", ")", ":", "\n", "        ", "while", "len", "(", "self", ".", "producers", ")", "==", "self", ".", "num_producers", ":", "\n", "            ", "tempList", "=", "[", "]", "\n", "for", "producer", "in", "self", ".", "producers", ":", "\n", "                ", "if", "producer", ".", "is_alive", "(", ")", "is", "True", ":", "\n", "                    ", "tempList", ".", "append", "(", "producer", ")", "\n", "", "", "self", ".", "producers", "=", "tempList", "\n", "logger", ".", "debug", "(", "\"# producer threads {}\"", ".", "format", "(", "len", "(", "self", ".", "producers", ")", ")", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hibrahimozturk_temporal_anomaly_detection.extractors.Extractor.Extractor.__finalize": [[76, 85], ["logger.debug", "time.sleep", "Extractor.Extractor.batch.put", "Extractor.Extractor.consumer.join", "Extractor.Extractor.writer.join", "producer.join"], "methods", ["None"], ["", "", "def", "__finalize", "(", "self", ")", ":", "\n", "        ", "for", "producer", "in", "self", ".", "producers", ":", "\n", "            ", "producer", ".", "join", "(", ")", "\n", "\n", "", "logger", ".", "debug", "(", "\"finalize signal to batch queue\"", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "self", ".", "batch", ".", "put", "(", "None", ")", "\n", "self", ".", "consumer", ".", "join", "(", ")", "\n", "self", ".", "writer", ".", "join", "(", ")", "\n", "\n"]]}