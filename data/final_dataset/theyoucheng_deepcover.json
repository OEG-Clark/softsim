{"home.repos.pwc.inspect_result.theyoucheng_deepcover.src.deepcover.main": [[18, 156], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "numpy.vstack", "xs.reshape.reshape", "print", "utils.explain_objectt", "int", "float", "float", "float", "float", "int", "int", "int", "int", "int", "int", "keras.models.load_model", "os.walk", "Exception", "measures.append", "print", "comp_explain.comp_explain", "to_explain.to_explain", "print", "keras.applications.vgg16.VGG16", "print", "len", "open", "csv.reader", "keras.applications.mobilenet.MobileNet", "os.path.join", "keras.applications.inception_v3.InceptionV3", "os.path.join.endswith", "os.path.join.endswith", "os.path.join.endswith", "numpy.expand_dims", "xs.reshape.append", "fnames.append", "int", "int", "int", "int", "keras.applications.xception.Xception", "Exception", "keras.preprocessing.image.load_img", "numpy.expand_dims", "keras.preprocessing.image.load_img"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.comp_explain", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_explain.to_explain"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'To explain neural network decisions'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model'", ",", "dest", "=", "'model'", ",", "default", "=", "'-1'", ",", "help", "=", "'the input neural network model (.h5)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--inputs\"", ",", "dest", "=", "\"inputs\"", ",", "default", "=", "\"-1\"", ",", "\n", "help", "=", "\"the input test data directory\"", ",", "metavar", "=", "\"DIR\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--outputs\"", ",", "dest", "=", "\"outputs\"", ",", "default", "=", "\"outs\"", ",", "\n", "help", "=", "\"the outputput test data directory\"", ",", "metavar", "=", "\"DIR\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--measures\"", ",", "dest", "=", "\"measures\"", ",", "default", "=", "[", "'tarantula'", ",", "'zoltar'", ",", "'ochiai'", ",", "'wong-ii'", "]", ",", "\n", "help", "=", "\"the SFL measures (tarantula, zoltar, ochiai, wong-ii)\"", ",", "metavar", "=", "\"\"", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "\"--measure\"", ",", "dest", "=", "\"measure\"", ",", "default", "=", "\"None\"", ",", "\n", "help", "=", "\"the SFL measure\"", ",", "metavar", "=", "\"MEASURE\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mnist-dataset\"", ",", "dest", "=", "\"mnist\"", ",", "help", "=", "\"MNIST dataset\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--normalized-input\"", ",", "dest", "=", "\"normalized\"", ",", "help", "=", "\"To normalize the input\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cifar10-dataset\"", ",", "dest", "=", "\"cifar10\"", ",", "help", "=", "\"CIFAR-10 dataset\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--grayscale\"", ",", "dest", "=", "\"grayscale\"", ",", "help", "=", "\"MNIST dataset\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vgg16-model\"", ",", "dest", "=", "'vgg16'", ",", "help", "=", "\"vgg16 model\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--inception-v3-model\"", ",", "dest", "=", "'inception_v3'", ",", "help", "=", "\"inception v3 model\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--xception-model\"", ",", "dest", "=", "'xception'", ",", "help", "=", "\"Xception model\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mobilenet-model\"", ",", "dest", "=", "'mobilenet'", ",", "help", "=", "\"mobilenet model\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--attack\"", ",", "dest", "=", "'attack'", ",", "help", "=", "\"to atatck\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--text-only\"", ",", "dest", "=", "'text_only'", ",", "help", "=", "\"for efficiency\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-rows\"", ",", "dest", "=", "\"img_rows\"", ",", "default", "=", "\"224\"", ",", "\n", "help", "=", "\"input rows\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-cols\"", ",", "dest", "=", "\"img_cols\"", ",", "default", "=", "\"224\"", ",", "\n", "help", "=", "\"input cols\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-channels\"", ",", "dest", "=", "\"img_channels\"", ",", "default", "=", "\"3\"", ",", "\n", "help", "=", "\"input channels\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--x-verbosity\"", ",", "dest", "=", "\"x_verbosity\"", ",", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"the verbosity level of explanation output\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top-classes\"", ",", "dest", "=", "\"top_classes\"", ",", "default", "=", "\"1\"", ",", "\n", "help", "=", "\"check the top-xx classifications\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adversarial-ub\"", ",", "dest", "=", "\"adv_ub\"", ",", "default", "=", "\"1.\"", ",", "\n", "help", "=", "\"upper bound on the adversarial percentage (0, 1]\"", ",", "metavar", "=", "\"FLOAT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adversarial-lb\"", ",", "dest", "=", "\"adv_lb\"", ",", "default", "=", "\"0.\"", ",", "\n", "help", "=", "\"lower bound on the adversarial percentage (0, 1]\"", ",", "metavar", "=", "\"FLOAT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--masking-value\"", ",", "dest", "=", "\"adv_value\"", ",", "default", "=", "\"234\"", ",", "\n", "help", "=", "\"masking value for input mutation\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--testgen-factor\"", ",", "dest", "=", "\"testgen_factor\"", ",", "default", "=", "\"0.2\"", ",", "\n", "help", "=", "\"test generation factor (0, 1]\"", ",", "metavar", "=", "\"FLOAT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--testgen-size\"", ",", "dest", "=", "\"testgen_size\"", ",", "default", "=", "\"2000\"", ",", "\n", "help", "=", "\"testgen size \"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--testgen-iterations\"", ",", "dest", "=", "\"testgen_iter\"", ",", "default", "=", "\"1\"", ",", "\n", "help", "=", "\"to control the testgen iteration\"", ",", "metavar", "=", "\"INT\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--causal\"", ",", "dest", "=", "'causal'", ",", "help", "=", "\"causal explanation\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wsol\"", ",", "dest", "=", "'wsol_file'", ",", "help", "=", "\"weakly supervised object localization\"", ",", "metavar", "=", "\"FILE\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--occlusion\"", ",", "dest", "=", "'occlusion_file'", ",", "help", "=", "\"to load the occluded images\"", ",", "metavar", "=", "\"FILE\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "img_rows", ",", "img_cols", ",", "img_channels", "=", "int", "(", "args", ".", "img_rows", ")", ",", "int", "(", "args", ".", "img_cols", ")", ",", "int", "(", "args", ".", "img_channels", ")", "\n", "\n", "## some common used datasets", "\n", "if", "args", ".", "mnist", ":", "\n", "    ", "img_rows", ",", "img_cols", ",", "img_channels", "=", "28", ",", "28", ",", "1", "\n", "", "elif", "args", ".", "cifar10", ":", "\n", "    ", "img_rows", ",", "img_cols", ",", "img_channels", "=", "32", ",", "32", ",", "3", "\n", "", "elif", "args", ".", "inception_v3", "or", "args", ".", "xception", ":", "\n", "    ", "img_rows", ",", "img_cols", ",", "img_channels", "=", "299", ",", "299", ",", "3", "\n", "\n", "## to load the input DNN model", "\n", "", "if", "args", ".", "model", "!=", "'-1'", ":", "\n", "    ", "dnn", "=", "load_model", "(", "args", ".", "model", ")", "\n", "", "elif", "args", ".", "vgg16", ":", "\n", "    ", "print", "(", "'to load VGG16'", ")", "\n", "dnn", "=", "VGG16", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "", "elif", "args", ".", "mobilenet", ":", "\n", "    ", "dnn", "=", "mobilenet", ".", "MobileNet", "(", ")", "\n", "", "elif", "args", ".", "inception_v3", ":", "\n", "    ", "dnn", "=", "inception_v3", ".", "InceptionV3", "(", ")", "\n", "", "elif", "args", ".", "xception", ":", "\n", "    ", "dnn", "=", "xception", ".", "Xception", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "'A DNN model needs to be provided...'", ")", "\n", "\n", "## to load the input data", "\n", "", "fnames", "=", "[", "]", "\n", "xs", "=", "[", "]", "\n", "if", "args", ".", "inputs", "!=", "'-1'", ":", "\n", "    ", "for", "path", ",", "subdirs", ",", "files", "in", "os", ".", "walk", "(", "args", ".", "inputs", ")", ":", "\n", "      ", "for", "name", "in", "files", ":", "\n", "        ", "fname", "=", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "\n", "if", "fname", ".", "endswith", "(", "'.jpg'", ")", "or", "fname", ".", "endswith", "(", "'.png'", ")", "or", "fname", ".", "endswith", "(", "'.JPEG'", ")", ":", "\n", "            ", "if", "args", ".", "grayscale", "is", "True", "or", "args", ".", "mnist", ":", "\n", "              ", "x", "=", "image", ".", "load_img", "(", "fname", ",", "target_size", "=", "(", "img_rows", ",", "img_cols", ")", ",", "color_mode", "=", "\"grayscale\"", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "              ", "x", "=", "image", ".", "load_img", "(", "fname", ",", "target_size", "=", "(", "img_rows", ",", "img_cols", ")", ")", "\n", "", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "fnames", ".", "append", "(", "fname", ")", "\n", "", "", "", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "'What do you want me to do?'", ")", "\n", "", "xs", "=", "np", ".", "vstack", "(", "xs", ")", "\n", "xs", "=", "xs", ".", "reshape", "(", "xs", ".", "shape", "[", "0", "]", ",", "img_rows", ",", "img_cols", ",", "img_channels", ")", "\n", "print", "(", "'\\n[Total data loaded: {0}]'", ".", "format", "(", "len", "(", "xs", ")", ")", ")", "\n", "\n", "eobj", "=", "explain_objectt", "(", "dnn", ",", "xs", ")", "\n", "eobj", ".", "outputs", "=", "args", ".", "outputs", "\n", "eobj", ".", "top_classes", "=", "int", "(", "args", ".", "top_classes", ")", "\n", "eobj", ".", "adv_ub", "=", "float", "(", "args", ".", "adv_ub", ")", "\n", "eobj", ".", "adv_lb", "=", "float", "(", "args", ".", "adv_lb", ")", "\n", "eobj", ".", "adv_value", "=", "float", "(", "args", ".", "adv_value", ")", "\n", "eobj", ".", "testgen_factor", "=", "float", "(", "args", ".", "testgen_factor", ")", "\n", "eobj", ".", "testgen_size", "=", "int", "(", "args", ".", "testgen_size", ")", "\n", "eobj", ".", "testgen_iter", "=", "int", "(", "args", ".", "testgen_iter", ")", "\n", "eobj", ".", "vgg16", "=", "args", ".", "vgg16", "\n", "eobj", ".", "mnist", "=", "args", ".", "mnist", "\n", "eobj", ".", "cifar10", "=", "args", ".", "cifar10", "\n", "eobj", ".", "inception_v3", "=", "args", ".", "inception_v3", "\n", "eobj", ".", "xception", "=", "args", ".", "xception", "\n", "eobj", ".", "mobilenet", "=", "args", ".", "mobilenet", "\n", "eobj", ".", "attack", "=", "args", ".", "attack", "\n", "eobj", ".", "text_only", "=", "args", ".", "text_only", "\n", "eobj", ".", "normalized", "=", "args", ".", "normalized", "\n", "eobj", ".", "x_verbosity", "=", "int", "(", "args", ".", "x_verbosity", ")", "\n", "eobj", ".", "fnames", "=", "fnames", "\n", "eobj", ".", "occlusion_file", "=", "args", ".", "occlusion_file", "\n", "measures", "=", "[", "]", "\n", "if", "not", "args", ".", "measure", "==", "'None'", ":", "\n", "      ", "measures", ".", "append", "(", "args", ".", "measure", ")", "\n", "", "else", ":", "measures", "=", "args", ".", "measures", "\n", "eobj", ".", "measures", "=", "measures", "\n", "\n", "if", "not", "args", ".", "wsol_file", "is", "None", ":", "\n", "      ", "print", "(", "args", ".", "wsol_file", ")", "\n", "boxes", "=", "{", "}", "\n", "with", "open", "(", "args", ".", "wsol_file", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "res", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "' '", ")", "\n", "for", "row", "in", "res", ":", "\n", "          ", "boxes", "[", "row", "[", "0", "]", "]", "=", "[", "int", "(", "row", "[", "1", "]", ")", ",", "int", "(", "row", "[", "2", "]", ")", ",", "int", "(", "row", "[", "3", "]", ")", ",", "int", "(", "row", "[", "4", "]", ")", "]", "\n", "", "", "eobj", ".", "boxes", "=", "boxes", "\n", "\n", "\n", "", "if", "args", ".", "causal", ":", "\n", "      ", "comp_explain", "(", "eobj", ")", "\n", "", "else", ":", "to_explain", "(", "eobj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_restore.to_restore": [[6, 52], ["type", "numpy.ones", "numpy.multiply", "numpy.zeros", "numpy.unravel_index", "range", "model.predict", "utils.sbfl_preprocess", "len", "numpy.array", "numpy.argsort", "numpy.intersect1d", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess"], ["def", "to_restore", "(", "eobj", ",", "ind", ",", "origin_data", ",", "y", ",", "bg_v", ",", "init_step", ",", "step_incr", ")", ":", "\n", "\n", "  ", "v_type", "=", "type", "(", "bg_v", ")", "\n", "\n", "top_classes", "=", "eobj", ".", "top_classes", "\n", "sp", "=", "origin_data", ".", "shape", "\n", "\n", "x", "=", "origin_data", "\n", "model", "=", "eobj", ".", "model", "\n", "#y=np.argsort(model.predict(sbfl_preprocess(eobj,np.array([x]))))[0][-top_classes:]", "\n", "\n", "latest_step", "=", "ind", ".", "size", "\n", "\n", "im", "=", "np", ".", "ones", "(", "sp", ")", "\n", "im", "=", "np", ".", "multiply", "(", "im", ",", "bg_v", ")", "\n", "im_flag", "=", "np", ".", "zeros", "(", "im", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "pos", "=", "ind", ".", "size", "-", "1", "\n", "old_count", "=", "1", "\n", "count", "=", "1", "\n", "\n", "adv_v", "=", "0", "\n", "\n", "while", "pos", ">=", "0", ":", "\n", "\n", "    ", "ipos", "=", "np", ".", "unravel_index", "(", "ind", "[", "pos", "]", ",", "sp", ")", "\n", "if", "not", "im_flag", "[", "ipos", "]", ":", "\n", "      ", "for", "k", "in", "range", "(", "0", ",", "sp", "[", "2", "]", ")", ":", "\n", "          ", "im", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "x", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "\n", "im_flag", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "True", "\n", "", "count", "+=", "1", "\n", "\n", "", "pos", "-=", "1", "\n", "\n", "if", "count", "<", "init_step", ":", "continue", "## to start from a partial image", "\n", "\n", "if", "count", "-", "old_count", ">=", "step_incr", ":", "\n", "      ", "old_count", "=", "count", "\n", "\n", "adv_v", "=", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "im", "]", ")", ")", ")", "\n", "adv_y", "=", "np", ".", "argsort", "(", "adv_v", ")", "[", "0", "]", "[", "-", "top_classes", ":", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "y", ",", "adv_y", ")", ")", "!=", "0", ":", "\n", "#if np.sort(adv_v)[0][-top_classes:][0]>.5:", "\n", "          ", "return", "im", ",", "count", ",", "np", ".", "sort", "(", "adv_v", ")", "[", "0", "]", "[", "-", "top_classes", ":", "]", "\n", "\n", "", "", "", "return", "x", ",", "x", ".", "size", "//", "sp", "[", "2", "]", ",", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_rank.to_rank": [[4, 124], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.abs", "range", "numpy.zeros", "numpy.ndenumerate", "numpy.ones", "int", "range", "numpy.argsort", "len", "diffs[].copy", "diffs[].copy", "numpy.random.rand", "range", "range", "range", "numpy.zeros", "numpy.ndenumerate", "range", "numpy.zeros", "numpy.ndenumerate", "numpy.mean", "numpy.zeros", "numpy.ndenumerate", "numpy.zeros", "numpy.ndenumerate", "Exception", "numpy.sqrt", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "to_rank", "(", "sbfl_element", ",", "metric", "=", "'zoltar'", ")", ":", "\n", "  ", "origin_data", "=", "sbfl_element", ".", "x", "\n", "sp", "=", "origin_data", ".", "shape", "\n", "ef", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "nf", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "ep", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "np_", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "\n", "xs", "=", "np", ".", "array", "(", "sbfl_element", ".", "xs", ")", "\n", "\n", "diffs", "=", "np", ".", "abs", "(", "xs", "-", "origin_data", ")", "\n", "#diffs=diffs - (1+0.05 * origin_data)", "\n", "#diffs[diffs>0]=0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "diffs", ")", ")", ":", "\n", "    ", "is_adv", "=", "(", "sbfl_element", ".", "y", "!=", "sbfl_element", ".", "ys", "[", "i", "]", ")", "\n", "ds_i1", "=", "diffs", "[", "i", "]", ".", "copy", "(", ")", "\n", "ds_i1", "[", "ds_i1", ">", "0", "]", "=", "1", "\n", "ds_i2", "=", "diffs", "[", "i", "]", ".", "copy", "(", ")", "\n", "ds_i2", "[", "ds_i2", ">", "0", "]", "=", "-", "1", "\n", "ds_i2", "[", "ds_i2", "==", "0", "]", "=", "+", "1", "\n", "ds_i2", "[", "ds_i2", "==", "-", "1", "]", "=", "0", "\n", "if", "is_adv", ":", "\n", "      ", "ef", "=", "ef", "+", "ds_i1", "\n", "nf", "=", "nf", "+", "ds_i2", "\n", "#ef=ef+ds_i2", "\n", "#nf=nf+ds_i1", "\n", "#for index, _ in np.ndenumerate(diffs[i]):", "\n", "#  flag=diffs[i][index]>0", "\n", "#  if flag:", "\n", "#    ef[index]+=1", "\n", "#  else:", "\n", "#    nf[index]+=1", "\n", "", "else", ":", "\n", "      ", "ep", "=", "ep", "+", "ds_i1", "\n", "np_", "=", "np_", "+", "ds_i2", "\n", "#ep=ep+ds_i2", "\n", "#np_=np_+ds_i1", "\n", "#for index, _ in np.ndenumerate(diffs[i]):", "\n", "#  flag=diffs[i][index]>0", "\n", "#  if flag:", "\n", "#    ep[index]+=1", "\n", "#  else:", "\n", "#    np_[index]+=1", "\n", "\n", "", "", "ind", "=", "None", "\n", "spectrum", "=", "None", "\n", "if", "metric", "==", "'random'", ":", "\n", "    ", "spectrum", "=", "np", ".", "random", ".", "rand", "(", "sp", "[", "0", "]", ",", "sp", "[", "1", "]", ",", "sp", "[", "2", "]", ")", "\n", "", "elif", "metric", "==", "'zoltar'", ":", "\n", "    ", "zoltar", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "for", "index", ",", "x", "in", "np", ".", "ndenumerate", "(", "origin_data", ")", ":", "\n", "      ", "aef", "=", "ef", "[", "index", "]", "\n", "anf", "=", "nf", "[", "index", "]", "\n", "anp", "=", "np_", "[", "index", "]", "\n", "aep", "=", "ep", "[", "index", "]", "\n", "if", "aef", "==", "0", ":", "\n", "        ", "zoltar", "[", "index", "]", "=", "0", "\n", "", "else", ":", "\n", "        ", "k", "=", "(", "10000.0", "*", "anf", "*", "aep", ")", "/", "aef", "\n", "zoltar", "[", "index", "]", "=", "(", "aef", "*", "1.0", ")", "/", "(", "aef", "+", "anf", "+", "aep", "+", "k", ")", "\n", "", "", "spectrum", "=", "zoltar", "\n", "", "elif", "metric", "==", "'wong-ii'", ":", "\n", "    ", "wong", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "for", "index", ",", "x", "in", "np", ".", "ndenumerate", "(", "origin_data", ")", ":", "\n", "      ", "aef", "=", "ef", "[", "index", "]", "\n", "anf", "=", "nf", "[", "index", "]", "\n", "anp", "=", "np_", "[", "index", "]", "\n", "aep", "=", "ep", "[", "index", "]", "\n", "wong", "[", "index", "]", "=", "aef", "-", "aep", "\n", "", "spectrum", "=", "wong", "\n", "", "elif", "metric", "==", "'ochiai'", ":", "\n", "    ", "ochiai", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "for", "index", ",", "x", "in", "np", ".", "ndenumerate", "(", "origin_data", ")", ":", "\n", "      ", "aef", "=", "ef", "[", "index", "]", "\n", "anf", "=", "nf", "[", "index", "]", "\n", "anp", "=", "np_", "[", "index", "]", "\n", "aep", "=", "ep", "[", "index", "]", "\n", "try", ":", "\n", "        ", "ochiai", "[", "index", "]", "=", "aef", "/", "np", ".", "sqrt", "(", "(", "aef", "+", "anf", ")", "*", "(", "aef", "+", "aep", ")", ")", "\n", "", "except", ":", "ochiai", "[", "index", "]", "=", "0", "\n", "", "spectrum", "=", "ochiai", "\n", "", "elif", "metric", "==", "'tarantula'", ":", "\n", "    ", "tarantula", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "float", ")", "\n", "for", "index", ",", "x", "in", "np", ".", "ndenumerate", "(", "origin_data", ")", ":", "\n", "      ", "aef", "=", "ef", "[", "index", "]", "\n", "anf", "=", "nf", "[", "index", "]", "\n", "anp", "=", "np_", "[", "index", "]", "\n", "aep", "=", "ep", "[", "index", "]", "\n", "try", ":", "tarantula", "[", "index", "]", "=", "(", "aef", "/", "(", "aef", "+", "anf", ")", ")", "/", "(", "aef", "/", "(", "aef", "+", "anf", ")", "+", "anp", "/", "(", "aep", "+", "anp", ")", ")", "\n", "except", ":", "tarantula", "[", "index", "]", "=", "0", "\n", "", "spectrum", "=", "tarantula", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "'The measure is not supported: {0}'", ".", "format", "(", "metric", ")", ")", "\n", "\n", "", "spectrum_flags", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "for", "iindex", ",", "_", "in", "np", ".", "ndenumerate", "(", "spectrum", ")", ":", "\n", "    ", "tot", "=", "0", "\n", "for", "j", "in", "range", "(", "0", ",", "(", "sp", "[", "2", "]", ")", ")", ":", "\n", "      ", "if", "not", "spectrum_flags", "[", "iindex", "[", "0", "]", "]", "[", "iindex", "[", "1", "]", "]", "[", "j", "]", ":", "\n", "        ", "tot", "+=", "spectrum", "[", "iindex", "[", "0", "]", "]", "[", "iindex", "[", "1", "]", "]", "[", "j", "]", "\n", "", "", "for", "j", "in", "range", "(", "0", ",", "(", "sp", "[", "2", "]", ")", ")", ":", "\n", "      ", "if", "not", "spectrum_flags", "[", "iindex", "[", "0", "]", "]", "[", "iindex", "[", "1", "]", "]", "[", "j", "]", ":", "\n", "        ", "spectrum_flags", "[", "iindex", "[", "0", "]", "]", "[", "iindex", "[", "1", "]", "]", "[", "j", "]", "=", "True", "\n", "spectrum", "[", "iindex", "[", "0", "]", "]", "[", "iindex", "[", "1", "]", "]", "[", "j", "]", "=", "tot", "\n", "\n", "# to smooth", "\n", "", "", "", "smooth", "=", "np", ".", "ones", "(", "spectrum", ".", "shape", ")", "\n", "sI", "=", "spectrum", ".", "shape", "[", "0", "]", "\n", "sJ", "=", "spectrum", ".", "shape", "[", "1", "]", "\n", "sd", "=", "(", "int", ")", "(", "sI", "*", "(", "10.", "/", "224", ")", ")", "\n", "for", "si", "in", "range", "(", "0", ",", "spectrum", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "for", "sj", "in", "range", "(", "0", ",", "spectrum", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "for", "sk", "in", "range", "(", "0", ",", "spectrum", ".", "shape", "[", "2", "]", ")", ":", "\n", "              ", "smooth", "[", "si", "]", "[", "sj", "]", "[", "sk", "]", "=", "np", ".", "mean", "(", "spectrum", "[", "np", ".", "max", "(", "[", "0", ",", "si", "-", "sd", "]", ")", ":", "np", ".", "min", "(", "[", "sI", ",", "si", "+", "sd", "]", ")", ",", "np", ".", "max", "(", "[", "0", ",", "sj", "-", "sd", "]", ")", ":", "np", ".", "min", "(", "[", "sJ", ",", "sj", "+", "sd", "]", ")", ",", "sk", "]", ")", "\n", "", "", "", "spectrum", "=", "smooth", "\n", "\n", "ind", "=", "np", ".", "argsort", "(", "spectrum", ",", "axis", "=", "None", ")", "\n", "\n", "return", "ind", ",", "spectrum", "\n", "", ""]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.boxt.__init__": [[17, 19], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "    ", "self", ".", "x1", ",", "self", ".", "x2", ",", "self", ".", "y1", ",", "self", ".", "y2", "=", "x1", ",", "x2", ",", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.boxt.area": [[20, 22], ["None"], "methods", ["None"], ["", "def", "area", "(", "self", ")", ":", "\n", "      ", "return", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "*", "(", "self", ".", "y2", "-", "self", ".", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.nodet.__init__": [[24, 34], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "heatMap", ",", "frags", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "inp", ",", "outp", ",", "totScore", ",", "mask_value", ",", "depth", ")", ":", "\n", "    ", "self", ".", "heatMap", "=", "heatMap", "\n", "self", ".", "frags", "=", "2", "#frags", "\n", "self", ".", "x1", ",", "self", ".", "x2", ",", "self", ".", "y1", ",", "self", ".", "y2", "=", "x1", ",", "x2", ",", "y1", ",", "y2", "\n", "self", ".", "inp", "=", "inp", "\n", "self", ".", "outp", "=", "outp", "\n", "self", ".", "totScore", "=", "totScore", "\n", "self", ".", "mask_value", "=", "mask_value", "\n", "self", ".", "fragSize_lb", "=", "3", "\n", "self", ".", "depth", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.nCr": [[35, 38], ["f", "f", "f"], "function", ["None"], ["", "", "def", "nCr", "(", "n", ",", "r", ")", ":", "\n", "    ", "f", "=", "math", ".", "factorial", "\n", "return", "f", "(", "n", ")", "/", "f", "(", "r", ")", "/", "f", "(", "n", "-", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.causal_search": [[40, 59], ["range", "range", "all_true.append", "len", "len", "numpy.logical_xor", "numpy.count_nonzero", "numpy.count_nonzero", "len"], "function", ["None"], ["", "def", "causal_search", "(", "i_feature", ",", "truthTable", ")", ":", "\n", "  ", "all_true", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "truthTable", ")", "-", "1", ")", ":", "\n", "    ", "all_true", ".", "append", "(", "True", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "truthTable", ")", ")", ":", "\n", "    ", "i_rows", "=", "truthTable", "[", "i", "]", "\n", "for", "row", "in", "i_rows", ":", "\n", "      ", "if", "row", "[", "i_feature", "]", "or", "row", "[", "-", "1", ":", "]", "[", "0", "]", ":", "continue", "\n", "if", "i", "==", "0", ":", "\n", "        ", "return", "row", "[", ":", "-", "1", "]", ",", "all_true", "#1/(1.+1)", "\n", "## to search these rows with i-1 False", "\n", "", "minus_i_rows", "=", "truthTable", "[", "i", "-", "1", "]", "\n", "for", "row2", "in", "minus_i_rows", ":", "\n", "        ", "if", "not", "row2", "[", "i_feature", "]", "or", "not", "row2", "[", "-", "1", ":", "]", "[", "0", "]", ":", "continue", "\n", "xor_res", "=", "np", ".", "logical_xor", "(", "row", ",", "row2", ")", "\n", "if", "np", ".", "count_nonzero", "(", "xor_res", ")", ">", "2", ":", "continue", "\n", "c", "=", "len", "(", "row", ")", "-", "1", "-", "np", ".", "count_nonzero", "(", "row", ")", "\n", "return", "row", "[", ":", "-", "1", "]", ",", "row2", "[", ":", "-", "1", "]", "\n", "", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.compositional_causal_explain": [[61, 180], ["numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "comp_explain.boxt", "comp_explain.boxt", "comp_explain.boxt", "comp_explain.boxt", "boxes.append", "boxes.append", "boxes.append", "boxes.append", "numpy.arange", "range", "numpy.zeros", "range", "numpy.std", "numpy.mean", "numpy.max", "final_scores.sum", "range", "list", "truthTable.append", "comp_explain.causal_search", "res_rows.append", "numpy.unravel_index", "len", "numpy.unravel_index", "inp.copy", "comp_explain.nodet", "comp_explain.compositional_causal_explain", "itertools.combinations", "inp.copy", "eobj.model.predict", "rows_r.append", "numpy.array", "utils.sbfl_preprocess", "row.append", "row.append", "numpy.array", "row.append", "row.append", "numpy.array", "numpy.argsort", "len", "numpy.count_nonzero"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.causal_search", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.compositional_causal_explain", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess"], ["", "def", "compositional_causal_explain", "(", "node", ",", "eobj", ")", ":", "\n", "  ", "tmp", "=", "1", "\n", "heatMap", "=", "np", ".", "zeros", "(", "node", ".", "heatMap", ".", "shape", ")", "\n", "frags", "=", "2", "#node.frags", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "node", ".", "x1", ",", "node", ".", "x2", ",", "node", ".", "y1", ",", "node", ".", "y2", "\n", "inp", "=", "node", ".", "inp", "\n", "outp", "=", "node", ".", "outp", "\n", "mask_value", "=", "node", ".", "mask_value", "\n", "\n", "length", "=", "x2", "-", "x1", "+", "1", "\n", "height", "=", "y2", "-", "y1", "+", "1", "\n", "\n", "final_boxes", "=", "None", "\n", "final_scores", "=", "None", "\n", "final_res_rows", "=", "None", "\n", "var_factor", "=", "-", "1", "\n", "max_factor", "=", "-", "1", "\n", "ave_factor", "=", "-", "1", "\n", "area_factor", "=", "10000", "\n", "\n", "#if node.depth>2 or node.totScore<=10 or length<node.fragSize_lb or height<node.fragSize_lb: ## end point", "\n", "if", "length", "<", "node", ".", "fragSize_lb", "or", "height", "<", "node", ".", "fragSize_lb", ":", "## end point", "\n", "      ", "regionSize", "=", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", ".", "size", "#(x2-x1)*(y2-y1)*3", "\n", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", "=", "node", ".", "totScore", "/", "regionSize", "\n", "return", "heatMap", "\n", "\n", "", "for", "s", "in", "range", "(", "0", ",", "1", ")", ":", "#step):", "\n", "    ", "boxes", "=", "[", "]", "\n", "xi", "=", "np", ".", "random", ".", "randint", "(", "x1", "+", "1", ",", "x2", ")", "\n", "yi", "=", "np", ".", "random", ".", "randint", "(", "y1", "+", "1", ",", "y2", ")", "\n", "box0", "=", "boxt", "(", "x1", ",", "xi", ",", "y1", ",", "yi", ")", "\n", "box1", "=", "boxt", "(", "x1", ",", "xi", ",", "yi", ",", "y2", ")", "\n", "box2", "=", "boxt", "(", "xi", ",", "x2", ",", "y1", ",", "yi", ")", "\n", "box3", "=", "boxt", "(", "xi", ",", "x2", ",", "yi", ",", "y2", ")", "\n", "boxes", ".", "append", "(", "box0", ")", "\n", "boxes", ".", "append", "(", "box1", ")", "\n", "boxes", ".", "append", "(", "box2", ")", "\n", "boxes", ".", "append", "(", "box3", ")", "\n", "\n", "# to build the truth table", "\n", "truthTable", "=", "[", "]", "\n", "n", "=", "4", "\n", "indices", "=", "np", ".", "arange", "(", "0", ",", "n", ")", "\n", "for", "r", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "      ", "comb_list", "=", "list", "(", "combinations", "(", "indices", ",", "r", ")", ")", "\n", "rows_r", "=", "[", "]", "\n", "for", "comb", "in", "comb_list", ":", "\n", "        ", "early_stop", "=", "0", "\n", "row", "=", "[", "]", "\n", "mutant", "=", "inp", ".", "copy", "(", ")", "\n", "for", "index", "in", "indices", ":", "\n", "          ", "if", "index", "in", "comb", ":", "\n", "            ", "row", ".", "append", "(", "False", ")", "\n", "mutant", "[", "boxes", "[", "index", "]", ".", "x1", ":", "boxes", "[", "index", "]", ".", "x2", ",", "boxes", "[", "index", "]", ".", "y1", ":", "boxes", "[", "index", "]", ".", "y2", ",", ":", "]", "=", "mask_value", "\n", "early_stop", "=", "early_stop", "+", "1", "\n", "", "else", ":", "row", ".", "append", "(", "True", ")", "\n", "\n", "#if early_stop<=2: continue", "\n", "\n", "", "res", "=", "eobj", ".", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "mutant", "]", ")", ")", ")", "\n", "y_mutant", "=", "np", ".", "argsort", "(", "res", ")", "[", "0", "]", "[", "-", "1", ":", "]", "\n", "if", "not", "(", "y_mutant", "[", "0", "]", "in", "outp", ")", ":", "\n", "          ", "row", ".", "append", "(", "False", ")", "\n", "", "else", ":", "\n", "          ", "row", ".", "append", "(", "True", ")", "\n", "", "rows_r", ".", "append", "(", "np", ".", "array", "(", "row", ")", ")", "\n", "##", "\n", "", "truthTable", ".", "append", "(", "np", ".", "array", "(", "rows_r", ")", ")", "\n", "\n", "# to compute the scores", "\n", "", "scores", "=", "np", ".", "zeros", "(", "(", "frags", ",", "frags", ")", ")", "\n", "res_rows", "=", "[", "]", "\n", "for", "i_feature", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "      ", "row", ",", "row2", "=", "causal_search", "(", "i_feature", ",", "truthTable", ")", "\n", "res_rows", ".", "append", "(", "row2", ")", "\n", "uIndex", "=", "np", ".", "unravel_index", "(", "i_feature", ",", "(", "frags", ",", "frags", ")", ")", "\n", "res", "=", "0", "\n", "if", "row", "is", "not", "None", ":", "\n", "        ", "res", "=", "1.", "/", "(", "len", "(", "row", ")", "-", "np", ".", "count_nonzero", "(", "row", ")", "+", "1", ")", "\n", "", "scores", "[", "uIndex", "]", "=", "res", "\n", "\n", "", "std", "=", "np", ".", "std", "(", "scores", ")", "\n", "ave", "=", "np", ".", "mean", "(", "scores", ")", "\n", "max_", "=", "np", ".", "max", "(", "scores", ")", "\n", "if", "std", ">", "var_factor", ":", "\n", "      ", "var_factor", "=", "std", "\n", "ave_factor", "=", "ave", "\n", "final_boxes", "=", "boxes", "\n", "final_scores", "=", "scores", "\n", "final_res_rows", "=", "res_rows", "\n", "\n", "", "", "if", "final_scores", "is", "not", "None", ":", "\n", "    ", "norm_sum", "=", "final_scores", ".", "sum", "(", ")", "\n", "if", "norm_sum", ">", "0", ":", "\n", "      ", "final_scores", "=", "(", "final_scores", "/", "norm_sum", ")", "*", "node", ".", "totScore", "\n", "", "else", ":", "\n", "        ", "regionSize", "=", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", ".", "size", "\n", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", "=", "node", ".", "totScore", "/", "regionSize", "\n", "return", "heatMap", "\n", "\n", "", "", "if", "final_scores", "is", "None", ":", "\n", "      ", "regionSize", "=", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", ".", "size", "\n", "heatMap", "[", "x1", ":", "x2", ",", "y1", ":", "y2", ",", ":", "]", "=", "node", ".", "totScore", "/", "regionSize", "\n", "return", "heatMap", "\n", "", "else", ":", "\n", "      ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "final_boxes", ")", ")", ":", "\n", "          ", "box", "=", "final_boxes", "[", "i", "]", "\n", "uIndex", "=", "np", ".", "unravel_index", "(", "i", ",", "(", "2", ",", "2", ")", ")", "\n", "if", "final_scores", "[", "uIndex", "]", "<", "0.0001", ":", "\n", "            ", "heatMap", "[", "box", ".", "x1", ":", "box", ".", "x2", ",", "box", ".", "y1", ":", "box", ".", "y2", ",", ":", "]", "=", "0", "\n", "continue", "\n", "", "child_inp", "=", "inp", ".", "copy", "(", ")", "\n", "\n", "child_node", "=", "nodet", "(", "heatMap", ",", "frags", ",", "box", ".", "x1", ",", "box", ".", "x2", ",", "box", ".", "y1", ",", "box", ".", "y2", ",", "child_inp", ",", "node", ".", "outp", ",", "final_scores", "[", "uIndex", "]", ",", "node", ".", "mask_value", ",", "node", ".", "depth", "+", "1", ")", "\n", "child_heatMap", "=", "compositional_causal_explain", "(", "child_node", ",", "eobj", ")", "\n", "heatMap", "[", "box", ".", "x1", ":", "box", ".", "x2", ",", "box", ".", "y1", ":", "box", ".", "y2", ",", ":", "]", "=", "child_heatMap", "[", "box", ".", "x1", ":", "box", ".", "x2", ",", "box", ".", "y1", ":", "box", ".", "y2", ",", ":", "]", "\n", "\n", "\n", "", "", "return", "heatMap", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.comp_explain": [[182, 275], ["print", "range", "os.system", "open", "open.write", "open.close", "len", "model.predict", "print", "dii.replace.replace", "os.system", "numpy.zeros", "range", "utils.sbfl_preprocess", "print", "numpy.zeros", "comp_explain.nodet", "time.time", "comp_explain.compositional_causal_explain", "time.time", "print", "hmaps.append", "numpy.ones", "range", "numpy.array", "numpy.array", "cv2.applyColorMap", "cv2.addWeighted", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "print", "numpy.array", "numpy.argsort", "str().replace", "int", "int", "len", "range", "cv2.cvtColor", "utils.sbfl_elementt", "numpy.argsort", "print", "utils.top_plot", "print", "range", "open", "open.write", "open.close", "str", "numpy.mean", "np.array.max", "datetime.datetime.now", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.comp_explain.compositional_causal_explain", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.top_plot"], ["", "def", "comp_explain", "(", "eobj", ")", ":", "\n", "  ", "print", "(", "'\\n[To explain: Causal Explanation is used]'", ")", "\n", "model", "=", "eobj", ".", "model", "# this is the model to explain", "\n", "## to create output DI", "\n", "di", "=", "eobj", ".", "outputs", "# output dir", "\n", "try", ":", "\n", "    ", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "di", ")", ")", "\n", "#print ('mkdir -p {0}'.format(di))", "\n", "", "except", ":", "pass", "\n", "\n", "if", "not", "eobj", ".", "occlusion_file", "is", "None", ":", "\n", "      ", "f", "=", "open", "(", "di", "+", "\"/occlusion-results.txt\"", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "'input_name   x_method    [x size, intersection with occlu, iou with occlu]\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "landmark", "=", "False", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "eobj", ".", "inputs", ")", ")", ":", "\n", "    ", "name", "=", "eobj", ".", "fnames", "[", "index", "]", "\n", "x", "=", "eobj", ".", "inputs", "[", "index", "]", "\n", "res", "=", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "x", "]", ")", ")", ")", "\n", "y", "=", "np", ".", "argsort", "(", "res", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "#print ('## Input:', index, name)", "\n", "print", "(", "'\\n[Input {2}: {0} / Output Label (to Explain): {1}]'", ".", "format", "(", "eobj", ".", "fnames", "[", "index", "]", ",", "y", ",", "index", ")", ")", "\n", "#print ('## Output:', y, np.sort(res)[0][-eobj.top_classes:])", "\n", "#print ('## Output:', np.argsort(res)[0][-5:])", "\n", "#print (x.shape)", "\n", "#continue", "\n", "\n", "dii", "=", "di", "+", "'/{1}-{0}'", ".", "format", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", ",", "\"causal\"", ")", "\n", "dii", "=", "dii", ".", "replace", "(", "':'", ",", "'-'", ")", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "dii", ")", ")", "\n", "hmaps", "=", "[", "]", "\n", "hmap", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "iou_min", "=", "1", "\n", "exp_min", "=", "1", "\n", "intersection_min", "=", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "eobj", ".", "testgen_iter", ")", ":", "\n", "        ", "print", "(", "'  #### [Iter {0}: Start Causal Refinement...]'", ".", "format", "(", "i", ")", ")", "\n", "heatMap", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "# initialise an all-zero heatmap", "\n", "frags", "=", "2", "#3 ## 3x3 is the limit an exhuastive search can handle", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "0", ",", "int", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "0", ",", "int", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "totScore", "=", "10000.", "\n", "#heatMap=np.ones(x.shape) * (totScore / heatMap.size)", "\n", "node", "=", "nodet", "(", "heatMap", ",", "frags", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "x", ",", "y", ",", "totScore", ",", "mask_value", "=", "eobj", ".", "adv_value", ",", "depth", "=", "0", ")", "\n", "# to call the recursive 'explain' method", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "res_heatMap", "=", "compositional_causal_explain", "(", "node", ",", "eobj", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'  #### [Causal Refinement Done... Time: {0:.0f} seconds]'", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n", "hmaps", ".", "append", "(", "res_heatMap", ")", "\n", "hmap", "=", "hmap", "+", "res_heatMap", "\n", "\n", "## update res_heatMap", "\n", "res_heatMap", "=", "hmap", "/", "len", "(", "hmaps", ")", "\n", "smooth", "=", "np", ".", "ones", "(", "res_heatMap", ".", "shape", ")", "\n", "sI", "=", "res_heatMap", ".", "shape", "[", "0", "]", "\n", "sJ", "=", "res_heatMap", ".", "shape", "[", "1", "]", "\n", "sd", "=", "3", "#5 2", "\n", "for", "si", "in", "range", "(", "0", ",", "res_heatMap", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "sj", "in", "range", "(", "0", ",", "res_heatMap", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "sk", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                    ", "smooth", "[", "si", "]", "[", "sj", "]", "[", "sk", "]", "=", "np", ".", "mean", "(", "res_heatMap", "[", "np", ".", "max", "(", "[", "0", ",", "si", "-", "sd", "]", ")", ":", "np", ".", "min", "(", "[", "sI", ",", "si", "+", "sd", "]", ")", ",", "np", ".", "max", "(", "[", "0", ",", "sj", "-", "sd", "]", ")", ":", "np", ".", "min", "(", "[", "sJ", ",", "sj", "+", "sd", "]", ")", ",", "sk", "]", ")", "\n", "\n", "\n", "", "", "", "res_heatMap", "=", "smooth", "\n", "res_heatMap", "=", "np", ".", "array", "(", "(", "res_heatMap", "/", "res_heatMap", ".", "max", "(", ")", ")", "*", "255", ")", "\n", "\n", "gray_img", "=", "np", ".", "array", "(", "res_heatMap", "[", ":", ",", ":", ",", "0", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "heatmap_img", "=", "cv2", ".", "applyColorMap", "(", "gray_img", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "fin", "=", "cv2", ".", "addWeighted", "(", "heatmap_img", ",", "0.7", ",", "x", ",", "0.3", ",", "0", ")", "\n", "plt", ".", "rcParams", "[", "\"axes.grid\"", "]", "=", "False", "\n", "plt", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "fin", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "\n", "hmap_name", "=", "(", "dii", "+", "'/heatmap_iter{0}.png'", ".", "format", "(", "i", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "hmap_name", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "print", "(", "'  #### [Saved Heatmap: {0}]'", ".", "format", "(", "hmap_name", ")", ")", "\n", "\n", "if", "not", "eobj", ".", "text_only", ":", "\n", "          ", "selement", "=", "sbfl_elementt", "(", "x", ",", "0", ",", "None", ",", "None", ",", "model", ")", "\n", "selement", ".", "y", "=", "y", "\n", "ind", "=", "np", ".", "argsort", "(", "res_heatMap", ",", "axis", "=", "None", ")", "\n", "\n", "outs_dir", "=", "dii", "+", "'/iter{0}'", ".", "format", "(", "i", ")", "\n", "print", "(", "'  #### [Saving into {0}]'", ".", "format", "(", "outs_dir", ")", ")", "\n", "ret", "=", "top_plot", "(", "selement", ",", "ind", ",", "outs_dir", ",", "\"causal\"", ",", "eobj", ")", "\n", "if", "not", "eobj", ".", "occlusion_file", "is", "None", ":", "\n", "              ", "f", "=", "open", "(", "di", "+", "\"/occlusion-results.txt\"", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "'{0} {1} {2}\\n'", ".", "format", "(", "eobj", ".", "fnames", "[", "i", "]", ",", "'causal'", ",", "ret", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "'  #### [Done]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.spectra_gen.spectra_sym_gen": [[4, 104], ["type", "numpy.zeros", "int", "numpy.array", "numpy.reshape", "numpy.arange", "x.copy", "numpy.random.randint", "numpy.random.randint", "L0[].flatten", "numpy.array", "numpy.array", "numpy.all", "numpy.put", "numpy.put", "len", "failing.append", "passing.append", "len", "len", "adv_value.take", "numpy.argsort", "numpy.intersect1d", "x.copy", "int", "L0[].flatten", "x.copy", "int", "L0[].flatten", "model.predict", "numpy.put", "numpy.put", "len", "passing.append", "numpy.put", "numpy.put", "len", "failing.append", "utils.sbfl_preprocess", "adv_value.take", "numpy.argsort", "numpy.intersect1d", "adv_value.take", "numpy.argsort", "numpy.intersect1d", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.array", "model.predict", "model.predict", "utils.sbfl_preprocess", "utils.sbfl_preprocess", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.array"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess"], ["def", "spectra_sym_gen", "(", "eobj", ",", "x", ",", "y", ",", "adv_value", "=", "1", ",", "testgen_factor", "=", ".2", ",", "testgen_size", "=", "0", ")", ":", "\n", "\n", "\n", "  ", "v_type", "=", "type", "(", "adv_value", ")", "\n", "model", "=", "eobj", ".", "model", "\n", "failing", "=", "[", "]", "\n", "passing", "=", "[", "]", "\n", "\n", "#inputs=[]", "\n", "sp", "=", "x", ".", "shape", "\n", "x_flag", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "portion", "=", "int", "(", "sp", "[", "0", "]", "*", "testgen_factor", ")", "\n", "incr", "=", "1", "/", "6", "*", "portion", "\n", "if", "portion", "<", "1", ":", "portion", "=", "1", "\n", "L0", "=", "np", ".", "array", "(", "np", ".", "arange", "(", "x", ".", "size", ")", ")", "\n", "L0", "=", "np", ".", "reshape", "(", "L0", ",", "sp", ")", "\n", "\n", "while", "(", "not", "np", ".", "all", "(", "x_flag", ")", ")", "or", "len", "(", "passing", ")", "+", "len", "(", "failing", ")", "<", "testgen_size", ":", "\n", "#print ('####', len(passing), len(failing))", "\n", "    ", "t", "=", "x", ".", "copy", "(", ")", "\n", "\n", "i0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "sp", "[", "0", "]", ")", "\n", "i1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "sp", "[", "1", "]", ")", "\n", "\n", "h", "=", "portion", "\n", "region", "=", "L0", "[", "np", ".", "max", "(", "[", "i0", "-", "h", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i0", "+", "h", ",", "sp", "[", "0", "]", "]", ")", ",", "np", ".", "max", "(", "[", "i1", "-", "h", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i1", "+", "h", ",", "sp", "[", "1", "]", "]", ")", "]", ".", "flatten", "(", ")", "\n", "\n", "L", "=", "region", "#L0[0:portion]", "\n", "if", "v_type", "==", "np", ".", "ndarray", ":", "\n", "      ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ".", "take", "(", "L", ")", ")", "\n", "", "else", ":", "\n", "      ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ")", "\n", "", "x_flag", ".", "flat", "[", "L", "]", "=", "True", "#np.put(x, L, True)", "\n", "new_y", "=", "np", ".", "argsort", "(", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "t", "]", ")", ")", ")", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "is_adv", "=", "(", "len", "(", "np", ".", "intersect1d", "(", "y", ",", "new_y", ")", ")", "==", "0", ")", "\n", "\n", "if", "is_adv", ":", "\n", "      ", "failing", ".", "append", "(", "t", ")", "\n", "## to find a passing", "\n", "ite", "=", "h", "#testgen_factor", "\n", "while", "ite", ">", "1", ":", "#ite>0.01:", "\n", "        ", "t2", "=", "x", ".", "copy", "(", ")", "\n", "#ite=ite-1#ite//2 #ite=(ite+0)/2", "\n", "ite", "=", "int", "(", "ite", "-", "incr", ")", "\n", "if", "ite", "<", "1", ":", "break", "\n", "region", "=", "L0", "[", "np", ".", "max", "(", "[", "i0", "-", "ite", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i0", "+", "ite", ",", "sp", "[", "0", "]", "]", ")", ",", "np", ".", "max", "(", "[", "i1", "-", "ite", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i1", "+", "ite", ",", "sp", "[", "1", "]", "]", ")", "]", ".", "flatten", "(", ")", "\n", "\n", "L", "=", "region", "#L0[0:portion]", "\n", "if", "v_type", "==", "np", ".", "ndarray", ":", "\n", "          ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ".", "take", "(", "L", ")", ")", "\n", "", "else", ":", "\n", "          ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ")", "\n", "", "x_flag", ".", "flat", "[", "L", "]", "=", "True", "#np.put(x, L, True)", "\n", "new_y", "=", "np", ".", "argsort", "(", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "t", "]", ")", ")", ")", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "#is_adv=(len(np.intersect1d(y, new_y))==0)", "\n", "#ite-=0.01", "\n", "#L2=L0[0:int(ite/testgen_factor*portion)]", "\n", "#if v_type==np.ndarray:", "\n", "#  np.put(t2, L2, adv_value.take(L2))", "\n", "#else:", "\n", "#  np.put(t2, L2, adv_value)", "\n", "#new_y=np.argsort(model.predict(sbfl_preprocess(eobj, np.array([t2]))))[0][-eobj.top_classes:]", "\n", "##print (y, new_y)", "\n", "if", "(", "len", "(", "np", ".", "intersect1d", "(", "y", ",", "new_y", ")", ")", "!=", "0", ")", ":", "\n", "          ", "passing", ".", "append", "(", "t2", ")", "\n", "break", "\n", "\n", "", "", "", "else", ":", "\n", "      ", "passing", ".", "append", "(", "t", ")", "\n", "## to find a failing", "\n", "ite", "=", "h", "#testgen_factor", "\n", "while", "ite", "<", "sp", "[", "0", "]", "/", "2", ":", "#0.99:", "\n", "        ", "t2", "=", "x", ".", "copy", "(", ")", "\n", "#ite=ite+1#ite*2", "\n", "ite", "=", "int", "(", "ite", "+", "incr", ")", "\n", "if", "ite", ">", "sp", "[", "0", "]", "/", "2", ":", "break", "\n", "region", "=", "L0", "[", "np", ".", "max", "(", "[", "i0", "-", "ite", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i0", "+", "ite", ",", "sp", "[", "0", "]", "]", ")", ",", "np", ".", "max", "(", "[", "i1", "-", "ite", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i1", "+", "ite", ",", "sp", "[", "1", "]", "]", ")", "]", ".", "flatten", "(", ")", "\n", "\n", "L", "=", "region", "#L0[0:portion]", "\n", "if", "v_type", "==", "np", ".", "ndarray", ":", "\n", "          ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ".", "take", "(", "L", ")", ")", "\n", "", "else", ":", "\n", "          ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ")", "\n", "", "x_flag", ".", "flat", "[", "L", "]", "=", "True", "#np.put(x, L, True)", "\n", "new_y", "=", "np", ".", "argsort", "(", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "t", "]", ")", ")", ")", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "#t2=x.copy()", "\n", "#ite=(ite+1)/2", "\n", "##ite+=0.01", "\n", "#L2=L0[0:int(ite/testgen_factor*portion)]", "\n", "#if v_type==np.ndarray:", "\n", "#  np.put(t2, L2, adv_value.take(L2))", "\n", "#else:", "\n", "#  np.put(t2, L2, adv_value)", "\n", "#new_y=np.argsort(model.predict(sbfl_preprocess(eobj, np.array([t2]))))[0][-eobj.top_classes:]", "\n", "if", "(", "len", "(", "np", ".", "intersect1d", "(", "y", ",", "new_y", ")", ")", "==", "0", ")", ":", "\n", "          ", "failing", ".", "append", "(", "t2", ")", "\n", "x_flag", ".", "flat", "[", "L", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "", "return", "np", ".", "array", "(", "passing", ")", ",", "np", ".", "array", "(", "failing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.spectra_gen.spectra_gen": [[105, 139], ["type", "numpy.zeros", "int", "x.copy", "numpy.random.choice", "inputs.append", "numpy.all", "len", "numpy.put", "numpy.put", "adv_value.take"], "function", ["None"], ["", "def", "spectra_gen", "(", "x", ",", "adv_value", "=", "1", ",", "testgen_factor", "=", "0.01", ",", "testgen_size", "=", "0", ")", ":", "\n", "\n", "#print (adv_value, testgen_factor, testgen_size)", "\n", "  ", "v_type", "=", "type", "(", "adv_value", ")", "\n", "\n", "inputs", "=", "[", "]", "\n", "sp", "=", "x", ".", "shape", "\n", "x_flag", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "portion", "=", "int", "(", "x", ".", "size", "*", "testgen_factor", ")", "#int(x.size/sp[2]*testgen_factor)", "\n", "\n", "while", "(", "not", "np", ".", "all", "(", "x_flag", ")", ")", "or", "len", "(", "inputs", ")", "<", "testgen_size", ":", "\n", "    ", "t", "=", "x", ".", "copy", "(", ")", "\n", "L", "=", "np", ".", "random", ".", "choice", "(", "x", ".", "size", ",", "portion", ")", "\n", "if", "v_type", "==", "np", ".", "ndarray", ":", "\n", "#t.flat[L]=adv_value.take(L) ", "\n", "      ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ".", "take", "(", "L", ")", ")", "\n", "", "else", ":", "\n", "#t.flat[L]=adv_value ", "\n", "      ", "np", ".", "put", "(", "t", ",", "L", ",", "adv_value", ")", "\n", "", "x_flag", ".", "flat", "[", "L", "]", "=", "True", "#np.put(x, L, True)", "\n", "#for pos in L:", "\n", "#  ipos=np.unravel_index(pos,sp) ", "\n", "#  #if v_type==np.ndarray:", "\n", "#  #  t.flat[pos]=adv_value.flat[pos]", "\n", "#  #else: t.flat[pos]=adv_value", "\n", "#  #x_flag.flat[pos]=True #np.put(x, L, True)", "\n", "#  for j in range(0, sp[2]):", "\n", "#    if v_type==np.ndarray:", "\n", "#      t[ipos[0]][ipos[1]][j]=adv_value[ipos[0]][ipos[1]][j]", "\n", "#    else:", "\n", "#      t[ipos[0]][ipos[1]][j]=adv_value", "\n", "#    x_flag[ipos[0]][ipos[1]][j]=True", "\n", "inputs", ".", "append", "(", "t", ")", "\n", "", "return", "inputs", "\n", "", ""]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_explain.to_explain": [[9, 105], ["print", "print", "range", "os.system", "open", "open.write", "open.close", "len", "model.predict", "print", "utils.sbfl_elementt", "dii.replace.replace", "os.system", "utils.sbfl_preprocess", "print", "time.time", "spectra_gen.spectra_sym_gen", "len", "len", "time.time", "print", "print", "to_rank.to_rank", "print", "os.system", "numpy.savetxt", "numpy.array", "numpy.array", "cv2.applyColorMap", "cv2.addWeighted", "plt.imshow", "plt.savefig", "numpy.array", "numpy.argsort", "adv_xs.append", "adv_ys.append", "adv_xs.append", "adv_ys.append", "print", "str().replace", "numpy.repeat", "cv2.cvtColor", "utils.top_plot", "print", "open", "open.write", "open.close", "str", "np.array.max", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.spectra_gen.spectra_sym_gen", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_rank.to_rank", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.top_plot"], ["def", "to_explain", "(", "eobj", ")", ":", "\n", "  ", "print", "(", "'\\n[To explain: SFL (Software Fault Localization) is used]'", ")", "\n", "print", "(", "'  ### [Measures: {0}]'", ".", "format", "(", "eobj", ".", "measures", ")", ")", "\n", "model", "=", "eobj", ".", "model", "\n", "## to create output DI", "\n", "#print ('\\n[Create output folder: {0}]'.format(eobj.outputs))", "\n", "di", "=", "eobj", ".", "outputs", "\n", "try", ":", "\n", "    ", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "di", ")", ")", "\n", "", "except", ":", "pass", "\n", "\n", "if", "not", "eobj", ".", "boxes", "is", "None", ":", "\n", "      ", "f", "=", "open", "(", "di", "+", "\"/wsol-results.txt\"", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "'input_name   x_method    intersection_with_groundtruth\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "eobj", ".", "inputs", ")", ")", ":", "\n", "    ", "x", "=", "eobj", ".", "inputs", "[", "i", "]", "\n", "res", "=", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "x", "]", ")", ")", ")", "\n", "y", "=", "np", ".", "argsort", "(", "res", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "\n", "print", "(", "'\\n[Input {2}: {0} / Output Label (to Explain): {1}]'", ".", "format", "(", "eobj", ".", "fnames", "[", "i", "]", ",", "y", ",", "i", ")", ")", "\n", "\n", "ite", "=", "0", "\n", "reasonable_advs", "=", "False", "\n", "while", "ite", "<", "eobj", ".", "testgen_iter", ":", "\n", "      ", "print", "(", "'  #### [Start generating SFL spectra...]'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ite", "+=", "1", "\n", "\n", "passing", ",", "failing", "=", "spectra_sym_gen", "(", "eobj", ",", "x", ",", "y", "[", "-", "1", ":", "]", ",", "adv_value", "=", "eobj", ".", "adv_value", ",", "testgen_factor", "=", "eobj", ".", "testgen_factor", ",", "testgen_size", "=", "eobj", ".", "testgen_size", ")", "\n", "spectra", "=", "[", "]", "\n", "num_advs", "=", "len", "(", "failing", ")", "\n", "adv_xs", "=", "[", "]", "\n", "adv_ys", "=", "[", "]", "\n", "for", "e", "in", "passing", ":", "\n", "        ", "adv_xs", ".", "append", "(", "e", ")", "\n", "adv_ys", ".", "append", "(", "0", ")", "\n", "", "for", "e", "in", "failing", ":", "\n", "        ", "adv_xs", ".", "append", "(", "e", ")", "\n", "adv_ys", ".", "append", "(", "-", "1", ")", "\n", "", "tot", "=", "len", "(", "adv_xs", ")", "\n", "\n", "adv_part", "=", "num_advs", "*", "1.", "/", "tot", "\n", "#print ('###### adv_percentage:', adv_part, num_advs, tot)", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'  #### [SFL spectra generation DONE: passing {0:.2f} / failing {1:.2f}, total {2}; time: {3:.0f} seconds]'", ".", "format", "(", "1", "-", "adv_part", ",", "adv_part", ",", "tot", ",", "end", "-", "start", ")", ")", "\n", "\n", "if", "adv_part", "<=", "eobj", ".", "adv_lb", ":", "\n", "        ", "print", "(", "'  #### [too few failing tests: SFL explanation aborts]'", ")", "\n", "continue", "\n", "", "elif", "adv_part", ">=", "eobj", ".", "adv_ub", ":", "\n", "        ", "print", "(", "'  #### [too few many tests: SFL explanation aborts]'", ")", "\n", "continue", "\n", "", "else", ":", "\n", "        ", "reasonable_advs", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "reasonable_advs", ":", "\n", "#print ('###### failed to explain')", "\n", "      ", "continue", "\n", "\n", "## to obtain the ranking for Input i", "\n", "", "selement", "=", "sbfl_elementt", "(", "x", ",", "0", ",", "adv_xs", ",", "adv_ys", ",", "model", ",", "eobj", ".", "fnames", "[", "i", "]", ")", "\n", "dii", "=", "di", "+", "'/{0}'", ".", "format", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", ")", "\n", "dii", "=", "dii", ".", "replace", "(", "':'", ",", "'-'", ")", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "dii", ")", ")", "\n", "for", "measure", "in", "eobj", ".", "measures", ":", "\n", "      ", "print", "(", "'  #### [Measuring: {0} is used]'", ".", "format", "(", "measure", ")", ")", "\n", "ranking_i", ",", "spectrum", "=", "to_rank", "(", "selement", ",", "measure", ")", "\n", "selement", ".", "y", "=", "y", "\n", "diii", "=", "dii", "+", "'/{0}'", ".", "format", "(", "measure", ")", "\n", "print", "(", "'  #### [Saving: {0}]'", ".", "format", "(", "diii", ")", ")", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "diii", ")", ")", "\n", "np", ".", "savetxt", "(", "diii", "+", "'/ranking.txt'", ",", "ranking_i", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "# to plot the heatmap", "\n", "spectrum", "=", "np", ".", "array", "(", "(", "spectrum", "/", "spectrum", ".", "max", "(", ")", ")", "*", "255", ")", "\n", "gray_img", "=", "np", ".", "array", "(", "spectrum", "[", ":", ",", ":", ",", "0", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "#print (gray_img)", "\n", "heatmap_img", "=", "cv2", ".", "applyColorMap", "(", "gray_img", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "if", "x", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "          ", "x3d", "=", "np", ".", "repeat", "(", "x", "[", ":", ",", ":", ",", "0", "]", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "x3d", "=", "x", "\n", "fin", "=", "cv2", ".", "addWeighted", "(", "heatmap_img", ",", "0.7", ",", "x3d", ",", "0.3", ",", "0", ")", "\n", "plt", ".", "rcParams", "[", "\"axes.grid\"", "]", "=", "False", "\n", "plt", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "fin", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "plt", ".", "savefig", "(", "diii", "+", "'/heatmap_{0}.png'", ".", "format", "(", "measure", ")", ")", "\n", "\n", "# to plot the top ranked pixels", "\n", "if", "not", "eobj", ".", "text_only", ":", "\n", "          ", "ret", "=", "top_plot", "(", "selement", ",", "ranking_i", ",", "diii", ",", "measure", ",", "eobj", ")", "\n", "if", "not", "eobj", ".", "boxes", "is", "None", ":", "\n", "              ", "f", "=", "open", "(", "di", "+", "\"/wsol-results.txt\"", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "'{0} {1} {2}\\n'", ".", "format", "(", "eobj", ".", "fnames", "[", "i", "]", ",", "measure", ",", "ret", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.to_attack.to_attack": [[6, 58], ["type", "x.copy", "numpy.zeros", "numpy.unravel_index", "numpy.argsort", "range", "model.predict", "model.predict", "utils.sbfl_preprocess", "len", "utils.sbfl_preprocess", "type", "numpy.array", "numpy.argsort", "numpy.intersect1d", "numpy.array", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess"], ["def", "to_attack", "(", "eobj", ",", "ind", ",", "origin_data", ",", "bg_v", ",", "init_step", ",", "step_incr", ")", ":", "\n", "\n", "  ", "v_type", "=", "type", "(", "bg_v", ")", "\n", "\n", "top_classes", "=", "eobj", ".", "top_classes", "\n", "sp", "=", "origin_data", ".", "shape", "\n", "\n", "x", "=", "origin_data", "\n", "model", "=", "eobj", ".", "model", "\n", "y", "=", "np", ".", "argsort", "(", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "x", "]", ")", ")", ")", ")", "[", "0", "]", "[", "-", "top_classes", ":", "]", "\n", "\n", "latest_step", "=", "ind", ".", "size", "\n", "\n", "#im=np.ones(sp)", "\n", "#im=np.multiply(im, bg_v)", "\n", "im", "=", "x", ".", "copy", "(", ")", "\n", "im_flag", "=", "np", ".", "zeros", "(", "im", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "pos", "=", "ind", ".", "size", "-", "1", "\n", "old_count", "=", "1", "\n", "count", "=", "1", "\n", "\n", "adv_v", "=", "0", "\n", "\n", "while", "pos", ">=", "0", ":", "\n", "\n", "    ", "ipos", "=", "np", ".", "unravel_index", "(", "ind", "[", "pos", "]", ",", "sp", ")", "\n", "if", "not", "im_flag", "[", "ipos", "]", ":", "\n", "      ", "for", "k", "in", "range", "(", "0", ",", "sp", "[", "2", "]", ")", ":", "\n", "          ", "if", "type", "(", "bg_v", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "im", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "bg_v", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "im", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "bg_v", "\n", "", "im_flag", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "True", "\n", "", "count", "+=", "1", "\n", "\n", "", "pos", "-=", "1", "\n", "\n", "if", "count", "<", "init_step", ":", "continue", "## to start from a partial image", "\n", "\n", "if", "count", ">", "5000", ":", "break", "\n", "\n", "if", "count", "-", "old_count", ">=", "step_incr", ":", "\n", "      ", "old_count", "=", "count", "\n", "\n", "adv_v", "=", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "im", "]", ")", ")", ")", "\n", "adv_y", "=", "np", ".", "argsort", "(", "adv_v", ")", "[", "0", "]", "[", "-", "top_classes", ":", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "y", ",", "adv_y", ")", ")", "==", "0", ":", "\n", "#if np.sort(adv_v)[0][-top_classes:][0]>.5:", "\n", "          ", "return", "im", ",", "count", ",", "np", ".", "sort", "(", "adv_v", ")", "[", "0", "]", "[", "-", "top_classes", ":", "]", "\n", "\n", "", "", "", "return", "x", ",", "x", ".", "size", "//", "sp", "[", "2", "]", ",", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.mask.find_mask": [[3, 20], ["int", "x.copy", "x.copy", "numpy.ndenumerate", "numpy.min", "range", "numpy.mean", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "find_mask", "(", "x", ",", "p", "=", "2", "/", "32", ")", ":", "\n", "  ", "sp", "=", "x", ".", "shape", "\n", "h", "=", "int", "(", "sp", "[", "0", "]", "*", "p", ")", "\n", "if", "h", "<", "1", ":", "h", "=", "1", "\n", "tmp_x", "=", "x", ".", "copy", "(", ")", "\n", "bg_x", "=", "x", ".", "copy", "(", ")", "\n", "\n", "for", "iindex", ",", "_", "in", "np", ".", "ndenumerate", "(", "x", ")", ":", "\n", "    ", "i0", "=", "iindex", "[", "0", "]", "\n", "i1", "=", "iindex", "[", "1", "]", "\n", "region", "=", "tmp_x", "[", "np", ".", "max", "(", "[", "i0", "-", "h", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i0", "+", "h", ",", "sp", "[", "0", "]", "]", ")", ",", "np", ".", "max", "(", "[", "i1", "-", "h", ",", "0", "]", ")", ":", "np", ".", "min", "(", "[", "i1", "+", "h", ",", "sp", "[", "1", "]", "]", ")", "]", "\n", "v", "=", "np", ".", "min", "(", "region", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "(", "sp", "[", "2", "]", ")", ")", ":", "\n", "#bg_x[i0][i1][j]=v", "\n", "      ", "bg_x", "[", "i0", "]", "[", "i1", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "region", "[", ":", ",", ":", ",", "j", "]", ")", "\n", "\n", "", "", "return", "bg_x", "\n", "", ""]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.explain_objectt.__init__": [[16, 42], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "inputs", ")", ":", "\n", "    ", "self", ".", "model", "=", "model", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "outputs", "=", "None", "\n", "self", ".", "top_classes", "=", "None", "\n", "self", ".", "adv_ub", "=", "None", "\n", "self", ".", "adv_lb", "=", "None", "\n", "self", ".", "adv_value", "=", "None", "\n", "self", ".", "testgen_factor", "=", "None", "\n", "self", ".", "testgen_size", "=", "None", "\n", "self", ".", "testgen_iter", "=", "None", "\n", "self", ".", "vgg16", "=", "None", "\n", "self", ".", "mnist", "=", "None", "\n", "self", ".", "cifar10", "=", "None", "\n", "self", ".", "inception_v3", "=", "None", "\n", "self", ".", "xception", "=", "None", "\n", "self", ".", "mobilenet", "=", "None", "\n", "self", ".", "attack", "=", "None", "\n", "self", ".", "text_only", "=", "None", "\n", "self", ".", "measures", "=", "None", "\n", "self", ".", "normalized", "=", "None", "\n", "self", ".", "x_verbosity", "=", "None", "\n", "self", ".", "fnames", "=", "[", "]", "\n", "self", ".", "boxes", "=", "None", "\n", "self", ".", "occlusion_file", "=", "None", "\n", "self", ".", "min_exp", "=", "1.1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_elementt.__init__": [[45, 53], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "xs", ",", "ys", ",", "model", ",", "fname", "=", "None", ",", "adv_part", "=", "None", ")", ":", "\n", "    ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "xs", "=", "xs", "\n", "self", ".", "ys", "=", "ys", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "fname", "=", "fname", "\n", "self", ".", "adv_part", "=", "adv_part", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.divide_chunks": [[56, 60], ["range", "len"], "function", ["None"], ["", "", "def", "divide_chunks", "(", "l", ",", "n", ")", ":", "\n", "# looping till length l ", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.arr_to_str": [[61, 67], ["range", "len"], "function", ["None"], ["", "", "def", "arr_to_str", "(", "inp", ")", ":", "\n", "  ", "ret", "=", "inp", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "inp", ")", ")", ":", "\n", "    ", "ret", "+=", "' '", "\n", "ret", "+=", "inp", "[", "i", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess": [[68, 83], ["chunk.copy", "keras.applications.vgg16.preprocess_input", "keras.applications.inception_v3.preprocess_input", "keras.applications.xception.preprocess_input", "keras.applications.mobilenet.preprocess_input"], "function", ["None"], ["", "def", "sbfl_preprocess", "(", "eobj", ",", "chunk", ")", ":", "\n", "  ", "x", "=", "chunk", ".", "copy", "(", ")", "\n", "if", "eobj", ".", "vgg16", "is", "True", ":", "\n", "    ", "x", "=", "vgg16", ".", "preprocess_input", "(", "x", ")", "\n", "", "elif", "eobj", ".", "inception_v3", "is", "True", ":", "\n", "    ", "x", "=", "inception_v3", ".", "preprocess_input", "(", "x", ")", "\n", "", "elif", "eobj", ".", "xception", "is", "True", ":", "\n", "    ", "x", "=", "xception", ".", "preprocess_input", "(", "x", ")", "\n", "", "elif", "eobj", ".", "mobilenet", "is", "True", ":", "\n", "    ", "x", "=", "mobilenet", ".", "preprocess_input", "(", "x", ")", "\n", "", "elif", "eobj", ".", "normalized", "is", "True", ":", "\n", "    ", "x", "=", "x", "/", "255.", "\n", "", "elif", "eobj", ".", "mnist", "is", "True", "or", "eobj", ".", "cifar10", "is", "True", ":", "\n", "    ", "x", "=", "x", "/", "255.", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.save_an_image": [[84, 88], ["keras.preprocessing.image.save_img", "di.endswith"], "function", ["None"], ["", "def", "save_an_image", "(", "im", ",", "title", ",", "di", "=", "'./'", ")", ":", "\n", "  ", "if", "not", "di", ".", "endswith", "(", "'/'", ")", ":", "\n", "    ", "di", "+=", "'/'", "\n", "", "save_img", "(", "(", "di", "+", "title", "+", "'.jpg'", ")", ",", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.top_plot": [[89, 149], ["utils.save_an_image", "numpy.zeros", "numpy.multiply", "int", "os.system", "numpy.ones", "numpy.unravel_index", "range", "utils.save_an_image", "sbfl_element.model.predict", "utils.sbfl_preprocess", "utils.save_an_image", "int", "numpy.array", "numpy.argsort", "numpy.zeros", "numpy.logical_or", "numpy.logical_and", "int", "numpy.count_nonzero", "numpy.zeros", "range", "numpy.logical_or", "numpy.logical_and", "numpy.count_nonzero", "range", "numpy.count_nonzero", "numpy.count_nonzero", "sbfl_element.fname.split", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.save_an_image", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.save_an_image", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.sbfl_preprocess", "home.repos.pwc.inspect_result.theyoucheng_deepcover.src.utils.save_an_image"], ["", "def", "top_plot", "(", "sbfl_element", ",", "ind", ",", "di", ",", "metric", "=", "''", ",", "eobj", "=", "None", ",", "bg", "=", "128", ",", "online", "=", "False", ",", "online_mark", "=", "[", "255", ",", "0", ",", "255", "]", ")", ":", "\n", "  ", "origin_data", "=", "sbfl_element", ".", "x", "\n", "sp", "=", "origin_data", ".", "shape", "\n", "\n", "try", ":", "\n", "#print ('mkdir -p {0}'.format(di))", "\n", "    ", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "di", ")", ")", "\n", "", "except", ":", "pass", "\n", "\n", "save_an_image", "(", "origin_data", ",", "'origin-{0}'", ".", "format", "(", "sbfl_element", ".", "y", ")", ",", "di", ")", "\n", "\n", "ret", "=", "None", "\n", "\n", "im_flag", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "im_o", "=", "np", ".", "multiply", "(", "np", ".", "ones", "(", "sp", ")", ",", "bg", ")", "\n", "count", "=", "0", "\n", "base", "=", "int", "(", "(", "ind", ".", "size", "/", "sp", "[", "2", "]", ")", "/", "100", ")", "\n", "pos", "=", "ind", ".", "size", "-", "1", "\n", "found_exp", "=", "False", "\n", "while", "pos", ">=", "0", ":", "\n", "    ", "ipos", "=", "np", ".", "unravel_index", "(", "ind", "[", "pos", "]", ",", "sp", ")", "\n", "if", "not", "im_flag", "[", "ipos", "]", ":", "\n", "      ", "for", "k", "in", "range", "(", "0", ",", "sp", "[", "2", "]", ")", ":", "\n", "        ", "im_o", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "origin_data", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "\n", "im_flag", "[", "ipos", "[", "0", "]", "]", "[", "ipos", "[", "1", "]", "]", "[", "k", "]", "=", "True", "\n", "", "count", "+=", "1", "\n", "if", "count", "%", "base", "==", "0", ":", "\n", "        ", "save_an_image", "(", "im_o", ",", "'{1}-{0}'", ".", "format", "(", "int", "(", "count", "/", "base", ")", ",", "metric", ")", ",", "di", ")", "\n", "res", "=", "sbfl_element", ".", "model", ".", "predict", "(", "sbfl_preprocess", "(", "eobj", ",", "np", ".", "array", "(", "[", "im_o", "]", ")", ")", ")", "\n", "y", "=", "np", ".", "argsort", "(", "res", ")", "[", "0", "]", "[", "-", "eobj", ".", "top_classes", ":", "]", "\n", "#print (int(count/base), '>>>', y, sbfl_element.y, y==sbfl_element.y)", "\n", "if", "y", "==", "sbfl_element", ".", "y", "and", "not", "found_exp", ":", "\n", "          ", "save_an_image", "(", "im_o", ",", "'explanation-found-{1}-{0}'", ".", "format", "(", "int", "(", "count", "/", "base", ")", ",", "metric", ")", ",", "di", ")", "\n", "found_exp", "=", "True", "\n", "if", "not", "eobj", ".", "boxes", "is", "None", ":", "# wsol calculation", "\n", "              ", "vect", "=", "eobj", ".", "boxes", "[", "sbfl_element", ".", "fname", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "]", "\n", "ref_flag", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "ref_flag", "[", "vect", "[", "0", "]", ":", "vect", "[", "2", "]", ",", "vect", "[", "1", "]", ":", "vect", "[", "3", "]", ",", ":", "]", "=", "True", "\n", "\n", "union", "=", "np", ".", "logical_or", "(", "im_flag", ",", "ref_flag", ")", "\n", "inter", "=", "np", ".", "logical_and", "(", "im_flag", ",", "ref_flag", ")", "\n", "iou", "=", "np", ".", "count_nonzero", "(", "inter", ")", "*", "1.", "/", "np", ".", "count_nonzero", "(", "union", ")", "\n", "ret", "=", "iou", "\n", "", "elif", "not", "eobj", ".", "occlusion_file", "is", "None", ":", "# occlusion calculation", "\n", "                ", "ref_flag", "=", "np", ".", "zeros", "(", "sp", ",", "dtype", "=", "bool", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "sp", "[", "0", "]", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "0", ",", "sp", "[", "1", "]", ")", ":", "\n", "                        ", "if", "origin_data", "[", "i", "]", "[", "j", "]", "[", "0", "]", "==", "0", "and", "origin_data", "[", "i", "]", "[", "j", "]", "[", "1", "]", "==", "0", "and", "origin_data", "[", "i", "]", "[", "j", "]", "[", "2", "]", "==", "0", ":", "\n", "                            ", "ref_flag", "[", "i", "]", "[", "j", "]", "[", ":", "]", "=", "True", "\n", "\n", "", "", "", "union", "=", "np", ".", "logical_or", "(", "im_flag", ",", "ref_flag", ")", "\n", "inter", "=", "np", ".", "logical_and", "(", "im_flag", ",", "ref_flag", ")", "\n", "iou", "=", "np", ".", "count_nonzero", "(", "inter", ")", "*", "1.", "/", "np", ".", "count_nonzero", "(", "union", ")", "\n", "intersection", "=", "np", ".", "count_nonzero", "(", "inter", ")", "*", "1.", "/", "np", ".", "count_nonzero", "(", "ref_flag", ")", "\n", "ret", "=", "[", "(", "count", "/", "base", ")", "/", "100.", ",", "intersection", ",", "iou", "]", "\n", "\n", "", "if", "eobj", ".", "x_verbosity", ">", "0", ":", "return", "ret", "\n", "\n", "", "", "", "pos", "-=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.deepcover_keras.main": [[11, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "load_model", "print", "print", "print", "print", "print", "sys.exit"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'DeepCover: Uncover Bugs in Deep Learning'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'model'", ",", "action", "=", "'store'", ",", "nargs", "=", "'+'", ",", "help", "=", "'The input neural network model (.h5)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cover'", ",", "metavar", "=", "'ss'", ",", "action", "=", "'store'", ",", "help", "=", "'The covering method: ss, sv, ds, dv'", ",", "default", "=", "'ss'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "model", "=", "load_model", "(", "args", ".", "model", "[", "0", "]", ")", "\n", "\n", "if", "not", "(", "args", ".", "cover", "in", "[", "'ss'", ",", "'sv'", ",", "'ds'", ",", "'dv'", "]", ")", ":", "\n", "    ", "print", "(", "'Covering method cannot be recognized: '", "+", "args", ".", "cover", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "print", "(", "'\\n== WARNING == \\n'", ")", "\n", "print", "(", "\n", "'The input model:       '", "+", "args", ".", "model", "[", "0", "]", "+", "'\\n'", "+", "\n", "'The covering method:   '", "+", "args", ".", "cover", "+", "'\\n'", "\n", ")", "\n", "print", "(", "'This keras compatible implementation of DeepCover testing is currently under deverlopment...\\n'", ")", "\n", "print", "(", "'=============\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared": [[16, 31], ["gzip.open", "cPickle.load", "gzip.open.close", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "util.mnist_load_data_shared.shared"], "function", ["None"], ["def", "mnist_load_data_shared", "(", "filename", "=", "\"../data/mnist.pkl.gz\"", ")", ":", "\n", "    ", "f", "=", "gzip", ".", "open", "(", "filename", ",", "'rb'", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "def", "shared", "(", "data", ")", ":", "\n", "        ", "\"\"\"Place the data into shared variables.  This allows Theano to copy\n        the data to the GPU, if one is available.\n\n        \"\"\"", "\n", "shared_x", "=", "theano", ".", "shared", "(", "\n", "np", ".", "asarray", "(", "data", "[", "0", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "shared_y", "=", "theano", ".", "shared", "(", "\n", "np", ".", "asarray", "(", "data", "[", "1", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "return", "shared_x", ",", "T", ".", "cast", "(", "shared_y", ",", "\"int32\"", ")", "\n", "", "return", "[", "shared", "(", "training_data", ")", ",", "shared", "(", "validation_data", ")", ",", "shared", "(", "test_data", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.display": [[32, 45], ["x.reshape", "matplotlib.title", "matplotlib.imshow", "x.reshape.reshape", "matplotlib.title", "matplotlib.show", "matplotlib.savefig", "matplotlib.savefig", "str", "matplotlib.get_cmap"], "function", ["None"], ["", "def", "display", "(", "x", ",", "prediction", ",", "label", ",", "save", "=", "True", ",", "title", "=", "''", ")", ":", "\n", "    ", "x_train", "=", "x", ".", "reshape", "(", "1", ",", "784", ")", "\n", "plt", ".", "title", "(", "'Prediction: '", "+", "str", "(", "prediction", ")", ")", "\n", "plt", ".", "imshow", "(", "x_train", ".", "reshape", "(", "[", "28", ",", "28", "]", ")", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'gray_r'", ")", ")", "\n", "if", "not", "save", ":", "\n", "      ", "plt", ".", "title", "(", "'Input image'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "\n", "\n", "", "if", "title", "==", "''", ":", "\n", "      ", "plt", ".", "savefig", "(", "'tmp.png'", ",", "dpi", "=", "100", ")", "\n", "", "else", ":", "\n", "      ", "plt", ".", "savefig", "(", "title", "+", "'.png'", ",", "dpi", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.nnett.NNett.__init__": [[11, 16], ["nnett.NNett.weights.append"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "_weights", ",", "_biases", ")", ":", "\n", "    ", "self", ".", "weights", "=", "_weights", "\n", "self", ".", "biases", "=", "_biases", "\n", "self", ".", "weights", ".", "append", "(", "[", "]", ")", "# output layer has empty weight vector", "\n", "self", ".", "biases", "=", "[", "[", "]", "]", "+", "self", ".", "biases", "# input layer has empty bias vector", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.nnett.NNett.eval": [[17, 39], ["act.append", "len", "range", "numpy.argmax", "act.append", "len", "range", "range", "act[].append", "len", "nnett.__MAX__"], "methods", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.nnett.__MAX__"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "# act[i][j] is the activation value (after ReLU) of the j-th neuron at the i-th layer", "\n", "    ", "act", "=", "[", "]", "\n", "act", ".", "append", "(", "X", ")", "# X is the input vector to be evaluated", "\n", "\n", "N", "=", "len", "(", "self", ".", "weights", ")", "# N is the #layers", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "N", ")", ":", "\n", "      ", "act", ".", "append", "(", "[", "]", ")", "\n", "M", "=", "len", "(", "self", ".", "weights", "[", "i", "-", "1", "]", "[", "0", "]", ")", "# M is the #neurons at layer (i+1)", "\n", "# to compute the activation value for each neuron at layer i", "\n", "for", "j", "in", "range", "(", "0", ",", "M", ")", ":", "\n", "        ", "val", "=", "0", "# the activation value is the weighted sum of input from previous layer, plus the bias", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "weights", "[", "i", "-", "1", "]", ")", ")", ":", "\n", "          ", "val", "+=", "__MAX__", "(", "act", "[", "i", "-", "1", "]", "[", "k", "]", ",", "0", ")", "*", "self", ".", "weights", "[", "i", "-", "1", "]", "[", "k", "]", "[", "j", "]", "\n", "", "val", "+=", "self", ".", "biases", "[", "i", "]", "[", "j", "]", "\n", "#if i<N-1 and val<=0: # ReLU", "\n", "#  val=0", "\n", "act", "[", "i", "]", ".", "append", "(", "val", ")", "\n", "\n", "", "", "label", "=", "np", ".", "argmax", "(", "act", "[", "N", "-", "1", "]", ")", "\n", "return", "label", ",", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.nnett.__MAX__": [[6, 9], ["None"], "function", ["None"], ["def", "__MAX__", "(", "x", ",", "y", ")", ":", "\n", "  ", "if", "x", ">", "y", ":", "return", "x", "\n", "else", ":", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.Layert.__init__": [[5, 11], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "_w", ",", "_b", ",", "_is_conv", "=", "False", ",", "_mp_size", "=", "0", ")", ":", "\n", "    ", "self", ".", "w", "=", "_w", "\n", "self", ".", "b", "=", "_b", "\n", "self", ".", "is_conv", "=", "_is_conv", "\n", "self", ".", "mp_size_x", "=", "_mp_size", "\n", "self", ".", "mp_size_y", "=", "_mp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.__init__": [[13, 15], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "_hidden_layers", ")", ":", "\n", "    ", "self", ".", "hidden_layers", "=", "_hidden_layers", "## hidden layers", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval": [[16, 131], ["numpy.array", "X.reshape.reshape.reshape", "act.append", "act2.append", "numpy.argmax", "len", "numpy.array", "numpy.array", "len", "len", "range", "act.append", "act2.append", "act[].reshape", "numpy.zeros", "range", "act.append", "act2.append", "numpy.zeros", "range", "numpy.zeros", "range", "conv_act.append", "conv_act2.append", "numpy.array", "numpy.array", "range", "numpy.array", "numpy.array", "range", "range", "numpy.array", "numpy.array", "range", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "### X shall be an array ==> 28x28", "\n", "#X=np.reshape(X, (28, 28)) ", "\n", "    ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "28", ",", "28", ")", "\n", "\n", "N", "=", "len", "(", "self", ".", "hidden_layers", ")", "+", "1", "\n", "\n", "## the final activation vector", "\n", "## act shall be a vector of 'arrays'", "\n", "act", "=", "[", "]", "\n", "act2", "=", "[", "]", "\n", "\n", "act", ".", "append", "(", "np", ".", "array", "(", "[", "X", "]", ")", ")", "## input layer", "\n", "act2", ".", "append", "(", "np", ".", "array", "(", "[", "X", "]", ")", ")", "## input layer", "\n", "index", "=", "0", "\n", "\n", "## to propagate through each hidden layer", "\n", "for", "layer", "in", "self", ".", "hidden_layers", ":", "\n", "#print 'We are at layer {0}'.format(index+1)", "\n", "      ", "if", "layer", ".", "is_conv", ":", "## is convolutional layer", "\n", "        ", "nf", "=", "len", "(", "layer", ".", "w", ")", "## number of filters", "\n", "#print '** number of filters: {0}'.format(nf)", "\n", "conv_act", "=", "[", "]", "## conv_act contains these filtered activations", "\n", "conv_act2", "=", "[", "]", "## conv_act contains these filtered activations", "\n", "_nf", "=", "len", "(", "act", "[", "index", "]", ")", "## number of filter from the preceding layer", "\n", "#print '**** number of preceding filters: {0}'.format(_nf)", "\n", "## to apply each filter", "\n", "for", "i", "in", "range", "(", "0", ",", "nf", ")", ":", "\n", "#acts_for_mp=[]", "\n", "## there may be multiple filtered pieces from last layer", "\n", "          ", "nr", "=", "act", "[", "index", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "# number of rows", "\n", "nc", "=", "act", "[", "index", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "# number of columns", "\n", "nfr", "=", "layer", ".", "w", "[", "i", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "# number of filter rows", "\n", "nfc", "=", "layer", ".", "w", "[", "i", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "# number of filter columns", "\n", "f_act", "=", "np", ".", "zeros", "(", "(", "nr", "-", "nfr", "+", "1", ",", "nc", "-", "nfc", "+", "1", ")", ")", "\n", "#print 'fact shape: {0}'.format(f_act.shape)", "\n", "#for J in range(0, f_act.shape[0]):", "\n", "#  for K in range(0, f_act.shape[1]):", "\n", "#    ", "\n", "#    for j in range(0, _nf):", "\n", "#      ## act[index][j] is the input", "\n", "#      a=act[index][j]", "\n", "#  ", "\n", "#      for l in range(0, nfr):", "\n", "#        for m in range(0, nfc):", "\n", "#          f_act[J][K]+=layer.w[i][j][l][m]*a[J+l][K+m]", "\n", "#    f_act[J][K]+=layer.b[i]", "\n", "#    if f_act[J][K]<0: f_act[J][K]=0", "\n", "for", "J", "in", "range", "(", "0", ",", "f_act", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "K", "in", "range", "(", "0", ",", "f_act", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "              ", "for", "j", "in", "range", "(", "0", ",", "_nf", ")", ":", "\n", "## act[index][j] is the input", "\n", "                ", "a", "=", "act", "[", "index", "]", "[", "j", "]", "\n", "\n", "#print a", "\n", "#print '==========='", "\n", "#print layer.w[i][j]", "\n", "\n", "for", "l", "in", "range", "(", "0", ",", "nfr", ")", ":", "\n", "                  ", "for", "m", "in", "range", "(", "0", ",", "nfc", ")", ":", "\n", "                    ", "f_act", "[", "J", "]", "[", "K", "]", "+=", "layer", ".", "w", "[", "i", "]", "[", "j", "]", "[", "m", "]", "[", "l", "]", "*", "a", "[", "J", "+", "nfr", "-", "m", "-", "1", "]", "[", "K", "+", "nfc", "-", "l", "-", "1", "]", "\n", "", "", "", "f_act", "[", "J", "]", "[", "K", "]", "+=", "layer", ".", "b", "[", "i", "]", "\n", "if", "f_act", "[", "J", "]", "[", "K", "]", "<", "0", ":", "f_act", "[", "J", "]", "[", "K", "]", "=", "0", "\n", "\n", "### max-pool  ", "\n", "", "", "nr", "=", "f_act", ".", "shape", "[", "0", "]", "\n", "nc", "=", "f_act", ".", "shape", "[", "1", "]", "\n", "#### shape after max-pooling", "\n", "#p_act=f_act", "\n", "p_act", "=", "np", ".", "zeros", "(", "(", "nr", "/", "layer", ".", "mp_size_x", ",", "nc", "/", "layer", ".", "mp_size_y", ")", ")", "\n", "#print 'pact shape: {0}'.format(p_act.shape)", "\n", "for", "I", "in", "range", "(", "0", ",", "p_act", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "J", "in", "range", "(", "0", ",", "p_act", ".", "shape", "[", "1", "]", ")", ":", "\n", "##########", "\n", "                ", "for", "ii", "in", "range", "(", "layer", ".", "mp_size_x", "*", "I", ",", "layer", ".", "mp_size_x", "*", "(", "I", "+", "1", ")", ")", ":", "\n", "                  ", "for", "jj", "in", "range", "(", "layer", ".", "mp_size_y", "*", "J", ",", "layer", ".", "mp_size_y", "*", "(", "J", "+", "1", ")", ")", ":", "\n", "                    ", "if", "f_act", "[", "ii", "]", "[", "jj", "]", ">", "p_act", "[", "I", "]", "[", "J", "]", ":", "p_act", "[", "I", "]", "[", "J", "]", "=", "f_act", "[", "ii", "]", "[", "jj", "]", "\n", "##print p_act ", "\n", "##sys.exit(0)", "\n", "", "", "", "", "conv_act", ".", "append", "(", "np", ".", "array", "(", "p_act", ")", ")", "\n", "conv_act2", ".", "append", "(", "np", ".", "array", "(", "f_act", ")", ")", "\n", "#conv_act=np.array(conv_act) ## ==> array", "\n", "", "act", ".", "append", "(", "np", ".", "array", "(", "conv_act", ")", ")", "\n", "act2", ".", "append", "(", "np", ".", "array", "(", "conv_act2", ")", ")", "\n", "#if index==0:", "\n", "#  print act[1].shape", "\n", "#  print act2[1].shape", "\n", "#  sys.exit(0)", "\n", "", "else", ":", "## fully connected layer", "\n", "#a=act[index] # the preceeding layer", "\n", "        ", "nr", "=", "layer", ".", "w", ".", "shape", "[", "0", "]", "\n", "nc", "=", "layer", ".", "w", ".", "shape", "[", "1", "]", "\n", "### reshape", "\n", "aa", "=", "act", "[", "index", "]", ".", "reshape", "(", "1", ",", "nr", ")", "\n", "#print '*** shape: {0}'.format(aa.shape)", "\n", "#print '*** w shape: {0}'.format(layer.w.shape)", "\n", "\n", "this_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "nc", ")", ")", "\n", "for", "I", "in", "range", "(", "0", ",", "nc", ")", ":", "\n", "          ", "for", "II", "in", "range", "(", "0", ",", "nr", ")", ":", "\n", "            ", "this_act", "[", "0", "]", "[", "I", "]", "+=", "aa", "[", "0", "]", "[", "II", "]", "*", "layer", ".", "w", "[", "II", "]", "[", "I", "]", "\n", "", "this_act", "[", "0", "]", "[", "I", "]", "+=", "layer", ".", "b", "[", "I", "]", "\n", "if", "index", "<", "N", "-", "2", "and", "this_act", "[", "0", "]", "[", "I", "]", "<", "0", ":", "this_act", "[", "0", "]", "[", "I", "]", "=", "0", "\n", "", "act", ".", "append", "(", "np", ".", "array", "(", "[", "this_act", "]", ")", ")", "\n", "act2", ".", "append", "(", "np", ".", "array", "(", "[", "this_act", "]", ")", ")", "\n", "\n", "### next layer", "\n", "", "index", "+=", "1", "\n", "\n", "", "label", "=", "np", ".", "argmax", "(", "act", "[", "index", "]", "[", "0", "]", ")", "\n", "#print act[index][0]", "\n", "#print 'label is {0}'.format(label)", "\n", "return", "label", ",", "act", ",", "act2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn2-exp-conv-ss.ssc_pair_conv": [[14, 47], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "cnnet.eval", "conv_ss", "list", "cnnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "ssc_pair_conv", "(", "cnnet", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "test_data", ",", "di", ",", "prior_fs", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "cex", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "feasible", ",", "new_x", ",", "d", "=", "conv_ss", "(", "current_layer", "-", "1", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "cnnet", ",", "X", ",", "act2", ",", "act", ",", "prior_fs", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label_", "==", "label", "or", "label__", "==", "label", ":", "\n", "          ", "cex", "=", "True", "\n", "\n", "", "", "return", "True", ",", "index", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "index", ",", "cex", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn2-exp-conv-ss.main": [[48, 125], ["os.system", "mnist_load_data_shared", "numpy.load", "numpy.load", "cnnett.Layert", "cnnett.Layert", "cnnett.Layert", "cnnett.Layert", "cnnett.CNNett", "open", "open.write", "open.close", "[].eval", "cnnett.CNNett.eval", "len", "range", "open", "open.write", "os.path.exists", "os.system", "list", "range", "str().replace", "len", "range", "len", "range", "str", "len", "set", "range", "set", "range", "datetime.datetime.now", "range", "range", "len", "range", "set.add", "range", "len", "range", "set.add", "len", "cnn2-exp-conv-ss.ssc_pair_conv", "open", "open.write", "open.close"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn1-exp-conv-ss.ssc_pair_conv"], ["", "def", "main", "(", ")", ":", "\n", "  ", "outs", "=", "\"ss-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../data/mnist.pkl.gz\"", ")", "\n", "\n", "fname", "=", "'cnn2'", "\n", "\n", "ws", "=", "np", ".", "load", "(", "'cnns/cnn2-weights-mnist.npy'", ")", "\n", "bs", "=", "np", ".", "load", "(", "'cnns/cnn2-biases-mnist.npy'", ")", "\n", "\n", "layer1", "=", "Layert", "(", "ws", "[", "0", "]", ",", "bs", "[", "0", "]", ",", "True", ",", "2", ")", "\n", "layer2", "=", "Layert", "(", "ws", "[", "1", "]", ",", "bs", "[", "1", "]", ",", "True", ",", "2", ")", "\n", "layer3", "=", "Layert", "(", "ws", "[", "2", "]", ",", "bs", "[", "2", "]", ")", "\n", "layer4", "=", "Layert", "(", "ws", "[", "3", "]", ",", "bs", "[", "3", "]", ")", "\n", "\n", "cnnet", "=", "CNNett", "(", "[", "layer1", ",", "layer2", ",", "layer3", ",", "layer4", "]", ")", "\n", "\n", "\n", "outs_", "=", "outs", "+", "fname", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outs_", ")", ":", "\n", "    ", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs_", ")", ")", "\n", "\n", "", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs_", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "## to simplify things, let's have compute an act here", "\n", "X", "=", "test_data", "[", "0", "]", "[", "0", "]", ".", "eval", "(", ")", "\n", "## act2 is before max-pooling", "\n", "_", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "ncex", "=", "0", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "\n", "N", "=", "len", "(", "act", ")", "\n", "for", "current_layer", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "    ", "for", "current_filter", "in", "range", "(", "0", ",", "len", "(", "act2", "[", "current_layer", "]", ")", ")", ":", "\n", "      ", "a", "=", "act2", "[", "current_layer", "]", "[", "current_filter", "]", "\n", "for", "current_I", "in", "range", "(", "0", ",", "len", "(", "a", ")", ")", ":", "\n", "        ", "for", "current_J", "in", "range", "(", "0", ",", "len", "(", "a", "[", "current_I", "]", ")", ")", ":", "\n", "##### To test (current_layer, current_filter, current_I, current_J)", "\n", "          ", "prior_mps", "=", "set", "(", ")", "## these at prior mp layer that affect current_I,current_J", "\n", "nfr", "=", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "1", "]", ".", "w", "[", "current_filter", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "# number of filter rows", "\n", "nfc", "=", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "1", "]", ".", "w", "[", "current_filter", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "# number of filter columns", "\n", "for", "l", "in", "range", "(", "0", ",", "nfr", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "0", ",", "nfc", ")", ":", "\n", "              ", "prior_mps", ".", "add", "(", "(", "current_I", "+", "nfr", "-", "m", "-", "1", ",", "current_J", "+", "nfc", "-", "l", "-", "1", ")", ")", "\n", "\n", "", "", "prior_fs", "=", "set", "(", ")", "### these at prior filters that affect the current_I,current_J", "\n", "for", "x", "in", "prior_mps", ":", "\n", "            ", "for", "ii", "in", "range", "(", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_x", "*", "x", "[", "0", "]", ",", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_x", "*", "(", "x", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "              ", "for", "jj", "in", "range", "(", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_y", "*", "x", "[", "1", "]", ",", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_y", "*", "(", "x", "[", "1", "]", "+", "1", ")", ")", ":", "\n", "                ", "prior_fs", ".", "add", "(", "(", "ii", ",", "jj", ")", ")", "\n", "\n", "", "", "", "for", "prior_filter", "in", "range", "(", "0", ",", "len", "(", "act2", "[", "current_layer", "-", "1", "]", ")", ")", ":", "\n", "#", "\n", "            ", "b", "=", "act2", "[", "current_layer", "-", "1", "]", "[", "prior_filter", "]", "\n", "for", "prior_I", "in", "range", "(", "0", ",", "len", "(", "b", ")", ")", ":", "\n", "              ", "for", "prior_J", "in", "range", "(", "0", ",", "len", "(", "b", "[", "prior_I", "]", ")", ")", ":", "###(prior_layer, prior_filter)", "\n", "                ", "if", "not", "(", "(", "prior_I", ",", "prior_J", ")", "in", "prior_fs", ")", ":", "\n", "                  ", "continue", "\n", "", "found", ",", "tested", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "=", "ssc_pair_conv", "(", "cnnet", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "test_data", ",", "outs_", ",", "prior_fs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "if", "cex", ":", "ncex", "+=", "1", "\n", "s", "=", "'{0}-{1}-{2}-{3}: {4}-{5}-{6}-{7}, '", ".", "format", "(", "current_layer", "-", "1", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ")", "\n", "s", "+=", "'{0}, tested images: {1}, cex={9}, ncex={2}, covered={3}, not_covered={4}, d={5}, {6}:{7}-{8}\\n'", ".", "format", "(", "found", ",", "tested", ",", "ncex", ",", "covered", ",", "not_covered", ",", "d", ",", "label", ",", "label_", ",", "label__", ",", "cex", ")", "\n", "f", "=", "open", "(", "outs_", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", "", "", "", "", "", "f", "=", "open", "(", "'./results-ssc.txt'", ",", "\"a\"", ")", "\n", "tot_pairs", "=", "covered", "+", "not_covered", ";", "\n", "s", "=", "'{0}: ssc-coverage: {1}, CEX\\%={2}, #CEX={3}, tot_pairs={4}, covered={5}, not-covered={6}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "tot_pairs", ",", "1.0", "*", "ncex", "/", "tot_pairs", ",", "ncex", ",", "tot_pairs", ",", "covered", ",", "not_covered", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn1-exp-conv-ss.ssc_pair_conv": [[14, 47], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "cnnet.eval", "conv_ss", "list", "cnnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "ssc_pair_conv", "(", "cnnet", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "test_data", ",", "di", ",", "prior_fs", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "cex", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "feasible", ",", "new_x", ",", "d", "=", "conv_ss", "(", "current_layer", "-", "1", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "cnnet", ",", "X", ",", "act2", ",", "act", ",", "prior_fs", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label_", "==", "label", "or", "label__", "==", "label", ":", "\n", "          ", "cex", "=", "True", "\n", "\n", "", "", "return", "True", ",", "index", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "index", ",", "cex", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn1-exp-conv-ss.main": [[48, 125], ["os.system", "mnist_load_data_shared", "numpy.load", "numpy.load", "cnnett.Layert", "cnnett.Layert", "cnnett.Layert", "cnnett.Layert", "cnnett.CNNett", "open", "open.write", "open.close", "[].eval", "cnnett.CNNett.eval", "len", "range", "open", "open.write", "os.path.exists", "os.system", "list", "range", "str().replace", "len", "range", "len", "range", "str", "len", "set", "range", "set", "range", "datetime.datetime.now", "range", "range", "len", "range", "set.add", "range", "len", "range", "set.add", "len", "cnn1-exp-conv-ss.ssc_pair_conv", "open", "open.write", "open.close"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.exp5-4.cnn1-exp-conv-ss.ssc_pair_conv"], ["", "def", "main", "(", ")", ":", "\n", "  ", "outs", "=", "\"ss-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../data/mnist.pkl.gz\"", ")", "\n", "\n", "fname", "=", "'cnn1'", "\n", "\n", "ws", "=", "np", ".", "load", "(", "'cnns/cnn1-weights-mnist.npy'", ")", "\n", "bs", "=", "np", ".", "load", "(", "'cnns/cnn1-biases-mnist.npy'", ")", "\n", "\n", "layer1", "=", "Layert", "(", "ws", "[", "0", "]", ",", "bs", "[", "0", "]", ",", "True", ",", "2", ")", "\n", "layer2", "=", "Layert", "(", "ws", "[", "1", "]", ",", "bs", "[", "1", "]", ",", "True", ",", "2", ")", "\n", "layer3", "=", "Layert", "(", "ws", "[", "2", "]", ",", "bs", "[", "2", "]", ")", "\n", "layer4", "=", "Layert", "(", "ws", "[", "3", "]", ",", "bs", "[", "3", "]", ")", "\n", "\n", "cnnet", "=", "CNNett", "(", "[", "layer1", ",", "layer2", ",", "layer3", ",", "layer4", "]", ")", "\n", "\n", "\n", "outs_", "=", "outs", "+", "fname", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outs_", ")", ":", "\n", "    ", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs_", ")", ")", "\n", "\n", "", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs_", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "## to simplify things, let's have compute an act here", "\n", "X", "=", "test_data", "[", "0", "]", "[", "0", "]", ".", "eval", "(", ")", "\n", "## act2 is before max-pooling", "\n", "_", ",", "act", ",", "act2", "=", "cnnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "ncex", "=", "0", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "\n", "N", "=", "len", "(", "act", ")", "\n", "for", "current_layer", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "    ", "for", "current_filter", "in", "range", "(", "0", ",", "len", "(", "act2", "[", "current_layer", "]", ")", ")", ":", "\n", "      ", "a", "=", "act2", "[", "current_layer", "]", "[", "current_filter", "]", "\n", "for", "current_I", "in", "range", "(", "0", ",", "len", "(", "a", ")", ")", ":", "\n", "        ", "for", "current_J", "in", "range", "(", "0", ",", "len", "(", "a", "[", "current_I", "]", ")", ")", ":", "\n", "##### To test (current_layer, current_filter, current_I, current_J)", "\n", "          ", "prior_mps", "=", "set", "(", ")", "## these at prior mp layer that affect current_I,current_J", "\n", "nfr", "=", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "1", "]", ".", "w", "[", "current_filter", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "# number of filter rows", "\n", "nfc", "=", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "1", "]", ".", "w", "[", "current_filter", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "# number of filter columns", "\n", "for", "l", "in", "range", "(", "0", ",", "nfr", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "0", ",", "nfc", ")", ":", "\n", "              ", "prior_mps", ".", "add", "(", "(", "current_I", "+", "nfr", "-", "m", "-", "1", ",", "current_J", "+", "nfc", "-", "l", "-", "1", ")", ")", "\n", "\n", "", "", "prior_fs", "=", "set", "(", ")", "### these at prior filters that affect the current_I,current_J", "\n", "for", "x", "in", "prior_mps", ":", "\n", "            ", "for", "ii", "in", "range", "(", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_x", "*", "x", "[", "0", "]", ",", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_x", "*", "(", "x", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "              ", "for", "jj", "in", "range", "(", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_y", "*", "x", "[", "1", "]", ",", "cnnet", ".", "hidden_layers", "[", "current_layer", "-", "2", "]", ".", "mp_size_y", "*", "(", "x", "[", "1", "]", "+", "1", ")", ")", ":", "\n", "                ", "prior_fs", ".", "add", "(", "(", "ii", ",", "jj", ")", ")", "\n", "\n", "", "", "", "for", "prior_filter", "in", "range", "(", "0", ",", "len", "(", "act2", "[", "current_layer", "-", "1", "]", ")", ")", ":", "\n", "#", "\n", "            ", "b", "=", "act2", "[", "current_layer", "-", "1", "]", "[", "prior_filter", "]", "\n", "for", "prior_I", "in", "range", "(", "0", ",", "len", "(", "b", ")", ")", ":", "\n", "              ", "for", "prior_J", "in", "range", "(", "0", ",", "len", "(", "b", "[", "prior_I", "]", ")", ")", ":", "###(prior_layer, prior_filter)", "\n", "                ", "if", "not", "(", "(", "prior_I", ",", "prior_J", ")", "in", "prior_fs", ")", ":", "\n", "                  ", "continue", "\n", "", "found", ",", "tested", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "=", "ssc_pair_conv", "(", "cnnet", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "test_data", ",", "outs_", ",", "prior_fs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "if", "cex", ":", "ncex", "+=", "1", "\n", "s", "=", "'{0}-{1}-{2}-{3}: {4}-{5}-{6}-{7}, '", ".", "format", "(", "current_layer", "-", "1", ",", "prior_filter", ",", "prior_I", ",", "prior_J", ",", "current_layer", ",", "current_filter", ",", "current_I", ",", "current_J", ")", "\n", "s", "+=", "'{0}, tested images: {1}, cex={9}, ncex={2}, covered={3}, not_covered={4}, d={5}, {6}:{7}-{8}\\n'", ".", "format", "(", "found", ",", "tested", ",", "ncex", ",", "covered", ",", "not_covered", ",", "d", ",", "label", ",", "label_", ",", "label__", ",", "cex", ")", "\n", "f", "=", "open", "(", "outs_", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", "", "", "", "", "", "f", "=", "open", "(", "'./results-ssc.txt'", ",", "\"a\"", ")", "\n", "tot_pairs", "=", "covered", "+", "not_covered", ";", "\n", "s", "=", "'{0}: ssc-coverage: {1}, CEX\\%={2}, #CEX={3}, tot_pairs={4}, covered={5}, not-covered={6}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "tot_pairs", ",", "1.0", "*", "ncex", "/", "tot_pairs", ",", "ncex", ",", "tot_pairs", ",", "covered", ",", "not_covered", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SSC.exp-ssc.ssc_pair": [[14, 47], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "rp_ssc", "list", "nnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "ssc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "cex", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "feasible", ",", "new_x", ",", "d", ",", "_", ",", "_", "=", "rp_ssc", "(", "I", ",", "J", ",", "K", ",", "nnet", ",", "X", ",", "act", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label_", "==", "label", "or", "label__", "==", "label", ":", "\n", "          ", "cex", "=", "True", "\n", "\n", "", "", "return", "True", ",", "index", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "index", ",", "cex", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SSC.exp-ssc.main": [[48, 100], ["os.system", "mnist_load_data_shared", "open", "open.readlines", "str().replace", "NNett", "len", "open", "open.write", "open.close", "range", "open", "open.write", "line.split", "open", "json.load", "open", "json.load", "range", "str", "len", "range", "datetime.datetime.now", "len", "exp-ssc.ssc_pair", "open", "open.write", "open.close"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-call-runtime.exp-get-runtime.ssc_pair"], ["", "def", "main", "(", ")", ":", "\n", "  ", "di", "=", "'../../random-nn/'", "\n", "outs", "=", "\"./ssc-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "ncex", "=", "0", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "2", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", ")", ":", "## iterate each hidden layer", "\n", "        ", "for", "K", "in", "range", "(", "k_begin", ",", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", ")", ":", "\n", "          ", "for", "J", "in", "range", "(", "0", ",", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", ")", ")", ":", "\n", "            ", "found", ",", "tested", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "=", "ssc_pair", "(", "nnet", ",", "I", "-", "1", ",", "J", ",", "K", ",", "test_data", ",", "outs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "if", "cex", ":", "ncex", "+=", "1", "\n", "s", "=", "'I-J-K: {0}-{1}-{2}, '", ".", "format", "(", "I", "-", "1", ",", "J", ",", "K", ")", "\n", "s", "+=", "'{0}, tested images: {1}, cex={9}, ncex={2}, covered={3}, not_covered={4}, d={5}, {6}:{7}-{8}\\n'", ".", "format", "(", "found", ",", "tested", ",", "ncex", ",", "covered", ",", "not_covered", ",", "d", ",", "label", ",", "label_", ",", "label__", ",", "cex", ")", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "k_begin", "=", "0", "\n", "", "j_begin", "=", "0", "\n", "", "f", "=", "open", "(", "'./results-ssc.txt'", ",", "\"a\"", ")", "\n", "tot_pairs", "=", "covered", "+", "not_covered", ";", "\n", "s", "=", "'{0}: ss-coverage: {1}, CEX\\%={2}, #CEX={3}, tot_pairs={4}, covered={5}, not-covered={6}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "tot_pairs", ",", "1.0", "*", "ncex", "/", "tot_pairs", ",", "ncex", ",", "tot_pairs", ",", "covered", ",", "not_covered", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SSC-top-weights.exp-ssc-k.ssc_pair": [[13, 46], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "rp_ssc", "list", "nnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "ssc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "cex", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "feasible", ",", "new_x", ",", "d", ",", "_", ",", "_", "=", "rp_ssc", "(", "I", ",", "J", ",", "K", ",", "nnet", ",", "X", ",", "act", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label_", "==", "label", "or", "label__", "==", "label", ":", "\n", "          ", "cex", "=", "True", "\n", "\n", "", "", "return", "True", ",", "index", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "index", ",", "cex", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SSC-top-weights.exp-ssc-k.main": [[47, 112], ["os.system", "mnist_load_data_shared", "open", "open.readlines", "str().replace", "NNett", "len", "open", "open.write", "open.close", "range", "open", "open.write", "line.split", "open", "json.load", "open", "json.load", "range", "str", "len", "range", "range", "datetime.datetime.now", "len", "weights_to_k.append", "max", "top_kappa.append", "weights_to_k.pop", "exp-ssc-k.ssc_pair", "open", "open.write", "open.close", "abs", "enumerate"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-call-runtime.exp-get-runtime.ssc_pair"], ["", "def", "main", "(", ")", ":", "\n", "  ", "kappa", "=", "10", "\n", "di", "=", "'../../random-nn/'", "\n", "outs", "=", "\"./ssc-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "ncex", "=", "0", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "2", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", ")", ":", "## iterate each hidden layer", "\n", "        ", "for", "K", "in", "range", "(", "k_begin", ",", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", ")", ":", "\n", "## to find the top-kappa weights to node K", "\n", "          ", "weights_to_k", "=", "[", "]", "\n", "for", "J", "in", "range", "(", "0", ",", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", ")", ")", ":", "\n", "            ", "weights_to_k", ".", "append", "(", "abs", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "J", "]", "[", "K", "]", ")", ")", "\n", "\n", "", "top_kappa", "=", "[", "]", "\n", "for", "ka", "in", "range", "(", "0", ",", "kappa", ")", ":", "\n", "            ", "_", ",", "J", "=", "max", "(", "(", "v", ",", "i", ")", "for", "i", ",", "v", "in", "enumerate", "(", "weights_to_k", ")", ")", "\n", "top_kappa", ".", "append", "(", "J", ")", "\n", "weights_to_k", ".", "pop", "(", "J", ")", "\n", "\n", "", "for", "J", "in", "top_kappa", ":", "#range(j_begin, M):", "\n", "            ", "found", ",", "tested", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "=", "ssc_pair", "(", "nnet", ",", "I", "-", "1", ",", "J", ",", "K", ",", "test_data", ",", "outs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "if", "cex", ":", "ncex", "+=", "1", "\n", "s", "=", "'I-J-K: {0}-{1}-{2}, '", ".", "format", "(", "I", "-", "1", ",", "J", ",", "K", ")", "\n", "s", "+=", "'{0}, tested images: {1}, cex={9}, ncex={2}, covered={3}, not_covered={4}, d={5}, {6}:{7}-{8}\\n'", ".", "format", "(", "found", ",", "tested", ",", "ncex", ",", "covered", ",", "not_covered", ",", "d", ",", "label", ",", "label_", ",", "label__", ",", "cex", ")", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "k_begin", "=", "0", "\n", "", "j_begin", "=", "0", "\n", "", "f", "=", "open", "(", "di", "+", "'results-ssc-kappa{0}.txt'", ".", "format", "(", "kappa", ")", ",", "\"a\"", ")", "\n", "tot_pairs", "=", "covered", "+", "not_covered", ";", "\n", "s", "=", "'{0}: aac-coverage: {1}, CEX\\%={2}, #CEX={3}, tot_pairs={4}, covered={5}, not-covered={6}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "tot_pairs", ",", "1.0", "*", "ncex", "/", "tot_pairs", ",", "ncex", ",", "tot_pairs", ",", "covered", ",", "not_covered", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SVC.exp-svc.svc_pair": [[13, 48], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "rp_svc", "list", "nnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "svc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "ade", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "## original label by DNN", "\n", "\n", "### the LP rountine", "\n", "sfactor", "=", "1.0", "\n", "feasible", ",", "new_x", ",", "d", "=", "rp_svc", "(", "I", ",", "J", ",", "K", ",", "nnet", ",", "X", ",", "act", ",", "1", "+", "sfactor", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "## the next label by DNN", "\n", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label__", "==", "label", "or", "label_", "==", "label", ":", "ade", "=", "True", "\n", "\n", "", "return", "True", ",", "ade", ",", "index", ",", "0", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "False", ",", "index", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.SVC.exp-svc.main": [[49, 103], ["os.system", "mnist_load_data_shared", "open", "open.readlines", "str().replace", "NNett", "len", "open", "open.write", "open.close", "range", "open", "open.write", "line.split", "open", "json.load", "open", "json.load", "len", "range", "str", "range", "datetime.datetime.now", "len", "exp-svc.svc_pair", "open", "open.write", "open.close"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.SVC.exp-svc.svc_pair"], ["", "def", "main", "(", ")", ":", "\n", "\n", "  ", "di", "=", "'../../random-nn/'", "\n", "\n", "outs", "=", "\"./svc-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "if", "nnindex", "<", "1", ":", "continue", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "1", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "nade", "=", "0", "# number of adversarial examples", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", "-", "1", ")", ":", "## iterate each hidden layer", "\n", "        ", "M", "=", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", "\n", "for", "J", "in", "range", "(", "j_begin", ",", "M", ")", ":", "\n", "          ", "for", "K", "in", "range", "(", "k_begin", ",", "len", "(", "nnet", ".", "weights", "[", "I", "]", "[", "0", "]", ")", ")", ":", "\n", "            ", "found", ",", "is_ade", ",", "tested", ",", "ncex_", ",", "d_", ",", "label", ",", "label_", ",", "label__", "=", "svc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "outs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "\n", "if", "is_ade", ":", "nade", "+=", "1", "\n", "\n", "s", "=", "'I-J-K: {0}-{1}-{2}, '", ".", "format", "(", "I", ",", "J", ",", "K", ")", "\n", "s", "+=", "'{0}, tested images: {1}, nade={2}, d={3}, covered={4}, not_covered={5}, ncex={6}, labels: {7}:{8}-{9}\\n'", ".", "format", "(", "found", ",", "tested", ",", "nade", ",", "d_", ",", "covered", ",", "not_covered", ",", "nade", ",", "label", ",", "label_", ",", "label__", ")", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", "", "f", "=", "open", "(", "'./results-svc.txt'", ",", "\"a\"", ")", "\n", "s", "=", "'{0}: svc-coverage: {1}, nade={2}, covered={3}, not-covered={4}, CEX={5}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "(", "covered", "+", "not_covered", ")", ",", "nade", ",", "covered", ",", "not_covered", ",", "nade", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.DVC.exp-dvc.dvc_pair": [[14, 50], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "rp_dvc", "list", "nnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "dvc_pair", "(", "nnet", ",", "I", ",", "J", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "## original label by DNN", "\n", "\n", "### the LP rountine", "\n", "sfactor", "=", "4", "#99.0", "\n", "feasible", ",", "new_x", ",", "d", "=", "rp_dvc", "(", "I", ",", "J", ",", "nnet", ",", "X", ",", "act", ",", "1", "+", "sfactor", ")", "\n", "\n", "if", "feasible", "and", "d", ">", "0.3", ":", "continue", "\n", "\n", "ade", "=", "False", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "## the next label by DNN", "\n", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label__", "==", "label", "or", "label_", "==", "label", ":", "ade", "=", "True", "\n", "", "return", "True", ",", "ade", ",", "index", ",", "0", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "False", ",", "index", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.DVC.exp-dvc.main": [[51, 104], ["os.system", "mnist_load_data_shared", "open", "open.readlines", "str().replace", "NNett", "len", "open", "open.write", "open.close", "range", "open", "open.write", "line.split", "open", "json.load", "open", "json.load", "len", "range", "str", "exp-dvc.dvc_pair", "open", "open.write", "open.close", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.DVC.exp-dvc.dvc_pair"], ["", "def", "main", "(", ")", ":", "\n", "  ", "di", "=", "'../../random-nn/'", "\n", "outs", "=", "\"./dvc-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "2", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "nade", "=", "0", "# number of adversarial examples", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", ")", ":", "## iterate each hidden layer", "\n", "        ", "M", "=", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", "\n", "for", "J", "in", "range", "(", "j_begin", ",", "M", ")", ":", "\n", "#for K in range(k_begin, len(nnet.weights[I][0])):", "\n", "          ", "found", ",", "is_ade", ",", "tested", ",", "ncex_", ",", "d_", ",", "label", ",", "label_", ",", "label__", "=", "dvc_pair", "(", "nnet", ",", "I", ",", "J", ",", "test_data", ",", "outs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "\n", "if", "is_ade", ":", "nade", "+=", "1", "\n", "\n", "s", "=", "'I-J: {0}-{1}, '", ".", "format", "(", "I", ",", "J", ")", "\n", "s", "+=", "'{0}, tested images: {1}, nade={2}, d={3}, covered={4}, not_covered={5}, ncex={6}, labels: {7}:{8}-{9}\\n'", ".", "format", "(", "found", ",", "tested", ",", "nade", ",", "d_", ",", "covered", ",", "not_covered", ",", "nade", ",", "label", ",", "label_", ",", "label__", ")", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", "f", "=", "open", "(", "'./results-dvc.txt'", ",", "\"a\"", ")", "\n", "s", "=", "'{0}: dvc-coverage: {1}, nade={2}, covered={3}, not-covered={4}, CEX={5}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "(", "covered", "+", "not_covered", ")", ",", "nade", ",", "covered", ",", "not_covered", ",", "nade", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.DSC.exp-dsc.dsc_pair": [[14, 49], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "rp_dsc", "list", "nnet.eval", "list"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "dsc_pair", "(", "nnet", ",", "I", ",", "J", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "## original label by DNN", "\n", "\n", "### the LP rountine", "\n", "feasible", ",", "new_x", ",", "d", "=", "rp_dsc", "(", "I", ",", "J", ",", "nnet", ",", "X", ",", "act", ")", "\n", "\n", "\n", "if", "feasible", "and", "d", ">", "0.3", ":", "continue", "\n", "\n", "ade", "=", "False", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "## the next label by DNN", "\n", "\n", "if", "label_", "!=", "label__", ":", "\n", "        ", "if", "label_", "==", "label", "or", "label_", "==", "label", ":", "ade", "=", "True", "\n", "", "return", "True", ",", "ade", ",", "index", ",", "0", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "False", ",", "index", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.DSC.exp-dsc.main": [[50, 102], ["os.system", "mnist_load_data_shared", "open", "open.readlines", "str().replace", "NNett", "len", "open", "open.write", "open.close", "range", "open", "open.write", "line.split", "open", "json.load", "open", "json.load", "len", "range", "str", "exp-dsc.dsc_pair", "open", "open.write", "open.close", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.DSC.exp-dsc.dsc_pair"], ["", "def", "main", "(", ")", ":", "\n", "  ", "di", "=", "'../../random-nn/'", "\n", "outs", "=", "\"./dsc-pairs\"", "+", "str", "(", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'-'", ")", "+", "'/'", "\n", "os", ".", "system", "(", "'mkdir -p {0}'", ".", "format", "(", "outs", ")", ")", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "fres", "=", "fname", "+", "'-results.txt'", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "2", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "nade", "=", "0", "# number of adversarial examples", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", ")", ":", "## iterate each hidden layer", "\n", "        ", "M", "=", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", "\n", "for", "J", "in", "range", "(", "j_begin", ",", "M", ")", ":", "\n", "          ", "found", ",", "is_ade", ",", "tested", ",", "ncex_", ",", "d_", ",", "label", ",", "label_", ",", "label__", "=", "dsc_pair", "(", "nnet", ",", "I", ",", "J", ",", "test_data", ",", "outs", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "not_covered", "+=", "1", "\n", "\n", "if", "is_ade", ":", "nade", "+=", "1", "\n", "\n", "s", "=", "'I-J: {0}-{1}, '", ".", "format", "(", "I", ",", "J", ")", "\n", "s", "+=", "'{0}, tested images: {1}, nade={2}, d={3}, covered={4}, not_covered={5}, ncex={6}, labels: {7}:{8}-{9}\\n'", ".", "format", "(", "found", ",", "tested", ",", "nade", ",", "d_", ",", "covered", ",", "not_covered", ",", "nade", ",", "label", ",", "label_", ",", "label__", ")", "\n", "f", "=", "open", "(", "outs", "+", "fres", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", "f", "=", "open", "(", "di", "+", "'results-dsc.txt'", ",", "\"a\"", ")", "\n", "s", "=", "'{0}: dsc-coverage: {1}, nade={2}, covered={3}, not-covered={4}, CEX={5}\\n'", ".", "format", "(", "fname", ",", "1.0", "*", "covered", "/", "(", "covered", "+", "not_covered", ")", ",", "nade", ",", "covered", ",", "not_covered", ",", "nade", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-call-runtime.exp-get-runtime.ssc_pair": [[16, 73], ["len", "list", "numpy.random.shuffle", "test_data[].eval", "range", "[].eval", "[].eval", "nnet.eval", "time.time", "rp_ssc", "time.time", "times.append", "list", "nnet.eval", "list", "range", "open", "open.write", "open.close", "time.time", "rp_ssc", "time.time", "times.append", "len"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.cnnett.CNNett.eval"], ["def", "ssc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "di", ")", ":", "\n", "\n", "  ", "index", "=", "-", "1", "\n", "tot", "=", "len", "(", "test_data", "[", "0", "]", ".", "eval", "(", ")", ")", "\n", "\n", "ordering", "=", "list", "(", "range", "(", "tot", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ordering", ")", "\n", "\n", "cex", "=", "False", "\n", "\n", "while", "index", "<", "tot", "-", "1", ":", "\n", "\n", "    ", "index", "+=", "1", "\n", "\n", "X", "=", "test_data", "[", "0", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "label", "=", "test_data", "[", "1", "]", "[", "ordering", "[", "index", "]", "]", ".", "eval", "(", ")", "\n", "\n", "\n", "label_", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "X", ")", ")", "\n", "\n", "times", "=", "[", "]", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "feasible", ",", "new_x", ",", "d", ",", "s1", ",", "s2", "=", "rp_ssc", "(", "I", ",", "J", ",", "K", ",", "nnet", ",", "X", ",", "act", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "\n", "if", "feasible", ":", "\n", "      ", "label__", ",", "act", "=", "nnet", ".", "eval", "(", "list", "(", "new_x", ")", ")", "\n", "if", "label", "==", "label_", "or", "label", "==", "label__", ":", "\n", "        ", "if", "label_", "!=", "label__", ":", "\n", "          ", "cex", "=", "True", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "99", ")", ":", "\n", "          ", "start", "=", "time", ".", "time", "(", ")", "\n", "feasible", ",", "new_x", ",", "d", ",", "s1", ",", "s2", "=", "rp_ssc", "(", "I", ",", "J", ",", "K", ",", "nnet", ",", "X", ",", "act", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "\n", "", "tot_time", "=", "0", "\n", "for", "t", "in", "times", ":", "\n", "          ", "tot_time", "+=", "t", "\n", "", "tot_time", "=", "1.0", "*", "tot_time", "/", "len", "(", "times", ")", "\n", "\n", "\n", "f", "=", "open", "(", "di", "+", "'results.txt'", ".", "format", "(", "label", ")", ",", "\"a\"", ")", "\n", "#s='index: {0}\\n'.format(index)", "\n", "s", "=", "'#vars: {0}, #constraints: {1}, #time: {2}\\n'", ".", "format", "(", "s1", ",", "s2", ",", "tot_time", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "return", "True", ",", "index", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "\n", "\n", "", "if", "index", ">=", "40", ":", "break", "## ", "\n", "\n", "", "return", "False", ",", "index", ",", "cex", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-call-runtime.exp-get-runtime.main": [[74, 129], ["mnist_load_data_shared", "open", "open.readlines", "NNett", "len", "open", "open.write", "open.close", "range", "line.split", "open", "json.load", "open", "json.load", "len", "open", "open.write", "range", "range", "len", "exp-get-runtime.ssc_pair"], "function", ["home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-src.util.mnist_load_data_shared", "home.repos.pwc.inspect_result.theyoucheng_deepcover.lp-call-runtime.exp-get-runtime.ssc_pair"], ["", "def", "main", "(", ")", ":", "\n", "  ", "di", "=", "'../../random-nn/'", "\n", "training_data", ",", "validation_data", ",", "test_data", "=", "mnist_load_data_shared", "(", "filename", "=", "\"../../data/mnist.pkl.gz\"", ")", "\n", "nnindex", "=", "-", "1", "\n", "with", "open", "(", "di", "+", "'README.txt'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "      ", "nnindex", "+=", "1", "\n", "if", "nnindex", "<", "7", ":", "continue", "\n", "\n", "fname", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "with", "open", "(", "di", "+", "'w_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "weights", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "with", "open", "(", "di", "+", "'b_'", "+", "fname", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "biases", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "nnet", "=", "NNett", "(", "weights", ",", "biases", ")", "\n", "N", "=", "len", "(", "nnet", ".", "weights", ")", "\n", "\n", "s", "=", "'Neural net tested: {0}\\n'", ".", "format", "(", "fname", ")", "\n", "f", "=", "open", "(", "'./results.txt'", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "ncex", "=", "0", "\n", "covered", "=", "0", "\n", "not_covered", "=", "0", "\n", "i_begin", "=", "1", "\n", "j_begin", "=", "0", "\n", "k_begin", "=", "0", "\n", "flag", "=", "False", "\n", "for", "I", "in", "range", "(", "i_begin", ",", "N", "-", "1", ")", ":", "## iterate each hidden layer", "\n", "        ", "M", "=", "len", "(", "nnet", ".", "weights", "[", "I", "-", "1", "]", "[", "0", "]", ")", "\n", "f", "=", "open", "(", "'./results.txt'", ",", "\"a\"", ")", "\n", "s", "=", "'L{0}-{1}: '", ".", "format", "(", "I", ",", "I", "+", "1", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "for", "J", "in", "range", "(", "j_begin", ",", "M", ")", ":", "\n", "          ", "for", "K", "in", "range", "(", "k_begin", ",", "len", "(", "nnet", ".", "weights", "[", "I", "]", "[", "0", "]", ")", ")", ":", "\n", "            ", "flag", "=", "True", "\n", "found", ",", "tested", ",", "cex", ",", "d", ",", "label", ",", "label_", ",", "label__", "=", "ssc_pair", "(", "nnet", ",", "I", ",", "J", ",", "K", ",", "test_data", ",", "'./'", ")", "\n", "if", "found", ":", "covered", "+=", "1", "\n", "else", ":", "\n", "              ", "not_covered", "+=", "1", "\n", "flag", "=", "False", "\n", "", "if", "cex", ":", "ncex", "+=", "1", "\n", "#s='I-J-K: {0}-{1}-{2}, '.format(I, J, K)", "\n", "#s+='{0}, tested images: {1}, ncex={2}, covered={3}, not_covered={4}, d={5}, {6}:{7}-{8}\\n'.format(found, tested, ncex, covered, not_covered, d, label, label_, label__)", "\n", "#f=open(outs+'results.txt', \"a\")", "\n", "#f.write(s)", "\n", "#f.close()", "\n", "if", "flag", ":", "break", "\n", "", "k_begin", "=", "0", "\n", "if", "flag", ":", "break", "\n", "", "j_begin", "=", "0", "\n", "#f=open(di+'results.txt', \"a\")", "\n"]]}