{"home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.adjust_learning_rate": [[20, 28], ["print"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "'''\n    Descend learning rate\n    '''", "\n", "lr", "=", "args", ".", "lr", "/", "(", "2", "**", "(", "epoch", "//", "args", ".", "adjust_every", ")", ")", "\n", "print", "(", "\"Adjust lr to \"", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.save_checkpoint": [[30, 37], ["save_model.state_dict", "util.save_checkpoint"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.save_checkpoint"], ["", "", "def", "save_checkpoint", "(", "save_model", ",", "i_iter", ",", "args", ",", "is_best", "=", "True", ")", ":", "\n", "    ", "'''\n    Save the model to local disk\n    '''", "\n", "dict_model", "=", "save_model", ".", "state_dict", "(", ")", "\n", "filename", "=", "args", ".", "snapshot_dir", "\n", "save_best_checkpoint", "(", "dict_model", ",", "is_best", ",", "i_iter", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.train": [[39, 82], ["util.AverageMeter", "model.train", "int", "range", "print", "dg_train.reset_samples", "range", "train_crf_glove.evaluate_test", "model.train", "train_crf_glove.adjust_learning_rate", "next", "model", "util.AverageMeter.update", "model.zero_grad", "total_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "open().close", "open().close", "util.save_checkpoint", "train_crf_glove.evaluate_test", "dg_train.get_ids_samples", "cls_loss.item", "model.parameters", "sent_vecs.cuda", "mask_vecs.cuda", "label_list.cuda", "sent_lens.cuda", "open", "open"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.train", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.reset_samples", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.evaluate_test", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.train", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.adjust_learning_rate", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.save_checkpoint", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.evaluate_test", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.get_ids_samples"], ["", "def", "train", "(", "model", ",", "dg_train", ",", "dg_valid", ",", "dg_test", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "cls_loss_value", "=", "AverageMeter", "(", "10", ")", "\n", "best_acc", "=", "0", "\n", "best_f1", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "is_best", "=", "False", "\n", "loops", "=", "int", "(", "dg_train", ".", "data_len", "/", "args", ".", "batch_size", ")", "\n", "for", "e_", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "print", "(", "'Epoch numer: '", ",", "e_", ")", "\n", "dg_train", ".", "reset_samples", "(", ")", "\n", "if", "e_", "%", "args", ".", "adjust_every", "==", "0", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "e_", ",", "args", ")", "\n", "", "for", "idx", "in", "range", "(", "loops", ")", ":", "\n", "\n", "            ", "sent_vecs", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ",", "_", ",", "_", ",", "_", "=", "next", "(", "dg_train", ".", "get_ids_samples", "(", ")", ")", "\n", "if", "args", ".", "if_gpu", ":", "\n", "                ", "sent_vecs", ",", "mask_vecs", "=", "sent_vecs", ".", "cuda", "(", ")", ",", "mask_vecs", ".", "cuda", "(", ")", "\n", "label_list", ",", "sent_lens", "=", "label_list", ".", "cuda", "(", ")", ",", "sent_lens", ".", "cuda", "(", ")", "\n", "", "cls_loss", ",", "norm_pen", "=", "model", "(", "sent_vecs", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ")", "\n", "cls_loss_value", ".", "update", "(", "cls_loss", ".", "item", "(", ")", ")", "\n", "\n", "total_loss", "=", "cls_loss", "+", "norm_pen", "\n", "model", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_norm", ",", "norm_type", "=", "2", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "valid_acc", ",", "valid_f1", "=", "evaluate_test", "(", "dg_valid", ",", "model", ",", "args", ")", "\n", "\n", "if", "valid_f1", ">", "best_f1", ":", "\n", "            ", "open", "(", "'output.txt'", ",", "'w'", ")", ".", "close", "(", ")", "\n", "open", "(", "'test_id.txt'", ",", "'w'", ")", ".", "close", "(", ")", "\n", "is_best", "=", "True", "\n", "best_f1", "=", "valid_f1", "\n", "save_checkpoint", "(", "model", ",", "e_", ",", "args", ",", "is_best", ")", "\n", "output_samples", "=", "True", "\n", "if", "e_", "%", "10", "==", "0", ":", "\n", "                ", "output_samples", "=", "True", "\n", "", "test_acc", ",", "test_f1", "=", "evaluate_test", "(", "dg_test", ",", "model", ",", "args", ",", "output_samples", ",", "test", "=", "True", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "is_best", "=", "False", "\n", "\n", "", "return", "test_acc", ",", "test_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.evaluate_test": [[84, 130], ["dr_test.reset_samples", "model.eval", "sklearn.metrics.f1_score", "open", "f.write", "next", "model.predict", "sum().item", "true_labels.extend", "pred_labels.extend", "torch.nonzero", "torch.nonzero", "sent_vss.extend", "sent_v.extend", "pickle.dump", "print", "dr_test.get_ids_samples", "sent.cuda", "mask.cuda", "sent_len.cuda", "label.cuda", "label.cpu().numpy", "pred_label.cpu().numpy", "len", "indices.squeeze.squeeze", "sent_vs.detach().cpu().numpy", "open", "sum", "open", "range", "open", "label.cpu", "pred_label.cpu", "sent_vs.detach().cpu", "len", "f.write", "f.write", "sent_vs.detach", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.reset_samples", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.predict", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.get_ids_samples"], ["", "def", "evaluate_test", "(", "dr_test", ",", "model", ",", "args", ",", "sample_out", "=", "False", ",", "test", "=", "False", ")", ":", "\n", "    ", "mistake_samples", "=", "'data/mistakes.txt'", "\n", "result", "=", "'output.txt'", "\n", "with", "open", "(", "mistake_samples", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'Test begins...'", ")", "\n", "\n", "", "dr_test", ".", "reset_samples", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "all_counter", "=", "0", "\n", "correct_count", "=", "0", "\n", "true_labels", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "sent_v", "=", "[", "]", "\n", "while", "dr_test", ".", "index", "<", "dr_test", ".", "data_len", ":", "\n", "        ", "sent", ",", "mask", ",", "label", ",", "sent_len", ",", "texts", ",", "targets", ",", "_", "=", "next", "(", "dr_test", ".", "get_ids_samples", "(", "test", ")", ")", "\n", "sent", ",", "mask", ",", "sent_len", ",", "label", "=", "sent", ".", "cuda", "(", ")", ",", "mask", ".", "cuda", "(", ")", ",", "sent_len", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "pred_label", ",", "best_seq", ",", "sent_vs", ",", "score", "=", "model", ".", "predict", "(", "sent", ",", "mask", ",", "sent_len", ")", "\n", "# Compute correct predictions", "\n", "correct_count", "+=", "sum", "(", "pred_label", "==", "label", ")", ".", "item", "(", ")", "\n", "true_labels", ".", "extend", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_labels", ".", "extend", "(", "pred_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "#  Output wrong samples, for debugging", "\n", "indices", "=", "torch", ".", "nonzero", "(", "pred_label", "!=", "label", ")", "\n", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "            ", "indices", "=", "indices", ".", "squeeze", "(", "1", ")", "\n", "", "sent_vss", "=", "[", "]", "\n", "sent_vss", ".", "extend", "(", "sent_vs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "sent_v", ".", "extend", "(", "sent_vss", ")", "\n", "\n", "if", "sample_out", ":", "\n", "            ", "with", "open", "(", "result", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", ":", "\n", "                    ", "line", "=", "texts", "[", "i", "]", "+", "'###'", "+", "' '", ".", "join", "(", "targets", "[", "i", "]", ")", "+", "'###'", "+", "str", "(", "label", "[", "i", "]", ")", "+", "'###'", "+", "str", "(", "pred_label", "[", "i", "]", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "with", "open", "(", "mistake_samples", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "i", "in", "indices", ":", "\n", "                    ", "line", "=", "texts", "[", "i", "]", "+", "'###'", "+", "' '", ".", "join", "(", "targets", "[", "i", "]", ")", "+", "'###'", "+", "str", "(", "label", "[", "i", "]", ")", "+", "'###'", "+", "str", "(", "pred_label", "[", "i", "]", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "", "if", "test", ":", "\n", "        ", "pickle", ".", "dump", "(", "sent_v", ",", "open", "(", "'sent_vs.pkl'", ",", "'wb'", ")", ")", "\n", "", "acc", "=", "correct_count", "*", "1.0", "/", "dr_test", ".", "data_len", "\n", "f1", "=", "f1_score", "(", "true_labels", ",", "pred_labels", ",", "average", "=", "'macro'", ")", "\n", "if", "test", ":", "\n", "        ", "print", "(", "'test result: '", ",", "(", "acc", ",", "f1", ")", ")", "\n", "", "return", "acc", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.main": [[141, 212], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.join", "data_reader_general.data_reader", "data_reader_general.data_reader.load_data", "data_reader_general.data_reader.load_data", "data_reader_general.data_reader.load_data", "data_reader_general.data_generator", "data_reader_general.data_generator", "data_reader_general.data_generator", "filter", "torch.optim.Adam", "model.cuda.parameters", "model.cuda.cuda", "train_crf_glove.train", "model.cuda.load_state_dict", "train_crf_glove.evaluate_test", "int", "int", "int", "int", "int", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.load_data", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.load_data", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.load_data", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.train", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.train_crf_glove.evaluate_test"], ["", "def", "main", "(", "l_hidden_size", "=", "2", ",", "dropout", "=", "5", ",", "dropout2", "=", "6", ",", "mask_dim", "=", "4", ",", "power", "=", "1", ",", "batch_size", "=", "3", ",", "num_layer", "=", "1", ")", ":", "\n", "\n", "# 15rest embed_num = 3549 and data path accordingly", "\n", "# def main(l_hidden_size=1, dropout=3, dropout2=3, mask_dim=3 , power=1, batch_size=2, num_layer=2):", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-training'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-embed_num'", ",", "type", "=", "int", ",", "default", "=", "4070", ",", "help", "=", "'The correct vocab size will print to screen, if error appears'", ")", "\n", "parser", ".", "add_argument", "(", "'-arch'", ",", "type", "=", "str", ",", "default", "=", "'AspectSent'", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "32", "*", "batch_size", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-mask_dim'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "mask_dim", "*", "20", "+", "10", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-l_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "l_hidden_size", "*", "32", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-l_num_layers'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "num_layer", "*", "2", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-l_dropout'", ",", "type", "=", "int", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-power'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "power", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-dropout'", ",", "type", "=", "int", ",", "default", "=", "dropout", "*", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-dropout2'", ",", "type", "=", "int", ",", "default", "=", "dropout2", "*", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-g_num_layer'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-embed_dim'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'-if_update_embed'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-if_reset'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-epoch'", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "type", "=", "int", ",", "default", "=", "0.008", ")", "\n", "parser", ".", "add_argument", "(", "'-adjust_every'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-clip_norm'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'-finetune_embed'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-if_gpu'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-use_gpu'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-pretrained_embed_path'", ",", "type", "=", "str", ",", "default", "=", "'data/glove.840B.300d.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'-exp_name'", ",", "type", "=", "str", ",", "default", "=", "'laptop'", ")", "\n", "parser", ".", "add_argument", "(", "'-embed_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/vocab/local_emb.pkl'", ")", "\n", "parser", ".", "add_argument", "(", "'-data_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/'", ")", "\n", "parser", ".", "add_argument", "(", "'-train_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/train.pkl'", ")", "\n", "parser", ".", "add_argument", "(", "'-valid_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/valid.pkl'", ")", "\n", "parser", ".", "add_argument", "(", "'-test_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/test.pkl'", ")", "\n", "parser", ".", "add_argument", "(", "'-dic_path'", ",", "type", "=", "str", ",", "default", "=", "'data/laptop/vocab/dict.pkl'", ")", "\n", "parser", ".", "add_argument", "(", "'-bestmodel_path'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints/laptop/bestmodel.pth.tar'", ")", "\n", "parser", ".", "add_argument", "(", "'-model_path'", ",", "type", "=", "str", ",", "default", "=", "'data/models/'", ")", "\n", "parser", ".", "add_argument", "(", "'-snapshot_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints/'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "args", ".", "snapshot_dir", "=", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "args", ".", "exp_name", ")", "\n", "\n", "global", "best_acc", "\n", "best_acc", "=", "0", "\n", "# Load datasets", "\n", "dr", "=", "data_reader", "(", "args", ")", "\n", "train_data", "=", "dr", ".", "load_data", "(", "args", ".", "train_path", ")", "\n", "valid_data", "=", "dr", ".", "load_data", "(", "args", ".", "valid_path", ")", "\n", "test_data", "=", "dr", ".", "load_data", "(", "args", ".", "test_path", ")", "\n", "\n", "dg_train", "=", "data_generator", "(", "args", ",", "train_data", ")", "\n", "dg_valid", "=", "data_generator", "(", "args", ",", "valid_data", ",", "False", ")", "\n", "dg_test", "=", "data_generator", "(", "args", ",", "test_data", ",", "False", ")", "\n", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "args", ")", "\n", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "if", "args", ".", "if_gpu", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "training", ":", "\n", "# to decide if load saved best model or not", "\n", "        ", "test_f1", "=", "train", "(", "model", ",", "dg_train", ",", "dg_valid", ",", "dg_test", ",", "optimizer", ",", "args", ")", "\n", "", "else", ":", "\n", "# modify the best model path if want to use the best model to test", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "bestmodel_path", ")", ")", "\n", "test_acc", ",", "test_f1", "=", "evaluate_test", "(", "dg_test", ",", "model", ",", "args", ",", "sample_out", "=", "False", ",", "test", "=", "True", ")", "\n", "\n", "", "return", "test_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.__init__": [[11, 20], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn"], ["    ", "def", "__init__", "(", "self", ",", "num_tags", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_tags", "=", "num_tags", "\n", "# matrix of transition scores from j to i", "\n", "self", ".", "transitions", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ",", "num_tags", ")", ")", "\n", "self", ".", "SOS_IDX", "=", "num_tags", "-", "2", "\n", "self", ".", "EOS_IDX", "=", "num_tags", "-", "1", "\n", "self", ".", "transitions", ".", "data", "[", "self", ".", "SOS_IDX", ",", ":", "]", "=", "-", "10000.", "# no transition to SOS", "\n", "self", ".", "transitions", ".", "data", "[", ":", ",", "self", ".", "EOS_IDX", "]", "=", "-", "10000.", "# no transition from EOS except to PAD", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf._forward_alg": [[21, 45], ["feats.size", "Tensor().fill_", "BatchLinearChainCRF.LinearChainCrf.transitions.expand", "range", "BatchLinearChainCRF.log_sum_exp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "masks[].unsqueeze", "feats[].unsqueeze", "BatchLinearChainCRF.log_sum_exp", "torch.stack.append", "torch.stack.append", "BatchLinearChainCRF.Tensor", "log_sum_exp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "_forward_alg", "(", "self", ",", "feats", ",", "masks", ")", ":", "\n", "        ", "'''\n        h: batch_size, max_len, tag_size\n        mask:batch_size, max_len. binary values\n        '''", "\n", "assert", "len", "(", "feats", ")", "==", "len", "(", "masks", ")", "\n", "batch_size", ",", "max_len", ",", "_", "=", "feats", ".", "size", "(", ")", "\n", "# initialize forward variables in log space", "\n", "alpha", "=", "[", "]", "\n", "alpha_t", "=", "Tensor", "(", "batch_size", ",", "self", ".", "num_tags", ")", ".", "fill_", "(", "-", "10000.", ")", "# [B, C]", "\n", "alpha_t", "[", ":", ",", "self", ".", "SOS_IDX", "]", "=", "0.", "\n", "trans", "=", "self", ".", "transitions", ".", "expand", "(", "batch_size", ",", "\n", "self", ".", "num_tags", ",", "self", ".", "num_tags", ")", "# [b, tag_size, tag_size]", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "# recursion through the sequence", "\n", "            ", "mask_t", "=", "masks", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "# batch_size*1", "\n", "emit_t", "=", "feats", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "2", ")", "# [batch_size, tag_size, 1]", "\n", "score", "=", "alpha_t", "# [batch_size * tagsize]", "\n", "score_t", "=", "score", ".", "unsqueeze", "(", "1", ")", "+", "emit_t", "+", "trans", "# [B, 1, tag_size] -> [B, tag_size, tag_size]", "\n", "score_t", "=", "log_sum_exp", "(", "score_t", ")", "# [B, C, C] -> [B, C]", "\n", "alpha_t", "=", "score_t", "*", "mask_t", "+", "score", "*", "(", "1", "-", "mask_t", ")", "# if mask zero, copy previous alpha", "\n", "alpha", ".", "append", "(", "alpha_t", ")", "\n", "", "score", "=", "log_sum_exp", "(", "alpha_t", "+", "self", ".", "transitions", "[", "self", ".", "EOS_IDX", "]", ")", "\n", "alpha", "=", "torch", ".", "stack", "(", "alpha", ",", "1", ")", "\n", "return", "score", ",", "alpha", "# partition function", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf._backward_alg": [[46, 84], ["feats.size", "Tensor().fill_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "BatchLinearChainCRF.LinearChainCrf.transitions.expand().transpose", "range", "BatchLinearChainCRF.log_sum_exp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "len", "len", "m.sum().long", "list", "masks_reversed[].unsqueeze", "feats_reversed[].unsqueeze", "BatchLinearChainCRF.log_sum_exp", "torch.stack.append", "torch.stack.append", "m.sum().long", "list", "BatchLinearChainCRF.Tensor", "reversed", "BatchLinearChainCRF.LinearChainCrf.transitions.expand", "reversed", "m.sum", "range", "log_sum_exp.unsqueeze", "m.sum", "range"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "_backward_alg", "(", "self", ",", "feats", ",", "masks", ")", ":", "# forward algorithm", "\n", "        ", "'''\n        h: batch_size, max_len, tag_size\n        mask:batch_size, max_len. binary values\n        '''", "\n", "assert", "len", "(", "feats", ")", "==", "len", "(", "masks", ")", "\n", "batch_size", ",", "max_len", ",", "_", "=", "feats", ".", "size", "(", ")", "\n", "# initialize forward variables in log space", "\n", "beta_t", "=", "Tensor", "(", "batch_size", ",", "self", ".", "num_tags", ")", ".", "fill_", "(", "-", "10000.", ")", "# [B, C]", "\n", "beta_t", "[", ":", ",", "self", ".", "EOS_IDX", "]", "=", "0.", "\n", "beta", "=", "[", "]", "\n", "feats_reversed", "=", "torch", ".", "zeros_like", "(", "feats", ")", "\n", "masks_reversed", "=", "torch", ".", "zeros_like", "(", "masks", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "num", "=", "m", ".", "sum", "(", ")", ".", "long", "(", ")", "\n", "reverse_index", "=", "list", "(", "reversed", "(", "range", "(", "num", ")", ")", ")", "\n", "feats_reversed", "[", "i", ",", ":", "num", "]", "=", "feats", "[", "i", ",", "reverse_index", "]", "\n", "masks_reversed", "[", "i", ",", ":", "num", "]", "=", "1", "\n", "# change the start and the end tag", "\n", "", "trans", "=", "self", ".", "transitions", ".", "expand", "(", "batch_size", ",", "self", ".", "num_tags", ",", "\n", "self", ".", "num_tags", ")", ".", "transpose", "(", "1", ",", "2", ")", "# [b, tag_size, tag_size]", "\n", "# Note reverse the sentence feats,pay attention to the paddings", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "# recursion through the sequence", "\n", "            ", "mask_t", "=", "masks_reversed", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "# batch_size*1", "\n", "emit_t", "=", "feats_reversed", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "2", ")", "# [batch_size, tag_size, 1]", "\n", "score", "=", "beta_t", "# [batch_size*tagsize]", "\n", "score_t", "=", "score", ".", "unsqueeze", "(", "1", ")", "+", "emit_t", "+", "trans", "# [B, 1, tag_size] -> [B, tag_size, tag_size]", "\n", "score_t", "=", "log_sum_exp", "(", "score_t", ")", "# [B, C, C] -> [B, C]", "\n", "beta_t", "=", "score_t", "*", "mask_t", "+", "score", "*", "(", "1", "-", "mask_t", ")", "# if the mask is zero, copy last value", "\n", "beta", ".", "append", "(", "beta_t", ")", "# beta is reversed", "\n", "", "score", "=", "log_sum_exp", "(", "beta_t", "+", "self", ".", "transitions", "[", ":", ",", "self", ".", "SOS_IDX", "]", ")", "\n", "beta", "=", "torch", ".", "stack", "(", "beta", ",", "1", ")", "\n", "# reverse beta", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "num", "=", "m", ".", "sum", "(", ")", ".", "long", "(", ")", "\n", "reverse_index", "=", "list", "(", "reversed", "(", "range", "(", "num", ")", ")", ")", "\n", "beta", "[", "i", ",", ":", "num", "]", "=", "beta", "[", "i", ",", "reverse_index", "]", "\n", "", "return", "score", ",", "beta", "# partition function", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.compute_marginal": [[85, 96], ["BatchLinearChainCRF.LinearChainCrf._forward_alg", "BatchLinearChainCRF.LinearChainCrf._backward_alg", "masks.sum().long", "range", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "marginals.append", "masks.sum"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf._forward_alg", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf._backward_alg"], ["", "def", "compute_marginal", "(", "self", ",", "feats", ",", "masks", ")", ":", "\n", "        ", "Z1", ",", "alpha", "=", "self", ".", "_forward_alg", "(", "feats", ",", "masks", ")", "\n", "Z2", ",", "beta", "=", "self", ".", "_backward_alg", "(", "feats", ",", "masks", ")", "\n", "num", "=", "masks", ".", "sum", "(", "1", ")", ".", "long", "(", ")", "\n", "marginals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "feats", ")", ")", ":", "\n", "            ", "logit", "=", "alpha", "[", "i", ",", ":", "num", "[", "i", "]", "]", "+", "beta", "[", "i", ",", ":", "num", "[", "i", "]", "]", "-", "feats", "[", "i", ",", ":", "num", "[", "i", "]", "]", "\n", "denominator", "=", "Z1", "[", "i", "]", "\n", "marginal", "=", "torch", ".", "exp", "(", "logit", "-", "denominator", ")", "\n", "marginals", ".", "append", "(", "marginal", ")", "\n", "", "return", "marginals", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.score": [[97, 110], ["feats.unsqueeze.unsqueeze.size", "Tensor().fill_", "feats.unsqueeze.unsqueeze.unsqueeze", "BatchLinearChainCRF.LinearChainCrf.transitions.unsqueeze", "range", "tags.gather().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BatchLinearChainCRF.Tensor", "tags.gather", "masks.sum().long().unsqueeze", "zip", "masks.sum().long", "masks.sum"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "score", "(", "self", ",", "feats", ",", "tags", ",", "masks", ")", ":", "# calculate the score of a given sequence", "\n", "        ", "batch_size", ",", "max_len", ",", "_", "=", "feats", ".", "size", "(", ")", "\n", "score", "=", "Tensor", "(", "batch_size", ")", ".", "fill_", "(", "0.", ")", "\n", "feats", "=", "feats", ".", "unsqueeze", "(", "3", ")", "\n", "trans", "=", "self", ".", "transitions", ".", "unsqueeze", "(", "2", ")", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "# recursion through the sequence", "\n", "            ", "mask_t", "=", "masks", "[", ":", ",", "t", "]", "\n", "emit_t", "=", "torch", ".", "cat", "(", "[", "h", "[", "t", ",", "y", "[", "t", "+", "1", "]", "]", "for", "h", ",", "y", "in", "zip", "(", "feats", ",", "tags", ")", "]", ")", "\n", "trans_t", "=", "torch", ".", "cat", "(", "[", "trans", "[", "y", "[", "t", "+", "1", "]", ",", "y", "[", "t", "]", "]", "for", "y", "in", "tags", "]", ")", "\n", "score", "+=", "(", "emit_t", "+", "trans_t", ")", "*", "mask_t", "\n", "", "last_tag", "=", "tags", ".", "gather", "(", "1", ",", "masks", ".", "sum", "(", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "score", "+=", "self", ".", "transitions", "[", "self", ".", "EOS_IDX", ",", "last_tag", "]", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.decode": [[111, 142], ["feats.size", "BatchLinearChainCRF.LongTensor", "Tensor().fill_", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.tolist", "torch.cat.tolist", "range", "len", "len", "masks[].unsqueeze", "score_t.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "reversed", "best_path[].pop", "best_path[].reverse", "BatchLinearChainCRF.Tensor", "Tensor().fill_.unsqueeze", "best_tag.tolist", "masks[].sum().item", "best_path[].append", "bptr_t.unsqueeze", "masks[].sum"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "decode", "(", "self", ",", "feats", ",", "masks", ")", ":", "# Viterbi decoding", "\n", "# initialize backpointers and viterbi variables in log space", "\n", "        ", "assert", "len", "(", "feats", ")", "==", "len", "(", "masks", ")", "\n", "batch_size", ",", "max_len", ",", "_", "=", "feats", ".", "size", "(", ")", "\n", "bptr", "=", "LongTensor", "(", ")", "\n", "score", "=", "Tensor", "(", "batch_size", ",", "self", ".", "num_tags", ")", ".", "fill_", "(", "-", "10000.", ")", "\n", "score", "[", ":", ",", "self", ".", "SOS_IDX", "]", "=", "0.", "\n", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "# recursion through the sequence", "\n", "            ", "mask_t", "=", "masks", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "# batch_size*1", "\n", "score_t", "=", "score", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "transitions", "# [B, 1, C] -> [B, C, C]", "\n", "score_t", ",", "bptr_t", "=", "score_t", ".", "max", "(", "2", ")", "# best previous scores and tags", "\n", "score_t", "=", "score_t", "+", "feats", "[", ":", ",", "t", "]", "# plus emission scores", "\n", "bptr", "=", "torch", ".", "cat", "(", "(", "bptr", ",", "bptr_t", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "score", "=", "score_t", "*", "mask_t", "+", "score", "*", "(", "1", "-", "mask_t", ")", "\n", "", "score", "=", "score", "+", "self", ".", "transitions", "[", "self", ".", "EOS_IDX", "]", "\n", "best_score", ",", "best_tag", "=", "torch", ".", "max", "(", "score", ",", "1", ")", "\n", "\n", "# back-tracking", "\n", "bptr", "=", "bptr", ".", "tolist", "(", ")", "\n", "best_path", "=", "[", "[", "i", "]", "for", "i", "in", "best_tag", ".", "tolist", "(", ")", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "x", "=", "best_tag", "[", "b", "]", "# best tag", "\n", "y", "=", "int", "(", "masks", "[", "b", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "bptr_t", "in", "reversed", "(", "bptr", "[", "b", "]", "[", ":", "y", "]", ")", ":", "\n", "                ", "x", "=", "bptr_t", "[", "x", "]", "\n", "best_path", "[", "b", "]", ".", "append", "(", "x", ")", "\n", "", "best_path", "[", "b", "]", ".", "pop", "(", ")", "\n", "best_path", "[", "b", "]", ".", "reverse", "(", ")", "\n", "\n", "", "return", "best_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor": [[144, 147], ["torch.Tensor", "torch.Tensor", "torch.Tensor.cuda"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "", "def", "Tensor", "(", "*", "args", ")", ":", "\n", "    ", "x", "=", "torch", ".", "Tensor", "(", "*", "args", ")", "\n", "return", "x", ".", "cuda", "(", ")", "if", "CUDA", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor": [[149, 152], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor.cuda"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor"], ["", "def", "LongTensor", "(", "*", "args", ")", ":", "\n", "    ", "x", "=", "torch", ".", "LongTensor", "(", "*", "args", ")", "\n", "return", "x", ".", "cuda", "(", ")", "if", "CUDA", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn": [[154, 157], ["torch.randn", "torch.randn", "torch.randn.cuda"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.randn"], ["", "def", "randn", "(", "*", "args", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "*", "args", ")", "\n", "return", "x", ".", "cuda", "(", ")", "if", "CUDA", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros": [[159, 162], ["torch.zeros", "torch.zeros", "torch.zeros.cuda"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros"], ["", "def", "zeros", "(", "*", "args", ")", ":", "\n", "    ", "x", "=", "torch", ".", "zeros", "(", "*", "args", ")", "\n", "return", "x", ".", "cuda", "(", ")", "if", "CUDA", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.log_sum_exp": [[164, 167], ["torch.max", "torch.max", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "m.unsqueeze"], "function", ["None"], ["", "def", "log_sum_exp", "(", "x", ")", ":", "\n", "    ", "m", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ")", "[", "0", "]", "\n", "return", "m", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", "-", "m", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.__init__": [[12, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "'''\n        Load dataset and create batches for training and testing\n        '''", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.load_data": [[19, 32], ["os.path.exists", "data_reader_general.data_reader.load_local_dict", "print", "open", "pickle.load", "len"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.load_local_dict"], ["", "def", "load_data", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "'''\n        Load the dataset\n        '''", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_path", ")", ":", "\n", "            ", "with", "open", "(", "load_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "data_batch", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "data_batch", ")", "\n", "", "self", ".", "load_local_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Data not exist!'", ")", "\n", "return", "None", "\n", "", "return", "self", ".", "data_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_reader.load_local_dict": [[33, 41], ["os.path.exists", "print", "open", "pickle.load"], "methods", ["None"], ["", "def", "load_local_dict", "(", "self", ")", ":", "\n", "        ", "'''\n        Load dictionary files\n        '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "dic_path", ")", ":", "\n", "            ", "print", "(", "'Dictionary file not exist!'", ")", "\n", "", "with", "open", "(", "self", ".", "config", ".", "dic_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "word2id", ",", "_", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.__init__": [[44, 61], ["data_reader_general.data_generator.remove_empty_target", "len", "data_reader_general.data_generator.load_local_dict"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.remove_empty_target", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.load_local_dict"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "data_batch", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "'''\n        Generate training and testing samples\n        Args:\n        config: configuration parameters\n        data_batch: data list, each contain a nametuple\n        '''", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "index", "=", "0", "\n", "# Filter sentences without targets", "\n", "self", ".", "data_batch", "=", "self", ".", "remove_empty_target", "(", "data_batch", ")", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "data_batch", ")", "\n", "self", ".", "UNK", "=", "\"unk\"", "\n", "self", ".", "EOS", "=", "\"<eos>\"", "\n", "self", ".", "PAD", "=", "\"<pad>\"", "\n", "self", ".", "load_local_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.remove_empty_target": [[62, 75], ["len", "enumerate", "sum", "filtered_data.append", "print"], "methods", ["None"], ["", "def", "remove_empty_target", "(", "self", ",", "data_batch", ")", ":", "\n", "        ", "'''\n        Remove items without targets\n        '''", "\n", "original_num", "=", "len", "(", "data_batch", ")", "\n", "filtered_data", "=", "[", "]", "\n", "filtered_weights", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "data_batch", ")", ":", "\n", "            ", "if", "sum", "(", "item", "[", "1", "]", ")", ">", "0", ":", "\n", "                ", "filtered_data", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Mask Without Target'", ",", "item", "[", "0", "]", ",", "'Target'", ",", "item", "[", "5", "]", ")", "\n", "", "", "return", "filtered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.load_local_dict": [[76, 87], ["os.path.exists", "print", "open", "pickle.load"], "methods", ["None"], ["", "def", "load_local_dict", "(", "self", ")", ":", "\n", "        ", "'''\n        Load dictionary files\n        '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "dic_path", ")", ":", "\n", "            ", "print", "(", "'Dictionary file not exist!'", ")", "\n", "", "with", "open", "(", "self", ".", "config", ".", "dic_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "word2id", ",", "_", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "UNK_ID", "=", "word2id", "[", "self", ".", "UNK", "]", "\n", "self", ".", "PAD_ID", "=", "word2id", "[", "self", ".", "PAD", "]", "\n", "self", ".", "EOS_ID", "=", "word2id", "[", "self", ".", "EOS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.reset_samples": [[88, 90], ["None"], "methods", ["None"], ["", "def", "reset_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.pad_data": [[91, 127], ["len", "torch.LongTensor", "torch.LongTensor", "max", "len", "numpy.zeros", "torch.LongTensor", "enumerate", "torch.LongTensor", "enumerate", "torch.LongTensor.sort", "len", "torch.LongTensor", "numpy.ones", "torch.LongTensor", "open", "f.write", "f.close", "f.write", "i.item", "i.item", "i.item", "len", "len", "str", "i.cpu"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LongTensor"], ["", "def", "pad_data", "(", "self", ",", "sents", ",", "masks", ",", "labels", ",", "texts", ",", "targets", ",", "target_ids", ",", "test", ")", ":", "\n", "        ", "'''\n        Padding sentences to same size\n        '''", "\n", "sent_lens", "=", "[", "len", "(", "tokens", ")", "for", "tokens", "in", "sents", "]", "\n", "len_sent", "=", "len", "(", "sent_lens", ")", "\n", "sent_lens", "=", "torch", ".", "LongTensor", "(", "sent_lens", ")", "\n", "label_list", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "max_len", "=", "max", "(", "sent_lens", ")", "\n", "batch_size", "=", "len", "(", "sent_lens", ")", "\n", "# Padding mask", "\n", "mask_vecs", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "max_len", "]", ")", "\n", "mask_vecs", "=", "torch", ".", "LongTensor", "(", "mask_vecs", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "mask_vecs", "[", "i", ",", ":", "len", "(", "mask", ")", "]", "=", "torch", ".", "LongTensor", "(", "mask", ")", "\n", "# padding sent with PAD IDs", "\n", "", "sent_vecs", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "max_len", "]", ")", "*", "self", ".", "PAD_ID", "\n", "sent_vecs", "=", "torch", ".", "LongTensor", "(", "sent_vecs", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sents", ")", ":", "# batch_size*max_len", "\n", "            ", "sent_vecs", "[", "i", ",", ":", "len", "(", "s", ")", "]", "=", "torch", ".", "LongTensor", "(", "s", ")", "\n", "", "sent_lens", ",", "perm_idx", "=", "sent_lens", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "if", "test", ":", "\n", "            ", "with", "open", "(", "'test_id.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "i", "in", "perm_idx", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "i", ".", "cpu", "(", ")", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "# perm_idx = torch.LongTensor(list(range(len_sent)))", "\n", "", "", "sent_ids", "=", "sent_vecs", "[", "perm_idx", "]", "\n", "mask_vecs", "=", "mask_vecs", "[", "perm_idx", "]", "\n", "label_list", "=", "label_list", "[", "perm_idx", "]", "\n", "texts", "=", "[", "texts", "[", "i", ".", "item", "(", ")", "]", "for", "i", "in", "perm_idx", "]", "\n", "targets", "=", "[", "targets", "[", "i", ".", "item", "(", ")", "]", "for", "i", "in", "perm_idx", "]", "\n", "target_ids", "=", "[", "target_ids", "[", "i", ".", "item", "(", ")", "]", "for", "i", "in", "perm_idx", "]", "\n", "\n", "return", "sent_ids", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ",", "texts", ",", "targets", ",", "target_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.get_ids_samples": [[128, 161], ["zip", "data_reader_general.data_generator.pad_data", "zip", "data_reader_general.data_generator.pad_data", "len", "list"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.pad_data", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.data_reader_general.data_generator.pad_data"], ["", "def", "get_ids_samples", "(", "self", ",", "test", "=", "False", ",", "is_balanced", "=", "False", ")", ":", "\n", "        ", "'''\n        Get samples including ids of words, labels\n        '''", "\n", "# First get batches of testing data", "\n", "if", "self", ".", "data_len", "-", "self", ".", "index", ">=", "self", ".", "config", ".", "batch_size", ":", "\n", "# print('Sample Index:', self.index)", "\n", "            ", "start", "=", "self", ".", "index", "\n", "end", "=", "start", "+", "self", ".", "config", ".", "batch_size", "\n", "samples", "=", "self", ".", "data_batch", "[", "start", ":", "end", "]", "\n", "self", ".", "index", "=", "end", "\n", "tokens", ",", "mask_list", ",", "label_list", ",", "token_ids", ",", "texts", ",", "targets", ",", "target_ids", "=", "zip", "(", "*", "samples", ")", "\n", "\n", "# Sorting happens here", "\n", "sent_ids", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ",", "texts", ",", "targets", ",", "target_ids", "=", "self", ".", "pad_data", "(", "token_ids", ",", "\n", "mask_list", ",", "\n", "label_list", ",", "texts", ",", "\n", "targets", ",", "target_ids", ",", "\n", "test", ")", "\n", "", "else", ":", "# Then generate testing data one by one", "\n", "            ", "samples", "=", "self", ".", "data_batch", "[", "self", ".", "index", ":", "]", "\n", "if", "self", ".", "index", "==", "self", ".", "data_len", "-", "1", ":", "# if only one sample left", "\n", "                ", "samples", "=", "list", "(", "samples", ")", "\n", "", "tokens", ",", "mask_list", ",", "label_list", ",", "token_ids", ",", "texts", ",", "targets", ",", "target_ids", "=", "zip", "(", "*", "samples", ")", "\n", "sent_ids", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ",", "texts", ",", "targets", ",", "target_ids", "=", "self", ".", "pad_data", "(", "token_ids", ",", "\n", "mask_list", ",", "\n", "label_list", ",", "\n", "texts", ",", "\n", "targets", ",", "\n", "target_ids", ",", "\n", "test", ")", "\n", "self", ".", "index", "+=", "len", "(", "samples", ")", "\n", "", "yield", "sent_ids", ",", "mask_vecs", ",", "label_list", ",", "sent_lens", ",", "texts", ",", "targets", ",", "target_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.AverageMeter.__init__": [[22, 25], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "length", "=", "0", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.AverageMeter.reset": [[26, 34], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "length", ">", "0", ":", "\n", "            ", "self", ".", "history", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "count", "=", "0", "\n", "self", ".", "sum", "=", "0.0", "\n", "", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.AverageMeter.update": [[35, 47], ["util.AverageMeter.history.append", "numpy.mean", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "length", ">", "0", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "val", ")", "\n", "if", "len", "(", "self", ".", "history", ")", ">", "self", ".", "length", ":", "\n", "                ", "del", "self", ".", "history", "[", "0", "]", "\n", "", "self", ".", "val", "=", "self", ".", "history", "[", "-", "1", "]", "\n", "self", ".", "avg", "=", "np", ".", "mean", "(", "self", ".", "history", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.to_scalar": [[8, 11], ["var.view().data.tolist", "var.view"], "function", ["None"], ["def", "to_scalar", "(", "var", ")", ":", "\n", "# returns a python float", "\n", "    ", "return", "var", ".", "view", "(", "-", "1", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.argmax": [[13, 18], ["torch.max", "util.to_scalar"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.to_scalar"], ["", "def", "argmax", "(", "vec", ")", ":", "\n", "# vec is only 1d vec", "\n", "# return the argmax as a python int", "\n", "    ", "_", ",", "idx", "=", "torch", ".", "max", "(", "vec", ",", "0", ")", "\n", "return", "to_scalar", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.save_checkpoint": [[49, 51], ["torch.save", "os.join", "str"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "e_", "=", "1", ",", "filename", "=", "''", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "osp", ".", "join", "(", "filename", ",", "'checkpoint.pth.tar'", "+", "str", "(", "e_", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.argmax_m": [[53, 64], ["mat.size", "range", "util.argmax", "ret_ind.append", "ret_v.append", "type", "type", "torch.stack", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.argmax", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "argmax_m", "(", "mat", ")", ":", "\n", "    ", "ret_v", ",", "ret_ind", "=", "[", "]", ",", "[", "]", "\n", "m", ",", "n", "=", "mat", ".", "size", "(", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "ind_", "=", "argmax", "(", "mat", "[", "i", "]", ")", "\n", "ret_ind", ".", "append", "(", "ind_", ")", "\n", "ret_v", ".", "append", "(", "mat", "[", "i", "]", "[", "ind_", "]", ")", "\n", "", "if", "type", "(", "ret_v", "[", "0", "]", ")", "==", "Variable", "or", "type", "(", "ret_v", "[", "0", "]", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "return", "ret_ind", ",", "torch", ".", "stack", "(", "ret_v", ")", "\n", "", "else", ":", "\n", "        ", "return", "ret_ind", ",", "torch", ".", "Tensor", "(", "ret_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp_m": [[68, 77], ["mat.size", "range", "torch.stack", "max_score.view().expand", "ret_l.append", "util.argmax", "max_score.view", "vec.size", "torch.log", "torch.sum", "torch.exp"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.argmax"], ["", "", "def", "log_sum_exp_m", "(", "mat", ")", ":", "\n", "    ", "row", ",", "column", "=", "mat", ".", "size", "(", ")", "\n", "ret_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "row", ")", ":", "\n", "        ", "vec", "=", "mat", "[", "i", "]", "\n", "max_score", "=", "vec", "[", "argmax", "(", "vec", ")", "]", "\n", "max_score_broadcast", "=", "max_score", ".", "view", "(", "-", "1", ")", ".", "expand", "(", "1", ",", "vec", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "ret_l", ".", "append", "(", "max_score", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "vec", "-", "max_score_broadcast", ")", ")", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "ret_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.log_sum_exp": [[79, 92], ["torch.stack", "torch.stack.size", "torch.max.expand", "torch.max.expand", "torch.max", "torch.log", "pdb.set_trace", "torch.sum", "torch.exp"], "function", ["None"], ["", "def", "log_sum_exp", "(", "vec_list", ")", ":", "\n", "    ", "tmp_mat", "=", "torch", ".", "stack", "(", "vec_list", ",", "0", ")", "\n", "m", ",", "n", "=", "tmp_mat", ".", "size", "(", ")", "\n", "# value may be nan because of gradient explosion", "\n", "try", ":", "\n", "        ", "max_score", "=", "torch", ".", "max", "(", "tmp_mat", ")", "\n", "", "except", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "", "max_expand", "=", "max_score", ".", "expand", "(", "m", ",", "n", ")", "\n", "max_ex_v", "=", "max_score", ".", "expand", "(", "1", ",", "n", ")", "\n", "# sum along dim 0", "\n", "ret_val", "=", "max_ex_v", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "tmp_mat", "-", "max_expand", ")", ",", "0", ")", ")", "\n", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.add_broad": [[96, 102], ["vec1.expand().transpose.expand().transpose", "vec2.expand.expand", "new_vec.view", "vec1.expand().transpose.size", "vec1.expand().transpose.expand"], "function", ["None"], ["", "def", "add_broad", "(", "vec1", ",", "vec2", ")", ":", "\n", "    ", "s_", "=", "vec1", ".", "size", "(", ")", "[", "0", "]", "\n", "vec1", "=", "vec1", ".", "expand", "(", "3", ",", "s_", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "vec2", "=", "vec2", ".", "expand", "(", "s_", ",", "3", ")", "\n", "new_vec", "=", "vec1", "+", "vec2", "\n", "return", "new_vec", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.to_1d": [[105, 111], ["vec_list[].clone", "len", "range", "util.add_broad"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.add_broad"], ["", "def", "to_1d", "(", "vec_list", ")", ":", "\n", "    ", "ret_v", "=", "vec_list", "[", "0", "]", ".", "clone", "(", ")", "\n", "v_l", "=", "len", "(", "vec_list", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "v_l", ")", ":", "\n", "        ", "ret_v", "=", "add_broad", "(", "ret_v", ",", "vec_list", "[", "i", "]", ")", "\n", "", "return", "ret_v", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.to_ind": [[113, 120], ["reversed", "list", "range", "ret_l.append", "reversed"], "function", ["None"], ["", "def", "to_ind", "(", "num", ",", "logit", ")", ":", "\n", "    ", "ret_l", "=", "[", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "logit", ")", ")", ":", "\n", "        ", "tmp", "=", "num", "/", "3", "**", "i", "\n", "num", "=", "num", "-", "tmp", "*", "3", "**", "i", "\n", "ret_l", ".", "append", "(", "tmp", ")", "\n", "", "return", "list", "(", "reversed", "(", "ret_l", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.create_empty_var": [[122, 128], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.Tensor"], ["", "def", "create_empty_var", "(", "if_gpu", ")", ":", "\n", "    ", "if", "if_gpu", ":", "\n", "        ", "loss", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ")", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.MLSTM.__init__": [[22, 28], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "Layer.init_ortho", "int", "int"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.init_ortho"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "config", ".", "embed_dim", "+", "config", ".", "mask_dim", ",", "int", "(", "config", ".", "l_hidden_size", "/", "2", ")", ",", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "int", "(", "config", ".", "l_num_layers", "/", "2", ")", ",", "bidirectional", "=", "True", ",", "dropout", "=", "config", ".", "l_dropout", ")", "\n", "init_ortho", "(", "self", ".", "rnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.MLSTM.forward": [[30, 42], ["torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "Layer.MLSTM.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "seq_lengths", "=", "None", ")", ":", "\n", "        ", "'''\n        Args:\n        feats: batch_size, max_len, emb_dim\n        seq_lengths: batch_size\n        '''", "\n", "pack", "=", "nn_utils", ".", "rnn", ".", "pack_padded_sequence", "(", "feats", ",", "\n", "seq_lengths", ",", "batch_first", "=", "True", ")", "\n", "lstm_out", ",", "_", "=", "self", ".", "rnn", "(", "pack", ")", "\n", "# Unpack the tensor, get the output for varied-size sentences", "\n", "unpacked", ",", "_", "=", "nn_utils", ".", "rnn", ".", "pad_packed_sequence", "(", "lstm_out", ",", "batch_first", "=", "True", ")", "\n", "return", "unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.__init__": [[45, 56], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "'''\n        Concatenate word embeddings and target embeddings\n        '''", "\n", "super", "(", "SimpleCat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "power", "=", "config", ".", "power", "\n", "self", ".", "word_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "embed_num", ",", "config", ".", "embed_dim", ")", "\n", "self", ".", "mask_embed", "=", "nn", ".", "Embedding", "(", "2", ",", "config", ".", "mask_dim", ")", "\n", "self", ".", "weight_embed", "=", "nn", ".", "Embedding", "(", "2", ",", "config", ".", "mask_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.forward": [[58, 92], ["Variable", "Variable", "Variable.size", "Layer.SimpleCat.word_embed", "Layer.SimpleCat.mask_embed", "Variable.tolist", "np.sum", "Layer.SimpleCat.get_position_ids", "enumerate", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "Variable.index", "range", "position_ids.append", "Variable.cuda", "Variable.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "position_id.append", "position_id.append", "position_id.append", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.get_position_ids"], ["", "def", "forward", "(", "self", ",", "sent", ",", "mask", ")", ":", "\n", "        ", "'''\n        Args:\n        sent: tensor, shape(batch_size, max_len, emb_dim)\n        mask: tensor, shape(batch_size, max_len)\n        '''", "\n", "sent", "=", "Variable", "(", "sent", ")", "\n", "mask", "=", "Variable", "(", "mask", ")", "\n", "batch_size", ",", "max_len", "=", "mask", ".", "size", "(", ")", "\n", "# Use GloVe embedding", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "\n", "            ", "sent", ",", "mask", "=", "sent", ".", "cuda", "(", ")", ",", "mask", ".", "cuda", "(", ")", "\n", "# to embeddings", "\n", "", "sent_vec", "=", "self", ".", "word_embed", "(", "sent", ")", "# batch_siz*sent_len * dim", "\n", "mask_vec", "=", "self", ".", "mask_embed", "(", "mask", ")", "# batch_size*max_len* dim", "\n", "# change mask emb to position emb", "\n", "mask_list", "=", "mask", ".", "tolist", "(", ")", "\n", "len_target", "=", "np", ".", "sum", "(", "mask_list", ",", "axis", "=", "1", ")", "\n", "position_ids", "=", "[", "]", "\n", "position_dict", "=", "self", ".", "get_position_ids", "(", "100", ")", "\n", "for", "j", ",", "sent", "in", "enumerate", "(", "mask_list", ")", ":", "\n", "            ", "position_id", "=", "[", "]", "\n", "target_id_left", "=", "sent", ".", "index", "(", "1", ")", "\n", "for", "p", "in", "range", "(", "max_len", ")", ":", "\n", "                ", "if", "p", "<=", "target_id_left", ":", "\n", "                    ", "position_id", ".", "append", "(", "(", "(", "100", "-", "abs", "(", "100", "-", "(", "position_dict", "[", "p", "-", "target_id_left", "]", ")", ")", ")", "/", "100", ")", "**", "self", ".", "power", ")", "\n", "", "if", "target_id_left", "<=", "p", "<", "target_id_left", "+", "len_target", "[", "j", "]", ":", "\n", "                    ", "position_id", ".", "append", "(", "1", ")", "\n", "", "if", "target_id_left", "+", "len_target", "[", "j", "]", "<", "p", "<=", "max_len", ":", "\n", "                    ", "position_id", ".", "append", "(", "(", "(", "100", "-", "abs", "(", "100", "-", "(", "position_dict", "[", "p", "-", "target_id_left", "-", "len_target", "[", "j", "]", "]", ")", ")", ")", "/", "100", ")", "**", "self", ".", "power", ")", "\n", "", "", "position_ids", ".", "append", "(", "position_id", ")", "\n", "", "position_weight", "=", "torch", ".", "FloatTensor", "(", "position_ids", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "sent_vec", ",", "mask_vec", ",", "position_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.get_position_ids": [[93, 102], ["None"], "methods", ["None"], ["", "def", "get_position_ids", "(", "self", ",", "max_len", ")", ":", "\n", "        ", "position_ids", "=", "{", "}", "\n", "position", "=", "(", "max_len", "-", "1", ")", "*", "-", "1", "\n", "position_id", "=", "1", "\n", "while", "position", "<=", "max_len", "-", "1", ":", "\n", "            ", "position_ids", "[", "position", "]", "=", "position_id", "\n", "position_id", "+=", "1", "\n", "position", "+=", "1", "\n", "", "return", "position_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.load_vector": [[103, 113], ["open", "pickle.load", "print", "Layer.SimpleCat.word_embed.weight.data.copy_", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "load_vector", "(", "self", ")", ":", "\n", "        ", "'''\n        Load pre-savedd word embeddings\n        '''", "\n", "with", "open", "(", "self", ".", "config", ".", "embed_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "vectors", "=", "pickle", ".", "load", "(", "f", ")", "\n", "print", "(", "\"Loaded from {} with shape {}\"", ".", "format", "(", "self", ".", "config", ".", "embed_path", ",", "vectors", ".", "shape", ")", ")", "\n", "self", ".", "word_embed", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "vectors", ")", ")", "\n", "self", ".", "word_embed", ".", "weight", ".", "requires_grad", "=", "self", ".", "config", ".", "if_update_embed", "\n", "print", "(", "'embeddings loaded'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.reset_binary": [[114, 116], ["Layer.SimpleCat.mask_embed.weight.data[].zero_"], "methods", ["None"], ["", "", "def", "reset_binary", "(", "self", ")", ":", "\n", "        ", "self", ".", "mask_embed", ".", "weight", ".", "data", "[", "0", "]", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.sent_split": [[7, 13], ["nlp", "words.append", "w.text.lower"], "function", ["None"], ["def", "sent_split", "(", "sent", ")", ":", "\n", "    ", "words", "=", "[", "]", "\n", "sent", "=", "nlp", "(", "sent", ")", "\n", "for", "w", "in", "sent", ":", "\n", "        ", "words", ".", "append", "(", "w", ".", "text", ".", "lower", "(", ")", ")", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.init_ortho": [[15, 19], ["module.parameters", "len", "torch.orthogonal_", "weight_.size"], "function", ["None"], ["", "def", "init_ortho", "(", "module", ")", ":", "\n", "    ", "for", "weight_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "weight_", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "init", ".", "orthogonal_", "(", "weight_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.biLSTM.__init__": [[17, 23], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "model_batch_crf_glove.init_ortho", "int", "int"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.init_ortho"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "biLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "config", ".", "embed_dim", "+", "config", ".", "mask_dim", ",", "int", "(", "config", ".", "l_hidden_size", "/", "2", ")", ",", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "int", "(", "config", ".", "l_num_layers", "/", "2", ")", ",", "bidirectional", "=", "True", ")", "\n", "init_ortho", "(", "self", ".", "rnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.biLSTM.forward": [[24, 38], ["torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model_batch_crf_glove.biLSTM.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "seq_lengths", "=", "None", ")", ":", "\n", "        ", "'''\n        Args:\n        feats: batch_size, max_len, emb_dim\n        seq_lengths: batch_size\n        '''", "\n", "pack", "=", "nn_utils", ".", "rnn", ".", "pack_padded_sequence", "(", "feats", ",", "seq_lengths", ",", "batch_first", "=", "True", ")", "\n", "# batch_size*max_len*hidden_dim", "\n", "lstm_out", ",", "_", "=", "self", ".", "rnn", "(", "pack", ")", "\n", "# Unpack the tensor, get the output for varied-size sentences", "\n", "# padding with zeros", "\n", "unpacked", ",", "_", "=", "nn_utils", ".", "rnn", ".", "pad_packed_sequence", "(", "lstm_out", ",", "batch_first", "=", "True", ")", "\n", "# batch * sent_l * 2 * hidden_states ", "\n", "return", "unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__": [[42, 92], ["torch.Module.__init__", "int", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "model_batch_crf_glove.biLSTM", "torch.Linear", "torch.Linear", "torch.Linear", "BatchLinearChainCRF.LinearChainCrf", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "BatchLinearChainCRF.LinearChainCrf", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "BatchLinearChainCRF.LinearChainCrf", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "BatchLinearChainCRF.LinearChainCrf", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_batch_crf_glove.AspectSent.W.append", "model_batch_crf_glove.AspectSent.W.append", "model_batch_crf_glove.AspectSent.W.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "Layer.SimpleCat", "model_batch_crf_glove.AspectSent.cat_layer.load_vector", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.__init__", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.load_vector"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "'''\n        LSTM+Aspect\n        '''", "\n", "super", "(", "AspectSent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "input_dim", "=", "config", ".", "l_hidden_size", "# + config.pos_dim", "\n", "kernel_num", "=", "config", ".", "l_hidden_size", "# + config.pos_dim", "\n", "reduced_size", "=", "int", "(", "config", ".", "l_hidden_size", "/", "4", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "kernel_num", ",", "3", ",", "padding", "=", "1", ")", "# not used", "\n", "\n", "self", ".", "bilstm", "=", "biLSTM", "(", "config", ")", "\n", "self", ".", "feat2tri", "=", "nn", ".", "Linear", "(", "reduced_size", ",", "2", "+", "2", ")", "\n", "self", ".", "inter_crf", "=", "LinearChainCrf", "(", "2", "+", "2", ")", "\n", "self", ".", "h1linear", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "reduced_size", ")", "\n", "\n", "self", ".", "feat2tri2", "=", "nn", ".", "Linear", "(", "reduced_size", ",", "2", "+", "2", ")", "\n", "self", ".", "inter_crf2", "=", "LinearChainCrf", "(", "2", "+", "2", ")", "\n", "self", ".", "h2linear", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "reduced_size", ")", "\n", "\n", "self", ".", "feat2tri3", "=", "nn", ".", "Linear", "(", "reduced_size", ",", "2", "+", "2", ")", "\n", "self", ".", "inter_crf3", "=", "LinearChainCrf", "(", "2", "+", "2", ")", "\n", "self", ".", "h3linear", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "reduced_size", ")", "\n", "\n", "self", ".", "feat2tri4", "=", "nn", ".", "Linear", "(", "reduced_size", ",", "2", "+", "2", ")", "\n", "self", ".", "inter_crf4", "=", "LinearChainCrf", "(", "2", "+", "2", ")", "\n", "self", ".", "h4linear", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "reduced_size", ")", "\n", "\n", "self", ".", "feat2label", "=", "nn", ".", "Linear", "(", "kernel_num", ",", "3", ")", "\n", "self", ".", "feat2label2", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", "*", "4", ",", "3", ")", "\n", "\n", "# gcn - not used for current model", "\n", "self", ".", "W", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "W", ".", "append", "(", "nn", ".", "Linear", "(", "config", ".", "l_hidden_size", ",", "config", ".", "l_hidden_size", ")", ")", "\n", "self", ".", "W", ".", "append", "(", "nn", ".", "Linear", "(", "config", ".", "l_hidden_size", ",", "config", ".", "l_hidden_size", ")", ")", "\n", "self", ".", "W", ".", "append", "(", "nn", ".", "Linear", "(", "200", ",", "100", ")", ")", "\n", "\n", "# cnn - not used for current model", "\n", "self", ".", "filters", "=", "[", "3", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "config", ".", "l_hidden_size", ",", "\n", "kernel_size", "=", "(", "k", ",", "config", ".", "l_hidden_size", "+", "2", ")", ",", "\n", "padding", "=", "1", ")", "for", "k", "in", "self", ".", "filters", "]", ")", "\n", "self", ".", "loss", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout2", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "cat_layer", "=", "SimpleCat", "(", "config", ")", "\n", "self", ".", "cat_layer", ".", "load_vector", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.get_pos_weight": [[93, 112], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "masks.sum", "enumerate", "masks.size", "m.argmax", "enumerate", "lens[].to", "lens[].to"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.util.argmax"], ["", "def", "get_pos_weight", "(", "self", ",", "masks", ",", "lens", ")", ":", "\n", "        ", "'''\n        Get positional weight\n        '''", "\n", "pos_wghts", "=", "torch", ".", "zeros", "(", "masks", ".", "size", "(", ")", ")", "\n", "t_num", "=", "masks", ".", "sum", "(", "1", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "begin", "=", "m", ".", "argmax", "(", ")", "\n", "for", "j", ",", "b", "in", "enumerate", "(", "m", ")", ":", "\n", "# padding words' weights are zero", "\n", "                ", "if", "j", ">", "lens", "[", "i", "]", ":", "\n", "                    ", "break", "\n", "", "if", "j", "<", "begin", ":", "\n", "                    ", "pos_wghts", "[", "i", "]", "[", "j", "]", "=", "1", "-", "(", "begin", "-", "j", ")", ".", "to", "(", "torch", ".", "float", ")", "/", "lens", "[", "i", "]", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "if", "b", "==", "1", ":", "\n", "                    ", "pos_wghts", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "if", "j", ">", "begin", "+", "t_num", "[", "i", "]", ":", "\n", "                    ", "pos_wghts", "[", "i", "]", "[", "j", "]", "=", "1", "-", "(", "j", "-", "begin", ")", ".", "to", "(", "torch", ".", "float", ")", "/", "lens", "[", "i", "]", ".", "to", "(", "torch", ".", "float", ")", "\n", "", "", "", "return", "pos_wghts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.get_target_emb": [[113, 124], ["context.size", "model_batch_crf_glove.convert_mask_index", "masks.expand().transpose().transpose.expand().transpose().transpose.type_as", "masks.expand().transpose().transpose.expand().transpose().transpose.expand().transpose().transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "masks.expand().transpose().transpose.expand().transpose().transpose.expand().transpose", "masks.expand().transpose().transpose.expand().transpose().transpose.expand"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.convert_mask_index"], ["", "def", "get_target_emb", "(", "self", ",", "context", ",", "masks", ")", ":", "\n", "# Target embeddings", "\n", "# Find target indices, a list of indices", "\n", "        ", "batch_size", ",", "max_len", ",", "hidden_dim", "=", "context", ".", "size", "(", ")", "\n", "target_indices", ",", "target_max_len", "=", "convert_mask_index", "(", "masks", ")", "\n", "# Find the target context embeddings, batch_size*max_len*hidden_size", "\n", "masks", "=", "masks", ".", "type_as", "(", "context", ")", "\n", "masks", "=", "masks", ".", "expand", "(", "hidden_dim", ",", "batch_size", ",", "max_len", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "target_emb", "=", "masks", "*", "context", "\n", "target_emb_avg", "=", "torch", ".", "sum", "(", "target_emb", ",", "1", ")", "/", "torch", ".", "sum", "(", "masks", ",", "1", ")", "# Batch_size*embedding", "\n", "return", "target_emb_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.compute_scores": [[125, 195], ["masks.size", "model_batch_crf_glove.convert_mask_index", "model_batch_crf_glove.AspectSent.cat_layer", "model_batch_crf_glove.AspectSent.dropout2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_batch_crf_glove.AspectSent.bilstm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul.size", "torch.mul.size", "torch.mul.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "range", "model_batch_crf_glove.AspectSent.h1linear", "model_batch_crf_glove.AspectSent.feat2tri", "model_batch_crf_glove.AspectSent.inter_crf.compute_marginal", "model_batch_crf_glove.AspectSent.h2linear", "model_batch_crf_glove.AspectSent.feat2tri2", "model_batch_crf_glove.AspectSent.inter_crf2.compute_marginal", "model_batch_crf_glove.AspectSent.h3linear", "model_batch_crf_glove.AspectSent.feat2tri3", "model_batch_crf_glove.AspectSent.inter_crf3.compute_marginal", "model_batch_crf_glove.AspectSent.h4linear", "model_batch_crf_glove.AspectSent.feat2tri4", "model_batch_crf_glove.AspectSent.inter_crf4.compute_marginal", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.relu", "torch.relu", "torch.relu", "model_batch_crf_glove.AspectSent.feat2label2().squeeze", "x.unsqueeze().expand", "torch.full.type_as", "torch.full.type_as", "torch.full.type_as", "sp.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.full.type_as", "torch.full.type_as", "torch.full.type_as", "sp.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.full.type_as", "torch.full.type_as", "torch.full.type_as", "sp.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.full.type_as", "torch.full.type_as", "torch.full.type_as", "sp.sum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_batch_crf_glove.AspectSent.dropout", "zip", "sp.unsqueeze", "enumerate", "zip", "sp.unsqueeze", "enumerate", "zip", "sp.unsqueeze", "enumerate", "zip", "sp.unsqueeze", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model_batch_crf_glove.AspectSent.feat2label2", "x.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.convert_mask_index", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.compute_marginal", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.compute_marginal", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.compute_marginal", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.LinearChainCrf.compute_marginal", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.BatchLinearChainCRF.zeros"], ["", "def", "compute_scores", "(", "self", ",", "sents", ",", "masks", ",", "lens", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "'''\n        Args:\n        sents: batch_size*max_len*word_dim\n        masks: batch_size*max_len\n        lens: batch_size\n        '''", "\n", "batch_size", ",", "max_len", "=", "masks", ".", "size", "(", ")", "\n", "target_indices", ",", "target_max_len", "=", "convert_mask_index", "(", "masks", ")", "\n", "sents", ",", "mask", ",", "pos", "=", "self", ".", "cat_layer", "(", "sents", ",", "masks", ")", "\n", "sents", "=", "self", ".", "dropout2", "(", "sents", ")", "\n", "sents", "=", "torch", ".", "cat", "(", "[", "sents", ",", "mask", "]", ",", "2", ")", "\n", "context", "=", "self", ".", "bilstm", "(", "sents", ",", "lens", ")", "# Batch_size*sent_len*hidden_dim", "\n", "pos", "=", "[", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "max_len", ",", "self", ".", "input_dim", ")", "for", "x", "in", "pos", "]", "\n", "pos", "=", "torch", ".", "stack", "(", "pos", ")", "\n", "context", "=", "torch", ".", "mul", "(", "context", ",", "pos", ")", "\n", "\n", "batch_size", ",", "max_len", ",", "hidden_dim", "=", "context", ".", "size", "(", ")", "\n", "word_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_len", ")", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "word_mask", "[", "i", ",", ":", "lens", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "# head 1", "\n", "", "context1", "=", "self", ".", "h1linear", "(", "context", ")", "\n", "feats1", "=", "self", ".", "feat2tri", "(", "context1", ")", "# Batch_size*sent_len*2", "\n", "marginals1", "=", "self", ".", "inter_crf", ".", "compute_marginal", "(", "feats1", ",", "word_mask", ".", "type_as", "(", "feats1", ")", ")", "\n", "select_polarities1", "=", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals1", "]", "\n", "gammas", "=", "[", "sp", ".", "sum", "(", ")", "for", "sp", "in", "select_polarities1", "]", "\n", "select_polarities1", "=", "[", "sv", "/", "gamma", "for", "sv", ",", "gamma", "in", "zip", "(", "select_polarities1", ",", "gammas", ")", "]", "\n", "sent_vs1", "=", "[", "torch", ".", "mm", "(", "sp", ".", "unsqueeze", "(", "0", ")", ",", "context", "[", "i", ",", ":", "lens", "[", "i", "]", ",", ":", "]", ")", "for", "i", ",", "sp", "in", "enumerate", "(", "select_polarities1", ")", "]", "\n", "# head 2", "\n", "context2", "=", "self", ".", "h2linear", "(", "context", ")", "\n", "feats2", "=", "self", ".", "feat2tri2", "(", "context2", ")", "# Batch_size*sent_len*2", "\n", "marginals2", "=", "self", ".", "inter_crf2", ".", "compute_marginal", "(", "feats2", ",", "word_mask", ".", "type_as", "(", "feats2", ")", ")", "\n", "select_polarities2", "=", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals2", "]", "\n", "gammas", "=", "[", "sp", ".", "sum", "(", ")", "for", "sp", "in", "select_polarities2", "]", "\n", "select_polarities2", "=", "[", "sv", "/", "gamma", "for", "sv", ",", "gamma", "in", "zip", "(", "select_polarities2", ",", "gammas", ")", "]", "\n", "sent_vs2", "=", "[", "torch", ".", "mm", "(", "sp", ".", "unsqueeze", "(", "0", ")", ",", "context", "[", "i", ",", ":", "lens", "[", "i", "]", ",", ":", "]", ")", "for", "i", ",", "sp", "in", "enumerate", "(", "select_polarities2", ")", "]", "\n", "\n", "# head 3", "\n", "context3", "=", "self", ".", "h3linear", "(", "context", ")", "\n", "feats3", "=", "self", ".", "feat2tri3", "(", "context3", ")", "# Batch_size*sent_len*2", "\n", "marginals3", "=", "self", ".", "inter_crf3", ".", "compute_marginal", "(", "feats3", ",", "word_mask", ".", "type_as", "(", "feats3", ")", ")", "\n", "select_polarities3", "=", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals3", "]", "\n", "gammas", "=", "[", "sp", ".", "sum", "(", ")", "for", "sp", "in", "select_polarities3", "]", "\n", "select_polarities3", "=", "[", "sv", "/", "gamma", "for", "sv", ",", "gamma", "in", "zip", "(", "select_polarities3", ",", "gammas", ")", "]", "\n", "sent_vs3", "=", "[", "torch", ".", "mm", "(", "sp", ".", "unsqueeze", "(", "0", ")", ",", "context", "[", "i", ",", ":", "lens", "[", "i", "]", ",", ":", "]", ")", "for", "i", ",", "sp", "in", "enumerate", "(", "select_polarities3", ")", "]", "\n", "# head 4", "\n", "context4", "=", "self", ".", "h4linear", "(", "context", ")", "\n", "feats4", "=", "self", ".", "feat2tri4", "(", "context4", ")", "# Batch_size*sent_len*2", "\n", "marginals4", "=", "self", ".", "inter_crf4", ".", "compute_marginal", "(", "feats4", ",", "word_mask", ".", "type_as", "(", "feats4", ")", ")", "\n", "select_polarities4", "=", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals4", "]", "\n", "gammas", "=", "[", "sp", ".", "sum", "(", ")", "for", "sp", "in", "select_polarities4", "]", "\n", "select_polarities4", "=", "[", "sv", "/", "gamma", "for", "sv", ",", "gamma", "in", "zip", "(", "select_polarities4", ",", "gammas", ")", "]", "\n", "sent_vs4", "=", "[", "torch", ".", "mm", "(", "sp", ".", "unsqueeze", "(", "0", ")", ",", "context", "[", "i", ",", ":", "lens", "[", "i", "]", ",", ":", "]", ")", "for", "i", ",", "sp", "in", "enumerate", "(", "select_polarities4", ")", "]", "\n", "\n", "sent_vs", "=", "torch", ".", "zeros", "(", "batch_size", ",", "hidden_dim", "*", "4", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "sent_vs", "[", "i", "]", "=", "torch", ".", "cat", "(", "(", "sent_vs1", "[", "i", "]", ",", "sent_vs2", "[", "i", "]", ",", "sent_vs3", "[", "i", "]", ",", "sent_vs4", "[", "i", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "select_polarities", "=", "[", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals1", "]", ",", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals2", "]", ",", "\n", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals3", "]", ",", "[", "marginal", "[", ":", ",", "1", "]", "for", "marginal", "in", "marginals4", "]", "]", "\n", "\n", "sent_vs", "=", "F", ".", "relu", "(", "self", ".", "dropout", "(", "sent_vs", ")", ")", "\n", "label_scores", "=", "self", ".", "feat2label2", "(", "sent_vs", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "return", "label_scores", ",", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "            ", "return", "label_scores", ",", "select_polarities", ",", "sent_vs", ",", "[", "select_polarities1", ",", "select_polarities2", ",", "\n", "select_polarities3", ",", "select_polarities4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.forward": [[196, 210], ["model_batch_crf_glove.AspectSent.compute_scores", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_batch_crf_glove.AspectSent.loss", "model_batch_crf_glove.AspectSent.cat_layer.reset_binary"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.compute_scores", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.reset_binary"], ["", "", "def", "forward", "(", "self", ",", "sents", ",", "masks", ",", "labels", ",", "lens", ")", ":", "\n", "        ", "'''\n        inputs are list of list for the convenince of top CRF\n        Args:\n        sent: a list of sentences\uff0c batch_size*len*emb_dim\n        mask: a list of mask for each sentence, batch_size*len\n        label: a list labels\n        '''", "\n", "if", "self", ".", "config", ".", "if_reset", ":", "\n", "            ", "self", ".", "cat_layer", ".", "reset_binary", "(", ")", "\n", "", "scores", ",", "s_prob", ",", "sent_vs", ",", "p", "=", "self", ".", "compute_scores", "(", "sents", ",", "masks", ",", "lens", ")", "\n", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "1", ")", "# Batch_size*label_size", "\n", "cls_loss", "=", "self", ".", "loss", "(", "scores", ",", "labels", ")", "\n", "return", "cls_loss", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.predict": [[211, 221], ["model_batch_crf_glove.AspectSent.compute_scores", "sents.size", "model_batch_crf_glove.AspectSent.cat_layer.reset_binary", "scores.unsqueeze().max", "scores.max", "scores.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.AspectSent.compute_scores", "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.None.Layer.SimpleCat.reset_binary"], ["", "def", "predict", "(", "self", ",", "sents", ",", "masks", ",", "sent_lens", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "if_reset", ":", "\n", "            ", "self", ".", "cat_layer", ".", "reset_binary", "(", ")", "\n", "", "scores", ",", "best_seqs", ",", "sent_vs", ",", "p", "=", "self", ".", "compute_scores", "(", "sents", ",", "masks", ",", "sent_lens", ",", "False", ")", "\n", "batch", ",", "length", "=", "sents", ".", "size", "(", ")", "\n", "if", "batch", "==", "1", ":", "\n", "            ", "_", ",", "pred_label", "=", "scores", ".", "unsqueeze", "(", "0", ")", ".", "max", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "pred_label", "=", "scores", ".", "max", "(", "1", ")", "\n", "", "return", "pred_label", ",", "best_seqs", ",", "sent_vs", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.init_ortho": [[11, 15], ["module.parameters", "len", "torch.orthogonal_", "weight_.size"], "function", ["None"], ["def", "init_ortho", "(", "module", ")", ":", "\n", "    ", "for", "weight_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "weight_", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "init", ".", "orthogonal_", "(", "weight_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuuuluuu_Aspect-Sentiment-Classification.models.model_batch_crf_glove.convert_mask_index": [[223, 239], ["torch.nonzero().squeeze().cpu().numpy", "torch.nonzero().squeeze().cpu().numpy", "torch.nonzero().squeeze().cpu().numpy", "target_indice.append", "print", "print", "len", "len", "torch.nonzero().squeeze().cpu", "torch.nonzero().squeeze().cpu", "torch.nonzero().squeeze().cpu", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["", "", "def", "convert_mask_index", "(", "masks", ")", ":", "\n", "    ", "'''\n    Find the indice of none zeros values in masks, namely the target indice\n    '''", "\n", "target_indice", "=", "[", "]", "\n", "max_len", "=", "0", "\n", "try", ":", "\n", "        ", "for", "mask", "in", "masks", ":", "\n", "            ", "indice", "=", "torch", ".", "nonzero", "(", "mask", "==", "1", ")", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "max_len", "<", "len", "(", "indice", ")", ":", "\n", "                ", "max_len", "=", "len", "(", "indice", ")", "\n", "", "target_indice", ".", "append", "(", "indice", ")", "\n", "", "", "except", ":", "\n", "        ", "print", "(", "'Mask Data Error'", ")", "\n", "print", "(", "mask", ")", "\n", "", "return", "target_indice", ",", "max_len", "\n", "", ""]]}