{"home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.__init__": [[6, 39], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ConvTranspose1d", "torch.nn.BatchNorm1d", "torch.nn.ConvTranspose1d", "torch.nn.BatchNorm1d", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "len_f", ",", "len_t", ")", ":", "\n", "        ", "super", "(", "SiameseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_out", "=", "dim", "\n", "self", ".", "cnn_out_channel", "=", "8", "\n", "self", ".", "len_f", "=", "len_f", "\n", "self", ".", "len_t", "=", "len_t", "\n", "\n", "self", ".", "cnn1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "1", ",", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4", ")", ",", "\n", "nn", ".", "Conv1d", "(", "4", ",", "self", ".", "cnn_out_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "cnn_out_channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "# encoder_f", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "cnn_out_channel", "*", "(", "self", ".", "len_f", "-", "4", ")", ",", "self", ".", "dim_out", ")", ",", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "cnn_out_channel", "*", "(", "self", ".", "len_t", "-", "4", ")", ",", "self", ".", "dim_out", ")", ",", ")", "\n", "\n", "# decoder_f", "\n", "self", ".", "cnn3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose1d", "(", "self", ".", "cnn_out_channel", ",", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4", ")", ",", "\n", "nn", ".", "ConvTranspose1d", "(", "4", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_out", ",", "self", ".", "cnn_out_channel", "*", "(", "self", ".", "len_f", "-", "4", ")", ")", ",", ")", "\n", "\n", "self", ".", "fc4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_out", ",", "self", ".", "cnn_out_channel", "*", "(", "self", ".", "len_t", "-", "4", ")", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_f_encoder": [[40, 45], ["nets.SiameseNetwork.cnn1", "nets.SiameseNetwork.view", "nets.SiameseNetwork.fc1", "nets.SiameseNetwork.size"], "methods", ["None"], ["", "def", "forward_f_encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "cnn1", "(", "x", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "fc1", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_t_encoder": [[46, 51], ["nets.SiameseNetwork.cnn1", "nets.SiameseNetwork.view", "nets.SiameseNetwork.fc2", "nets.SiameseNetwork.size"], "methods", ["None"], ["", "def", "forward_t_encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "cnn1", "(", "x", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "fc2", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_f_decoder": [[52, 57], ["nets.SiameseNetwork.fc3", "nets.SiameseNetwork.view", "nets.SiameseNetwork.cnn3"], "methods", ["None"], ["", "def", "forward_f_decoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "fc3", "(", "x", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "shape", "[", "0", "]", ",", "self", ".", "cnn_out_channel", ",", "(", "self", ".", "len_f", "-", "4", ")", ")", "\n", "output", "=", "self", ".", "cnn3", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_t_decoder": [[58, 63], ["nets.SiameseNetwork.fc4", "nets.SiameseNetwork.view", "nets.SiameseNetwork.cnn3"], "methods", ["None"], ["", "def", "forward_t_decoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "fc4", "(", "x", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "shape", "[", "0", "]", ",", "self", ".", "cnn_out_channel", ",", "(", "self", ".", "len_t", "-", "4", ")", ")", "\n", "output", "=", "self", ".", "cnn3", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward": [[64, 70], ["nets.SiameseNetwork.forward_f_encoder", "nets.SiameseNetwork.forward_t_encoder", "nets.SiameseNetwork.forward_f_decoder", "nets.SiameseNetwork.forward_t_decoder"], "methods", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_f_encoder", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_t_encoder", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_f_decoder", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.SiameseNetwork.forward_t_decoder"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "output_f", "=", "self", ".", "forward_f_encoder", "(", "input1", ")", "\n", "output_t", "=", "self", ".", "forward_t_encoder", "(", "input2", ")", "\n", "recon_f", "=", "self", ".", "forward_f_decoder", "(", "output_f", ")", "\n", "recon_t", "=", "self", ".", "forward_t_decoder", "(", "output_t", ")", "\n", "return", "output_f", ",", "output_t", ",", "recon_f", ",", "recon_t", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.Classifier.__init__": [[73, 80], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_out", "=", "56", "\n", "self", ".", "cl", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_out", "*", "2", ",", "self", ".", "dim_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_out", ",", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.Classifier.forward": [[82, 85], ["nets.Classifier.cl"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", "=", "self", ".", "cl", "(", "x", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.NETA.__init__": [[88, 97], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "len_f", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NETA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "8", "*", "(", "len_f", "-", "2", "*", "3", "+", "2", ")", ",", "dim", ")", ")", "\n", "self", ".", "cnn1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "1", ",", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4", ")", ",", "\n", "nn", ".", "Conv1d", "(", "4", ",", "8", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.NETA.forward": [[99, 104], ["nets.NETA.cnn1", "h_a.view.view.view", "nets.NETA.fc1", "h_a.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h_a", "=", "self", ".", "cnn1", "(", "x", ")", "\n", "h_a", "=", "h_a", ".", "view", "(", "h_a", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "v_a", "=", "self", ".", "fc1", "(", "h_a", ")", "\n", "return", "v_a", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.NETB.__init__": [[107, 116], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "len_t", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NETB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "8", "*", "(", "len_t", "-", "2", "*", "3", "+", "2", ")", ",", "dim", ")", ")", "\n", "self", ".", "cnn1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "1", ",", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4", ")", ",", "\n", "nn", ".", "Conv1d", "(", "4", ",", "8", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.nets.NETB.forward": [[118, 123], ["nets.NETB.cnn1", "h_b.view.view.view", "nets.NETB.fc2", "h_b.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h_b", "=", "self", ".", "cnn1", "(", "x", ")", "\n", "h_b", "=", "h_b", ".", "view", "(", "h_b", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "v_b", "=", "self", ".", "fc2", "(", "h_b", ")", "\n", "return", "v_b", "", "", "", ""]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.feature_extract.read_edge_pair": [[8, 17], ["set", "open", "csv.reader", "len", "tuple", "set.add", "map", "data.pop"], "function", ["None"], ["def", "read_edge_pair", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "df", ":", "\n", "        ", "d", "=", "csv", ".", "reader", "(", "df", ",", "delimiter", "=", "' '", ")", "\n", "data", "=", "[", "row", "for", "row", "in", "d", "]", "\n", "", "edge_pair", "=", "set", "(", ")", "\n", "while", "len", "(", "data", ")", ">", "0", ":", "\n", "        ", "row", "=", "tuple", "(", "map", "(", "eval", ",", "data", ".", "pop", "(", "0", ")", ")", ")", "\n", "edge_pair", ".", "add", "(", "row", ")", "\n", "", "return", "edge_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.feature_extract.feature_ex": [[19, 35], ["sorted", "len", "tqdm.tqdm", "list", "networkx.pagerank", "sorted", "G.nodes", "nx.pagerank.items", "numpy.array", "numpy.concatenate", "enumerate", "numpy.array"], "function", ["None"], ["", "def", "feature_ex", "(", "G", ",", "prob", ")", ":", "\n", "    ", "nodes", "=", "sorted", "(", "list", "(", "G", ".", "nodes", "(", ")", ")", ")", "\n", "l", "=", "len", "(", "nodes", ")", "\n", "PageRank_array", "=", "None", "\n", "for", "n", "in", "tqdm", "(", "nodes", ")", ":", "\n", "        ", "nl", "=", "[", "0", "]", "*", "l", "\n", "nl", "[", "n", "]", "=", "prob", "\n", "personal", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "nl", ")", "}", "\n", "dic", "=", "nx", ".", "pagerank", "(", "G", ",", "personalization", "=", "personal", ")", "\n", "kv", "=", "sorted", "(", "dic", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "pr_lis", "=", "[", "[", "v", "[", "1", "]", "for", "v", "in", "kv", "]", "]", "\n", "if", "PageRank_array", "is", "None", ":", "\n", "            ", "PageRank_array", "=", "np", ".", "array", "(", "pr_lis", ")", "\n", "", "else", ":", "\n", "            ", "PageRank_array", "=", "np", ".", "concatenate", "(", "(", "PageRank_array", ",", "np", ".", "array", "(", "pr_lis", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "PageRank_array", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.feature_extract.extract": [[37, 46], ["feature_extract.read_edge_pair", "networkx.Graph", "nx.Graph.add_edges_from", "feature_extract.feature_ex", "numpy.save"], "function", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.feature_extract.read_edge_pair", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.feature_extract.feature_ex"], ["", "def", "extract", "(", "paras", ")", ":", "\n", "    ", "dataset", "=", "paras", ".", "data_path", "\n", "prob", "=", "paras", ".", "restart_probability", "\n", "save_file", "=", "paras", ".", "save_file", "\n", "f_sample_sample_interop", "=", "read_edge_pair", "(", "dataset", ")", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "G", ".", "add_edges_from", "(", "f_sample_sample_interop", ")", "\n", "PPR_feature_G", "=", "feature_ex", "(", "G", ",", "prob", ")", "\n", "np", ".", "save", "(", "save_file", ",", "PPR_feature_G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.model.aup": [[14, 198], ["torch.device", "numpy.load", "numpy.load", "torch.Tensor", "torch.Tensor", "print", "list", "list", "list", "numpy.random.seed", "numpy.random.choice", "list", "nets.SiameseNetwork().to", "util.init_weights", "nets.NETA().to", "nets.NETB().to", "a_array_tensor.to.to", "b_array_tensor.to.to", "torch.nn.MSELoss", "torch.nn.CosineEmbeddingLoss", "torch.optim.Adadelta", "torch.optim.lr_scheduler.StepLR", "len", "torch.empty().to", "numpy.random.seed", "torch.unsqueeze", "torch.unsqueeze", "torch.Tensor().to", "torch.Tensor().to", "util.SiameseNetworkDataset", "torch.utils.data.DataLoader", "range", "range", "range", "range", "int", "SiameseNetwork().to.parameters", "input_a.append", "input_b.append", "torch.ones().to", "torch.cat", "list", "list", "list", "list", "torch.zeros().to", "torch.cat", "SiameseNetwork().to.train", "torch.optim.lr_scheduler.StepLR.step", "NETA().to.state_dict", "NETB().to.state_dict", "SiameseNetwork().to.cpu", "SiameseNetwork().to.state_dict", "neta.state_dict.update", "netb.state_dict.update", "NETA().to.load_state_dict", "NETB().to.load_state_dict", "NETA().to.eval", "NETB().to.eval", "NETA().to.", "NETB().to.", "util.tes_vec", "util.tes_vec", "print", "SiameseNetwork().to.to", "nets.Classifier().to", "torch.nn.CrossEntropyLoss", "hidden_a.detach.cpu().numpy", "hidden_b.detach.cpu().numpy", "torch.Tensor().to", "torch.Tensor().to", "util.SiameseNetworkDataset", "torch.utils.data.DataLoader", "torch.optim.Adadelta", "torch.optim.lr_scheduler.StepLR", "range", "set", "set", "nets.SiameseNetwork", "nets.NETA", "nets.NETB", "torch.empty", "numpy.random.choice", "numpy.random.choice", "torch.Tensor", "torch.Tensor", "torch.squeeze", "torch.unsqueeze().to", "torch.unsqueeze().to", "SiameseNetwork().to.", "optim.Adadelta.zero_grad", "loss.backward", "optim.Adadelta.step", "loss.item", "loss_rec_a_batch.item", "loss_rec_b_batch.item", "loss_reg_batch.item", "loss_anchor_batch.item", "torch.unsqueeze", "torch.unsqueeze", "neta.detach", "netb.detach", "Classifier().to.parameters", "Classifier().to.train", "torch.optim.lr_scheduler.StepLR.step", "Classifier().to.eval", "torch.Tensor().to", "torch.Tensor().to", "util.val_classifier", "util.val_classifier", "print", "torch.ones", "set", "set", "torch.zeros", "nn.MSELoss.", "nn.MSELoss.", "nn.CosineEmbeddingLoss.", "model.state_dict.items", "model.state_dict.items", "nets.Classifier", "hidden_a.detach.cpu", "hidden_b.detach.cpu", "torch.Tensor", "torch.Tensor", "torch.cat", "Classifier().to.", "torch.squeeze", "nn.CrossEntropyLoss.", "optim.Adadelta.zero_grad", "cel.backward", "optim.Adadelta.step", "cel.item", "torch.unsqueeze", "torch.unsqueeze", "h_a.norm", "h_b.norm", "torch.unsqueeze().to.to", "torch.unsqueeze().to.to", "torch.squeeze.long", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.init_weights", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.tes_vec", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.tes_vec", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.val_classifier", "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.val_classifier"], ["def", "aup", "(", "paras", ")", ":", "\n", "    ", "total_anchor", "=", "paras", ".", "total_anchor", "\n", "train_ratio", "=", "paras", ".", "train_ratio", "\n", "load_path_a", "=", "paras", ".", "feature_A", "\n", "load_path_b", "=", "paras", ".", "feature_B", "\n", "cuda", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "(", "paras", ".", "gpu_id", ")", ")", "\n", "dim", "=", "paras", ".", "represent_dim", "\n", "lr", "=", "paras", ".", "lr", "\n", "lr_step", "=", "paras", ".", "lr_step", "\n", "lr_prob", "=", "paras", ".", "lr_prob", "\n", "N", "=", "paras", ".", "N", "\n", "stop_P", "=", "paras", ".", "stop_P", "\n", "is_classification", "=", "paras", ".", "is_classification", "\n", "represent_epoch", "=", "paras", ".", "represent_epoch", "\n", "classification_epoch", "=", "paras", ".", "classification_epoch", "\n", "a_array_load", "=", "np", ".", "load", "(", "load_path_a", ")", "\n", "b_array_load", "=", "np", ".", "load", "(", "load_path_b", ")", "\n", "a_array_tensor", "=", "torch", ".", "Tensor", "(", "a_array_load", ")", "\n", "b_array_tensor", "=", "torch", ".", "Tensor", "(", "b_array_load", ")", "\n", "len_f", "=", "a_array_load", ".", "shape", "[", "0", "]", "\n", "len_t", "=", "b_array_load", ".", "shape", "[", "0", "]", "\n", "print", "(", "len_f", ",", "len_t", ")", "\n", "node_f", "=", "list", "(", "range", "(", "0", ",", "len_f", ")", ")", "\n", "node_t", "=", "list", "(", "range", "(", "0", ",", "len_t", ")", ")", "\n", "anchor_all", "=", "list", "(", "range", "(", "0", ",", "total_anchor", ")", ")", "\n", "rd", ".", "seed", "(", "80", ")", "\n", "anchor_train", "=", "rd", ".", "choice", "(", "anchor_all", ",", "int", "(", "train_ratio", "*", "total_anchor", ")", ")", "\n", "anchor_test", "=", "list", "(", "set", "(", "anchor_all", ")", "-", "set", "(", "anchor_train", ")", ")", "\n", "model", "=", "SiameseNetwork", "(", "dim", ",", "len_f", ",", "len_t", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "init_weights", "(", "model", ")", "\n", "neta", "=", "NETA", "(", "len_f", ",", "dim", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "netb", "=", "NETB", "(", "len_t", ",", "dim", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "a_array_tensor", "=", "a_array_tensor", ".", "to", "(", "device", "=", "cuda", ")", "\n", "b_array_tensor", "=", "b_array_tensor", ".", "to", "(", "device", "=", "cuda", ")", "\n", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "cos", "=", "nn", ".", "CosineEmbeddingLoss", "(", "margin", "=", "0", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0.001", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "lr_step", ",", "gamma", "=", "lr_prob", ")", "\n", "triplet_neg", "=", "1", "\n", "anchor_flag", "=", "1", "\n", "anchor_train_len", "=", "len", "(", "anchor_train", ")", "\n", "anchor_train_a_list", "=", "anchor_train", "\n", "anchor_train_b_list", "=", "anchor_train", "\n", "input_a", "=", "[", "]", "\n", "input_b", "=", "[", "]", "\n", "classifier_target", "=", "torch", ".", "empty", "(", "0", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "np", ".", "random", ".", "seed", "(", "5", ")", "\n", "index", "=", "0", "\n", "while", "index", "<", "anchor_train_len", ":", "\n", "        ", "a", "=", "anchor_train_a_list", "[", "index", "]", "\n", "b", "=", "anchor_train_b_list", "[", "index", "]", "\n", "input_a", ".", "append", "(", "a", ")", "\n", "input_b", ".", "append", "(", "b", ")", "\n", "an_target", "=", "torch", ".", "ones", "(", "anchor_flag", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "classifier_target", "=", "torch", ".", "cat", "(", "(", "classifier_target", ",", "an_target", ")", ",", "dim", "=", "0", ")", "\n", "an_negs_index", "=", "list", "(", "set", "(", "node_t", ")", "-", "{", "b", "}", ")", "\n", "an_negs_index_sampled", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "an_negs_index", ",", "triplet_neg", ",", "replace", "=", "False", ")", ")", "\n", "an_as", "=", "triplet_neg", "*", "[", "a", "]", "\n", "input_a", "+=", "an_as", "\n", "input_b", "+=", "an_negs_index_sampled", "\n", "\n", "an_negs_index1", "=", "list", "(", "set", "(", "node_f", ")", "-", "{", "a", "}", ")", "\n", "an_negs_index_sampled1", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "an_negs_index1", ",", "triplet_neg", ",", "replace", "=", "False", ")", ")", "\n", "an_as1", "=", "triplet_neg", "*", "[", "b", "]", "\n", "input_b", "+=", "an_as1", "\n", "input_a", "+=", "an_negs_index_sampled1", "\n", "\n", "un_an_target", "=", "torch", ".", "zeros", "(", "triplet_neg", "*", "2", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "classifier_target", "=", "torch", ".", "cat", "(", "(", "classifier_target", ",", "un_an_target", ")", ",", "dim", "=", "0", ")", "\n", "index", "+=", "1", "\n", "\n", "", "cosine_target", "=", "torch", ".", "unsqueeze", "(", "2", "*", "classifier_target", "-", "1", ",", "dim", "=", "1", ")", "\n", "classifier_target", "=", "torch", ".", "unsqueeze", "(", "classifier_target", ",", "dim", "=", "1", ")", "\n", "\n", "ina", "=", "a_array_load", "[", "input_a", "]", "\n", "inb", "=", "b_array_load", "[", "input_b", "]", "\n", "ina", "=", "torch", ".", "Tensor", "(", "ina", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "inb", "=", "torch", ".", "Tensor", "(", "inb", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "\n", "tensor_dataset", "=", "SiameseNetworkDataset", "(", "ina", ",", "inb", ",", "classifier_target", ",", "cosine_target", ")", "\n", "data_loader", "=", "DataLoader", "(", "tensor_dataset", ",", "batch_size", "=", "56", ",", "shuffle", "=", "False", ")", "\n", "hidden_a_for_c", "=", "None", "\n", "hidden_b_for_c", "=", "None", "\n", "for", "epoch", "in", "range", "(", "represent_epoch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "train_loss", "=", "0", "\n", "loss_rec_a", "=", "0", "\n", "loss_rec_b", "=", "0", "\n", "loss_reg", "=", "0", "\n", "loss_anchor", "=", "0", "\n", "for", "data_batch", "in", "data_loader", ":", "\n", "            ", "in_a", ",", "in_b", ",", "c", ",", "cosine", "=", "data_batch", "\n", "cosine", "=", "torch", ".", "squeeze", "(", "cosine", ",", "dim", "=", "1", ")", "\n", "in_a", "=", "torch", ".", "unsqueeze", "(", "in_a", ",", "dim", "=", "1", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "in_b", "=", "torch", ".", "unsqueeze", "(", "in_b", ",", "dim", "=", "1", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "h_a", ",", "h_b", ",", "re_a", ",", "re_b", "=", "model", "(", "in_a", ",", "in_b", ")", "\n", "loss_rec_a_batch", "=", "100", "*", "mse", "(", "re_a", ",", "in_a", ")", "\n", "loss_rec_b_batch", "=", "100", "*", "mse", "(", "re_b", ",", "in_b", ")", "\n", "loss_anchor_batch", "=", "1", "*", "cos", "(", "h_a", ",", "h_b", ",", "cosine", ")", "\n", "loss_reg_batch", "=", "0.001", "*", "(", "h_a", ".", "norm", "(", ")", "+", "h_b", ".", "norm", "(", ")", ")", "\n", "loss", "=", "loss_reg_batch", "+", "loss_rec_a_batch", "+", "loss_rec_b_batch", "+", "loss_anchor_batch", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss_rec_a", "+=", "loss_rec_a_batch", ".", "item", "(", ")", "\n", "loss_rec_b", "+=", "loss_rec_b_batch", ".", "item", "(", ")", "\n", "loss_reg", "+=", "loss_reg_batch", ".", "item", "(", ")", "\n", "loss_anchor", "+=", "loss_anchor_batch", ".", "item", "(", ")", "\n", "\n", "", "neta_dict", "=", "neta", ".", "state_dict", "(", ")", "\n", "netb_dict", "=", "netb", ".", "state_dict", "(", ")", "\n", "model", ".", "cpu", "(", ")", "\n", "trainmodel_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "trainmodel_dict_a", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "trainmodel_dict", ".", "items", "(", ")", "if", "k", "in", "neta_dict", "}", "\n", "trainmodel_dict_b", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "trainmodel_dict", ".", "items", "(", ")", "if", "k", "in", "netb_dict", "}", "\n", "neta_dict", ".", "update", "(", "trainmodel_dict_a", ")", "\n", "netb_dict", ".", "update", "(", "trainmodel_dict_b", ")", "\n", "neta", ".", "load_state_dict", "(", "neta_dict", ")", "\n", "netb", ".", "load_state_dict", "(", "netb_dict", ")", "\n", "\n", "neta", ".", "eval", "(", ")", "\n", "netb", ".", "eval", "(", ")", "\n", "hidden_a", "=", "neta", "(", "torch", ".", "unsqueeze", "(", "a_array_tensor", ",", "dim", "=", "1", ")", ")", "\n", "hidden_b", "=", "netb", "(", "torch", ".", "unsqueeze", "(", "b_array_tensor", ",", "dim", "=", "1", ")", ")", "\n", "\n", "PatN_v", ",", "MatN_v", "=", "tes_vec", "(", "hidden_a", ",", "hidden_b", ",", "anchor_train", ",", "anchor_train", ",", "N", ",", "node_t", ")", "\n", "PatN_t", ",", "MatN_t", "=", "tes_vec", "(", "hidden_a", ",", "hidden_b", ",", "anchor_train", ",", "anchor_test", ",", "N", ",", "node_t", ")", "\n", "print", "(", "'epoch:%d, loss:%.3f, rec_a:%.3f, rec_b:%.3f, anchor:%.3f, reg:%.3f, '", "\n", "'at%d, Val(P=%.3f, M=%.3f), Tes(P=%.3f, M=%.3f)'", "%", "\n", "(", "epoch", ",", "train_loss", ",", "loss_rec_a", ",", "loss_rec_b", ",", "loss_anchor", ",", "loss_reg", ",", "N", ",", "PatN_v", ",", "MatN_v", ",", "PatN_t", ",", "MatN_t", ")", ")", "\n", "\n", "if", "is_classification", "and", "PatN_t", ">", "stop_P", ":", "\n", "            ", "hidden_a_for_c", "=", "hidden_a", ".", "detach", "(", ")", "\n", "hidden_b_for_c", "=", "hidden_b", ".", "detach", "(", ")", "\n", "break", "\n", "\n", "", "model", ".", "to", "(", "device", "=", "cuda", ")", "\n", "\n", "", "if", "is_classification", ":", "\n", "        ", "classifier", "=", "Classifier", "(", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "cel", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "hidden_a_for_c", "=", "hidden_a_for_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "hidden_b_for_c", "=", "hidden_b_for_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ina_for_c", "=", "hidden_a_for_c", "[", "input_a", "]", "\n", "inb_for_c", "=", "hidden_b_for_c", "[", "input_b", "]", "\n", "ina_for_c", "=", "torch", ".", "Tensor", "(", "ina_for_c", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "inb_for_c", "=", "torch", ".", "Tensor", "(", "inb_for_c", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "\n", "tensor_dataset_for_c", "=", "SiameseNetworkDataset", "(", "ina_for_c", ",", "inb_for_c", ",", "classifier_target", ",", "cosine_target", ")", "\n", "data_loader_for_c", "=", "DataLoader", "(", "tensor_dataset_for_c", ",", "batch_size", "=", "dim", ",", "shuffle", "=", "False", ")", "\n", "optimizer_for_c", "=", "optim", ".", "Adadelta", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0.0001", ")", "\n", "scheduler_c", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer_for_c", ",", "step_size", "=", "lr_step", ",", "gamma", "=", "lr_prob", ")", "\n", "# classifier", "\n", "for", "epoch", "in", "range", "(", "classification_epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "scheduler_c", ".", "step", "(", ")", "\n", "loss_c", "=", "0", "\n", "for", "data_batch", "in", "data_loader_for_c", ":", "\n", "                ", "in_a", ",", "in_b", ",", "c", ",", "cosine", "=", "data_batch", "\n", "in_a", ",", "in_b", "=", "in_a", ".", "to", "(", "device", "=", "cuda", ")", ",", "in_b", ".", "to", "(", "device", "=", "cuda", ")", "\n", "in_class", "=", "torch", ".", "cat", "(", "(", "in_a", ",", "in_b", ")", ",", "dim", "=", "1", ")", "\n", "class_out", "=", "classifier", "(", "in_class", ")", "\n", "c", "=", "torch", ".", "squeeze", "(", "c", ",", "dim", "=", "1", ")", "\n", "loss_classifier", "=", "cel", "(", "class_out", ",", "c", ".", "long", "(", ")", ")", "\n", "\n", "optimizer_for_c", ".", "zero_grad", "(", ")", "\n", "loss_classifier", ".", "backward", "(", ")", "\n", "optimizer_for_c", ".", "step", "(", ")", "\n", "\n", "loss_c", "+=", "loss_classifier", ".", "item", "(", ")", "\n", "", "classifier", ".", "eval", "(", ")", "\n", "hidden_a_for_c1", "=", "torch", ".", "Tensor", "(", "hidden_a_for_c", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "hidden_b_for_c1", "=", "torch", ".", "Tensor", "(", "hidden_b_for_c", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "PatN_v", ",", "MatN_v", "=", "val_classifier", "(", "hidden_a_for_c1", ",", "hidden_b_for_c1", ",", "anchor_train", ",", "anchor_train", ",", "paras", ",", "\n", "node_t", ",", "classifier", ")", "\n", "PatN_t", ",", "MatN_t", "=", "val_classifier", "(", "hidden_a_for_c1", ",", "hidden_b_for_c1", ",", "anchor_train", ",", "anchor_test", ",", "paras", ",", "\n", "node_t", ",", "classifier", ")", "\n", "print", "(", "'epoch %d, loss %.3f, at%d, Val(P=%.3f, M=%.3f), Tes(P=%.3f, M=%.3f)'", "%", "\n", "(", "epoch", ",", "loss_c", ",", "N", ",", "PatN_v", ",", "MatN_v", ",", "PatN_t", ",", "MatN_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__init__": [[9, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "a", ",", "b", ",", "c", ",", "co", ")", ":", "\n", "        ", "self", ".", "a", "=", "a", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "co", "=", "co", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__getitem__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "a", "[", "index", "]", ",", "self", ".", "b", "[", "index", "]", ",", "self", ".", "c", "[", "index", "]", ",", "self", ".", "co", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.SiameseNetworkDataset.__len__": [[18, 20], ["util.SiameseNetworkDataset.a.size"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "a", ".", "size", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.init_weights": [[22, 45], ["net.named_parameters", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "params.data.normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "name.find", "params.data.fill_", "params.data.fill_"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ")", ":", "\n", "    ", "con_w1", "=", "[", "'cnn1.0.weight'", ",", "'cnn3.2.weight'", "]", "\n", "con_w2", "=", "[", "'cnn3.0.weight'", ",", "'cnn1.2.weight'", "]", "\n", "norm_w", "=", "[", "'cnn1.1.weight'", ",", "'cnn1.3.weight'", ",", "'cnn3.1.weight'", ",", "'cnn3.3.weight'", "]", "\n", "fc14_w", "=", "[", "'fc1.0.weight'", ",", "'fc4.0.weight'", "]", "\n", "fc23_w", "=", "[", "'fc2.0.weight'", ",", "'fc3.0.weight'", "]", "\n", "fc_bias", "=", "[", "'fc1.0.bias'", ",", "'fc2.0.bias'", ",", "'fc3.0.bias'", ",", "'fc4.0.bias'", "]", "\n", "for", "name", ",", "params", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", "in", "con_w1", ":", "\n", "            ", "init", ".", "xavier_normal_", "(", "params", ")", "\n", "", "elif", "name", "in", "con_w2", ":", "\n", "            ", "init", ".", "xavier_normal_", "(", "params", ")", "\n", "", "elif", "name", "in", "norm_w", ":", "\n", "            ", "params", ".", "data", ".", "normal_", "(", ")", "\n", "", "elif", "name", "in", "fc14_w", ":", "\n", "            ", "init", ".", "xavier_normal_", "(", "params", ")", "\n", "", "elif", "name", "in", "fc23_w", ":", "\n", "            ", "init", ".", "xavier_normal_", "(", "params", ")", "\n", "", "elif", "name", ".", "find", "(", "'bias'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "name", "in", "fc_bias", ":", "\n", "                ", "params", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "params", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.calculate_metric": [[47, 54], ["None"], "function", ["None"], ["", "", "", "", "def", "calculate_metric", "(", "num_large", ",", "N", ")", ":", "\n", "    ", "if", "num_large", ">=", "N", ":", "\n", "        ", "return", "0", ",", "0", "\n", "", "elif", "num_large", "==", "0", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "else", ":", "\n", "        ", "return", "1", ",", "(", "N", "-", "num_large", ")", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.tes_vec": [[57, 78], ["len", "list", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cosine_similarity().item", "torch.cosine_similarity", "int", "util.calculate_metric", "set", "set", "larger_than_anchor.sum().item", "torch.cosine_similarity", "larger_than_anchor.sum"], "function", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.calculate_metric"], ["", "", "def", "tes_vec", "(", "h_a", ",", "h_b", ",", "anchor_train", ",", "anchor_test", ",", "N", ",", "n_b", ")", ":", "\n", "    ", "lens", "=", "len", "(", "anchor_test", ")", "\n", "anchor_a_list", "=", "anchor_test", "\n", "anchor_b_list", "=", "anchor_test", "\n", "known_b_list", "=", "anchor_train", "\n", "test_user_b", "=", "list", "(", "set", "(", "n_b", ")", "-", "set", "(", "known_b_list", ")", ")", "\n", "vec_test_b", "=", "h_b", "[", "test_user_b", "]", "\n", "index", ",", "PatN", ",", "MatN", "=", "0", ",", "0.0", ",", "0.0", "\n", "while", "index", "<", "lens", ":", "\n", "        ", "an_a", "=", "torch", ".", "unsqueeze", "(", "h_a", "[", "anchor_a_list", "[", "index", "]", "]", ",", "dim", "=", "0", ")", "\n", "an_b", "=", "torch", ".", "unsqueeze", "(", "h_b", "[", "anchor_b_list", "[", "index", "]", "]", ",", "dim", "=", "0", ")", "\n", "an_sim", "=", "F", ".", "cosine_similarity", "(", "an_a", ",", "an_b", ")", ".", "item", "(", ")", "\n", "un_an_sim", "=", "F", ".", "cosine_similarity", "(", "an_a", ",", "vec_test_b", ")", "\n", "larger_than_anchor", "=", "un_an_sim", ">=", "an_sim", "\n", "num_large_than_anchor", "=", "int", "(", "larger_than_anchor", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "patN", ",", "matN", "=", "calculate_metric", "(", "num_large_than_anchor", ",", "N", ")", "\n", "PatN", "+=", "patN", "\n", "MatN", "+=", "matN", "\n", "index", "+=", "1", "\n", "", "PatN_t", ",", "MatN_t", "=", "PatN", "/", "lens", ",", "MatN", "/", "lens", "\n", "return", "PatN_t", ",", "MatN_t", "\n", "\n"]], "home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.val_classifier": [[81, 115], ["classifier_net.eval", "len", "list", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "classifier_net", "torch.softmax", "[].item", "torch.ones().to", "torch.ones().to", "torch.cat", "torch.cat", "classifier_net", "torch.softmax", "int", "util.calculate_metric", "set", "set", "F.softmax.detach", "larger_than_anchor.sum().item", "torch.ones", "torch.ones", "F.softmax.detach", "len", "larger_than_anchor.sum"], "function", ["home.repos.pwc.inspect_result.chengaf_DALAUP.None.util.calculate_metric"], ["", "def", "val_classifier", "(", "h_a", ",", "h_b", ",", "anchor_train", ",", "anchor_test", ",", "paras", ",", "n_b", ",", "classifier_net", ")", ":", "\n", "    ", "cuda", "=", "paras", ".", "gpu_id", "\n", "N", "=", "paras", ".", "N", "\n", "classifier_net", ".", "eval", "(", ")", "\n", "lens", "=", "len", "(", "anchor_test", ")", "\n", "anchor_a_list", "=", "anchor_test", "\n", "anchor_b_list", "=", "anchor_test", "\n", "known_b_list", "=", "anchor_train", "\n", "test_user_b", "=", "list", "(", "set", "(", "n_b", ")", "-", "set", "(", "known_b_list", ")", ")", "\n", "vec_test_b", "=", "h_b", "[", "test_user_b", "]", "\n", "index", ",", "PatN", ",", "MatN", "=", "0", ",", "0.0", ",", "0.0", "\n", "while", "index", "<", "lens", ":", "\n", "        ", "an_a1", "=", "anchor_a_list", "[", "index", "]", "\n", "an_a", "=", "torch", ".", "unsqueeze", "(", "h_a", "[", "an_a1", "]", ",", "dim", "=", "0", ")", "\n", "an_b1", "=", "anchor_b_list", "[", "index", "]", "\n", "an_b", "=", "torch", ".", "unsqueeze", "(", "h_b", "[", "an_b1", "]", ",", "dim", "=", "0", ")", "\n", "an_pair_vec", "=", "torch", ".", "cat", "(", "(", "an_a", ",", "an_b", ")", ",", "dim", "=", "1", ")", "\n", "an_pair_out", "=", "classifier_net", "(", "an_pair_vec", ")", "\n", "an_pair_out", "=", "F", ".", "softmax", "(", "an_pair_out", ",", "dim", "=", "1", ")", "\n", "an_pair_pro", "=", "an_pair_out", ".", "detach", "(", ")", "[", ":", ",", "1", "]", ".", "item", "(", ")", "\n", "tmp", "=", "torch", ".", "ones", "(", "len", "(", "test_user_b", ")", ",", "1", ")", ".", "to", "(", "device", "=", "cuda", ")", "\n", "an_ass", "=", "an_a", "*", "tmp", "\n", "un_anchor_pairs_vec", "=", "torch", ".", "cat", "(", "(", "an_ass", ",", "vec_test_b", ")", ",", "dim", "=", "1", ")", "\n", "un_anchor_pairs_out", "=", "classifier_net", "(", "un_anchor_pairs_vec", ")", "\n", "un_anchor_pairs_out", "=", "F", ".", "softmax", "(", "un_anchor_pairs_out", ",", "dim", "=", "1", ")", "\n", "un_an_pair_pro", "=", "un_anchor_pairs_out", ".", "detach", "(", ")", "[", ":", ",", "1", "]", "\n", "larger_than_anchor", "=", "an_pair_pro", "<=", "un_an_pair_pro", "\n", "num_large_than_anchor", "=", "int", "(", "larger_than_anchor", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "patN", ",", "matN", "=", "calculate_metric", "(", "num_large_than_anchor", ",", "N", ")", "\n", "PatN", "+=", "patN", "\n", "MatN", "+=", "matN", "\n", "index", "+=", "1", "\n", "", "PatN_t", ",", "MatN_t", "=", "PatN", "/", "lens", ",", "MatN", "/", "lens", "\n", "return", "PatN_t", ",", "MatN_t", "\n", "", ""]]}