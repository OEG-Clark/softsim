{"home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.SSIM.__init__": [[40, 46], ["super().__init__", "ssim_module.create_window"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.SSIM.forward": [[47, 64], ["img1.size", "ssim_module._ssim", "ssim_module.create_window", "window.cuda.cuda.type_as", "ssim_module.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module._ssim", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "ssim_module.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.ssim": [[65, 74], ["img1.size", "ssim_module.create_window", "window.cuda.type_as", "ssim_module._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module.create_window", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.ssim_module._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.BasicBlock.__init__": [[32, 41], ["torch.Module.__init__", "resnetM.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnetM.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv3x3", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.BasicBlock.forward": [[42, 59], ["resnetM.BasicBlock.conv1", "resnetM.BasicBlock.bn1", "resnetM.BasicBlock.relu", "resnetM.BasicBlock.conv2", "resnetM.BasicBlock.bn2", "resnetM.BasicBlock.relu", "resnetM.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.Bottleneck.__init__": [[64, 75], ["torch.Module.__init__", "resnetM.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnetM.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnetM.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv1x1", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv3x3", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.Bottleneck.forward": [[76, 97], ["resnetM.Bottleneck.conv1", "resnetM.Bottleneck.bn1", "resnetM.Bottleneck.relu", "resnetM.Bottleneck.conv2", "resnetM.Bottleneck.bn2", "resnetM.Bottleneck.relu", "resnetM.Bottleneck.conv3", "resnetM.Bottleneck.bn3", "resnetM.Bottleneck.relu", "resnetM.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet.__init__": [[101, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnetM.ResNet._make_layer", "resnetM.ResNet._make_layer", "resnetM.ResNet._make_layer", "resnetM.ResNet._make_layer", "resnetM.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet._make_layer", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet._make_layer", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet._make_layer", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet._make_layer": [[123, 138], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnetM.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.ResNet.forward": [[139, 157], ["resnetM.ResNet.conv1", "resnetM.ResNet.bn1", "resnetM.ResNet.relu", "endpoint.append", "resnetM.ResNet.maxpool", "resnetM.ResNet.layer1", "endpoint.append", "resnetM.ResNet.layer2", "endpoint.append", "resnetM.ResNet.layer3", "endpoint.append", "resnetM.ResNet.layer4", "endpoint.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "endpoint", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "endpoint", ".", "append", "(", "x", ")", "# output here", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "endpoint", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "endpoint", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "endpoint", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "endpoint", ".", "append", "(", "x", ")", "\n", "\n", "return", "endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.resnet18": [[159, 177], ["resnetM.ResNet", "ResNet.state_dict", "torch.load_url", "model_zoo.load_url.items", "ResNet.load_state_dict", "print", "model.state_dict.keys"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "state_ckp", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "cnt", "=", "0", "\n", "for", "k", ",", "val", "in", "state_ckp", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state", ".", "keys", "(", ")", ":", "\n", "                ", "state", "[", "k", "]", "=", "val", "\n", "cnt", "+=", "1", "\n", "", "", "model", ".", "load_state_dict", "(", "state", ")", "\n", "print", "(", "\"RestNet checkpoint loaded: %d\"", "%", "cnt", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.resnet34": [[179, 197], ["resnetM.ResNet", "ResNet.state_dict", "torch.load_url", "model_zoo.load_url.items", "ResNet.load_state_dict", "print", "model.state_dict.keys"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "state_ckp", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", "\n", "cnt", "=", "0", "\n", "for", "k", ",", "val", "in", "state_ckp", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state", ".", "keys", "(", ")", ":", "\n", "                ", "state", "[", "k", "]", "=", "val", "\n", "cnt", "+=", "1", "\n", "", "", "model", ".", "load_state_dict", "(", "state", ")", "\n", "print", "(", "\"RestNet checkpoint loaded: %d\"", "%", "cnt", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.resnet50": [[199, 209], ["resnetM.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.resnet101": [[211, 221], ["resnetM.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.resnetM.resnet152": [[223, 233], ["resnetM.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.PCLNet.__init__": [[36, 118], ["torch.Module.__init__", "CLSTM.ConvLSTM().cuda", "CLSTM.ConvLSTM().cuda", "CLSTM.ConvLSTM().cuda", "CLSTM.ConvLSTM().cuda", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "torch.MaxPool2d", "torch.MaxPool2d", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "torch.MaxPool2d", "torch.MaxPool2d", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "torch.MaxPool2d", "torch.MaxPool2d", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.predict_flow", "PCLNet.deconv", "PCLNet.deconv", "PCLNet.conv", "PCLNet.predict_flow", "PCLNet.deconv", "PCLNet.deconv", "PCLNet.conv", "PCLNet.predict_flow", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.predict_flow", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.conv", "PCLNet.predict_flow", "getattr", "PCLNet.PCLNet.feature_net.parameters", "print", "CLSTM.ConvLSTM", "CLSTM.ConvLSTM", "CLSTM.ConvLSTM", "CLSTM.ConvLSTM", "list", "list", "list", "list", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.deconv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.deconv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.deconv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.deconv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv", "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "PCLNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "snippet_len", "=", "args", ".", "snippet_len", "\n", "self", ".", "feature_net", "=", "getattr", "(", "resnetM", ",", "args", ".", "backbone", ")", "(", "pretrained", "=", "True", ",", "num_classes", "=", "args", ".", "class_num", ")", "\n", "if", "args", ".", "freeze_vgg", ":", "\n", "            ", "for", "p", "in", "self", ".", "feature_net", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "required_grad", "=", "False", "\n", "", "print", "(", "\"[>>>> Feature head frozen.<<<<]\"", ")", "\n", "\n", "# Motion Encoding", "\n", "# in_size: 1/2", "\n", "", "self", ".", "clstm_encoder_1", "=", "ConvLSTM", "(", "input_channels", "=", "64", ",", "hidden_channels", "=", "[", "64", "]", ",", "\n", "kernel_size", "=", "3", ",", "step", "=", "snippet_len", ",", "effective_step", "=", "list", "(", "range", "(", "snippet_len", ")", ")", ")", ".", "cuda", "(", ")", "\n", "# in_size: 1/4", "\n", "self", ".", "clstm_encoder_2", "=", "ConvLSTM", "(", "input_channels", "=", "64", ",", "hidden_channels", "=", "[", "64", "]", ",", "\n", "kernel_size", "=", "3", ",", "step", "=", "snippet_len", ",", "effective_step", "=", "list", "(", "range", "(", "snippet_len", ")", ")", ")", ".", "cuda", "(", ")", "\n", "# in_size: 1/8", "\n", "self", ".", "clstm_encoder_3", "=", "ConvLSTM", "(", "input_channels", "=", "128", ",", "hidden_channels", "=", "[", "128", "]", ",", "\n", "kernel_size", "=", "3", ",", "step", "=", "snippet_len", ",", "effective_step", "=", "list", "(", "range", "(", "snippet_len", ")", ")", ")", ".", "cuda", "(", ")", "\n", "# in_size: 1/16", "\n", "self", ".", "clstm_encoder_4", "=", "ConvLSTM", "(", "input_channels", "=", "256", ",", "hidden_channels", "=", "[", "256", "]", ",", "\n", "kernel_size", "=", "3", ",", "step", "=", "snippet_len", ",", "effective_step", "=", "list", "(", "range", "(", "snippet_len", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "conv_B1", "=", "conv", "(", "64", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S1_1", "=", "conv", "(", "64", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S1_2", "=", "conv", "(", "64", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_D1", "=", "conv", "(", "64", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "Pool1", "=", "nn", ".", "MaxPool2d", "(", "8", ",", "8", ")", "\n", "\n", "self", ".", "conv_B2", "=", "conv", "(", "64", ",", "64", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S2_1", "=", "conv", "(", "64", "+", "64", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S2_2", "=", "conv", "(", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_D2", "=", "conv", "(", "128", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "Pool2", "=", "nn", ".", "MaxPool2d", "(", "4", ",", "4", ")", "\n", "\n", "self", ".", "conv_B3", "=", "conv", "(", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S3_1", "=", "conv", "(", "128", "+", "64", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S3_2", "=", "conv", "(", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_D3", "=", "conv", "(", "128", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "Pool3", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "conv_B4", "=", "conv", "(", "256", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S4_1", "=", "conv", "(", "128", "+", "64", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_S4_2", "=", "conv", "(", "128", ",", "128", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Motion feature", "\n", "self", ".", "conv_M", "=", "conv", "(", "(", "64", "+", "128", "+", "128", "+", "128", ")", ",", "256", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# Motion reconstruction", "\n", "if", "self", ".", "args", ".", "couple", ":", "\n", "            ", "rec_in_size", "=", "[", "0", ",", "64", "+", "64", "+", "2", ",", "128", "+", "128", "+", "2", ",", "128", "+", "196", "+", "2", ",", "128", "+", "256", "]", "\n", "", "else", ":", "\n", "            ", "rec_in_size", "=", "[", "0", ",", "64", "+", "2", ",", "128", "+", "2", ",", "196", "+", "2", ",", "256", "]", "\n", "\n", "", "self", ".", "conv_4", "=", "conv", "(", "rec_in_size", "[", "4", "]", ",", "256", ")", "\n", "self", ".", "pred_flow4", "=", "predict_flow", "(", "256", ")", "\n", "self", ".", "up_flow4", "=", "deconv", "(", "2", ",", "2", ")", "\n", "self", ".", "up_feat4", "=", "deconv", "(", "256", ",", "196", ")", "\n", "\n", "self", ".", "conv_3", "=", "conv", "(", "rec_in_size", "[", "3", "]", ",", "196", ")", "\n", "self", ".", "pred_flow3", "=", "predict_flow", "(", "196", ")", "\n", "self", ".", "up_flow3", "=", "deconv", "(", "2", ",", "2", ")", "\n", "self", ".", "up_feat3", "=", "deconv", "(", "196", ",", "128", ")", "\n", "\n", "self", ".", "conv_2", "=", "conv", "(", "rec_in_size", "[", "2", "]", ",", "96", ")", "\n", "self", ".", "pred_flow2", "=", "predict_flow", "(", "96", ")", "\n", "self", ".", "up_flow2", "=", "conv", "(", "2", ",", "2", ")", "\n", "self", ".", "up_feat2", "=", "conv", "(", "96", ",", "64", ")", "\n", "\n", "self", ".", "conv_1", "=", "conv", "(", "rec_in_size", "[", "1", "]", ",", "64", ")", "\n", "self", ".", "pred_flow1", "=", "predict_flow", "(", "64", ")", "\n", "\n", "self", ".", "dc_conv1", "=", "conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "self", ".", "dc_conv2", "=", "conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "self", ".", "dc_conv3", "=", "conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "self", ".", "dc_conv4", "=", "conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "8", ",", "dilation", "=", "8", ")", "\n", "self", ".", "dc_conv5", "=", "conv", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "16", ",", "dilation", "=", "16", ")", "\n", "self", ".", "dc_conv6", "=", "conv", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "self", ".", "dc_conv7", "=", "predict_flow", "(", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.PCLNet.forward": [[120, 202], ["PCLNet.PCLNet.contiguous().view", "PCLNet.PCLNet.feature_net", "la1.view.view.view", "la2.view.view.view", "la3.view.view.view", "la4.view.view.view", "PCLNet.PCLNet.clstm_encoder_1", "PCLNet.PCLNet.clstm_encoder_2", "PCLNet.PCLNet.clstm_encoder_3", "PCLNet.PCLNet.clstm_encoder_4", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "PCLNet.PCLNet.conv_B1", "PCLNet.PCLNet.conv_S1_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCLNet.PCLNet.conv_S2_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCLNet.PCLNet.conv_S3_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCLNet.PCLNet.conv_S4_2", "PCLNet.PCLNet.conv_M", "PCLNet.PCLNet.conv_4", "PCLNet.PCLNet.pred_flow4", "PCLNet.PCLNet.up_flow4", "PCLNet.PCLNet.up_feat4", "PCLNet.PCLNet.conv_3", "PCLNet.PCLNet.pred_flow3", "PCLNet.PCLNet.up_flow3", "PCLNet.PCLNet.up_feat3", "PCLNet.PCLNet.conv_2", "PCLNet.PCLNet.pred_flow2", "PCLNet.PCLNet.up_flow2", "PCLNet.PCLNet.up_feat2", "PCLNet.PCLNet.conv_1", "PCLNet.PCLNet.pred_flow1", "PCLNet.PCLNet.dc_conv4", "PCLNet.PCLNet.dc_conv7", "PCLNet.PCLNet.dim", "PCLNet.PCLNet.size", "PCLNet.PCLNet.conv_S1_1", "PCLNet.PCLNet.conv_S2_1", "PCLNet.PCLNet.conv_S3_1", "PCLNet.PCLNet.conv_S4_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCLNet.PCLNet.dc_conv3", "PCLNet.PCLNet.dc_conv6", "flo.view", "PCLNet.PCLNet.dim", "PCLNet.PCLNet.size", "PCLNet.PCLNet.contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "PCLNet.PCLNet.conv_B2", "PCLNet.PCLNet.conv_D1", "PCLNet.PCLNet.conv_B3", "PCLNet.PCLNet.conv_D2", "PCLNet.PCLNet.conv_B4", "PCLNet.PCLNet.conv_D3", "PCLNet.PCLNet.dc_conv2", "PCLNet.PCLNet.dc_conv5", "PCLNet.PCLNet.dim", "PCLNet.PCLNet.size", "RuntimeError", "la1.view.view.size", "la2.view.view.size", "la3.view.view.size", "la4.view.view.size", "h1[].size", "h2[].size", "h3[].size", "h4[].size", "PCLNet.PCLNet.Pool1", "PCLNet.PCLNet.Pool2", "PCLNet.PCLNet.Pool3", "PCLNet.PCLNet.dc_conv1", "flo.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "6", ":", "# (batch_size, K, snippet_len, channel, H, W)", "\n", "            ", "batch_size", ",", "K", ",", "snippet_len", ",", "channel", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "5", ":", "# (batch_size, snippet_len, channel, H, W)", "\n", "            ", "batch_size", ",", "snippet_len", ",", "channel", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "K", "=", "1", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "4", ":", "# (batch_size, channel * snippet_len, H, W)", "\n", "            ", "batch_size", ",", "_channels", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "channel", "=", "1", ",", "3", "\n", "snippet_len", "=", "_channels", "//", "channel", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Input format not suppored!'", ")", "\n", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "H", ",", "W", ")", "\n", "\n", "la1", ",", "la2", ",", "la3", ",", "la4", ",", "_", "=", "self", ".", "feature_net", "(", "x", ")", "\n", "\n", "la1", "=", "la1", ".", "view", "(", "(", "-", "1", ",", "snippet_len", ")", "+", "la1", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "la2", "=", "la2", ".", "view", "(", "(", "-", "1", ",", "snippet_len", ")", "+", "la2", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "la3", "=", "la3", ".", "view", "(", "(", "-", "1", ",", "snippet_len", ")", "+", "la3", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "la4", "=", "la4", ".", "view", "(", "(", "-", "1", ",", "snippet_len", ")", "+", "la4", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "# la5 = la5.view((-1, snippet_len) + la5.size()[1:])", "\n", "\n", "h1", ",", "_", "=", "self", ".", "clstm_encoder_1", "(", "la1", ")", "\n", "h2", ",", "_", "=", "self", ".", "clstm_encoder_2", "(", "la2", ")", "\n", "h3", ",", "_", "=", "self", ".", "clstm_encoder_3", "(", "la3", ")", "\n", "h4", ",", "_", "=", "self", ".", "clstm_encoder_4", "(", "la4", ")", "\n", "# list for each step (batch_size * K, channel, H, W)", "\n", "\n", "# (batch_size * K*(snippet_len -1), channel, H, W)", "\n", "h1", "=", "torch", ".", "stack", "(", "h1", "[", "1", ":", "]", ",", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", "+", "h1", "[", "0", "]", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "h2", "=", "torch", ".", "stack", "(", "h2", "[", "1", ":", "]", ",", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", "+", "h2", "[", "0", "]", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "h3", "=", "torch", ".", "stack", "(", "h3", "[", "1", ":", "]", ",", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", "+", "h3", "[", "0", "]", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "h4", "=", "torch", ".", "stack", "(", "h4", "[", "1", ":", "]", ",", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", "+", "h4", "[", "0", "]", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "\n", "x1", "=", "self", ".", "conv_B1", "(", "h1", ")", "\n", "x1", "=", "self", ".", "conv_S1_2", "(", "self", ".", "conv_S1_1", "(", "x1", ")", ")", "\n", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv_B2", "(", "h2", ")", ",", "self", ".", "conv_D1", "(", "x1", ")", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "conv_S2_2", "(", "self", ".", "conv_S2_1", "(", "x2", ")", ")", "\n", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv_B3", "(", "h3", ")", ",", "self", ".", "conv_D2", "(", "x2", ")", ")", ",", "1", ")", "\n", "x3", "=", "self", ".", "conv_S3_2", "(", "self", ".", "conv_S3_1", "(", "x3", ")", ")", "\n", "\n", "x4", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv_B4", "(", "h4", ")", ",", "self", ".", "conv_D3", "(", "x3", ")", ")", ",", "1", ")", "\n", "x4", "=", "self", ".", "conv_S4_2", "(", "self", ".", "conv_S4_1", "(", "x4", ")", ")", "\n", "\n", "xm", "=", "self", ".", "conv_M", "(", "torch", ".", "cat", "(", "(", "self", ".", "Pool1", "(", "x1", ")", ",", "self", ".", "Pool2", "(", "x2", ")", ",", "self", ".", "Pool3", "(", "x3", ")", ",", "x4", ")", ",", "1", ")", ")", "\n", "\n", "rec_x4", "=", "torch", ".", "cat", "(", "(", "x4", ",", "xm", ")", ",", "1", ")", "if", "self", ".", "args", ".", "couple", "else", "xm", "\n", "x", "=", "self", ".", "conv_4", "(", "rec_x4", ")", "\n", "flow4", "=", "self", ".", "pred_flow4", "(", "x", ")", "\n", "up_flow4", "=", "self", ".", "up_flow4", "(", "flow4", ")", "\n", "up_feat4", "=", "self", ".", "up_feat4", "(", "x", ")", "\n", "\n", "rec_x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "up_feat4", ",", "up_flow4", ")", ",", "1", ")", "if", "self", ".", "args", ".", "couple", "else", "torch", ".", "cat", "(", "(", "up_feat4", ",", "up_flow4", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_3", "(", "rec_x3", ")", "\n", "flow3", "=", "self", ".", "pred_flow3", "(", "x", ")", "\n", "up_flow3", "=", "self", ".", "up_flow3", "(", "flow3", ")", "\n", "up_feat3", "=", "self", ".", "up_feat3", "(", "x", ")", "\n", "\n", "rec_x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "up_feat3", ",", "up_flow3", ")", ",", "1", ")", "if", "self", ".", "args", ".", "couple", "else", "torch", ".", "cat", "(", "(", "up_feat3", ",", "up_flow3", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_2", "(", "rec_x2", ")", "\n", "flow2", "=", "self", ".", "pred_flow2", "(", "x", ")", "\n", "up_flow2", "=", "self", ".", "up_flow2", "(", "flow2", ")", "\n", "up_feat2", "=", "self", ".", "up_feat2", "(", "x", ")", "\n", "\n", "rec_x1", "=", "torch", ".", "cat", "(", "(", "x1", ",", "up_feat2", ",", "up_flow2", ")", ",", "1", ")", "if", "self", ".", "args", ".", "couple", "else", "torch", ".", "cat", "(", "(", "up_feat2", ",", "up_flow2", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_1", "(", "rec_x1", ")", "\n", "flow1", "=", "self", ".", "pred_flow1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dc_conv4", "(", "self", ".", "dc_conv3", "(", "self", ".", "dc_conv2", "(", "self", ".", "dc_conv1", "(", "x", ")", ")", ")", ")", "\n", "flow1", "+=", "self", ".", "dc_conv7", "(", "self", ".", "dc_conv6", "(", "self", ".", "dc_conv5", "(", "x", ")", ")", ")", "\n", "\n", "# output size: (batch_size, K, snippet_len -1 , C,H,W)", "\n", "flow_pyramid", "=", "[", "flo", ".", "view", "(", "(", "batch_size", ",", "K", ",", "snippet_len", "-", "1", ",", ")", "+", "flo", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "for", "flo", "in", "[", "flow1", ",", "flow2", ",", "flow3", ",", "flow4", "]", "]", "\n", "re_dict", "=", "{", "}", "\n", "re_dict", "[", "'flow_pyramid'", "]", "=", "flow_pyramid", "\n", "\n", "return", "re_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.arg_example.__init__": [[206, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "snippet_len", "=", "2", "\n", "self", ".", "backbone", "=", "'resnet18'", "\n", "self", ".", "class_num", "=", "101", "\n", "self", ".", "freeze_vgg", "=", "True", "\n", "self", ".", "couple", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.conv": [[9, 16], ["torch.Sequential", "type", "numpy.asscalar", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "type", "(", "in_planes", ")", "==", "np", ".", "int64", ":", "\n", "        ", "in_planes", "=", "np", ".", "asscalar", "(", "in_planes", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.predict_flow": [[18, 22], ["torch.Conv2d", "type", "numpy.asscalar"], "function", ["None"], ["", "def", "predict_flow", "(", "in_planes", ")", ":", "\n", "    ", "if", "type", "(", "in_planes", ")", "==", "np", ".", "int64", ":", "\n", "        ", "in_planes", "=", "np", ".", "asscalar", "(", "in_planes", ")", "\n", "", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.PCLNet.deconv": [[24, 28], ["torch.ConvTranspose2d", "type", "numpy.asscalar"], "function", ["None"], ["", "def", "deconv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ":", "\n", "    ", "if", "type", "(", "in_planes", ")", "==", "np", ".", "int64", ":", "\n", "        ", "in_planes", "=", "np", ".", "asscalar", "(", "in_planes", ")", "\n", "", "return", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTMCell.__init__": [[7, 20], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n", "self", ".", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "self", ".", "Gates", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", "+", "self", ".", "hidden_channels", ",", "4", "*", "self", ".", "hidden_channels", ",", "\n", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTMCell.forward": [[21, 40], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "CLSTM.ConvLSTMCell.Gates", "CLSTM.ConvLSTMCell.chunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "\n", "        ", "stacked_inputs", "=", "torch", ".", "cat", "(", "(", "x", ",", "h", ")", ",", "1", ")", "\n", "gates", "=", "self", ".", "Gates", "(", "stacked_inputs", ")", "\n", "\n", "# chunk across the channel dimension", "\n", "xi", ",", "xf", ",", "xo", ",", "xg", "=", "gates", ".", "chunk", "(", "4", ",", "1", ")", "\n", "\n", "# apply sigmoid non linearity", "\n", "xi", "=", "torch", ".", "sigmoid", "(", "xi", ")", "\n", "xf", "=", "torch", ".", "sigmoid", "(", "xf", ")", "\n", "xo", "=", "torch", ".", "sigmoid", "(", "xo", ")", "\n", "xg", "=", "torch", ".", "tanh", "(", "xg", ")", "\n", "\n", "# compute current cell and hidden state", "\n", "c", "=", "(", "xf", "*", "c", ")", "+", "(", "xi", "*", "xg", ")", "\n", "h", "=", "xo", "*", "torch", ".", "tanh", "(", "c", ")", "\n", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTMCell.init_hidden": [[41, 44], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTM.__init__": [[47, 62], ["torch.Module.__init__", "len", "range", "CLSTM.ConvLSTMCell", "setattr", "CLSTM.ConvLSTM._all_layers.append"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "step", "=", "1", ",", "effective_step", "=", "[", "1", "]", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "[", "input_channels", "]", "+", "hidden_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "len", "(", "hidden_channels", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "effective_step", "=", "effective_step", "\n", "self", ".", "_all_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "cell", "=", "ConvLSTMCell", "(", "self", ".", "input_channels", "[", "i", "]", ",", "self", ".", "hidden_channels", "[", "i", "]", ",", "self", ".", "kernel_size", ",", "self", ".", "bias", ")", "\n", "setattr", "(", "self", ",", "name", ",", "cell", ")", "\n", "self", ".", "_all_layers", ".", "append", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTM.forward": [[63, 86], ["range", "range", "outputs.append", "x.size", "getattr().init_hidden", "internal_state.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.models.CLSTM.ConvLSTMCell.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "#input : (num, seq_len, channel, H,W)", "\n", "        ", "internal_state", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "            ", "x", "=", "input", "[", ":", ",", "step", ",", ":", ",", ":", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# all cells are initialized in the first step", "\n", "                ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "bsize", ",", "_", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "(", "h", ",", "c", ")", "=", "getattr", "(", "self", ",", "name", ")", ".", "init_hidden", "(", "batch_size", "=", "bsize", ",", "hidden", "=", "self", ".", "hidden_channels", "[", "i", "]", ",", "\n", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "internal_state", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "# do forward", "\n", "", "(", "h", ",", "c", ")", "=", "internal_state", "[", "i", "]", "\n", "x", ",", "new_c", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "h", ",", "c", ")", "\n", "internal_state", "[", "i", "]", "=", "(", "x", ",", "new_c", ")", "\n", "# only record effective steps", "\n", "", "if", "step", "in", "self", ".", "effective_step", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "return", "outputs", ",", "(", "x", ",", "new_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.interpolate_func.interpolate": [[3, 73], ["interpolate_func.interpolate._check_size_scale_factor"], "function", ["None"], ["def", "interpolate", "(", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", ":", "\n", "\n", "    ", "from", "numbers", "import", "Integral", "\n", "_ntuple", "=", "torch", ".", "nn", ".", "functional", ".", "utils", ".", "_ntuple", "\n", "\n", "\n", "def", "_check_size_scale_factor", "(", "dim", ")", ":", "\n", "        ", "if", "size", "is", "None", "and", "scale_factor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'either size or scale_factor should be defined'", ")", "\n", "", "if", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'only one of size or scale_factor should be defined'", ")", "\n", "", "if", "scale_factor", "is", "not", "None", "and", "isinstance", "(", "scale_factor", ",", "tuple", ")", "and", "len", "(", "scale_factor", ")", "!=", "dim", ":", "\n", "            ", "raise", "ValueError", "(", "'scale_factor shape must match input shape. '", "\n", "'Input is {}D, scale_factor size is {}'", ".", "format", "(", "dim", ",", "len", "(", "scale_factor", ")", ")", ")", "\n", "\n", "", "", "def", "_output_size", "(", "dim", ")", ":", "\n", "        ", "_check_size_scale_factor", "(", "dim", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "return", "size", "\n", "", "scale_factors", "=", "_ntuple", "(", "dim", ")", "(", "scale_factor", ")", "\n", "# math.floor might return float in py2.7", "\n", "return", "[", "int", "(", "math", ".", "floor", "(", "input", ".", "size", "(", "i", "+", "2", ")", "*", "scale_factors", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "dim", ")", "]", "\n", "\n", "", "if", "mode", "in", "(", "'nearest'", ",", "'area'", ")", ":", "\n", "        ", "if", "align_corners", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"align_corners option can only be set with the \"", "\n", "\"interpolating modes: linear | bilinear | trilinear\"", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "align_corners", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Default upsampling behavior when mode={} is changed \"", "\n", "\"to align_corners=False since 0.4.0. Please specify \"", "\n", "\"align_corners=True if the old behavior is desired. \"", "\n", "\"See the documentation of nn.Upsample for details.\"", ".", "format", "(", "mode", ")", ")", "\n", "align_corners", "=", "False", "\n", "\n", "", "", "if", "input", ".", "dim", "(", ")", "==", "3", "and", "mode", "==", "'nearest'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_nearest1d", "(", "input", ",", "_output_size", "(", "1", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", "and", "mode", "==", "'nearest'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_nearest2d", "(", "input", ",", "_output_size", "(", "2", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", "and", "mode", "==", "'nearest'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_nearest3d", "(", "input", ",", "_output_size", "(", "3", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", "and", "mode", "==", "'area'", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool1d", "(", "input", ",", "_output_size", "(", "1", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", "and", "mode", "==", "'area'", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "input", ",", "_output_size", "(", "2", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", "and", "mode", "==", "'area'", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool3d", "(", "input", ",", "_output_size", "(", "3", ")", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", "and", "mode", "==", "'linear'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_linear1d", "(", "input", ",", "_output_size", "(", "1", ")", ",", "align_corners", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", "and", "mode", "==", "'bilinear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 3D input, but bilinear mode needs 4D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", "and", "mode", "==", "'trilinear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 3D input, but trilinear mode needs 5D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", "and", "mode", "==", "'linear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 4D input, but linear mode needs 3D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", "and", "mode", "==", "'bilinear'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_bilinear2d", "(", "input", ",", "_output_size", "(", "2", ")", ",", "align_corners", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", "and", "mode", "==", "'trilinear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 4D input, but trilinear mode needs 5D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", "and", "mode", "==", "'linear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 5D input, but linear mode needs 3D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", "and", "mode", "==", "'bilinear'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Got 5D input, but bilinear mode needs 4D input\"", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", "and", "mode", "==", "'trilinear'", ":", "\n", "        ", "return", "torch", ".", "_C", ".", "_nn", ".", "upsample_trilinear3d", "(", "input", ",", "_output_size", "(", "3", ")", ",", "align_corners", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Input Error: Only 3D, 4D and 5D input Tensors supported\"", "\n", "\" (got {}D) for the modes: nearest | linear | bilinear | trilinear\"", "\n", "\" (got {})\"", ".", "format", "(", "input", ".", "dim", "(", ")", ",", "mode", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.EPE": [[17, 29], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm.size", "torch.norm.mean", "torch.norm.sum"], "function", ["None"], ["", "def", "EPE", "(", "input_flow", ",", "target_flow", ",", "sparse", "=", "False", ",", "mean", "=", "True", ")", ":", "\n", "    ", "EPE_map", "=", "torch", ".", "norm", "(", "target_flow", "-", "input_flow", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "EPE_map", ".", "size", "(", "0", ")", "\n", "if", "sparse", ":", "\n", "# invalid flow is defined with both flow coordinates to be exactly 0", "\n", "        ", "mask", "=", "(", "target_flow", "[", ":", ",", "0", "]", "==", "0", ")", "&", "(", "target_flow", "[", ":", ",", "1", "]", "==", "0", ")", "\n", "\n", "EPE_map", "=", "EPE_map", "[", "~", "mask", "]", "\n", "", "if", "mean", ":", "\n", "        ", "return", "EPE_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "EPE_map", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.EPE_with_mask": [[30, 45], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm.size", "torch.norm.mean", "torch.norm.sum"], "function", ["None"], ["", "", "def", "EPE_with_mask", "(", "input_flow", ",", "target_flow", ",", "mask", ",", "sparse", "=", "False", ",", "mean", "=", "True", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "target_flow", "=", "target_flow", "*", "mask", "\n", "input_flow", "=", "input_flow", "*", "mask", "\n", "", "EPE_map", "=", "torch", ".", "norm", "(", "target_flow", "-", "input_flow", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "EPE_map", ".", "size", "(", "0", ")", "\n", "if", "sparse", ":", "\n", "# invalid flow is defined with both flow coordinates to be exactly 0", "\n", "        ", "mask", "=", "(", "target_flow", "[", ":", ",", "0", "]", "==", "0", ")", "&", "(", "target_flow", "[", ":", ",", "1", "]", "==", "0", ")", "\n", "\n", "EPE_map", "=", "EPE_map", "[", "~", "mask", "]", "\n", "", "if", "mean", ":", "\n", "        ", "return", "EPE_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "EPE_map", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.sparse_max_pool": [[46, 59], ["torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d"], "function", ["None"], ["", "", "def", "sparse_max_pool", "(", "input", ",", "size", ")", ":", "\n", "    ", "\"\"\"Downsample the input by considering 0 values as invalid.\n\n    Unfortunately, no generic interpolation mode can resize a sparse map correctly,\n    the strategy here is to use max pooling for positive values and \"min pooling\"\n    for negative values, the two results are then summed.\n    This technique allows sparsity to be minized, contrary to nearest interpolation,\n    which could potentially lose information for isolated data points.\"\"\"", "\n", "\n", "positive", "=", "(", "input", ">", "0", ")", ".", "float", "(", ")", "\n", "negative", "=", "(", "input", "<", "0", ")", ".", "float", "(", ")", "\n", "output", "=", "F", ".", "adaptive_max_pool2d", "(", "input", "*", "positive", ",", "size", ")", "-", "F", ".", "adaptive_max_pool2d", "(", "-", "input", "*", "negative", ",", "size", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.PyramidalLoss": [[61, 99], ["enumerate", "output.size", "target.size", "loss_func.EPE_with_mask", "type", "zip", "loss_func.sparse_max_pool", "interpolate", "loss_func.PyramidalLoss.one_scale"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.EPE_with_mask", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.sparse_max_pool", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.interpolate_func.interpolate"], ["", "def", "PyramidalLoss", "(", "network_output", ",", "target_flow", ",", "mask_pyramid", "=", "None", ",", "weights", "=", "None", ",", "sparse", "=", "False", ",", "pred_on_target", "=", "True", ",", "mask_levels", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    if pred_on_target=True, pred the optical flow directly on target scale (don not scale against on each level)\n    \"\"\"", "\n", "def", "one_scale", "(", "output", ",", "target", ",", "mask", ",", "sparse", ")", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "output", ".", "size", "(", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mb", ",", "_", ",", "mh", ",", "mw", "=", "mask", ".", "shape", "\n", "assert", "[", "mh", ",", "mw", "]", "==", "[", "h", ",", "w", "]", "\n", "", "bt", ",", "_", ",", "ht", ",", "wt", "=", "target", ".", "size", "(", ")", "\n", "\n", "if", "sparse", ":", "\n", "            ", "target_scaled", "=", "sparse_max_pool", "(", "target", ",", "(", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "            ", "target_scaled", "=", "interpolate", "(", "target", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'area'", ")", "\n", "\n", "", "if", "not", "pred_on_target", ":", "\n", "# estimated flow at each level has real displacements", "\n", "            ", "target_scaled", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "target_scaled", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "w", "/", "wt", ")", "\n", "target_scaled", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "target_scaled", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "h", "/", "ht", ")", "\n", "\n", "", "return", "EPE_with_mask", "(", "output", ",", "target_scaled", ",", "mask", ",", "sparse", ",", "mean", "=", "False", ")", "\n", "\n", "", "if", "type", "(", "network_output", ")", "not", "in", "[", "tuple", ",", "list", "]", ":", "\n", "        ", "network_output", "=", "[", "network_output", "]", "\n", "", "if", "weights", "is", "None", ":", "\n", "        ", "weights", "=", "[", "0.005", ",", "0.01", ",", "0.02", ",", "0.08", ",", "0.32", "]", "# as in original article", "\n", "\n", "", "loss", "=", "0", "\n", "for", "i", ",", "(", "output", ",", "weight", ")", "in", "enumerate", "(", "zip", "(", "network_output", ",", "weights", ")", ")", ":", "\n", "        ", "if", "mask_pyramid", "is", "not", "None", "and", "(", "i", "in", "mask_levels", ")", ":", "\n", "            ", "mask", "=", "mask_pyramid", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "", "loss", "+=", "weight", "*", "one_scale", "(", "output", ",", "target_flow", ",", "mask", ",", "sparse", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "loss", "+=", "1e-2", "*", "weight", "*", "(", "1.0", "-", "mask", ")", ".", "sum", "(", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.realEPE": [[101, 141], ["interpolate.size", "interpolate.size", "loss_func.EPE", "interpolate", "interpolate"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.EPE", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.interpolate_func.interpolate", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.interpolate_func.interpolate"], ["", "def", "realEPE", "(", "args", ",", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    sparse: use for KITTI dataset\n    div_flow: whether multipy by div_flow factor\n    pred_on_target: If True, the predicted flow(output) has the same scale as on the target level\n                    otherwise, it predicted the flow on its currect level. It depends on whether \n                    rescaling the gt flow on each level when training.\n    compute_size: If None, compute on the target size, otherwise, rescale both the target and the\n                    output to the compute_size first, then compute the EPE on the rescaled size.\n                    (use to compute the actual EPE for benchmarking.)\n    \"\"\"", "\n", "sparse", "=", "args", ".", "sparse", "\n", "div_flow", "=", "args", ".", "div_flow", "\n", "pred_on_target", "=", "not", "args", ".", "rescale_each_level", "\n", "compute_size", "=", "args", ".", "compute_size", "\n", "\n", "if", "div_flow", "!=", "1.0", ":", "\n", "        ", "target", "=", "target", "*", "div_flow", "\n", "output", "=", "output", "*", "div_flow", "\n", "\n", "", "b", ",", "_", ",", "th", ",", "tw", "=", "target", ".", "size", "(", ")", "\n", "ob", ",", "_", ",", "oh", ",", "ow", "=", "output", ".", "size", "(", ")", "\n", "ch", ",", "cw", "=", "[", "th", ",", "tw", "]", "if", "compute_size", "is", "None", "else", "compute_size", "\n", "\n", "if", "[", "th", ",", "tw", "]", "!=", "[", "ch", ",", "cw", "]", ":", "\n", "        ", "target", "=", "interpolate", "(", "target", ",", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "cw", "/", "tw", ")", "\n", "target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "ch", "/", "th", ")", "\n", "\n", "", "if", "[", "oh", ",", "ow", "]", "!=", "[", "ch", ",", "cw", "]", ":", "\n", "        ", "output", "=", "interpolate", "(", "output", ",", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "pred_on_target", ":", "\n", "        ", "output", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "cw", "/", "tw", ")", "\n", "output", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "ch", "/", "th", ")", "\n", "", "else", ":", "\n", "        ", "output", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "(", "cw", "/", "ow", ")", "\n", "output", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "(", "ch", "/", "oh", ")", "\n", "\n", "", "return", "EPE", "(", "output", ",", "target", ",", "sparse", ",", "mean", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.warp": [[146, 189], ["x.size", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "xx.view().repeat.view().repeat", "yy.view().repeat.view().repeat", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "grid.cuda.cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vgrid.permute.permute", "torch.functional.grid_sample", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.functional.grid_sample", "grid_cache.keys", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "xx.view().repeat.view().repeat", "yy.view().repeat.view().repeat", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "grid.cuda.cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vgrid.permute.permute", "torch.autograd.Variable", "torch.autograd.Variable", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "xx.view().repeat.view", "yy.view().repeat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "xx.view().repeat.view", "yy.view().repeat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "max", "max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "warp", "(", "x", ",", "flo", ")", ":", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "grid_name", "=", "\"{}_{}_{}\"", ".", "format", "(", "B", ",", "H", ",", "W", ")", "\n", "if", "grid_name", "not", "in", "grid_cache", ".", "keys", "(", ")", ":", "\n", "# mesh grid ", "\n", "        ", "xx", "=", "torch", ".", "arange", "(", "0", ",", "W", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "H", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "H", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "W", ")", "\n", "xx", "=", "xx", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "+", "flo", "\n", "\n", "vgl", "=", "[", "2.0", "*", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "max", "(", "W", "-", "1", ",", "1", ")", "-", "1.0", ",", "2.0", "*", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "max", "(", "H", "-", "1", ",", "1", ")", "-", "1.0", "]", "\n", "vgrid", "=", "torch", ".", "stack", "(", "vgl", ",", "1", ")", "\n", "vgrid", "=", "vgrid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "grid_cache", "[", "grid_name", "]", "=", "vgrid", "\n", "", "vgrid", "=", "grid_cache", "[", "grid_name", "]", "\n", "\n", "# mesh grid ", "\n", "xx", "=", "torch", ".", "arange", "(", "0", ",", "W", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "H", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "H", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "W", ")", "\n", "xx", "=", "xx", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "+", "flo", "\n", "\n", "vgl", "=", "[", "2.0", "*", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "max", "(", "W", "-", "1", ",", "1", ")", "-", "1.0", ",", "2.0", "*", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "max", "(", "H", "-", "1", ",", "1", ")", "-", "1.0", "]", "\n", "vgrid", "=", "torch", ".", "stack", "(", "vgl", ",", "1", ")", "\n", "vgrid", "=", "vgrid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "x", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "nn", ".", "functional", ".", "grid_sample", "(", "mask", ",", "vgrid", ")", "\n", "\n", "mask", "[", "mask", "<", "0.9999", "]", "=", "0", "\n", "mask", "[", "mask", ">", "0", "]", "=", "1", "\n", "\n", "x_warped", "=", "output", "*", "mask", "\n", "return", "x_warped", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Losses.loss_func.multiscale_reconstruct_loss": [[191, 303], ["warnings.warn", "range", "frames.view.size", "frames.view.dim", "frames.view.view", "loss_func.multiscale_reconstruct_loss.charbonnier_penalty"], "function", ["None"], ["", "def", "multiscale_reconstruct_loss", "(", "args", ",", "frames", ",", "flow_pyramid", ",", "mask_pyramid", "=", "None", ",", "compute_levels", "=", "[", "0", ",", "1", ",", "2", "]", ",", "fwd", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Compute multi-scale reconstruct loss\n    :param div_flow:\n    :param compute_levels:\n    :param frames:\n    :param flow_pyramid: list(batch_size, K, snippet_len-1, C, H, W)\n    :param compute_size: rescale to  [compute_size * compute_size] to compute the loss\n    :return:\n    \"\"\"", "\n", "sparse", "=", "args", ".", "sparse", "\n", "div_flow", "=", "args", ".", "div_flow", "\n", "mask_levels", "=", "args", ".", "mask_levels", "\n", "compute_size", "=", "args", ".", "compute_size", "\n", "\n", "warnings", ".", "warn", "(", "\"sparse option in multiscale_reconstruct_loss() function is not supported yet!\"", ")", "\n", "snippet_len", ",", "f_c", ",", "f_h", ",", "f_w", "=", "frames", ".", "size", "(", ")", "[", "-", "4", ":", "]", "\n", "if", "compute_size", "is", "not", "None", ":", "\n", "        ", "w_h", ",", "w_w", "=", "compute_size", "\n", "\n", "", "if", "frames", ".", "dim", "(", ")", ">", "5", ":", "\n", "        ", "frames", "=", "frames", ".", "view", "(", "(", "-", "1", ",", ")", "+", "frames", ".", "size", "(", ")", "[", "-", "4", ":", "]", ")", "\n", "", "assert", "fwd", ",", "\" backword loss is not supported again!\"", "\n", "\n", "def", "charbonnier_penalty", "(", "x", ",", "e", "=", "1e-8", ",", "delta", "=", "0.4", ",", "averge", "=", "True", ")", ":", "\n", "        ", "p", "=", "(", "(", "x", ")", "**", "2", "+", "e", ")", ".", "pow", "(", "delta", ")", "\n", "if", "averge", ":", "\n", "            ", "p", "=", "p", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "p", ".", "sum", "(", ")", "\n", "", "return", "p", "\n", "\n", "", "def", "reconstruct_loss", "(", "f1", ",", "f2", ",", "averge", "=", "True", ")", ":", "\n", "        ", "beta_1", ",", "beta_2", ",", "beta_3", "=", "0.5", ",", "0.6", ",", "0.5", "\n", "diff_loss", "=", "charbonnier_penalty", "(", "f2", "-", "f1", ",", "delta", "=", "0.4", ",", "averge", "=", "True", ")", "\n", "ssim_loss", "=", "1.0", "-", "ssim_module", ".", "ssim", "(", "f1", ",", "f2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", "# [0, 1]", "\n", "# psnr_loss = -10.0 * ((1.0 / (square_.mean() + 1)).log10())", "\n", "psnr_loss", "=", "0.0", "\n", "\n", "num", "=", "1", "if", "averge", "else", "f1", ".", "shape", "[", "-", "2", "]", "*", "f1", ".", "shape", "[", "-", "1", "]", "\n", "diff_loss", "=", "num", "*", "beta_1", "*", "diff_loss", "\n", "ssim_loss", "=", "num", "*", "beta_2", "*", "ssim_loss", "\n", "psnr_loss", "=", "num", "*", "beta_3", "*", "psnr_loss", "\n", "\n", "return", "[", "diff_loss", ",", "ssim_loss", ",", "psnr_loss", "]", "\n", "\n", "\n", "# weights = [0.4, 0.3, 0.2, 0.1, 0.1]", "\n", "", "weights", "=", "[", "0.005", ",", "0.01", ",", "0.02", ",", "0.08", ",", "0.32", "]", "# as in original article", "\n", "smoothness_weight", "=", "2e-3", "\n", "mask_weight", "=", "1e-2", "\n", "\n", "mask_loss", ",", "smooth_loss", ",", "diff_loss", ",", "ssim_loss", ",", "psnr_loss", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "snp", "in", "range", "(", "0", ",", "snippet_len", "-", "1", ")", ":", "\n", "        ", "frame_1", "=", "frames", "[", ":", ",", "snp", ",", ":", ",", ":", ",", ":", "]", "\n", "frame_2", "=", "frames", "[", ":", ",", "snp", "+", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "for", "i", ",", "flow", "in", "enumerate", "(", "flow_pyramid", ")", ":", "\n", "            ", "if", "i", "not", "in", "compute_levels", ":", "\n", "                ", "continue", "\n", "\n", "# flo = flow.view((-1,) + flow.size()[-3:])", "\n", "", "flo", "=", "flow", "[", ":", ",", "0", ",", "snp", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "div_flow", "!=", "1.0", ":", "\n", "                ", "flo", "=", "flo", "*", "div_flow", "\n", "", "if", "compute_size", "is", "None", ":", "\n", "                ", "if", "list", "(", "frame_1", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "list", "(", "flo", ".", "shape", "[", "-", "2", ":", "]", ")", ":", "\n", "                    ", "frame_1", "=", "interpolate", "(", "frame_1", ",", "flo", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "frame_2", "=", "interpolate", "(", "frame_2", ",", "flo", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "f_h", ",", "f_w", "=", "frame_1", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "list", "(", "frame_1", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "w_h", ",", "w_w", "]", ":", "\n", "                    ", "frame_1", "=", "interpolate", "(", "frame_1", ",", "(", "w_h", ",", "w_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "frame_2", "=", "interpolate", "(", "frame_2", ",", "(", "w_h", ",", "w_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "if", "list", "(", "flo", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "w_h", ",", "w_w", "]", ":", "\n", "                    ", "flo", "=", "interpolate", "(", "flo", ",", "(", "w_h", ",", "w_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "flo", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "(", "w_w", "/", "f_w", ")", "\n", "flo", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*=", "(", "w_h", "/", "f_h", ")", "\n", "\n", "", "", "warped_frames", "=", "warp", "(", "frame_2", ",", "flo", ")", "\n", "if", "mask_pyramid", "is", "not", "None", "and", "(", "i", "in", "mask_levels", ")", ":", "\n", "                ", "mask", "=", "mask_pyramid", "[", "i", "]", "\n", "frame_1", "=", "frame_1", "*", "mask", "\n", "warped_frames", "=", "warped_frames", "*", "mask", "\n", "_mask_loss", "=", "(", "1.0", "-", "mask", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                ", "_mask_loss", "=", "0.0", "\n", "\n", "", "_diff_loss", ",", "_ssim_loss", ",", "_psnr_loss", "=", "reconstruct_loss", "(", "frame_1", ",", "warped_frames", ",", "averge", "=", "False", ")", "\n", "\n", "diff_loss", "+=", "weights", "[", "i", "]", "*", "_diff_loss", "\n", "ssim_loss", "+=", "weights", "[", "i", "]", "*", "_ssim_loss", "\n", "psnr_loss", "+=", "weights", "[", "i", "]", "*", "_psnr_loss", "\n", "\n", "# smoothness_loss", "\n", "#d_uv_x = charbonnier_penalty(flo[:, :, :, 2:] + flo[:, :, :, :-2] -  2*flo[:, :, :, 1:-1], averge=False)", "\n", "#d_uv_y = charbonnier_penalty(flo[:, :, 2:, :] + flo[:, :, :-2, :] -  2*flo[:, :, 1:-1, :], averge=False)", "\n", "d_uv_x", "=", "charbonnier_penalty", "(", "flo", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "flo", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ",", "averge", "=", "False", ")", "\n", "d_uv_y", "=", "charbonnier_penalty", "(", "flo", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "flo", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ",", "averge", "=", "False", ")", "\n", "smooth_loss", "+=", "smoothness_weight", "*", "weights", "[", "i", "]", "*", "(", "d_uv_x", "+", "d_uv_y", ")", "\n", "mask_loss", "+=", "mask_weight", "*", "weights", "[", "i", "]", "*", "_mask_loss", "\n", "\n", "", "", "if", "args", ".", "print_loss", ":", "\n", "        ", "print", "(", "\"diff: %.3f ssim: %.3f psnr: %.3f, mask: %.3f, smooth: %.3f \"", "%", "(", "\n", "diff_loss", "if", "isinstance", "(", "diff_loss", ",", "numbers", ".", "Number", ")", "else", "diff_loss", ".", "item", "(", ")", ",", "\n", "ssim_loss", "if", "isinstance", "(", "ssim_loss", ",", "numbers", ".", "Number", ")", "else", "ssim_loss", ".", "item", "(", ")", ",", "\n", "psnr_loss", "if", "isinstance", "(", "psnr_loss", ",", "numbers", ".", "Number", ")", "else", "psnr_loss", ".", "item", "(", ")", ",", "\n", "mask_loss", "if", "isinstance", "(", "mask_loss", ",", "numbers", ".", "Number", ")", "else", "mask_loss", ".", "item", "(", ")", ",", "\n", "smooth_loss", "if", "isinstance", "(", "smooth_loss", ",", "numbers", ".", "Number", ")", "else", "smooth_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "all_losses", "=", "mask_loss", "+", "smooth_loss", "+", "diff_loss", "+", "ssim_loss", "+", "psnr_loss", "\n", "return", "all_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FlyingChairs.FlyingChairs.__init__": [[19, 68], ["sorted", "sorted", "range", "list", "random.shuffle", "dataset_utils.util_func.get_transform_flow", "glob.glob.glob", "glob.glob.glob", "len", "len", "len", "len", "range", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "dataset_utils.frame_utils.read_gen", "math.floor", "math.floor", "math.ceil", "math.ceil", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_transform_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "'/path/to/FlyingChairs_release/data'", ",", "replicates", "=", "1", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "train_size", "=", "args", ".", "train_size", "\n", "self", ".", "render_size", "=", "args", ".", "render_size", "\n", "self", ".", "real_size", "=", "None", "\n", "self", ".", "replicates", "=", "replicates", "\n", "\n", "images", "=", "sorted", "(", "glob", "(", "join", "(", "root", ",", "'*.ppm'", ")", ")", ")", "\n", "\n", "self", ".", "flow_list", "=", "sorted", "(", "glob", "(", "join", "(", "root", ",", "'*.flo'", ")", ")", ")", "\n", "\n", "assert", "(", "len", "(", "images", ")", "//", "2", "==", "len", "(", "self", ".", "flow_list", ")", ")", "\n", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "flow_list", ")", ")", ":", "\n", "            ", "im1", "=", "images", "[", "2", "*", "i", "]", "\n", "im2", "=", "images", "[", "2", "*", "i", "+", "1", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "im1", ",", "im2", "]", "]", "\n", "\n", "", "assert", "len", "(", "self", ".", "image_list", ")", "==", "len", "(", "self", ".", "flow_list", ")", "\n", "# shuffle", "\n", "inds", "=", "list", "(", "range", "(", "len", "(", "self", ".", "image_list", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "inds", ")", "\n", "self", ".", "image_list", "=", "[", "a", "for", "a", "in", "self", ".", "image_list", "]", "\n", "self", ".", "flow_list", "=", "[", "a", "for", "a", "in", "self", ".", "flow_list", "]", "\n", "\n", "self", ".", "real_size", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "0", "]", "[", "0", "]", ")", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "render_size", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "# choice the closest size", "\n", "            ", "f_h", ",", "f_w", "=", "self", ".", "real_size", "[", ":", "2", "]", "\n", "\n", "min_h", ",", "min_w", "=", "math", ".", "floor", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "floor", "(", "f_w", "/", "64", ")", "*", "64", "\n", "max_h", ",", "max_w", "=", "math", ".", "ceil", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "ceil", "(", "f_w", "/", "64", ")", "*", "64", "\n", "\n", "re_h", "=", "min_h", "if", "(", "abs", "(", "min_h", "-", "f_h", ")", "<=", "abs", "(", "max_h", "-", "f_h", ")", ")", "else", "max_h", "\n", "re_w", "=", "min_w", "if", "(", "abs", "(", "min_w", "-", "f_w", ")", "<=", "abs", "(", "max_w", "-", "f_w", ")", ")", "else", "max_w", "\n", "self", ".", "render_size", "=", "[", "re_h", ",", "re_w", "]", "\n", "", "assert", "[", "self", ".", "render_size", "[", "0", "]", "%", "64", ",", "self", ".", "render_size", "[", "0", "]", "%", "64", "]", "==", "[", "0", ",", "0", "]", "\n", "\n", "# Cautious!", "\n", "args", ".", "render_size", "=", "self", ".", "render_size", "\n", "args", ".", "real_size", "=", "self", ".", "real_size", "\n", "\n", "trans_size", "=", "self", ".", "train_size", "if", "self", ".", "is_train", "else", "self", ".", "render_size", "\n", "self", ".", "transform", "=", "get_transform_flow", "(", "trans_size", "=", "trans_size", ",", "is_train", "=", "self", ".", "is_train", ",", "\n", "sparse", "=", "False", ",", "div_flow", "=", "self", ".", "args", ".", "div_flow", ",", "ct_type", "=", "args", ".", "ct_type", ")", "\n", "assert", "(", "len", "(", "self", ".", "image_list", ")", "==", "len", "(", "self", ".", "flow_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FlyingChairs.FlyingChairs.__getitem__": [[69, 84], ["dataset_utils.frame_utils.read_gen", "dataset_utils.frame_utils.read_gen", "dataset_utils.frame_utils.read_gen", "com_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "target_transform", "len", "input_transform", "input_transform"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "image_list", ")", "\n", "\n", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "flow", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "\n", "images", "=", "[", "img1", ",", "img2", "]", "\n", "input_transform", ",", "target_transform", ",", "com_transform", "=", "self", ".", "transform", "\n", "\n", "images", ",", "flow", "=", "com_transform", "(", "images", ",", "[", "flow", "]", ")", "\n", "images", "=", "torch", ".", "stack", "(", "(", "input_transform", "(", "images", "[", "0", "]", ")", ",", "input_transform", "(", "images", "[", "1", "]", ")", ")", ",", "dim", "=", "0", ")", "# Modified", "\n", "flow", "=", "target_transform", "(", "flow", "[", "0", "]", ")", "\n", "\n", "return", "{", "'frames'", ":", "images", ",", "'flows'", ":", "flow", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FlyingChairs.FlyingChairs.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "*", "self", ".", "replicates", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagePaths.__init__": [[18, 35], ["dataset_utils.util_func.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "path_list", ",", "class_idx_list", ",", "loader", "=", "default_loader", ",", "extensions", "=", "IMG_EXTENSIONS", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ")", ":", "\n", "        ", "samples", "=", "make_dataset", "(", "path_list", ",", "class_idx_list", ",", "extensions", ")", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files !\\n\"", "\n", "\"Supported extensions are: \"", "+", "\",\"", ".", "join", "(", "extensions", ")", ")", ")", "\n", "\n", "", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "samples", "]", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagePaths.__getitem__": [[36, 52], ["GenericReader.ImagePaths.loader", "GenericReader.ImagePaths.transform", "GenericReader.ImagePaths.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagePaths.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagePaths.__repr__": [[56, 64], ["GenericReader.ImagePaths.__len__", "GenericReader.ImagePaths.transform.__repr__().replace", "GenericReader.ImagePaths.target_transform.__repr__().replace", "GenericReader.ImagePaths.transform.__repr__", "GenericReader.ImagePaths.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.VideoAsFrames.__init__": [[67, 86], ["enumerate", "GenericReader.ImagePaths.__init__", "len", "len", "len", "range", "list", "random.shuffle", "all_images.append", "all_class_idxs.append", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "video_dir_list", ",", "class_idxs_list", ",", "frames_num_list", ",", "shuffle", "=", "False", ",", "img_format", "=", "'jpg'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "assert", "len", "(", "video_dir_list", ")", "==", "len", "(", "class_idxs_list", ")", "==", "len", "(", "frames_num_list", ")", "\n", "all_images", "=", "[", "]", "\n", "all_class_idxs", "=", "[", "]", "\n", "for", "i", ",", "vp", "in", "enumerate", "(", "video_dir_list", ")", ":", "\n", "            ", "for", "f_ind", "in", "range", "(", "frames_num_list", "[", "i", "]", ")", ":", "\n", "                ", "all_images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "vp", ",", "\"frame%06d.%s\"", "%", "(", "f_ind", "+", "1", ",", "img_format", ")", ")", ")", "\n", "all_class_idxs", ".", "append", "(", "class_idxs_list", "[", "i", "]", ")", "\n", "", "", "if", "shuffle", ":", "\n", "            ", "ind", "=", "list", "(", "range", "(", "len", "(", "all_images", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "ind", ")", "\n", "all_images", "=", "[", "all_images", "[", "k", "]", "for", "k", "in", "ind", "]", "\n", "all_class_idxs", "=", "[", "all_class_idxs", "[", "t", "]", "for", "t", "in", "ind", "]", "\n", "\n", "", "super", "(", "VideoAsFrames", ",", "self", ")", ".", "__init__", "(", "all_images", ",", "all_class_idxs", ",", "loader", ",", "IMG_EXTENSIONS", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.VideoAsTSN.__init__": [[96, 120], ["len", "len", "len", "list", "random.shuffle", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ",", "video_dir_list", ",", "class_idxs_list", ",", "frames_num_list", ",", "K", "=", "8", ",", "snippet_len", "=", "5", ",", "\n", "shuffle", "=", "False", ",", "merged", "=", "True", ",", "img_format", "=", "'jpg'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ",", "group_transform", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "video_dir_list", ")", "==", "len", "(", "class_idxs_list", ")", "==", "len", "(", "frames_num_list", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "ind", "=", "list", "(", "range", "(", "len", "(", "video_dir_list", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "ind", ")", "\n", "video_dir_list", "=", "[", "video_dir_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "class_idxs_list", "=", "[", "class_idxs_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "frames_num_list", "=", "[", "frames_num_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "", "self", ".", "videos", "=", "video_dir_list", "\n", "self", ".", "class_idxs", "=", "class_idxs_list", "\n", "self", ".", "frame_num", "=", "frames_num_list", "\n", "self", ".", "group_transform", "=", "group_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "merged", "=", "merged", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "snippet_len", "=", "snippet_len", "\n", "self", ".", "img_format", "=", "img_format", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.VideoAsTSN.__getitem__": [[121, 162], ["dataset_utils.util_func.get_sample_index", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "GenericReader.VideoAsTSN.target_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "GenericReader.VideoAsTSN.append", "GenericReader.VideoAsTSN.transform", "GenericReader.VideoAsTSN.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "GenericReader.VideoAsTSN.loader", "GenericReader.VideoAsTSN.transform", "GenericReader.VideoAsTSN.loader", "GenericReader.VideoAsTSN.transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "GenericReader.VideoAsTSN.transform"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_sample_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "v_path", ",", "v_class", ",", "v_fnum", "=", "self", ".", "videos", "[", "index", "]", ",", "self", ".", "class_idxs", "[", "index", "]", ",", "self", ".", "frame_num", "[", "index", "]", "\n", "img_idxs", "=", "get_sample_index", "(", "v_fnum", ",", "self", ".", "K", ",", "self", ".", "snippet_len", ",", "stride", "=", "self", ".", "args", ".", "stride", ")", "\n", "\n", "if", "self", ".", "merged", ":", "\n", "            ", "loaded_imgs", "=", "[", "]", "\n", "for", "snp_idx", "in", "img_idxs", ":", "\n", "                ", "for", "im_idx", "in", "snp_idx", ":", "\n", "                    ", "loaded_imgs", ".", "append", "(", "self", ".", "loader", "(", "\n", "os", ".", "path", ".", "join", "(", "v_path", ",", "\"frame%06d.%s\"", "%", "(", "im_idx", "+", "1", ",", "self", ".", "img_format", ")", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "group_transform", ":", "\n", "                    ", "loaded_imgs", "=", "self", ".", "transform", "(", "loaded_imgs", ")", "\n", "", "else", ":", "\n", "                    ", "loaded_imgs", "=", "[", "self", ".", "transform", "(", "I", ")", "for", "I", "in", "loaded_imgs", "]", "\n", "", "seg_imgs", "=", "torch", ".", "stack", "(", "loaded_imgs", ")", "\n", "", "else", ":", "\n", "                ", "seg_imgs", "=", "loaded_imgs", "\n", "\n", "", "", "else", ":", "\n", "            ", "seg_imgs", "=", "[", "]", "\n", "for", "snp_idx", "in", "img_idxs", ":", "\n", "                ", "snp_img", "=", "[", "]", "\n", "for", "im_idx", "in", "snp_idx", ":", "\n", "                    ", "snp_img", ".", "append", "(", "self", ".", "loader", "(", "\n", "os", ".", "path", ".", "join", "(", "v_path", ",", "\"frame%06d.%s\"", "%", "(", "im_idx", "+", "1", ",", "self", ".", "img_format", ")", ")", ")", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "if", "self", ".", "group_transform", ":", "\n", "                        ", "snp_img", "=", "self", ".", "transform", "(", "snp_img", ")", "\n", "", "else", ":", "\n", "                        ", "snp_img", "=", "[", "self", ".", "transform", "(", "I", ")", "for", "I", "in", "snp_img", "]", "\n", "", "seg_imgs", ".", "append", "(", "torch", ".", "stack", "(", "snp_img", ")", ")", "\n", "", "else", ":", "\n", "                    ", "seg_imgs", ".", "append", "(", "snp_img", ")", "\n", "", "", "seg_imgs", "=", "torch", ".", "stack", "(", "seg_imgs", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "v_class", "=", "self", ".", "target_transform", "(", "v_class", ")", "\n", "\n", "", "return", "seg_imgs", ",", "v_class", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.VideoAsTSN.__len__": [[163, 165], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.VideoAsTSN.__repr__": [[166, 174], ["GenericReader.VideoAsTSN.__len__", "GenericReader.VideoAsTSN.transform.__repr__().replace", "GenericReader.VideoAsTSN.target_transform.__repr__().replace", "GenericReader.VideoAsTSN.transform.__repr__", "GenericReader.VideoAsTSN.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagesFromFolder.__init__": [[180, 204], ["sorted", "range", "len", "glob.glob.glob", "dataset_utils.frame_utils.read_gen", "join", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "is_cropped", ",", "root", "=", "'/path/to/frames/only/folder'", ",", "iext", "=", "'png'", ",", "replicates", "=", "1", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "is_cropped", "=", "is_cropped", "\n", "self", ".", "crop_size", "=", "args", ".", "crop_size", "\n", "self", ".", "render_size", "=", "args", ".", "inference_size", "\n", "self", ".", "replicates", "=", "replicates", "\n", "\n", "images", "=", "sorted", "(", "glob", "(", "join", "(", "root", ",", "'*.'", "+", "iext", ")", ")", ")", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", "-", "1", ")", ":", "\n", "            ", "im1", "=", "images", "[", "i", "]", "\n", "im2", "=", "images", "[", "i", "+", "1", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "im1", ",", "im2", "]", "]", "\n", "\n", "", "self", ".", "size", "=", "len", "(", "self", ".", "image_list", ")", "\n", "\n", "self", ".", "frame_size", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "0", "]", "[", "0", "]", ")", ".", "shape", "\n", "\n", "if", "(", "self", ".", "render_size", "[", "0", "]", "<", "0", ")", "or", "(", "self", ".", "render_size", "[", "1", "]", "<", "0", ")", "or", "(", "self", ".", "frame_size", "[", "0", "]", "%", "64", ")", "or", "(", "\n", "self", ".", "frame_size", "[", "1", "]", "%", "64", ")", ":", "\n", "            ", "self", ".", "render_size", "[", "0", "]", "=", "(", "(", "self", ".", "frame_size", "[", "0", "]", ")", "//", "64", ")", "*", "64", "\n", "self", ".", "render_size", "[", "1", "]", "=", "(", "(", "self", ".", "frame_size", "[", "1", "]", ")", "//", "64", ")", "*", "64", "\n", "\n", "", "args", ".", "inference_size", "=", "self", ".", "render_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagesFromFolder.__getitem__": [[205, 223], ["dataset_utils.frame_utils.read_gen", "dataset_utils.frame_utils.read_gen", "list", "np.array().transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dataset_utils.util_func.StaticRandomCrop", "dataset_utils.util_func.StaticCenterCrop", "map", "torch.from_numpy.astype", "torch.from_numpy.astype", "np.array", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy.size", "torch.from_numpy.size", "torch.from_numpy.size", "torch.from_numpy.size"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "index", "%", "self", ".", "size", "\n", "\n", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "images", "=", "[", "img1", ",", "img2", "]", "\n", "image_size", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "is_cropped", ":", "\n", "            ", "cropper", "=", "StaticRandomCrop", "(", "image_size", ",", "self", ".", "crop_size", ")", "\n", "", "else", ":", "\n", "            ", "cropper", "=", "StaticCenterCrop", "(", "image_size", ",", "self", ".", "render_size", ")", "\n", "", "images", "=", "list", "(", "map", "(", "cropper", ",", "images", ")", ")", "\n", "\n", "images", "=", "np", ".", "array", "(", "images", ")", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "return", "[", "images", "]", ",", "[", "torch", ".", "zeros", "(", "images", ".", "size", "(", ")", "[", "0", ":", "1", "]", "+", "(", "2", ",", ")", "+", "images", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.GenericReader.ImagesFromFolder.__len__": [[224, 226], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "*", "self", ".", "replicates", "", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_jhmdb_info": [[5, 40], ["os.path.join", "line.strip().split", "int", "int", "line.strip().split", "open", "open", "int", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "line.strip", "os.path.join", "line.strip", "v_name.split", "glob.glob", "glob.glob"], "function", ["None"], ["def", "get_jhmdb_info", "(", "root", "=", "None", ",", "split", "=", "1", ",", "flow_type", "=", "'com'", ")", ":", "\n", "    ", "root", "=", "'/data/shuosen/JHMDB'", "if", "root", "is", "None", "else", "root", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'list_files'", ",", "'split_%d.txt'", "%", "split", ")", "\n", "\n", "class_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'list_files'", ",", "'class_name.txt'", ")", ")", "]", "\n", "class_idx", "=", "{", "n", ":", "int", "(", "idx", ")", "for", "n", ",", "idx", "in", "class_info", "}", "\n", "idx_class", "=", "{", "int", "(", "idx", ")", ":", "n", "for", "n", ",", "idx", "in", "class_info", "}", "\n", "\n", "split_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "split_path", ",", "'r'", ")", "]", "\n", "split_info", "=", "[", "(", "int", "(", "class_ind", ")", ",", "v_name", ".", "split", "(", "'.avi'", ")", "[", "0", "]", ",", "int", "(", "set_ind", ")", ")", "for", "class_ind", ",", "v_name", ",", "set_ind", "in", "split_info", "]", "\n", "\n", "frames_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Rename_Images'", ",", "idx_class", "[", "c_ind", "]", ",", "vname", ")", ",", "c_ind", ",", "set_ind", ")", "for", "\n", "c_ind", ",", "vname", ",", "set_ind", "in", "split_info", "]", "\n", "flow_ann_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'puppet_flow_ann'", ",", "idx_class", "[", "c_ind", "]", ",", "vname", ",", "'puppet_flow.mat'", ")", ",", "set_ind", ")", "for", "\n", "c_ind", ",", "vname", ",", "set_ind", "in", "split_info", "]", "\n", "flow_com_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'puppet_flow_com'", ",", "idx_class", "[", "c_ind", "]", ",", "vname", ",", "'puppet_flow.mat'", ")", ",", "set_ind", ")", "for", "\n", "c_ind", ",", "vname", ",", "set_ind", "in", "split_info", "]", "\n", "mask_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'puppet_mask'", ",", "idx_class", "[", "c_ind", "]", ",", "vname", ",", "'puppet_mask.mat'", ")", ",", "set_ind", ")", "for", "\n", "c_ind", ",", "vname", ",", "set_ind", "in", "split_info", "]", "\n", "\n", "frames_train", "=", "[", "(", "p", ",", "len", "(", "glob", ".", "glob", "(", "p", "+", "'/*.png'", ")", ")", ",", "c_ind", ")", "for", "p", ",", "c_ind", ",", "set_ind", "in", "frames_info", "if", "set_ind", "==", "1", "]", "\n", "frames_test", "=", "[", "(", "p", ",", "len", "(", "glob", ".", "glob", "(", "p", "+", "'/*.png'", ")", ")", ",", "c_ind", ")", "for", "p", ",", "c_ind", ",", "set_ind", "in", "frames_info", "if", "set_ind", "==", "2", "]", "\n", "\n", "flow_ann_train", "=", "[", "p", "for", "p", ",", "set_ind", "in", "flow_ann_info", "if", "set_ind", "==", "1", "]", "\n", "flow_ann_test", "=", "[", "p", "for", "p", ",", "set_ind", "in", "flow_ann_info", "if", "set_ind", "==", "2", "]", "\n", "\n", "flow_com_train", "=", "[", "p", "for", "p", ",", "set_ind", "in", "flow_com_info", "if", "set_ind", "==", "1", "]", "\n", "flow_com_test", "=", "[", "p", "for", "p", ",", "set_ind", "in", "flow_com_info", "if", "set_ind", "==", "2", "]", "\n", "\n", "mask_train", "=", "[", "p", "for", "p", ",", "set_ind", "in", "mask_info", "if", "set_ind", "==", "1", "]", "\n", "mask_test", "=", "[", "p", "for", "p", ",", "set_ind", "in", "mask_info", "if", "set_ind", "==", "2", "]", "\n", "\n", "train_info", "=", "[", "frames_train", ",", "flow_ann_train", ",", "flow_com_train", ",", "mask_train", "]", "\n", "test_info", "=", "[", "frames_test", ",", "flow_ann_test", ",", "flow_com_test", ",", "mask_test", "]", "\n", "return", "train_info", ",", "test_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_flyingchairs_info": [[42, 50], ["line.strip", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_flyingchairs_info", "(", "root", "=", "None", ")", ":", "\n", "    ", "ID_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'list_files'", ",", "'ID_list.txt'", ")", ",", "'r'", ")", "]", "\n", "path_list", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "ID", "+", "'_img1.ppm'", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "ID", "+", "'_img2.ppm'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "ID", "+", "'_flow.flo'", ")", ")", "for", "ID", "in", "ID_list", "]", "\n", "\n", "train_info", "=", "path_list", "[", ":", "20000", "]", "\n", "test_info", "=", "path_list", "[", "20000", ":", "]", "\n", "return", "train_info", ",", "test_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_mpi_info": [[52, 96], ["print", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "os.listdir", "int", "len", "range", "range", "train_info.append", "os.path.join", "len", "len", "range", "range", "test_info.append", "n_ind.strip().split", "open", "os.listdir", "rgb_info.append", "flow_info.append", "os.listdir", "os.listdir", "clean_info.append", "final_info.append", "n_ind.strip().split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "n_ind.strip", "n_ind.strip"], "function", ["None"], ["", "def", "get_mpi_info", "(", "root", "=", "None", ",", "pass_name", "=", "'clean'", ",", "flow_type", "=", "'flow'", ")", ":", "\n", "# pass_name: albedo/ clean/final/", "\n", "# mode: training / test", "\n", "    ", "print", "(", "'++ MPI flow type: '", ",", "pass_name", ")", "\n", "root", "=", "'/home/share/MPI-Sintel-complete/'", "if", "root", "is", "None", "else", "root", "\n", "\n", "mode", "=", "'training'", "\n", "rgb_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "pass_name", ")", "\n", "flow_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "flow_type", ")", "\n", "\n", "class_ind", "=", "{", "n_ind", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ":", "int", "(", "n_ind", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "1", "]", ")", "for", "n_ind", "in", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'class_id.txt'", ")", ",", "'r'", ")", "}", "\n", "class_names", "=", "os", ".", "listdir", "(", "rgb_root", ")", "\n", "\n", "train_info", "=", "[", "]", "\n", "for", "cls", "in", "class_names", ":", "\n", "        ", "rgb_info", "=", "[", "]", "\n", "flow_info", "=", "[", "]", "\n", "fn", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "rgb_root", ",", "cls", ")", ")", ")", "\n", "cls_idx", "=", "class_ind", "[", "cls", "]", "\n", "for", "n", "in", "range", "(", "fn", ")", ":", "\n", "            ", "rgb_info", ".", "append", "(", "os", ".", "path", ".", "join", "(", "rgb_root", ",", "cls", ",", "\"frame_%04d.png\"", "%", "(", "n", "+", "1", ")", ")", ")", "\n", "", "for", "n", "in", "range", "(", "fn", "-", "1", ")", ":", "\n", "            ", "flow_info", ".", "append", "(", "os", ".", "path", ".", "join", "(", "flow_root", ",", "cls", ",", "\"frame_%04d.flo\"", "%", "(", "n", "+", "1", ")", ")", ")", "\n", "\n", "", "train_info", ".", "append", "(", "[", "rgb_info", ",", "flow_info", ",", "cls_idx", "]", ")", "\n", "\n", "", "test_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'test'", ")", "\n", "\n", "class_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "test_root", ",", "'clean'", ")", ")", "\n", "test_info", "=", "[", "]", "\n", "for", "cls", "in", "class_names", ":", "\n", "        ", "clean_info", "=", "[", "]", "\n", "final_info", "=", "[", "]", "\n", "fn_c", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "test_root", ",", "'clean'", ",", "cls", ")", ")", ")", "\n", "fn_f", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "test_root", ",", "'final'", ",", "cls", ")", ")", ")", "\n", "cls_idx", "=", "class_ind", "[", "cls", "]", "\n", "for", "n", "in", "range", "(", "fn_c", ")", ":", "\n", "            ", "clean_info", ".", "append", "(", "os", ".", "path", ".", "join", "(", "test_root", ",", "'clean'", ",", "cls", ",", "\"frame_%04d.png\"", "%", "(", "n", "+", "1", ")", ")", ")", "\n", "", "for", "n", "in", "range", "(", "fn_f", ")", ":", "\n", "            ", "final_info", ".", "append", "(", "os", ".", "path", ".", "join", "(", "test_root", ",", "'final'", ",", "cls", ",", "\"frame_%04d.png\"", "%", "(", "n", "+", "1", ")", ")", ")", "\n", "", "test_info", ".", "append", "(", "[", "clean_info", ",", "final_info", ",", "cls_idx", "]", ")", "\n", "\n", "", "return", "train_info", ",", "test_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_ucf101_info": [[98, 133], ["os.path.join", "dict", "dict", "os.path.join", "os.path.join", "os.path.join", "dict", "os.path.join", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip().split", "open", "open", "int", "open", "int", "os.path.join", "open", "os.path.join", "zip", "zip", "line.strip", "line.strip", "line.strip", "[].split", "line.strip", "v.split", "int", "p.strip().split", "p.strip"], "function", ["None"], ["", "def", "get_ucf101_info", "(", "root", "=", "None", ",", "split", "=", "1", ",", "num", "=", "-", "1", ")", ":", "\n", "    ", "root", "=", "'/home/share2/ucf-data/'", "if", "root", "is", "None", "else", "root", "\n", "# root = '/ssd/ucf-data/'", "\n", "class_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'UCF-101-list/classInd.txt'", ")", "\n", "idx_vname", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "class_txt", ",", "'r'", ")", "]", "\n", "idx_to_class", "=", "dict", "(", "idx_vname", ")", "\n", "vname_idx", "=", "[", "row", "[", ":", ":", "-", "1", "]", "for", "row", "in", "idx_vname", "]", "\n", "class_to_idx", "=", "dict", "(", "vname_idx", ")", "\n", "\n", "train_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'UCF-101-list/trainlist%02d.txt'", "%", "split", ")", "\n", "test_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'UCF-101-list/testlist%02d.txt'", "%", "split", ")", "\n", "\n", "frames_num_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'UCF-101-list/video_framenum.txt'", ")", "\n", "framenum_v", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "for", "line", "in", "open", "(", "frames_num_txt", ",", "'r'", ")", "]", "\n", "framenum_v", "=", "[", "(", "a", ",", "int", "(", "b", ")", ")", "for", "a", ",", "b", "in", "framenum_v", "]", "\n", "v_to_framenum", "=", "dict", "(", "framenum_v", ")", "\n", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'jpegs_256'", ")", "\n", "\n", "temp_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "train_txt", ",", "'r'", ")", "]", "\n", "temp_info", "=", "[", "(", "p", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "int", "(", "idx", ")", ")", "for", "p", ",", "idx", "in", "temp_info", "]", "\n", "train_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "v", ")", ",", "idx", "-", "1", ",", "v_to_framenum", "[", "v", "]", ")", "for", "v", ",", "idx", "in", "\n", "temp_info", "]", "# ! Remember idx: 0, 1, ... 100", "\n", "\n", "temp_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "for", "line", "in", "open", "(", "test_txt", ",", "'r'", ")", "]", "\n", "temp_info", "=", "[", "(", "class_n", ",", "v", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "class_n", ",", "v", "in", "temp_info", "]", "\n", "test_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "vname", ")", ",", "int", "(", "class_to_idx", "[", "class_name", "]", ")", "-", "1", ",", "v_to_framenum", "[", "vname", "]", ")", "for", "\n", "class_name", ",", "vname", "in", "temp_info", "]", "\n", "\n", "train_info", "=", "[", "k", "for", "k", "in", "zip", "(", "*", "train_info", ")", "]", "\n", "test_info", "=", "[", "k", "for", "k", "in", "zip", "(", "*", "test_info", ")", "]", "\n", "if", "num", "!=", "-", "1", ":", "\n", "        ", "train_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "train_info", "]", "\n", "test_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "test_info", "]", "\n", "", "return", "train_info", ",", "test_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_kinectics_mini_info": [[135, 152], ["l.strip().split", "l.strip().split", "open", "open", "int", "int", "int", "int", "int", "int", "l.strip", "l.strip"], "function", ["None"], ["", "def", "get_kinectics_mini_info", "(", "train_txt", "=", "None", ",", "val_txt", "=", "None", ",", "val_prefix", "=", "None", ",", "split", "=", "1", ",", "num", "=", "-", "1", ")", ":", "\n", "    ", "train_txt", "=", "'/home/share/Kinetics_mini_200/kinectics_mini_200_train2.txt'", "if", "train_txt", "is", "None", "else", "train_txt", "\n", "val_txt", "=", "'/home/share/Kinetics_mini_200/kinectics_mini_200_val.txt'", "if", "val_txt", "is", "None", "else", "val_txt", "\n", "val_prefix", "=", "'/data1/Kinetics/'", "if", "val_prefix", "is", "None", "else", "val_prefix", "\n", "\n", "train_info", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "l", "in", "open", "(", "train_txt", ")", "]", "\n", "val_info", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "l", "in", "open", "(", "val_txt", ")", "]", "\n", "val_info", "=", "[", "[", "val_prefix", "+", "v", "[", "0", "]", "]", "+", "v", "[", "1", ":", "]", "for", "v", "in", "val_info", "]", "# (path, begin_index, end_index, class_index)", "\n", "\n", "train_info", "=", "[", "[", "v", "[", "0", "]", ",", "int", "(", "v", "[", "1", "]", ")", ",", "int", "(", "v", "[", "2", "]", ")", ",", "int", "(", "v", "[", "3", "]", ")", "]", "for", "v", "in", "train_info", "]", "\n", "val_info", "=", "[", "[", "v", "[", "0", "]", ",", "int", "(", "v", "[", "1", "]", ")", ",", "int", "(", "v", "[", "2", "]", ")", ",", "int", "(", "v", "[", "3", "]", ")", "]", "for", "v", "in", "val_info", "]", "\n", "\n", "if", "num", "!=", "-", "1", ":", "\n", "        ", "train_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "train_info", "]", "\n", "test_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "test_info", "]", "\n", "# (path, begin_index, end_index, class_index)", "\n", "", "return", "train_info", ",", "val_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_hmdb_info": [[154, 181], ["os.path.join", "dict", "dict", "os.path.join", "os.path.join", "os.path.join", "line.strip().split", "line.strip().split", "line.strip().split", "open", "open", "os.path.join", "int", "int", "open", "os.path.join", "int", "int", "zip", "zip", "line.strip", "line.strip", "line.strip"], "function", ["None"], ["", "def", "get_hmdb_info", "(", "root", "=", "None", ",", "split", "=", "1", ",", "num", "=", "-", "1", ")", ":", "\n", "    ", "root", "=", "'/home/share/yijun/HMDB-51'", "if", "root", "is", "None", "else", "root", "\n", "class_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'class_id.txt'", ")", "\n", "idx_vname", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", ":", ":", "-", "1", "]", "for", "line", "in", "open", "(", "class_txt", ",", "'r'", ")", "]", "\n", "idx_to_class", "=", "dict", "(", "idx_vname", ")", "\n", "vname_idx", "=", "[", "row", "[", ":", ":", "-", "1", "]", "for", "row", "in", "idx_vname", "]", "\n", "class_to_idx", "=", "dict", "(", "vname_idx", ")", "\n", "\n", "train_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'split_lists/split%d_train.txt'", "%", "split", ")", "\n", "test_txt", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'split_lists/split%d_test.txt'", "%", "split", ")", "\n", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'jpegs_256'", ")", "\n", "\n", "temp_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "train_txt", ",", "'r'", ")", "]", "\n", "train_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "v", ")", ",", "int", "(", "idx", ")", ",", "int", "(", "frame_num", ")", ")", "for", "v", ",", "idx", ",", "frame_num", "in", "\n", "temp_info", "]", "# ! Remember idx: 0, 1, ... 100", "\n", "\n", "temp_info", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "test_txt", ",", "'r'", ")", "]", "\n", "test_info", "=", "[", "(", "os", ".", "path", ".", "join", "(", "root", ",", "v", ")", ",", "int", "(", "idx", ")", ",", "int", "(", "frame_num", ")", ")", "for", "v", ",", "idx", ",", "frame_num", "in", "\n", "temp_info", "]", "# ! Remember idx: 0, 1, ... 100", "\n", "\n", "train_info", "=", "[", "k", "for", "k", "in", "zip", "(", "*", "train_info", ")", "]", "\n", "test_info", "=", "[", "k", "for", "k", "in", "zip", "(", "*", "test_info", ")", "]", "\n", "if", "num", "!=", "-", "1", ":", "\n", "        ", "train_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "train_info", "]", "\n", "test_info", "=", "[", "lst", "[", ":", "num", "]", "for", "lst", "in", "test_info", "]", "\n", "", "return", "train_info", ",", "test_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.dataset_info": [[183, 195], ["print", "exit", "dataset_read.get_ucf101_info", "dataset_read.get_hmdb_info", "dataset_read.get_mpi_info", "dataset_read.get_jhmdb_info"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_ucf101_info", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_hmdb_info", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_mpi_info", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_jhmdb_info"], ["", "def", "dataset_info", "(", "dataset", "=", "'ucf101'", ",", "**", "kwargs", ")", ":", "\n", "    ", "root", "=", "kwargs", "[", "'root'", "]", "\n", "if", "dataset", "==", "'ucf101'", ":", "\n", "        ", "return", "get_ucf101_info", "(", "root", ",", "**", "kwargs", ")", "\n", "", "if", "dataset", "==", "'hmdb'", ":", "\n", "        ", "return", "get_hmdb_info", "(", "root", ",", "**", "kwargs", ")", "\n", "", "if", "dataset", "==", "'mpi'", ":", "\n", "        ", "return", "get_mpi_info", "(", "root", ",", "**", "kwargs", ")", "\n", "", "if", "dataset", "==", "'jhmdb'", ":", "\n", "        ", "return", "get_jhmdb_info", "(", "root", ",", "**", "kwargs", ")", "\n", "", "print", "(", "\"Dataset not supported yet!\"", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.MpiSintel.MpiSintel.__init__": [[20, 122], ["print", "join", "join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "dataset_utils.util_func.get_transform_flow", "len", "len", "sorted", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "open", "open", "glob.glob.glob", "int", "join", "join", "sorted", "range", "[].split", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f.write", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f.write", "dataset_utils.frame_utils.read_gen", "len", "len", "join", "glob.glob.glob", "p.strip().split", "math.floor", "math.floor", "math.ceil", "math.ceil", "abs", "abs", "abs", "abs", "join", "len", "p.strip().split", "open", "len", "len", "len", "open", "p.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "p.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_transform_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "''", ",", "pass_name", "=", "'clean'", ",", "replicates", "=", "1", ")", ":", "\n", "        ", "print", "(", "\"MPI pass:\\t\"", ",", "pass_name", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "train_size", "=", "args", ".", "train_size", "\n", "self", ".", "render_size", "=", "args", ".", "render_size", "\n", "self", ".", "real_size", "=", "None", "\n", "self", ".", "replicates", "=", "replicates", "\n", "self", ".", "is_test", "=", "False", "\n", "assert", "len", "(", "args", ".", "train_size", ")", "==", "len", "(", "args", ".", "render_size", ")", "==", "2", "\n", "\n", "flow_root", "=", "join", "(", "root", ",", "'flow'", ")", "\n", "image_root", "=", "join", "(", "root", ",", "pass_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "flow_root", ")", ":", "\n", "            ", "file_list", "=", "sorted", "(", "glob", "(", "join", "(", "flow_root", ",", "'*/*.flo'", ")", ")", ")", "\n", "\n", "self", ".", "flow_list", "=", "[", "]", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "\n", "for", "flo_path", "in", "file_list", ":", "\n", "                ", "fbase", "=", "flo_path", "[", "len", "(", "flow_root", ")", "+", "1", ":", "]", "\n", "fprefix", "=", "fbase", "[", ":", "-", "8", "]", "\n", "fnum", "=", "int", "(", "fbase", "[", "-", "8", ":", "-", "4", "]", ")", "\n", "\n", "img1", "=", "join", "(", "image_root", ",", "fprefix", "+", "\"%04d\"", "%", "(", "fnum", "+", "0", ")", "+", "'.png'", ")", "\n", "img2", "=", "join", "(", "image_root", ",", "fprefix", "+", "\"%04d\"", "%", "(", "fnum", "+", "1", ")", "+", "'.png'", ")", "\n", "\n", "self", ".", "image_list", "+=", "[", "[", "img1", ",", "img2", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flo_path", "]", "\n", "", "", "else", ":", "\n", "# test", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "self", ".", "flow_list", "=", "[", "]", "\n", "\n", "f_dirs", "=", "os", ".", "listdir", "(", "image_root", ")", "\n", "for", "fd", "in", "f_dirs", ":", "\n", "                ", "frames_list", "=", "sorted", "(", "glob", "(", "join", "(", "image_root", ",", "fd", ",", "'*.png'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "frames_list", ")", "-", "1", ")", ":", "\n", "                    ", "self", ".", "image_list", "+=", "[", "[", "frames_list", "[", "i", "]", ",", "frames_list", "[", "i", "+", "1", "]", "]", "]", "\n", "\n", "", "", "", "if", "self", ".", "args", ".", "split_mpi", ":", "\n", "            ", "prefix", "=", "self", ".", "image_list", "[", "0", "]", "[", "0", "]", ".", "split", "(", "'training/'", ")", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "split_mpi_path", "is", "None", ":", "\n", "                ", "print", "(", "\"Use combined list, MPI\"", ")", "\n", "split_dir", "=", "'./split_files/MPI_split'", "\n", "path_info", "=", "[", "]", "\n", "for", "dt", "in", "[", "'clean'", ",", "'final'", "]", ":", "\n", "                    ", "path_info", "+=", "[", "p", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "p", "in", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\n", "'mpi_train_%s_split%d.txt'", "%", "(", "dt", ",", "1", "if", "self", ".", "is_train", "else", "2", ")", ")", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "path_info", "=", "[", "p", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "p", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "split_mpi_path", ",", "\n", "'mpi_train_%s_split%d.txt'", "%", "(", "pass_name", ",", "1", "if", "self", ".", "is_train", "else", "2", ")", ")", ")", "]", "\n", "", "self", ".", "image_list", "=", "[", "[", "prefix", "+", "p1", ",", "prefix", "+", "p2", "]", "for", "p1", ",", "p2", ",", "_", "in", "path_info", "]", "\n", "self", ".", "flow_list", "=", "[", "prefix", "+", "p", "for", "_", ",", "_", ",", "p", "in", "path_info", "]", "\n", "print", "(", "\"use MPI  split, num_img: %d num_flo: %d\"", "%", "(", "len", "(", "self", ".", "image_list", ")", ",", "len", "(", "self", ".", "flow_list", ")", ")", ")", "\n", "\n", "# log path files", "\n", "", "save_path", "=", "args", ".", "save", "if", "args", ".", "save_flow_path", "is", "None", "else", "args", ".", "save_flow_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'input_path_img.log'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "p1", ",", "p2", "in", "self", ".", "image_list", ":", "\n", "                ", "f", ".", "write", "(", "p1", "+", "','", "+", "p2", "+", "'\\n'", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'input_path_flo.log'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "p", "in", "self", ".", "flow_list", ":", "\n", "                ", "f", ".", "write", "(", "p", "+", "'\\n'", ")", "\n", "", "", "print", "(", "\"input_path logged to: \"", ",", "args", ".", "save", ")", "\n", "\n", "\n", "self", ".", "real_size", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "0", "]", "[", "0", "]", ")", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "render_size", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "\n", "# choice the closest size", "\n", "            ", "f_h", ",", "f_w", "=", "self", ".", "real_size", "[", ":", "2", "]", "\n", "\n", "min_h", ",", "min_w", "=", "math", ".", "floor", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "floor", "(", "f_w", "/", "64", ")", "*", "64", "\n", "max_h", ",", "max_w", "=", "math", ".", "ceil", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "ceil", "(", "f_w", "/", "64", ")", "*", "64", "\n", "\n", "re_h", "=", "min_h", "if", "(", "abs", "(", "min_h", "-", "f_h", ")", "<=", "abs", "(", "max_h", "-", "f_h", ")", ")", "else", "max_h", "\n", "re_w", "=", "min_w", "if", "(", "abs", "(", "min_w", "-", "f_w", ")", "<=", "abs", "(", "max_w", "-", "f_w", ")", ")", "else", "max_w", "\n", "self", ".", "render_size", "=", "[", "re_h", ",", "re_w", "]", "\n", "\n", "\"\"\"\n            # choice the largest size  \n            self.render_size[0] = ( (self.real_size[0])//64 ) * 64\n            self.render_size[1] = ( (self.real_size[1])//64 ) * 64\n            \"\"\"", "\n", "\n", "", "assert", "[", "self", ".", "render_size", "[", "0", "]", "%", "64", ",", "self", ".", "render_size", "[", "0", "]", "%", "64", "]", "==", "[", "0", ",", "0", "]", "\n", "\n", "trans_size", "=", "self", ".", "train_size", "if", "self", ".", "is_train", "else", "self", ".", "render_size", "\n", "self", ".", "transform", "=", "get_transform_flow", "(", "trans_size", "=", "trans_size", ",", "is_train", "=", "self", ".", "is_train", ",", "sparse", "=", "False", ",", "\n", "div_flow", "=", "self", ".", "args", ".", "div_flow", ",", "ct_type", "=", "args", ".", "ct_type", ")", "\n", "if", "not", "self", ".", "is_test", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "image_list", ")", "==", "len", "(", "self", ".", "flow_list", ")", ")", "\n", "\n", "# Cautious!", "\n", "", "args", ".", "render_size", "=", "self", ".", "render_size", "\n", "args", ".", "real_size", "=", "self", ".", "real_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.MpiSintel.MpiSintel.__getitem__": [[123, 144], ["dataset_utils.frame_utils.read_gen", "dataset_utils.frame_utils.read_gen", "com_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "target_transform", "len", "dataset_utils.frame_utils.read_gen", "np.zeros_like", "input_transform", "input_transform"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "image_list", ")", "\n", "\n", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "if", "not", "self", ".", "is_test", ":", "\n", "            ", "flow", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "# random", "\n", "            ", "flow", "=", "np", ".", "zeros_like", "(", "img1", ")", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "", "images", "=", "[", "img1", ",", "img2", "]", "\n", "input_transform", ",", "target_transform", ",", "com_transform", "=", "self", ".", "transform", "\n", "\n", "images", ",", "flow", "=", "com_transform", "(", "images", ",", "[", "flow", "]", ")", "\n", "images", "=", "torch", ".", "stack", "(", "(", "input_transform", "(", "images", "[", "0", "]", ")", ",", "input_transform", "(", "images", "[", "1", "]", ")", ")", ",", "dim", "=", "0", ")", "# Modified", "\n", "flow", "=", "target_transform", "(", "flow", "[", "0", "]", ")", "\n", "\n", "return", "{", "'frames'", ":", "images", ",", "'flows'", ":", "flow", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.MpiSintel.MpiSintel.__len__": [[145, 147], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "*", "self", ".", "replicates", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.MpiSintel.MpiSintelClean.__init__": [[150, 153], ["MpiSintel.MpiSintel.__init__"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "''", ",", "replicates", "=", "1", ")", ":", "\n", "        ", "super", "(", "MpiSintelClean", ",", "self", ")", ".", "__init__", "(", "args", ",", "is_train", "=", "is_train", ",", "root", "=", "root", ",", "pass_name", "=", "'clean'", ",", "\n", "replicates", "=", "replicates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.MpiSintel.MpiSintelFinal.__init__": [[156, 159], ["MpiSintel.MpiSintel.__init__"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "''", ",", "replicates", "=", "1", ")", ":", "\n", "        ", "super", "(", "MpiSintelFinal", ",", "self", ")", ".", "__init__", "(", "args", ",", "is_train", "=", "is_train", ",", "root", "=", "root", ",", "pass_name", "=", "'final'", ",", "\n", "replicates", "=", "replicates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.HMDB.HMDBAsClips.__init__": [[18, 49], ["dataset_read.get_ucf101_info", "get_transform", "print", "len", "len", "len", "list", "random.shuffle", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_ucf101_info"], ["def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "None", ",", "crop_size", "=", "224", ",", "snippet_len", "=", "2", ",", "shuffle", "=", "False", ",", "K", "=", "1", ",", "\n", "loader", "=", "default_loader", ",", "replicates", "=", "1", ",", "div_flow", "=", "1.0", ",", "val_full", "=", "False", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "if", "self", ".", "args", ".", "inference", ":", "\n", "            ", "replicates", "=", "1", "\n", "shuffle", "=", "False", "\n", "print", "(", "\"[>>> Inference mode:  replicates: 1, shuffle: False <<<]\"", ")", "\n", "", "train_set", ",", "validation_set", "=", "dataset_read", ".", "get_ucf101_info", "(", "root", "=", "root", ")", "\n", "video_info", "=", "train_set", "if", "is_train", "else", "validation_set", "\n", "frames_list", ",", "class_list", ",", "frames_num", "=", "video_info", "\n", "assert", "len", "(", "frames_list", ")", "==", "len", "(", "class_list", ")", "==", "len", "(", "frames_num", ")", "\n", "assert", "mode", "in", "[", "'train'", ",", "'validation'", "]", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "ind", "=", "list", "(", "range", "(", "len", "(", "frames_list", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "ind", ")", "\n", "frames_list", "=", "[", "frames_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "class_list", "=", "[", "class_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "frames_num", "=", "[", "frames_num", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "", "self", ".", "loader", "=", "loader", "\n", "self", ".", "frames_list", "=", "frames_list", "\n", "self", ".", "class_list", "=", "class_list", "\n", "self", ".", "frames_num", "=", "frames_num", "\n", "\n", "self", ".", "snippet_len", "=", "snippet_len", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "replicates", "=", "replicates", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "transform", "=", "get_transform", "(", "trans_size", "=", "crop_size", ",", "is_train", "=", "(", "mode", "==", "'train'", ")", ",", "div_flow", "=", "div_flow", ",", "cr_rate", "=", "0.2", ",", "\n", "val_full", "=", "val_full", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.HMDB.HMDBAsClips.__getitem__": [[50, 81], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "dataset_utils.util_func.get_sample_index", "read_paths.append", "com_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "np.array", "input_transform", "range", "range", "HMDB.HMDBAsClips.loader"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_sample_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "frames_list", ")", "\n", "frames_path", ",", "class_idx", ",", "frames_num", "=", "self", ".", "frames_list", "[", "index", "]", ",", "self", ".", "class_list", "[", "index", "]", ",", "self", ".", "frames_num", "[", "index", "]", "\n", "\n", "if", "self", ".", "args", ".", "inference", ":", "\n", "            ", "K_clip_idxs", "=", "[", "list", "(", "range", "(", "begin", ",", "begin", "+", "self", ".", "snippet_len", ")", ")", "for", "begin", "in", "\n", "range", "(", "0", ",", "frames_num", ",", "self", ".", "snippet_len", ")", "]", "\n", "tmp", "=", "K_clip_idxs", "[", "-", "1", "]", "\n", "tmp", "=", "[", "(", "ind", "if", "ind", "<", "self", ".", "snippet_len", "else", "self", ".", "snippet_len", "-", "1", ")", "for", "ind", "in", "tmp", "]", "\n", "K_clip_idxs", "[", "-", "1", "]", "=", "tmp", "\n", "", "else", ":", "\n", "            ", "K_clip_idxs", "=", "get_sample_index", "(", "frames_num", ",", "self", ".", "K", ",", "self", ".", "snippet_len", ",", "stride", "=", "self", ".", "args", ".", "stride", ")", "\n", "", "K_clip_img", "=", "[", "]", "\n", "\n", "read_paths", "=", "[", "]", "\n", "for", "clip_idxs", "in", "K_clip_idxs", ":", "\n", "            ", "clip_paths", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "'frame%06d.jpg'", "%", "(", "im_idx", "+", "1", ")", ")", "for", "im_idx", "in", "clip_idxs", "]", "\n", "read_paths", ".", "append", "(", "clip_paths", ")", "\n", "\n", "clip_img", "=", "[", "np", ".", "array", "(", "self", ".", "loader", "(", "p", ")", ")", "for", "p", "in", "clip_paths", "]", "# (frame_num, H,W,C)", "\n", "\n", "input_transform", ",", "target_transform", ",", "com_transform", "=", "self", ".", "transform", "\n", "clip_img", ",", "_", "=", "com_transform", "(", "clip_img", ",", "None", ")", "\n", "clip_img", "=", "[", "input_transform", "(", "im", ")", "for", "im", "in", "clip_img", "]", "\n", "clip_img", "=", "torch", ".", "stack", "(", "clip_img", ")", "\n", "K_clip_img", ".", "append", "(", "clip_img", ")", "\n", "", "K_clip_img", "=", "torch", ".", "stack", "(", "K_clip_img", ",", "0", ")", "\n", "\n", "# (K, snippet_len, C,  H,W)", "\n", "return", "K_clip_img", ",", "class_idx", ",", "read_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.HMDB.HMDBAsClips.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "replicates", "*", "len", "(", "self", ".", "frames_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.HMDB.HMDBAsClips.__repr__": [[85, 93], ["HMDB.HMDBAsClips.__len__", "HMDB.HMDBAsClips.transform.__repr__().replace", "HMDB.HMDBAsClips.target_transform.__repr__().replace", "HMDB.HMDBAsClips.transform.__repr__", "HMDB.HMDBAsClips.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.UCF101.UCF101AsClips.__init__": [[21, 70], ["dataset_read.get_ucf101_info", "dataset_utils.util_func.get_transform_flow", "len", "len", "len", "list", "random.shuffle", "range", "dataset_utils.frame_utils.read_gen", "len", "math.floor", "math.floor", "math.ceil", "math.ceil", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.dataset_read.get_ucf101_info", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_transform_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "None", ",", "loader", "=", "default_loader", ",", "\n", "replicates", "=", "1", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "train_size", "=", "args", ".", "train_size", "\n", "self", ".", "render_size", "=", "args", ".", "render_size", "\n", "self", ".", "real_size", "=", "None", "\n", "self", ".", "replicates", "=", "replicates", "\n", "self", ".", "snippet_len", "=", "args", ".", "snippet_len", "\n", "self", ".", "K", "=", "args", ".", "K", "\n", "self", ".", "replicates", "=", "replicates", "\n", "\n", "train_set", ",", "validation_set", "=", "dataset_read", ".", "get_ucf101_info", "(", "root", "=", "root", ")", "\n", "video_info", "=", "train_set", "if", "is_train", "else", "validation_set", "\n", "frames_list", ",", "class_list", ",", "frames_num", "=", "video_info", "\n", "assert", "len", "(", "frames_list", ")", "==", "len", "(", "class_list", ")", "==", "len", "(", "frames_num", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "ind", "=", "list", "(", "range", "(", "len", "(", "frames_list", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "ind", ")", "\n", "frames_list", "=", "[", "frames_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "class_list", "=", "[", "class_list", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "frames_num", "=", "[", "frames_num", "[", "v", "]", "for", "v", "in", "ind", "]", "\n", "", "self", ".", "loader", "=", "loader", "\n", "self", ".", "frames_list", "=", "frames_list", "\n", "self", ".", "class_list", "=", "class_list", "\n", "self", ".", "frames_num", "=", "frames_num", "\n", "\n", "self", ".", "real_size", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "frames_list", "[", "0", "]", "+", "\"/frame000001.jpg\"", ")", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "render_size", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "# choice the closest size", "\n", "            ", "f_h", ",", "f_w", "=", "self", ".", "real_size", "[", ":", "2", "]", "\n", "\n", "min_h", ",", "min_w", "=", "math", ".", "floor", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "floor", "(", "f_w", "/", "64", ")", "*", "64", "\n", "max_h", ",", "max_w", "=", "math", ".", "ceil", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "ceil", "(", "f_w", "/", "64", ")", "*", "64", "\n", "\n", "re_h", "=", "min_h", "if", "(", "abs", "(", "min_h", "-", "f_h", ")", "<=", "abs", "(", "max_h", "-", "f_h", ")", ")", "else", "max_h", "\n", "re_w", "=", "min_w", "if", "(", "abs", "(", "min_w", "-", "f_w", ")", "<=", "abs", "(", "max_w", "-", "f_w", ")", ")", "else", "max_w", "\n", "self", ".", "render_size", "=", "[", "re_h", ",", "re_w", "]", "\n", "", "assert", "[", "self", ".", "render_size", "[", "0", "]", "%", "64", ",", "self", ".", "render_size", "[", "0", "]", "%", "64", "]", "==", "[", "0", ",", "0", "]", "\n", "\n", "# Cautious!", "\n", "args", ".", "render_size", "=", "self", ".", "render_size", "\n", "args", ".", "real_size", "=", "self", ".", "real_size", "\n", "\n", "trans_size", "=", "self", ".", "train_size", "if", "self", ".", "is_train", "else", "self", ".", "render_size", "\n", "self", ".", "transform", "=", "get_transform_flow", "(", "trans_size", "=", "trans_size", ",", "is_train", "=", "self", ".", "is_train", ",", "\n", "sparse", "=", "False", ",", "div_flow", "=", "self", ".", "args", ".", "div_flow", ",", "ct_type", "=", "args", ".", "ct_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.UCF101.UCF101AsClips.__getitem__": [[71, 95], ["dataset_utils.util_func.get_sample_index", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "read_paths.append", "com_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "np.array", "input_transform", "UCF101.UCF101AsClips.loader"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_sample_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "frames_list", ")", "\n", "frames_path", ",", "class_idx", ",", "frames_num", "=", "self", ".", "frames_list", "[", "index", "]", ",", "self", ".", "class_list", "[", "index", "]", ",", "self", ".", "frames_num", "[", "index", "]", "\n", "\n", "K_clip_idxs", "=", "get_sample_index", "(", "frames_num", ",", "self", ".", "K", ",", "self", ".", "snippet_len", ",", "stride", "=", "self", ".", "args", ".", "stride", ")", "\n", "K_clip_img", "=", "[", "]", "\n", "\n", "read_paths", "=", "[", "]", "\n", "for", "clip_idxs", "in", "K_clip_idxs", ":", "\n", "            ", "clip_paths", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "'frame%06d.jpg'", "%", "(", "im_idx", "+", "1", ")", ")", "for", "im_idx", "in", "clip_idxs", "]", "\n", "read_paths", ".", "append", "(", "clip_paths", ")", "\n", "\n", "clip_img", "=", "[", "np", ".", "array", "(", "self", ".", "loader", "(", "p", ")", ")", "for", "p", "in", "clip_paths", "]", "# (frame_num, H,W,C)", "\n", "\n", "input_transform", ",", "target_transform", ",", "com_transform", "=", "self", ".", "transform", "\n", "clip_img", ",", "_", "=", "com_transform", "(", "clip_img", ",", "None", ")", "\n", "clip_img", "=", "[", "input_transform", "(", "im", ")", "for", "im", "in", "clip_img", "]", "\n", "clip_img", "=", "torch", ".", "stack", "(", "clip_img", ")", "\n", "K_clip_img", ".", "append", "(", "clip_img", ")", "\n", "", "K_clip_img", "=", "torch", ".", "stack", "(", "K_clip_img", ",", "0", ")", "\n", "\n", "# (K, snippet_len, C,  H,W)", "\n", "return", "{", "'frames'", ":", "K_clip_img", ",", "'classes'", ":", "class_idx", ",", "'paths'", ":", "read_paths", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.UCF101.UCF101AsClips.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "replicates", "*", "len", "(", "self", ".", "frames_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.UCF101.UCF101AsClips.__repr__": [[99, 105], ["UCF101.UCF101AsClips.__len__", "UCF101.UCF101AsClips.transform.__repr__().replace", "UCF101.UCF101AsClips.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__init__": [[22, 64], ["dataset_utils.util_func.get_transform_flow", "len", "glob.glob", "dataset_utils.frame_utils.read_gen", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "math.floor", "math.floor", "math.ceil", "math.ceil", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_transform_flow", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen"], ["def", "__init__", "(", "self", ",", "args", ",", "is_train", ",", "root", "=", "None", ",", "loader", "=", "default_loader", ",", "\n", "replicates", "=", "1", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "train_size", "=", "args", ".", "train_size", "\n", "self", ".", "render_size", "=", "args", ".", "render_size", "\n", "self", ".", "real_size", "=", "None", "\n", "self", ".", "replicates", "=", "replicates", "\n", "self", ".", "snippet_len", "=", "args", ".", "snippet_len", "\n", "self", ".", "K", "=", "args", ".", "K", "\n", "self", ".", "replicates", "=", "replicates", "\n", "\n", "frames_list", "=", "[", "root", "]", "\n", "class_list", "=", "[", "0", "]", "\n", "frames_num", "=", "[", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'frame*.jpg'", ")", ")", ")", "]", "\n", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "frames_list", "=", "frames_list", "\n", "self", ".", "class_list", "=", "class_list", "\n", "self", ".", "frames_num", "=", "frames_num", "\n", "\n", "self", ".", "real_size", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "frames_list", "[", "0", "]", "+", "\"/frame000001.jpg\"", ")", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "render_size", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "# choice the closest size", "\n", "            ", "f_h", ",", "f_w", "=", "self", ".", "real_size", "[", ":", "2", "]", "\n", "\n", "min_h", ",", "min_w", "=", "math", ".", "floor", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "floor", "(", "f_w", "/", "64", ")", "*", "64", "\n", "max_h", ",", "max_w", "=", "math", ".", "ceil", "(", "f_h", "/", "64", ")", "*", "64", ",", "math", ".", "ceil", "(", "f_w", "/", "64", ")", "*", "64", "\n", "\n", "re_h", "=", "min_h", "if", "(", "abs", "(", "min_h", "-", "f_h", ")", "<=", "abs", "(", "max_h", "-", "f_h", ")", ")", "else", "max_h", "\n", "re_w", "=", "min_w", "if", "(", "abs", "(", "min_w", "-", "f_w", ")", "<=", "abs", "(", "max_w", "-", "f_w", ")", ")", "else", "max_w", "\n", "self", ".", "render_size", "=", "[", "re_h", ",", "re_w", "]", "\n", "", "assert", "[", "self", ".", "render_size", "[", "0", "]", "%", "64", ",", "self", ".", "render_size", "[", "0", "]", "%", "64", "]", "==", "[", "0", ",", "0", "]", "\n", "\n", "# Cautious!", "\n", "args", ".", "render_size", "=", "self", ".", "render_size", "\n", "args", ".", "real_size", "=", "self", ".", "real_size", "\n", "\n", "trans_size", "=", "self", ".", "train_size", "if", "self", ".", "is_train", "else", "self", ".", "render_size", "\n", "self", ".", "transform", "=", "get_transform_flow", "(", "trans_size", "=", "trans_size", ",", "is_train", "=", "self", ".", "is_train", ",", "\n", "sparse", "=", "False", ",", "div_flow", "=", "self", ".", "args", ".", "div_flow", ",", "ct_type", "=", "args", ".", "ct_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__getitem__": [[65, 90], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "read_paths.append", "com_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "np.array", "input_transform", "range", "FolderImage.FolderImage.loader"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "frames_list", ")", "\n", "frames_path", ",", "class_idx", ",", "frames_num", "=", "self", ".", "frames_list", "[", "index", "]", ",", "self", ".", "class_list", "[", "index", "]", ",", "self", ".", "frames_num", "[", "index", "]", "\n", "\n", "# K_clip_idxs = get_sample_index(frames_num, self.K, self.snippet_len, stride=self.args.stride)", "\n", "K_clip_idxs", "=", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "frames_num", "-", "1", ")", "]", "[", ":", "self", ".", "K", "]", "\n", "K_clip_img", "=", "[", "]", "\n", "\n", "read_paths", "=", "[", "]", "\n", "for", "clip_idxs", "in", "K_clip_idxs", ":", "\n", "            ", "clip_paths", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "'frame%06d.jpg'", "%", "(", "im_idx", "+", "1", ")", ")", "for", "im_idx", "in", "clip_idxs", "]", "\n", "read_paths", ".", "append", "(", "clip_paths", ")", "\n", "\n", "clip_img", "=", "[", "np", ".", "array", "(", "self", ".", "loader", "(", "p", ")", ")", "for", "p", "in", "clip_paths", "]", "# (frame_num, H,W,C)", "\n", "\n", "input_transform", ",", "target_transform", ",", "com_transform", "=", "self", ".", "transform", "\n", "clip_img", ",", "_", "=", "com_transform", "(", "clip_img", ",", "None", ")", "\n", "clip_img", "=", "[", "input_transform", "(", "im", ")", "for", "im", "in", "clip_img", "]", "\n", "clip_img", "=", "torch", ".", "stack", "(", "clip_img", ")", "\n", "K_clip_img", ".", "append", "(", "clip_img", ")", "\n", "", "K_clip_img", "=", "torch", ".", "stack", "(", "K_clip_img", ",", "0", ")", "\n", "\n", "# (K, snippet_len, C,  H,W)", "\n", "return", "{", "'frames'", ":", "K_clip_img", ",", "'classes'", ":", "class_idx", ",", "'paths'", ":", "read_paths", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__": [[91, 93], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "replicates", "*", "len", "(", "self", ".", "frames_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__": [[94, 100], ["FolderImage.FolderImage.__len__", "FolderImage.FolderImage.transform.__repr__().replace", "FolderImage.FolderImage.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__len__", "home.repos.pwc.inspect_result.Kwanss_PCLNet.Datasets.FolderImage.FolderImage.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.read_gen": [[12, 32], ["splitext", "scipy.misc.imread", "numpy.load", "print", "flow_utils.readFlow().astype", "frame_utils.readPFM", "flow_utils.readFlow"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.readPFM", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.readFlow"], ["def", "read_gen", "(", "file_name", ")", ":", "\n", "    ", "ext", "=", "splitext", "(", "file_name", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "'.png'", "or", "ext", "==", "'.jpeg'", "or", "ext", "==", "'.ppm'", "or", "ext", "==", "'.jpg'", ":", "\n", "        ", "im", "=", "imread", "(", "file_name", ")", "\n", "try", ":", "\n", "            ", "if", "im", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "                ", "return", "im", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "else", ":", "\n", "                ", "return", "im", "\n", "", "", "except", "IndexError", "as", "e", ":", "\n", "            ", "print", "(", "file_name", ")", "\n", "\n", "", "", "elif", "ext", "==", "'.bin'", "or", "ext", "==", "'.raw'", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.flo'", ":", "\n", "        ", "return", "flow_utils", ".", "readFlow", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "ext", "==", "\".pfm\"", ":", "\n", "        ", "data", ",", "scale", "=", "readPFM", "(", "file_name", ")", "\n", "return", "data", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.split2list": [[34, 46], ["isinstance", "isinstance", "open", "len", "len", "zip", "zip", "numpy.random.uniform", "numpy.random.uniform", "x.strip", "f.readlines", "len", "len"], "function", ["None"], ["", "def", "split2list", "(", "images", ",", "split", ",", "default_split", "=", "0.9", ")", ":", "\n", "    ", "if", "isinstance", "(", "split", ",", "str", ")", ":", "\n", "        ", "with", "open", "(", "split", ")", "as", "f", ":", "\n", "            ", "split_values", "=", "[", "x", ".", "strip", "(", ")", "==", "'1'", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "assert", "(", "len", "(", "images", ")", "==", "len", "(", "split_values", ")", ")", "\n", "", "elif", "isinstance", "(", "split", ",", "float", ")", ":", "\n", "        ", "split_values", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "len", "(", "images", ")", ")", "<", "split", "\n", "", "else", ":", "\n", "        ", "split_values", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "len", "(", "images", ")", ")", "<", "default_split", "\n", "", "train_samples", "=", "[", "sample", "for", "sample", ",", "split", "in", "zip", "(", "images", ",", "split_values", ")", "if", "split", "]", "\n", "test_samples", "=", "[", "sample", "for", "sample", ",", "split", "in", "zip", "(", "images", ",", "split_values", ")", "if", "not", "split", "]", "\n", "return", "train_samples", ",", "test_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.frame_utils.readPFM": [[48, 84], ["open", "open.readline().decode().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud().copy", "open.readline().decode", "map", "Exception", "open.readline().decode().rstrip", "open.readline().decode", "Exception", "re.match.groups", "numpy.flipud", "open.readline", "open.readline().decode", "open.readline", "open.readline"], "function", ["None"], ["", "def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", ".", "copy", "(", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.StaticRandomCrop.__init__": [[99, 104], ["random.randint", "random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "th", ",", "self", ".", "tw", "=", "crop_size", "\n", "h", ",", "w", "=", "image_size", "\n", "self", ".", "h1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "th", ")", "\n", "self", ".", "w1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "tw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.StaticRandomCrop.__call__": [[105, 107], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", "[", "self", ".", "h1", ":", "(", "self", ".", "h1", "+", "self", ".", "th", ")", ",", "self", ".", "w1", ":", "(", "self", ".", "w1", "+", "self", ".", "tw", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.StaticCenterCrop.__init__": [[110, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "th", ",", "self", ".", "tw", "=", "crop_size", "\n", "self", ".", "h", ",", "self", ".", "w", "=", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.StaticCenterCrop.__call__": [[114, 116], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", "[", "(", "self", ".", "h", "-", "self", ".", "th", ")", "//", "2", ":", "(", "self", ".", "h", "+", "self", ".", "th", ")", "//", "2", ",", "(", "self", ".", "w", "-", "self", ".", "tw", ")", "//", "2", ":", "(", "self", ".", "w", "+", "self", ".", "tw", ")", "//", "2", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.has_file_allowed_extension": [[11, 23], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n\n    Args:\n        filename (string): path to a file\n        extensions (iterable of strings): extensions to consider (lowercase)\n\n    Returns:\n        bool: True if the filename ends with one of given extensions\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.is_image_file": [[25, 35], ["util_func.has_file_allowed_extension"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.has_file_allowed_extension"], ["", "def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed image extension.\n\n    Args:\n        filename (string): path to a file\n\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "return", "has_file_allowed_extension", "(", "filename", ",", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.make_dataset": [[37, 45], ["enumerate", "len", "len", "util_func.has_file_allowed_extension", "images.append"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "image_paths", ",", "class_idxs", ",", "extensions", ")", ":", "\n", "    ", "assert", "len", "(", "image_paths", ")", "==", "len", "(", "class_idxs", ")", "\n", "images", "=", "[", "]", "\n", "for", "i", ",", "fp", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "        ", "if", "has_file_allowed_extension", "(", "fp", ",", "extensions", ")", ":", "\n", "            ", "item", "=", "(", "fp", ",", "class_idxs", "[", "i", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.pil_loader": [[47, 52], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.accimage_loader": [[54, 61], ["accimage.Image", "util_func.pil_loader"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.default_loader": [[63, 69], ["get_image_backend", "util_func.accimage_loader", "util_func.pil_loader"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.accimage_loader", "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_sample_index": [[71, 90], ["numpy.multiply", "numpy.random.randint", "list", "numpy.array_split", "numpy.sort", "numpy.array_split", "list", "range", "range", "list", "numpy.random.randint", "list", "range", "len"], "function", ["None"], ["", "", "def", "get_sample_index", "(", "f_n", ",", "K", ",", "snippet_len", ",", "stride", "=", "1", ")", ":", "\n", "    ", "assert", "f_n", ">", "0", "\n", "\n", "snippet_len", "=", "snippet_len", "*", "stride", "\n", "if", "f_n", ">=", "K", "*", "snippet_len", ":", "\n", "        ", "avg_len", "=", "f_n", "//", "K", "\n", "begin_idx", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "K", ")", ")", ",", "avg_len", ")", "+", "np", ".", "random", ".", "randint", "(", "avg_len", "-", "snippet_len", "+", "1", ")", "\n", "idx_list", "=", "[", "list", "(", "range", "(", "bi", ",", "bi", "+", "snippet_len", ")", ")", "for", "bi", "in", "begin_idx", "]", "\n", "", "elif", "f_n", ">=", "K", ":", "\n", "        ", "sp_ind", "=", "np", ".", "array_split", "(", "range", "(", "f_n", ")", ",", "K", ")", "\n", "sp_ind", "=", "[", "list", "(", "sp", ")", "for", "sp", "in", "sp_ind", "]", "\n", "idx_list", "=", "[", "lst", "+", "[", "lst", "[", "-", "1", "]", "]", "*", "(", "snippet_len", "-", "len", "(", "lst", ")", ")", "for", "lst", "in", "sp_ind", "]", "\n", "", "else", ":", "\n", "        ", "idx_list", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "randint", "(", "f_n", ",", "size", "=", "K", "*", "snippet_len", ")", ")", "\n", "sp_ind", "=", "np", ".", "array_split", "(", "idx_list", ",", "K", ")", "\n", "idx_list", "=", "[", "list", "(", "sp", ")", "for", "sp", "in", "sp_ind", "]", "\n", "", "if", "stride", ">", "1", ":", "\n", "        ", "idx_list", "=", "[", "ind", "[", ":", ":", "stride", "]", "for", "ind", "in", "idx_list", "]", "\n", "", "return", "idx_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.util_func.get_transform_flow": [[145, 188], ["torchvision.Compose", "torchvision.Compose", "ct.append", "co_transforms.Compose", "co_transforms.Compose", "co_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "co_transforms.ArrayToTensor", "torchvision.Normalize", "ct.append", "ct.append", "co_transforms.RandomHorizontalFlip", "ct.append", "ct.append", "ct.append", "co_transforms.RandomCropResize", "co_transforms.RandomCrop", "co_transforms.RandomVerticalFlip", "co_transforms.FixSizeScale", "co_transforms.CenterCrop"], "function", ["None"], ["def", "get_transform_flow", "(", "trans_size", ",", "is_train", "=", "True", ",", "sparse", "=", "False", ",", "div_flow", "=", "1.0", ",", "ct_type", "=", "'1'", ")", ":", "\n", "    ", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "co_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\"\"\"\n    if ct_type == '1':\n        input_transform = transforms.Compose([\n            co_transforms.ArrayToTensor(),\n            transforms.Normalize(mean=[0, 0, 0], std=[255, 255, 255]),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) \n        ])\n    elif ct_type=='2':\n        input_transform = transforms.Compose([\n            co_transforms.ArrayToTensor(),\n            transforms.Normalize(mean=[0, 0, 0], std=[255, 255, 255]),\n        ])\n    \"\"\"", "\n", "\n", "target_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "co_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", "]", ",", "std", "=", "[", "div_flow", ",", "div_flow", "]", ")", "\n", "]", ")", "\n", "\n", "if", "is_train", ":", "\n", "        ", "ct", "=", "[", "]", "\n", "if", "ct_type", "==", "'1'", "and", "not", "sparse", ":", "\n", "            ", "ct", ".", "append", "(", "co_transforms", ".", "RandomCropResize", "(", "trans_size", ",", "0.2", ")", ")", "\n", "", "else", ":", "\n", "            ", "ct", ".", "append", "(", "co_transforms", ".", "RandomCrop", "(", "trans_size", ")", ")", "\n", "", "ct", ".", "append", "(", "co_transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "if", "ct_type", "!=", "'3'", ":", "\n", "            ", "ct", ".", "append", "(", "co_transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "com_transform", "=", "co_transforms", ".", "Compose", "(", "ct", ")", "\n", "", "else", ":", "\n", "        ", "ct", "=", "[", "]", "\n", "if", "ct_type", "==", "'1'", "and", "not", "sparse", ":", "\n", "            ", "ct", ".", "append", "(", "co_transforms", ".", "FixSizeScale", "(", "trans_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "ct", ".", "append", "(", "co_transforms", ".", "CenterCrop", "(", "trans_size", ")", ")", "\n", "", "com_transform", "=", "co_transforms", ".", "Compose", "(", "ct", ")", "\n", "", "return", "input_transform", ",", "target_transform", ",", "com_transform", "\n", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.Compose.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "co_transforms", ")", ":", "\n", "        ", "self", ".", "co_transforms", "=", "co_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.Compose.__call__": [[26, 30], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "co_transforms", ":", "\n", "            ", "input", ",", "target", "=", "t", "(", "input", ",", "target", ")", "\n", "", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.ArrayToTensor.__call__": [[35, 42], ["isinstance", "numpy.transpose", "torch.from_numpy", "torch.from_numpy.float"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "array", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "# handle numpy array", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "# put it from HWC to CHW format", "\n", "return", "tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.Lambda.__init__": [[47, 50], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "isinstance", "(", "lambd", ",", "types", ".", "LambdaType", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.Lambda.__call__": [[51, 53], ["co_transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.CenterCrop.__init__": [[62, 68], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.CenterCrop.__call__": [[69, 96], ["int", "int", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        inputs: list of image\n        targets: list of flow\n        \"\"\"", "\n", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "th", ">", "0", "and", "tw", ">", "0", ":", "\n", "            ", "x", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "th", "==", "0", ":", "\n", "                ", "y", ",", "th", "=", "0", ",", "h", "\n", "", "elif", "th", "==", "-", "1", ":", "\n", "                ", "th", "=", "(", "h", "//", "64", ")", "*", "64", "\n", "y", "=", "(", "h", "-", "th", ")", "//", "2.0", "\n", "\n", "", "if", "tw", "==", "0", ":", "\n", "                ", "x", ",", "tw", "=", "0", ",", "w", "\n", "", "elif", "tw", "==", "-", "1", ":", "\n", "                ", "tw", "=", "(", "w", "//", "64", ")", "*", "64", "\n", "x", "=", "(", "w", "-", "tw", ")", "//", "2.0", "\n", "\n", "", "", "inputs", "=", "[", "A", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "T", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "T", "in", "targets", "]", "\n", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomZoomIn.__init__": [[105, 113], ["isinstance", "float", "float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ratios", ",", "order", "=", "2", ")", ":", "\n", "# ZoomIn in range( 1, 1 + ratios[i]]", "\n", "        ", "if", "isinstance", "(", "ratios", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "ratios", "=", "(", "float", "(", "ratios", ")", ",", "float", "(", "ratios", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ratios", "=", "ratios", "\n", "", "assert", "(", "0", "<", "self", ".", "ratios", "[", "0", "]", "<=", "1", ")", "and", "(", "0", "<", "self", ".", "ratios", "[", "1", "]", "<=", "1", ")", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomZoomIn.__call__": [[114, 125], ["scipy.interpolation.zoom", "scipy.interpolation.zoom", "numpy.dstack"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "add_ratio_H", ",", "add_ratio_W", "=", "self", ".", "ratios", "\n", "ratio_H", ",", "ratio_W", "=", "1", "+", "add_ratio_H", ",", "1", "+", "add_ratio_W", "\n", "\n", "if", "ratio_H", "<=", "1.0", "and", "ratio_W", "<=", "1.0", ":", "\n", "            ", "return", "inputs", ",", "targets", "\n", "", "inputs", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "A", ",", "(", "ratio_H", ",", "ratio_W", ",", "1", ")", ",", "order", "=", "self", ".", "order", ")", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "T", ",", "(", "ratio_H", ",", "ratio_W", ",", "1", ")", ",", "order", "=", "self", ".", "order", ")", "for", "T", "in", "targets", "]", "\n", "targets", "=", "[", "(", "np", ".", "dstack", "(", "(", "T", "[", ":", ",", ":", ",", "0", "]", "*", "ratio_W", ",", "T", "[", ":", ",", ":", ",", "1", "]", "*", "ratio_H", ")", ")", ")", "for", "T", "in", "targets", "]", "\n", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.SmallEdgeScale.__init__": [[134, 137], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "order", "=", "2", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.SmallEdgeScale.__call__": [[138, 152], ["scipy.interpolation.zoom", "scipy.interpolation.zoom"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "inputs", ",", "targets", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ratio", "=", "self", ".", "size", "/", "w", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "self", ".", "size", "/", "h", "\n", "\n", "", "inputs", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "A", ",", "[", "ratio", ",", "ratio", ",", "1", "]", ",", "order", "=", "self", ".", "order", ")", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "T", ",", "[", "ratio", ",", "ratio", ",", "1", "]", ",", "order", "=", "self", ".", "order", ")", "for", "T", "in", "targets", "]", "\n", "targets", "=", "[", "T", "*", "ratio", "for", "T", "in", "targets", "]", "\n", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.FixSizeScale.__init__": [[161, 164], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "order", "=", "2", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.FixSizeScale.__call__": [[165, 175], ["scipy.interpolation.zoom", "scipy.interpolation.zoom", "numpy.dstack"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "ratio_h", "=", "self", ".", "size", "[", "0", "]", "/", "h", "\n", "ratio_w", "=", "self", ".", "size", "[", "1", "]", "/", "w", "\n", "\n", "inputs", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "A", ",", "[", "ratio_h", ",", "ratio_w", ",", "1", "]", ",", "order", "=", "self", ".", "order", ")", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "T", ",", "[", "ratio_h", ",", "ratio_w", ",", "1", "]", ",", "order", "=", "self", ".", "order", ")", "for", "T", "in", "targets", "]", "\n", "targets", "=", "[", "np", ".", "dstack", "(", "(", "T", "[", ":", ",", ":", ",", "0", "]", "*", "ratio_w", ",", "T", "[", ":", ",", ":", ",", "1", "]", "*", "ratio_h", ")", ")", "for", "T", "in", "targets", "]", "\n", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomCrop.__init__": [[183, 188], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomCrop.__call__": [[189, 212], ["random.randint", "random.randint"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "inputs", ",", "targets", "\n", "", "if", "th", ">", "0", "and", "tw", ">", "0", ":", "\n", "            ", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "", "else", ":", "\n", "            ", "if", "th", "==", "0", ":", "# return origan size", "\n", "                ", "y", ",", "th", "=", "0", ",", "h", "\n", "", "elif", "th", "==", "-", "1", ":", "# return 64*", "\n", "                ", "y", ",", "th", "=", "0", ",", "(", "h", "//", "64", ")", "*", "64", "\n", "\n", "", "if", "tw", "==", "0", ":", "\n", "                ", "x", ",", "tw", "=", "0", ",", "w", "\n", "", "elif", "tw", "==", "-", "1", ":", "\n", "                ", "x", ",", "tw", "=", "0", ",", "(", "w", "//", "64", ")", "*", "64", "\n", "\n", "", "", "inputs", "=", "[", "A", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "T", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "T", "in", "targets", "]", "\n", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomCropResize.__init__": [[223, 235], ["isinstance", "isinstance", "int", "int", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "diff_ratio", ",", "order", "=", "2", ")", ":", "\n", "        ", "self", ".", "order", "=", "order", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n", "", "if", "isinstance", "(", "diff_ratio", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "diff_ratio", "=", "(", "int", "(", "diff_ratio", ")", ",", "int", "(", "diff_ratio", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "diff_ratio", "=", "diff_ratio", "\n", "", "assert", "(", "-", "1", "<", "self", ".", "diff_ratio", "[", "0", "]", "<", "1", ")", "and", "(", "-", "1", "<", "self", ".", "diff_ratio", "[", "1", "]", "<", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomCropResize.__call__": [[236, 281], ["int", "int", "random.randint", "random.randint", "scipy.interpolation.zoom", "scipy.interpolation.zoom", "numpy.dstack", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "inputs", ",", "targets", "\n", "", "if", "th", ">", "0", "and", "tw", ">", "0", ":", "\n", "            ", "ratio_H", ",", "ratio_W", "=", "self", ".", "diff_ratio", "\n", "resized_th", "=", "int", "(", "th", "+", "th", "*", "random", ".", "uniform", "(", "-", "ratio_H", ",", "ratio_H", ")", ")", "\n", "resized_tw", "=", "int", "(", "tw", "+", "tw", "*", "random", ".", "uniform", "(", "-", "ratio_W", ",", "ratio_W", ")", ")", "\n", "\n", "if", "resized_th", "<", "h", ":", "\n", "                ", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "resized_th", ")", "\n", "", "else", ":", "\n", "                ", "y", ",", "resized_th", "=", "0", ",", "h", "\n", "", "if", "resized_tw", "<", "w", ":", "\n", "                ", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "resized_tw", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "resized_tw", "=", "0", ",", "w", "\n", "\n", "# crop to [resized_th, resized_tw]", "\n", "", "inputs", "=", "[", "A", "[", "y", ":", "y", "+", "resized_th", ",", "x", ":", "x", "+", "resized_tw", "]", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "=", "[", "T", "[", "y", ":", "y", "+", "resized_th", ",", "x", ":", "x", "+", "resized_tw", "]", "for", "T", "in", "targets", "]", "\n", "\n", "# resize to th, tw", "\n", "", "ratio_H", ",", "ratio_W", "=", "th", "/", "resized_th", ",", "tw", "/", "resized_tw", "\n", "inputs", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "A", ",", "(", "ratio_H", ",", "ratio_W", ",", "1", ")", ",", "order", "=", "self", ".", "order", ")", "for", "A", "in", "inputs", "]", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "=", "[", "ndimage", ".", "interpolation", ".", "zoom", "(", "T", ",", "(", "ratio_H", ",", "ratio_W", ",", "1", ")", ",", "order", "=", "self", ".", "order", ")", "for", "T", "in", "targets", "]", "\n", "targets", "=", "[", "(", "np", ".", "dstack", "(", "(", "T", "[", ":", ",", ":", ",", "0", "]", "*", "ratio_W", ",", "T", "[", ":", ",", ":", ",", "1", "]", "*", "ratio_H", ")", ")", ")", "for", "T", "in", "targets", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "th", "==", "0", ":", "# return origan size", "\n", "                ", "y", ",", "th", "=", "0", ",", "h", "\n", "", "elif", "th", "==", "-", "1", ":", "# return 64*", "\n", "                ", "y", ",", "th", "=", "0", ",", "(", "h", "//", "64", ")", "*", "64", "\n", "\n", "", "if", "tw", "==", "0", ":", "\n", "                ", "x", ",", "tw", "=", "0", ",", "w", "\n", "", "elif", "tw", "==", "-", "1", ":", "\n", "                ", "x", ",", "tw", "=", "0", ",", "(", "w", "//", "64", ")", "*", "64", "\n", "", "inputs", "=", "[", "A", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "=", "[", "T", "[", "y", ":", "y", "+", "th", ",", "x", ":", "x", "+", "tw", "]", "for", "T", "in", "targets", "]", "\n", "", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomHorizontalFlip.__call__": [[287, 295], ["random.random", "numpy.copy", "numpy.fliplr", "numpy.copy", "numpy.fliplr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "inputs", "=", "[", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "A", ")", ")", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "=", "[", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "T", ")", ")", "for", "T", "in", "targets", "]", "\n", "for", "T", "in", "targets", ":", "\n", "                    ", "T", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "", "", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomVerticalFlip.__call__": [[301, 309], ["random.random", "numpy.copy", "numpy.flipud", "numpy.copy", "numpy.flipud"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "inputs", "=", "[", "np", ".", "copy", "(", "np", ".", "flipud", "(", "A", ")", ")", "for", "A", "in", "inputs", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "=", "[", "np", ".", "copy", "(", "np", ".", "flipud", "(", "T", ")", ")", "for", "T", "in", "targets", "]", "\n", "for", "T", "in", "targets", ":", "\n", "                    ", "T", "[", ":", ",", ":", ",", "1", "]", "*=", "-", "1", "\n", "", "", "", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomRotate.__init__": [[321, 326], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle", ",", "diff_angle", "=", "0", ",", "order", "=", "2", ",", "reshape", "=", "False", ")", ":", "\n", "        ", "self", ".", "angle", "=", "angle", "\n", "self", ".", "reshape", "=", "reshape", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "diff_angle", "=", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomRotate.__call__": [[327, 350], ["random.uniform", "random.uniform", "numpy.fromfunction", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "numpy.copy", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "applied_angle", "=", "random", ".", "uniform", "(", "-", "self", ".", "angle", ",", "self", ".", "angle", ")", "\n", "diff", "=", "random", ".", "uniform", "(", "-", "self", ".", "diff_angle", ",", "self", ".", "diff_angle", ")", "\n", "angle1", "=", "applied_angle", "-", "diff", "/", "2", "\n", "angle2", "=", "applied_angle", "+", "diff", "/", "2", "\n", "angle1_rad", "=", "angle1", "*", "np", ".", "pi", "/", "180", "\n", "\n", "h", ",", "w", ",", "_", "=", "target", ".", "shape", "\n", "\n", "def", "rotate_flow", "(", "i", ",", "j", ",", "k", ")", ":", "\n", "            ", "return", "-", "k", "*", "(", "j", "-", "w", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "+", "(", "1", "-", "k", ")", "*", "(", "i", "-", "h", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "\n", "\n", "", "rotate_flow_map", "=", "np", ".", "fromfunction", "(", "rotate_flow", ",", "target", ".", "shape", ")", "\n", "target", "+=", "rotate_flow_map", "\n", "\n", "inputs", "[", "0", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "inputs", "[", "0", "]", ",", "angle1", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "inputs", "[", "1", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "inputs", "[", "1", "]", ",", "angle2", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "target", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "target", ",", "angle1", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "# flow vectors must be rotated too! careful about Y flow which is upside down", "\n", "target_", "=", "np", ".", "copy", "(", "target", ")", "\n", "target", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "cos", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "0", "]", "+", "np", ".", "sin", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "1", "]", "\n", "target", "[", ":", ",", ":", ",", "1", "]", "=", "-", "np", ".", "sin", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "0", "]", "+", "np", ".", "cos", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "1", "]", "\n", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomTranslate.__init__": [[353, 358], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "translation", ")", ":", "\n", "        ", "if", "isinstance", "(", "translation", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "translation", "=", "(", "int", "(", "translation", ")", ",", "int", "(", "translation", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "translation", "=", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomTranslate.__call__": [[359, 387], ["range", "random.randint", "random.randint", "out_inputs.append", "out_targets.append", "len", "out_inputs.append", "out_targets.append"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "translation", "\n", "\n", "out_inputs", "=", "[", "]", "\n", "out_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", "-", "1", ",", "2", ")", ":", "\n", "            ", "tw_i", "=", "random", ".", "randint", "(", "-", "tw", ",", "tw", ")", "\n", "th_i", "=", "random", ".", "randint", "(", "-", "th", ",", "th", ")", "\n", "if", "tw_i", "==", "0", "and", "th_i", "==", "0", ":", "\n", "                ", "out_inputs", ".", "append", "(", "inputs", "[", "i", "]", ")", "\n", "out_targets", ".", "append", "(", "targets", "[", "i", "]", ")", "\n", "continue", "\n", "", "out_inputs", ".", "append", "(", "inputs", "[", "i", "]", ")", "\n", "out_targets", ".", "append", "(", "targets", "[", "i", "]", ")", "\n", "# TODO", "\n", "", "\"\"\"\n        # compute x1,x2,y1,y2 for img1 and target, and x3,x4,y3,y4 for img2\n        x1,x2,x3,x4 = max(0,tw), min(w+tw,w), max(0,-tw), min(w-tw,w)\n        y1,y2,y3,y4 = max(0,th), min(h+th,h), max(0,-th), min(h-th,h)\n\n        inputs[0] = inputs[0][y1:y2,x1:x2]\n        inputs[1] = inputs[1][y3:y4,x3:x4]\n        target = target[y1:y2,x1:x2]\n        target[:,:,0] += tw\n        target[:,:,1] += th\n        \"\"\"", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__init__": [[390, 393], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean_range", "=", "0", ",", "std_range", "=", "0", ")", ":", "\n", "        ", "self", ".", "mean_range", "=", "mean_range", "\n", "self", ".", "std_range", "=", "std_range", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.co_transforms.RandomColorWarp.__call__": [[394, 409], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.permutation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "random_std", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "std_range", ",", "self", ".", "std_range", ",", "3", ")", "\n", "random_mean", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "mean_range", ",", "self", ".", "mean_range", ",", "3", ")", "\n", "random_order", "=", "np", ".", "random", ".", "permutation", "(", "3", ")", "\n", "\n", "inputs", "[", "0", "]", "*=", "(", "1", "+", "random_std", ")", "\n", "inputs", "[", "0", "]", "+=", "random_mean", "\n", "\n", "inputs", "[", "1", "]", "*=", "(", "1", "+", "random_std", ")", "\n", "inputs", "[", "1", "]", "+=", "random_mean", "\n", "\n", "inputs", "[", "0", "]", "=", "inputs", "[", "0", "]", "[", ":", ",", ":", ",", "random_order", "]", "\n", "inputs", "[", "1", "]", "=", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", "random_order", "]", "\n", "\n", "return", "inputs", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.makeColorwheel": [[4, 39], ["numpy.zeros", "numpy.array", "float", "numpy.array", "float", "numpy.array", "float", "range", "numpy.array", "float", "range", "numpy.array", "float", "range", "numpy.array", "float", "range", "range", "range"], "function", ["None"], ["def", "makeColorwheel", "(", ")", ":", "\n", "    ", "RY", ",", "YG", ",", "GC", ",", "CB", ",", "BM", ",", "MR", "=", "15", ",", "6", ",", "4", ",", "11", ",", "13", ",", "6", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ",", "np", ".", "int32", ")", "# R,G,B", "\n", "\n", "# RY", "\n", "col", "=", "0", "\n", "colorwheel", "[", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", ":", "RY", ",", "1", "]", "=", "(", "np", ".", "array", "(", "range", "(", "RY", ")", ")", "/", "float", "(", "RY", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "(", "np", ".", "array", "(", "range", "(", "YG", ")", ")", "/", "float", "(", "YG", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "(", "np", ".", "array", "(", "range", "(", "GC", ")", ")", "/", "float", "(", "GC", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "(", "255", "-", "(", "np", ".", "array", "(", "range", "(", "CB", ")", ")", ")", "/", "float", "(", "CB", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "(", "np", ".", "array", "(", "range", "(", "BM", ")", ")", "/", "float", "(", "BM", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "col", "+=", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "(", "255", "-", "(", "np", ".", "array", "(", "range", "(", "MR", ")", ")", ")", "/", "float", "(", "MR", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.computeColor": [[41, 79], ["flow_utils.makeColorwheel", "numpy.sqrt", "fk.astype", "numpy.zeros", "range", "numpy.isnan", "numpy.isnan", "numpy.shape", "numpy.arctan2", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.invert", "numpy.invert", "numpy.invert"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.makeColorwheel"], ["", "def", "computeColor", "(", "u", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    According to the matlab code of Deqing Sun and c++ source code of Daniel Scharstein  \n    Contact: dqsun@cs.brown.edu\n    Contact: schar@middlebury.edu\n    \"\"\"", "\n", "indNan", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "indNan", "]", "=", "0", "\n", "v", "[", "indNan", "]", "=", "0", "\n", "\n", "colorwheel", "=", "makeColorwheel", "(", ")", "\n", "ncols", "=", "np", ".", "shape", "(", "colorwheel", ")", "[", "0", "]", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "# -1~1 mapped to 0~(ncols-1) => col index", "\n", "\n", "k0", "=", "fk", ".", "astype", "(", "np", ".", "int32", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "(", "np", ".", "shape", "(", "u", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "u", ")", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "np", ".", "shape", "(", "colorwheel", ")", "[", "1", "]", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "/", "255.0", "\n", "col1", "=", "tmp", "[", "k1", "]", "/", "255.0", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "\n", "col", "[", "np", ".", "invert", "(", "idx", ")", "]", "=", "col", "[", "np", ".", "invert", "(", "idx", ")", "]", "*", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "(", "(", "255", "*", "col", ")", "*", "np", ".", "invert", "(", "indNan", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# print(np.shape(img))", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.flowToColor": [[81, 123], ["numpy.shape", "numpy.any", "max", "min", "max", "min", "numpy.sqrt", "max", "flow_utils.computeColor", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.computeColor"], ["", "def", "flowToColor", "(", "flo", ",", "norm_var", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    According to the matlab code of Deqing Sun and c++ source code of Daniel Scharstein  \n    Contact: dqsun@cs.brown.edu\n    Contact: schar@middlebury.edu\n    \"\"\"", "\n", "UNKNOWN_FLOW_THRESH", "=", "1e9", "\n", "UNKNOWN_FLOW", "=", "1e10", "\n", "H", ",", "W", ",", "nBands", "=", "np", ".", "shape", "(", "flo", ")", "\n", "assert", "nBands", "==", "2", ",", "\"Currently only support 2 bands.\"", "\n", "u", "=", "flo", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flo", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "maxu", "=", "-", "999", "\n", "maxv", "=", "-", "999", "\n", "minu", "=", "999", "\n", "minv", "=", "999", "\n", "maxrad", "=", "-", "1", "\n", "\n", "idxUnknown", "=", "(", "(", "np", ".", "abs", "(", "u", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "|", "(", "np", ".", "abs", "(", "v", ")", ">", "UNKNOWN_FLOW_THRESH", ")", ")", "\n", "if", "np", ".", "any", "(", "idxUnknown", ")", ":", "\n", "        ", "u", "[", "idxUnknown", "]", "=", "0", "\n", "v", "[", "idxUnknown", "]", "=", "0", "\n", "\n", "", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "\n", "radius", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "maxrad", ",", "np", ".", "max", "(", "radius", ")", ")", "\n", "\n", "if", "norm_var", ":", "\n", "        ", "maxrad", "=", "norm_var", "\n", "\n", "", "eps", "=", "1e-16", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "eps", ")", "\n", "\n", "img", "=", "computeColor", "(", "u", ",", "v", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.readFlow": [[128, 149], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "numpy.isnan", "int", "int", "int", "int"], "function", ["None"], ["def", "readFlow", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Read .flo file in Middlebury format\"\"\"", "\n", "# Code adapted from:", "\n", "# http://stackoverflow.com/questions/28013200/reading-middlebury-flow-files-with-python-bytes-array-numpy", "\n", "\n", "# WARNING: this will work on little-endian architectures (eg Intel x86) only!", "\n", "# print 'fn = %s'%(fn)", "\n", "with", "open", "(", "fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "# print 'Reading %d x %d flo file\\n' % (w, h)", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "int", "(", "w", ")", "*", "int", "(", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "data", "[", "np", ".", "isnan", "(", "data", ")", "]", "=", "0", "\n", "return", "np", ".", "resize", "(", "data", ",", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kwanss_PCLNet.dataset_utils.flow_utils.writeFlow": [[151, 181], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "", "", "def", "writeFlow", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n    \n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "", ""]]}