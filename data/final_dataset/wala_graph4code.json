{"home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.DocumentationDetails.__init__": [[108, 121], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "module_name", "=", "module", "\n", "self", ".", "type", "=", "None", "\n", "self", ".", "function_name", "=", "None", "\n", "self", ".", "klass_name", "=", "None", "\n", "self", ".", "function_docstring", "=", "None", "\n", "self", ".", "class_docstring", "=", "None", "\n", "self", ".", "param_names", "=", "None", "\n", "self", ".", "return_map", "=", "None", "\n", "self", ".", "param_map", "=", "None", "\n", "self", ".", "ret_types", "=", "None", "\n", "self", ".", "base_classes", "=", "None", "\n", "self", ".", "param_types", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_param_name_key": [[123, 139], ["param.replace().replace().replace().replace().replace().replace", "param.replace().replace().replace().replace().replace().replace.split", "len", "param.replace().replace().replace().replace().replace", "len", "print", "len", "print", "param.replace().replace().replace().replace", "param.replace().replace().replace", "param.replace().replace", "param.replace"], "function", ["None"], ["", "", "def", "get_param_name_key", "(", "param", ")", ":", "\n", "    ", "key", "=", "param", ".", "replace", "(", "'`'", ",", "''", ")", ".", "replace", "(", "'{'", ",", "''", ")", ".", "replace", "(", "'\\\"'", ",", "''", ")", ".", "replace", "(", "'\\''", ",", "''", ")", ".", "replace", "(", "'<'", ",", "''", ")", ".", "replace", "(", "':'", ",", "' '", ")", "\n", "arr", "=", "key", ".", "split", "(", "' '", ")", "\n", "arr", "=", "' '", ".", "join", "(", "arr", ")", ".", "split", "(", ")", "\n", "if", "len", "(", "arr", ")", "==", "1", ":", "\n", "        ", "return", "arr", "[", "0", "]", ",", "None", "\n", "", "elif", "len", "(", "arr", ")", "==", "2", ":", "\n", "        ", "key", "=", "arr", "[", "1", "]", "\n", "key_type", "=", "arr", "[", "0", "]", "\n", "print", "(", "f'trying to shorten key: {param} to {key} with type {key_type}'", ")", "\n", "return", "key", ",", "key_type", "\n", "", "elif", "len", "(", "arr", ")", ">", "2", ":", "\n", "        ", "print", "(", "f'trying to shorten key: {param} to {arr[0]}'", ")", "\n", "return", "arr", "[", "0", "]", ",", "None", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge": [[140, 153], ["graph.add", "print", "print", "print", "type", "validators.url", "type", "validators.url", "type", "validators.url", "rdflib.namespace.RDF.type"], "function", ["None"], ["", "", "def", "add_edge", "(", "graph", ",", "subj", ",", "pred", ",", "obj", ",", "contxt", ")", ":", "\n", "\n", "    ", "if", "type", "(", "subj", ")", "==", "URIRef", "and", "not", "validators", ".", "url", "(", "subj", ")", ":", "\n", "        ", "print", "(", "f'Invalid subject URI: {subj}'", ")", "\n", "return", "graph", "\n", "", "if", "type", "(", "pred", ")", "==", "URIRef", "and", "not", "validators", ".", "url", "(", "pred", ")", ":", "\n", "        ", "print", "(", "f'Invalid predicate URI: {pred}'", ")", "\n", "return", "graph", "\n", "", "if", "type", "(", "obj", ")", "==", "URIRef", "and", "not", "validators", ".", "url", "(", "obj", ")", ":", "\n", "        ", "print", "(", "f'Invalid object URI: {obj}'", ")", "\n", "return", "graph", "\n", "", "graph", ".", "add", "(", "(", "subj", ",", "pred", ",", "obj", ",", "contxt", ")", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_triples_from_param_map": [[154, 232], ["map", "print", "data_list.items", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "value.items", "key.strip.strip", "re.split", "print", "print", "param_names.index", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "print", "str", "key.strip.strip", "rdflib.URIRef", "type", "create_docstrings_graph.add_edge", "str", "rdflib.URIRef", "print", "print", "type", "value2.strip.strip", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.add_edge", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_triples_from_param_map", "(", "doc_uri", ",", "g", ",", "data_list", ",", "param_names", ")", ":", "\n", "    ", "'''\n    {'adding_headers': {'name': 'adding_headers', 'param_doc': ''},\n    'forcing_headers': {'name': 'forcing_headers', 'param_doc': ''},\n     'streaming': {'name': 'streaming', 'param_doc': ' defaults to **False**'}, 'method': {'name': 'method', 'param_doc': ' one of ``httpretty.GET``, ``httpretty.PUT``, ``httpretty.POST``, ``httpretty.DELETE``, ``httpretty.HEAD``, ``httpretty.PATCH``, ``httpretty.OPTIONS``, ``httpretty.CONNECT``'}, 'kw: keyword-arguments passed onto the :py:class': {'name': 'kw: keyword-arguments passed onto the :py:class', 'param_doc': ' keyword-arguments passed onto the :py:class:`~httpretty.core.Entry`'}, 'body': {'name': 'body', 'param_doc': ''}, 'uri': {'name': 'uri', 'param_doc': ''}, 'status': {'name': 'status', 'param_doc': ' defaults to **200**'}}\n\n    '''", "\n", "delimiters", "=", "\" \"", ",", "\":\"", "\n", "regexPattern", "=", "'|'", ".", "join", "(", "map", "(", "re", ".", "escape", ",", "delimiters", ")", ")", "\n", "\n", "if", "param_names", "is", "None", ":", "\n", "        ", "print", "(", "f'Skip adding param map since param_names is None:  {data_list}'", ")", "\n", "return", "g", "\n", "", "if", "data_list", "is", "not", "None", ":", "\n", "        ", "for", "key", ",", "value", "in", "data_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "' '", "in", "key", "or", "':'", "in", "key", ":", "\n", "                ", "key", "=", "key", ".", "strip", "(", ")", "\n", "arr", "=", "re", ".", "split", "(", "regexPattern", ",", "key", ")", "\n", "#in case of key is kw: keyword-arguments passed onto the :py:class -- switch to kw", "\n", "#param map key is str name -- switch to str", "\n", "\n", "# if ' ' in key and len(arr)>1:", "\n", "#     nkey = arr[1]", "\n", "# else:", "\n", "nkey", "=", "''", "\n", "for", "part", "in", "arr", ":", "\n", "                    ", "if", "part", "in", "param_names", ":", "\n", "                        ", "nkey", "=", "arr", "[", "0", "]", "\n", "break", "\n", "", "", "if", "nkey", "==", "''", ":", "\n", "                    ", "print", "(", "f'Could not find index of parameter {key} in param_names: {param_names}, arr: {arr}'", ")", "\n", "continue", "\n", "", "print", "(", "f'param map key is {key} -- switch to {nkey}'", ")", "\n", "key", "=", "nkey", "\n", "#for cases like \"int status_code\", \"io.IOBase body\"", "\n", "\n", "# param_uri = URIRef(prefixes['graph4code'] + key)", "\n", "# param_index = param_names.index(value['name']) if 'name' in value else param_names.index(key)", "\n", "", "if", "key", "not", "in", "param_names", ":", "\n", "                ", "print", "(", "f'Could not find index of parameter {key} in param_names: {param_names}'", ")", "\n", "continue", "\n", "", "param_index", "=", "param_names", ".", "index", "(", "key", ")", "+", "1", "\n", "param_uri", "=", "URIRef", "(", "str", "(", "doc_uri", ")", "+", "'/p/'", "+", "str", "(", "param_index", ")", ")", "\n", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "\n", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Parameter'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "\n", "Literal", "(", "key", ".", "strip", "(", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param_index'", ")", ",", "\n", "Literal", "(", "param_index", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param'", ")", ",", "\n", "param_uri", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "for", "key2", ",", "value2", "in", "value", ".", "items", "(", ")", ":", "\n", "                ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "key2", ")", "\n", "if", "key2", "==", "'name'", ":", "\n", "                    ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", "\n", "", "elif", "key2", "==", "'param_doc'", ":", "\n", "                    ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'skos'", "]", "+", "'definition'", ")", "\n", "", "elif", "key2", "==", "'type'", ":", "\n", "                    ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param_type'", ")", "\n", "", "elif", "key2", "==", "'inferred_type'", ":", "\n", "                    ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param_inferred_type'", ")", "\n", "", "elif", "key2", "==", "'optional'", ":", "\n", "                    ", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'optional'", ")", "\n", "", "if", "type", "(", "value2", ")", "==", "list", ":", "\n", "                    ", "if", "key2", "==", "'inferred_type'", ":", "\n", "                        ", "for", "val", "in", "value2", ":", "#['float', 'tuple']", "\n", "                            ", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "pred_uri", ",", "URIRef", "(", "prefixes", "[", "'py'", "]", "+", "val", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "print", "(", "f'Found return map key2 as list and it is not an inferred_type {key2}: {value2}'", ")", "\n", "print", "(", ")", "\n", "", "", "else", ":", "\n", "#value2 can be str or bool", "\n", "                    ", "if", "type", "(", "value2", ")", "==", "str", ":", "\n", "                        ", "value2", "=", "value2", ".", "strip", "(", ")", "\n", "", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "pred_uri", ",", "Literal", "(", "value2", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_triples_from_return_map": [[233, 259], ["rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "create_docstrings_graph.add_edge", "str", "create_docstrings_graph.add_edge", "rdflib.Literal", "rdflib.URIRef", "str", "data_list[].strip", "rdflib.URIRef", "rdflib.URIRef", "data_list[].strip"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_triples_from_return_map", "(", "doc_uri", ",", "g", ",", "data_list", ")", ":", "\n", "    ", "'''\n   {'doc': ' ProxyManager', 'type': ' urllib3.ProxyManager'}\n    '''", "\n", "if", "data_list", "is", "not", "None", ":", "\n", "        ", "return_index", "=", "1", "\n", "if", "'type'", "in", "data_list", ":", "\n", "            ", "ret_uri", "=", "URIRef", "(", "str", "(", "doc_uri", ")", "+", "'/r/'", "+", "str", "(", "return_index", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'return'", ")", ",", "\n", "ret_uri", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ret_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "\n", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Return'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'return_type'", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ret_uri", ",", "pred_uri", ",", "URIRef", "(", "prefixes", "[", "'py'", "]", "+", "data_list", "[", "'type'", "]", ".", "strip", "(", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ret_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'return_index'", ")", ",", "\n", "Literal", "(", "return_index", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'return_inferred_type'", ")", "\n", "if", "'inferred_type'", "in", "data_list", ":", "\n", "                ", "for", "inf", "in", "data_list", "[", "'inferred_type'", "]", ":", "\n", "                    ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "pred_uri", ",", "\n", "URIRef", "(", "prefixes", "[", "'py'", "]", "+", "inf", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "", "pred_uri", "=", "URIRef", "(", "prefixes", "[", "'skos'", "]", "+", "'definition'", ")", "\n", "if", "'doc'", "in", "data_list", ":", "\n", "                ", "g", "=", "add_edge", "(", "g", ",", "ret_uri", ",", "pred_uri", ",", "Literal", "(", "data_list", "[", "'doc'", "]", ".", "strip", "(", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_triples_from_dic_of_dic": [[260, 314], ["data_list.items", "create_docstrings_graph.get_param_name_key", "rdflib.URIRef", "create_docstrings_graph.add_edge", "value.items", "print", "create_docstrings_graph.add_edge", "rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.get_param_name_key", "type", "type", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "type", "str", "rdflib.URIRef", "rdflib.URIRef", "print", "type", "create_docstrings_graph.add_edge", "str", "create_docstrings_graph.add_edge", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "type", "str", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "str", "str", "create_docstrings_graph.add_edge", "str", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "str", "str"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_param_name_key", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_param_name_key", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_triples_from_dic_of_dic", "(", "doc_uri", ",", "g", ",", "data_list", ",", "edge_name", ")", ":", "\n", "# \"param_map\": {", "\n", "#     \"estimator\": {", "\n", "#         \"name\": \"estimator\",", "\n", "#         \"param_doc\": \" Estimator object to test.\\n\",", "\n", "#         \"type\": \" object\"", "\n", "#          \"inferred_type\": [", "\n", "#                 \"traitlets.traitlets.Bool\",", "\n", "#                 \"bool\"", "\n", "# ]", "\n", "#     }", "\n", "# },", "\n", "    ", "if", "data_list", "is", "not", "None", ":", "\n", "        ", "for", "key", ",", "value", "in", "data_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", "or", "key", "is", "None", ":", "\n", "                ", "continue", "\n", "# print(key)", "\n", "", "new_key", ",", "key_type", "=", "get_param_name_key", "(", "key", ")", "\n", "if", "new_key", "is", "None", ":", "\n", "                ", "print", "(", "f'KEY IS NONE: {key} -- {new_key}'", ")", "\n", "continue", "\n", "", "if", "type", "(", "value", ")", "==", "str", "or", "type", "(", "value", ")", "==", "int", ":", "\n", "                ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "docstrings_uri", "+", "edge_name", "+", "'/'", "+", "str", "(", "new_key", ")", ")", ",", "\n", "Literal", "(", "str", "(", "value", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "continue", "\n", "", "elif", "type", "(", "value", ")", "==", "list", ":", "\n", "                ", "for", "v", "in", "value", ":", "\n", "                    ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "docstrings_uri", "+", "edge_name", "+", "'/'", "+", "str", "(", "new_key", ")", ")", ",", "\n", "Literal", "(", "str", "(", "v", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "continue", "\n", "#key: estimator", "\n", "", "val_uri", "=", "URIRef", "(", "doc_uri", "+", "'/'", "+", "edge_name", "+", "'/'", "+", "str", "(", "new_key", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "docstrings_uri", "+", "edge_name", ")", ",", "\n", "val_uri", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "if", "key_type", "is", "not", "None", ":", "\n", "                ", "g", "=", "add_edge", "(", "g", ",", "val_uri", ",", "RDF", ".", "type", ",", "URIRef", "(", "docstrings_uri", "+", "str", "(", "key_type", ")", ")", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "for", "key2", ",", "value2", "in", "value", ".", "items", "(", ")", ":", "\n", "                ", "new_key2", ",", "key_type", "=", "get_param_name_key", "(", "key2", ")", "\n", "if", "new_key2", "is", "None", ":", "\n", "                    ", "print", "(", "f'KEY IS NONE: {key2} -- {new_key2}'", ")", "\n", "continue", "\n", "\n", "#\"name\": \"estimator\",", "\n", "", "if", "value2", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "type", "(", "value2", ")", "==", "str", ":", "\n", "                    ", "g", "=", "add_edge", "(", "g", ",", "val_uri", ",", "URIRef", "(", "docstrings_uri", "+", "'/'", "+", "new_key2", ")", ",", "Literal", "(", "str", "(", "value2", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "elif", "type", "(", "value2", ")", "==", "list", ":", "\n", "                    ", "for", "v", "in", "value2", ":", "\n", "                        ", "g", "=", "add_edge", "(", "g", ",", "val_uri", ",", "URIRef", "(", "docstrings_uri", "+", "'/'", "+", "edge_name", "+", "'/'", "+", "new_key2", ")", ",", "Literal", "(", "str", "(", "v", ")", ")", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "", "", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_part_of_edges": [[315, 339], ["class_or_module.split", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.get_new_func_klass_uri", "range", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "len", "rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef.replace().strip", "rdflib.URIRef.replace"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_part_of_edges", "(", "g", ",", "doc_uri", ",", "class_or_module", ",", "is_function", "=", "False", ")", ":", "\n", "    ", "class_or_module_comp", "=", "class_or_module", ".", "split", "(", "'.'", ")", "\n", "part_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "class_or_module", ")", ")", "\n", "if", "is_function", ":", "\n", "        ", "pred", "=", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'classMember'", ")", "\n", "", "else", ":", "\n", "        ", "pred", "=", "URIRef", "(", "prefixes", "[", "'dcterms'", "]", "+", "'isPartOf'", ")", "\n", "\n", "", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "pred", ",", "\n", "part_uri", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "part_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "\n", "Literal", "(", "class_or_module", ")", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "prev_seg", "=", "get_new_func_klass_uri", "(", "class_or_module_comp", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "class_or_module_comp", ")", ")", ":", "\n", "        ", "doc_uri_tgt", "=", "URIRef", "(", "prev_seg", ")", "\n", "doc_uri_src", "=", "URIRef", "(", "prev_seg", "+", "'.'", "+", "class_or_module_comp", "[", "i", "]", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri_src", ",", "URIRef", "(", "prefixes", "[", "'dcterms'", "]", "+", "'isPartOf'", ")", ",", "\n", "doc_uri_tgt", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri_tgt", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "\n", "Literal", "(", "doc_uri_tgt", ".", "replace", "(", "prefixes", "[", "'py'", "]", ",", "''", ")", ".", "strip", "(", ")", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "prev_seg", "+=", "'.'", "+", "class_or_module_comp", "[", "i", "]", "\n", "", "return", "g", "\n", "", "def", "add_name_end", "(", "name", ",", "g", ",", "doc_uri", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_name_end": [[339, 348], ["name.strip().replace.strip().replace", "name.strip().replace.strip().split", "print", "name.strip().replace.strip", "name.strip().replace.strip", "path_end.strip", "path_end.strip", "len", "create_docstrings_graph.add_edge", "len", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_name_end", "(", "name", ",", "g", ",", "doc_uri", ")", ":", "\n", "    ", "name", "=", "name", ".", "strip", "(", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "comp", "=", "name", ".", "strip", "(", ")", ".", "split", "(", "'.'", ")", "\n", "path_end", "=", "comp", "[", "len", "(", "comp", ")", "-", "1", "]", "\n", "if", "path_end", ".", "strip", "(", ")", "==", "\"\"", "or", "path_end", ".", "strip", "(", ")", "==", "\"_\"", ":", "\n", "        ", "print", "(", "f'skipping empty name_end === {path_end}'", ")", "\n", "", "elif", "len", "(", "comp", ")", ">", "1", ":", "\n", "        ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'name_end'", ")", ",", "Literal", "(", "path_end", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "return", "g", "\n", "", "def", "get_new_func_klass_uri", "(", "function_or_klass_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri": [[348, 350], ["None"], "function", ["None"], ["", "def", "get_new_func_klass_uri", "(", "function_or_klass_name", ")", ":", "\n", "    ", "return", "prefixes", "[", "'py'", "]", "+", "function_or_klass_name", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.output_documentation_triples": [[351, 472], ["rdflib.ConjunctiveGraph", "create_docstrings_graph.add_triples_from_return_map", "create_docstrings_graph.add_triples_from_param_map", "add_edge.serialize", "doc_details.module_name.strip().replace", "doc_details.klass_name.strip().replace", "doc_details.function_name.strip().replace", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_part_of_edges", "create_docstrings_graph.add_name_end", "doc_name.split", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "print", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.add_edge", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_part_of_edges", "create_docstrings_graph.add_name_end", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_part_of_edges", "create_docstrings_graph.add_name_end", "create_docstrings_graph.add_edge", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "doc_details.module_name.strip", "doc_details.klass_name.strip", "doc_details.function_name.strip", "doc_details.klass_name.split", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "doc_details.function_name.split", "str", "str"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_triples_from_return_map", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_triples_from_param_map", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_part_of_edges", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_name_end", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_part_of_edges", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_name_end", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_part_of_edges", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_name_end", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri"], ["", "def", "output_documentation_triples", "(", "doc_details", ",", "out_triple_file", ")", ":", "\n", "    ", "g", "=", "ConjunctiveGraph", "(", ")", "\n", "doc_details", ".", "module_name", "=", "doc_details", ".", "module_name", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'.'", ")", "if", "doc_details", ".", "module_name", "is", "not", "None", "else", "doc_details", ".", "module_name", "\n", "doc_details", ".", "klass_name", "=", "doc_details", ".", "klass_name", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'.'", ")", "if", "doc_details", ".", "klass_name", "is", "not", "None", "else", "doc_details", ".", "klass_name", "\n", "doc_details", ".", "function_name", "=", "doc_details", ".", "function_name", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'.'", ")", "if", "doc_details", ".", "function_name", "is", "not", "None", "else", "doc_details", ".", "function_name", "\n", "num_triples", "=", "0", "\n", "doc_name", "=", "''", "\n", "if", "doc_details", ".", "type", "==", "'class'", ":", "\n", "# doc_uri = URIRef(get_func_klass_uri(doc_details.module_name, doc_details.klass_name))", "\n", "        ", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_details", ".", "klass_name", ")", ")", "\n", "doc_name", "=", "doc_details", ".", "klass_name", "\n", "# g = add_edge(g, doc_uri, URIRef(prefixes['skos']+'notation'),  Literal(doc_details.klass_name), URIRef(docstrings_uri))", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Class'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "Literal", "(", "doc_details", ".", "klass_name", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "# if doc_details.module_name is not None:", "\n", "#     g = add_edge(g, doc_uri, URIRef(prefixes['skos'] + 'altLabel'), Literal(doc_details.module_name+'.'+doc_details.klass_name), URIRef(docstrings_uri))", "\n", "func_prefix", "=", "'.'", ".", "join", "(", "doc_details", ".", "klass_name", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "g", "=", "add_part_of_edges", "(", "g", ",", "doc_uri", ",", "func_prefix", ",", "is_function", "=", "False", ")", "\n", "g", "=", "add_name_end", "(", "doc_details", ".", "klass_name", ",", "g", ",", "doc_uri", ")", "\n", "if", "doc_details", ".", "klass_name", "in", "class_map", ":", "\n", "            ", "alias_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "class_map", "[", "doc_details", ".", "klass_name", "]", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'aliasOf'", ")", ",", "\n", "alias_uri", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "", "", "elif", "doc_details", ".", "type", "==", "'function'", ":", "\n", "        ", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_details", ".", "function_name", ")", ")", "\n", "doc_name", "=", "doc_details", ".", "function_name", "\n", "# g = add_edge(g, doc_uri, URIRef(prefixes['skos']+'notation'),  Literal(doc_details.function_name), URIRef(docstrings_uri)) #same info is used in rdfs:label", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Function'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "Literal", "(", "doc_details", ".", "function_name", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "# if doc_details.module_name is not None:", "\n", "#     g = add_edge(g, doc_uri, URIRef(prefixes['skos'] + 'altLabel'), Literal(doc_details.module_name + '.' + doc_details.function_name),", "\n", "#                  URIRef(docstrings_uri))", "\n", "func_prefix", "=", "'.'", ".", "join", "(", "doc_details", ".", "function_name", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "g", "=", "add_part_of_edges", "(", "g", ",", "doc_uri", ",", "func_prefix", ",", "is_function", "=", "True", ")", "\n", "g", "=", "add_name_end", "(", "doc_details", ".", "function_name", ",", "g", ",", "doc_uri", ")", "\n", "", "else", ":", "\n", "        ", "doc_name", "=", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", "\n", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_name", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Method'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "# g = add_edge(g, doc_uri, URIRef(prefixes['skos']+'notation'),   Literal(doc_details.function_name), URIRef(docstrings_uri))", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "Literal", "(", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "# if doc_details.module_name is not None:", "\n", "#     g = add_edge(g, doc_uri, URIRef(prefixes['skos'] + 'altLabel'),", "\n", "#            Literal(doc_details.module_name + '.' + doc_details.klass_name + '.' + doc_details.function_name), URIRef(docstrings_uri))", "\n", "g", "=", "add_part_of_edges", "(", "g", ",", "doc_uri", ",", "doc_details", ".", "klass_name", ",", "is_function", "=", "True", ")", "\n", "g", "=", "add_name_end", "(", "(", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", ")", ",", "g", ",", "doc_uri", ")", "\n", "#param_names is a list", "\n", "#base_classes is a list", "\n", "# g = add_triples_from_list(doc_uri, g, doc_details.base_classes,", "\n", "#                           prefixes['rdfs'] + 'subClassOf', as_URI=True, prefix_for_uri='py') #TODO: py or graph4code", "\n", "", "if", "doc_details", ".", "base_classes", "is", "not", "None", ":", "\n", "        ", "for", "base", "in", "doc_details", ".", "base_classes", ":", "\n", "            ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'subClassOf'", ")", ",", "URIRef", "(", "prefixes", "[", "'py'", "]", "+", "base", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "", "", "g", "=", "add_triples_from_return_map", "(", "doc_uri", ",", "g", ",", "doc_details", ".", "return_map", ")", "\n", "\n", "\n", "#TODO: consolidate param_names, param_map and param_type", "\n", "#NOte that the param_names, param_map and param_type don't always appear together, that's why param label, type ... are repeated in each case", "\n", "##TODO: THIS ASSUMES THE ORDER IN PARAMETER NAMES IS CORRECT", "\n", "if", "doc_details", ".", "param_names", "is", "not", "None", ":", "\n", "        ", "param_index", "=", "1", "\n", "for", "param", "in", "doc_details", ".", "param_names", ":", "\n", "            ", "param_uri", "=", "URIRef", "(", "str", "(", "doc_uri", ")", "+", "'/p/'", "+", "str", "(", "param_index", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param'", ")", ",", "\n", "param_uri", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "\n", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Parameter'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "Literal", "(", "param", ")", ",", "\n", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "param_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'param_index'", ")", ",", "\n", "Literal", "(", "param_index", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "param_index", "+=", "1", "\n", "\n", "", "", "g", "=", "add_triples_from_param_map", "(", "doc_uri", ",", "g", ",", "doc_details", ".", "param_map", ",", "doc_details", ".", "param_names", ")", "\n", "if", "doc_details", ".", "module_name", "is", "not", "None", ":", "\n", "        ", "class_or_module_comp", "=", "doc_name", ".", "split", "(", "'.'", ")", "\n", "module_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "class_or_module_comp", "[", "0", "]", ")", ")", "\n", "# module_uri = URIRef(get_new_func_klass_uri(doc_details.module_name))", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'module'", ")", ",", "\n", "module_uri", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "module_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "\n", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'Module'", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "#TODO: param type should use the same uri as param map, also add position num", "\n", "# g = add_triples_from_list(doc_uri, g, doc_details.param_types, prefixes['graph4code'] + 'param_type')", "\n", "# if doc_details.param_types is not None:", "\n", "#     param_index = 1", "\n", "#     for param in doc_details.param_types:", "\n", "#         param_uri = URIRef(str(doc_uri) + '/p/' + str(param_index))", "\n", "#         g = add_edge(g, doc_uri, URIRef(prefixes['graph4code'] + 'param'),", "\n", "#                      param_uri, URIRef(docstrings_uri))", "\n", "#         g = add_edge(g, param_uri, URIRef(prefixes['rdf'] + 'type'),", "\n", "#                      URIRef(prefixes['graph4code']+'Parameter'), URIRef(docstrings_uri))", "\n", "#         g = add_edge(g, param_uri, URIRef(prefixes['graph4code'] + 'param_type'),", "\n", "#                      URIRef(prefixes['py'] + param), URIRef(docstrings_uri))", "\n", "#         g = add_edge(g, param_uri, URIRef(prefixes['graph4code'] + 'param_index'),", "\n", "#                      Literal(param_index), URIRef(docstrings_uri))", "\n", "#         param_index += 1", "\n", "# param_uri = URIRef(str(doc_uri) + '/p/' + key)", "\n", "# g = add_edge(g, param_uri, URIRef(prefixes['rdf'] + 'type'),", "\n", "#              URIRef(prefixes['graph4code'] + 'Parameter'), URIRef(docstrings_uri))", "\n", "# g = add_edge(g, doc_uri, URIRef(prefixes['graph4code'] + 'param'),", "\n", "#              param_uri, URIRef(docstrings_uri))", "\n", "", "if", "doc_details", ".", "function_docstring", "is", "not", "None", ":", "\n", "        ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'skos'", "]", "+", "'definition'", ")", ",", "Literal", "(", "doc_details", ".", "function_docstring", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "if", "doc_details", ".", "class_docstring", "is", "not", "None", ":", "\n", "        ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'skos'", "]", "+", "'definition'", ")", ",", "Literal", "(", "doc_details", ".", "class_docstring", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "", "if", "doc_details", ".", "ret_types", "is", "not", "None", ":", "\n", "        ", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'graph4code'", "]", "+", "'ret_types'", ")", ",", "Literal", "(", "doc_details", ".", "ret_types", ")", ",", "URIRef", "(", "docstrings_uri", ")", ")", "\n", "\n", "", "if", "g", "is", "None", ":", "\n", "        ", "print", "(", "f'Could not create a graph for: module {doc_details.module_name}, class: {doc_details.klass_name}, func: {doc_details.function_name}'", ")", "\n", "return", "0", "\n", "", "for", "t", "in", "g", ":", "\n", "        ", "num_triples", "+=", "1", "\n", "# print(t)", "\n", "", "g", ".", "serialize", "(", "destination", "=", "out_triple_file", ",", "format", "=", "'nquads'", ",", "encoding", "=", "'utf-8'", ")", "\n", "return", "num_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_func_documentation": [[473, 521], ["create_docstrings_graph.DocumentationDetails", "print", "print", "print", "str().split", "str().split", "str().split", "str", "str", "str"], "function", ["None"], ["", "def", "get_func_documentation", "(", "function_dic", ")", ":", "\n", "    ", "if", "'module_name'", "in", "function_dic", ":", "\n", "        ", "module_name", "=", "function_dic", "[", "'module_name'", "]", "\n", "", "elif", "'module'", "in", "function_dic", ":", "\n", "        ", "module_name", "=", "function_dic", "[", "'module'", "]", "\n", "", "else", ":", "\n", "        ", "module_name", "=", "None", "\n", "", "doc_details", "=", "DocumentationDetails", "(", "module_name", ")", "\n", "if", "'klass'", "in", "function_dic", "and", "'function'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "function_name", "=", "function_dic", "[", "'function'", "]", "\n", "doc_details", ".", "klass_name", "=", "function_dic", "[", "\"klass\"", "]", "\n", "doc_details", ".", "type", "=", "'method'", "\n", "if", "module_name", "is", "None", ":", "\n", "            ", "doc_details", ".", "module_name", "=", "str", "(", "doc_details", ".", "klass_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "print", "(", "f'Module is none {doc_details.klass_name}: use {doc_details.module_name} instead! '", ")", "\n", "\n", "", "", "if", "'function'", "in", "function_dic", "and", "'klass'", "not", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "function_name", "=", "function_dic", "[", "'function'", "]", "\n", "doc_details", ".", "type", "=", "'function'", "\n", "if", "module_name", "is", "None", ":", "\n", "            ", "doc_details", ".", "module_name", "=", "str", "(", "doc_details", ".", "function_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "print", "(", "f'Module is none {doc_details.function_name}: use {doc_details.module_name} instead! '", ")", "\n", "\n", "", "", "if", "'klass'", "in", "function_dic", "and", "'function'", "not", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "klass_name", "=", "function_dic", "[", "\"klass\"", "]", "\n", "doc_details", ".", "type", "=", "'class'", "\n", "if", "module_name", "is", "None", ":", "\n", "            ", "doc_details", ".", "module_name", "=", "str", "(", "doc_details", ".", "klass_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "print", "(", "f'Module is none {doc_details.klass_name}: use {doc_details.module_name} instead! '", ")", "\n", "\n", "", "", "if", "'function_docstring'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "function_docstring", "=", "function_dic", "[", "'function_docstring'", "]", "\n", "", "if", "'class_docstring'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "class_docstring", "=", "function_dic", "[", "'class_docstring'", "]", "\n", "\n", "", "if", "'param_names'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "param_names", "=", "function_dic", "[", "\"param_names\"", "]", "\n", "", "if", "\"param_map\"", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "param_map", "=", "function_dic", "[", "\"param_map\"", "]", "\n", "", "if", "\"param_types\"", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "param_types", "=", "function_dic", "[", "\"param_types\"", "]", "\n", "", "if", "'return_map'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "return_map", "=", "function_dic", "[", "'return_map'", "]", "\n", "", "if", "'ret_types'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "ret_types", "=", "function_dic", "[", "'ret_types'", "]", "\n", "", "if", "'base_classes'", "in", "function_dic", ":", "\n", "        ", "doc_details", ".", "base_classes", "=", "function_dic", "[", "'base_classes'", "]", "\n", "", "return", "doc_details", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.merge_all_files": [[522, 536], ["os.listdir", "open", "sorted", "open.close", "open", "f.readlines", "os.remove", "open.write", "print"], "function", ["None"], ["", "def", "merge_all_files", "(", "path", ",", "out_filename", ")", ":", "\n", "    ", "file_list", "=", "os", ".", "listdir", "(", "path", ")", "\n", "outfile", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "filename", "in", "sorted", "(", "file_list", ")", ":", "\n", "        ", "filepath", "=", "path", "+", "'/'", "+", "filename", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "content", ":", "\n", "                ", "outfile", ".", "write", "(", "line", ")", "\n", "", "", "try", ":", "\n", "            ", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "f'could not remove file: {filepath}'", ")", "\n", "", "", "outfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.create_docstrings_graph": [[537, 614], ["set", "set", "set", "os.listdir", "print", "print", "create_docstrings_graph.merge_all_files", "print", "open", "open.close", "open", "open.close", "open", "open.close", "lib.startswith", "os.path.join", "os.listdir", "open.write", "open.write", "open.write", "print", "os.path.isdir", "os.path.join", "f.endswith", "print", "open", "json.load", "len", "type", "json.load.items", "create_docstrings_graph.get_func_documentation", "create_docstrings_graph.output_documentation_triples", "print", "print", "functions_to_loop.append", "functions_to_loop.append", "set.add", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.utils.merge_all_files", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_func_documentation", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.output_documentation_triples"], ["", "def", "create_docstrings_graph", "(", "docstring_dir", ",", "out_dir", ")", ":", "\n", "    ", "total_num_files", "=", "0", "\n", "total_entries_processed", "=", "0", "\n", "escaped_filed", "=", "0", "\n", "total_num_triples", "=", "0", "\n", "# out_triple_file = open(out_dir+'/docstrings_triples.nq', 'w')", "\n", "all_functions_found", "=", "set", "(", "[", "]", ")", "\n", "all_klasses_found", "=", "set", "(", "[", "]", ")", "\n", "all_methods_found", "=", "set", "(", "[", "]", ")", "\n", "\n", "for", "lib", "in", "os", ".", "listdir", "(", "docstring_dir", ")", ":", "\n", "        ", "if", "lib", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "print", "(", "'Skip '", ",", "lib", ")", "\n", "continue", "\n", "", "source_path", "=", "os", ".", "path", ".", "join", "(", "docstring_dir", ",", "lib", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "source_path", ")", ":", "#'../data/mods.22/pyvenv.cfg'", "\n", "            ", "continue", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "source_path", ")", ":", "\n", "            ", "if", "not", "f", ".", "endswith", "(", "'.json'", ")", ":", "\n", "                ", "print", "(", "'Skip '", ",", "lib", ")", "\n", "continue", "\n", "", "total_num_files", "+=", "1", "\n", "pth", "=", "os", ".", "path", ".", "join", "(", "source_path", ",", "f", ")", "\n", "with", "open", "(", "pth", ")", "as", "input", ":", "\n", "                ", "try", ":", "\n", "                    ", "functions", "=", "json", ".", "load", "(", "input", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'Exception during loading file:'", "+", "pth", ")", "\n", "escaped_filed", "+=", "1", "\n", "", "if", "len", "(", "functions", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "# if type(functions) == dict:", "\n", "#     functions = [functions]", "\n", "", "functions_to_loop", "=", "[", "]", "\n", "if", "type", "(", "functions", ")", "==", "dict", ":", "\n", "                    ", "for", "func_name", ",", "function_dic", "in", "functions", ".", "items", "(", ")", ":", "\n", "                        ", "print", "(", "'-------Loading {}: {}-----'", ".", "format", "(", "func_name", ",", "f", ")", ")", "\n", "functions_to_loop", ".", "append", "(", "function_dic", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "function_dic", "in", "functions", ":", "\n", "                        ", "functions_to_loop", ".", "append", "(", "function_dic", ")", "\n", "", "", "for", "function_dic", "in", "functions_to_loop", ":", "\n", "                    ", "if", "'module'", "not", "in", "function_dic", ":", "\n", "                        ", "escaped_filed", "+=", "1", "\n", "continue", "\n", "", "doc_details", "=", "get_func_documentation", "(", "function_dic", ")", "\n", "# filename = '{}_{}_{}_{}.q'.format(doc_details.module_name, doc_details.klass_name, doc_details.function_name, total_entries_processed)", "\n", "filename", "=", "'{}.q'", ".", "format", "(", "total_entries_processed", ")", "\n", "total_num_triples", "+=", "output_documentation_triples", "(", "doc_details", ",", "out_dir", "+", "'/'", "+", "filename", ")", "\n", "total_entries_processed", "+=", "1", "\n", "if", "doc_details", ".", "type", "==", "'class'", ":", "\n", "                        ", "all_klasses_found", ".", "add", "(", "doc_details", ".", "klass_name", ")", "\n", "", "elif", "doc_details", ".", "type", "==", "'function'", ":", "\n", "                        ", "all_functions_found", ".", "add", "(", "doc_details", ".", "function_name", ")", "\n", "", "else", ":", "\n", "                        ", "all_methods_found", ".", "add", "(", "doc_details", ".", "function_name", ")", "\n", "\n", "", "", "", "", "", "print", "(", "f'Could not parse {escaped_filed} out of {total_num_files} files'", ")", "\n", "print", "(", "f'Total number of triples = {total_num_triples}'", ")", "\n", "\n", "merge_all_files", "(", "out_dir", ",", "out_dir", "+", "'/docstrings_triples.nq'", ")", "\n", "print", "(", "f'writing files to {out_dir}/classes_found.txt'", ")", "\n", "file", "=", "open", "(", "out_dir", "+", "'/classes_found.txt'", ",", "'w'", ")", "\n", "for", "klass", "in", "all_klasses_found", ":", "\n", "        ", "file", ".", "write", "(", "klass", "+", "'\\n'", ")", "\n", "# print(klass)", "\n", "", "file", ".", "close", "(", ")", "\n", "file", "=", "open", "(", "out_dir", "+", "'/methods_found.txt'", ",", "'w'", ")", "\n", "for", "method", "in", "all_methods_found", ":", "\n", "        ", "file", ".", "write", "(", "method", "+", "'\\n'", ")", "\n", "# print(method)", "\n", "", "file", ".", "close", "(", ")", "\n", "file", "=", "open", "(", "out_dir", "+", "'/functions_found.txt'", ",", "'w'", ")", "\n", "for", "func", "in", "all_functions_found", ":", "\n", "        ", "file", ".", "write", "(", "func", "+", "'\\n'", ")", "\n", "# print(func)", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_docstring_into_restructured_text_google": [[27, 30], ["sphinxcontrib.napoleon.docstring.GoogleDocstring().lines", "sphinxcontrib.napoleon.docstring.GoogleDocstring"], "function", ["None"], ["def", "parse_docstring_into_restructured_text_google", "(", "docstring", ")", ":", "\n", "    ", "lines", "=", "GoogleDocstring", "(", "docstring", ",", "config", ")", ".", "lines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_docstring_into_restructured_text_numpy": [[32, 35], ["sphinxcontrib.napoleon.docstring.NumpyDocstring().lines", "sphinxcontrib.napoleon.docstring.NumpyDocstring"], "function", ["None"], ["", "def", "parse_docstring_into_restructured_text_numpy", "(", "docstring", ")", ":", "\n", "    ", "lines", "=", "NumpyDocstring", "(", "docstring", ",", "config", ")", ".", "lines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_docstring_into_restructured_text": [[37, 46], ["sphinxcontrib.napoleon.docstring.NumpyDocstring().lines", "inspect_docstrings_per_module.parse_rst", "sphinxcontrib.napoleon.docstring.GoogleDocstring().lines", "sphinxcontrib.napoleon.docstring.NumpyDocstring", "sphinxcontrib.napoleon.docstring.GoogleDocstring"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_rst"], ["", "def", "parse_docstring_into_restructured_text", "(", "docstring", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "lines", "=", "NumpyDocstring", "(", "docstring", ",", "config", ")", ".", "lines", "(", ")", "\n", "", "except", ":", "\n", "        ", "lines", "=", "GoogleDocstring", "(", "docstring", ",", "config", ")", ".", "lines", "(", ")", "\n", "", "if", "lines", ":", "\n", "        ", "return", "parse_rst", "(", "lines", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_rst": [[51, 110], ["enumerate", "line.startswith", "line.startswith", "line.startswith", "line.startswith", "re.findall", "re.findall", "re.findall", "re.findall", "line.startswith", "re.findall", "re.findall", "re.findall", "re.findall", "line.startswith", "re.findall", "re.findall", "curr_param.strip", "curr_type_param.strip", "re.findall", "re.findall", "curr_param.strip", "curr_type_param.strip"], "function", ["None"], ["", "", "def", "parse_rst", "(", "lines", ")", ":", "\n", "    ", "curr_param", "=", "None", "\n", "curr_par_doc", "=", "None", "\n", "curr_type_param", "=", "None", "\n", "curr_par_type", "=", "None", "\n", "return_doc", "=", "None", "\n", "return_type", "=", "None", "\n", "\n", "param_to_doc", "=", "{", "}", "\n", "param_to_type", "=", "{", "}", "\n", "\n", "function_doc", "=", "''", "\n", "# gather up function doc", "\n", "for", "index", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "not", "line", ".", "startswith", "(", "':param'", ")", ":", "\n", "            ", "function_doc", "=", "function_doc", "+", "'\\n'", "+", "line", "\n", "", "elif", "line", ".", "startswith", "(", "':param'", ")", ":", "\n", "            ", "break", "\n", "", "", "lines", "=", "lines", "[", "index", ":", "]", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "':param '", ")", ":", "\n", "            ", "new_param", "=", "re", ".", "findall", "(", "':param ([^:].*):'", ",", "line", ")", "[", "0", "]", "\n", "if", "new_param", "!=", "curr_param", ":", "\n", "                ", "if", "curr_param", ":", "\n", "                    ", "param_to_doc", "[", "curr_param", ".", "strip", "(", ")", "]", "=", "curr_par_doc", "\n", "", "if", "curr_type_param", ":", "\n", "                    ", "param_to_type", "[", "curr_type_param", ".", "strip", "(", ")", "]", "=", "curr_par_type", "\n", "", "curr_param", "=", "new_param", "\n", "", "curr_par_doc", "=", "re", ".", "findall", "(", "':param [^:]*:(.*)'", ",", "line", ")", "[", "0", "]", "\n", "", "elif", "line", ".", "startswith", "(", "':type '", ")", ":", "\n", "            ", "curr_type_param", "=", "re", ".", "findall", "(", "':type([^:]*):'", ",", "line", ")", "[", "0", "]", "\n", "curr_par_type", "=", "re", ".", "findall", "(", "':type [^:]*:(.*)'", ",", "line", ")", "[", "0", "]", "\n", "", "elif", "line", ".", "startswith", "(", "':returns'", ")", ":", "\n", "            ", "if", "curr_param", ":", "\n", "                ", "param_to_doc", "[", "curr_param", ".", "strip", "(", ")", "]", "=", "curr_par_doc", "\n", "", "if", "curr_type_param", ":", "\n", "                ", "param_to_type", "[", "curr_type_param", ".", "strip", "(", ")", "]", "=", "curr_par_type", "\n", "", "return_doc", "=", "re", ".", "findall", "(", "':returns:(.*)'", ",", "line", ")", "[", "0", "]", "\n", "", "elif", "line", ".", "startswith", "(", "':rtype'", ")", ":", "\n", "            ", "return_type", "=", "re", ".", "findall", "(", "':rtype:(.*)'", ",", "line", ")", "[", "0", "]", "\n", "break", "\n", "", "elif", "curr_par_doc", ":", "\n", "                ", "curr_par_doc", "=", "curr_par_doc", "+", "'\\n'", "+", "line", "\n", "", "", "\"\"\"\n    for p in param_to_doc:\n        print(\"parameter:\" + p)\n        print(param_to_doc[p])\n    for p in param_to_type:\n        print(\"parameter:\" + p + \" type\")\n        print(param_to_type[p])\n    print(\"return doc:\" + return_doc)\n    print(\"return type:\" + return_type)\n    \"\"\"", "\n", "\n", "if", "return_doc", "and", "return_type", ":", "\n", "        ", "return", "function_doc", ",", "param_to_doc", ",", "param_to_type", ",", "{", "'doc'", ":", "return_doc", ",", "'type'", ":", "return_type", "}", "\n", "", "else", ":", "\n", "        ", "return", "function_doc", ",", "param_to_doc", ",", "param_to_type", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name": [[122, 127], ["str", "re.sub().replace().strip", "re.sub().replace().strip", "re.sub().replace", "re.sub().replace", "re.sub", "re.sub", "str"], "function", ["None"], ["def", "get_class_name", "(", "c", ")", ":", "\n", "    ", "if", "str", "(", "c", ")", "!=", "\"<class 'inspect._empty'>\"", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r\"[<>']\"", ",", "''", ",", "str", "(", "c", ")", ")", ".", "replace", "(", "'class'", ",", "''", ")", ".", "strip", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_all": [[129, 134], ["inspect.ismodule", "inspect_docstrings_per_module.inspect_module", "inspect.isclass", "inspect_docstrings_per_module.inspect_class"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_module", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_class"], ["", "", "def", "inspect_all", "(", "f", ")", ":", "\n", "    ", "if", "inspect", ".", "ismodule", "(", "f", ")", ":", "\n", "        ", "return", "inspect_module", "(", "f", ")", "\n", "", "elif", "inspect", ".", "isclass", "(", "f", ")", ":", "\n", "        ", "return", "inspect_class", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_module": [[136, 142], ["inspect.getmembers", "module_to_classes[].append", "inspect_docstrings_per_module.inspect_class"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_class"], ["", "", "def", "inspect_module", "(", "f", ")", ":", "\n", "    ", "module_to_classes", "=", "{", "}", "\n", "module_to_classes", "[", "f", "]", "=", "[", "]", "\n", "for", "c_name", ",", "c", "in", "inspect", ".", "getmembers", "(", "f", ",", "inspect", ".", "isclass", ")", ":", "\n", "        ", "module_to_classes", "[", "f", "]", ".", "append", "(", "inspect_class", "(", "c", ")", ")", "\n", "", "return", "module_to_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_class": [[144, 153], ["inspect.getmembers", "inspect.getmembers", "class_to_methods[].append", "class_to_methods[].append", "inspect.getfullargspec", "inspect.getdoc", "inspect.getfullargspec", "inspect.getdoc"], "function", ["None"], ["", "def", "inspect_class", "(", "f", ")", ":", "\n", "    ", "class_to_methods", "=", "{", "}", "\n", "class_to_methods", "[", "f", "]", "=", "[", "]", "\n", "for", "m_name", ",", "m", "in", "inspect", ".", "getmembers", "(", "f", ",", "inspect", ".", "isfunction", ")", ":", "\n", "        ", "class_to_methods", "[", "f", "]", ".", "append", "(", "(", "m", ",", "m_name", ",", "inspect", ".", "getfullargspec", "(", "m", ")", ",", "inspect", ".", "getdoc", "(", "m", ")", ")", ")", "\n", "", "for", "m_name", ",", "m", "in", "inspect", ".", "getmembers", "(", "f", ",", "inspect", ".", "ismethod", ")", ":", "\n", "        ", "class_to_methods", "[", "f", "]", ".", "append", "(", "(", "m", ",", "m_name", ",", "inspect", ".", "getfullargspec", "(", "m", ")", ",", "inspect", ".", "getdoc", "(", "m", ")", ")", ")", "\n", "\n", "", "return", "class_to_methods", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_types": [[154, 161], ["inspect_docstrings_per_module.get_class_name", "str", "l.append"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name"], ["", "def", "add_types", "(", "anns", ")", ":", "\n", "    ", "l", "=", "[", "]", "\n", "for", "t", "in", "anns", ":", "\n", "        ", "s", "=", "get_class_name", "(", "str", "(", "t", ")", ")", "\n", "if", "s", ":", "\n", "            ", "l", ".", "append", "(", "s", ")", "\n", "", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_to_method_desc": [[163, 172], ["len", "len", "str", "str"], "function", ["None"], ["", "def", "add_to_method_desc", "(", "key", ",", "value", ")", ":", "\n", "    ", "if", "key", "in", "method_descriptions", ":", "\n", "        ", "desc", "=", "method_descriptions", "[", "key", "]", "\n", "# python inspect seems to load the same function across modules and worse yet, produce less information", "\n", "# about a function in some modules.  String length is a crude proxy for keeping the 'more complete' object", "\n", "if", "len", "(", "str", "(", "value", ")", ")", ">", "len", "(", "str", "(", "desc", ")", ")", ":", "\n", "            ", "method_descriptions", "[", "key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "        ", "method_descriptions", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.extract_function": [[174, 239], ["inspect.getdoc", "inspect.signature", "inspect.signature.parameters.values", "list", "inspect.signature.parameters.items", "inspect_docstrings_per_module.parse_docstring_into_restructured_text", "inspect_docstrings_per_module.add_types", "inspect_docstrings_per_module.get_class_name", "sys.exc_info", "print", "traceback.print_tb", "inspect_docstrings_per_module.create_parameter_map", "len", "isinstance", "len", "len", "list.remove", "len", "inspect_docstrings_per_module.create_returns_map", "inspect.signature.parameters.values", "inspect.signature.parameters.items", "list", "isinstance"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.parse_docstring_into_restructured_text", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_types", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.create_parameter_map", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.create_returns_map"], ["", "", "def", "extract_function", "(", "f", ",", "ret", ",", "name", ",", "clazz", "=", "None", ",", "mod", "=", "None", ")", ":", "\n", "    ", "overall_doc", "=", "inspect", ".", "getdoc", "(", "f", ")", "\n", "\n", "ret", "[", "'function_docstring'", "]", "=", "overall_doc", "\n", "\n", "try", ":", "\n", "        ", "sig", "=", "signature", "(", "f", ")", "\n", "\n", "if", "sig", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "ann", "=", "[", "p", ".", "annotation", "for", "p", "in", "sig", ".", "parameters", ".", "values", "(", ")", "]", "\n", "param_types", "=", "add_types", "(", "ann", ")", "\n", "if", "len", "(", "param_types", ")", ">", "0", ":", "\n", "                ", "ret", "[", "'param_types'", "]", "=", "param_types", "\n", "", "", "if", "sig", ".", "return_annotation", ":", "\n", "            ", "ret_types", "=", "get_class_name", "(", "sig", ".", "return_annotation", ")", "\n", "if", "ret_types", ":", "\n", "                ", "ret", "[", "'ret_types'", "]", "=", "ret_types", "\n", "\n", "", "", "param_names", "=", "list", "(", "sig", ".", "parameters", ")", "\n", "if", "sig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "            ", "param_defaults", "=", "{", "\n", "k", ":", "v", ".", "default", "\n", "for", "k", ",", "v", "in", "sig", ".", "parameters", ".", "items", "(", ")", "\n", "if", "v", ".", "default", "is", "not", "inspect", ".", "Parameter", ".", "empty", "and", "not", "isinstance", "(", "v", ".", "default", ",", "object", ")", "\n", "}", "\n", "for", "i", "in", "param_defaults", ":", "\n", "                ", "if", "isinstance", "(", "param_defaults", "[", "i", "]", ",", "tuple", ")", ":", "\n", "                    ", "param_defaults", "[", "i", "]", "=", "list", "(", "param_defaults", "[", "i", "]", ")", "\n", "\n", "", "", "if", "len", "(", "param_defaults", ")", ">", "0", ":", "\n", "                ", "ret", "[", "'param_defaults'", "]", "=", "param_defaults", "\n", "\n", "", "", "if", "param_names", "and", "len", "(", "param_names", ")", ">", "0", ":", "\n", "            ", "if", "'self'", "in", "param_names", ":", "\n", "                ", "param_names", ".", "remove", "(", "'self'", ")", "\n", "", "if", "len", "(", "param_names", ")", ">", "0", ":", "\n", "                ", "ret", "[", "'param_names'", "]", "=", "param_names", "\n", "", "", "", "except", ":", "\n", "        ", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "print", "(", "\"*** error: print_tb:\"", ")", "\n", "traceback", ".", "print_tb", "(", "exc_traceback", ",", "limit", "=", "3", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "pass", "\n", "", "if", "overall_doc", "is", "not", "None", ":", "\n", "        ", "if", "clazz", ":", "\n", "            ", "key", "=", "clazz", "+", "'.'", "+", "name", "\n", "", "else", ":", "\n", "            ", "key", "=", "name", "\n", "\n", "", "method_doc", ",", "param_doc_map", ",", "param_types_map", ",", "return_map", "=", "parse_docstring_into_restructured_text", "(", "overall_doc", ")", "\n", "\n", "ret", "[", "'function_docstring'", "]", "=", "method_doc", "\n", "if", "param_doc_map", ":", "\n", "            ", "param_map", "=", "create_parameter_map", "(", "param_doc_map", ",", "param_types_map", ",", "key", ")", "\n", "\n", "if", "param_map", ":", "\n", "                ", "ret", "[", "'param_map'", "]", "=", "param_map", "\n", "", "if", "return_map", ":", "\n", "                ", "create_returns_map", "(", "return_map", ",", "name", ",", "clazz", ")", "\n", "ret", "[", "'return_map'", "]", "=", "return_map", "\n", "", "if", "method_doc", "!=", "\"\"", ":", "\n", "                ", "ret", "[", "'function_docstring'", "]", "=", "method_doc", "\n", "\n", "", "", "", "ret", "[", "'module'", "]", "=", "mod", "\n", "ret", "[", "'function'", "]", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_module_sub_package": [[241, 315], ["inspect_docstrings_per_module.inspect_all", "inspect.getmembers", "inspect_all.items", "inspect_docstrings_per_module.extract_function", "inspect_docstrings_per_module.add_to_method_desc", "c.items", "inspect_docstrings_per_module.get_class_name", "isinstance", "inspect_docstrings_per_module.add_to_method_desc", "str", "inspect_docstrings_per_module.get_class_name", "inspect_docstrings_per_module.get_class_name", "isinstance", "inspect_docstrings_per_module.add_to_method_desc", "additional_class_names.append", "inspect_docstrings_per_module.inspect_module_sub_package.add_method"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_all", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.extract_function", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_to_method_desc", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_to_method_desc", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_class_name", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.add_to_method_desc"], ["", "def", "inspect_module_sub_package", "(", "module", ",", "mod", ",", "scoping_mod", ",", "all_classes", ",", "is_base", "=", "False", ")", ":", "\n", "    ", "modules", "=", "inspect_all", "(", "module", ")", "\n", "m", "=", "inspect", ".", "getmembers", "(", "module", ",", "inspect", ".", "isfunction", ")", "\n", "\n", "for", "function", "in", "m", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "extract_function", "(", "function", "[", "1", "]", ",", "ret", ",", "scoping_mod", "+", "'.'", "+", "function", "[", "1", "]", ".", "__name__", ",", "mod", ")", "\n", "add_to_method_desc", "(", "scoping_mod", "+", "'.'", "+", "function", "[", "1", "]", ".", "__name__", ",", "ret", ")", "\n", "\n", "", "for", "_", ",", "classes", "in", "modules", ".", "items", "(", ")", ":", "\n", "        ", "for", "c", "in", "classes", ":", "\n", "            ", "for", "clazz", ",", "methods", "in", "c", ".", "items", "(", ")", ":", "\n", "                ", "if", "get_class_name", "(", "str", "(", "clazz", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "!=", "scoping_mod", ".", "split", "(", "'.'", ")", "[", "0", "]", ":", "\n", "                    ", "x", "=", "get_class_name", "(", "str", "(", "clazz", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "x", "=", "mod", "\n", "\n", "", "all_classes", "[", "get_class_name", "(", "str", "(", "clazz", ")", ")", "]", "=", "1", "\n", "class_doc", "=", "clazz", ".", "__doc__", "\n", "ret", "=", "{", "}", "\n", "ret", "[", "'module'", "]", "=", "x", "\n", "ret", "[", "'klass'", "]", "=", "get_class_name", "(", "str", "(", "clazz", ")", ")", "\n", "if", "isinstance", "(", "class_doc", ",", "str", ")", ":", "\n", "                    ", "ret", "[", "'class_docstring'", "]", "=", "class_doc", "\n", "# clazz.__bases__ should not be null", "\n", "", "ret", "[", "'base_classes'", "]", "=", "[", "get_class_name", "(", "str", "(", "c", ")", ")", "for", "c", "in", "clazz", ".", "__bases__", "]", "\n", "\n", "add_to_method_desc", "(", "get_class_name", "(", "str", "(", "clazz", ")", ")", ",", "ret", ")", "\n", "\n", "# for classes in the base module, another reference is directly from the module,", "\n", "# which of course does not exist in the code. E.g. pandas.DataFrame.  Add these in as well", "\n", "# KAVITHA_TODO I think this code is wrong - its not just base modules that have this.  Basically any", "\n", "# module has this issue.  Need to check that this bit of code can be eliminated by the next bit of code", "\n", "additional_class_names", "=", "[", "]", "\n", "\"\"\"\n                if is_base:\n                    ret = {}\n                    ret['module'] = x\n                    cname = x + '.' + get_class_name(str(clazz)).split('.')[-1]\n                    all_classes[cname] = 1\n                    ret['klass'] = cname\n                    ret['base_classes'] = [get_class_name(str(c)) for c in clazz.__bases__]\n                    if isinstance(class_doc, str):\n                        ret['class_docstring'] = class_doc\n                    add_to_method_desc(cname, ret)\n                    additional_class_names.append[cname]\n                \"\"\"", "\n", "\n", "# in cases like RandomForestClassifier, the scoping mod is different from the actual class name", "\n", "# need to add a reference to this class as well", "\n", "if", "scoping_mod", "!=", "get_class_name", "(", "str", "(", "clazz", ")", ")", "[", "0", ":", "-", "1", "]", ":", "\n", "                    ", "ret", "=", "{", "}", "\n", "ret", "[", "'module'", "]", "=", "x", "\n", "cname", "=", "scoping_mod", "+", "'.'", "+", "get_class_name", "(", "str", "(", "clazz", ")", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "all_classes", "[", "cname", "]", "=", "1", "\n", "ret", "[", "'klass'", "]", "=", "cname", "\n", "ret", "[", "'base_classes'", "]", "=", "[", "get_class_name", "(", "str", "(", "c", ")", ")", "for", "c", "in", "clazz", ".", "__bases__", "]", "\n", "if", "isinstance", "(", "class_doc", ",", "str", ")", ":", "\n", "                        ", "ret", "[", "'class_docstring'", "]", "=", "class_doc", "\n", "", "add_to_method_desc", "(", "cname", ",", "ret", ")", "\n", "additional_class_names", ".", "append", "(", "cname", ")", "\n", "\n", "", "for", "method", "in", "methods", ":", "\n", "                    ", "def", "add_method", "(", "m", ",", "c", ")", ":", "\n", "                        ", "m", "=", "method", "[", "1", "]", "\n", "ret", "=", "{", "}", "\n", "extract_function", "(", "method", "[", "0", "]", ",", "ret", ",", "m", ",", "get_class_name", "(", "str", "(", "clazz", ")", ")", ")", "\n", "ret", "[", "'module'", "]", "=", "x", "\n", "ret", "[", "'klass'", "]", "=", "c", "\n", "key", "=", "c", "+", "'.'", "+", "m", "\n", "add_to_method_desc", "(", "key", ",", "ret", ")", "\n", "", "add_method", "(", "m", ",", "get_class_name", "(", "str", "(", "clazz", ")", ")", ")", "\n", "for", "c", "in", "additional_class_names", ":", "\n", "                        ", "add_method", "(", "m", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.create_returns_map": [[319, 339], ["es.index", "inspect_docstrings_per_module.find_shape"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_shape"], ["", "", "", "", "", "", "def", "create_returns_map", "(", "return_map", ",", "func", ",", "clazz", ")", ":", "\n", "\n", "    ", "val", "=", "return_map", "[", "'type'", "]", "\n", "if", "val", "is", "not", "None", ":", "\n", "        ", "if", "'shape'", "in", "val", ":", "\n", "            ", "shape", "=", "find_shape", "(", "val", ",", "False", ")", "\n", "return_map", "[", "'dimensionality'", "]", "=", "shape", "\n", "", "", "if", "clazz", ":", "\n", "        ", "key", "=", "clazz", "+", "'.'", "+", "func", "\n", "", "else", ":", "\n", "        ", "key", "=", "func", "\n", "", "if", "key", "not", "in", "cache_of_indexed_functions", ":", "\n", "        ", "if", "clazz", ":", "\n", "            ", "doc", "=", "{", "'title'", ":", "key", ",", "'function'", ":", "func", ",", "'return_type'", ":", "True", ",", "'klass'", ":", "clazz", ",", "'content'", ":", "return_map", "[", "'type'", "]", "}", "\n", "", "else", ":", "\n", "            ", "doc", "=", "{", "'title'", ":", "key", ",", "'function'", ":", "func", ",", "'return_type'", ":", "True", ",", "'content'", ":", "return_map", "[", "'type'", "]", "}", "\n", "", "es", ".", "index", "(", "index", "=", "indexname", ",", "document", "=", "doc", ")", "\n", "cache_of_indexed_functions", "[", "key", "]", "=", "1", "\n", "\n", "", "return", "return_map", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_optional": [[341, 343], ["param_str.find"], "function", ["None"], ["", "def", "find_optional", "(", "param_str", ")", ":", "\n", "    ", "return", "param_str", ".", "find", "(", "'optional'", ")", ">", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_shape": [[345, 358], ["re.findall", "re.findall", "shapes[].split", "len", "len", "len", "len"], "function", ["None"], ["", "def", "find_shape", "(", "param_str", ",", "first", "=", "True", ")", ":", "\n", "    ", "if", "first", ":", "\n", "        ", "pattern", "=", "r'shape\\s*=?\\s*[\\(\\[{](.*)[\\)\\]}]'", "\n", "", "else", ":", "\n", "        ", "pattern", "=", "r'[\\(\\[{](.*)[\\)\\]}]'", "\n", "", "shapes", "=", "re", ".", "findall", "(", "pattern", ",", "param_str", ")", "\n", "dims", "=", "0", "\n", "if", "shapes", "is", "not", "None", "and", "len", "(", "shapes", ")", ">", "0", ":", "\n", "        ", "dimensions", "=", "shapes", "[", "0", "]", ".", "split", "(", "','", ")", "\n", "dims", "=", "len", "(", "dimensions", ")", "\n", "if", "len", "(", "dimensions", ")", ">", "1", "and", "dimensions", "[", "len", "(", "dimensions", ")", "-", "1", "]", "==", "''", ":", "\n", "            ", "dims", "-=", "1", "\n", "", "", "return", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.create_parameter_map": [[360, 403], ["inspect_docstrings_per_module.find_optional", "re.finditer", "re.finditer", "es.index", "shapes.append", "len", "m.end", "inspect_docstrings_per_module.find_shape", "len", "enumerate", "list", "inspect_docstrings_per_module.find_shape", "set", "m.end", "dims.append"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_optional", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_shape", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.find_shape"], ["", "def", "create_parameter_map", "(", "param_docs", ",", "param_doc_types", ",", "key", ")", ":", "\n", "    ", "param_map", "=", "{", "}", "\n", "\n", "for", "p", "in", "param_docs", ":", "\n", "        ", "param_obj", "=", "{", "}", "\n", "param_obj", "[", "'name'", "]", "=", "p", "\n", "param_obj", "[", "'param_doc'", "]", "=", "param_docs", "[", "p", "]", "\n", "if", "p", "in", "param_doc_types", ":", "\n", "            ", "t", "=", "param_doc_types", "[", "p", "]", "\n", "if", "t", "is", "not", "None", ":", "\n", "                ", "param_obj", "[", "'type'", "]", "=", "t", "\n", "key_param", "=", "key", "+", "'.'", "+", "p", "\n", "if", "key_param", "not", "in", "cache_of_indexed_functions", ":", "\n", "                    ", "doc", "=", "{", "'title'", ":", "key", ",", "'param_name'", ":", "p", ",", "'content'", ":", "t", "}", "\n", "es", ".", "index", "(", "index", "=", "indexname", ",", "document", "=", "doc", ")", "\n", "cache_of_indexed_functions", "[", "key_param", "]", "=", "1", "\n", "\n", "", "", "opt", "=", "find_optional", "(", "t", ")", "\n", "if", "opt", ":", "\n", "                ", "param_obj", "[", "'optional'", "]", "=", "opt", "\n", "\n", "", "if", "'shape'", "in", "t", ":", "\n", "                ", "shapes", "=", "[", "]", "\n", "prev", "=", "0", "\n", "for", "m", "in", "re", ".", "finditer", "(", "'[\\)\\]}]'", ",", "t", ")", ":", "\n", "                    ", "shapes", ".", "append", "(", "t", "[", "prev", ":", "m", ".", "end", "(", ")", "]", ")", "\n", "prev", "=", "m", ".", "end", "(", ")", "+", "1", "\n", "\n", "", "if", "len", "(", "shapes", ")", "==", "1", ":", "\n", "                    ", "param_obj", "[", "\"dimensionality\"", "]", "=", "[", "find_shape", "(", "t", ")", "]", "\n", "", "elif", "len", "(", "shapes", ")", ">", "1", ":", "\n", "                    ", "dims", "=", "[", "]", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "shapes", ")", ":", "\n", "                        ", "first", "=", "True", "\n", "if", "i", ">", "0", ":", "\n", "                            ", "first", "=", "False", "\n", "", "dim", "=", "find_shape", "(", "m", ",", "first", ")", "\n", "if", "dim", ">", "0", ":", "\n", "                            ", "dims", ".", "append", "(", "dim", ")", "\n", "", "", "param_obj", "[", "\"dimensionality\"", "]", "=", "list", "(", "set", "(", "dims", ")", ")", "\n", "\n", "", "", "", "param_map", "[", "p", "]", "=", "param_obj", "\n", "", "return", "param_map", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.write_json": [[405, 414], ["json.dumps", "open", "json.dump", "print", "RuntimeError", "os.path.join"], "function", ["None"], ["", "def", "write_json", "(", "ret_json", ",", "path", ",", "modname", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "json", ".", "dumps", "(", "ret_json", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "ret_json", ")", "\n", "raise", "RuntimeError", "(", "\"JSON is invalid\"", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "modname", "+", "'.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "ret_json", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.debug": [[415, 422], ["print", "json.dumps", "RuntimeError"], "function", ["None"], ["", "", "def", "debug", "(", "ret_json", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "for", "r", "in", "ret_json", ":", "\n", "            ", "print", "(", "r", ")", "\n", "json", ".", "dumps", "(", "r", ")", "\n", "", "", "except", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"JSON is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.get_pure_class_or_function_query": [[424, 451], ["c.split", "must_clauses.append", "should_clauses.append", "c.split", "must_clauses.append", "len"], "function", ["None"], ["", "", "def", "get_pure_class_or_function_query", "(", "c", ",", "key_terms", "=", "None", ",", "number_of_matches", "=", "None", ")", ":", "\n", "    ", "should_clauses", "=", "[", "]", "\n", "must_clauses", "=", "[", "]", "\n", "\n", "for", "term", "in", "c", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "should_clauses", ".", "append", "(", "{", "\"match\"", ":", "{", "\"content\"", ":", "term", "}", "}", ")", "\n", "", "key_term", "=", "c", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "must_clauses", ".", "append", "(", "{", "\"match\"", ":", "{", "\"content\"", ":", "key_term", "}", "}", ")", "\n", "if", "key_terms", ":", "\n", "        ", "must_clauses", ".", "append", "(", "{", "\"match\"", ":", "{", "\"content\"", ":", "key_terms", "}", "}", ")", "\n", "", "query", "=", "{", "\n", "\"from\"", ":", "0", ",", "\"size\"", ":", "5000", ",", "\n", "\"query\"", ":", "{", "\n", "\"bool\"", ":", "{", "\n", "\"must\"", ":", "[", "]", ",", "\n", "\"should\"", ":", "[", "]", "\n", "}", "\n", "}", "\n", "}", "\n", "query", "[", "'query'", "]", "[", "'bool'", "]", "[", "'should'", "]", "=", "should_clauses", "\n", "query", "[", "'query'", "]", "[", "'bool'", "]", "[", "'must'", "]", "=", "must_clauses", "\n", "if", "not", "number_of_matches", ":", "\n", "        ", "query", "[", "'query'", "]", "[", "'bool'", "]", "[", "\"minimum_should_match\"", "]", "=", "len", "(", "should_clauses", ")", "-", "1", "\n", "", "else", ":", "\n", "        ", "query", "[", "'query'", "]", "[", "'bool'", "]", "[", "\"minimum_should_match\"", "]", "=", "1", "\n", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.patch_types": [[453, 502], ["es.indices.exists", "es.search", "len", "inspect_docstrings_per_module.get_pure_class_or_function_query", "print", "[].append", "return_map[].append"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_pure_class_or_function_query"], ["", "def", "patch_types", "(", "all_classes", ")", ":", "\n", "    ", "if", "not", "es", ".", "indices", ".", "exists", "(", "index", "=", "indexname", ")", ":", "\n", "        ", "return", "\n", "# add base types", "\n", "", "all_classes", "[", "'str'", "]", "=", "1", "\n", "all_classes", "[", "'string'", "]", "=", "1", "\n", "all_classes", "[", "'integer'", "]", "=", "1", "\n", "all_classes", "[", "'int'", "]", "=", "1", "\n", "all_classes", "[", "'bool'", "]", "=", "1", "\n", "all_classes", "[", "'boolean'", "]", "=", "1", "\n", "all_classes", "[", "'float'", "]", "=", "1", "\n", "all_classes", "[", "'list'", "]", "=", "1", "\n", "all_classes", "[", "'tuple'", "]", "=", "1", "\n", "all_classes", "[", "'iterator'", "]", "=", "1", "\n", "all_classes", "[", "'map'", "]", "=", "1", "\n", "all_classes", "[", "'set'", "]", "=", "1", "\n", "all_classes", "[", "'array'", "]", "=", "1", "\n", "\n", "for", "c", "in", "all_classes", ":", "\n", "        ", "res", "=", "es", ".", "search", "(", "index", "=", "indexname", ",", "body", "=", "get_pure_class_or_function_query", "(", "c", ",", "None", ",", "1", ")", ")", "\n", "if", "len", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ")", ">", "0", ":", "\n", "            ", "for", "res", "in", "res", "[", "'hits'", "]", "[", "'hits'", "]", ":", "\n", "                ", "key", "=", "res", "[", "'_source'", "]", "[", "'title'", "]", "\n", "if", "key", "not", "in", "method_descriptions", ":", "\n", "                    ", "print", "(", "'WARNING: key not found:'", "+", "key", ")", "\n", "continue", "\n", "", "desc", "=", "method_descriptions", "[", "key", "]", "\n", "if", "'param_name'", "in", "res", "[", "'_source'", "]", ":", "\n", "                    ", "assert", "'param_map'", "in", "desc", "\n", "param_map", "=", "desc", "[", "'param_map'", "]", "\n", "p", "=", "res", "[", "'_source'", "]", "[", "'param_name'", "]", "\n", "if", "p", "in", "param_map", ":", "\n", "                        ", "if", "'inferred_type'", "in", "param_map", "[", "p", "]", ":", "\n", "                            ", "param_map", "[", "p", "]", "[", "'inferred_type'", "]", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                            ", "param_map", "[", "p", "]", "[", "'inferred_type'", "]", "=", "[", "c", "]", "\n", "", "", "", "elif", "'return_type'", "in", "res", "[", "'_source'", "]", ":", "\n", "                    ", "assert", "'return_map'", "in", "desc", ",", "desc", "\n", "return_map", "=", "desc", "[", "'return_map'", "]", "\n", "if", "c", "==", "'boolean'", ":", "\n", "                        ", "c", "=", "'bool'", "\n", "", "if", "c", "==", "'integer'", ":", "\n", "                        ", "c", "=", "'int'", "\n", "", "if", "c", "==", "'string'", ":", "\n", "                        ", "c", "=", "'str'", "\n", "", "if", "'inferred_type'", "in", "return_map", ":", "\n", "                        ", "return_map", "[", "'inferred_type'", "]", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                        ", "return_map", "[", "'inferred_type'", "]", "=", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.main": [[504, 553], ["p.strip.strip", "os.path.join", "print", "print", "importlib.import_module", "print", "inspect_docstrings_per_module.inspect_module_sub_package", "pkgutil.walk_packages", "inspect_docstrings_per_module.patch_types", "es.count", "os.path.isdir", "os.mkdir", "p.strip.strip", "p.strip.strip", "len", "inspect_docstrings_per_module.write_json", "print", "sys.exc_info", "print", "traceback.print_tb", "print", "sys.exc_info", "print", "traceback.print_tb", "print", "importer.find_module().load_module", "inspect_docstrings_per_module.inspect_module_sub_package", "list", "print", "p.strip.strip", "sys.exc_info", "print", "traceback.print_tb", "method_descriptions.values", "importer.find_module"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_module_sub_package", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.patch_types", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.write_json", "home.repos.pwc.inspect_result.wala_graph4code.src.inspect_docstrings_per_module.inspect_module_sub_package"], ["", "", "", "", "", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "p", "=", "sys", ".", "argv", "[", "1", "]", "\n", "p", "=", "p", ".", "strip", "(", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "sys", ".", "argv", "[", "2", "]", ",", "p", ")", "\n", "all_classes", "=", "{", "}", "\n", "\n", "try", ":", "\n", "        ", "package", "=", "importlib", ".", "import_module", "(", "p", ")", "\n", "print", "(", "'loaded:'", "+", "p", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "inspect_module_sub_package", "(", "package", ",", "p", ".", "strip", "(", ")", ",", "p", ".", "strip", "(", ")", ",", "all_classes", ",", "True", ")", "\n", "\n", "for", "importer", ",", "modname", ",", "ispkg", "in", "pkgutil", ".", "walk_packages", "(", "path", "=", "package", ".", "__path__", ",", "\n", "prefix", "=", "package", ".", "__name__", "+", "'.'", ",", "\n", "onerror", "=", "lambda", "x", ":", "print", "(", "x", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "'.tests.'", "in", "modname", ":", "\n", "                    ", "continue", "\n", "", "print", "(", "modname", ")", "\n", "module", "=", "importer", ".", "find_module", "(", "modname", ")", ".", "load_module", "(", "modname", ")", "\n", "inspect_module_sub_package", "(", "module", ",", "p", ".", "strip", "(", ")", ",", "modname", ",", "all_classes", ")", "\n", "\n", "", "except", ":", "\n", "                ", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "print", "(", "\"*** error: print_tb:\"", ")", "\n", "traceback", ".", "print_tb", "(", "exc_traceback", ",", "limit", "=", "3", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "pass", "\n", "#print(all_classes)", "\n", "", "", "patch_types", "(", "all_classes", ")", "\n", "#print(method_descriptions)", "\n", "if", "len", "(", "method_descriptions", ")", ">", "0", ":", "\n", "            ", "write_json", "(", "list", "(", "method_descriptions", ".", "values", "(", ")", ")", ",", "path", ",", "p", ")", "\n", "\n", "", "", "except", "ModuleNotFoundError", ":", "\n", "        ", "print", "(", "\"failed to load module\"", "+", "p", ")", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "print", "(", "\"*** error: print_tb:\"", ")", "\n", "traceback", ".", "print_tb", "(", "exc_traceback", ",", "limit", "=", "3", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "\n", "#except:", "\n", "print", "(", "\"generic error\"", ")", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "print", "(", "\"*** error: print_tb:\"", ")", "\n", "traceback", ".", "print_tb", "(", "exc_traceback", ",", "limit", "=", "3", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "\n", "", "print", "(", "\"Number of documents stored in index:\"", "+", "indexname", ")", "\n", "print", "(", "es", ".", "count", "(", "index", "=", "indexname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.FuncDetails.__init__": [[77, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "functions", ",", "lib_name", ",", "file_name", ",", "graph_main_prefix", ",", "index_name", ",", "stack_output_dir", ",", "split_further", "=", "True", ")", ":", "\n", "        ", "self", ".", "functions", "=", "functions", "\n", "self", ".", "lib_name", "=", "lib_name", "\n", "self", ".", "file_name", "=", "file_name", "\n", "\n", "self", ".", "num_failed_writes", "=", "0", "\n", "self", ".", "number_of_found_klass_searches", "=", "0", "\n", "self", ".", "number_of_found_method_searches", "=", "0", "\n", "self", ".", "number_of_found_function_searches", "=", "0", "\n", "self", ".", "num_failed_writes", "=", "0", "\n", "self", ".", "escaped_filed", "=", "0", "\n", "self", ".", "total_num_triples", "=", "0", "\n", "\n", "self", ".", "graph_main_prefix", "=", "graph_main_prefix", "\n", "# self.es = es #Elasticsearch([{'host': 'localhost', 'port': 9200}]) #not pickable", "\n", "self", ".", "index_name", "=", "index_name", "\n", "self", ".", "stack_output_dir", "=", "stack_output_dir", "\n", "self", ".", "split_further", "=", "split_further", "\n", "", "", "def", "remove_keys", "(", "row", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.remove_keys": [[95, 100], ["row.items", "key.replace"], "function", ["None"], ["", "", "def", "remove_keys", "(", "row", ")", ":", "\n", "    ", "new", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "row", ".", "items", "(", ")", ":", "\n", "        ", "new", "[", "key", ".", "replace", "(", "'@'", ",", "''", ")", "]", "=", "val", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean": [[101, 103], ["None"], "function", ["None"], ["", "def", "clean", "(", "x", ")", ":", "\n", "    ", "return", "x", "#.replace('\\n','').replace('\\r','').replace('\\\\','').replace('\"','')", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.read_stackoverflow_posts": [[104, 190], ["os.path.exists", "print", "pickle.load", "print", "pickle.load", "print", "pickle.load", "print", "print", "os.path.join", "enumerate", "print", "print", "os.path.join", "enumerate", "pickle.load.items", "open", "open", "open", "open", "line.strip.strip", "open", "line.strip.strip", "print", "pickle.dump", "pickle.dump", "pickle.dump", "line.strip.startswith", "line.strip.startswith", "str", "open", "open", "open", "print", "traceback.print_exc", "len", "len", "len", "utils.remove_keys", "utils.clean", "utils.clean", "utils.clean", "utils.clean", "utils.clean", "utils.clean", "utils.clean", "question_answers[].add", "print", "len", "utils.remove_keys", "utils.clean", "traceback.print_exc", "print", "xmltodict.parse", "remove_keys.get", "remove_keys.get", "remove_keys.get", "remove_keys.get", "remove_keys.get", "remove_keys.get", "remove_keys.get", "set", "set", "str", "xmltodict.parse", "remove_keys.get"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.utils.remove_keys", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.remove_keys", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.clean"], ["", "def", "read_stackoverflow_posts", "(", "stackoverflow_dir", ",", "load_posts_if_exists", ",", "pickled_files_out", ")", ":", "\n", "    ", "posts", "=", "{", "}", "\n", "postsVotes", "=", "{", "}", "\n", "question_answers", "=", "{", "}", "\n", "if", "load_posts_if_exists", "and", "path", ".", "exists", "(", "pickled_files_out", "+", "\"/posts.pickle\"", ")", ":", "\n", "        ", "print", "(", "'Loading posts and postsVotes from disk'", ")", "\n", "posts", "=", "pickle", ".", "load", "(", "open", "(", "pickled_files_out", "+", "\"/posts.pickle\"", ",", "\"rb\"", ")", ")", "\n", "print", "(", "f'len(posts) = {len(posts)}'", ")", "\n", "postsVotes", "=", "pickle", ".", "load", "(", "open", "(", "pickled_files_out", "+", "\"/postsVotes.pickle\"", ",", "\"rb\"", ")", ")", "\n", "print", "(", "f'len(postsVotes) = {len(postsVotes)}'", ")", "\n", "question_answers", "=", "pickle", ".", "load", "(", "open", "(", "pickled_files_out", "+", "\"/question_answers.pickle\"", ",", "\"rb\"", ")", ")", "\n", "print", "(", "f'len(question_answers) = {len(question_answers)}'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Step 1: Extracting stackoverflow posts and other relevant information\"", ")", "\n", "file", "=", "join", "(", "stackoverflow_dir", ",", "'Posts.xml'", ")", "\n", "index", "=", "0", "\n", "num_questions", "=", "0", "\n", "num_answers", "=", "0", "\n", "num_non_python_questions", "=", "0", "\n", "num_posts_with_errors", "=", "0", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "open", "(", "file", ")", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "try", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "\"<row\"", ")", ":", "\n", "                    ", "index", "+=", "1", "\n", "el", "=", "xmltodict", ".", "parse", "(", "line", ")", "[", "'row'", "]", "\n", "el", "=", "remove_keys", "(", "el", ")", "\n", "Id", "=", "clean", "(", "(", "el", ".", "get", "(", "'Id'", ",", "''", ")", ")", ")", "\n", "Body", "=", "clean", "(", "el", ".", "get", "(", "'Body'", ",", "''", ")", ")", "\n", "Title", "=", "clean", "(", "el", ".", "get", "(", "'Title'", ",", "''", ")", ")", "\n", "PostTypeId", "=", "clean", "(", "el", ".", "get", "(", "'PostTypeId'", ",", "''", ")", ")", "\n", "AcceptedAnswerId", "=", "clean", "(", "el", ".", "get", "(", "'AcceptedAnswerId'", ",", "''", ")", ")", "\n", "ParentId", "=", "clean", "(", "(", "el", ".", "get", "(", "'ParentId'", ",", "''", ")", ")", ")", "\n", "Tags", "=", "clean", "(", "el", ".", "get", "(", "'Tags'", ",", "''", ")", ")", "\n", "\n", "if", "PostTypeId", "==", "'1'", ":", "\n", "                        ", "num_questions", "+=", "1", "\n", "", "elif", "PostTypeId", "==", "'2'", ":", "\n", "                        ", "num_answers", "+=", "1", "\n", "", "posts", "[", "Id", "]", "=", "(", "Id", ",", "PostTypeId", ",", "ParentId", ",", "AcceptedAnswerId", ",", "Title", ",", "Body", ",", "Tags", ")", "\n", "if", "PostTypeId", "==", "'1'", "and", "Id", "not", "in", "question_answers", ":", "# question", "\n", "                        ", "question_answers", "[", "Id", "]", "=", "set", "(", "[", "]", ")", "\n", "continue", "\n", "", "if", "PostTypeId", "==", "'2'", "and", "ParentId", "not", "in", "question_answers", ":", "# answer", "\n", "                        ", "question_answers", "[", "ParentId", "]", "=", "set", "(", "[", "]", ")", "\n", "", "question_answers", "[", "ParentId", "]", ".", "add", "(", "Id", ")", "\n", "# if index > 1000: ##debug", "\n", "#     break", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "num_posts_with_errors", "+=", "1", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "", "", "print", "(", "f'Extracted {len(posts)} out of {index} posts: num_questions: {num_questions}, '", "\n", "f'num_answers: {num_answers}, num_non_python_posts: {num_non_python_questions}'", ")", "\n", "print", "(", "f'num_posts_with_errors: {num_posts_with_errors}'", ")", "\n", "file", "=", "join", "(", "stackoverflow_dir", ",", "'Votes.xml'", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "open", "(", "file", ")", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "try", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "\"<row\"", ")", ":", "\n", "                    ", "el", "=", "xmltodict", ".", "parse", "(", "line", ")", "[", "'row'", "]", "\n", "el", "=", "remove_keys", "(", "el", ")", "\n", "PostId", "=", "el", "[", "'PostId'", "]", "\n", "VoteTypeId", "=", "clean", "(", "el", ".", "get", "(", "'VoteTypeId'", ",", "''", ")", ")", "\n", "if", "VoteTypeId", "==", "'1'", "or", "VoteTypeId", "==", "'2'", ":", "\n", "                        ", "if", "PostId", "not", "in", "postsVotes", ":", "\n", "                            ", "postsVotes", "[", "PostId", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "postsVotes", "[", "PostId", "]", "=", "postsVotes", "[", "PostId", "]", "+", "1", "\n", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "print", "(", "e", ")", "\n", "\n", "", "", "for", "key", ",", "value", "in", "posts", ".", "items", "(", ")", ":", "\n", "            ", "qvotes", "=", "str", "(", "postsVotes", "[", "key", "]", ")", "if", "key", "in", "postsVotes", "else", "''", "\n", "posts", "[", "key", "]", "=", "posts", "[", "key", "]", "+", "(", "qvotes", ",", ")", "\n", "##save posts, votes", "\n", "# TODO: skip the above if these files are already there!", "\n", "", "try", ":", "\n", "            ", "print", "(", "'Saving posts and votes'", ")", "\n", "pickle", ".", "dump", "(", "posts", ",", "open", "(", "pickled_files_out", "+", "\"/posts.pickle\"", ",", "\"wb\"", ")", ")", "\n", "pickle", ".", "dump", "(", "postsVotes", ",", "open", "(", "pickled_files_out", "+", "\"/postsVotes.pickle\"", ",", "\"wb\"", ")", ")", "\n", "pickle", ".", "dump", "(", "question_answers", ",", "open", "(", "pickled_files_out", "+", "\"/question_answers.pickle\"", ",", "\"wb\"", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Failed to save posts/votes'", ")", "\n", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "", "", "return", "posts", ",", "postsVotes", ",", "question_answers", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.build_elastic_search_index": [[191, 249], ["print", "question_answers.items", "print", "print", "print", "print", "print", "es.index", "len", "bs4.BeautifulSoup", "answerCodes.append", "str", "answers.append", "p.get_text", "bs4.BeautifulSoup.find_all", "p.get_text"], "function", ["None"], ["", "def", "build_elastic_search_index", "(", "index_name", ",", "es", ",", "posts", ",", "postsVotes", ",", "question_answers", ",", "delete_index", ")", ":", "\n", "    ", "num_answers_with_less_votes", "=", "0", "\n", "num_answers_not_found_in_posts", "=", "0", "#should be zero", "\n", "num_questions_not_found_in_posts", "=", "0", "\n", "number_of_indexed_questions", "=", "0", "\n", "number_of_indexed_answers", "=", "0", "\n", "\n", "if", "delete_index", ":", "\n", "        ", "index", "=", "1", "\n", "print", "(", "\"Step 2: Ingesting the collected posts in ES index\"", ")", "\n", "for", "key", ",", "value", "in", "question_answers", ".", "items", "(", ")", ":", "\n", "            ", "answers", "=", "[", "]", "\n", "if", "key", "not", "in", "posts", ":", "\n", "                ", "num_questions_not_found_in_posts", "+=", "1", "\n", "continue", "\n", "", "for", "ansId", "in", "value", ":", "\n", "# ##TODO: filter answers based on votes", "\n", "# if ansId not in postsVotes:", "\n", "#     continue", "\n", "# if ansId in postsVotes and postsVotes[ansId] < 1:", "\n", "#     # print(f'answer #{ansId} for question {key} does not have enough votes')", "\n", "#     num_answers_with_less_votes += 1", "\n", "#     continue", "\n", "# print(f'answr #{ansId} for question {key} has enough votes {postsVotes[ansId]}')", "\n", "                ", "if", "ansId", "in", "posts", ":", "\n", "                    ", "answers", ".", "append", "(", "posts", "[", "ansId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "num_answers_not_found_in_posts", "+=", "1", "\n", "", "", "question", "=", "posts", "[", "key", "]", "\n", "# TODO: focus on questions, marked answers or answers with votes > 1", "\n", "qId", ",", "PostTypeId", ",", "ParentId", ",", "AcceptedAnswerId", ",", "Title", ",", "Body", ",", "Tags", ",", "qvotes", "=", "question", "\n", "docContent", "=", "Title", "+", "\" \"", "+", "Body", "+", "\" \"", "+", "Tags", "\n", "if", "DEBUG", "and", "'tensorflow'", "not", "in", "docContent", ":", "\n", "                ", "continue", "\n", "", "answerCodes", "=", "[", "]", "\n", "for", "answer", "in", "answers", ":", "\n", "# _, _, _, answerTitle, answerBody, _ = answer", "\n", "                ", "aId", ",", "aPostTypeId", ",", "aParentId", ",", "aAcceptedAnswerId", ",", "answerTitle", ",", "answerBody", ",", "aTags", ",", "avotes", "=", "answer", "\n", "docContent", "+=", "answerBody", "\n", "soup", "=", "BeautifulSoup", "(", "answerBody", ",", "\"html.parser\"", ")", "\n", "# codes = [p.get_text() for p in soup.find_all(\"code\", text=True)]", "\n", "codes", "=", "[", "p", ".", "get_text", "(", ")", "for", "p", "in", "soup", ".", "find_all", "(", "\"code\"", ",", "text", "=", "True", ")", "if", "'\\n'", "in", "p", ".", "get_text", "(", ")", "]", "\n", "answerCodes", ".", "append", "(", "codes", ")", "\n", "\n", "# codes has to be filtered for min length or having new line!", "\n", "", "doc", "=", "{", "'title'", ":", "str", "(", "Title", ")", ",", "'content'", ":", "docContent", ",", "'codes'", ":", "answerCodes", ",", "'question_id:'", ":", "key", ",", "\n", "'question_votes:'", ":", "qvotes", ",", "\n", "'question_text:'", ":", "Body", ",", "'tags'", ":", "Tags", ",", "'answers'", ":", "answers", "}", "\n", "res", "=", "es", ".", "index", "(", "index", "=", "index_name", ",", "id", "=", "index", ",", "body", "=", "doc", ")", "\n", "number_of_indexed_questions", "+=", "1", "\n", "number_of_indexed_answers", "+=", "len", "(", "answers", ")", "\n", "index", "+=", "1", "\n", "\n", "", "print", "(", "f'num_answers_with_less_votes: {num_answers_with_less_votes}'", ")", "\n", "print", "(", "f'num_questions_not_found_in_posts: {num_questions_not_found_in_posts}'", ")", "\n", "print", "(", "f'num_answers_not_found_in_posts: {num_answers_not_found_in_posts}'", ")", "\n", "print", "(", "f'number_of_indexed_questions: {number_of_indexed_questions}'", ")", "\n", "print", "(", "f'number_of_indexed_answers: {number_of_indexed_answers}'", ")", "\n", "# print('Total number of posts with votes > 1 extracted from Stackoverflow = ', len(posts))", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_pure_class_or_function_query": [[253, 296], ["set", "c.split", "key_terms.split", "set.add", "print", "set.add"], "function", ["None"], ["", "", "def", "get_pure_class_or_function_query", "(", "c", ",", "key_terms", "=", "None", ")", ":", "\n", "    ", "should_clauses", "=", "set", "(", "[", "]", ")", "\n", "# must_clauses = []", "\n", "# for term in c.split('.'):", "\n", "#     should_clauses.append({\"match\": {\"content\": term}})", "\n", "# key_term = c.split('.')[-1]", "\n", "# must_clauses.append({\"match\":{\"content\" : key_term}})", "\n", "# if key_terms:", "\n", "#     must_clauses.append({\"match\":{\"content\": key_terms}})", "\n", "# query = {", "\n", "#     \"from\": 0, \"size\": 1000,", "\n", "#     \"query\": {", "\n", "#     \"bool\" : {", "\n", "#         \"must\" : [],", "\n", "#         \"should\" : []", "\n", "#     }", "\n", "# }", "\n", "# }", "\n", "# query['query']['bool']['should'] = should_clauses", "\n", "# query['query']['bool']['must'] = must_clauses", "\n", "# query['query']['bool'][\"minimum_should_match\"] = len(should_clauses) - 1", "\n", "if", "key_terms", ":", "\n", "        ", "for", "term", "in", "key_terms", ".", "split", "(", "'.'", ")", ":", "\n", "            ", "should_clauses", ".", "add", "(", "term", ")", "\n", "\n", "", "", "for", "term", "in", "c", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "should_clauses", ".", "add", "(", "term", ")", "\n", "\n", "", "query", "=", "{", "\n", "'from'", ":", "0", ",", "'size'", ":", "5000", ",", "\n", "\"query\"", ":", "{", "\n", "\"multi_match\"", ":", "{", "\n", "\"query\"", ":", "' '", ".", "join", "(", "should_clauses", ")", ",", "\n", "\"type\"", ":", "\"most_fields\"", ",", "\n", "\"fields\"", ":", "[", "\"content\"", "]", ",", "\n", "\"operator\"", ":", "\"AND\"", "\n", "}", "\n", "}", "\n", "}", "\n", "\n", "if", "DEBUG", ":", "\n", "        ", "print", "(", "f'------------\\nElastic search query used for {c} and {key_terms} is {query}\\n------------'", ")", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_class_function_query": [[297, 299], ["utils.get_pure_class_or_function_query"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_pure_class_or_function_query"], ["", "def", "get_class_function_query", "(", "func", ",", "c", ")", ":", "\n", "    ", "return", "get_pure_class_or_function_query", "(", "c", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.filter_results": [[300, 344], ["qualified_name.split", "must_clauses.append", "len", "must_clauses.append", "es.indices.analyze", "print", "print", "tokens.append", "len", "must.lower", "str().lower", "print", "str().lower", "len", "str", "str"], "function", ["None"], ["", "def", "filter_results", "(", "res", ",", "qualified_name", ",", "es", ")", ":", "\n", "    ", "must_clauses", "=", "[", "]", "\n", "arr", "=", "qualified_name", ".", "split", "(", "'.'", ")", "\n", "must_clauses", ".", "append", "(", "arr", "[", "-", "1", "]", ")", "\n", "if", "len", "(", "arr", ")", ">", "1", ":", "\n", "        ", "must_clauses", ".", "append", "(", "arr", "[", "0", "]", ")", "\n", "\n", "", "must_2_match", "=", "{", "}", "\n", "for", "must", "in", "must_clauses", ":", "\n", "        ", "token_parts", "=", "es", ".", "indices", ".", "analyze", "(", "index", "=", "\"dummy_idx\"", ",", "body", "=", "{", "\n", "\"field\"", ":", "\"content\"", ",", "\n", "\"text\"", ":", "must", "\n", "}", ")", "\n", "tokens", "=", "[", "]", "\n", "for", "s", "in", "token_parts", "[", "'tokens'", "]", ":", "\n", "            ", "tokens", ".", "append", "(", "s", "[", "'token'", "]", ")", "\n", "", "str_to_match", "=", "' '", ".", "join", "(", "tokens", ")", ".", "lower", "(", ")", "\n", "must_2_match", "[", "must", "]", "=", "str_to_match", "\n", "\n", "", "if", "DEBUG", ":", "\n", "        ", "print", "(", "f'token matches for {qualified_name}: {must_2_match}'", ")", "\n", "\n", "", "num_bad_matches", "=", "0", "\n", "for", "doc", "in", "res", "[", "'hits'", "]", "[", "'hits'", "]", ":", "\n", "        ", "num_must_matches", "=", "0", "\n", "for", "must", "in", "must_clauses", ":", "\n", "            ", "if", "must", ".", "lower", "(", ")", "in", "str", "(", "doc", "[", "\"_source\"", "]", "[", "\"content\"", "]", ")", ".", "lower", "(", ")", ":", "\n", "                ", "num_must_matches", "+=", "1", "\n", "", "else", ":", "\n", "                ", "str_to_match", "=", "must_2_match", "[", "must", "]", "\n", "if", "str_to_match", "in", "str", "(", "doc", "[", "\"_source\"", "]", "[", "\"content\"", "]", ")", ".", "lower", "(", ")", ":", "\n", "                    ", "num_must_matches", "+=", "1", "\n", "", "", "", "if", "num_must_matches", "==", "len", "(", "must_clauses", ")", ":", "\n", "            ", "doc", "[", "'good_match'", "]", "=", "'True'", "\n", "", "else", ":", "\n", "            ", "if", "DEBUG", ":", "\n", "                ", "print", "(", "f'bad match for {qualified_name}: {doc[\"_source\"][\"title\"]}'", ")", "\n", "", "doc", "[", "'good_match'", "]", "=", "'False'", "\n", "num_bad_matches", "+=", "1", "\n", "\n", "", "", "if", "DEBUG", ":", "\n", "        ", "print", "(", "f\"Number of bad matches for {qualified_name} is {num_bad_matches} out of {len(res['hits']['hits'])}\"", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.num_lines": [[345, 350], ["open", "enumerate"], "function", ["None"], ["", "def", "num_lines", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "l", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "pass", "\n", "", "", "return", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.create_doc_graph": [[351, 522], ["lock.acquire", "list_of_ES_conn.pop", "print", "lock.release", "os.path.join", "klass_searches.items", "all_functions_searches.items", "lock.acquire", "list_of_ES_conn.append", "print", "lock.release", "print", "len", "print", "time.sleep", "all_functions.append", "create_docstrings_graph.get_func_documentation", "rdflib.URIRef", "os.path.exists", "all_functions.append", "rdflib.ConjunctiveGraph", "os.mkdir", "os.path.join", "print", "os.path.join", "print", "len", "rdflib.URIRef", "create_docstrings_graph.add_edge", "utils.get_pure_class_or_function_query", "list_of_ES_conn.pop.search", "print", "utils.filter_results", "utils.add_stackoverflow_triples", "print", "print", "traceback.print_exc", "open", "json.dump", "print", "open", "json.dump", "print", "len", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.Literal", "len", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "utils.get_class_function_query", "list_of_ES_conn.pop.search", "print", "utils.filter_results", "all_functions_searches[].append", "utils.add_stackoverflow_triples", "rdflib.URIRef", "create_docstrings_graph.add_edge", "utils.get_pure_class_or_function_query", "list_of_ES_conn.pop.search", "print", "utils.filter_results", "utils.add_stackoverflow_triples", "add_stackoverflow_triples.serialize", "utils.num_lines", "print", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.Literal", "len", "create_docstrings_graph.get_new_func_klass_uri", "rdflib.URIRef", "rdflib.Literal", "len", "random.choices", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_func_documentation", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_pure_class_or_function_query", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.filter_results", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.add_stackoverflow_triples", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_class_function_query", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.filter_results", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.add_stackoverflow_triples", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.get_pure_class_or_function_query", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.filter_results", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.add_stackoverflow_triples", "home.repos.pwc.inspect_result.wala_graph4code.src.utils.num_lines", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.get_new_func_klass_uri"], ["", "def", "create_doc_graph", "(", "function_details", ":", "FuncDetails", ")", ":", "\n", "    ", "klass_searches", "=", "{", "}", "\n", "all_functions_searches", "=", "{", "}", "\n", "global", "list_of_ES_conn", "\n", "import", "time", "\n", "lock", ".", "acquire", "(", ")", "\n", "while", "len", "(", "list_of_ES_conn", ")", "==", "0", ":", "\n", "        ", "print", "(", "'No more available ES ports ... waiting'", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "", "es", "=", "list_of_ES_conn", ".", "pop", "(", "0", ")", "\n", "print", "(", "f'Current # of available ports: {len(list_of_ES_conn)}'", ")", "\n", "lock", ".", "release", "(", ")", "\n", "\n", "# es = Elasticsearch([{'host': 'localhost', 'port': 9200}])", "\n", "all_functions", "=", "[", "]", "\n", "\n", "if", "function_details", ".", "split_further", ":", "\n", "        ", "for", "function_dic", "in", "function_details", ".", "functions", ":", "\n", "            ", "all_functions", ".", "append", "(", "function_dic", ")", "\n", "", "", "else", ":", "\n", "        ", "all_functions", ".", "append", "(", "function_details", ".", "functions", ")", "\n", "\n", "", "for", "function_dic", "in", "all_functions", ":", "\n", "# if 'module' not in function_dic:", "\n", "#     function_details.escaped_filed += 1", "\n", "#     continue", "\n", "        ", "doc_details", "=", "get_func_documentation", "(", "function_dic", ")", "\n", "# print('------')", "\n", "# print(function_dic)", "\n", "# print('------')", "\n", "# # print(doc_details)", "\n", "# attrs = vars(doc_details)", "\n", "# # {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'}", "\n", "# # now dump this in some way or another", "\n", "# print(', '.join(\"%s: %s\" % item for item in attrs.items()))", "\n", "# print('------')", "\n", "graph_uri", "=", "URIRef", "(", "prefixes", "[", "function_details", ".", "graph_main_prefix", "]", ")", "\n", "try", ":", "\n", "            ", "g", "=", "ConjunctiveGraph", "(", ")", "\n", "if", "doc_details", ".", "type", "==", "'class'", ":", "\n", "# doc_uri = URIRef(get_func_klass_uri(doc_details.module_name, doc_details.klass_name, function_details.graph_main_prefix))", "\n", "# g = add_edge(g, doc_uri, URIRef(function_details.graph_main_prefix + 'name'), Literal(doc_details.klass_name),", "\n", "#              URIRef(function_details.graph_main_prefix))", "\n", "\n", "                ", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_details", ".", "klass_name", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "Literal", "(", "doc_details", ".", "klass_name", ")", ",", "\n", "graph_uri", ")", "\n", "\n", "query", "=", "get_pure_class_or_function_query", "(", "doc_details", ".", "klass_name", ")", "\n", "res", "=", "es", ".", "search", "(", "request_timeout", "=", "30", ",", "index", "=", "function_details", ".", "index_name", ",", "body", "=", "query", ")", "\n", "print", "(", "f\"Number of matches in ES for {doc_details.klass_name} is {len(res['hits']['hits'])}\"", ")", "\n", "if", "len", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "res", "=", "filter_results", "(", "res", ",", "doc_details", ".", "klass_name", ",", "es", ")", "\n", "key", "=", "doc_details", ".", "klass_name", "\n", "klass_searches", "[", "key", "]", "=", "{", "'module'", ":", "doc_details", ".", "module_name", ",", "'klass'", ":", "doc_details", ".", "klass_name", ",", "\n", "'stackoverflow'", ":", "res", "[", "'hits'", "]", "[", "'hits'", "]", "}", "\n", "function_details", ".", "number_of_found_klass_searches", "+=", "1", "\n", "g", "=", "add_stackoverflow_triples", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ",", "doc_uri", ",", "g", ",", "function_details", ".", "graph_main_prefix", ")", "\n", "", "elif", "doc_details", ".", "type", "==", "'method'", ":", "\n", "# doc_uri = URIRef(get_method_uri(doc_details.klass_name, doc_details.function_name, function_details.graph_main_prefix))", "\n", "                ", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", ")", ")", "\n", "# g = add_edge(g, doc_uri, URIRef(function_details.graph_main_prefix + 'name'),", "\n", "#              Literal(doc_details.klass_name + '.' + doc_details.function_name),", "\n", "#              URIRef(function_details.graph_main_prefix))", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "\n", "Literal", "(", "doc_details", ".", "function_name", ")", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'altLabel'", ")", ",", "\n", "Literal", "(", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", ")", ",", "graph_uri", ")", "\n", "\n", "query", "=", "get_class_function_query", "(", "doc_details", ".", "function_name", ",", "doc_details", ".", "klass_name", ")", "\n", "res", "=", "es", ".", "search", "(", "request_timeout", "=", "30", ",", "index", "=", "function_details", ".", "index_name", ",", "body", "=", "query", ")", "\n", "print", "(", "f\"Number of matches in ES for {doc_details.klass_name}, {doc_details.function_name}  is {len(res['hits']['hits'])}\"", ")", "\n", "if", "len", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "res", "=", "filter_results", "(", "res", ",", "doc_details", ".", "klass_name", "+", "'.'", "+", "doc_details", ".", "function_name", ",", "es", ")", "\n", "if", "doc_details", ".", "klass_name", "not", "in", "all_functions_searches", ":", "\n", "                    ", "all_functions_searches", "[", "doc_details", ".", "klass_name", "]", "=", "[", "]", "\n", "", "all_functions_searches", "[", "doc_details", ".", "klass_name", "]", ".", "append", "(", "{", "'module'", ":", "doc_details", ".", "module_name", ",", "'klass'", ":", "doc_details", ".", "klass_name", ",", "\n", "'function'", ":", "doc_details", ".", "function_name", ",", "\n", "'stackoverflow'", ":", "res", "[", "'hits'", "]", "[", "'hits'", "]", "}", ")", "\n", "function_details", ".", "number_of_found_method_searches", "+=", "1", "\n", "g", "=", "add_stackoverflow_triples", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ",", "doc_uri", ",", "g", ",", "function_details", ".", "graph_main_prefix", ")", "\n", "\n", "", "else", ":", "\n", "# doc_uri = URIRef(get_func_klass_uri(doc_details.module_name, doc_details.function_name, function_details.graph_main_prefix))", "\n", "                ", "doc_uri", "=", "URIRef", "(", "get_new_func_klass_uri", "(", "doc_details", ".", "function_name", ")", ")", "\n", "# g = add_edge(g, doc_uri, URIRef(function_details.graph_main_prefix + 'name'),", "\n", "#              Literal(doc_details.function_name),", "\n", "#              URIRef(function_details.graph_main_prefix))", "\n", "g", "=", "add_edge", "(", "g", ",", "doc_uri", ",", "URIRef", "(", "prefixes", "[", "'rdfs'", "]", "+", "'label'", ")", ",", "\n", "Literal", "(", "doc_details", ".", "function_name", ")", ",", "graph_uri", ")", "\n", "query", "=", "get_pure_class_or_function_query", "(", "doc_details", ".", "function_name", ")", "\n", "res", "=", "es", ".", "search", "(", "request_timeout", "=", "30", ",", "index", "=", "function_details", ".", "index_name", ",", "body", "=", "query", ")", "\n", "print", "(", "f\"Number of matches in ES for {doc_details.function_name} is {len(res['hits']['hits'])}\"", ")", "\n", "if", "len", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "res", "=", "filter_results", "(", "res", ",", "doc_details", ".", "function_name", ",", "es", ")", "\n", "key", "=", "doc_details", ".", "function_name", "\n", "klass_searches", "[", "key", "]", "=", "{", "'module'", ":", "doc_details", ".", "module_name", ",", "'function'", ":", "doc_details", ".", "function_name", ",", "\n", "'stackoverflow'", ":", "res", "[", "'hits'", "]", "[", "'hits'", "]", "}", "\n", "function_details", ".", "number_of_found_function_searches", "+=", "1", "\n", "g", "=", "add_stackoverflow_triples", "(", "res", "[", "'hits'", "]", "[", "'hits'", "]", ",", "doc_uri", ",", "g", ",", "function_details", ".", "graph_main_prefix", ")", "\n", "\n", "", "if", "g", "is", "None", ":", "\n", "                ", "print", "(", "\n", "f'Could not create a graph for: module {doc_details.module_name}, class: {doc_details.klass_name}, func: {doc_details.function_name}'", ")", "\n", "", "else", ":", "\n", "                ", "g_num_triples", "=", "0", "\n", "for", "e", "in", "g", ":", "\n", "                    ", "g_num_triples", "+=", "1", "\n", "# print(e)", "\n", "", "if", "g_num_triples", ">", "0", ":", "\n", "                    ", "function_details", ".", "total_num_triples", "+=", "g_num_triples", "\n", "rnd_str", "=", "''", ".", "join", "(", "random", ".", "choices", "(", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", ",", "k", "=", "10", ")", ")", "\n", "filename", "=", "'{}_{}.nq'", ".", "format", "(", "rnd_str", ",", "function_details", ".", "lib_name", ")", "\n", "g", ".", "serialize", "(", "destination", "=", "function_details", ".", "stack_output_dir", "+", "'/'", "+", "filename", ",", "format", "=", "'nquads'", ")", "\n", "\n", "lines_count", "=", "num_lines", "(", "function_details", ".", "stack_output_dir", "+", "'/'", "+", "filename", ")", "\n", "print", "(", "f'Actual number of lines in file: {lines_count} vs. num_of_edges {g_num_triples}'", ")", "\n", "", "", "", "except", ":", "\n", "            ", "print", "(", "f'Failed to generate graph for {doc_details.module_name}.{doc_details.klass_name}.{doc_details.function_name}'", ")", "\n", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "\n", "##Save found matches if any", "\n", "", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "function_details", ".", "stack_output_dir", ",", "function_details", ".", "lib_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_path", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "for", "k", ",", "v", "in", "klass_searches", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pth_json", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "k", "+", "'.json'", ")", "\n", "with", "open", "(", "pth_json", ",", "'w'", ")", "as", "out", ":", "\n", "                ", "json", ".", "dump", "(", "v", ",", "out", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "f'Saving json matches of {pth_json}'", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "f'Failed to write klass searches: {k} at output path {pth_json}'", ")", "\n", "function_details", ".", "num_failed_writes", "+=", "1", "\n", "\n", "", "", "for", "k", ",", "v", "in", "all_functions_searches", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pth_json", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "k", "+", "'_all_methods.json'", ")", "\n", "with", "open", "(", "pth_json", ",", "'w'", ")", "as", "out", ":", "\n", "                ", "json", ".", "dump", "(", "v", ",", "out", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "f'Saving json matches of {pth_json}'", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "f'Failed to write method searches: {k} at output path {pth_json}'", ")", "\n", "function_details", ".", "num_failed_writes", "+=", "1", "\n", "\n", "# if len(all_functions_searches) != 0:", "\n", "#     try:", "\n", "#         pth_json = os.path.join(output_path, doc_details.module_name + '_all_methods.json')", "\n", "#         with open(pth_json, 'w') as out:", "\n", "#             json.dump(all_functions_searches, out, indent=4)", "\n", "#         print(f'Saving json matches of {pth_json}')", "\n", "#", "\n", "#     except:", "\n", "#         print(f'Failed to write function searches: {doc_details.module_name} at output path {output_path}')", "\n", "#         function_details.num_failed_writes += 1", "\n", "# es.transport.close()", "\n", "", "", "lock", ".", "acquire", "(", ")", "\n", "list_of_ES_conn", ".", "append", "(", "es", ")", "\n", "print", "(", "f'Finished with this ES port ... adding it back, new size = {len(list_of_ES_conn)}'", ")", "\n", "lock", ".", "release", "(", ")", "\n", "print", "(", "f'Finished graph creation with {function_details.total_num_triples} triples -- '", "\n", "f'module {doc_details.module_name}, class: {doc_details.klass_name}, func: {doc_details.function_name}'", ")", "\n", "# time.sleep(20)", "\n", "return", "function_details", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.create_stackoverflow_graph": [[524, 600], ["os.listdir", "print", "range", "torch.multiprocessing.Pool", "torch.multiprocessing.Pool.imap_unordered", "range", "print", "print", "print", "print", "print", "utils.merge_all_files", "lib.startswith", "os.path.join", "os.listdir", "len", "list_of_ES_conn.append", "len", "print", "os.path.isdir", "os.path.join", "elasticsearch.Elasticsearch", "print", "pool.imap_unordered.next", "f.endswith", "print", "open", "print", "traceback.print_exc", "json.load", "type", "problem_set.append", "os.path.join", "len", "print", "type", "len", "type", "problem_set.append", "utils.FuncDetails", "utils.FuncDetails", "str"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.utils.merge_all_files"], ["", "def", "create_stackoverflow_graph", "(", "index_name", ",", "es", ",", "docstring_dir", ",", "stack_output_dir", ",", "graph_main_prefix", ",", "num_cores", "=", "10", ")", ":", "\n", "    ", "total_num_files", "=", "0", "\n", "escaped_filed", "=", "0", "\n", "number_of_found_klass_searches", "=", "0", "\n", "number_of_found_method_searches", "=", "0", "\n", "number_of_found_function_searches", "=", "0", "\n", "num_failed_writes", "=", "0", "\n", "# out_triple_file = open(stack_output_dir + '/stackoverflow_triples.nq', 'w')", "\n", "lib_cnt", "=", "0", "\n", "total_num_triples", "=", "0", "\n", "total_entries_processed", "=", "0", "\n", "problem_set", "=", "[", "]", "\n", "for", "lib", "in", "os", ".", "listdir", "(", "docstring_dir", ")", ":", "\n", "        ", "if", "lib", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "print", "(", "'Skip '", ",", "lib", ")", "\n", "continue", "\n", "", "source_path", "=", "os", ".", "path", ".", "join", "(", "docstring_dir", ",", "lib", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "source_path", ")", ":", "# '../data/mods.22/pyvenv.cfg'", "\n", "            ", "continue", "\n", "", "lib_cnt", "+=", "1", "\n", "# if DEBUG and lib_cnt > 5:", "\n", "#     print('**********Debug STOOOOOPP*******')", "\n", "#     break", "\n", "for", "f", "in", "os", ".", "listdir", "(", "source_path", ")", ":", "\n", "            ", "if", "not", "f", ".", "endswith", "(", "'.json'", ")", ":", "\n", "                ", "print", "(", "'Skip '", ",", "lib", ")", "\n", "continue", "\n", "", "total_num_files", "+=", "1", "\n", "pth", "=", "os", ".", "path", ".", "join", "(", "source_path", ",", "f", ")", "\n", "with", "open", "(", "pth", ")", "as", "input", ":", "\n", "                ", "try", ":", "\n", "                    ", "functions", "=", "json", ".", "load", "(", "input", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'Exception during loading file:'", "+", "pth", ")", "\n", "escaped_filed", "+=", "1", "\n", "\n", "", "if", "type", "(", "functions", ")", "==", "dict", ":", "\n", "                    ", "functions", "=", "[", "functions", "]", "\n", "", "if", "type", "(", "functions", ")", "==", "list", "and", "len", "(", "functions", ")", ">", "0", "and", "type", "(", "functions", "[", "0", "]", ")", "==", "dict", ":", "#handle last docstrings; all in one file", "\n", "                    ", "for", "function_dic", "in", "functions", ":", "\n", "                        ", "if", "DEBUG", "and", "'tensorflow'", "not", "in", "str", "(", "function_dic", ")", ":", "\n", "                            ", "continue", "\n", "", "problem_set", ".", "append", "(", "FuncDetails", "(", "function_dic", ",", "lib", ",", "f", ",", "graph_main_prefix", "=", "graph_main_prefix", ",", "\n", "index_name", "=", "index_name", ",", "stack_output_dir", "=", "stack_output_dir", ",", "split_further", "=", "False", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "problem_set", ".", "append", "(", "FuncDetails", "(", "functions", ",", "lib", ",", "f", ",", "graph_main_prefix", "=", "graph_main_prefix", ",", "\n", "index_name", "=", "index_name", ",", "stack_output_dir", "=", "stack_output_dir", ",", "split_further", "=", "True", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'problem set size; '", ",", "len", "(", "problem_set", ")", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "        ", "list_of_ES_conn", ".", "append", "(", "Elasticsearch", "(", "\"https://localhost:9200\"", ",", "\n", "ca_certs", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'ES_HOME'", "]", ",", "\"http_ca.crt\"", ")", ",", "basic_auth", "=", "(", "\"elastic\"", ",", "os", ".", "environ", "[", "'ES_PASSWORD'", "]", ")", ")", ")", "\n", "\n", "", "pool", "=", "Pool", "(", "num_cores", ")", "\n", "it", "=", "pool", ".", "imap_unordered", "(", "create_doc_graph", ",", "problem_set", ")", "\n", "for", "eps", "in", "range", "(", "len", "(", "problem_set", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"Processing Func file: {} (out of {})\"", ".", "format", "(", "eps", ",", "len", "(", "problem_set", ")", ")", ")", "\n", "function_details", "=", "it", ".", "next", "(", ")", "#timeout=100)", "\n", "num_failed_writes", "+=", "function_details", ".", "num_failed_writes", "\n", "number_of_found_klass_searches", "+=", "function_details", ".", "number_of_found_klass_searches", "\n", "number_of_found_method_searches", "+=", "function_details", ".", "number_of_found_method_searches", "\n", "number_of_found_function_searches", "+=", "function_details", ".", "number_of_found_function_searches", "\n", "num_failed_writes", "+=", "function_details", ".", "num_failed_writes", "\n", "escaped_filed", "+=", "function_details", ".", "escaped_filed", "\n", "total_num_triples", "+=", "function_details", ".", "total_num_triples", "\n", "", "except", ":", "\n", "            ", "print", "(", "f'Exception getting details about function number {eps}'", ")", "\n", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "\n", "", "", "print", "(", "f'num_failed_writes: {num_failed_writes}'", ")", "\n", "print", "(", "f'number_of_found_klass_searches: {number_of_found_klass_searches}'", ")", "\n", "print", "(", "f'number_of_found_method_searches: {number_of_found_method_searches}'", ")", "\n", "print", "(", "f'number_of_found_function_searches: {number_of_found_function_searches}'", ")", "\n", "print", "(", "f'total_num_triples: {total_num_triples}'", ")", "\n", "merge_all_files", "(", "stack_output_dir", ",", "stack_output_dir", "+", "'/stackoverflow_triples.nq'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.merge_all_files": [[602, 626], ["os.listdir", "open", "sorted", "open.close", "print", "os.path.isfile", "filepath.endswith", "print", "open", "f.readlines", "len", "os.remove", "line.endswith", "print", "open.write", "open.write"], "function", ["None"], ["", "def", "merge_all_files", "(", "path", ",", "out_filename", ")", ":", "\n", "    ", "file_list", "=", "os", ".", "listdir", "(", "path", ")", "\n", "outfile", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "agg_lines_num", "=", "0", "\n", "for", "filename", "in", "sorted", "(", "file_list", ")", ":", "\n", "        ", "filepath", "=", "path", "+", "'/'", "+", "filename", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", "and", "filepath", ".", "endswith", "(", "'.nq'", ")", ":", "\n", "            ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "agg_lines_num", "+=", "len", "(", "content", ")", "\n", "for", "line", "in", "content", ":", "\n", "                    ", "if", "line", ".", "endswith", "(", "'\\n'", ")", ":", "\n", "                        ", "outfile", ".", "write", "(", "line", ")", "\n", "", "else", ":", "\n", "                        ", "outfile", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "", "", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "f'could not remove file: {filepath}'", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f'Skip non-file {filepath} or non-quad file'", ")", "\n", "continue", "\n", "", "", "outfile", ".", "close", "(", ")", "\n", "print", "(", "f'number of lines in individual files = {agg_lines_num}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wala_graph4code.src.utils.add_stackoverflow_triples": [[627, 679], ["rdflib.URIRef", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "bs4.BeautifulSoup", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.Literal", "create_docstrings_graph.add_edge", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "p.get_text", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "rdflib.URIRef", "rdflib.Literal", "bs4.BeautifulSoup.find_all", "rdflib.URIRef", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "create_docstrings_graph.add_edge", "p.get_text", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.URIRef", "rdflib.Literal", "str"], "function", ["home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge", "home.repos.pwc.inspect_result.wala_graph4code.src.create_docstrings_graph.add_edge"], ["", "def", "add_stackoverflow_triples", "(", "stackoverflow_match", ",", "subj", ",", "g", ",", "graph_main_prefix", ",", "save_triples", "=", "True", ")", ":", "\n", "    ", "if", "not", "save_triples", ":", "\n", "        ", "return", "0", "\n", "# triples = []", "\n", "", "graph_uri", "=", "URIRef", "(", "prefixes", "[", "graph_main_prefix", "]", ")", "\n", "for", "qa", "in", "stackoverflow_match", ":", "\n", "        ", "if", "'good_match'", "in", "qa", "and", "qa", "[", "'good_match'", "]", "==", "'False'", ":", "\n", "            ", "continue", "\n", "# g = add_edge(g, q_url, URIRef(graph_main_prefix + 'good_match'), Literal(qa['good_match']), graph_uri)", "\n", "", "q_url", "=", "prefixes", "[", "graph_main_prefix", "]", "+", "qa", "[", "'_source'", "]", "[", "'question_id:'", "]", "\n", "q_url", "=", "URIRef", "(", "q_url", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'Question'", ")", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'about'", ")", ",", "subj", ",", "graph_uri", ")", "\n", "\n", "# #TODO: double check which prefix to use", "\n", "# g = add_edge(g, q_url, URIRef(prefixes['graph4code'] +'id'), URIRef(prefixes[graph_main_prefix] + qa['_source']['question_id:'])", "\n", "#              , graph_uri)", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'name'", ")", ",", "Literal", "(", "qa", "[", "'_source'", "]", "[", "'title'", "]", ")", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'sioc'", "]", "+", "'content'", ")", ",", "Literal", "(", "qa", "[", "'_source'", "]", "[", "'question_text:'", "]", ")", ",", "graph_uri", ")", "\n", "if", "'tags'", "in", "qa", "[", "'_source'", "]", ":", "\n", "            ", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'keywords'", ")", ",", "Literal", "(", "qa", "[", "'_source'", "]", "[", "'tags'", "]", ")", ",", "graph_uri", ")", "\n", "\n", "", "all_content", "=", "qa", "[", "'_source'", "]", "[", "'question_text:'", "]", "\n", "for", "ans", "in", "qa", "[", "'_source'", "]", "[", "'answers'", "]", ":", "\n", "# aId, aPostTypeId, aParentId, aAcceptedAnswerId, answerTitle, answerBody, aTags, avotes = answer", "\n", "            ", "ans_id", "=", "ans", "[", "0", "]", "\n", "ans_text", "=", "ans", "[", "5", "]", "\n", "all_content", "+=", "ans_text", "\n", "ans_votes", "=", "ans", "[", "7", "]", "\n", "ans_url", "=", "prefixes", "[", "graph_main_prefix", "]", "+", "'a/'", "+", "ans_id", "\n", "ans_url", "=", "URIRef", "(", "ans_url", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'suggestedAnswer'", ")", ",", "ans_url", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ans_url", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'Answer'", ")", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ans_url", ",", "URIRef", "(", "prefixes", "[", "'sioc'", "]", "+", "'content'", ")", ",", "Literal", "(", "ans_text", ")", ",", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "ans_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'upvoteCount'", ")", ",", "Literal", "(", "ans_votes", ")", ",", "graph_uri", ")", "\n", "\n", "", "soup", "=", "BeautifulSoup", "(", "all_content", ",", "\"html.parser\"", ")", "\n", "# codes = [p.get_text() for p in soup.find_all(\"code\", text=True)]", "\n", "codes", "=", "[", "p", ".", "get_text", "(", ")", "for", "p", "in", "soup", ".", "find_all", "(", "\"code\"", ",", "text", "=", "True", ")", "if", "'\\n'", "in", "p", ".", "get_text", "(", ")", "]", "\n", "code_id", "=", "1", "\n", "for", "code", "in", "codes", ":", "\n", "            ", "if", "code", "is", "not", "[", "]", "and", "code", "is", "not", "None", ":", "\n", "                ", "code_uri", "=", "URIRef", "(", "prefixes", "[", "graph_main_prefix", "]", "+", "qa", "[", "'_source'", "]", "[", "'question_id:'", "]", "+", "'/code_snippet/'", "+", "str", "(", "code_id", ")", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "q_url", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'hasPart'", ")", ",", "code_uri", ",", "\n", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "code_uri", ",", "URIRef", "(", "prefixes", "[", "'rdf'", "]", "+", "'type'", ")", ",", "URIRef", "(", "prefixes", "[", "'schema'", "]", "+", "'SoftwareSourceCode'", ")", ",", "\n", "graph_uri", ")", "\n", "g", "=", "add_edge", "(", "g", ",", "code_uri", ",", "URIRef", "(", "prefixes", "[", "'prov'", "]", "+", "'value'", ")", ",", "\n", "Literal", "(", "code", ")", ",", "\n", "graph_uri", ")", "\n", "code_id", "+=", "1", "\n", "", "", "", "return", "g", "\n", "\n"]]}