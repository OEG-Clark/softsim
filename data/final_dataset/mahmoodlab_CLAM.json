{"home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.extract_features_fp.compute_w_loader": [[20, 58], ["datasets.dataset_h5.Whole_Slide_Bag_FP", "torch.utils.data.DataLoader", "enumerate", "print", "torch.no_grad", "torch.no_grad", "batch.to.to", "model", "features.cpu().numpy.cpu().numpy", "utils.file_utils.save_hdf5", "len", "print", "features.cpu().numpy.cpu", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5"], ["def", "compute_w_loader", "(", "file_path", ",", "output_path", ",", "wsi", ",", "model", ",", "\n", "batch_size", "=", "8", ",", "verbose", "=", "0", ",", "print_every", "=", "20", ",", "pretrained", "=", "True", ",", "\n", "custom_downsample", "=", "1", ",", "target_patch_size", "=", "-", "1", ")", ":", "\n", "\t", "\"\"\"\n\targs:\n\t\tfile_path: directory of bag (.h5 file)\n\t\toutput_path: directory to save computed features (.h5 file)\n\t\tmodel: pytorch model\n\t\tbatch_size: batch_size for computing features in batches\n\t\tverbose: level of feedback\n\t\tpretrained: use weights pretrained on imagenet\n\t\tcustom_downsample: custom defined downscale factor of image patches\n\t\ttarget_patch_size: custom defined, rescaled image size before embedding\n\t\"\"\"", "\n", "dataset", "=", "Whole_Slide_Bag_FP", "(", "file_path", "=", "file_path", ",", "wsi", "=", "wsi", ",", "pretrained", "=", "pretrained", ",", "\n", "custom_downsample", "=", "custom_downsample", ",", "target_patch_size", "=", "target_patch_size", ")", "\n", "x", ",", "y", "=", "dataset", "[", "0", "]", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "**", "kwargs", ",", "collate_fn", "=", "collate_features", ")", "\n", "\n", "if", "verbose", ">", "0", ":", "\n", "\t\t", "print", "(", "'processing {}: total of {} batches'", ".", "format", "(", "file_path", ",", "len", "(", "loader", ")", ")", ")", "\n", "\n", "", "mode", "=", "'w'", "\n", "for", "count", ",", "(", "batch", ",", "coords", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "if", "count", "%", "print_every", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'batch {}/{}, {} files processed'", ".", "format", "(", "count", ",", "len", "(", "loader", ")", ",", "count", "*", "batch_size", ")", ")", "\n", "", "batch", "=", "batch", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "features", "=", "model", "(", "batch", ")", "\n", "features", "=", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "asset_dict", "=", "{", "'features'", ":", "features", ",", "'coords'", ":", "coords", "}", "\n", "save_hdf5", "(", "output_path", ",", "asset_dict", ",", "attr_dict", "=", "None", ",", "mode", "=", "mode", ")", "\n", "mode", "=", "'a'", "\n", "\n", "", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches_fp.stitching": [[13, 19], ["time.time", "wsi_core.wsi_utils.StitchCoords", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.StitchCoords"], ["def", "stitching", "(", "file_path", ",", "wsi_object", ",", "downscale", "=", "64", ")", ":", "\n", "\t", "start", "=", "time", ".", "time", "(", ")", "\n", "heatmap", "=", "StitchCoords", "(", "file_path", ",", "wsi_object", ",", "downscale", "=", "downscale", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ",", "draw_grid", "=", "False", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "return", "heatmap", ",", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches_fp.segment": [[20, 30], ["time.time", "WSI_object.segmentTissue", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.segmentTissue"], ["", "def", "segment", "(", "WSI_object", ",", "seg_params", ",", "filter_params", ")", ":", "\n", "### Start Seg Timer", "\n", "\t", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Segment", "\n", "WSI_object", ".", "segmentTissue", "(", "**", "seg_params", ",", "filter_params", "=", "filter_params", ")", "\n", "\n", "### Stop Seg Timers", "\n", "seg_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "WSI_object", ",", "seg_time_elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches_fp.patching": [[31, 42], ["time.time", "WSI_object.process_contours", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_contours"], ["", "def", "patching", "(", "WSI_object", ",", "**", "kwargs", ")", ":", "\n", "### Start Patch Timer", "\n", "\t", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Patch", "\n", "file_path", "=", "WSI_object", ".", "process_contours", "(", "**", "kwargs", ")", "\n", "\n", "\n", "### Stop Patch Timer", "\n", "patch_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "file_path", ",", "patch_time_elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches_fp.seg_and_patch": [[44, 225], ["sorted", "len", "range", "df.assign.to_csv", "print", "print", "print", "os.listdir", "wsi_core.batch_process_utils.initialize_df", "pandas.read_csv", "wsi_core.batch_process_utils.initialize_df", "df.assign.keys", "print", "df.assign.assign", "df.assign.to_csv", "print", "print", "os.path.splitext", "os.path.join", "wsi_core.WholeSlideImage.WholeSlideImage", "str", "str", "print", "print", "print", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "print", "vis_params.copy", "filter_params.copy", "seg_params.copy", "patch_params.copy", "vis_params.keys", "filter_params.keys", "seg_params.keys", "patch_params.keys", "numpy.array().astype", "numpy.array().astype", "print", "create_patches_fp.segment", "wsi_core.WholeSlideImage.WholeSlideImage.visWSI", "os.path.join", "WSI_object.visWSI.save", "patch_params.copy.update", "create_patches_fp.patching", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "vis_params.copy.update", "filter_params.copy.update", "seg_params.copy.update", "patch_params.copy.update", "len", "wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "WSI_object.getOpenSlide.get_best_level_for_downsample", "len", "wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "WSI_object.getOpenSlide.get_best_level_for_downsample", "len", "len", "create_patches_fp.stitching", "os.path.join", "heatmap.save", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "int", "filter_params.copy.update", "numpy.array", "numpy.array", "len", "int", "len", "int", "len", "int", "len", "int", "len", "str_ids.split", "str_ids.split"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.batch_process_utils.initialize_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.batch_process_utils.initialize_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.segment", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.visWSI", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.patching", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.stitching", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save"], ["", "def", "seg_and_patch", "(", "source", ",", "save_dir", ",", "patch_save_dir", ",", "mask_save_dir", ",", "stitch_save_dir", ",", "\n", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "\n", "seg_params", "=", "{", "'seg_level'", ":", "-", "1", ",", "'sthresh'", ":", "8", ",", "'mthresh'", ":", "7", ",", "'close'", ":", "4", ",", "'use_otsu'", ":", "False", ",", "\n", "'keep_ids'", ":", "'none'", ",", "'exclude_ids'", ":", "'none'", "}", ",", "\n", "filter_params", "=", "{", "'a_t'", ":", "100", ",", "'a_h'", ":", "16", ",", "'max_n_holes'", ":", "8", "}", ",", "\n", "vis_params", "=", "{", "'vis_level'", ":", "-", "1", ",", "'line_thickness'", ":", "500", "}", ",", "\n", "patch_params", "=", "{", "'use_padding'", ":", "True", ",", "'contour_fn'", ":", "'four_pt'", "}", ",", "\n", "patch_level", "=", "0", ",", "\n", "use_default_params", "=", "False", ",", "\n", "seg", "=", "False", ",", "save_mask", "=", "True", ",", "\n", "stitch", "=", "False", ",", "\n", "patch", "=", "False", ",", "auto_skip", "=", "True", ",", "process_list", "=", "None", ")", ":", "\n", "\n", "\n", "\n", "\t", "slides", "=", "sorted", "(", "os", ".", "listdir", "(", "source", ")", ")", "\n", "slides", "=", "[", "slide", "for", "slide", "in", "slides", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "source", ",", "slide", ")", ")", "]", "\n", "if", "process_list", "is", "None", ":", "\n", "\t\t", "df", "=", "initialize_df", "(", "slides", ",", "seg_params", ",", "filter_params", ",", "vis_params", ",", "patch_params", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "df", "=", "pd", ".", "read_csv", "(", "process_list", ")", "\n", "df", "=", "initialize_df", "(", "df", ",", "seg_params", ",", "filter_params", ",", "vis_params", ",", "patch_params", ")", "\n", "\n", "", "mask", "=", "df", "[", "'process'", "]", "==", "1", "\n", "process_stack", "=", "df", "[", "mask", "]", "\n", "\n", "total", "=", "len", "(", "process_stack", ")", "\n", "\n", "legacy_support", "=", "'a'", "in", "df", ".", "keys", "(", ")", "\n", "if", "legacy_support", ":", "\n", "\t\t", "print", "(", "'detected legacy segmentation csv file, legacy support enabled'", ")", "\n", "df", "=", "df", ".", "assign", "(", "**", "{", "'a_t'", ":", "np", ".", "full", "(", "(", "len", "(", "df", ")", ")", ",", "int", "(", "filter_params", "[", "'a_t'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "'a_h'", ":", "np", ".", "full", "(", "(", "len", "(", "df", ")", ")", ",", "int", "(", "filter_params", "[", "'a_h'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "'max_n_holes'", ":", "np", ".", "full", "(", "(", "len", "(", "df", ")", ")", ",", "int", "(", "filter_params", "[", "'max_n_holes'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "'line_thickness'", ":", "np", ".", "full", "(", "(", "len", "(", "df", ")", ")", ",", "int", "(", "vis_params", "[", "'line_thickness'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "'contour_fn'", ":", "np", ".", "full", "(", "(", "len", "(", "df", ")", ")", ",", "patch_params", "[", "'contour_fn'", "]", ")", "}", ")", "\n", "\n", "", "seg_times", "=", "0.", "\n", "patch_times", "=", "0.", "\n", "stitch_times", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "total", ")", ":", "\n", "\t\t", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'process_list_autogen.csv'", ")", ",", "index", "=", "False", ")", "\n", "idx", "=", "process_stack", ".", "index", "[", "i", "]", "\n", "slide", "=", "process_stack", ".", "loc", "[", "idx", ",", "'slide_id'", "]", "\n", "print", "(", "\"\\n\\nprogress: {:.2f}, {}/{}\"", ".", "format", "(", "i", "/", "total", ",", "i", ",", "total", ")", ")", "\n", "print", "(", "'processing {}'", ".", "format", "(", "slide", ")", ")", "\n", "\n", "df", ".", "loc", "[", "idx", ",", "'process'", "]", "=", "0", "\n", "slide_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "slide", ")", "\n", "\n", "if", "auto_skip", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "patch_save_dir", ",", "slide_id", "+", "'.h5'", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'{} already exist in destination location, skipped'", ".", "format", "(", "slide_id", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'already_exist'", "\n", "continue", "\n", "\n", "# Inialize WSI", "\n", "", "full_path", "=", "os", ".", "path", ".", "join", "(", "source", ",", "slide", ")", "\n", "WSI_object", "=", "WholeSlideImage", "(", "full_path", ")", "\n", "\n", "if", "use_default_params", ":", "\n", "\t\t\t", "current_vis_params", "=", "vis_params", ".", "copy", "(", ")", "\n", "current_filter_params", "=", "filter_params", ".", "copy", "(", ")", "\n", "current_seg_params", "=", "seg_params", ".", "copy", "(", ")", "\n", "current_patch_params", "=", "patch_params", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "current_vis_params", "=", "{", "}", "\n", "current_filter_params", "=", "{", "}", "\n", "current_seg_params", "=", "{", "}", "\n", "current_patch_params", "=", "{", "}", "\n", "\n", "\n", "for", "key", "in", "vis_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "if", "legacy_support", "and", "key", "==", "'vis_level'", ":", "\n", "\t\t\t\t\t", "df", ".", "loc", "[", "idx", ",", "key", "]", "=", "-", "1", "\n", "", "current_vis_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "filter_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "if", "legacy_support", "and", "key", "==", "'a_t'", ":", "\n", "\t\t\t\t\t", "old_area", "=", "df", ".", "loc", "[", "idx", ",", "'a'", "]", "\n", "seg_level", "=", "df", ".", "loc", "[", "idx", ",", "'seg_level'", "]", "\n", "scale", "=", "WSI_object", ".", "level_downsamples", "[", "seg_level", "]", "\n", "adjusted_area", "=", "int", "(", "old_area", "*", "(", "scale", "[", "0", "]", "*", "scale", "[", "1", "]", ")", "/", "(", "512", "*", "512", ")", ")", "\n", "current_filter_params", ".", "update", "(", "{", "key", ":", "adjusted_area", "}", ")", "\n", "df", ".", "loc", "[", "idx", ",", "key", "]", "=", "adjusted_area", "\n", "", "current_filter_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "seg_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "if", "legacy_support", "and", "key", "==", "'seg_level'", ":", "\n", "\t\t\t\t\t", "df", ".", "loc", "[", "idx", ",", "key", "]", "=", "-", "1", "\n", "", "current_seg_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "patch_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "current_patch_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "", "if", "current_vis_params", "[", "'vis_level'", "]", "<", "0", ":", "\n", "\t\t\t", "if", "len", "(", "WSI_object", ".", "level_dim", ")", "==", "1", ":", "\n", "\t\t\t\t", "current_vis_params", "[", "'vis_level'", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "wsi", "=", "WSI_object", ".", "getOpenSlide", "(", ")", "\n", "best_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "64", ")", "\n", "current_vis_params", "[", "'vis_level'", "]", "=", "best_level", "\n", "\n", "", "", "if", "current_seg_params", "[", "'seg_level'", "]", "<", "0", ":", "\n", "\t\t\t", "if", "len", "(", "WSI_object", ".", "level_dim", ")", "==", "1", ":", "\n", "\t\t\t\t", "current_seg_params", "[", "'seg_level'", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "wsi", "=", "WSI_object", ".", "getOpenSlide", "(", ")", "\n", "best_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "64", ")", "\n", "current_seg_params", "[", "'seg_level'", "]", "=", "best_level", "\n", "\n", "", "", "keep_ids", "=", "str", "(", "current_seg_params", "[", "'keep_ids'", "]", ")", "\n", "if", "keep_ids", "!=", "'none'", "and", "len", "(", "keep_ids", ")", ">", "0", ":", "\n", "\t\t\t", "str_ids", "=", "current_seg_params", "[", "'keep_ids'", "]", "\n", "current_seg_params", "[", "'keep_ids'", "]", "=", "np", ".", "array", "(", "str_ids", ".", "split", "(", "','", ")", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "\t\t\t", "current_seg_params", "[", "'keep_ids'", "]", "=", "[", "]", "\n", "\n", "", "exclude_ids", "=", "str", "(", "current_seg_params", "[", "'exclude_ids'", "]", ")", "\n", "if", "exclude_ids", "!=", "'none'", "and", "len", "(", "exclude_ids", ")", ">", "0", ":", "\n", "\t\t\t", "str_ids", "=", "current_seg_params", "[", "'exclude_ids'", "]", "\n", "current_seg_params", "[", "'exclude_ids'", "]", "=", "np", ".", "array", "(", "str_ids", ".", "split", "(", "','", ")", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "\t\t\t", "current_seg_params", "[", "'exclude_ids'", "]", "=", "[", "]", "\n", "\n", "", "w", ",", "h", "=", "WSI_object", ".", "level_dim", "[", "current_seg_params", "[", "'seg_level'", "]", "]", "\n", "if", "w", "*", "h", ">", "1e8", ":", "\n", "\t\t\t", "print", "(", "'level_dim {} x {} is likely too large for successful segmentation, aborting'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'failed_seg'", "\n", "continue", "\n", "\n", "", "df", ".", "loc", "[", "idx", ",", "'vis_level'", "]", "=", "current_vis_params", "[", "'vis_level'", "]", "\n", "df", ".", "loc", "[", "idx", ",", "'seg_level'", "]", "=", "current_seg_params", "[", "'seg_level'", "]", "\n", "\n", "\n", "seg_time_elapsed", "=", "-", "1", "\n", "if", "seg", ":", "\n", "\t\t\t", "WSI_object", ",", "seg_time_elapsed", "=", "segment", "(", "WSI_object", ",", "current_seg_params", ",", "current_filter_params", ")", "\n", "\n", "", "if", "save_mask", ":", "\n", "\t\t\t", "mask", "=", "WSI_object", ".", "visWSI", "(", "**", "current_vis_params", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_save_dir", ",", "slide_id", "+", "'.jpg'", ")", "\n", "mask", ".", "save", "(", "mask_path", ")", "\n", "\n", "", "patch_time_elapsed", "=", "-", "1", "# Default time", "\n", "if", "patch", ":", "\n", "\t\t\t", "current_patch_params", ".", "update", "(", "{", "'patch_level'", ":", "patch_level", ",", "'patch_size'", ":", "patch_size", ",", "'step_size'", ":", "step_size", ",", "\n", "'save_path'", ":", "patch_save_dir", "}", ")", "\n", "file_path", ",", "patch_time_elapsed", "=", "patching", "(", "WSI_object", "=", "WSI_object", ",", "**", "current_patch_params", ",", ")", "\n", "\n", "", "stitch_time_elapsed", "=", "-", "1", "\n", "if", "stitch", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "patch_save_dir", ",", "slide_id", "+", "'.h5'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "\t\t\t\t", "heatmap", ",", "stitch_time_elapsed", "=", "stitching", "(", "file_path", ",", "WSI_object", ",", "downscale", "=", "64", ")", "\n", "stitch_path", "=", "os", ".", "path", ".", "join", "(", "stitch_save_dir", ",", "slide_id", "+", "'.jpg'", ")", "\n", "heatmap", ".", "save", "(", "stitch_path", ")", "\n", "\n", "", "", "print", "(", "\"segmentation took {} seconds\"", ".", "format", "(", "seg_time_elapsed", ")", ")", "\n", "print", "(", "\"patching took {} seconds\"", ".", "format", "(", "patch_time_elapsed", ")", ")", "\n", "print", "(", "\"stitching took {} seconds\"", ".", "format", "(", "stitch_time_elapsed", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'processed'", "\n", "\n", "seg_times", "+=", "seg_time_elapsed", "\n", "patch_times", "+=", "patch_time_elapsed", "\n", "stitch_times", "+=", "stitch_time_elapsed", "\n", "\n", "", "seg_times", "/=", "total", "\n", "patch_times", "/=", "total", "\n", "stitch_times", "/=", "total", "\n", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'process_list_autogen.csv'", ")", ",", "index", "=", "False", ")", "\n", "print", "(", "\"average segmentation time in s per slide: {}\"", ".", "format", "(", "seg_times", ")", ")", "\n", "print", "(", "\"average patching time in s per slide: {}\"", ".", "format", "(", "patch_times", ")", ")", "\n", "print", "(", "\"average stiching time in s per slide: {}\"", ".", "format", "(", "stitch_times", ")", ")", "\n", "\n", "return", "seg_times", ",", "patch_times", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.main.main": [[24, 66], ["numpy.arange", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.isdir", "os.mkdir", "main.seed_torch", "dataset.return_splits", "utils.core_utils.train", "all_test_auc.append", "all_val_auc.append", "all_test_acc.append", "all_val_acc.append", "os.path.join", "utils.file_utils.save_pkl", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.main.seed_torch", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.return_splits", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.save_pkl"], ["def", "main", "(", "args", ")", ":", "\n", "# create results directory if necessary", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "results_dir", ")", "\n", "\n", "", "if", "args", ".", "k_start", "==", "-", "1", ":", "\n", "        ", "start", "=", "0", "\n", "", "else", ":", "\n", "        ", "start", "=", "args", ".", "k_start", "\n", "", "if", "args", ".", "k_end", "==", "-", "1", ":", "\n", "        ", "end", "=", "args", ".", "k", "\n", "", "else", ":", "\n", "        ", "end", "=", "args", ".", "k_end", "\n", "\n", "", "all_test_auc", "=", "[", "]", "\n", "all_val_auc", "=", "[", "]", "\n", "all_test_acc", "=", "[", "]", "\n", "all_val_acc", "=", "[", "]", "\n", "folds", "=", "np", ".", "arange", "(", "start", ",", "end", ")", "\n", "for", "i", "in", "folds", ":", "\n", "        ", "seed_torch", "(", "args", ".", "seed", ")", "\n", "train_dataset", ",", "val_dataset", ",", "test_dataset", "=", "dataset", ".", "return_splits", "(", "from_id", "=", "False", ",", "\n", "csv_path", "=", "'{}/splits_{}.csv'", ".", "format", "(", "args", ".", "split_dir", ",", "i", ")", ")", "\n", "\n", "datasets", "=", "(", "train_dataset", ",", "val_dataset", ",", "test_dataset", ")", "\n", "results", ",", "test_auc", ",", "val_auc", ",", "test_acc", ",", "val_acc", "=", "train", "(", "datasets", ",", "i", ",", "args", ")", "\n", "all_test_auc", ".", "append", "(", "test_auc", ")", "\n", "all_val_auc", ".", "append", "(", "val_auc", ")", "\n", "all_test_acc", ".", "append", "(", "test_acc", ")", "\n", "all_val_acc", ".", "append", "(", "val_acc", ")", "\n", "#write results to pkl", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'split_{}_results.pkl'", ".", "format", "(", "i", ")", ")", "\n", "save_pkl", "(", "filename", ",", "results", ")", "\n", "\n", "", "final_df", "=", "pd", ".", "DataFrame", "(", "{", "'folds'", ":", "folds", ",", "'test_auc'", ":", "all_test_auc", ",", "\n", "'val_auc'", ":", "all_val_auc", ",", "'test_acc'", ":", "all_test_acc", ",", "'val_acc'", ":", "all_val_acc", "}", ")", "\n", "\n", "if", "len", "(", "folds", ")", "!=", "args", ".", "k", ":", "\n", "        ", "save_name", "=", "'summary_partial_{}_{}.csv'", ".", "format", "(", "start", ",", "end", ")", "\n", "", "else", ":", "\n", "        ", "save_name", "=", "'summary.csv'", "\n", "", "final_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "save_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.main.seed_torch": [[114, 125], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "seed_torch", "(", "seed", "=", "7", ")", ":", "\n", "    ", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.stitching": [[13, 19], ["time.time", "wsi_core.wsi_utils.StitchPatches", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.StitchPatches"], ["def", "stitching", "(", "file_path", ",", "downscale", "=", "64", ")", ":", "\n", "\t", "start", "=", "time", ".", "time", "(", ")", "\n", "heatmap", "=", "StitchPatches", "(", "file_path", ",", "downscale", "=", "downscale", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ",", "draw_grid", "=", "False", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "return", "heatmap", ",", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.segment": [[20, 30], ["time.time", "WSI_object.segmentTissue", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.segmentTissue"], ["", "def", "segment", "(", "WSI_object", ",", "seg_params", ",", "filter_params", ")", ":", "\n", "### Start Seg Timer", "\n", "\t", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Segment", "\n", "WSI_object", ".", "segmentTissue", "(", "**", "seg_params", ",", "filter_params", "=", "filter_params", ")", "\n", "\n", "### Stop Seg Timers", "\n", "seg_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "WSI_object", ",", "seg_time_elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.patching": [[31, 41], ["time.time", "WSI_object.createPatches_bag_hdf5", "time.time"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.createPatches_bag_hdf5"], ["", "def", "patching", "(", "WSI_object", ",", "**", "kwargs", ")", ":", "\n", "### Start Patch Timer", "\n", "\t", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Patch", "\n", "file_path", "=", "WSI_object", ".", "createPatches_bag_hdf5", "(", "**", "kwargs", ",", "save_coord", "=", "True", ")", "\n", "\n", "### Stop Patch Timer", "\n", "patch_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "file_path", ",", "patch_time_elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.seg_and_patch": [[42, 201], ["sorted", "len", "range", "wsi_core.batch_process_utils.initialize_df.to_csv", "print", "print", "print", "os.listdir", "wsi_core.batch_process_utils.initialize_df", "pandas.read_csv", "wsi_core.batch_process_utils.initialize_df", "wsi_core.batch_process_utils.initialize_df.to_csv", "print", "print", "os.path.splitext", "os.path.join", "wsi_core.WholeSlideImage.WholeSlideImage", "str", "str", "print", "print", "print", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "print", "vis_params.copy", "filter_params.copy", "seg_params.copy", "patch_params.copy", "vis_params.keys", "filter_params.keys", "seg_params.keys", "patch_params.keys", "numpy.array().astype", "numpy.array().astype", "print", "create_patches.segment", "wsi_core.WholeSlideImage.WholeSlideImage.visWSI", "os.path.join", "WSI_object.visWSI.save", "patch_params.copy.update", "create_patches.patching", "os.path.join", "create_patches.stitching", "os.path.join", "heatmap.save", "os.path.join", "os.path.join", "vis_params.copy.update", "filter_params.copy.update", "seg_params.copy.update", "patch_params.copy.update", "len", "wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "WSI_object.getOpenSlide.get_best_level_for_downsample", "len", "wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "WSI_object.getOpenSlide.get_best_level_for_downsample", "len", "len", "numpy.array", "numpy.array", "str_ids.split", "str_ids.split"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.batch_process_utils.initialize_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.batch_process_utils.initialize_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.segment", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.visWSI", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.patching", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_patches.stitching", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide"], ["", "def", "seg_and_patch", "(", "source", ",", "save_dir", ",", "patch_save_dir", ",", "mask_save_dir", ",", "stitch_save_dir", ",", "\n", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "custom_downsample", "=", "1", ",", "\n", "seg_params", "=", "{", "'seg_level'", ":", "-", "1", ",", "'sthresh'", ":", "8", ",", "'mthresh'", ":", "7", ",", "'close'", ":", "4", ",", "'use_otsu'", ":", "False", ",", "\n", "'keep_ids'", ":", "'none'", ",", "'exclude_ids'", ":", "'none'", "}", ",", "\n", "filter_params", "=", "{", "'a_t'", ":", "100", ",", "'a_h'", ":", "16", ",", "'max_n_holes'", ":", "8", "}", ",", "\n", "vis_params", "=", "{", "'vis_level'", ":", "-", "1", ",", "'line_thickness'", ":", "250", "}", ",", "\n", "patch_params", "=", "{", "'white_thresh'", ":", "5", ",", "'black_thresh'", ":", "40", ",", "'use_padding'", ":", "True", ",", "'contour_fn'", ":", "'four_pt'", "}", ",", "\n", "patch_level", "=", "0", ",", "\n", "use_default_params", "=", "False", ",", "\n", "seg", "=", "False", ",", "save_mask", "=", "True", ",", "\n", "stitch", "=", "False", ",", "\n", "patch", "=", "False", ",", "auto_skip", "=", "True", ",", "process_list", "=", "None", ")", ":", "\n", "\n", "\n", "\n", "\t", "slides", "=", "sorted", "(", "os", ".", "listdir", "(", "source", ")", ")", "\n", "slides", "=", "[", "slide", "for", "slide", "in", "slides", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "source", ",", "slide", ")", ")", "]", "\n", "\n", "if", "process_list", "is", "None", ":", "\n", "\t\t", "df", "=", "initialize_df", "(", "slides", ",", "seg_params", ",", "filter_params", ",", "vis_params", ",", "patch_params", ",", "save_patches", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "df", "=", "pd", ".", "read_csv", "(", "process_list", ")", "\n", "df", "=", "initialize_df", "(", "df", ",", "seg_params", ",", "filter_params", ",", "vis_params", ",", "patch_params", ",", "save_patches", "=", "True", ")", "\n", "\n", "\n", "", "mask", "=", "df", "[", "'process'", "]", "==", "1", "\n", "process_stack", "=", "df", "[", "mask", "]", "\n", "\n", "total", "=", "len", "(", "process_stack", ")", "\n", "seg_times", "=", "0.", "\n", "patch_times", "=", "0.", "\n", "stitch_times", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "total", ")", ":", "\n", "\t\t", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'process_list_autogen.csv'", ")", ",", "index", "=", "False", ")", "\n", "idx", "=", "process_stack", ".", "index", "[", "i", "]", "\n", "slide", "=", "process_stack", ".", "loc", "[", "idx", ",", "'slide_id'", "]", "\n", "print", "(", "\"\\n\\nprogress: {:.2f}, {}/{}\"", ".", "format", "(", "i", "/", "total", ",", "i", ",", "total", ")", ")", "\n", "print", "(", "'processing {}'", ".", "format", "(", "slide", ")", ")", "\n", "\n", "df", ".", "loc", "[", "idx", ",", "'process'", "]", "=", "0", "\n", "slide_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "slide", ")", "\n", "\n", "if", "auto_skip", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "patch_save_dir", ",", "slide_id", "+", "'.h5'", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'{} already exist in destination location, skipped'", ".", "format", "(", "slide_id", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'already_exist'", "\n", "continue", "\n", "\n", "# Inialize WSI", "\n", "", "full_path", "=", "os", ".", "path", ".", "join", "(", "source", ",", "slide", ")", "\n", "WSI_object", "=", "WholeSlideImage", "(", "full_path", ")", "\n", "\n", "if", "use_default_params", ":", "\n", "\t\t\t", "current_vis_params", "=", "vis_params", ".", "copy", "(", ")", "\n", "current_filter_params", "=", "filter_params", ".", "copy", "(", ")", "\n", "current_seg_params", "=", "seg_params", ".", "copy", "(", ")", "\n", "current_patch_params", "=", "patch_params", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "current_vis_params", "=", "{", "}", "\n", "current_filter_params", "=", "{", "}", "\n", "current_seg_params", "=", "{", "}", "\n", "current_patch_params", "=", "{", "}", "\n", "for", "key", "in", "vis_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "current_vis_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "filter_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "current_filter_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "seg_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "current_seg_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "for", "key", "in", "patch_params", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "current_patch_params", ".", "update", "(", "{", "key", ":", "df", ".", "loc", "[", "idx", ",", "key", "]", "}", ")", "\n", "\n", "", "", "if", "current_vis_params", "[", "'vis_level'", "]", "<", "0", ":", "\n", "\t\t\t", "if", "len", "(", "WSI_object", ".", "level_dim", ")", "==", "1", ":", "\n", "\t\t\t\t", "current_vis_params", "[", "'vis_level'", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "wsi", "=", "WSI_object", ".", "getOpenSlide", "(", ")", "\n", "best_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "64", ")", "\n", "current_vis_params", "[", "'vis_level'", "]", "=", "best_level", "\n", "\n", "", "", "if", "current_seg_params", "[", "'seg_level'", "]", "<", "0", ":", "\n", "\t\t\t", "if", "len", "(", "WSI_object", ".", "level_dim", ")", "==", "1", ":", "\n", "\t\t\t\t", "current_seg_params", "[", "'seg_level'", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "wsi", "=", "WSI_object", ".", "getOpenSlide", "(", ")", "\n", "best_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "64", ")", "\n", "current_seg_params", "[", "'seg_level'", "]", "=", "best_level", "\n", "\n", "", "", "keep_ids", "=", "str", "(", "current_seg_params", "[", "'keep_ids'", "]", ")", "\n", "if", "keep_ids", "!=", "'none'", "and", "len", "(", "keep_ids", ")", ">", "0", ":", "\n", "\t\t\t", "str_ids", "=", "current_seg_params", "[", "'keep_ids'", "]", "\n", "current_seg_params", "[", "'keep_ids'", "]", "=", "np", ".", "array", "(", "str_ids", ".", "split", "(", "','", ")", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "\t\t\t", "current_seg_params", "[", "'keep_ids'", "]", "=", "[", "]", "\n", "\n", "", "exclude_ids", "=", "str", "(", "current_seg_params", "[", "'exclude_ids'", "]", ")", "\n", "if", "exclude_ids", "!=", "'none'", "and", "len", "(", "exclude_ids", ")", ">", "0", ":", "\n", "\t\t\t", "str_ids", "=", "current_seg_params", "[", "'exclude_ids'", "]", "\n", "current_seg_params", "[", "'exclude_ids'", "]", "=", "np", ".", "array", "(", "str_ids", ".", "split", "(", "','", ")", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "\t\t\t", "current_seg_params", "[", "'exclude_ids'", "]", "=", "[", "]", "\n", "\n", "", "w", ",", "h", "=", "WSI_object", ".", "level_dim", "[", "current_seg_params", "[", "'seg_level'", "]", "]", "\n", "if", "w", "*", "h", ">", "1e8", ":", "\n", "\t\t\t", "print", "(", "'level_dim {} x {} is likely too large for successful segmentation, aborting'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'failed_seg'", "\n", "continue", "\n", "\n", "", "if", "not", "process_list", ":", "\n", "\t\t\t", "df", ".", "loc", "[", "idx", ",", "'vis_level'", "]", "=", "current_vis_params", "[", "'vis_level'", "]", "\n", "df", ".", "loc", "[", "idx", ",", "'seg_level'", "]", "=", "current_seg_params", "[", "'seg_level'", "]", "\n", "\n", "", "seg_time_elapsed", "=", "-", "1", "\n", "if", "seg", ":", "\n", "\t\t\t", "WSI_object", ",", "seg_time_elapsed", "=", "segment", "(", "WSI_object", ",", "current_seg_params", ",", "current_filter_params", ")", "\n", "\n", "", "if", "save_mask", ":", "\n", "\t\t\t", "mask", "=", "WSI_object", ".", "visWSI", "(", "**", "current_vis_params", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_save_dir", ",", "slide_id", "+", "'.png'", ")", "\n", "mask", ".", "save", "(", "mask_path", ")", "\n", "\n", "", "patch_time_elapsed", "=", "-", "1", "# Default time", "\n", "if", "patch", ":", "\n", "\t\t\t", "current_patch_params", ".", "update", "(", "{", "'patch_level'", ":", "patch_level", ",", "'patch_size'", ":", "patch_size", ",", "'step_size'", ":", "step_size", ",", "\n", "'save_path'", ":", "patch_save_dir", ",", "'custom_downsample'", ":", "custom_downsample", "}", ")", "\n", "file_path", ",", "patch_time_elapsed", "=", "patching", "(", "WSI_object", "=", "WSI_object", ",", "**", "current_patch_params", ")", "\n", "\n", "", "stitch_time_elapsed", "=", "-", "1", "\n", "if", "stitch", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "patch_save_dir", ",", "slide_id", "+", "'.h5'", ")", "\n", "heatmap", ",", "stitch_time_elapsed", "=", "stitching", "(", "file_path", ",", "downscale", "=", "64", ")", "\n", "stitch_path", "=", "os", ".", "path", ".", "join", "(", "stitch_save_dir", ",", "slide_id", "+", "'.png'", ")", "\n", "heatmap", ".", "save", "(", "stitch_path", ")", "\n", "\n", "", "print", "(", "\"segmentation took {} seconds\"", ".", "format", "(", "seg_time_elapsed", ")", ")", "\n", "print", "(", "\"patching took {} seconds\"", ".", "format", "(", "patch_time_elapsed", ")", ")", "\n", "print", "(", "\"stitching took {} seconds\"", ".", "format", "(", "stitch_time_elapsed", ")", ")", "\n", "df", ".", "loc", "[", "idx", ",", "'status'", "]", "=", "'processed'", "\n", "\n", "seg_times", "+=", "seg_time_elapsed", "\n", "patch_times", "+=", "patch_time_elapsed", "\n", "stitch_times", "+=", "stitch_time_elapsed", "\n", "\n", "", "seg_times", "/=", "total", "\n", "patch_times", "/=", "total", "\n", "stitch_times", "/=", "total", "\n", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'process_list_autogen.csv'", ")", ",", "index", "=", "False", ")", "\n", "print", "(", "\"average segmentation time in s per slide: {}\"", ".", "format", "(", "seg_times", ")", ")", "\n", "print", "(", "\"average patching time in s per slide: {}\"", ".", "format", "(", "patch_times", ")", ")", "\n", "print", "(", "\"average stiching time in s per slide: {}\"", ".", "format", "(", "stitch_times", ")", ")", "\n", "\n", "return", "seg_times", ",", "patch_times", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.extract_features.compute_w_loader": [[21, 58], ["datasets.dataset_h5.Whole_Slide_Bag", "torch.utils.data.DataLoader", "enumerate", "print", "torch.no_grad", "torch.no_grad", "batch.to.to", "model", "features.cpu().numpy.cpu().numpy", "utils.file_utils.save_hdf5", "len", "print", "features.cpu().numpy.cpu", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5"], ["def", "compute_w_loader", "(", "file_path", ",", "output_path", ",", "model", ",", "batch_size", "=", "8", ",", "verbose", "=", "0", ",", "\n", "print_every", "=", "20", ",", "pretrained", "=", "True", ",", "target_patch_size", "=", "-", "1", ")", ":", "\n", "\t", "\"\"\"\n\targs:\n\t\tfile_path: directory of bag (.h5 file)\n\t\toutput_path: directory to save computed features (.h5 file)\n\t\tmodel: pytorch model\n\t\tbatch_size: batch_size for computing features in batches\n\t\tverbose: level of feedback\n\t\tpretrained: use weights pretrained on imagenet\n\t\"\"\"", "\n", "dataset", "=", "Whole_Slide_Bag", "(", "file_path", "=", "file_path", ",", "pretrained", "=", "pretrained", ",", "\n", "target_patch_size", "=", "target_patch_size", ")", "\n", "x", ",", "y", "=", "dataset", "[", "0", "]", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "**", "kwargs", ",", "collate_fn", "=", "collate_features", ")", "\n", "\n", "if", "verbose", ">", "0", ":", "\n", "\t\t", "print", "(", "'processing {}: total of {} batches'", ".", "format", "(", "file_path", ",", "len", "(", "loader", ")", ")", ")", "\n", "\n", "", "mode", "=", "'w'", "\n", "for", "count", ",", "(", "batch", ",", "coords", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "if", "count", "%", "print_every", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'batch {}/{}, {} files processed'", ".", "format", "(", "count", ",", "len", "(", "loader", ")", ",", "count", "*", "batch_size", ")", ")", "\n", "", "batch", "=", "batch", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "mini_bs", "=", "coords", ".", "shape", "[", "0", "]", "\n", "\n", "features", "=", "model", "(", "batch", ")", "\n", "\n", "features", "=", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "asset_dict", "=", "{", "'features'", ":", "features", ",", "'coords'", ":", "coords", "}", "\n", "save_hdf5", "(", "output_path", ",", "asset_dict", ",", "attr_dict", "=", "None", ",", "mode", "=", "mode", ")", "\n", "mode", "=", "'a'", "\n", "\n", "", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_heatmaps.infer_single_slide": [[33, 57], ["features.to.to", "torch.no_grad", "torch.no_grad", "isinstance", "print", "torch.topk", "torch.topk", "probs[].cpu().numpy", "ids[].cpu().numpy", "numpy.array", "model", "model", "Y_hat.item.item", "isinstance", "A.view().cpu().numpy.view().cpu().numpy", "probs[].cpu", "ids[].cpu", "A.view().cpu().numpy.view().cpu", "Y_prob.cpu().flatten", "A.view().cpu().numpy.view", "Y_prob.cpu"], "function", ["None"], ["def", "infer_single_slide", "(", "model", ",", "features", ",", "label", ",", "reverse_label_dict", ",", "k", "=", "1", ")", ":", "\n", "\t", "features", "=", "features", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "model", ",", "(", "CLAM_SB", ",", "CLAM_MB", ")", ")", ":", "\n", "\t\t\t", "model_results_dict", "=", "model", "(", "features", ")", "\n", "logits", ",", "Y_prob", ",", "Y_hat", ",", "A", ",", "_", "=", "model", "(", "features", ")", "\n", "Y_hat", "=", "Y_hat", ".", "item", "(", ")", "\n", "\n", "if", "isinstance", "(", "model", ",", "(", "CLAM_MB", ",", ")", ")", ":", "\n", "\t\t\t\t", "A", "=", "A", "[", "Y_hat", "]", "\n", "\n", "", "A", "=", "A", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "print", "(", "'Y_hat: {}, Y: {}, Y_prob: {}'", ".", "format", "(", "reverse_label_dict", "[", "Y_hat", "]", ",", "label", ",", "[", "\"{:.4f}\"", ".", "format", "(", "p", ")", "for", "p", "in", "Y_prob", ".", "cpu", "(", ")", ".", "flatten", "(", ")", "]", ")", ")", "\n", "\n", "probs", ",", "ids", "=", "torch", ".", "topk", "(", "Y_prob", ",", "k", ")", "\n", "probs", "=", "probs", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids", "=", "ids", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "preds_str", "=", "np", ".", "array", "(", "[", "reverse_label_dict", "[", "idx", "]", "for", "idx", "in", "ids", "]", ")", "\n", "\n", "", "return", "ids", ",", "preds_str", ",", "probs", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_heatmaps.load_params": [[58, 73], ["params.keys", "type", "type.", "isinstance", "len", "numpy.isnan", "pdb.set_trace"], "function", ["None"], ["", "def", "load_params", "(", "df_entry", ",", "params", ")", ":", "\n", "\t", "for", "key", "in", "params", ".", "keys", "(", ")", ":", "\n", "\t\t", "if", "key", "in", "df_entry", ".", "index", ":", "\n", "\t\t\t", "dtype", "=", "type", "(", "params", "[", "key", "]", ")", "\n", "val", "=", "df_entry", "[", "key", "]", "\n", "val", "=", "dtype", "(", "val", ")", "\n", "if", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "\t\t\t\t", "if", "len", "(", "val", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "params", "[", "key", "]", "=", "val", "\n", "", "", "elif", "not", "np", ".", "isnan", "(", "val", ")", ":", "\n", "\t\t\t\t", "params", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "\t\t\t\t", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.None.create_heatmaps.parse_config_dict": [[74, 80], ["None"], "function", ["None"], ["", "def", "parse_config_dict", "(", "args", ",", "config_dict", ")", ":", "\n", "\t", "if", "args", ".", "save_exp_code", "is", "not", "None", ":", "\n", "\t\t", "config_dict", "[", "'exp_arguments'", "]", "[", "'save_exp_code'", "]", "=", "args", ".", "save_exp_code", "\n", "", "if", "args", ".", "overlap", "is", "not", "None", ":", "\n", "\t\t", "config_dict", "[", "'patching_arguments'", "]", "[", "'overlap'", "]", "=", "args", ".", "overlap", "\n", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.save_pkl": [[4, 8], ["open", "pickle.dump", "open.close"], "function", ["None"], ["def", "save_pkl", "(", "filename", ",", "save_object", ")", ":", "\n", "\t", "writer", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "save_object", ",", "writer", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.load_pkl": [[9, 14], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "def", "load_pkl", "(", "filename", ")", ":", "\n", "\t", "loader", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "file", "=", "pickle", ".", "load", "(", "loader", ")", "\n", "loader", ".", "close", "(", ")", "\n", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.save_hdf5": [[16, 36], ["h5py.File", "asset_dict.items", "h5py.File.close", "h5py.File.create_dataset", "file.create_dataset.resize", "attr_dict.keys", "attr_dict[].items", "len"], "function", ["None"], ["", "def", "save_hdf5", "(", "output_path", ",", "asset_dict", ",", "attr_dict", "=", "None", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "output_path", ",", "mode", ")", "\n", "for", "key", ",", "val", "in", "asset_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_shape", "=", "val", ".", "shape", "\n", "if", "key", "not", "in", "file", ":", "\n", "            ", "data_type", "=", "val", ".", "dtype", "\n", "chunk_shape", "=", "(", "1", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "maxshape", "=", "(", "None", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "dset", "=", "file", ".", "create_dataset", "(", "key", ",", "shape", "=", "data_shape", ",", "maxshape", "=", "maxshape", ",", "chunks", "=", "chunk_shape", ",", "dtype", "=", "data_type", ")", "\n", "dset", "[", ":", "]", "=", "val", "\n", "if", "attr_dict", "is", "not", "None", ":", "\n", "                ", "if", "key", "in", "attr_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "for", "attr_key", ",", "attr_val", "in", "attr_dict", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                        ", "dset", ".", "attrs", "[", "attr_key", "]", "=", "attr_val", "\n", "", "", "", "", "else", ":", "\n", "            ", "dset", "=", "file", "[", "key", "]", "\n", "dset", ".", "resize", "(", "len", "(", "dset", ")", "+", "data_shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "dset", "[", "-", "data_shape", "[", "0", "]", ":", "]", "=", "val", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "output_path", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.initiate_model": [[17, 47], ["print", "print_network", "torch.load", "torch.load", "torch.load", "torch.load.keys", "models.model_mil.MIL_fc.load_state_dict", "models.model_mil.MIL_fc.relocate", "models.model_mil.MIL_fc.eval", "model_dict.update", "models.model_clam.CLAM_SB", "ckpt_clean.update", "models.model_clam.CLAM_MB", "models.model_mil.MIL_fc_mc", "models.model_mil.MIL_fc", "key.replace"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.print_network", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc_mc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval"], ["def", "initiate_model", "(", "args", ",", "ckpt_path", ")", ":", "\n", "    ", "print", "(", "'Init Model'", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "\n", "if", "args", ".", "model_size", "is", "not", "None", "and", "args", ".", "model_type", "in", "[", "'clam_sb'", ",", "'clam_mb'", "]", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "\"size_arg\"", ":", "args", ".", "model_size", "}", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'clam_sb'", ":", "\n", "        ", "model", "=", "CLAM_SB", "(", "**", "model_dict", ")", "\n", "", "elif", "args", ".", "model_type", "==", "'clam_mb'", ":", "\n", "        ", "model", "=", "CLAM_MB", "(", "**", "model_dict", ")", "\n", "", "else", ":", "# args.model_type == 'mil'", "\n", "        ", "if", "args", ".", "n_classes", ">", "2", ":", "\n", "            ", "model", "=", "MIL_fc_mc", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MIL_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "print_network", "(", "model", ")", "\n", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "ckpt_clean", "=", "{", "}", "\n", "for", "key", "in", "ckpt", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'instance_loss_fn'", "in", "key", ":", "\n", "            ", "continue", "\n", "", "ckpt_clean", ".", "update", "(", "{", "key", ".", "replace", "(", "'.module'", ",", "''", ")", ":", "ckpt", "[", "key", "]", "}", ")", "\n", "", "model", ".", "load_state_dict", "(", "ckpt_clean", ",", "strict", "=", "True", ")", "\n", "\n", "model", ".", "relocate", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval": [[48, 57], ["eval_utils.initiate_model", "print", "get_simple_loader", "eval_utils.summary", "print", "print"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.initiate_model", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_simple_loader", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary"], ["", "def", "eval", "(", "dataset", ",", "args", ",", "ckpt_path", ")", ":", "\n", "    ", "model", "=", "initiate_model", "(", "args", ",", "ckpt_path", ")", "\n", "\n", "print", "(", "'Init Loaders'", ")", "\n", "loader", "=", "get_simple_loader", "(", "dataset", ")", "\n", "patient_results", ",", "test_error", ",", "auc", ",", "df", ",", "_", "=", "summary", "(", "model", ",", "loader", ",", "args", ")", "\n", "print", "(", "'test_error: '", ",", "test_error", ")", "\n", "print", "(", "'auc: '", ",", "auc", ")", "\n", "return", "model", ",", "patient_results", ",", "test_error", ",", "auc", ",", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.summary": [[58, 119], ["utils.core_utils.Accuracy_Logger", "model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "range", "pandas.DataFrame", "len", "len", "utils.core_utils.Accuracy_Logger.log", "Y_prob.cpu().numpy", "label.item", "Y_hat.item", "patient_results.update", "calculate_error", "len", "results_dict.update", "len", "data.to", "label.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "numpy.unique", "sklearn.metrics.roc_auc_score", "sklearn.preprocessing.label_binarize", "range", "Y_prob.cpu", "sklearn.preprocessing.label_binarize", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "numpy.nanmean", "numpy.array", "label.item", "sklearn.metrics.roc_curve", "aucs.append", "aucs.append", "sklearn.preprocessing.label_binarize.ravel", "np.zeros.ravel", "numpy.array", "sklearn.metrics.auc", "float", "range", "range"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error"], ["", "def", "summary", "(", "model", ",", "loader", ",", "args", ")", ":", "\n", "    ", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "args", ".", "n_classes", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.", "\n", "test_error", "=", "0.", "\n", "\n", "all_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ",", "args", ".", "n_classes", ")", ")", "\n", "all_labels", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "all_preds", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "\n", "slide_ids", "=", "loader", ".", "dataset", ".", "slide_data", "[", "'slide_id'", "]", "\n", "patient_results", "=", "{", "}", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "slide_id", "=", "slide_ids", ".", "iloc", "[", "batch_idx", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "results_dict", "=", "model", "(", "data", ")", "\n", "\n", "", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "\n", "probs", "=", "Y_prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "all_probs", "[", "batch_idx", "]", "=", "probs", "\n", "all_labels", "[", "batch_idx", "]", "=", "label", ".", "item", "(", ")", "\n", "all_preds", "[", "batch_idx", "]", "=", "Y_hat", ".", "item", "(", ")", "\n", "\n", "patient_results", ".", "update", "(", "{", "slide_id", ":", "{", "'slide_id'", ":", "np", ".", "array", "(", "slide_id", ")", ",", "'prob'", ":", "probs", ",", "'label'", ":", "label", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "test_error", "+=", "error", "\n", "\n", "", "del", "data", "\n", "test_error", "/=", "len", "(", "loader", ")", "\n", "\n", "aucs", "=", "[", "]", "\n", "if", "len", "(", "np", ".", "unique", "(", "all_labels", ")", ")", "==", "1", ":", "\n", "        ", "auc_score", "=", "-", "1", "\n", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "n_classes", "==", "2", ":", "\n", "            ", "auc_score", "=", "roc_auc_score", "(", "all_labels", ",", "all_probs", "[", ":", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "binary_labels", "=", "label_binarize", "(", "all_labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", "]", ")", "\n", "for", "class_idx", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "                ", "if", "class_idx", "in", "all_labels", ":", "\n", "                    ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", "[", ":", ",", "class_idx", "]", ",", "all_probs", "[", ":", ",", "class_idx", "]", ")", "\n", "aucs", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "", "else", ":", "\n", "                    ", "aucs", ".", "append", "(", "float", "(", "'nan'", ")", ")", "\n", "", "", "if", "args", ".", "micro_average", ":", "\n", "                ", "binary_labels", "=", "label_binarize", "(", "all_labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", "]", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", ".", "ravel", "(", ")", ",", "all_probs", ".", "ravel", "(", ")", ")", "\n", "auc_score", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "", "else", ":", "\n", "                ", "auc_score", "=", "np", ".", "nanmean", "(", "np", ".", "array", "(", "aucs", ")", ")", "\n", "\n", "", "", "", "results_dict", "=", "{", "'slide_id'", ":", "slide_ids", ",", "'Y'", ":", "all_labels", ",", "'Y_hat'", ":", "all_preds", "}", "\n", "for", "c", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "        ", "results_dict", ".", "update", "(", "{", "'p_{}'", ".", "format", "(", "c", ")", ":", "all_probs", "[", ":", ",", "c", "]", "}", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results_dict", ")", "\n", "return", "patient_results", ",", "test_error", ",", "auc_score", ",", "df", ",", "acc_logger", "\n", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.SubsetSequentialSampler.__init__": [[26, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "\t\t", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.SubsetSequentialSampler.__iter__": [[29, 31], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.SubsetSequentialSampler.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.collate_MIL": [[35, 39], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "", "def", "collate_MIL", "(", "batch", ")", ":", "\n", "\t", "img", "=", "torch", ".", "cat", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.collate_features": [[40, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.vstack"], "function", ["None"], ["", "def", "collate_features", "(", "batch", ")", ":", "\n", "\t", "img", "=", "torch", ".", "cat", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "coords", "=", "np", ".", "vstack", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "img", ",", "coords", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_simple_loader": [[46, 50], ["torch.utils.data.DataLoader", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["", "def", "get_simple_loader", "(", "dataset", ",", "batch_size", "=", "1", ",", "num_workers", "=", "1", ")", ":", "\n", "\t", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "False", ",", "'num_workers'", ":", "num_workers", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ".", "SequentialSampler", "(", "dataset", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_split_loader": [[51, 71], ["numpy.random.choice", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.arange", "utils.make_weights_for_balanced_classes_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "int", "utils.SubsetSequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.RandomSampler", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.make_weights_for_balanced_classes_split"], ["", "def", "get_split_loader", "(", "split_dataset", ",", "training", "=", "False", ",", "testing", "=", "False", ",", "weighted", "=", "False", ")", ":", "\n", "\t", "\"\"\"\n\t\treturn either the validation loader or training loader \n\t\"\"\"", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "if", "not", "testing", ":", "\n", "\t\t", "if", "training", ":", "\n", "\t\t\t", "if", "weighted", ":", "\n", "\t\t\t\t", "weights", "=", "make_weights_for_balanced_classes_split", "(", "split_dataset", ")", "\n", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "RandomSampler", "(", "split_dataset", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "SequentialSampler", "(", "split_dataset", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t", "ids", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "split_dataset", ")", ",", "int", "(", "len", "(", "split_dataset", ")", "*", "0.1", ")", ")", ",", "replace", "=", "False", ")", "\n", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "SubsetSequentialSampler", "(", "ids", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_optim": [[72, 80], ["torch.Adam", "filter", "torch.SGD", "model.parameters", "filter", "model.parameters"], "function", ["None"], ["", "def", "get_optim", "(", "model", ",", "args", ")", ":", "\n", "\t", "if", "args", ".", "opt", "==", "\"adam\"", ":", "\n", "\t\t", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "reg", ")", "\n", "", "elif", "args", ".", "opt", "==", "'sgd'", ":", "\n", "\t\t", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "reg", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.print_network": [[81, 94], ["print", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "\t", "num_params", "=", "0", "\n", "num_params_train", "=", "0", "\n", "print", "(", "net", ")", "\n", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "\t\t", "n", "=", "param", ".", "numel", "(", ")", "\n", "num_params", "+=", "n", "\n", "if", "param", ".", "requires_grad", ":", "\n", "\t\t\t", "num_params_train", "+=", "n", "\n", "\n", "", "", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "print", "(", "'Total number of trainable parameters: %d'", "%", "num_params_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.generate_split": [[96, 134], ["numpy.arange().astype", "numpy.random.seed", "range", "numpy.setdiff1d", "range", "numpy.arange", "all_test_ids.extend", "len", "numpy.intersect1d", "numpy.random.choice", "numpy.setdiff1d", "all_val_ids.extend", "numpy.random.choice", "numpy.setdiff1d", "all_test_ids.extend", "sampled_train_ids.extend", "math.ceil", "numpy.arange", "sampled_train_ids.extend", "len"], "function", ["None"], ["", "def", "generate_split", "(", "cls_ids", ",", "val_num", ",", "test_num", ",", "samples", ",", "n_splits", "=", "5", ",", "\n", "seed", "=", "7", ",", "label_frac", "=", "1.0", ",", "custom_test_ids", "=", "None", ")", ":", "\n", "\t", "indices", "=", "np", ".", "arange", "(", "samples", ")", ".", "astype", "(", "int", ")", "\n", "\n", "if", "custom_test_ids", "is", "not", "None", ":", "\n", "\t\t", "indices", "=", "np", ".", "setdiff1d", "(", "indices", ",", "custom_test_ids", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "for", "i", "in", "range", "(", "n_splits", ")", ":", "\n", "\t\t", "all_val_ids", "=", "[", "]", "\n", "all_test_ids", "=", "[", "]", "\n", "sampled_train_ids", "=", "[", "]", "\n", "\n", "if", "custom_test_ids", "is", "not", "None", ":", "# pre-built test split, do not need to sample", "\n", "\t\t\t", "all_test_ids", ".", "extend", "(", "custom_test_ids", ")", "\n", "\n", "", "for", "c", "in", "range", "(", "len", "(", "val_num", ")", ")", ":", "\n", "\t\t\t", "possible_indices", "=", "np", ".", "intersect1d", "(", "cls_ids", "[", "c", "]", ",", "indices", ")", "#all indices of this class", "\n", "val_ids", "=", "np", ".", "random", ".", "choice", "(", "possible_indices", ",", "val_num", "[", "c", "]", ",", "replace", "=", "False", ")", "# validation ids", "\n", "\n", "remaining_ids", "=", "np", ".", "setdiff1d", "(", "possible_indices", ",", "val_ids", ")", "#indices of this class left after validation", "\n", "all_val_ids", ".", "extend", "(", "val_ids", ")", "\n", "\n", "if", "custom_test_ids", "is", "None", ":", "# sample test split", "\n", "\n", "\t\t\t\t", "test_ids", "=", "np", ".", "random", ".", "choice", "(", "remaining_ids", ",", "test_num", "[", "c", "]", ",", "replace", "=", "False", ")", "\n", "remaining_ids", "=", "np", ".", "setdiff1d", "(", "remaining_ids", ",", "test_ids", ")", "\n", "all_test_ids", ".", "extend", "(", "test_ids", ")", "\n", "\n", "", "if", "label_frac", "==", "1", ":", "\n", "\t\t\t\t", "sampled_train_ids", ".", "extend", "(", "remaining_ids", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "sample_num", "=", "math", ".", "ceil", "(", "len", "(", "remaining_ids", ")", "*", "label_frac", ")", "\n", "slice_ids", "=", "np", ".", "arange", "(", "sample_num", ")", "\n", "sampled_train_ids", ".", "extend", "(", "remaining_ids", "[", "slice_ids", "]", ")", "\n", "\n", "", "", "yield", "sampled_train_ids", ",", "all_val_ids", ",", "all_test_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.nth": [[136, 141], ["collections.deque", "next", "itertools.islice"], "function", ["None"], ["", "", "def", "nth", "(", "iterator", ",", "n", ",", "default", "=", "None", ")", ":", "\n", "\t", "if", "n", "is", "None", ":", "\n", "\t\t", "return", "collections", ".", "deque", "(", "iterator", ",", "maxlen", "=", "0", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "next", "(", "islice", "(", "iterator", ",", "n", ",", "None", ")", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error": [[142, 146], ["Y_hat.float().eq().float().mean().item", "Y_hat.float().eq().float().mean", "Y_hat.float().eq().float", "Y_hat.float().eq", "Y.float", "Y_hat.float"], "function", ["None"], ["", "", "def", "calculate_error", "(", "Y_hat", ",", "Y", ")", ":", "\n", "\t", "error", "=", "1.", "-", "Y_hat", ".", "float", "(", ")", ".", "eq", "(", "Y", ".", "float", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.make_weights_for_balanced_classes_split": [[147, 156], ["float", "range", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "len", "int", "len", "dataset.getlabel", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel"], ["", "def", "make_weights_for_balanced_classes_split", "(", "dataset", ")", ":", "\n", "\t", "N", "=", "float", "(", "len", "(", "dataset", ")", ")", "\n", "weight_per_class", "=", "[", "N", "/", "len", "(", "dataset", ".", "slide_cls_ids", "[", "c", "]", ")", "for", "c", "in", "range", "(", "len", "(", "dataset", ".", "slide_cls_ids", ")", ")", "]", "\n", "weight", "=", "[", "0", "]", "*", "int", "(", "N", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "\t\t", "y", "=", "dataset", ".", "getlabel", "(", "idx", ")", "\n", "weight", "[", "idx", "]", "=", "weight_per_class", "[", "y", "]", "\n", "\n", "", "return", "torch", ".", "DoubleTensor", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.initialize_weights": [[157, 166], ["module.modules", "isinstance", "torch.init.xavier_normal_", "m.bias.data.zero_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "initialize_weights", "(", "module", ")", ":", "\n", "\t", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.__init__": [[14, 18], ["object.__init__", "core_utils.Accuracy_Logger.initialize"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.initialize"], ["def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "Accuracy_Logger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.initialize": [[19, 21], ["range"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log": [[22, 27], ["int", "int"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "Y_hat", ",", "Y", ")", ":", "\n", "        ", "Y_hat", "=", "int", "(", "Y_hat", ")", "\n", "Y", "=", "int", "(", "Y", ")", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", "==", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log_batch": [[28, 35], ["numpy.array().astype", "numpy.array().astype", "numpy.unique", "cls_mask.sum", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "log_batch", "(", "self", ",", "Y_hat", ",", "Y", ")", ":", "\n", "        ", "Y_hat", "=", "np", ".", "array", "(", "Y_hat", ")", ".", "astype", "(", "int", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", ".", "astype", "(", "int", ")", "\n", "for", "label_class", "in", "np", ".", "unique", "(", "Y", ")", ":", "\n", "            ", "cls_mask", "=", "Y", "==", "label_class", "\n", "self", ".", "data", "[", "label_class", "]", "[", "\"count\"", "]", "+=", "cls_mask", ".", "sum", "(", ")", "\n", "self", ".", "data", "[", "label_class", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", "[", "cls_mask", "]", "==", "Y", "[", "cls_mask", "]", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary": [[36, 46], ["float"], "methods", ["None"], ["", "", "def", "get_summary", "(", "self", ",", "c", ")", ":", "\n", "        ", "count", "=", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "\n", "correct", "=", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "\n", "\n", "if", "count", "==", "0", ":", "\n", "            ", "acc", "=", "None", "\n", "", "else", ":", "\n", "            ", "acc", "=", "float", "(", "correct", ")", "/", "count", "\n", "\n", "", "return", "acc", ",", "correct", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.EarlyStopping.__init__": [[49, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "20", ",", "stop_epoch", "=", "50", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 20\n            stop_epoch (int): Earliest epoch possible for stopping\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "stop_epoch", "=", "stop_epoch", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.EarlyStopping.__call__": [[66, 82], ["core_utils.EarlyStopping.save_checkpoint", "print", "core_utils.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "epoch", ",", "val_loss", ",", "model", ",", "ckpt_name", "=", "'checkpoint.pt'", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "ckpt_name", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", "and", "epoch", ">", "self", ".", "stop_epoch", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "ckpt_name", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.EarlyStopping.save_checkpoint": [[83, 89], ["torch.save", "print", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ",", "ckpt_name", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_name", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train": [[90, 219], ["print", "os.path.join", "print", "datasets.dataset_generic.save_splits", "print", "print", "print", "print", "print", "print", "print", "models.model_clam.CLAM_MB.relocate", "print", "print_network", "print", "get_optim", "print", "print", "get_split_loader", "get_split_loader", "get_split_loader", "print", "print", "print", "range", "core_utils.summary", "print", "core_utils.summary", "print", "range", "str", "os.path.isdir", "os.mkdir", "SummaryWriter", "os.path.join", "SmoothTop1SVM", "nn.CrossEntropyLoss", "model_dict.update", "core_utils.EarlyStopping", "models.model_clam.CLAM_MB.load_state_dict", "torch.save", "acc_logger.get_summary", "print", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.close", "len", "len", "len", "loss_fn.cuda.cuda", "model_dict.update", "model_dict.update", "SmoothTop1SVM", "nn.CrossEntropyLoss", "models.model_clam.CLAM_SB", "models.model_mil.MIL_fc_mc", "models.model_mil.MIL_fc", "core_utils.train_loop_clam", "core_utils.validate_clam", "core_utils.train_loop", "core_utils.validate", "torch.load", "models.model_clam.CLAM_MB.state_dict", "os.path.join", "SummaryWriter.add_scalar", "instance_loss_fn.cuda.cuda", "models.model_clam.CLAM_MB", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.save_splits", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc_mc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.print_network", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_optim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train_loop_clam", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.validate_clam", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train_loop", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.validate"], ["", "", "def", "train", "(", "datasets", ",", "cur", ",", "args", ")", ":", "\n", "    ", "\"\"\"   \n        train for a single fold\n    \"\"\"", "\n", "print", "(", "'\\nTraining Fold {}!'", ".", "format", "(", "cur", ")", ")", "\n", "writer_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "str", "(", "cur", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "writer_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "writer_dir", ")", "\n", "\n", "", "if", "args", ".", "log_data", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "writer", "=", "SummaryWriter", "(", "writer_dir", ",", "flush_secs", "=", "15", ")", "\n", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "\n", "", "print", "(", "'\\nInit train/val/test splits...'", ",", "end", "=", "' '", ")", "\n", "train_split", ",", "val_split", ",", "test_split", "=", "datasets", "\n", "save_splits", "(", "datasets", ",", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'splits_{}.csv'", ".", "format", "(", "cur", ")", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print", "(", "\"Training on {} samples\"", ".", "format", "(", "len", "(", "train_split", ")", ")", ")", "\n", "print", "(", "\"Validating on {} samples\"", ".", "format", "(", "len", "(", "val_split", ")", ")", ")", "\n", "print", "(", "\"Testing on {} samples\"", ".", "format", "(", "len", "(", "test_split", ")", ")", ")", "\n", "\n", "print", "(", "'\\nInit loss function...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "bag_loss", "==", "'svm'", ":", "\n", "        ", "from", "topk", ".", "svm", "import", "SmoothTop1SVM", "\n", "loss_fn", "=", "SmoothTop1SVM", "(", "n_classes", "=", "args", ".", "n_classes", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "            ", "loss_fn", "=", "loss_fn", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Model...'", ",", "end", "=", "' '", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "\n", "if", "args", ".", "model_size", "is", "not", "None", "and", "args", ".", "model_type", "!=", "'mil'", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "\"size_arg\"", ":", "args", ".", "model_size", "}", ")", "\n", "\n", "", "if", "args", ".", "model_type", "in", "[", "'clam_sb'", ",", "'clam_mb'", "]", ":", "\n", "        ", "if", "args", ".", "subtyping", ":", "\n", "            ", "model_dict", ".", "update", "(", "{", "'subtyping'", ":", "True", "}", ")", "\n", "\n", "", "if", "args", ".", "B", ">", "0", ":", "\n", "            ", "model_dict", ".", "update", "(", "{", "'k_sample'", ":", "args", ".", "B", "}", ")", "\n", "\n", "", "if", "args", ".", "inst_loss", "==", "'svm'", ":", "\n", "            ", "from", "topk", ".", "svm", "import", "SmoothTop1SVM", "\n", "instance_loss_fn", "=", "SmoothTop1SVM", "(", "n_classes", "=", "2", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "                ", "instance_loss_fn", "=", "instance_loss_fn", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "instance_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'clam_sb'", ":", "\n", "            ", "model", "=", "CLAM_SB", "(", "**", "model_dict", ",", "instance_loss_fn", "=", "instance_loss_fn", ")", "\n", "", "elif", "args", ".", "model_type", "==", "'clam_mb'", ":", "\n", "            ", "model", "=", "CLAM_MB", "(", "**", "model_dict", ",", "instance_loss_fn", "=", "instance_loss_fn", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "# args.model_type == 'mil'", "\n", "        ", "if", "args", ".", "n_classes", ">", "2", ":", "\n", "            ", "model", "=", "MIL_fc_mc", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MIL_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "model", ".", "relocate", "(", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print_network", "(", "model", ")", "\n", "\n", "print", "(", "'\\nInit optimizer ...'", ",", "end", "=", "' '", ")", "\n", "optimizer", "=", "get_optim", "(", "model", ",", "args", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Loaders...'", ",", "end", "=", "' '", ")", "\n", "train_loader", "=", "get_split_loader", "(", "train_split", ",", "training", "=", "True", ",", "testing", "=", "args", ".", "testing", ",", "weighted", "=", "args", ".", "weighted_sample", ")", "\n", "val_loader", "=", "get_split_loader", "(", "val_split", ",", "testing", "=", "args", ".", "testing", ")", "\n", "test_loader", "=", "get_split_loader", "(", "test_split", ",", "testing", "=", "args", ".", "testing", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nSetup EarlyStopping...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "early_stopping", ":", "\n", "        ", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "20", ",", "stop_epoch", "=", "50", ",", "verbose", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "early_stopping", "=", "None", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "max_epochs", ")", ":", "\n", "        ", "if", "args", ".", "model_type", "in", "[", "'clam_sb'", ",", "'clam_mb'", "]", "and", "not", "args", ".", "no_inst_cluster", ":", "\n", "            ", "train_loop_clam", "(", "epoch", ",", "model", ",", "train_loader", ",", "optimizer", ",", "args", ".", "n_classes", ",", "args", ".", "bag_weight", ",", "writer", ",", "loss_fn", ")", "\n", "stop", "=", "validate_clam", "(", "cur", ",", "epoch", ",", "model", ",", "val_loader", ",", "args", ".", "n_classes", ",", "\n", "early_stopping", ",", "writer", ",", "loss_fn", ",", "args", ".", "results_dir", ")", "\n", "\n", "", "else", ":", "\n", "            ", "train_loop", "(", "epoch", ",", "model", ",", "train_loader", ",", "optimizer", ",", "args", ".", "n_classes", ",", "writer", ",", "loss_fn", ")", "\n", "stop", "=", "validate", "(", "cur", ",", "epoch", ",", "model", ",", "val_loader", ",", "args", ".", "n_classes", ",", "\n", "early_stopping", ",", "writer", ",", "loss_fn", ",", "args", ".", "results_dir", ")", "\n", "\n", "", "if", "stop", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "args", ".", "early_stopping", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "\n", "", "_", ",", "val_error", ",", "val_auc", ",", "_", "=", "summary", "(", "model", ",", "val_loader", ",", "args", ".", "n_classes", ")", "\n", "print", "(", "'Val error: {:.4f}, ROC AUC: {:.4f}'", ".", "format", "(", "val_error", ",", "val_auc", ")", ")", "\n", "\n", "results_dict", ",", "test_error", ",", "test_auc", ",", "acc_logger", "=", "summary", "(", "model", ",", "test_loader", ",", "args", ".", "n_classes", ")", "\n", "print", "(", "'Test error: {:.4f}, ROC AUC: {:.4f}'", ".", "format", "(", "test_error", ",", "test_auc", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "        ", "acc", ",", "correct", ",", "count", "=", "acc_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'final/test_class_{}_acc'", ".", "format", "(", "i", ")", ",", "acc", ",", "0", ")", "\n", "\n", "", "", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'final/val_error'", ",", "val_error", ",", "0", ")", "\n", "writer", ".", "add_scalar", "(", "'final/val_auc'", ",", "val_auc", ",", "0", ")", "\n", "writer", ".", "add_scalar", "(", "'final/test_error'", ",", "test_error", ",", "0", ")", "\n", "writer", ".", "add_scalar", "(", "'final/test_auc'", ",", "test_auc", ",", "0", ")", "\n", "writer", ".", "close", "(", ")", "\n", "", "return", "results_dict", ",", "test_auc", ",", "val_auc", ",", "1", "-", "test_error", ",", "1", "-", "val_error", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train_loop_clam": [[221, 288], ["torch.device", "model.train", "core_utils.Accuracy_Logger", "core_utils.Accuracy_Logger", "print", "enumerate", "len", "len", "print", "range", "model", "core_utils.Accuracy_Logger.log", "loss_fn", "loss_fn.item", "instance_loss.item", "core_utils.Accuracy_Logger.log_batch", "calculate_error", "total_loss.backward", "optimizer.step", "optimizer.zero_grad", "print", "range", "core_utils.Accuracy_Logger.get_summary", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cuda.is_available", "data.to", "label.to", "print", "core_utils.Accuracy_Logger.get_summary", "print", "writer.add_scalar", "total_loss.item", "label.item", "data.size"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log_batch", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary"], ["", "def", "train_loop_clam", "(", "epoch", ",", "model", ",", "loader", ",", "optimizer", ",", "n_classes", ",", "bag_weight", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "inst_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "\n", "train_loss", "=", "0.", "\n", "train_error", "=", "0.", "\n", "train_inst_loss", "=", "0.", "\n", "inst_count", "=", "0", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "instance_dict", "=", "model", "(", "data", ",", "label", "=", "label", ",", "instance_eval", "=", "True", ")", "\n", "\n", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "label", ")", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "instance_loss", "=", "instance_dict", "[", "'instance_loss'", "]", "\n", "inst_count", "+=", "1", "\n", "instance_loss_value", "=", "instance_loss", ".", "item", "(", ")", "\n", "train_inst_loss", "+=", "instance_loss_value", "\n", "\n", "total_loss", "=", "bag_weight", "*", "loss", "+", "(", "1", "-", "bag_weight", ")", "*", "instance_loss", "\n", "\n", "inst_preds", "=", "instance_dict", "[", "'inst_preds'", "]", "\n", "inst_labels", "=", "instance_dict", "[", "'inst_labels'", "]", "\n", "inst_logger", ".", "log_batch", "(", "inst_preds", ",", "inst_labels", ")", "\n", "\n", "train_loss", "+=", "loss_value", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "'batch {}, loss: {:.4f}, instance_loss: {:.4f}, weighted_loss: {:.4f}, '", ".", "format", "(", "batch_idx", ",", "loss_value", ",", "instance_loss_value", ",", "total_loss", ".", "item", "(", ")", ")", "+", "\n", "'label: {}, bag_size: {}'", ".", "format", "(", "label", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "train_error", "+=", "error", "\n", "\n", "# backward pass", "\n", "total_loss", ".", "backward", "(", ")", "\n", "# step", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate loss and error for epoch", "\n", "", "train_loss", "/=", "len", "(", "loader", ")", "\n", "train_error", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "inst_count", ">", "0", ":", "\n", "        ", "train_inst_loss", "/=", "inst_count", "\n", "print", "(", "'\\n'", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "acc", ",", "correct", ",", "count", "=", "inst_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {} clustering acc {}: correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "\n", "", "", "print", "(", "'Epoch: {}, train_loss: {:.4f}, train_clustering_loss:  {:.4f}, train_error: {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_inst_loss", ",", "train_error", ")", ")", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "acc", ",", "correct", ",", "count", "=", "acc_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "if", "writer", "and", "acc", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'train/class_{}_acc'", ".", "format", "(", "i", ")", ",", "acc", ",", "epoch", ")", "\n", "\n", "", "", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/error'", ",", "train_error", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/clustering_loss'", ",", "train_inst_loss", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train_loop": [[289, 333], ["torch.device", "model.train", "core_utils.Accuracy_Logger", "print", "enumerate", "len", "len", "print", "range", "model", "core_utils.Accuracy_Logger.log", "loss_fn", "loss_fn.item", "calculate_error", "loss_fn.backward", "optimizer.step", "optimizer.zero_grad", "core_utils.Accuracy_Logger.get_summary", "print", "writer.add_scalar", "writer.add_scalar", "torch.cuda.is_available", "data.to", "label.to", "print", "writer.add_scalar", "label.item", "data.size"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.train", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary"], ["", "", "def", "train_loop", "(", "epoch", ",", "model", ",", "loader", ",", "optimizer", ",", "n_classes", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "train_loss", "=", "0.", "\n", "train_error", "=", "0.", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "\n", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "label", ")", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "train_loss", "+=", "loss_value", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "'batch {}, loss: {:.4f}, label: {}, bag_size: {}'", ".", "format", "(", "batch_idx", ",", "loss_value", ",", "label", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "train_error", "+=", "error", "\n", "\n", "# backward pass", "\n", "loss", ".", "backward", "(", ")", "\n", "# step", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate loss and error for epoch", "\n", "", "train_loss", "/=", "len", "(", "loader", ")", "\n", "train_error", "/=", "len", "(", "loader", ")", "\n", "\n", "print", "(", "'Epoch: {}, train_loss: {:.4f}, train_error: {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_error", ")", ")", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "acc", ",", "correct", ",", "count", "=", "acc_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'train/class_{}_acc'", ".", "format", "(", "i", ")", ",", "acc", ",", "epoch", ")", "\n", "\n", "", "", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/error'", ",", "train_error", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.validate": [[335, 393], ["torch.device", "model.eval", "core_utils.Accuracy_Logger", "numpy.zeros", "numpy.zeros", "len", "len", "print", "range", "len", "torch.no_grad", "enumerate", "sklearn.metrics.roc_auc_score", "sklearn.metrics.roc_auc_score", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "core_utils.Accuracy_Logger.get_summary", "print", "early_stopping", "torch.cuda.is_available", "len", "model", "core_utils.Accuracy_Logger.log", "loss_fn", "Y_prob.cpu().numpy", "label.item", "loss_fn.item", "calculate_error", "print", "data.to", "label.to", "os.path.join", "Y_prob.cpu"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error"], ["", "", "def", "validate", "(", "cur", ",", "epoch", ",", "model", ",", "loader", ",", "n_classes", ",", "early_stopping", "=", "None", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ",", "results_dir", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "# loader.dataset.update_mode(True)", "\n", "val_loss", "=", "0.", "\n", "val_error", "=", "0.", "\n", "\n", "prob", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ",", "n_classes", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "label", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "label", ")", "\n", "\n", "prob", "[", "batch_idx", "]", "=", "Y_prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "[", "batch_idx", "]", "=", "label", ".", "item", "(", ")", "\n", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "val_error", "+=", "error", "\n", "\n", "\n", "", "", "val_error", "/=", "len", "(", "loader", ")", "\n", "val_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "n_classes", "==", "2", ":", "\n", "        ", "auc", "=", "roc_auc_score", "(", "labels", ",", "prob", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "auc", "=", "roc_auc_score", "(", "labels", ",", "prob", ",", "multi_class", "=", "'ovr'", ")", "\n", "\n", "\n", "", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "val_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/auc'", ",", "auc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/error'", ",", "val_error", ",", "epoch", ")", "\n", "\n", "", "print", "(", "'\\nVal Set, val_loss: {:.4f}, val_error: {:.4f}, auc: {:.4f}'", ".", "format", "(", "val_loss", ",", "val_error", ",", "auc", ")", ")", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "acc", ",", "correct", ",", "count", "=", "acc_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "\n", "", "if", "early_stopping", ":", "\n", "        ", "assert", "results_dir", "\n", "early_stopping", "(", "epoch", ",", "val_loss", ",", "model", ",", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "            ", "print", "(", "\"Early stopping\"", ")", "\n", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.validate_clam": [[394, 484], ["torch.device", "model.eval", "core_utils.Accuracy_Logger", "core_utils.Accuracy_Logger", "numpy.zeros", "numpy.zeros", "len", "len", "print", "range", "len", "torch.no_grad", "enumerate", "sklearn.metrics.roc_auc_score", "sklearn.preprocessing.label_binarize", "range", "numpy.nanmean", "range", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "core_utils.Accuracy_Logger.get_summary", "print", "early_stopping", "torch.cuda.is_available", "len", "model", "core_utils.Accuracy_Logger.log", "loss_fn", "loss_fn.item", "instance_loss.item", "core_utils.Accuracy_Logger.log_batch", "Y_prob.cpu().numpy", "label.item", "calculate_error", "numpy.array", "core_utils.Accuracy_Logger.get_summary", "print", "writer.add_scalar", "print", "data.to", "label.to", "sklearn.metrics.roc_curve", "aucs.append", "aucs.append", "os.path.join", "Y_prob.cpu", "sklearn.metrics.auc", "float", "range"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log_batch", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.get_summary"], ["", "def", "validate_clam", "(", "cur", ",", "epoch", ",", "model", ",", "loader", ",", "n_classes", ",", "early_stopping", "=", "None", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ",", "results_dir", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "inst_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "val_loss", "=", "0.", "\n", "val_error", "=", "0.", "\n", "\n", "val_inst_loss", "=", "0.", "\n", "val_inst_acc", "=", "0.", "\n", "inst_count", "=", "0", "\n", "\n", "prob", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ",", "n_classes", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "sample_size", "=", "model", ".", "k_sample", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "instance_dict", "=", "model", "(", "data", ",", "label", "=", "label", ",", "instance_eval", "=", "True", ")", "\n", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "label", ")", "\n", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "instance_loss", "=", "instance_dict", "[", "'instance_loss'", "]", "\n", "\n", "inst_count", "+=", "1", "\n", "instance_loss_value", "=", "instance_loss", ".", "item", "(", ")", "\n", "val_inst_loss", "+=", "instance_loss_value", "\n", "\n", "inst_preds", "=", "instance_dict", "[", "'inst_preds'", "]", "\n", "inst_labels", "=", "instance_dict", "[", "'inst_labels'", "]", "\n", "inst_logger", ".", "log_batch", "(", "inst_preds", ",", "inst_labels", ")", "\n", "\n", "prob", "[", "batch_idx", "]", "=", "Y_prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "[", "batch_idx", "]", "=", "label", ".", "item", "(", ")", "\n", "\n", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "val_error", "+=", "error", "\n", "\n", "", "", "val_error", "/=", "len", "(", "loader", ")", "\n", "val_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "n_classes", "==", "2", ":", "\n", "        ", "auc", "=", "roc_auc_score", "(", "labels", ",", "prob", "[", ":", ",", "1", "]", ")", "\n", "aucs", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "aucs", "=", "[", "]", "\n", "binary_labels", "=", "label_binarize", "(", "labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "n_classes", ")", "]", ")", "\n", "for", "class_idx", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "if", "class_idx", "in", "labels", ":", "\n", "                ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", "[", ":", ",", "class_idx", "]", ",", "prob", "[", ":", ",", "class_idx", "]", ")", "\n", "aucs", ".", "append", "(", "calc_auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "", "else", ":", "\n", "                ", "aucs", ".", "append", "(", "float", "(", "'nan'", ")", ")", "\n", "\n", "", "", "auc", "=", "np", ".", "nanmean", "(", "np", ".", "array", "(", "aucs", ")", ")", "\n", "\n", "", "print", "(", "'\\nVal Set, val_loss: {:.4f}, val_error: {:.4f}, auc: {:.4f}'", ".", "format", "(", "val_loss", ",", "val_error", ",", "auc", ")", ")", "\n", "if", "inst_count", ">", "0", ":", "\n", "        ", "val_inst_loss", "/=", "inst_count", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "acc", ",", "correct", ",", "count", "=", "inst_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {} clustering acc {}: correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "\n", "", "", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "val_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/auc'", ",", "auc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/error'", ",", "val_error", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/inst_loss'", ",", "val_inst_loss", ",", "epoch", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "acc", ",", "correct", ",", "count", "=", "acc_logger", ".", "get_summary", "(", "i", ")", "\n", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "i", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "\n", "if", "writer", "and", "acc", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'val/class_{}_acc'", ".", "format", "(", "i", ")", ",", "acc", ",", "epoch", ")", "\n", "\n", "\n", "", "", "if", "early_stopping", ":", "\n", "        ", "assert", "results_dir", "\n", "early_stopping", "(", "epoch", ",", "val_loss", ",", "model", ",", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "            ", "print", "(", "\"Early stopping\"", ")", "\n", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.summary": [[485, 532], ["torch.device", "core_utils.Accuracy_Logger", "model.eval", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "core_utils.Accuracy_Logger.log", "Y_prob.cpu().numpy", "label.item", "patient_results.update", "calculate_error", "sklearn.metrics.roc_auc_score", "sklearn.preprocessing.label_binarize", "range", "numpy.nanmean", "torch.cuda.is_available", "len", "data.to", "label.to", "torch.no_grad", "model", "numpy.array", "Y_prob.cpu", "sklearn.metrics.roc_curve", "aucs.append", "aucs.append", "numpy.array", "label.item", "sklearn.metrics.auc", "float", "range"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.calculate_error"], ["", "def", "summary", "(", "model", ",", "loader", ",", "n_classes", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "n_classes", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.", "\n", "test_error", "=", "0.", "\n", "\n", "all_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ",", "n_classes", ")", ")", "\n", "all_labels", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "\n", "slide_ids", "=", "loader", ".", "dataset", ".", "slide_data", "[", "'slide_id'", "]", "\n", "patient_results", "=", "{", "}", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "slide_id", "=", "slide_ids", ".", "iloc", "[", "batch_idx", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "probs", "=", "Y_prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_probs", "[", "batch_idx", "]", "=", "probs", "\n", "all_labels", "[", "batch_idx", "]", "=", "label", ".", "item", "(", ")", "\n", "\n", "patient_results", ".", "update", "(", "{", "slide_id", ":", "{", "'slide_id'", ":", "np", ".", "array", "(", "slide_id", ")", ",", "'prob'", ":", "probs", ",", "'label'", ":", "label", ".", "item", "(", ")", "}", "}", ")", "\n", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "test_error", "+=", "error", "\n", "\n", "", "test_error", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "n_classes", "==", "2", ":", "\n", "        ", "auc", "=", "roc_auc_score", "(", "all_labels", ",", "all_probs", "[", ":", ",", "1", "]", ")", "\n", "aucs", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "aucs", "=", "[", "]", "\n", "binary_labels", "=", "label_binarize", "(", "all_labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "n_classes", ")", "]", ")", "\n", "for", "class_idx", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "if", "class_idx", "in", "all_labels", ":", "\n", "                ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", "[", ":", ",", "class_idx", "]", ",", "all_probs", "[", ":", ",", "class_idx", "]", ")", "\n", "aucs", ".", "append", "(", "calc_auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "", "else", ":", "\n", "                ", "aucs", ".", "append", "(", "float", "(", "'nan'", ")", ")", "\n", "\n", "", "", "auc", "=", "np", ".", "nanmean", "(", "np", ".", "array", "(", "aucs", ")", ")", "\n", "\n", "\n", "", "return", "patient_results", ",", "test_error", ",", "auc", ",", "acc_logger", "\n", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__init__": [[33, 81], ["len", "pandas.read_csv", "dataset_generic.Generic_WSI_Classification_Dataset.filter_df", "dataset_generic.Generic_WSI_Classification_Dataset.df_prep", "dataset_generic.Generic_WSI_Classification_Dataset.patient_data_prep", "dataset_generic.Generic_WSI_Classification_Dataset.cls_ids_prep", "set", "numpy.random.seed", "numpy.random.shuffle", "dataset_generic.Generic_WSI_Classification_Dataset.summarize", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.values"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.filter_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.df_prep", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.patient_data_prep", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.cls_ids_prep", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.summarize"], ["\t", "def", "__init__", "(", "self", ",", "\n", "csv_path", "=", "'dataset_csv/ccrcc_clean.csv'", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "7", ",", "\n", "print_info", "=", "True", ",", "\n", "label_dict", "=", "{", "}", ",", "\n", "filter_dict", "=", "{", "}", ",", "\n", "ignore", "=", "[", "]", ",", "\n", "patient_strat", "=", "False", ",", "\n", "label_col", "=", "None", ",", "\n", "patient_voting", "=", "'max'", ",", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tcsv_file (string): Path to the csv file with annotations.\n\t\t\tshuffle (boolean): Whether to shuffle\n\t\t\tseed (int): random seed for shuffling the data\n\t\t\tprint_info (boolean): Whether to print a summary of the dataset\n\t\t\tlabel_dict (dict): Dictionary with key, value pairs for converting str labels to int\n\t\t\tignore (list): List containing class labels to ignore\n\t\t\"\"\"", "\n", "self", ".", "label_dict", "=", "label_dict", "\n", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "label_dict", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "print_info", "=", "print_info", "\n", "self", ".", "patient_strat", "=", "patient_strat", "\n", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "(", "None", ",", "None", ",", "None", ")", "\n", "self", ".", "data_dir", "=", "None", "\n", "if", "not", "label_col", ":", "\n", "\t\t\t", "label_col", "=", "'label'", "\n", "", "self", ".", "label_col", "=", "label_col", "\n", "\n", "slide_data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "slide_data", "=", "self", ".", "filter_df", "(", "slide_data", ",", "filter_dict", ")", "\n", "slide_data", "=", "self", ".", "df_prep", "(", "slide_data", ",", "self", ".", "label_dict", ",", "ignore", ",", "self", ".", "label_col", ")", "\n", "\n", "###shuffle data", "\n", "if", "shuffle", ":", "\n", "\t\t\t", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "slide_data", ")", "\n", "\n", "", "self", ".", "slide_data", "=", "slide_data", "\n", "\n", "self", ".", "patient_data_prep", "(", "patient_voting", ")", "\n", "self", ".", "cls_ids_prep", "(", ")", "\n", "\n", "if", "print_info", ":", "\n", "\t\t\t", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.cls_ids_prep": [[82, 92], ["range", "range", "range", "numpy.where", "range", "numpy.where"], "methods", ["None"], ["", "", "def", "cls_ids_prep", "(", "self", ")", ":", "\n", "# store ids corresponding each class at the patient or case level", "\n", "\t\t", "self", ".", "patient_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "patient_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "patient_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n", "# store ids corresponding each class at the slide level", "\n", "", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.patient_data_prep": [[93, 110], ["numpy.unique", "numpy.array", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].index.tolist", "patient_labels.append", "numpy.array", "len", "label.max.max.max", "scipy.stats.mode"], "methods", ["None"], ["", "", "def", "patient_data_prep", "(", "self", ",", "patient_voting", "=", "'max'", ")", ":", "\n", "\t\t", "patients", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "self", ".", "slide_data", "[", "'case_id'", "]", ")", ")", "# get unique patients", "\n", "patient_labels", "=", "[", "]", "\n", "\n", "for", "p", "in", "patients", ":", "\n", "\t\t\t", "locations", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "p", "]", ".", "index", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "locations", ")", ">", "0", "\n", "label", "=", "self", ".", "slide_data", "[", "'label'", "]", "[", "locations", "]", ".", "values", "\n", "if", "patient_voting", "==", "'max'", ":", "\n", "\t\t\t\t", "label", "=", "label", ".", "max", "(", ")", "# get patient label (MIL convention)", "\n", "", "elif", "patient_voting", "==", "'maj'", ":", "\n", "\t\t\t\t", "label", "=", "stats", ".", "mode", "(", "label", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "", "patient_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "self", ".", "patient_data", "=", "{", "'case_id'", ":", "patients", ",", "'label'", ":", "np", ".", "array", "(", "patient_labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.df_prep": [[111, 124], ["data[].isin", "data.reset_index", "data[].copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "df_prep", "(", "data", ",", "label_dict", ",", "ignore", ",", "label_col", ")", ":", "\n", "\t\t", "if", "label_col", "!=", "'label'", ":", "\n", "\t\t\t", "data", "[", "'label'", "]", "=", "data", "[", "label_col", "]", ".", "copy", "(", ")", "\n", "\n", "", "mask", "=", "data", "[", "'label'", "]", ".", "isin", "(", "ignore", ")", "\n", "data", "=", "data", "[", "~", "mask", "]", "\n", "data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "for", "i", "in", "data", ".", "index", ":", "\n", "\t\t\t", "key", "=", "data", ".", "loc", "[", "i", ",", "'label'", "]", "\n", "data", ".", "at", "[", "i", ",", "'label'", "]", "=", "label_dict", "[", "key", "]", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.filter_df": [[125, 134], ["len", "numpy.full", "filter_dict.items", "len", "df[].isin", "numpy.logical_and"], "methods", ["None"], ["", "def", "filter_df", "(", "self", ",", "df", ",", "filter_dict", "=", "{", "}", ")", ":", "\n", "\t\t", "if", "len", "(", "filter_dict", ")", ">", "0", ":", "\n", "\t\t\t", "filter_mask", "=", "np", ".", "full", "(", "len", "(", "df", ")", ",", "True", ",", "bool", ")", "\n", "# assert 'label' not in filter_dict.keys()", "\n", "for", "key", ",", "val", "in", "filter_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "mask", "=", "df", "[", "key", "]", ".", "isin", "(", "val", ")", "\n", "filter_mask", "=", "np", ".", "logical_and", "(", "filter_mask", ",", "mask", ")", "\n", "", "df", "=", "df", "[", "filter_mask", "]", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__len__": [[135, 141], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.summarize": [[142, 150], ["print", "print", "print", "print", "range", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].value_counts", "print", "print"], "methods", ["None"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "\"label column: {}\"", ".", "format", "(", "self", ".", "label_col", ")", ")", "\n", "print", "(", "\"label dictionary: {}\"", ".", "format", "(", "self", ".", "label_dict", ")", ")", "\n", "print", "(", "\"number of classes: {}\"", ".", "format", "(", "self", ".", "num_classes", ")", ")", "\n", "print", "(", "\"slide-level counts: \"", ",", "'\\n'", ",", "self", ".", "slide_data", "[", "'label'", "]", ".", "value_counts", "(", "sort", "=", "False", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "print", "(", "'Patient-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "patient_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'Slide-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "slide_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.create_splits": [[151, 167], ["utils.utils.generate_split", "settings.update", "settings.update", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.generate_split"], ["", "", "def", "create_splits", "(", "self", ",", "k", "=", "3", ",", "val_num", "=", "(", "25", ",", "25", ")", ",", "test_num", "=", "(", "40", ",", "40", ")", ",", "label_frac", "=", "1.0", ",", "custom_test_ids", "=", "None", ")", ":", "\n", "\t\t", "settings", "=", "{", "\n", "'n_splits'", ":", "k", ",", "\n", "'val_num'", ":", "val_num", ",", "\n", "'test_num'", ":", "test_num", ",", "\n", "'label_frac'", ":", "label_frac", ",", "\n", "'seed'", ":", "self", ".", "seed", ",", "\n", "'custom_test_ids'", ":", "custom_test_ids", "\n", "}", "\n", "\n", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "patient_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "}", ")", "\n", "", "else", ":", "\n", "\t\t\t", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "slide_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "slide_data", ")", "}", ")", "\n", "\n", "", "self", ".", "split_gen", "=", "generate_split", "(", "**", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.set_splits": [[168, 188], ["utils.utils.nth", "next", "range", "len", "range", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].index.tolist", "slide_ids[].extend", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.nth"], ["", "def", "set_splits", "(", "self", ",", "start_from", "=", "None", ")", ":", "\n", "\t\t", "if", "start_from", ":", "\n", "\t\t\t", "ids", "=", "nth", "(", "self", ".", "split_gen", ",", "start_from", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "ids", "=", "next", "(", "self", ".", "split_gen", ")", "\n", "\n", "", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "slide_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", "]", "\n", "\n", "for", "split", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "\t\t\t\t", "for", "idx", "in", "ids", "[", "split", "]", ":", "\n", "\t\t\t\t\t", "case_id", "=", "self", ".", "patient_data", "[", "'case_id'", "]", "[", "idx", "]", "\n", "slide_indices", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "case_id", "]", ".", "index", ".", "tolist", "(", ")", "\n", "slide_ids", "[", "split", "]", ".", "extend", "(", "slide_indices", ")", "\n", "\n", "", "", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "slide_ids", "[", "0", "]", ",", "slide_ids", "[", "1", "]", ",", "slide_ids", "[", "2", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df": [[189, 201], ["Generic_Split.dropna().reset_index", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].isin", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].reset_index", "dataset_generic.Generic_Split", "Generic_Split.dropna", "Generic_Split.tolist"], "methods", ["None"], ["", "", "def", "get_split_from_df", "(", "self", ",", "all_splits", ",", "split_key", "=", "'train'", ")", ":", "\n", "\t\t", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "\t\t\t", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "split", ".", "tolist", "(", ")", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_merged_split_from_df": [[202, 217], ["Generic_Split.dropna().reset_index().tolist", "merged_split.extend", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].isin", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].reset_index", "dataset_generic.Generic_Split", "Generic_Split.dropna().reset_index", "Generic_Split.dropna"], "methods", ["None"], ["", "def", "get_merged_split_from_df", "(", "self", ",", "all_splits", ",", "split_keys", "=", "[", "'train'", "]", ")", ":", "\n", "\t\t", "merged_split", "=", "[", "]", "\n", "for", "split_key", "in", "split_keys", ":", "\n", "\t\t\t", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ".", "tolist", "(", ")", "\n", "merged_split", ".", "extend", "(", "split", ")", "\n", "\n", "", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "\t\t\t", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "merged_split", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.return_splits": [[219, 253], ["pandas.read_csv", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df"], ["", "def", "return_splits", "(", "self", ",", "from_id", "=", "True", ",", "csv_path", "=", "None", ")", ":", "\n", "\n", "\n", "\t\t", "if", "from_id", ":", "\n", "\t\t\t", "if", "len", "(", "self", ".", "train_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "train_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "train_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "train_split", "=", "Generic_Split", "(", "train_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "train_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "val_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "val_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "val_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "val_split", "=", "Generic_Split", "(", "val_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "val_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "test_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "test_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "test_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "test_split", "=", "Generic_Split", "(", "test_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_split", "=", "None", "\n", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "assert", "csv_path", "\n", "all_splits", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "dtype", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "dtype", ")", "# Without \"dtype=self.slide_data['slide_id'].dtype\", read_csv() will convert all-number columns to a numerical type. Even if we convert numerical columns back to objects later, we may lose zero-padding in the process; the columns must be correctly read in from the get-go. When we compare the individual train/val/test columns to self.slide_data['slide_id'] in the get_split_from_df() method, we cannot compare objects (strings) to numbers or even to incorrectly zero-padded objects/strings. An example of this breaking is shown in https://github.com/andrew-weisman/clam_analysis/tree/main/datatype_comparison_bug-2021-12-01.", "\n", "train_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'train'", ")", "\n", "val_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'val'", ")", "\n", "test_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'test'", ")", "\n", "\n", "", "return", "train_split", ",", "val_split", ",", "test_split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_list": [[254, 256], ["None"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "ids", ")", ":", "\n", "\t\t", "return", "self", ".", "slide_data", "[", "'slide_id'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel": [[257, 259], ["None"], "methods", ["None"], ["", "def", "getlabel", "(", "self", ",", "ids", ")", ":", "\n", "\t\t", "return", "self", ".", "slide_data", "[", "'label'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__getitem__": [[260, 262], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.test_split_gen": [[263, 304], ["len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "range", "len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "range", "len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "range", "pandas.DataFrame", "len", "print", "len", "print", "len", "print", "len", "len", "len", "numpy.full", "numpy.intersect1d", "numpy.intersect1d", "numpy.intersect1d", "list", "range", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.keys", "list().index", "len", "len", "list", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.values"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel"], ["", "def", "test_split_gen", "(", "self", ",", "return_descriptor", "=", "False", ")", ":", "\n", "\n", "\t\t", "if", "return_descriptor", ":", "\n", "\t\t\t", "index", "=", "[", "list", "(", "self", ".", "label_dict", ".", "keys", "(", ")", ")", "[", "list", "(", "self", ".", "label_dict", ".", "values", "(", ")", ")", ".", "index", "(", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "np", ".", "full", "(", "(", "len", "(", "index", ")", ",", "len", "(", "columns", ")", ")", ",", "0", ",", "dtype", "=", "np", ".", "int32", ")", ",", "index", "=", "index", ",", "\n", "columns", "=", "columns", ")", "\n", "\n", "", "count", "=", "len", "(", "self", ".", "train_ids", ")", "\n", "print", "(", "'\\nnumber of training samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "train_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'train'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "val_ids", ")", "\n", "print", "(", "'\\nnumber of val samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "val_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'val'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "test_ids", ")", "\n", "print", "(", "'\\nnumber of test samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "test_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'test'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "val_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "val_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.save_split": [[305, 314], ["dataset_generic.Generic_WSI_Classification_Dataset.get_list", "dataset_generic.Generic_WSI_Classification_Dataset.get_list", "dataset_generic.Generic_WSI_Classification_Dataset.get_list", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "pandas.concat.to_csv"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_list"], ["", "", "def", "save_split", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "train_split", "=", "self", ".", "get_list", "(", "self", ".", "train_ids", ")", "\n", "val_split", "=", "self", ".", "get_list", "(", "self", ".", "val_ids", ")", "\n", "test_split", "=", "self", ".", "get_list", "(", "self", ".", "test_ids", ")", "\n", "df_tr", "=", "pd", ".", "DataFrame", "(", "{", "'train'", ":", "train_split", "}", ")", "\n", "df_v", "=", "pd", ".", "DataFrame", "(", "{", "'val'", ":", "val_split", "}", ")", "\n", "df_t", "=", "pd", ".", "DataFrame", "(", "{", "'test'", ":", "test_split", "}", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_tr", ",", "df_v", ",", "df_t", "]", ",", "axis", "=", "1", ")", "\n", "df", ".", "to_csv", "(", "filename", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_MIL_Dataset.__init__": [[317, 324], ["dataset_generic.Generic_WSI_Classification_Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__"], ["\t", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "\t\t", "super", "(", "Generic_MIL_Dataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "use_h5", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_MIL_Dataset.load_from_h5": [[325, 327], ["None"], "methods", ["None"], ["", "def", "load_from_h5", "(", "self", ",", "toggle", ")", ":", "\n", "\t\t", "self", ".", "use_h5", "=", "toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_MIL_Dataset.__getitem__": [[328, 354], ["type", "os.path.join", "torch.from_numpy", "os.path.join", "torch.load", "h5py.File"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "slide_id", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", "[", "idx", "]", "\n", "label", "=", "self", ".", "slide_data", "[", "'label'", "]", "[", "idx", "]", "\n", "if", "type", "(", "self", ".", "data_dir", ")", "==", "dict", ":", "\n", "\t\t\t", "source", "=", "self", ".", "slide_data", "[", "'source'", "]", "[", "idx", "]", "\n", "data_dir", "=", "self", ".", "data_dir", "[", "source", "]", "\n", "", "else", ":", "\n", "\t\t\t", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "", "if", "not", "self", ".", "use_h5", ":", "\n", "\t\t\t", "if", "self", ".", "data_dir", ":", "\n", "\t\t\t\t", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pt_files'", ",", "'{}.pt'", ".", "format", "(", "slide_id", ")", ")", "\n", "features", "=", "torch", ".", "load", "(", "full_path", ")", "\n", "return", "features", ",", "label", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "slide_id", ",", "label", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'h5_files'", ",", "'{}.h5'", ".", "format", "(", "slide_id", ")", ")", "\n", "with", "h5py", ".", "File", "(", "full_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t\t", "features", "=", "hdf5_file", "[", "'features'", "]", "[", ":", "]", "\n", "coords", "=", "hdf5_file", "[", "'coords'", "]", "[", ":", "]", "\n", "\n", "", "features", "=", "torch", ".", "from_numpy", "(", "features", ")", "\n", "return", "features", ",", "label", ",", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_Split.__init__": [[357, 365], ["range", "range", "numpy.where"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "slide_data", ",", "data_dir", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "\t\t", "self", ".", "use_h5", "=", "False", "\n", "self", ".", "slide_data", "=", "slide_data", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.Generic_Split.__len__": [[366, 368], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_generic.save_splits": [[17, 31], ["pd.DataFrame.to_csv", "print", "pandas.concat", "pandas.concat", "pd.DataFrame.values.tolist", "numpy.eye().astype", "numpy.repeat", "pandas.DataFrame", "range", "len", "numpy.eye", "len", "len"], "function", ["None"], ["def", "save_splits", "(", "split_datasets", ",", "column_keys", ",", "filename", ",", "boolean_style", "=", "False", ")", ":", "\n", "\t", "splits", "=", "[", "split_datasets", "[", "i", "]", ".", "slide_data", "[", "'slide_id'", "]", "for", "i", "in", "range", "(", "len", "(", "split_datasets", ")", ")", "]", "\n", "if", "not", "boolean_style", ":", "\n", "\t\t", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "1", ")", "\n", "df", ".", "columns", "=", "column_keys", "\n", "", "else", ":", "\n", "\t\t", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "0", ")", "\n", "index", "=", "df", ".", "values", ".", "tolist", "(", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "len", "(", "split_datasets", ")", ")", ".", "astype", "(", "bool", ")", "\n", "bool_array", "=", "np", ".", "repeat", "(", "one_hot", ",", "[", "len", "(", "dset", ")", "for", "dset", "in", "split_datasets", "]", ",", "axis", "=", "0", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "bool_array", ",", "index", "=", "index", ",", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", ")", "\n", "\n", "", "df", ".", "to_csv", "(", "filename", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.Wsi_Region.__init__": [[49, 111], ["tuple", "enumerate", "numpy.vstack", "print", "tuple", "tuple", "tuple", "tuple", "print", "wsi_dataset.get_contour_check_fn", "wsi_object.process_contour", "wsi_dataset.default_transforms", "numpy.array().astype", "float", "len", "filtered_coords.append", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.get_contour_check_fn", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_contour", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.default_transforms"], ["def", "__init__", "(", "self", ",", "wsi_object", ",", "top_left", "=", "None", ",", "bot_right", "=", "None", ",", "level", "=", "0", ",", "\n", "patch_size", "=", "(", "256", ",", "256", ")", ",", "step_size", "=", "(", "256", ",", "256", ")", ",", "\n", "contour_fn", "=", "'four_pt_hard'", ",", "\n", "t", "=", "None", ",", "custom_downsample", "=", "1", ",", "use_center_shift", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "custom_downsample", "=", "custom_downsample", "\n", "\n", "# downscale factor in reference to level 0", "\n", "self", ".", "ref_downsample", "=", "wsi_object", ".", "level_downsamples", "[", "level", "]", "\n", "# patch size in reference to level 0", "\n", "self", ".", "ref_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "patch_size", ")", "*", "np", ".", "array", "(", "self", ".", "ref_downsample", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "if", "self", ".", "custom_downsample", ">", "1", ":", "\n", "            ", "self", ".", "target_patch_size", "=", "patch_size", "\n", "patch_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "patch_size", ")", "*", "np", ".", "array", "(", "self", ".", "ref_downsample", ")", "*", "custom_downsample", ")", ".", "astype", "(", "int", ")", ")", "\n", "step_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "step_size", ")", "*", "custom_downsample", ")", ".", "astype", "(", "int", ")", ")", "\n", "self", ".", "ref_size", "=", "patch_size", "\n", "", "else", ":", "\n", "            ", "step_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "step_size", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "self", ".", "ref_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "patch_size", ")", "*", "np", ".", "array", "(", "self", ".", "ref_downsample", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "self", ".", "wsi", "=", "wsi_object", ".", "wsi", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "if", "not", "use_center_shift", ":", "\n", "            ", "center_shift", "=", "0.", "\n", "", "else", ":", "\n", "            ", "overlap", "=", "1", "-", "float", "(", "step_size", "[", "0", "]", "/", "patch_size", "[", "0", "]", ")", "\n", "if", "overlap", "<", "0.25", ":", "\n", "                ", "center_shift", "=", "0.375", "\n", "", "elif", "overlap", ">=", "0.25", "and", "overlap", "<", "0.75", ":", "\n", "                ", "center_shift", "=", "0.5", "\n", "", "elif", "overlap", ">=", "0.75", "and", "overlap", "<", "0.95", ":", "\n", "                ", "center_shift", "=", "0.5", "\n", "", "else", ":", "\n", "                ", "center_shift", "=", "0.625", "\n", "#center_shift = 0.375 # 25% overlap", "\n", "#center_shift = 0.625 #50%, 75% overlap", "\n", "#center_shift = 1.0 #95% overlap", "\n", "\n", "", "", "filtered_coords", "=", "[", "]", "\n", "#iterate through tissue contours for valid patch coordinates", "\n", "for", "cont_idx", ",", "contour", "in", "enumerate", "(", "wsi_object", ".", "contours_tissue", ")", ":", "\n", "            ", "print", "(", "'processing {}/{} contours'", ".", "format", "(", "cont_idx", ",", "len", "(", "wsi_object", ".", "contours_tissue", ")", ")", ")", "\n", "cont_check_fn", "=", "get_contour_check_fn", "(", "contour_fn", ",", "contour", ",", "self", ".", "ref_size", "[", "0", "]", ",", "center_shift", ")", "\n", "coord_results", ",", "_", "=", "wsi_object", ".", "process_contour", "(", "contour", ",", "wsi_object", ".", "holes_tissue", "[", "cont_idx", "]", ",", "level", ",", "''", ",", "\n", "patch_size", "=", "patch_size", "[", "0", "]", ",", "step_size", "=", "step_size", "[", "0", "]", ",", "contour_fn", "=", "cont_check_fn", ",", "\n", "use_padding", "=", "True", ",", "top_left", "=", "top_left", ",", "bot_right", "=", "bot_right", ")", "\n", "if", "len", "(", "coord_results", ")", ">", "0", ":", "\n", "                ", "filtered_coords", ".", "append", "(", "coord_results", "[", "'coords'", "]", ")", "\n", "\n", "", "", "coords", "=", "np", ".", "vstack", "(", "filtered_coords", ")", "\n", "\n", "self", ".", "coords", "=", "coords", "\n", "print", "(", "'filtered a total of {} coordinates'", ".", "format", "(", "len", "(", "self", ".", "coords", ")", ")", ")", "\n", "\n", "# apply transformation", "\n", "if", "t", "is", "None", ":", "\n", "            ", "self", ".", "transforms", "=", "default_transforms", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transforms", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.Wsi_Region.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "coords", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.Wsi_Region.__getitem__": [[115, 122], ["wsi_dataset.Wsi_Region.wsi.read_region().convert", "wsi_dataset.Wsi_Region.transforms().unsqueeze", "patch.resize.resize.resize", "wsi_dataset.Wsi_Region.wsi.read_region", "wsi_dataset.Wsi_Region.transforms", "tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "coord", "=", "self", ".", "coords", "[", "idx", "]", "\n", "patch", "=", "self", ".", "wsi", ".", "read_region", "(", "tuple", "(", "coord", ")", ",", "self", ".", "level", ",", "self", ".", "patch_size", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "custom_downsample", ">", "1", ":", "\n", "            ", "patch", "=", "patch", ".", "resize", "(", "self", ".", "target_patch_size", ")", "\n", "", "patch", "=", "self", ".", "transforms", "(", "patch", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "patch", ",", "coord", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.default_transforms": [[12, 17], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "default_transforms", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "t", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "]", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.wsi_dataset.get_contour_check_fn": [[18, 30], ["wsi_core.util_classes.isInContourV3_Hard", "wsi_core.util_classes.isInContourV3_Easy", "wsi_core.util_classes.isInContourV2", "wsi_core.util_classes.isInContourV1"], "function", ["None"], ["", "def", "get_contour_check_fn", "(", "contour_fn", "=", "'four_pt_hard'", ",", "cont", "=", "None", ",", "ref_patch_size", "=", "None", ",", "center_shift", "=", "None", ")", ":", "\n", "    ", "if", "contour_fn", "==", "'four_pt_hard'", ":", "\n", "        ", "cont_check_fn", "=", "isInContourV3_Hard", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", ",", "center_shift", "=", "center_shift", ")", "\n", "", "elif", "contour_fn", "==", "'four_pt_easy'", ":", "\n", "        ", "cont_check_fn", "=", "isInContourV3_Easy", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", ",", "center_shift", "=", "0.5", ")", "\n", "", "elif", "contour_fn", "==", "'center'", ":", "\n", "        ", "cont_check_fn", "=", "isInContourV2", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", ")", "\n", "", "elif", "contour_fn", "==", "'basic'", ":", "\n", "        ", "cont_check_fn", "=", "isInContourV1", "(", "contour", "=", "cont", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "cont_check_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag.__init__": [[39, 69], ["dataset_h5.Whole_Slide_Bag.summary", "dataset_h5.eval_transforms", "h5py.File", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.eval_transforms"], ["\t", "def", "__init__", "(", "self", ",", "\n", "file_path", ",", "\n", "pretrained", "=", "False", ",", "\n", "custom_transforms", "=", "None", ",", "\n", "target_patch_size", "=", "-", "1", ",", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tfile_path (string): Path to the .h5 file containing patched data.\n\t\t\tpretrained (bool): Use ImageNet transforms\n\t\t\tcustom_transforms (callable, optional): Optional transform to be applied on a sample\n\t\t\"\"\"", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "if", "target_patch_size", ">", "0", ":", "\n", "\t\t\t", "self", ".", "target_patch_size", "=", "(", "target_patch_size", ",", "target_patch_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "target_patch_size", "=", "None", "\n", "\n", "", "if", "not", "custom_transforms", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "eval_transforms", "(", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "custom_transforms", "\n", "\n", "", "self", ".", "file_path", "=", "file_path", "\n", "\n", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "dset", "=", "f", "[", "'imgs'", "]", "\n", "self", ".", "length", "=", "len", "(", "dset", ")", "\n", "\n", "", "self", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag.__len__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag.summary": [[73, 83], ["h5py.File", "dset.attrs.items", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "\t\t", "hdf5_file", "=", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "\n", "dset", "=", "hdf5_file", "[", "'imgs'", "]", "\n", "for", "name", ",", "value", "in", "dset", ".", "attrs", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "name", ",", "value", ")", "\n", "\n", "", "print", "(", "'pretrained:'", ",", "self", ".", "pretrained", ")", "\n", "print", "(", "'transformations:'", ",", "self", ".", "roi_transforms", ")", "\n", "if", "self", ".", "target_patch_size", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "'target_size: '", ",", "self", ".", "target_patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag.__getitem__": [[84, 94], ["PIL.Image.fromarray", "dataset_h5.Whole_Slide_Bag.roi_transforms().unsqueeze", "h5py.File", "img.resize.resize.resize", "dataset_h5.Whole_Slide_Bag.roi_transforms"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t", "img", "=", "hdf5_file", "[", "'imgs'", "]", "[", "idx", "]", "\n", "coord", "=", "hdf5_file", "[", "'coords'", "]", "[", "idx", "]", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "target_patch_size", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "img", ".", "resize", "(", "self", ".", "target_patch_size", ")", "\n", "", "img", "=", "self", ".", "roi_transforms", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.__init__": [[96, 133], ["dataset_h5.Whole_Slide_Bag_FP.summary", "dataset_h5.eval_transforms", "h5py.File", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.eval_transforms"], ["\t", "def", "__init__", "(", "self", ",", "\n", "file_path", ",", "\n", "wsi", ",", "\n", "pretrained", "=", "False", ",", "\n", "custom_transforms", "=", "None", ",", "\n", "custom_downsample", "=", "1", ",", "\n", "target_patch_size", "=", "-", "1", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tfile_path (string): Path to the .h5 file containing patched data.\n\t\t\tpretrained (bool): Use ImageNet transforms\n\t\t\tcustom_transforms (callable, optional): Optional transform to be applied on a sample\n\t\t\tcustom_downsample (int): Custom defined downscale factor (overruled by target_patch_size)\n\t\t\ttarget_patch_size (int): Custom defined image size before embedding\n\t\t\"\"\"", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "wsi", "=", "wsi", "\n", "if", "not", "custom_transforms", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "eval_transforms", "(", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "custom_transforms", "\n", "\n", "", "self", ".", "file_path", "=", "file_path", "\n", "\n", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "dset", "=", "f", "[", "'coords'", "]", "\n", "self", ".", "patch_level", "=", "f", "[", "'coords'", "]", ".", "attrs", "[", "'patch_level'", "]", "\n", "self", ".", "patch_size", "=", "f", "[", "'coords'", "]", ".", "attrs", "[", "'patch_size'", "]", "\n", "self", ".", "length", "=", "len", "(", "dset", ")", "\n", "if", "target_patch_size", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "target_patch_size", "=", "(", "target_patch_size", ",", ")", "*", "2", "\n", "", "elif", "custom_downsample", ">", "1", ":", "\n", "\t\t\t\t", "self", ".", "target_patch_size", "=", "(", "self", ".", "patch_size", "//", "custom_downsample", ",", ")", "*", "2", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "target_patch_size", "=", "None", "\n", "", "", "self", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.__len__": [[134, 136], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.summary": [[137, 147], ["h5py.File", "dset.attrs.items", "print", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "\t\t", "hdf5_file", "=", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "\n", "dset", "=", "hdf5_file", "[", "'coords'", "]", "\n", "for", "name", ",", "value", "in", "dset", ".", "attrs", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "name", ",", "value", ")", "\n", "\n", "", "print", "(", "'\\nfeature extraction settings'", ")", "\n", "print", "(", "'target patch size: '", ",", "self", ".", "target_patch_size", ")", "\n", "print", "(", "'pretrained: '", ",", "self", ".", "pretrained", ")", "\n", "print", "(", "'transformations: '", ",", "self", ".", "roi_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Whole_Slide_Bag_FP.__getitem__": [[148, 157], ["dataset_h5.Whole_Slide_Bag_FP.wsi.read_region().convert", "dataset_h5.Whole_Slide_Bag_FP.roi_transforms().unsqueeze", "h5py.File", "img.resize.resize.resize", "dataset_h5.Whole_Slide_Bag_FP.wsi.read_region", "dataset_h5.Whole_Slide_Bag_FP.roi_transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t", "coord", "=", "hdf5_file", "[", "'coords'", "]", "[", "idx", "]", "\n", "", "img", "=", "self", ".", "wsi", ".", "read_region", "(", "coord", ",", "self", ".", "patch_level", ",", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "target_patch_size", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "img", ".", "resize", "(", "self", ".", "target_patch_size", ")", "\n", "", "img", "=", "self", ".", "roi_transforms", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Dataset_All_Bags.__init__": [[160, 162], ["pandas.read_csv"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "csv_path", ")", ":", "\n", "\t\t", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Dataset_All_Bags.__len__": [[163, 165], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.Dataset_All_Bags.__getitem__": [[166, 168], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "return", "self", ".", "df", "[", "'slide_id'", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.datasets.dataset_h5.eval_transforms": [[20, 37], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "eval_transforms", "(", "pretrained", "=", "False", ")", ":", "\n", "\t", "if", "pretrained", ":", "\n", "\t\t", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", "\n", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", "\n", "\n", "", "trnsfrms_val", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "trnsfrms_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.vis_utils.heatmap_utils.score2percentile": [[22, 25], ["scipy.stats.percentileofscore"], "function", ["None"], ["def", "score2percentile", "(", "score", ",", "ref", ")", ":", "\n", "    ", "percentile", "=", "percentileofscore", "(", "ref", ",", "score", ")", "\n", "return", "percentile", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.vis_utils.heatmap_utils.drawHeatmap": [[26, 37], ["wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "wsi_core.WholeSlideImage.WholeSlideImage.visHeatmap", "wsi_core.WholeSlideImage.WholeSlideImage", "print", "wsi_object.getOpenSlide.get_best_level_for_downsample"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.visHeatmap"], ["", "def", "drawHeatmap", "(", "scores", ",", "coords", ",", "slide_path", "=", "None", ",", "wsi_object", "=", "None", ",", "vis_level", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "wsi_object", "is", "None", ":", "\n", "        ", "wsi_object", "=", "WholeSlideImage", "(", "slide_path", ")", "\n", "print", "(", "wsi_object", ".", "name", ")", "\n", "\n", "", "wsi", "=", "wsi_object", ".", "getOpenSlide", "(", ")", "\n", "if", "vis_level", "<", "0", ":", "\n", "        ", "vis_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "32", ")", "\n", "\n", "", "heatmap", "=", "wsi_object", ".", "visHeatmap", "(", "scores", "=", "scores", ",", "coords", "=", "coords", ",", "vis_level", "=", "vis_level", ",", "**", "kwargs", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.vis_utils.heatmap_utils.initialize_wsi": [[38, 47], ["wsi_core.WholeSlideImage.WholeSlideImage", "wsi_core.WholeSlideImage.WholeSlideImage.segmentTissue", "wsi_core.WholeSlideImage.WholeSlideImage.saveSegmentation", "wsi_core.WholeSlideImage.WholeSlideImage.wsi.get_best_level_for_downsample"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.segmentTissue", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.saveSegmentation"], ["", "def", "initialize_wsi", "(", "wsi_path", ",", "seg_mask_path", "=", "None", ",", "seg_params", "=", "None", ",", "filter_params", "=", "None", ")", ":", "\n", "    ", "wsi_object", "=", "WholeSlideImage", "(", "wsi_path", ")", "\n", "if", "seg_params", "[", "'seg_level'", "]", "<", "0", ":", "\n", "        ", "best_level", "=", "wsi_object", ".", "wsi", ".", "get_best_level_for_downsample", "(", "32", ")", "\n", "seg_params", "[", "'seg_level'", "]", "=", "best_level", "\n", "\n", "", "wsi_object", ".", "segmentTissue", "(", "**", "seg_params", ",", "filter_params", "=", "filter_params", ")", "\n", "wsi_object", ".", "saveSegmentation", "(", "seg_mask_path", ")", "\n", "return", "wsi_object", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.vis_utils.heatmap_utils.compute_from_patches": [[48, 91], ["datasets.wsi_dataset.Wsi_Region", "get_simple_loader", "print", "len", "print", "enumerate", "len", "len", "roi.to.to", "coords.numpy.numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "feature_extractor", "print", "utils.file_utils.save_hdf5", "model", "A.view().cpu().numpy.view().cpu().numpy", "utils.file_utils.save_hdf5", "math.ceil", "feature_extractor.cpu().numpy", "A.view().cpu().numpy.size", "range", "A.view().cpu().numpy.view().cpu", "len", "heatmap_utils.score2percentile", "feature_extractor.cpu", "A.view().cpu().numpy.view"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.get_simple_loader", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.vis_utils.heatmap_utils.score2percentile"], ["", "def", "compute_from_patches", "(", "wsi_object", ",", "clam_pred", "=", "None", ",", "model", "=", "None", ",", "feature_extractor", "=", "None", ",", "batch_size", "=", "512", ",", "\n", "attn_save_path", "=", "None", ",", "ref_scores", "=", "None", ",", "feat_save_path", "=", "None", ",", "**", "wsi_kwargs", ")", ":", "\n", "    ", "top_left", "=", "wsi_kwargs", "[", "'top_left'", "]", "\n", "bot_right", "=", "wsi_kwargs", "[", "'bot_right'", "]", "\n", "patch_size", "=", "wsi_kwargs", "[", "'patch_size'", "]", "\n", "\n", "roi_dataset", "=", "Wsi_Region", "(", "wsi_object", ",", "**", "wsi_kwargs", ")", "\n", "roi_loader", "=", "get_simple_loader", "(", "roi_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "8", ")", "\n", "print", "(", "'total number of patches to process: '", ",", "len", "(", "roi_dataset", ")", ")", "\n", "num_batches", "=", "len", "(", "roi_loader", ")", "\n", "print", "(", "'number of batches: '", ",", "len", "(", "roi_loader", ")", ")", "\n", "mode", "=", "\"w\"", "\n", "for", "idx", ",", "(", "roi", ",", "coords", ")", "in", "enumerate", "(", "roi_loader", ")", ":", "\n", "        ", "roi", "=", "roi", ".", "to", "(", "device", ")", "\n", "coords", "=", "coords", ".", "numpy", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "features", "=", "feature_extractor", "(", "roi", ")", "\n", "\n", "if", "attn_save_path", "is", "not", "None", ":", "\n", "                ", "A", "=", "model", "(", "features", ",", "attention_only", "=", "True", ")", "\n", "\n", "if", "A", ".", "size", "(", "0", ")", ">", "1", ":", "#CLAM multi-branch attention", "\n", "                    ", "A", "=", "A", "[", "clam_pred", "]", "\n", "\n", "", "A", "=", "A", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "ref_scores", "is", "not", "None", ":", "\n", "                    ", "for", "score_idx", "in", "range", "(", "len", "(", "A", ")", ")", ":", "\n", "                        ", "A", "[", "score_idx", "]", "=", "score2percentile", "(", "A", "[", "score_idx", "]", ",", "ref_scores", ")", "\n", "\n", "", "", "asset_dict", "=", "{", "'attention_scores'", ":", "A", ",", "'coords'", ":", "coords", "}", "\n", "save_path", "=", "save_hdf5", "(", "attn_save_path", ",", "asset_dict", ",", "mode", "=", "mode", ")", "\n", "\n", "", "", "if", "idx", "%", "math", ".", "ceil", "(", "num_batches", "*", "0.05", ")", "==", "0", ":", "\n", "            ", "print", "(", "'procssed {} / {}'", ".", "format", "(", "idx", ",", "num_batches", ")", ")", "\n", "\n", "", "if", "feat_save_path", "is", "not", "None", ":", "\n", "            ", "asset_dict", "=", "{", "'features'", ":", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'coords'", ":", "coords", "}", "\n", "save_hdf5", "(", "feat_save_path", ",", "asset_dict", ",", "mode", "=", "mode", ")", "\n", "\n", "", "mode", "=", "\"a\"", "\n", "", "return", "attn_save_path", ",", "feat_save_path", ",", "wsi_object", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.Attn_Net.__init__": [[17, 29], ["torch.Module.__init__", "model_clam.Attn_Net.module.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_clam.Attn_Net.module.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "module", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "module", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", ")", "\n", "\n", "self", ".", "module", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.Attn_Net.forward": [[30, 32], ["model_clam.Attn_Net.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", ",", "x", "# N x n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.Attn_Net_Gated.__init__": [[42, 58], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model_clam.Attn_Net_Gated.attention_a.append", "model_clam.Attn_Net_Gated.attention_b.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net_Gated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_a", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "attention_b", "=", "[", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "attention_a", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "self", ".", "attention_b", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "attention_a", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_a", ")", "\n", "self", ".", "attention_b", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_b", ")", "\n", "\n", "self", ".", "attention_c", "=", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.Attn_Net_Gated.forward": [[59, 65], ["model_clam.Attn_Net_Gated.attention_a", "model_clam.Attn_Net_Gated.attention_b", "model_clam.Attn_Net_Gated.mul", "model_clam.Attn_Net_Gated.attention_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "a", "=", "self", ".", "attention_a", "(", "x", ")", "\n", "b", "=", "self", ".", "attention_b", "(", "x", ")", "\n", "A", "=", "a", ".", "mul", "(", "b", ")", "\n", "A", "=", "self", ".", "attention_c", "(", "A", ")", "# N x n_classes", "\n", "return", "A", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.__init__": [[78, 101], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Module.__init__", "fc.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fc.append", "model_clam.Attn_Net_Gated", "model_clam.Attn_Net", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "range"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "k_sample", "=", "8", ",", "n_classes", "=", "2", ",", "\n", "instance_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "subtyping", "=", "False", ")", ":", "\n", "        ", "super", "(", "CLAM_SB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_dict", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", ",", "256", "]", ",", "\"big\"", ":", "[", "1024", ",", "512", ",", "384", "]", "}", "\n", "size", "=", "self", ".", "size_dict", "[", "size_arg", "]", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "", "if", "gate", ":", "\n", "            ", "attention_net", "=", "Attn_Net_Gated", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "attention_net", "=", "Attn_Net", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "", "fc", ".", "append", "(", "attention_net", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "self", ".", "classifiers", "=", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "n_classes", ")", "\n", "instance_classifiers", "=", "[", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "2", ")", "for", "i", "in", "range", "(", "n_classes", ")", "]", "\n", "self", ".", "instance_classifiers", "=", "nn", ".", "ModuleList", "(", "instance_classifiers", ")", "\n", "self", ".", "k_sample", "=", "k_sample", "\n", "self", ".", "instance_loss_fn", "=", "instance_loss_fn", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "subtyping", "=", "subtyping", "\n", "\n", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.relocate": [[102, 107], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model_clam.CLAM_SB.attention_net.to", "model_clam.CLAM_SB.classifiers.to", "model_clam.CLAM_SB.instance_classifiers.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "attention_net", "=", "self", ".", "attention_net", ".", "to", "(", "device", ")", "\n", "self", ".", "classifiers", "=", "self", ".", "classifiers", ".", "to", "(", "device", ")", "\n", "self", ".", "instance_classifiers", "=", "self", ".", "instance_classifiers", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.create_positive_targets": [[108, 111], ["torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_positive_targets", "(", "length", ",", "device", ")", ":", "\n", "        ", "return", "torch", ".", "full", "(", "(", "length", ",", ")", ",", "1", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.create_negative_targets": [[111, 114], ["torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_negative_targets", "(", "length", ",", "device", ")", ":", "\n", "        ", "return", "torch", ".", "full", "(", "(", "length", ",", ")", ",", "0", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval": [[116, 133], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "model_clam.CLAM_SB.create_positive_targets", "model_clam.CLAM_SB.create_negative_targets", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier", "[].squeeze", "model_clam.CLAM_SB.instance_loss_fn", "len", "A.view.view.view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.create_positive_targets", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.create_negative_targets"], ["", "def", "inst_eval", "(", "self", ",", "A", ",", "h", ",", "classifier", ")", ":", "\n", "        ", "device", "=", "h", ".", "device", "\n", "if", "len", "(", "A", ".", "shape", ")", "==", "1", ":", "\n", "            ", "A", "=", "A", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "top_p_ids", "=", "torch", ".", "topk", "(", "A", ",", "self", ".", "k_sample", ")", "[", "1", "]", "[", "-", "1", "]", "\n", "top_p", "=", "torch", ".", "index_select", "(", "h", ",", "dim", "=", "0", ",", "index", "=", "top_p_ids", ")", "\n", "top_n_ids", "=", "torch", ".", "topk", "(", "-", "A", ",", "self", ".", "k_sample", ",", "dim", "=", "1", ")", "[", "1", "]", "[", "-", "1", "]", "\n", "top_n", "=", "torch", ".", "index_select", "(", "h", ",", "dim", "=", "0", ",", "index", "=", "top_n_ids", ")", "\n", "p_targets", "=", "self", ".", "create_positive_targets", "(", "self", ".", "k_sample", ",", "device", ")", "\n", "n_targets", "=", "self", ".", "create_negative_targets", "(", "self", ".", "k_sample", ",", "device", ")", "\n", "\n", "all_targets", "=", "torch", ".", "cat", "(", "[", "p_targets", ",", "n_targets", "]", ",", "dim", "=", "0", ")", "\n", "all_instances", "=", "torch", ".", "cat", "(", "[", "top_p", ",", "top_n", "]", ",", "dim", "=", "0", ")", "\n", "logits", "=", "classifier", "(", "all_instances", ")", "\n", "all_preds", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "squeeze", "(", "1", ")", "\n", "instance_loss", "=", "self", ".", "instance_loss_fn", "(", "logits", ",", "all_targets", ")", "\n", "return", "instance_loss", ",", "all_preds", ",", "all_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval_out": [[135, 146], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "model_clam.CLAM_SB.create_negative_targets", "classifier", "[].squeeze", "model_clam.CLAM_SB.instance_loss_fn", "len", "A.view.view.view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.create_negative_targets"], ["", "def", "inst_eval_out", "(", "self", ",", "A", ",", "h", ",", "classifier", ")", ":", "\n", "        ", "device", "=", "h", ".", "device", "\n", "if", "len", "(", "A", ".", "shape", ")", "==", "1", ":", "\n", "            ", "A", "=", "A", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "top_p_ids", "=", "torch", ".", "topk", "(", "A", ",", "self", ".", "k_sample", ")", "[", "1", "]", "[", "-", "1", "]", "\n", "top_p", "=", "torch", ".", "index_select", "(", "h", ",", "dim", "=", "0", ",", "index", "=", "top_p_ids", ")", "\n", "p_targets", "=", "self", ".", "create_negative_targets", "(", "self", ".", "k_sample", ",", "device", ")", "\n", "logits", "=", "classifier", "(", "top_p", ")", "\n", "p_preds", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "squeeze", "(", "1", ")", "\n", "instance_loss", "=", "self", ".", "instance_loss_fn", "(", "logits", ",", "p_targets", ")", "\n", "return", "instance_loss", ",", "p_preds", ",", "p_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.forward": [[147, 192], ["model_clam.CLAM_SB.attention_net", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "model_clam.CLAM_SB.classifiers", "torch.softmax", "torch.softmax", "torch.softmax", "torch.one_hot().squeeze", "torch.one_hot().squeeze", "torch.one_hot().squeeze", "range", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "results_dict.update", "len", "inst_labels[].item", "len", "numpy.array", "numpy.array", "torch.one_hot", "torch.one_hot", "torch.one_hot", "model_clam.CLAM_SB.inst_eval", "all_preds.extend", "all_targets.extend", "preds.cpu().numpy", "targets.cpu().numpy", "model_clam.CLAM_SB.inst_eval_out", "all_preds.extend", "all_targets.extend", "preds.cpu().numpy", "targets.cpu().numpy", "preds.cpu", "targets.cpu", "preds.cpu", "targets.cpu"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval_out"], ["", "def", "forward", "(", "self", ",", "h", ",", "label", "=", "None", ",", "instance_eval", "=", "False", ",", "return_features", "=", "False", ",", "attention_only", "=", "False", ")", ":", "\n", "        ", "device", "=", "h", ".", "device", "\n", "A", ",", "h", "=", "self", ".", "attention_net", "(", "h", ")", "# NxK        ", "\n", "A", "=", "torch", ".", "transpose", "(", "A", ",", "1", ",", "0", ")", "# KxN", "\n", "if", "attention_only", ":", "\n", "            ", "return", "A", "\n", "", "A_raw", "=", "A", "\n", "A", "=", "F", ".", "softmax", "(", "A", ",", "dim", "=", "1", ")", "# softmax over N", "\n", "\n", "if", "instance_eval", ":", "\n", "            ", "total_inst_loss", "=", "0.0", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "inst_labels", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", "=", "self", ".", "n_classes", ")", ".", "squeeze", "(", ")", "#binarize label", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "instance_classifiers", ")", ")", ":", "\n", "                ", "inst_label", "=", "inst_labels", "[", "i", "]", ".", "item", "(", ")", "\n", "classifier", "=", "self", ".", "instance_classifiers", "[", "i", "]", "\n", "if", "inst_label", "==", "1", ":", "#in-the-class:", "\n", "                    ", "instance_loss", ",", "preds", ",", "targets", "=", "self", ".", "inst_eval", "(", "A", ",", "h", ",", "classifier", ")", "\n", "all_preds", ".", "extend", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "#out-of-the-class", "\n", "                    ", "if", "self", ".", "subtyping", ":", "\n", "                        ", "instance_loss", ",", "preds", ",", "targets", "=", "self", ".", "inst_eval_out", "(", "A", ",", "h", ",", "classifier", ")", "\n", "all_preds", ".", "extend", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "total_inst_loss", "+=", "instance_loss", "\n", "\n", "", "if", "self", ".", "subtyping", ":", "\n", "                ", "total_inst_loss", "/=", "len", "(", "self", ".", "instance_classifiers", ")", "\n", "\n", "", "", "M", "=", "torch", ".", "mm", "(", "A", ",", "h", ")", "\n", "logits", "=", "self", ".", "classifiers", "(", "M", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "Y_prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "instance_eval", ":", "\n", "            ", "results_dict", "=", "{", "'instance_loss'", ":", "total_inst_loss", ",", "'inst_labels'", ":", "np", ".", "array", "(", "all_targets", ")", ",", "\n", "'inst_preds'", ":", "np", ".", "array", "(", "all_preds", ")", "}", "\n", "", "else", ":", "\n", "            ", "results_dict", "=", "{", "}", "\n", "", "if", "return_features", ":", "\n", "            ", "results_dict", ".", "update", "(", "{", "'features'", ":", "M", "}", ")", "\n", "", "return", "logits", ",", "Y_prob", ",", "Y_hat", ",", "A_raw", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_MB.__init__": [[194, 217], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__", "fc.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fc.append", "model_clam.Attn_Net_Gated", "model_clam.Attn_Net", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "range", "range"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "k_sample", "=", "8", ",", "n_classes", "=", "2", ",", "\n", "instance_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "subtyping", "=", "False", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "size_dict", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", ",", "256", "]", ",", "\"big\"", ":", "[", "1024", ",", "512", ",", "384", "]", "}", "\n", "size", "=", "self", ".", "size_dict", "[", "size_arg", "]", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "", "if", "gate", ":", "\n", "            ", "attention_net", "=", "Attn_Net_Gated", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "n_classes", ")", "\n", "", "else", ":", "\n", "            ", "attention_net", "=", "Attn_Net", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "n_classes", ")", "\n", "", "fc", ".", "append", "(", "attention_net", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "bag_classifiers", "=", "[", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "1", ")", "for", "i", "in", "range", "(", "n_classes", ")", "]", "#use an indepdent linear layer to predict each class", "\n", "self", ".", "classifiers", "=", "nn", ".", "ModuleList", "(", "bag_classifiers", ")", "\n", "instance_classifiers", "=", "[", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "2", ")", "for", "i", "in", "range", "(", "n_classes", ")", "]", "\n", "self", ".", "instance_classifiers", "=", "nn", ".", "ModuleList", "(", "instance_classifiers", ")", "\n", "self", ".", "k_sample", "=", "k_sample", "\n", "self", ".", "instance_loss_fn", "=", "instance_loss_fn", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "subtyping", "=", "subtyping", "\n", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_MB.forward": [[218, 265], ["model_clam.CLAM_MB.attention_net", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.one_hot().squeeze", "torch.one_hot().squeeze", "torch.one_hot().squeeze", "range", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "results_dict.update", "len", "inst_labels[].item", "len", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "numpy.array", "numpy.array", "torch.one_hot", "torch.one_hot", "torch.one_hot", "model_clam.CLAM_MB.inst_eval", "all_preds.extend", "all_targets.extend", "preds.cpu().numpy", "targets.cpu().numpy", "model_clam.CLAM_MB.inst_eval_out", "all_preds.extend", "all_targets.extend", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "preds.cpu().numpy", "targets.cpu().numpy", "preds.cpu", "targets.cpu", "preds.cpu", "targets.cpu"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_clam.CLAM_SB.inst_eval_out"], ["", "def", "forward", "(", "self", ",", "h", ",", "label", "=", "None", ",", "instance_eval", "=", "False", ",", "return_features", "=", "False", ",", "attention_only", "=", "False", ")", ":", "\n", "        ", "device", "=", "h", ".", "device", "\n", "A", ",", "h", "=", "self", ".", "attention_net", "(", "h", ")", "# NxK        ", "\n", "A", "=", "torch", ".", "transpose", "(", "A", ",", "1", ",", "0", ")", "# KxN", "\n", "if", "attention_only", ":", "\n", "            ", "return", "A", "\n", "", "A_raw", "=", "A", "\n", "A", "=", "F", ".", "softmax", "(", "A", ",", "dim", "=", "1", ")", "# softmax over N", "\n", "\n", "if", "instance_eval", ":", "\n", "            ", "total_inst_loss", "=", "0.0", "\n", "all_preds", "=", "[", "]", "\n", "all_targets", "=", "[", "]", "\n", "inst_labels", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", "=", "self", ".", "n_classes", ")", ".", "squeeze", "(", ")", "#binarize label", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "instance_classifiers", ")", ")", ":", "\n", "                ", "inst_label", "=", "inst_labels", "[", "i", "]", ".", "item", "(", ")", "\n", "classifier", "=", "self", ".", "instance_classifiers", "[", "i", "]", "\n", "if", "inst_label", "==", "1", ":", "#in-the-class:", "\n", "                    ", "instance_loss", ",", "preds", ",", "targets", "=", "self", ".", "inst_eval", "(", "A", "[", "i", "]", ",", "h", ",", "classifier", ")", "\n", "all_preds", ".", "extend", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "#out-of-the-class", "\n", "                    ", "if", "self", ".", "subtyping", ":", "\n", "                        ", "instance_loss", ",", "preds", ",", "targets", "=", "self", ".", "inst_eval_out", "(", "A", "[", "i", "]", ",", "h", ",", "classifier", ")", "\n", "all_preds", ".", "extend", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_targets", ".", "extend", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "total_inst_loss", "+=", "instance_loss", "\n", "\n", "", "if", "self", ".", "subtyping", ":", "\n", "                ", "total_inst_loss", "/=", "len", "(", "self", ".", "instance_classifiers", ")", "\n", "\n", "", "", "M", "=", "torch", ".", "mm", "(", "A", ",", "h", ")", "\n", "logits", "=", "torch", ".", "empty", "(", "1", ",", "self", ".", "n_classes", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "logits", "[", "0", ",", "c", "]", "=", "self", ".", "classifiers", "[", "c", "]", "(", "M", "[", "c", "]", ")", "\n", "", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "Y_prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "instance_eval", ":", "\n", "            ", "results_dict", "=", "{", "'instance_loss'", ":", "total_inst_loss", ",", "'inst_labels'", ":", "np", ".", "array", "(", "all_targets", ")", ",", "\n", "'inst_preds'", ":", "np", ".", "array", "(", "all_preds", ")", "}", "\n", "", "else", ":", "\n", "            ", "results_dict", "=", "{", "}", "\n", "", "if", "return_features", ":", "\n", "            ", "results_dict", ".", "update", "(", "{", "'features'", ":", "M", "}", ")", "\n", "", "return", "logits", ",", "Y_prob", ",", "Y_hat", ",", "A_raw", ",", "results_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc.__init__": [[8, 21], ["torch.Module.__init__", "fc.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fc.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "n_classes", "=", "2", ",", "top_k", "=", "1", ")", ":", "\n", "        ", "super", "(", "MIL_fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "n_classes", "==", "2", "\n", "self", ".", "size_dict", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", "]", "}", "\n", "size", "=", "self", ".", "size_dict", "[", "size_arg", "]", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "fc", ".", "append", "(", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "n_classes", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "initialize_weights", "(", "self", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc.relocate": [[22, 25], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model_mil.MIL_fc.classifier.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "classifier", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc.forward": [[26, 44], ["torch.softmax", "torch.softmax", "torch.softmax", "[].view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.softmax", "torch.softmax", "torch.softmax", "model_mil.MIL_fc.classifier", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "results_dict.update", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "if", "return_features", ":", "\n", "            ", "h", "=", "self", ".", "classifier", ".", "module", "[", ":", "3", "]", "(", "h", ")", "\n", "logits", "=", "self", ".", "classifier", ".", "module", "[", "3", "]", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "self", ".", "classifier", "(", "h", ")", "# K x 1", "\n", "\n", "", "y_probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "top_instance_idx", "=", "torch", ".", "topk", "(", "y_probs", "[", ":", ",", "1", "]", ",", "self", ".", "top_k", ",", "dim", "=", "0", ")", "[", "1", "]", ".", "view", "(", "1", ",", ")", "\n", "top_instance", "=", "torch", ".", "index_select", "(", "logits", ",", "dim", "=", "0", ",", "index", "=", "top_instance_idx", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "top_instance", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "Y_prob", "=", "F", ".", "softmax", "(", "top_instance", ",", "dim", "=", "1", ")", "\n", "results_dict", "=", "{", "}", "\n", "\n", "if", "return_features", ":", "\n", "            ", "top_features", "=", "torch", ".", "index_select", "(", "h", ",", "dim", "=", "0", ",", "index", "=", "top_instance_idx", ")", "\n", "results_dict", ".", "update", "(", "{", "'features'", ":", "top_features", "}", ")", "\n", "", "return", "top_instance", ",", "Y_prob", ",", "Y_hat", ",", "y_probs", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc_mc.__init__": [[47, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fc.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "n_classes", "=", "2", ",", "top_k", "=", "1", ")", ":", "\n", "        ", "super", "(", "MIL_fc_mc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "n_classes", ">", "2", "\n", "self", ".", "size_dict", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", "]", "}", "\n", "size", "=", "self", ".", "size_dict", "[", "size_arg", "]", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "\n", "self", ".", "classifiers", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "1", ")", "for", "i", "in", "range", "(", "n_classes", ")", "]", ")", "\n", "initialize_weights", "(", "self", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "assert", "self", ".", "top_k", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc_mc.relocate": [[63, 67], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model_mil.MIL_fc_mc.fc.to", "model_mil.MIL_fc_mc.classifiers.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "fc", "=", "self", ".", "fc", ".", "to", "(", "device", ")", "\n", "self", ".", "classifiers", "=", "self", ".", "classifiers", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.model_mil.MIL_fc_mc.forward": [[68, 94], ["model_mil.MIL_fc_mc.fc", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.view().argmax", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "isinstance", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "results_dict.update", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.softmax.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "model_mil.MIL_fc_mc.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "device", "=", "h", ".", "device", "\n", "\n", "h", "=", "self", ".", "fc", "(", "h", ")", "\n", "logits", "=", "torch", ".", "empty", "(", "h", ".", "size", "(", "0", ")", ",", "self", ".", "n_classes", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "classifiers", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "logits", "[", ":", ",", "c", "]", "=", "self", ".", "classifiers", ".", "module", "[", "c", "]", "(", "h", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "logits", "[", ":", ",", "c", "]", "=", "self", ".", "classifiers", "[", "c", "]", "(", "h", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "", "y_probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "m", "=", "y_probs", ".", "view", "(", "1", ",", "-", "1", ")", ".", "argmax", "(", "1", ")", "\n", "top_indices", "=", "torch", ".", "cat", "(", "(", "(", "m", "//", "self", ".", "n_classes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "(", "m", "%", "self", ".", "n_classes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "top_instance", "=", "logits", "[", "top_indices", "[", "0", "]", "]", "\n", "\n", "Y_hat", "=", "top_indices", "[", "1", "]", "\n", "Y_prob", "=", "y_probs", "[", "top_indices", "[", "0", "]", "]", "\n", "\n", "results_dict", "=", "{", "}", "\n", "\n", "if", "return_features", ":", "\n", "            ", "top_features", "=", "torch", ".", "index_select", "(", "h", ",", "dim", "=", "0", ",", "index", "=", "top_indices", "[", "0", "]", ")", "\n", "results_dict", ".", "update", "(", "{", "'features'", ":", "top_features", "}", ")", "\n", "", "return", "top_instance", ",", "Y_prob", ",", "Y_hat", ",", "y_probs", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.Bottleneck_Baseline.__init__": [[21, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck_Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.Bottleneck_Baseline.forward": [[34, 55], ["resnet_custom.Bottleneck_Baseline.conv1", "resnet_custom.Bottleneck_Baseline.bn1", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.conv2", "resnet_custom.Bottleneck_Baseline.bn2", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.conv3", "resnet_custom.Bottleneck_Baseline.bn3", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline.__init__": [[58, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_custom.ResNet_Baseline._make_layer", "resnet_custom.ResNet_Baseline._make_layer", "resnet_custom.ResNet_Baseline._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_custom.ResNet_Baseline.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline._make_layer", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline._make_layer", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline._make_layer": [[78, 94], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.ResNet_Baseline.forward": [[95, 109], ["resnet_custom.ResNet_Baseline.conv1", "resnet_custom.ResNet_Baseline.bn1", "resnet_custom.ResNet_Baseline.relu", "resnet_custom.ResNet_Baseline.maxpool", "resnet_custom.ResNet_Baseline.layer1", "resnet_custom.ResNet_Baseline.layer2", "resnet_custom.ResNet_Baseline.layer3", "resnet_custom.ResNet_Baseline.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.resnet50_baseline": [[110, 119], ["resnet_custom.ResNet_Baseline", "resnet_custom.load_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.load_pretrained_weights"], ["", "", "def", "resnet50_baseline", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a Modified ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_Baseline", "(", "Bottleneck_Baseline", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", "=", "load_pretrained_weights", "(", "model", ",", "'resnet50'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.models.resnet_custom.load_pretrained_weights": [[120, 124], ["torch.load_url", "model.load_state_dict"], "function", ["None"], ["", "def", "load_pretrained_weights", "(", "model", ",", "name", ")", ":", "\n", "    ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "name", "]", ")", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.__init__": [[7, 22], ["int", "int", "numpy.array", "util_classes.Mosaic_Canvas.reset_coord", "numpy.ceil", "numpy.ceil", "PIL.Image.new", "PIL.Image.new", "int"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.reset_coord"], ["\t", "def", "__init__", "(", "self", ",", "patch_size", "=", "256", ",", "n", "=", "100", ",", "downscale", "=", "4", ",", "n_per_row", "=", "10", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ")", ":", "\n", "\t\t", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "downscaled_patch_size", "=", "int", "(", "np", ".", "ceil", "(", "patch_size", "/", "downscale", ")", ")", "\n", "self", ".", "n_rows", "=", "int", "(", "np", ".", "ceil", "(", "n", "/", "n_per_row", ")", ")", "\n", "self", ".", "n_cols", "=", "n_per_row", "\n", "w", "=", "self", ".", "n_cols", "*", "self", ".", "downscaled_patch_size", "\n", "h", "=", "self", ".", "n_rows", "*", "self", ".", "downscaled_patch_size", "\n", "if", "alpha", "<", "0", ":", "\n", "\t\t\t", "canvas", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGB\"", ",", "color", "=", "bg_color", ")", "\n", "", "else", ":", "\n", "\t\t\t", "canvas", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGBA\"", ",", "color", "=", "bg_color", "+", "(", "int", "(", "255", "*", "alpha", ")", ",", ")", ")", "\n", "\n", "", "self", ".", "canvas", "=", "canvas", "\n", "self", ".", "dimensions", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ")", "\n", "self", ".", "reset_coord", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.reset_coord": [[23, 25], ["numpy.array"], "methods", ["None"], ["", "def", "reset_coord", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "coord", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.increment_coord": [[26, 34], ["numpy.all"], "methods", ["None"], ["", "def", "increment_coord", "(", "self", ")", ":", "\n", "#print('current coord: {} x {} / {} x {}'.format(self.coord[0], self.coord[1], self.dimensions[0], self.dimensions[1]))", "\n", "\t\t", "assert", "np", ".", "all", "(", "self", ".", "coord", "<=", "self", ".", "dimensions", ")", "\n", "if", "self", ".", "coord", "[", "0", "]", "+", "self", ".", "downscaled_patch_size", "<=", "self", ".", "dimensions", "[", "0", "]", "-", "self", ".", "downscaled_patch_size", ":", "\n", "\t\t\t", "self", ".", "coord", "[", "0", "]", "+=", "self", ".", "downscaled_patch_size", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "coord", "[", "0", "]", "=", "0", "\n", "self", ".", "coord", "[", "1", "]", "+=", "self", ".", "downscaled_patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save": [[36, 38], ["util_classes.Mosaic_Canvas.canvas.save"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.save"], ["", "", "def", "save", "(", "self", ",", "save_path", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "self", ".", "canvas", ".", "save", "(", "save_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.paste_patch": [[39, 44], ["util_classes.Mosaic_Canvas.canvas.paste", "util_classes.Mosaic_Canvas.increment_coord", "patch.resize", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.increment_coord"], ["", "def", "paste_patch", "(", "self", ",", "patch", ")", ":", "\n", "\t\t", "assert", "patch", ".", "size", "[", "0", "]", "==", "self", ".", "patch_size", "\n", "assert", "patch", ".", "size", "[", "1", "]", "==", "self", ".", "patch_size", "\n", "self", ".", "canvas", ".", "paste", "(", "patch", ".", "resize", "(", "tuple", "(", "[", "self", ".", "downscaled_patch_size", ",", "self", ".", "downscaled_patch_size", "]", ")", ")", ",", "tuple", "(", "self", ".", "coord", ")", ")", "\n", "self", ".", "increment_coord", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.get_painting": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_painting", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Contour_Checking_fn.__call__": [[50, 52], ["None"], "methods", ["None"], ["\t", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV1.__init__": [[54, 56], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "contour", ")", ":", "\n", "\t\t", "self", ".", "cont", "=", "contour", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV1.__call__": [[57, 59], ["cv2.pointPolygonTest", "tuple", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n", "\t\t", "return", "1", "if", "cv2", ".", "pointPolygonTest", "(", "self", ".", "cont", ",", "tuple", "(", "np", ".", "array", "(", "pt", ")", ".", "astype", "(", "float", ")", ")", ",", "False", ")", ">=", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV2.__init__": [[61, 64], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "contour", ",", "patch_size", ")", ":", "\n", "\t\t", "self", ".", "cont", "=", "contour", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV2.__call__": [[65, 68], ["numpy.array().astype", "numpy.array", "cv2.pointPolygonTest", "tuple", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n", "\t\t", "pt", "=", "np", ".", "array", "(", "(", "pt", "[", "0", "]", "+", "self", ".", "patch_size", "//", "2", ",", "pt", "[", "1", "]", "+", "self", ".", "patch_size", "//", "2", ")", ")", ".", "astype", "(", "float", ")", "\n", "return", "1", "if", "cv2", ".", "pointPolygonTest", "(", "self", ".", "cont", ",", "tuple", "(", "np", ".", "array", "(", "pt", ")", ".", "astype", "(", "float", ")", ")", ",", "False", ")", ">=", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV3_Easy.__init__": [[71, 75], ["int"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "contour", ",", "patch_size", ",", "center_shift", "=", "0.5", ")", ":", "\n", "\t\t", "self", ".", "cont", "=", "contour", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "shift", "=", "int", "(", "patch_size", "//", "2", "*", "center_shift", ")", "\n", "", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV3_Easy.__call__": [[75, 90], ["cv2.pointPolygonTest", "tuple", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n", "\t\t", "center", "=", "(", "pt", "[", "0", "]", "+", "self", ".", "patch_size", "//", "2", ",", "pt", "[", "1", "]", "+", "self", ".", "patch_size", "//", "2", ")", "\n", "if", "self", ".", "shift", ">", "0", ":", "\n", "\t\t\t", "all_points", "=", "[", "(", "center", "[", "0", "]", "-", "self", ".", "shift", ",", "center", "[", "1", "]", "-", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "+", "self", ".", "shift", ",", "center", "[", "1", "]", "+", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "+", "self", ".", "shift", ",", "center", "[", "1", "]", "-", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "-", "self", ".", "shift", ",", "center", "[", "1", "]", "+", "self", ".", "shift", ")", "\n", "]", "\n", "", "else", ":", "\n", "\t\t\t", "all_points", "=", "[", "center", "]", "\n", "\n", "", "for", "points", "in", "all_points", ":", "\n", "\t\t\t", "if", "cv2", ".", "pointPolygonTest", "(", "self", ".", "cont", ",", "tuple", "(", "np", ".", "array", "(", "points", ")", ".", "astype", "(", "float", ")", ")", ",", "False", ")", ">=", "0", ":", "\n", "\t\t\t\t", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV3_Hard.__init__": [[93, 97], ["int"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "contour", ",", "patch_size", ",", "center_shift", "=", "0.5", ")", ":", "\n", "\t\t", "self", ".", "cont", "=", "contour", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "shift", "=", "int", "(", "patch_size", "//", "2", "*", "center_shift", ")", "\n", "", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.isInContourV3_Hard.__call__": [[97, 112], ["cv2.pointPolygonTest", "tuple", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pt", ")", ":", "\n", "\t\t", "center", "=", "(", "pt", "[", "0", "]", "+", "self", ".", "patch_size", "//", "2", ",", "pt", "[", "1", "]", "+", "self", ".", "patch_size", "//", "2", ")", "\n", "if", "self", ".", "shift", ">", "0", ":", "\n", "\t\t\t", "all_points", "=", "[", "(", "center", "[", "0", "]", "-", "self", ".", "shift", ",", "center", "[", "1", "]", "-", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "+", "self", ".", "shift", ",", "center", "[", "1", "]", "+", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "+", "self", ".", "shift", ",", "center", "[", "1", "]", "-", "self", ".", "shift", ")", ",", "\n", "(", "center", "[", "0", "]", "-", "self", ".", "shift", ",", "center", "[", "1", "]", "+", "self", ".", "shift", ")", "\n", "]", "\n", "", "else", ":", "\n", "\t\t\t", "all_points", "=", "[", "center", "]", "\n", "\n", "", "for", "points", "in", "all_points", ":", "\n", "\t\t\t", "if", "cv2", ".", "pointPolygonTest", "(", "self", ".", "cont", ",", "tuple", "(", "np", ".", "array", "(", "points", ")", ".", "astype", "(", "float", ")", ")", ",", "False", ")", "<", "0", ":", "\n", "\t\t\t\t", "return", "0", "\n", "", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isWhitePatch": [[10, 13], ["cv2.cvtColor", "numpy.mean"], "function", ["None"], ["def", "isWhitePatch", "(", "patch", ",", "satThresh", "=", "5", ")", ":", "\n", "    ", "patch_hsv", "=", "cv2", ".", "cvtColor", "(", "patch", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "return", "True", "if", "np", ".", "mean", "(", "patch_hsv", "[", ":", ",", ":", ",", "1", "]", ")", "<", "satThresh", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isBlackPatch": [[14, 16], ["numpy.all", "numpy.mean"], "function", ["None"], ["", "def", "isBlackPatch", "(", "patch", ",", "rgbThresh", "=", "40", ")", ":", "\n", "    ", "return", "True", "if", "np", ".", "all", "(", "np", ".", "mean", "(", "patch", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "<", "rgbThresh", ")", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isBlackPatch_S": [[17, 20], ["numpy.all().sum", "numpy.all", "numpy.array"], "function", ["None"], ["", "def", "isBlackPatch_S", "(", "patch", ",", "rgbThresh", "=", "20", ",", "percentage", "=", "0.05", ")", ":", "\n", "    ", "num_pixels", "=", "patch", ".", "size", "[", "0", "]", "*", "patch", ".", "size", "[", "1", "]", "\n", "return", "True", "if", "np", ".", "all", "(", "np", ".", "array", "(", "patch", ")", "<", "rgbThresh", ",", "axis", "=", "(", "2", ")", ")", ".", "sum", "(", ")", ">", "num_pixels", "*", "percentage", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isWhitePatch_S": [[21, 24], ["numpy.all().sum", "numpy.all", "numpy.array"], "function", ["None"], ["", "def", "isWhitePatch_S", "(", "patch", ",", "rgbThresh", "=", "220", ",", "percentage", "=", "0.2", ")", ":", "\n", "    ", "num_pixels", "=", "patch", ".", "size", "[", "0", "]", "*", "patch", ".", "size", "[", "1", "]", "\n", "return", "True", "if", "np", ".", "all", "(", "np", ".", "array", "(", "patch", ")", ">", "rgbThresh", ",", "axis", "=", "(", "2", ")", ")", ".", "sum", "(", ")", ">", "num_pixels", "*", "percentage", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.coord_generator": [[25, 34], ["range", "range", "args_dict.copy", "args_dict.copy.update"], "function", ["None"], ["", "def", "coord_generator", "(", "x_start", ",", "x_end", ",", "x_step", ",", "y_start", ",", "y_end", ",", "y_step", ",", "args_dict", "=", "None", ")", ":", "\n", "    ", "for", "x", "in", "range", "(", "x_start", ",", "x_end", ",", "x_step", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "y_start", ",", "y_end", ",", "y_step", ")", ":", "\n", "            ", "if", "args_dict", "is", "not", "None", ":", "\n", "                ", "process_dict", "=", "args_dict", ".", "copy", "(", ")", "\n", "process_dict", ".", "update", "(", "{", "'pt'", ":", "(", "x", ",", "y", ")", "}", ")", "\n", "yield", "process_dict", "\n", "", "else", ":", "\n", "                ", "yield", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.savePatchIter_bag_hdf5": [[35, 53], ["tuple", "h5py.File", "dset.resize", "h5py.File.close", "patch.values", "numpy.array", "os.path.join", "coord_dset.resize", "len", "len"], "function", ["None"], ["", "", "", "", "def", "savePatchIter_bag_hdf5", "(", "patch", ")", ":", "\n", "    ", "x", ",", "y", ",", "cont_idx", ",", "patch_level", ",", "downsample", ",", "downsampled_level_dim", ",", "level_dim", ",", "img_patch", ",", "name", ",", "save_path", "=", "tuple", "(", "patch", ".", "values", "(", ")", ")", "\n", "img_patch", "=", "np", ".", "array", "(", "img_patch", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "img_shape", "=", "img_patch", ".", "shape", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "name", ")", "+", "'.h5'", "\n", "file", "=", "h5py", ".", "File", "(", "file_path", ",", "\"a\"", ")", "\n", "\n", "dset", "=", "file", "[", "'imgs'", "]", "\n", "dset", ".", "resize", "(", "len", "(", "dset", ")", "+", "img_shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "dset", "[", "-", "img_shape", "[", "0", "]", ":", "]", "=", "img_patch", "\n", "\n", "if", "'coords'", "in", "file", ":", "\n", "        ", "coord_dset", "=", "file", "[", "'coords'", "]", "\n", "coord_dset", ".", "resize", "(", "len", "(", "coord_dset", ")", "+", "img_shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "coord_dset", "[", "-", "img_shape", "[", "0", "]", ":", "]", "=", "(", "x", ",", "y", ")", "\n", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5": [[54, 74], ["h5py.File", "asset_dict.items", "h5py.File.close", "h5py.File.create_dataset", "file.create_dataset.resize", "attr_dict.keys", "attr_dict[].items", "len"], "function", ["None"], ["", "def", "save_hdf5", "(", "output_path", ",", "asset_dict", ",", "attr_dict", "=", "None", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "output_path", ",", "mode", ")", "\n", "for", "key", ",", "val", "in", "asset_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_shape", "=", "val", ".", "shape", "\n", "if", "key", "not", "in", "file", ":", "\n", "            ", "data_type", "=", "val", ".", "dtype", "\n", "chunk_shape", "=", "(", "1", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "maxshape", "=", "(", "None", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "dset", "=", "file", ".", "create_dataset", "(", "key", ",", "shape", "=", "data_shape", ",", "maxshape", "=", "maxshape", ",", "chunks", "=", "chunk_shape", ",", "dtype", "=", "data_type", ")", "\n", "dset", "[", ":", "]", "=", "val", "\n", "if", "attr_dict", "is", "not", "None", ":", "\n", "                ", "if", "key", "in", "attr_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "for", "attr_key", ",", "attr_val", "in", "attr_dict", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                        ", "dset", ".", "attrs", "[", "attr_key", "]", "=", "attr_val", "\n", "", "", "", "", "else", ":", "\n", "            ", "dset", "=", "file", "[", "key", "]", "\n", "dset", ".", "resize", "(", "len", "(", "dset", ")", "+", "data_shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "dset", "[", "-", "data_shape", "[", "0", "]", ":", "]", "=", "val", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.initialize_hdf5_bag": [[75, 101], ["tuple", "h5py.File", "h5py.File.create_dataset", "h5py.File.close", "first_patch.values", "os.path.join", "numpy.array", "h5py.File.create_dataset"], "function", ["None"], ["", "def", "initialize_hdf5_bag", "(", "first_patch", ",", "save_coord", "=", "False", ")", ":", "\n", "    ", "x", ",", "y", ",", "cont_idx", ",", "patch_level", ",", "downsample", ",", "downsampled_level_dim", ",", "level_dim", ",", "img_patch", ",", "name", ",", "save_path", "=", "tuple", "(", "first_patch", ".", "values", "(", ")", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "name", ")", "+", "'.h5'", "\n", "file", "=", "h5py", ".", "File", "(", "file_path", ",", "\"w\"", ")", "\n", "img_patch", "=", "np", ".", "array", "(", "img_patch", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "dtype", "=", "img_patch", ".", "dtype", "\n", "\n", "# Initialize a resizable dataset to hold the output", "\n", "img_shape", "=", "img_patch", ".", "shape", "\n", "maxshape", "=", "(", "None", ",", ")", "+", "img_shape", "[", "1", ":", "]", "#maximum dimensions up to which dataset maybe resized (None means unlimited)", "\n", "dset", "=", "file", ".", "create_dataset", "(", "'imgs'", ",", "\n", "shape", "=", "img_shape", ",", "maxshape", "=", "maxshape", ",", "chunks", "=", "img_shape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "dset", "[", ":", "]", "=", "img_patch", "\n", "dset", ".", "attrs", "[", "'patch_level'", "]", "=", "patch_level", "\n", "dset", ".", "attrs", "[", "'wsi_name'", "]", "=", "name", "\n", "dset", ".", "attrs", "[", "'downsample'", "]", "=", "downsample", "\n", "dset", ".", "attrs", "[", "'level_dim'", "]", "=", "level_dim", "\n", "dset", ".", "attrs", "[", "'downsampled_level_dim'", "]", "=", "downsampled_level_dim", "\n", "\n", "if", "save_coord", ":", "\n", "        ", "coord_dset", "=", "file", ".", "create_dataset", "(", "'coords'", ",", "shape", "=", "(", "1", ",", "2", ")", ",", "maxshape", "=", "(", "None", ",", "2", ")", ",", "chunks", "=", "(", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "coord_dset", "[", ":", "]", "=", "(", "x", ",", "y", ")", "\n", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.sample_indices": [[102, 116], ["numpy.random.seed", "numpy.logical_and", "numpy.quantile", "numpy.quantile", "numpy.where", "len", "numpy.random.choice", "min", "len"], "function", ["None"], ["", "def", "sample_indices", "(", "scores", ",", "k", ",", "start", "=", "0.48", ",", "end", "=", "0.52", ",", "convert_to_percentile", "=", "False", ",", "seed", "=", "1", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "if", "convert_to_percentile", ":", "\n", "        ", "end_value", "=", "np", ".", "quantile", "(", "scores", ",", "end", ")", "\n", "start_value", "=", "np", ".", "quantile", "(", "scores", ",", "start", ")", "\n", "", "else", ":", "\n", "        ", "end_value", "=", "end", "\n", "start_value", "=", "start", "\n", "", "score_window", "=", "np", ".", "logical_and", "(", "scores", ">=", "start_value", ",", "scores", "<=", "end_value", ")", "\n", "indices", "=", "np", ".", "where", "(", "score_window", ")", "[", "0", "]", "\n", "if", "len", "(", "indices", ")", "<", "1", ":", "\n", "        ", "return", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "indices", ",", "min", "(", "k", ",", "len", "(", "indices", ")", ")", ",", "replace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.top_k": [[117, 123], ["scores.argsort", "scores.argsort"], "function", ["None"], ["", "", "def", "top_k", "(", "scores", ",", "k", ",", "invert", "=", "False", ")", ":", "\n", "    ", "if", "invert", ":", "\n", "        ", "top_k_ids", "=", "scores", ".", "argsort", "(", ")", "[", ":", "k", "]", "\n", "", "else", ":", "\n", "        ", "top_k_ids", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "k", "]", "\n", "", "return", "top_k_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.to_percentiles": [[124, 128], ["rankdata", "len"], "function", ["None"], ["", "def", "to_percentiles", "(", "scores", ")", ":", "\n", "    ", "from", "scipy", ".", "stats", "import", "rankdata", "\n", "scores", "=", "rankdata", "(", "scores", ",", "'average'", ")", "/", "len", "(", "scores", ")", "*", "100", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.screen_coords": [[129, 136], ["numpy.array", "numpy.array", "numpy.logical_and", "numpy.all", "numpy.all"], "function", ["None"], ["", "def", "screen_coords", "(", "scores", ",", "coords", ",", "top_left", ",", "bot_right", ")", ":", "\n", "    ", "bot_right", "=", "np", ".", "array", "(", "bot_right", ")", "\n", "top_left", "=", "np", ".", "array", "(", "top_left", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "np", ".", "all", "(", "coords", ">=", "top_left", ",", "axis", "=", "1", ")", ",", "np", ".", "all", "(", "coords", "<=", "bot_right", ",", "axis", "=", "1", ")", ")", "\n", "scores", "=", "scores", "[", "mask", "]", "\n", "coords", "=", "coords", "[", "mask", "]", "\n", "return", "scores", ",", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.sample_rois": [[137, 159], ["wsi_utils.to_percentiles", "len", "scores.flatten.flatten", "wsi_utils.screen_coords", "wsi_utils.sample_indices", "wsi_utils.top_k", "wsi_utils.top_k"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.to_percentiles", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.screen_coords", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.sample_indices", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.top_k", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.top_k"], ["", "def", "sample_rois", "(", "scores", ",", "coords", ",", "k", "=", "5", ",", "mode", "=", "'range_sample'", ",", "seed", "=", "1", ",", "score_start", "=", "0.45", ",", "score_end", "=", "0.55", ",", "top_left", "=", "None", ",", "bot_right", "=", "None", ")", ":", "\n", "\n", "    ", "if", "len", "(", "scores", ".", "shape", ")", "==", "2", ":", "\n", "        ", "scores", "=", "scores", ".", "flatten", "(", ")", "\n", "\n", "", "scores", "=", "to_percentiles", "(", "scores", ")", "\n", "if", "top_left", "is", "not", "None", "and", "bot_right", "is", "not", "None", ":", "\n", "        ", "scores", ",", "coords", "=", "screen_coords", "(", "scores", ",", "coords", ",", "top_left", ",", "bot_right", ")", "\n", "\n", "", "if", "mode", "==", "'range_sample'", ":", "\n", "        ", "sampled_ids", "=", "sample_indices", "(", "scores", ",", "start", "=", "score_start", ",", "end", "=", "score_end", ",", "k", "=", "k", ",", "convert_to_percentile", "=", "False", ",", "seed", "=", "seed", ")", "\n", "", "elif", "mode", "==", "'topk'", ":", "\n", "        ", "sampled_ids", "=", "top_k", "(", "scores", ",", "k", ",", "invert", "=", "False", ")", "\n", "", "elif", "mode", "==", "'reverse_topk'", ":", "\n", "        ", "sampled_ids", "=", "top_k", "(", "scores", ",", "k", ",", "invert", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "coords", "=", "coords", "[", "sampled_ids", "]", "\n", "scores", "=", "scores", "[", "sampled_ids", "]", "\n", "\n", "asset", "=", "{", "'sampled_coords'", ":", "coords", ",", "'sampled_scores'", ":", "scores", "}", "\n", "return", "asset", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawGrid": [[160, 163], ["cv2.rectangle", "tuple", "tuple", "numpy.maximum", "numpy.array"], "function", ["None"], ["", "def", "DrawGrid", "(", "img", ",", "coord", ",", "shape", ",", "thickness", "=", "2", ",", "color", "=", "(", "0", ",", "0", ",", "0", ",", "255", ")", ")", ":", "\n", "    ", "cv2", ".", "rectangle", "(", "img", ",", "tuple", "(", "np", ".", "maximum", "(", "[", "0", ",", "0", "]", ",", "coord", "-", "thickness", "//", "2", ")", ")", ",", "tuple", "(", "coord", "-", "thickness", "//", "2", "+", "np", ".", "array", "(", "shape", ")", ")", ",", "(", "0", ",", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "thickness", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawMap": [[164, 187], ["len", "range", "PIL.Image.fromarray", "numpy.arange", "math.ceil", "print", "cv2.resize", "len", "wsi_utils.DrawGrid", "print"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawGrid"], ["", "def", "DrawMap", "(", "canvas", ",", "patch_dset", ",", "coords", ",", "patch_size", ",", "indices", "=", "None", ",", "verbose", "=", "1", ",", "draw_grid", "=", "True", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "coords", ")", ")", "\n", "", "total", "=", "len", "(", "indices", ")", "\n", "if", "verbose", ">", "0", ":", "\n", "        ", "ten_percent_chunk", "=", "math", ".", "ceil", "(", "total", "*", "0.1", ")", "\n", "print", "(", "'start stitching {}'", ".", "format", "(", "patch_dset", ".", "attrs", "[", "'wsi_name'", "]", ")", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "total", ")", ":", "\n", "        ", "if", "verbose", ">", "0", ":", "\n", "            ", "if", "idx", "%", "ten_percent_chunk", "==", "0", ":", "\n", "                ", "print", "(", "'progress: {}/{} stitched'", ".", "format", "(", "idx", ",", "total", ")", ")", "\n", "\n", "", "", "patch_id", "=", "indices", "[", "idx", "]", "\n", "patch", "=", "patch_dset", "[", "patch_id", "]", "\n", "patch", "=", "cv2", ".", "resize", "(", "patch", ",", "patch_size", ")", "\n", "coord", "=", "coords", "[", "patch_id", "]", "\n", "canvas_crop_shape", "=", "canvas", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", ",", ":", "3", "]", ".", "shape", "[", ":", "2", "]", "\n", "canvas", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", ",", ":", "3", "]", "=", "patch", "[", ":", "canvas_crop_shape", "[", "0", "]", ",", ":", "canvas_crop_shape", "[", "1", "]", ",", ":", "]", "\n", "if", "draw_grid", ":", "\n", "            ", "DrawGrid", "(", "canvas", ",", "coord", ",", "patch_size", ")", "\n", "\n", "", "", "return", "Image", ".", "fromarray", "(", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawMapFromCoords": [[188, 214], ["len", "tuple", "print", "range", "PIL.Image.fromarray", "numpy.arange", "math.ceil", "numpy.ceil().astype", "numpy.array", "numpy.ceil().astype", "len", "wsi_object.wsi.read_region().convert", "wsi_utils.DrawGrid", "numpy.ceil", "print", "numpy.ceil", "wsi_object.wsi.read_region", "numpy.array", "numpy.array", "tuple"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawGrid"], ["", "def", "DrawMapFromCoords", "(", "canvas", ",", "wsi_object", ",", "coords", ",", "patch_size", ",", "vis_level", ",", "indices", "=", "None", ",", "verbose", "=", "1", ",", "draw_grid", "=", "True", ")", ":", "\n", "    ", "downsamples", "=", "wsi_object", ".", "wsi", ".", "level_downsamples", "[", "vis_level", "]", "\n", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "coords", ")", ")", "\n", "", "total", "=", "len", "(", "indices", ")", "\n", "if", "verbose", ">", "0", ":", "\n", "        ", "ten_percent_chunk", "=", "math", ".", "ceil", "(", "total", "*", "0.1", ")", "\n", "\n", "", "patch_size", "=", "tuple", "(", "np", ".", "ceil", "(", "(", "np", ".", "array", "(", "patch_size", ")", "/", "np", ".", "array", "(", "downsamples", ")", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "print", "(", "'downscaled patch size: {}x{}'", ".", "format", "(", "patch_size", "[", "0", "]", ",", "patch_size", "[", "1", "]", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "total", ")", ":", "\n", "        ", "if", "verbose", ">", "0", ":", "\n", "            ", "if", "idx", "%", "ten_percent_chunk", "==", "0", ":", "\n", "                ", "print", "(", "'progress: {}/{} stitched'", ".", "format", "(", "idx", ",", "total", ")", ")", "\n", "\n", "", "", "patch_id", "=", "indices", "[", "idx", "]", "\n", "coord", "=", "coords", "[", "patch_id", "]", "\n", "patch", "=", "np", ".", "array", "(", "wsi_object", ".", "wsi", ".", "read_region", "(", "tuple", "(", "coord", ")", ",", "vis_level", ",", "patch_size", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "coord", "=", "np", ".", "ceil", "(", "coord", "/", "downsamples", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "canvas_crop_shape", "=", "canvas", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", ",", ":", "3", "]", ".", "shape", "[", ":", "2", "]", "\n", "canvas", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", ",", ":", "3", "]", "=", "patch", "[", ":", "canvas_crop_shape", "[", "0", "]", ",", ":", "canvas_crop_shape", "[", "1", "]", ",", ":", "]", "\n", "if", "draw_grid", ":", "\n", "            ", "DrawGrid", "(", "canvas", ",", "coord", ",", "patch_size", ")", "\n", "\n", "", "", "return", "Image", ".", "fromarray", "(", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.StitchPatches": [[215, 246], ["h5py.File", "print", "print", "print", "print", "numpy.array", "wsi_utils.DrawMap", "h5py.File.close", "dset.attrs.keys", "PIL.Image.DecompressionBombError", "PIL.Image.new", "PIL.Image.new", "len", "int"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawMap"], ["", "def", "StitchPatches", "(", "hdf5_file_path", ",", "downscale", "=", "16", ",", "draw_grid", "=", "False", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ")", ":", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "hdf5_file_path", ",", "'r'", ")", "\n", "dset", "=", "file", "[", "'imgs'", "]", "\n", "coords", "=", "file", "[", "'coords'", "]", "[", ":", "]", "\n", "if", "'downsampled_level_dim'", "in", "dset", ".", "attrs", ".", "keys", "(", ")", ":", "\n", "        ", "w", ",", "h", "=", "dset", ".", "attrs", "[", "'downsampled_level_dim'", "]", "\n", "", "else", ":", "\n", "        ", "w", ",", "h", "=", "dset", ".", "attrs", "[", "'level_dim'", "]", "\n", "", "print", "(", "'original size: {} x {}'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "w", "=", "w", "//", "downscale", "\n", "h", "=", "h", "//", "downscale", "\n", "coords", "=", "(", "coords", "/", "downscale", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "print", "(", "'downscaled size for stiching: {} x {}'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "print", "(", "'number of patches: {}'", ".", "format", "(", "len", "(", "dset", ")", ")", ")", "\n", "img_shape", "=", "dset", "[", "0", "]", ".", "shape", "\n", "print", "(", "'patch shape: {}'", ".", "format", "(", "img_shape", ")", ")", "\n", "downscaled_shape", "=", "(", "img_shape", "[", "1", "]", "//", "downscale", ",", "img_shape", "[", "0", "]", "//", "downscale", ")", "\n", "\n", "if", "w", "*", "h", ">", "Image", ".", "MAX_IMAGE_PIXELS", ":", "\n", "        ", "raise", "Image", ".", "DecompressionBombError", "(", "\"Visualization Downscale %d is too large\"", "%", "downscale", ")", "\n", "\n", "", "if", "alpha", "<", "0", "or", "alpha", "==", "-", "1", ":", "\n", "        ", "heatmap", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGB\"", ",", "color", "=", "bg_color", ")", "\n", "", "else", ":", "\n", "        ", "heatmap", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGBA\"", ",", "color", "=", "bg_color", "+", "(", "int", "(", "255", "*", "alpha", ")", ",", ")", ")", "\n", "\n", "", "heatmap", "=", "np", ".", "array", "(", "heatmap", ")", "\n", "heatmap", "=", "DrawMap", "(", "heatmap", ",", "dset", ",", "coords", ",", "downscaled_shape", ",", "indices", "=", "None", ",", "draw_grid", "=", "draw_grid", ")", "\n", "\n", "file", ".", "close", "(", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.StitchCoords": [[247, 282], ["wsi_object.getOpenSlide", "wsi_object.getOpenSlide.get_best_level_for_downsample", "h5py.File", "print", "print", "print", "print", "print", "tuple", "print", "numpy.array", "wsi_utils.DrawMapFromCoords", "h5py.File.close", "PIL.Image.DecompressionBombError", "PIL.Image.new", "PIL.Image.new", "len", "numpy.array", "int"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.DrawMapFromCoords"], ["", "def", "StitchCoords", "(", "hdf5_file_path", ",", "wsi_object", ",", "downscale", "=", "16", ",", "draw_grid", "=", "False", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ")", ":", "\n", "    ", "wsi", "=", "wsi_object", ".", "getOpenSlide", "(", ")", "\n", "vis_level", "=", "wsi", ".", "get_best_level_for_downsample", "(", "downscale", ")", "\n", "file", "=", "h5py", ".", "File", "(", "hdf5_file_path", ",", "'r'", ")", "\n", "dset", "=", "file", "[", "'coords'", "]", "\n", "coords", "=", "dset", "[", ":", "]", "\n", "w", ",", "h", "=", "wsi", ".", "level_dimensions", "[", "0", "]", "\n", "\n", "print", "(", "'start stitching {}'", ".", "format", "(", "dset", ".", "attrs", "[", "'name'", "]", ")", ")", "\n", "print", "(", "'original size: {} x {}'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "\n", "w", ",", "h", "=", "wsi", ".", "level_dimensions", "[", "vis_level", "]", "\n", "\n", "print", "(", "'downscaled size for stiching: {} x {}'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "print", "(", "'number of patches: {}'", ".", "format", "(", "len", "(", "coords", ")", ")", ")", "\n", "\n", "patch_size", "=", "dset", ".", "attrs", "[", "'patch_size'", "]", "\n", "patch_level", "=", "dset", ".", "attrs", "[", "'patch_level'", "]", "\n", "print", "(", "'patch size: {}x{} patch level: {}'", ".", "format", "(", "patch_size", ",", "patch_size", ",", "patch_level", ")", ")", "\n", "patch_size", "=", "tuple", "(", "(", "np", ".", "array", "(", "(", "patch_size", ",", "patch_size", ")", ")", "*", "wsi", ".", "level_downsamples", "[", "patch_level", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "print", "(", "'ref patch size: {}x{}'", ".", "format", "(", "patch_size", ",", "patch_size", ")", ")", "\n", "\n", "if", "w", "*", "h", ">", "Image", ".", "MAX_IMAGE_PIXELS", ":", "\n", "        ", "raise", "Image", ".", "DecompressionBombError", "(", "\"Visualization Downscale %d is too large\"", "%", "downscale", ")", "\n", "\n", "", "if", "alpha", "<", "0", "or", "alpha", "==", "-", "1", ":", "\n", "        ", "heatmap", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGB\"", ",", "color", "=", "bg_color", ")", "\n", "", "else", ":", "\n", "        ", "heatmap", "=", "Image", ".", "new", "(", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "\"RGBA\"", ",", "color", "=", "bg_color", "+", "(", "int", "(", "255", "*", "alpha", ")", ",", ")", ")", "\n", "\n", "", "heatmap", "=", "np", ".", "array", "(", "heatmap", ")", "\n", "heatmap", "=", "DrawMapFromCoords", "(", "heatmap", ",", "wsi_object", ",", "coords", ",", "patch_size", ",", "vis_level", ",", "indices", "=", "None", ",", "draw_grid", "=", "draw_grid", ")", "\n", "\n", "file", ".", "close", "(", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.SamplePatches": [[283, 332], ["h5py.File", "numpy.random.seed", "numpy.random.choice", "numpy.array", "print", "print", "numpy.arange", "min", "wsi_core.util_classes.Mosaic_Canvas", "wsi_object.wsi.read_region().convert", "wsi_utils.save_hdf5", "len", "len", "len", "len", "patch.resize.resize", "wsi_core.util_classes.Mosaic_Canvas.paste_patch", "len", "wsi_object.wsi.read_region", "tuple", "numpy.array", "numpy.array", "tuple"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.util_classes.Mosaic_Canvas.paste_patch"], ["", "def", "SamplePatches", "(", "coords_file_path", ",", "save_file_path", ",", "wsi_object", ",", "\n", "patch_level", "=", "0", ",", "custom_downsample", "=", "1", ",", "patch_size", "=", "256", ",", "sample_num", "=", "100", ",", "seed", "=", "1", ",", "stitch", "=", "True", ",", "verbose", "=", "1", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "coords_file_path", ",", "'r'", ")", "\n", "dset", "=", "file", "[", "'coords'", "]", "\n", "coords", "=", "dset", "[", ":", "]", "\n", "\n", "h5_patch_size", "=", "dset", ".", "attrs", "[", "'patch_size'", "]", "\n", "h5_patch_level", "=", "dset", ".", "attrs", "[", "'patch_level'", "]", "\n", "\n", "if", "verbose", ">", "0", ":", "\n", "        ", "print", "(", "'in .h5 file: total number of patches: {}'", ".", "format", "(", "len", "(", "coords", ")", ")", ")", "\n", "print", "(", "'in .h5 file: patch size: {}x{} patch level: {}'", ".", "format", "(", "h5_patch_size", ",", "h5_patch_size", ",", "h5_patch_level", ")", ")", "\n", "\n", "", "if", "patch_level", "<", "0", ":", "\n", "        ", "patch_level", "=", "h5_patch_level", "\n", "\n", "", "if", "patch_size", "<", "0", ":", "\n", "        ", "patch_size", "=", "h5_patch_size", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "indices", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "coords", ")", ")", ",", "min", "(", "len", "(", "coords", ")", ",", "sample_num", ")", ",", "replace", "=", "False", ")", "\n", "\n", "target_patch_size", "=", "np", ".", "array", "(", "[", "patch_size", ",", "patch_size", "]", ")", "\n", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "        ", "target_patch_size", "=", "(", "np", ".", "array", "(", "[", "patch_size", ",", "patch_size", "]", ")", "/", "custom_downsample", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "if", "stitch", ":", "\n", "        ", "canvas", "=", "Mosaic_Canvas", "(", "patch_size", "=", "target_patch_size", "[", "0", "]", ",", "n", "=", "sample_num", ",", "downscale", "=", "4", ",", "n_per_row", "=", "10", ",", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "alpha", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "canvas", "=", "None", "\n", "\n", "", "for", "idx", "in", "indices", ":", "\n", "        ", "coord", "=", "coords", "[", "idx", "]", "\n", "patch", "=", "wsi_object", ".", "wsi", ".", "read_region", "(", "coord", ",", "patch_level", ",", "tuple", "(", "[", "patch_size", ",", "patch_size", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "            ", "patch", "=", "patch", ".", "resize", "(", "tuple", "(", "target_patch_size", ")", ")", "\n", "\n", "# if isBlackPatch_S(patch, rgbThresh=20, percentage=0.05) or isWhitePatch_S(patch, rgbThresh=220, percentage=0.25):", "\n", "#     continue", "\n", "\n", "", "if", "stitch", ":", "\n", "            ", "canvas", ".", "paste_patch", "(", "patch", ")", "\n", "\n", "", "asset_dict", "=", "{", "'imgs'", ":", "np", ".", "array", "(", "patch", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "'coords'", ":", "coord", "}", "\n", "save_hdf5", "(", "save_file_path", ",", "asset_dict", ",", "mode", "=", "mode", ")", "\n", "mode", "=", "'a'", "\n", "\n", "", "return", "canvas", ",", "len", "(", "coords", ")", ",", "len", "(", "indices", ")", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.__init__": [[23, 39], ["openslide.open_slide", "WholeSlideImage.WholeSlideImage._assertLevelDownsamples", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage._assertLevelDownsamples"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Args:\n            path (str): fullpath to WSI file\n        \"\"\"", "\n", "\n", "#         self.name = \".\".join(path.split(\"/\")[-1].split('.')[:-1])", "\n", "self", ".", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "\n", "self", ".", "wsi", "=", "openslide", ".", "open_slide", "(", "path", ")", "\n", "self", ".", "level_downsamples", "=", "self", ".", "_assertLevelDownsamples", "(", ")", "\n", "self", ".", "level_dim", "=", "self", ".", "wsi", ".", "level_dimensions", "\n", "\n", "self", ".", "contours_tissue", "=", "None", "\n", "self", ".", "contours_tumor", "=", "None", "\n", "self", ".", "hdf5_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.getOpenSlide": [[40, 42], ["None"], "methods", ["None"], ["", "def", "getOpenSlide", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wsi", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.initXML": [[43, 52], ["xml.dom.minidom.parse", "sorted", "numpy.array", "anno.getElementsByTagName", "WholeSlideImage.WholeSlideImage.initXML._createContour"], "methods", ["None"], ["", "def", "initXML", "(", "self", ",", "xml_path", ")", ":", "\n", "        ", "def", "_createContour", "(", "coord_list", ")", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "[", "[", "int", "(", "float", "(", "coord", ".", "attributes", "[", "'X'", "]", ".", "value", ")", ")", ",", "\n", "int", "(", "float", "(", "coord", ".", "attributes", "[", "'Y'", "]", ".", "value", ")", ")", "]", "]", "for", "coord", "in", "coord_list", "]", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "", "xmldoc", "=", "minidom", ".", "parse", "(", "xml_path", ")", "\n", "annotations", "=", "[", "anno", ".", "getElementsByTagName", "(", "'Coordinate'", ")", "for", "anno", "in", "xmldoc", ".", "getElementsByTagName", "(", "'Annotation'", ")", "]", "\n", "self", ".", "contours_tumor", "=", "[", "_createContour", "(", "coord_list", ")", "for", "coord_list", "in", "annotations", "]", "\n", "self", ".", "contours_tumor", "=", "sorted", "(", "self", ".", "contours_tumor", ",", "key", "=", "cv2", ".", "contourArea", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.initTxt": [[53, 78], ["WholeSlideImage.WholeSlideImage.initTxt._create_contours_from_dict"], "methods", ["None"], ["", "def", "initTxt", "(", "self", ",", "annot_path", ")", ":", "\n", "        ", "def", "_create_contours_from_dict", "(", "annot", ")", ":", "\n", "            ", "all_cnts", "=", "[", "]", "\n", "for", "idx", ",", "annot_group", "in", "enumerate", "(", "annot", ")", ":", "\n", "                ", "contour_group", "=", "annot_group", "[", "'coordinates'", "]", "\n", "if", "annot_group", "[", "'type'", "]", "==", "'Polygon'", ":", "\n", "                    ", "for", "idx", ",", "contour", "in", "enumerate", "(", "contour_group", ")", ":", "\n", "                        ", "contour", "=", "np", ".", "array", "(", "contour", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "all_cnts", ".", "append", "(", "contour", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "for", "idx", ",", "sgmt_group", "in", "enumerate", "(", "contour_group", ")", ":", "\n", "                        ", "contour", "=", "[", "]", "\n", "for", "sgmt", "in", "sgmt_group", ":", "\n", "                            ", "contour", ".", "extend", "(", "sgmt", ")", "\n", "", "contour", "=", "np", ".", "array", "(", "contour", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "all_cnts", ".", "append", "(", "contour", ")", "\n", "\n", "", "", "", "return", "all_cnts", "\n", "\n", "", "with", "open", "(", "annot_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "annot", "=", "f", ".", "read", "(", ")", "\n", "annot", "=", "eval", "(", "annot", ")", "\n", "", "self", ".", "contours_tumor", "=", "_create_contours_from_dict", "(", "annot", ")", "\n", "self", ".", "contours_tumor", "=", "sorted", "(", "self", ".", "contours_tumor", ",", "key", "=", "cv2", ".", "contourArea", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.initSegmentation": [[79, 85], ["utils.file_utils.load_pkl"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.load_pkl"], ["", "def", "initSegmentation", "(", "self", ",", "mask_file", ")", ":", "\n", "# load segmentation results from pickle file", "\n", "        ", "import", "pickle", "\n", "asset_dict", "=", "load_pkl", "(", "mask_file", ")", "\n", "self", ".", "holes_tissue", "=", "asset_dict", "[", "'holes'", "]", "\n", "self", ".", "contours_tissue", "=", "asset_dict", "[", "'tissue'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.saveSegmentation": [[86, 90], ["utils.file_utils.save_pkl"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.utils.file_utils.save_pkl"], ["", "def", "saveSegmentation", "(", "self", ",", "mask_file", ")", ":", "\n", "# save segmentation results using pickle", "\n", "        ", "asset_dict", "=", "{", "'holes'", ":", "self", ".", "holes_tissue", ",", "'tissue'", ":", "self", ".", "contours_tissue", "}", "\n", "save_pkl", "(", "mask_file", ",", "asset_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.segmentTissue": [[91, 183], ["numpy.array", "cv2.cvtColor", "cv2.medianBlur", "int", "filter_params.copy.copy.copy", "cv2.findContours", "WholeSlideImage.WholeSlideImage.scaleContourDim", "WholeSlideImage.WholeSlideImage.scaleHolesDim", "numpy.flatnonzero", "WholeSlideImage.WholeSlideImage.wsi.read_region", "cv2.threshold", "cv2.threshold", "numpy.ones", "cv2.morphologyEx", "numpy.squeeze", "WholeSlideImage.WholeSlideImage.segmentTissue._filter_contours"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleHolesDim"], ["", "def", "segmentTissue", "(", "self", ",", "seg_level", "=", "0", ",", "sthresh", "=", "20", ",", "sthresh_up", "=", "255", ",", "mthresh", "=", "7", ",", "close", "=", "0", ",", "use_otsu", "=", "False", ",", "\n", "filter_params", "=", "{", "'a_t'", ":", "100", "}", ",", "ref_patch_size", "=", "512", ",", "exclude_ids", "=", "[", "]", ",", "keep_ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n            Segment the tissue via HSV -> Median thresholding -> Binary threshold\n        \"\"\"", "\n", "\n", "def", "_filter_contours", "(", "contours", ",", "hierarchy", ",", "filter_params", ")", ":", "\n", "            ", "\"\"\"\n                Filter contours by: area.\n            \"\"\"", "\n", "filtered", "=", "[", "]", "\n", "\n", "# find indices of foreground contours (parent == -1)", "\n", "hierarchy_1", "=", "np", ".", "flatnonzero", "(", "hierarchy", "[", ":", ",", "1", "]", "==", "-", "1", ")", "\n", "all_holes", "=", "[", "]", "\n", "\n", "# loop through foreground contour indices", "\n", "for", "cont_idx", "in", "hierarchy_1", ":", "\n", "# actual contour", "\n", "                ", "cont", "=", "contours", "[", "cont_idx", "]", "\n", "# indices of holes contained in this contour (children of parent contour)", "\n", "holes", "=", "np", ".", "flatnonzero", "(", "hierarchy", "[", ":", ",", "1", "]", "==", "cont_idx", ")", "\n", "# take contour area (includes holes)", "\n", "a", "=", "cv2", ".", "contourArea", "(", "cont", ")", "\n", "# calculate the contour area of each hole", "\n", "hole_areas", "=", "[", "cv2", ".", "contourArea", "(", "contours", "[", "hole_idx", "]", ")", "for", "hole_idx", "in", "holes", "]", "\n", "# actual area of foreground contour region", "\n", "a", "=", "a", "-", "np", ".", "array", "(", "hole_areas", ")", ".", "sum", "(", ")", "\n", "if", "a", "==", "0", ":", "continue", "\n", "if", "tuple", "(", "(", "filter_params", "[", "'a_t'", "]", ",", ")", ")", "<", "tuple", "(", "(", "a", ",", ")", ")", ":", "\n", "                    ", "filtered", ".", "append", "(", "cont_idx", ")", "\n", "all_holes", ".", "append", "(", "holes", ")", "\n", "\n", "\n", "", "", "foreground_contours", "=", "[", "contours", "[", "cont_idx", "]", "for", "cont_idx", "in", "filtered", "]", "\n", "\n", "hole_contours", "=", "[", "]", "\n", "\n", "for", "hole_ids", "in", "all_holes", ":", "\n", "                ", "unfiltered_holes", "=", "[", "contours", "[", "idx", "]", "for", "idx", "in", "hole_ids", "]", "\n", "unfilered_holes", "=", "sorted", "(", "unfiltered_holes", ",", "key", "=", "cv2", ".", "contourArea", ",", "reverse", "=", "True", ")", "\n", "# take max_n_holes largest holes by area", "\n", "unfilered_holes", "=", "unfilered_holes", "[", ":", "filter_params", "[", "'max_n_holes'", "]", "]", "\n", "filtered_holes", "=", "[", "]", "\n", "\n", "# filter these holes", "\n", "for", "hole", "in", "unfilered_holes", ":", "\n", "                    ", "if", "cv2", ".", "contourArea", "(", "hole", ")", ">", "filter_params", "[", "'a_h'", "]", ":", "\n", "                        ", "filtered_holes", ".", "append", "(", "hole", ")", "\n", "\n", "", "", "hole_contours", ".", "append", "(", "filtered_holes", ")", "\n", "\n", "", "return", "foreground_contours", ",", "hole_contours", "\n", "\n", "", "img", "=", "np", ".", "array", "(", "self", ".", "wsi", ".", "read_region", "(", "(", "0", ",", "0", ")", ",", "seg_level", ",", "self", ".", "level_dim", "[", "seg_level", "]", ")", ")", "\n", "img_hsv", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "# Convert to HSV space", "\n", "img_med", "=", "cv2", ".", "medianBlur", "(", "img_hsv", "[", ":", ",", ":", ",", "1", "]", ",", "mthresh", ")", "# Apply median blurring", "\n", "\n", "\n", "# Thresholding", "\n", "if", "use_otsu", ":", "\n", "            ", "_", ",", "img_otsu", "=", "cv2", ".", "threshold", "(", "img_med", ",", "0", ",", "sthresh_up", ",", "cv2", ".", "THRESH_OTSU", "+", "cv2", ".", "THRESH_BINARY", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "img_otsu", "=", "cv2", ".", "threshold", "(", "img_med", ",", "sthresh", ",", "sthresh_up", ",", "cv2", ".", "THRESH_BINARY", ")", "\n", "\n", "# Morphological closing", "\n", "", "if", "close", ">", "0", ":", "\n", "            ", "kernel", "=", "np", ".", "ones", "(", "(", "close", ",", "close", ")", ",", "np", ".", "uint8", ")", "\n", "img_otsu", "=", "cv2", ".", "morphologyEx", "(", "img_otsu", ",", "cv2", ".", "MORPH_CLOSE", ",", "kernel", ")", "\n", "\n", "", "scale", "=", "self", ".", "level_downsamples", "[", "seg_level", "]", "\n", "scaled_ref_patch_area", "=", "int", "(", "ref_patch_size", "**", "2", "/", "(", "scale", "[", "0", "]", "*", "scale", "[", "1", "]", ")", ")", "\n", "filter_params", "=", "filter_params", ".", "copy", "(", ")", "\n", "filter_params", "[", "'a_t'", "]", "=", "filter_params", "[", "'a_t'", "]", "*", "scaled_ref_patch_area", "\n", "filter_params", "[", "'a_h'", "]", "=", "filter_params", "[", "'a_h'", "]", "*", "scaled_ref_patch_area", "\n", "\n", "# Find and filter contours", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "img_otsu", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "# Find contours ", "\n", "hierarchy", "=", "np", ".", "squeeze", "(", "hierarchy", ",", "axis", "=", "(", "0", ",", ")", ")", "[", ":", ",", "2", ":", "]", "\n", "if", "filter_params", ":", "foreground_contours", ",", "hole_contours", "=", "_filter_contours", "(", "contours", ",", "hierarchy", ",", "filter_params", ")", "# Necessary for filtering out artifacts", "\n", "\n", "self", ".", "contours_tissue", "=", "self", ".", "scaleContourDim", "(", "foreground_contours", ",", "scale", ")", "\n", "self", ".", "holes_tissue", "=", "self", ".", "scaleHolesDim", "(", "hole_contours", ",", "scale", ")", "\n", "\n", "#exclude_ids = [0,7,9]", "\n", "if", "len", "(", "keep_ids", ")", ">", "0", ":", "\n", "            ", "contour_ids", "=", "set", "(", "keep_ids", ")", "-", "set", "(", "exclude_ids", ")", "\n", "", "else", ":", "\n", "            ", "contour_ids", "=", "set", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "contours_tissue", ")", ")", ")", "-", "set", "(", "exclude_ids", ")", "\n", "\n", "", "self", ".", "contours_tissue", "=", "[", "self", ".", "contours_tissue", "[", "i", "]", "for", "i", "in", "contour_ids", "]", "\n", "self", ".", "holes_tissue", "=", "[", "self", ".", "holes_tissue", "[", "i", "]", "for", "i", "in", "contour_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.visWSI": [[184, 240], ["numpy.array", "PIL.Image.fromarray", "tuple", "tuple", "tuple", "WholeSlideImage.WholeSlideImage.wsi.read_region().convert", "tuple", "int", "img.resize.resize.resize", "img.resize.resize.resize", "cv2.drawContours", "WholeSlideImage.WholeSlideImage.wsi.read_region", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "cv2.drawContours", "enumerate", "cv2.drawContours", "WholeSlideImage.WholeSlideImage.scaleContourDim", "int", "int", "int", "int", "WholeSlideImage.WholeSlideImage.scaleContourDim", "numpy.array", "cv2.moments", "int", "int", "cv2.drawContours", "cv2.putText", "WholeSlideImage.WholeSlideImage.scaleContourDim", "WholeSlideImage.WholeSlideImage.scaleContourDim", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim"], ["", "def", "visWSI", "(", "self", ",", "vis_level", "=", "0", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "hole_color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "annot_color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "\n", "line_thickness", "=", "250", ",", "max_size", "=", "None", ",", "top_left", "=", "None", ",", "bot_right", "=", "None", ",", "custom_downsample", "=", "1", ",", "view_slide_only", "=", "False", ",", "\n", "number_contours", "=", "False", ",", "seg_display", "=", "True", ",", "annot_display", "=", "True", ")", ":", "\n", "\n", "        ", "downsample", "=", "self", ".", "level_downsamples", "[", "vis_level", "]", "\n", "scale", "=", "[", "1", "/", "downsample", "[", "0", "]", ",", "1", "/", "downsample", "[", "1", "]", "]", "\n", "\n", "if", "top_left", "is", "not", "None", "and", "bot_right", "is", "not", "None", ":", "\n", "            ", "top_left", "=", "tuple", "(", "top_left", ")", "\n", "bot_right", "=", "tuple", "(", "bot_right", ")", "\n", "w", ",", "h", "=", "tuple", "(", "(", "np", ".", "array", "(", "bot_right", ")", "*", "scale", ")", ".", "astype", "(", "int", ")", "-", "(", "np", ".", "array", "(", "top_left", ")", "*", "scale", ")", ".", "astype", "(", "int", ")", ")", "\n", "region_size", "=", "(", "w", ",", "h", ")", "\n", "", "else", ":", "\n", "            ", "top_left", "=", "(", "0", ",", "0", ")", "\n", "region_size", "=", "self", ".", "level_dim", "[", "vis_level", "]", "\n", "\n", "", "img", "=", "np", ".", "array", "(", "self", ".", "wsi", ".", "read_region", "(", "top_left", ",", "vis_level", ",", "region_size", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "\n", "if", "not", "view_slide_only", ":", "\n", "            ", "offset", "=", "tuple", "(", "-", "(", "np", ".", "array", "(", "top_left", ")", "*", "scale", ")", ".", "astype", "(", "int", ")", ")", "\n", "line_thickness", "=", "int", "(", "line_thickness", "*", "math", ".", "sqrt", "(", "scale", "[", "0", "]", "*", "scale", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "contours_tissue", "is", "not", "None", "and", "seg_display", ":", "\n", "                ", "if", "not", "number_contours", ":", "\n", "                    ", "cv2", ".", "drawContours", "(", "img", ",", "self", ".", "scaleContourDim", "(", "self", ".", "contours_tissue", ",", "scale", ")", ",", "\n", "-", "1", ",", "color", ",", "line_thickness", ",", "lineType", "=", "cv2", ".", "LINE_8", ",", "offset", "=", "offset", ")", "\n", "\n", "", "else", ":", "# add numbering to each contour", "\n", "                    ", "for", "idx", ",", "cont", "in", "enumerate", "(", "self", ".", "contours_tissue", ")", ":", "\n", "                        ", "contour", "=", "np", ".", "array", "(", "self", ".", "scaleContourDim", "(", "cont", ",", "scale", ")", ")", "\n", "M", "=", "cv2", ".", "moments", "(", "contour", ")", "\n", "cX", "=", "int", "(", "M", "[", "\"m10\"", "]", "/", "(", "M", "[", "\"m00\"", "]", "+", "1e-9", ")", ")", "\n", "cY", "=", "int", "(", "M", "[", "\"m01\"", "]", "/", "(", "M", "[", "\"m00\"", "]", "+", "1e-9", ")", ")", "\n", "# draw the contour and put text next to center", "\n", "cv2", ".", "drawContours", "(", "img", ",", "[", "contour", "]", ",", "-", "1", ",", "color", ",", "line_thickness", ",", "lineType", "=", "cv2", ".", "LINE_8", ",", "offset", "=", "offset", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "\"{}\"", ".", "format", "(", "idx", ")", ",", "(", "cX", ",", "cY", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "2", ",", "(", "255", ",", "0", ",", "0", ")", ",", "10", ")", "\n", "\n", "", "", "for", "holes", "in", "self", ".", "holes_tissue", ":", "\n", "                    ", "cv2", ".", "drawContours", "(", "img", ",", "self", ".", "scaleContourDim", "(", "holes", ",", "scale", ")", ",", "\n", "-", "1", ",", "hole_color", ",", "line_thickness", ",", "lineType", "=", "cv2", ".", "LINE_8", ")", "\n", "\n", "", "", "if", "self", ".", "contours_tumor", "is", "not", "None", "and", "annot_display", ":", "\n", "                ", "cv2", ".", "drawContours", "(", "img", ",", "self", ".", "scaleContourDim", "(", "self", ".", "contours_tumor", ",", "scale", ")", ",", "\n", "-", "1", ",", "annot_color", ",", "line_thickness", ",", "lineType", "=", "cv2", ".", "LINE_8", ",", "offset", "=", "offset", ")", "\n", "\n", "", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "/", "custom_downsample", ")", ",", "int", "(", "h", "/", "custom_downsample", ")", ")", ")", "\n", "\n", "", "if", "max_size", "is", "not", "None", "and", "(", "w", ">", "max_size", "or", "h", ">", "max_size", ")", ":", "\n", "            ", "resizeFactor", "=", "max_size", "/", "w", "if", "w", ">", "h", "else", "max_size", "/", "h", "\n", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "*", "resizeFactor", ")", ",", "int", "(", "h", "*", "resizeFactor", ")", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.createPatches_bag_hdf5": [[242, 266], ["print", "time.time", "enumerate", "WholeSlideImage.WholeSlideImage._getPatchGenerator", "wsi_core.wsi_utils.initialize_hdf5_bag", "wsi_core.wsi_utils.savePatchIter_bag_hdf5", "next"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage._getPatchGenerator", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.initialize_hdf5_bag", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.savePatchIter_bag_hdf5"], ["", "def", "createPatches_bag_hdf5", "(", "self", ",", "save_path", ",", "patch_level", "=", "0", ",", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "save_coord", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "contours", "=", "self", ".", "contours_tissue", "\n", "contour_holes", "=", "self", ".", "holes_tissue", "\n", "\n", "print", "(", "\"Creating patches for: \"", ",", "self", ".", "name", ",", "\"...\"", ",", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "cont", "in", "enumerate", "(", "contours", ")", ":", "\n", "            ", "patch_gen", "=", "self", ".", "_getPatchGenerator", "(", "cont", ",", "idx", ",", "patch_level", ",", "save_path", ",", "patch_size", ",", "step_size", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "hdf5_file", "is", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "first_patch", "=", "next", "(", "patch_gen", ")", "\n", "\n", "# empty contour, continue", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "continue", "\n", "\n", "", "file_path", "=", "initialize_hdf5_bag", "(", "first_patch", ",", "save_coord", "=", "save_coord", ")", "\n", "self", ".", "hdf5_file", "=", "file_path", "\n", "\n", "", "for", "patch", "in", "patch_gen", ":", "\n", "                ", "savePatchIter_bag_hdf5", "(", "patch", ")", "\n", "\n", "", "", "return", "self", ".", "hdf5_file", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage._getPatchGenerator": [[268, 335], ["print", "print", "isinstance", "range", "print", "cv2.boundingRect", "cv2.contourArea", "print", "int", "int", "isinstance", "min", "min", "range", "wsi_core.util_classes.isInContourV3_Easy", "WholeSlideImage.WholeSlideImage.wsi.read_region().convert", "wsi_core.util_classes.isInContourV3_Hard", "WholeSlideImage.WholeSlideImage.isInContours", "patch_PIL.resize.resize.resize", "tuple", "wsi_core.util_classes.isInContourV2", "WholeSlideImage.WholeSlideImage.wsi.read_region", "wsi_core.wsi_utils.isBlackPatch", "wsi_core.wsi_utils.isWhitePatch", "wsi_core.util_classes.isInContourV1", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.isInContours", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isBlackPatch", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.isWhitePatch"], ["", "def", "_getPatchGenerator", "(", "self", ",", "cont", ",", "cont_idx", ",", "patch_level", ",", "save_path", ",", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "custom_downsample", "=", "1", ",", "\n", "white_black", "=", "True", ",", "white_thresh", "=", "15", ",", "black_thresh", "=", "50", ",", "contour_fn", "=", "'four_pt'", ",", "use_padding", "=", "True", ")", ":", "\n", "        ", "start_x", ",", "start_y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "cont", ")", "if", "cont", "is", "not", "None", "else", "(", "0", ",", "0", ",", "self", ".", "level_dim", "[", "patch_level", "]", "[", "0", "]", ",", "self", ".", "level_dim", "[", "patch_level", "]", "[", "1", "]", ")", "\n", "print", "(", "\"Bounding Box:\"", ",", "start_x", ",", "start_y", ",", "w", ",", "h", ")", "\n", "print", "(", "\"Contour Area:\"", ",", "cv2", ".", "contourArea", "(", "cont", ")", ")", "\n", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "            ", "assert", "custom_downsample", "==", "2", "\n", "target_patch_size", "=", "patch_size", "\n", "patch_size", "=", "target_patch_size", "*", "2", "\n", "step_size", "=", "step_size", "*", "2", "\n", "print", "(", "\"Custom Downsample: {}, Patching at {} x {}, But Final Patch Size is {} x {}\"", ".", "format", "(", "custom_downsample", ",", "patch_size", ",", "patch_size", ",", "\n", "target_patch_size", ",", "target_patch_size", ")", ")", "\n", "\n", "", "patch_downsample", "=", "(", "int", "(", "self", ".", "level_downsamples", "[", "patch_level", "]", "[", "0", "]", ")", ",", "int", "(", "self", ".", "level_downsamples", "[", "patch_level", "]", "[", "1", "]", ")", ")", "\n", "ref_patch_size", "=", "(", "patch_size", "*", "patch_downsample", "[", "0", "]", ",", "patch_size", "*", "patch_downsample", "[", "1", "]", ")", "\n", "\n", "step_size_x", "=", "step_size", "*", "patch_downsample", "[", "0", "]", "\n", "step_size_y", "=", "step_size", "*", "patch_downsample", "[", "1", "]", "\n", "\n", "if", "isinstance", "(", "contour_fn", ",", "str", ")", ":", "\n", "            ", "if", "contour_fn", "==", "'four_pt'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV3_Easy", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ",", "center_shift", "=", "0.5", ")", "\n", "", "elif", "contour_fn", "==", "'four_pt_hard'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV3_Hard", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ",", "center_shift", "=", "0.5", ")", "\n", "", "elif", "contour_fn", "==", "'center'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV2", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ")", "\n", "", "elif", "contour_fn", "==", "'basic'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV1", "(", "contour", "=", "cont", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "contour_fn", ",", "Contour_Checking_fn", ")", "\n", "cont_check_fn", "=", "contour_fn", "\n", "\n", "", "img_w", ",", "img_h", "=", "self", ".", "level_dim", "[", "0", "]", "\n", "if", "use_padding", ":", "\n", "            ", "stop_y", "=", "start_y", "+", "h", "\n", "stop_x", "=", "start_x", "+", "w", "\n", "", "else", ":", "\n", "            ", "stop_y", "=", "min", "(", "start_y", "+", "h", ",", "img_h", "-", "ref_patch_size", "[", "1", "]", ")", "\n", "stop_x", "=", "min", "(", "start_x", "+", "w", ",", "img_w", "-", "ref_patch_size", "[", "0", "]", ")", "\n", "\n", "", "count", "=", "0", "\n", "for", "y", "in", "range", "(", "start_y", ",", "stop_y", ",", "step_size_y", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "start_x", ",", "stop_x", ",", "step_size_x", ")", ":", "\n", "\n", "                ", "if", "not", "self", ".", "isInContours", "(", "cont_check_fn", ",", "(", "x", ",", "y", ")", ",", "self", ".", "holes_tissue", "[", "cont_idx", "]", ",", "ref_patch_size", "[", "0", "]", ")", ":", "#point not inside contour and its associated holes", "\n", "                    ", "continue", "\n", "\n", "", "count", "+=", "1", "\n", "patch_PIL", "=", "self", ".", "wsi", ".", "read_region", "(", "(", "x", ",", "y", ")", ",", "patch_level", ",", "(", "patch_size", ",", "patch_size", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "                    ", "patch_PIL", "=", "patch_PIL", ".", "resize", "(", "(", "target_patch_size", ",", "target_patch_size", ")", ")", "\n", "\n", "", "if", "white_black", ":", "\n", "                    ", "if", "isBlackPatch", "(", "np", ".", "array", "(", "patch_PIL", ")", ",", "rgbThresh", "=", "black_thresh", ")", "or", "isWhitePatch", "(", "np", ".", "array", "(", "patch_PIL", ")", ",", "satThresh", "=", "white_thresh", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "patch_info", "=", "{", "'x'", ":", "x", "//", "(", "patch_downsample", "[", "0", "]", "*", "custom_downsample", ")", ",", "'y'", ":", "y", "//", "(", "patch_downsample", "[", "1", "]", "*", "custom_downsample", ")", ",", "'cont_idx'", ":", "cont_idx", ",", "'patch_level'", ":", "patch_level", ",", "\n", "'downsample'", ":", "self", ".", "level_downsamples", "[", "patch_level", "]", ",", "'downsampled_level_dim'", ":", "tuple", "(", "np", ".", "array", "(", "self", ".", "level_dim", "[", "patch_level", "]", ")", "//", "custom_downsample", ")", ",", "'level_dim'", ":", "self", ".", "level_dim", "[", "patch_level", "]", ",", "\n", "'patch_PIL'", ":", "patch_PIL", ",", "'name'", ":", "self", ".", "name", ",", "'save_path'", ":", "save_path", "}", "\n", "\n", "yield", "patch_info", "\n", "\n", "\n", "", "", "print", "(", "\"patches extracted: {}\"", ".", "format", "(", "count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.isInHoles": [[336, 343], ["cv2.pointPolygonTest"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "isInHoles", "(", "holes", ",", "pt", ",", "patch_size", ")", ":", "\n", "        ", "for", "hole", "in", "holes", ":", "\n", "            ", "if", "cv2", ".", "pointPolygonTest", "(", "hole", ",", "(", "pt", "[", "0", "]", "+", "patch_size", "/", "2", ",", "pt", "[", "1", "]", "+", "patch_size", "/", "2", ")", ",", "False", ")", ">", "0", ":", "\n", "                ", "return", "1", "\n", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.isInContours": [[344, 352], ["cont_check_fn", "WholeSlideImage.isInHoles"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.isInHoles"], ["", "@", "staticmethod", "\n", "def", "isInContours", "(", "cont_check_fn", ",", "pt", ",", "holes", "=", "None", ",", "patch_size", "=", "256", ")", ":", "\n", "        ", "if", "cont_check_fn", "(", "pt", ")", ":", "\n", "            ", "if", "holes", "is", "not", "None", ":", "\n", "                ", "return", "not", "WholeSlideImage", ".", "isInHoles", "(", "holes", ",", "pt", ",", "patch_size", ")", "\n", "", "else", ":", "\n", "                ", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim": [[353, 356], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scaleContourDim", "(", "contours", ",", "scale", ")", ":", "\n", "        ", "return", "[", "np", ".", "array", "(", "cont", "*", "scale", ",", "dtype", "=", "'int32'", ")", "for", "cont", "in", "contours", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleHolesDim": [[357, 360], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scaleHolesDim", "(", "contours", ",", "scale", ")", ":", "\n", "        ", "return", "[", "[", "np", ".", "array", "(", "hole", "*", "scale", ",", "dtype", "=", "'int32'", ")", "for", "hole", "in", "holes", "]", "for", "holes", "in", "contours", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage._assertLevelDownsamples": [[361, 370], ["zip", "level_downsamples.append", "level_downsamples.append", "float", "float"], "methods", ["None"], ["", "def", "_assertLevelDownsamples", "(", "self", ")", ":", "\n", "        ", "level_downsamples", "=", "[", "]", "\n", "dim_0", "=", "self", ".", "wsi", ".", "level_dimensions", "[", "0", "]", "\n", "\n", "for", "downsample", ",", "dim", "in", "zip", "(", "self", ".", "wsi", ".", "level_downsamples", ",", "self", ".", "wsi", ".", "level_dimensions", ")", ":", "\n", "            ", "estimated_downsample", "=", "(", "dim_0", "[", "0", "]", "/", "float", "(", "dim", "[", "0", "]", ")", ",", "dim_0", "[", "1", "]", "/", "float", "(", "dim", "[", "1", "]", ")", ")", "\n", "level_downsamples", ".", "append", "(", "estimated_downsample", ")", "if", "estimated_downsample", "!=", "(", "downsample", ",", "downsample", ")", "else", "level_downsamples", ".", "append", "(", "(", "downsample", ",", "downsample", ")", ")", "\n", "\n", "", "return", "level_downsamples", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_contours": [[371, 392], ["os.path.join", "print", "time.time", "len", "print", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "enumerate", "WholeSlideImage.WholeSlideImage.process_contour", "str", "print", "len", "wsi_core.wsi_utils.save_hdf5", "wsi_core.wsi_utils.save_hdf5"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_contour", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.save_hdf5"], ["", "def", "process_contours", "(", "self", ",", "save_path", ",", "patch_level", "=", "0", ",", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "**", "kwargs", ")", ":", "\n", "        ", "save_path_hdf5", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "self", ".", "name", ")", "+", "'.h5'", ")", "\n", "print", "(", "\"Creating patches for: \"", ",", "self", ".", "name", ",", "\"...\"", ",", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "\n", "n_contours", "=", "len", "(", "self", ".", "contours_tissue", ")", "\n", "print", "(", "\"Total number of contours to process: \"", ",", "n_contours", ")", "\n", "fp_chunk_size", "=", "math", ".", "ceil", "(", "n_contours", "*", "0.05", ")", "\n", "init", "=", "True", "\n", "for", "idx", ",", "cont", "in", "enumerate", "(", "self", ".", "contours_tissue", ")", ":", "\n", "            ", "if", "(", "idx", "+", "1", ")", "%", "fp_chunk_size", "==", "fp_chunk_size", ":", "\n", "                ", "print", "(", "'Processing contour {}/{}'", ".", "format", "(", "idx", ",", "n_contours", ")", ")", "\n", "\n", "", "asset_dict", ",", "attr_dict", "=", "self", ".", "process_contour", "(", "cont", ",", "self", ".", "holes_tissue", "[", "idx", "]", ",", "patch_level", ",", "save_path", ",", "patch_size", ",", "step_size", ",", "**", "kwargs", ")", "\n", "if", "len", "(", "asset_dict", ")", ">", "0", ":", "\n", "                ", "if", "init", ":", "\n", "                    ", "save_hdf5", "(", "save_path_hdf5", ",", "asset_dict", ",", "attr_dict", ",", "mode", "=", "'w'", ")", "\n", "init", "=", "False", "\n", "", "else", ":", "\n", "                    ", "save_hdf5", "(", "save_path_hdf5", ",", "asset_dict", ",", "mode", "=", "'a'", ")", "\n", "\n", "", "", "", "return", "self", ".", "hdf5_file", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_contour": [[394, 479], ["print", "print", "isinstance", "numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.array().transpose", "multiprocessing.cpu_count", "multiprocessing.Pool", "multiprocessing.Pool.starmap", "multiprocessing.Pool.close", "numpy.array", "print", "cv2.boundingRect", "int", "int", "min", "min", "cv2.contourArea", "min", "min", "max", "max", "isinstance", "len", "print", "print", "wsi_core.util_classes.isInContourV3_Easy", "numpy.array", "len", "tuple", "wsi_core.util_classes.isInContourV3_Hard", "numpy.array", "wsi_core.util_classes.isInContourV2", "x_coords.flatten", "y_coords.flatten", "wsi_core.util_classes.isInContourV1"], "methods", ["None"], ["", "def", "process_contour", "(", "self", ",", "cont", ",", "contour_holes", ",", "patch_level", ",", "save_path", ",", "patch_size", "=", "256", ",", "step_size", "=", "256", ",", "\n", "contour_fn", "=", "'four_pt'", ",", "use_padding", "=", "True", ",", "top_left", "=", "None", ",", "bot_right", "=", "None", ")", ":", "\n", "        ", "start_x", ",", "start_y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "cont", ")", "if", "cont", "is", "not", "None", "else", "(", "0", ",", "0", ",", "self", ".", "level_dim", "[", "patch_level", "]", "[", "0", "]", ",", "self", ".", "level_dim", "[", "patch_level", "]", "[", "1", "]", ")", "\n", "\n", "patch_downsample", "=", "(", "int", "(", "self", ".", "level_downsamples", "[", "patch_level", "]", "[", "0", "]", ")", ",", "int", "(", "self", ".", "level_downsamples", "[", "patch_level", "]", "[", "1", "]", ")", ")", "\n", "ref_patch_size", "=", "(", "patch_size", "*", "patch_downsample", "[", "0", "]", ",", "patch_size", "*", "patch_downsample", "[", "1", "]", ")", "\n", "\n", "img_w", ",", "img_h", "=", "self", ".", "level_dim", "[", "0", "]", "\n", "if", "use_padding", ":", "\n", "            ", "stop_y", "=", "start_y", "+", "h", "\n", "stop_x", "=", "start_x", "+", "w", "\n", "", "else", ":", "\n", "            ", "stop_y", "=", "min", "(", "start_y", "+", "h", ",", "img_h", "-", "ref_patch_size", "[", "1", "]", "+", "1", ")", "\n", "stop_x", "=", "min", "(", "start_x", "+", "w", ",", "img_w", "-", "ref_patch_size", "[", "0", "]", "+", "1", ")", "\n", "\n", "", "print", "(", "\"Bounding Box:\"", ",", "start_x", ",", "start_y", ",", "w", ",", "h", ")", "\n", "print", "(", "\"Contour Area:\"", ",", "cv2", ".", "contourArea", "(", "cont", ")", ")", "\n", "\n", "if", "bot_right", "is", "not", "None", ":", "\n", "            ", "stop_y", "=", "min", "(", "bot_right", "[", "1", "]", ",", "stop_y", ")", "\n", "stop_x", "=", "min", "(", "bot_right", "[", "0", "]", ",", "stop_x", ")", "\n", "", "if", "top_left", "is", "not", "None", ":", "\n", "            ", "start_y", "=", "max", "(", "top_left", "[", "1", "]", ",", "start_y", ")", "\n", "start_x", "=", "max", "(", "top_left", "[", "0", "]", ",", "start_x", ")", "\n", "\n", "", "if", "bot_right", "is", "not", "None", "or", "top_left", "is", "not", "None", ":", "\n", "            ", "w", ",", "h", "=", "stop_x", "-", "start_x", ",", "stop_y", "-", "start_y", "\n", "if", "w", "<=", "0", "or", "h", "<=", "0", ":", "\n", "                ", "print", "(", "\"Contour is not in specified ROI, skip\"", ")", "\n", "return", "{", "}", ",", "{", "}", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Adjusted Bounding Box:\"", ",", "start_x", ",", "start_y", ",", "w", ",", "h", ")", "\n", "\n", "", "", "if", "isinstance", "(", "contour_fn", ",", "str", ")", ":", "\n", "            ", "if", "contour_fn", "==", "'four_pt'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV3_Easy", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ",", "center_shift", "=", "0.5", ")", "\n", "", "elif", "contour_fn", "==", "'four_pt_hard'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV3_Hard", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ",", "center_shift", "=", "0.5", ")", "\n", "", "elif", "contour_fn", "==", "'center'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV2", "(", "contour", "=", "cont", ",", "patch_size", "=", "ref_patch_size", "[", "0", "]", ")", "\n", "", "elif", "contour_fn", "==", "'basic'", ":", "\n", "                ", "cont_check_fn", "=", "isInContourV1", "(", "contour", "=", "cont", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "contour_fn", ",", "Contour_Checking_fn", ")", "\n", "cont_check_fn", "=", "contour_fn", "\n", "\n", "\n", "", "step_size_x", "=", "step_size", "*", "patch_downsample", "[", "0", "]", "\n", "step_size_y", "=", "step_size", "*", "patch_downsample", "[", "1", "]", "\n", "\n", "x_range", "=", "np", ".", "arange", "(", "start_x", ",", "stop_x", ",", "step", "=", "step_size_x", ")", "\n", "y_range", "=", "np", ".", "arange", "(", "start_y", ",", "stop_y", ",", "step", "=", "step_size_y", ")", "\n", "x_coords", ",", "y_coords", "=", "np", ".", "meshgrid", "(", "x_range", ",", "y_range", ",", "indexing", "=", "'ij'", ")", "\n", "coord_candidates", "=", "np", ".", "array", "(", "[", "x_coords", ".", "flatten", "(", ")", ",", "y_coords", ".", "flatten", "(", ")", "]", ")", ".", "transpose", "(", ")", "\n", "\n", "num_workers", "=", "mp", ".", "cpu_count", "(", ")", "\n", "if", "num_workers", ">", "4", ":", "\n", "            ", "num_workers", "=", "4", "\n", "", "pool", "=", "mp", ".", "Pool", "(", "num_workers", ")", "\n", "\n", "iterable", "=", "[", "(", "coord", ",", "contour_holes", ",", "ref_patch_size", "[", "0", "]", ",", "cont_check_fn", ")", "for", "coord", "in", "coord_candidates", "]", "\n", "results", "=", "pool", ".", "starmap", "(", "WholeSlideImage", ".", "process_coord_candidate", ",", "iterable", ")", "\n", "pool", ".", "close", "(", ")", "\n", "results", "=", "np", ".", "array", "(", "[", "result", "for", "result", "in", "results", "if", "result", "is", "not", "None", "]", ")", "\n", "\n", "print", "(", "'Extracted {} coordinates'", ".", "format", "(", "len", "(", "results", ")", ")", ")", "\n", "\n", "if", "len", "(", "results", ")", ">", "1", ":", "\n", "            ", "asset_dict", "=", "{", "'coords'", ":", "results", "}", "\n", "\n", "attr", "=", "{", "'patch_size'", ":", "patch_size", ",", "# To be considered...", "\n", "'patch_level'", ":", "patch_level", ",", "\n", "'downsample'", ":", "self", ".", "level_downsamples", "[", "patch_level", "]", ",", "\n", "'downsampled_level_dim'", ":", "tuple", "(", "np", ".", "array", "(", "self", ".", "level_dim", "[", "patch_level", "]", ")", ")", ",", "\n", "'level_dim'", ":", "self", ".", "level_dim", "[", "patch_level", "]", ",", "\n", "'name'", ":", "self", ".", "name", ",", "\n", "'save_path'", ":", "save_path", "}", "\n", "\n", "attr_dict", "=", "{", "'coords'", ":", "attr", "}", "\n", "return", "asset_dict", ",", "attr_dict", "\n", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.process_coord_candidate": [[480, 486], ["WholeSlideImage.isInContours"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.isInContours"], ["", "", "@", "staticmethod", "\n", "def", "process_coord_candidate", "(", "coord", ",", "contour_holes", ",", "ref_patch_size", ",", "cont_check_fn", ")", ":", "\n", "        ", "if", "WholeSlideImage", ".", "isInContours", "(", "cont_check_fn", ",", "coord", ",", "contour_holes", ",", "ref_patch_size", ")", ":", "\n", "            ", "return", "coord", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.visHeatmap": [[487, 676], ["numpy.ceil().astype", "numpy.ceil().astype", "print", "print", "print", "print", "numpy.full().astype", "numpy.full().astype", "range", "print", "print", "max", "isinstance", "range", "print", "PIL.Image.fromarray", "WholeSlideImage.WholeSlideImage.wsi.get_best_level_for_downsample", "len", "wsi_core.wsi_utils.to_percentiles.flatten", "wsi_core.wsi_utils.screen_coords", "tuple", "tuple", "tuple", "wsi_core.wsi_utils.to_percentiles", "len", "print", "print", "numpy.around", "cv2.GaussianBlur", "WholeSlideImage.WholeSlideImage.get_seg_mask", "numpy.array", "numpy.array", "int", "matplotlib.get_cmap", "len", "cv2.GaussianBlur", "WholeSlideImage.WholeSlideImage.block_blending", "img.resize.resize.resize", "img.resize.resize.resize", "numpy.ceil", "numpy.ceil", "numpy.full", "numpy.full", "tuple", "WholeSlideImage.WholeSlideImage.wsi.read_region().convert", "PIL.Image.new", "len", "print", "img[].copy", "[].astype", "img[].copy.copy", "tuple", "len", "numpy.flip", "numpy.flip", "len", "tuple", "len", "int", "int", "int", "int", "numpy.array", "numpy.array", "numpy.array", "WholeSlideImage.WholeSlideImage.wsi.read_region", "len", "numpy.array", "numpy.array", "matplotlib.get_cmap."], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.screen_coords", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.wsi_utils.to_percentiles", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.get_seg_mask", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.block_blending"], ["", "", "def", "visHeatmap", "(", "self", ",", "scores", ",", "coords", ",", "vis_level", "=", "-", "1", ",", "\n", "top_left", "=", "None", ",", "bot_right", "=", "None", ",", "\n", "patch_size", "=", "(", "256", ",", "256", ")", ",", "\n", "blank_canvas", "=", "False", ",", "canvas_color", "=", "(", "220", ",", "20", ",", "50", ")", ",", "alpha", "=", "0.4", ",", "\n", "blur", "=", "False", ",", "overlap", "=", "0.0", ",", "\n", "segment", "=", "True", ",", "use_holes", "=", "True", ",", "\n", "convert_to_percentiles", "=", "False", ",", "\n", "binarize", "=", "False", ",", "thresh", "=", "0.5", ",", "\n", "max_size", "=", "None", ",", "\n", "custom_downsample", "=", "1", ",", "\n", "cmap", "=", "'coolwarm'", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Args:\n            scores (numpy array of float): Attention scores \n            coords (numpy array of int, n_patches x 2): Corresponding coordinates (relative to lvl 0)\n            vis_level (int): WSI pyramid level to visualize\n            patch_size (tuple of int): Patch dimensions (relative to lvl 0)\n            blank_canvas (bool): Whether to use a blank canvas to draw the heatmap (vs. using the original slide)\n            canvas_color (tuple of uint8): Canvas color\n            alpha (float [0, 1]): blending coefficient for overlaying heatmap onto original slide\n            blur (bool): apply gaussian blurring\n            overlap (float [0 1]): percentage of overlap between neighboring patches (only affect radius of blurring)\n            segment (bool): whether to use tissue segmentation contour (must have already called self.segmentTissue such that \n                            self.contours_tissue and self.holes_tissue are not None\n            use_holes (bool): whether to also clip out detected tissue cavities (only in effect when segment == True)\n            convert_to_percentiles (bool): whether to convert attention scores to percentiles\n            binarize (bool): only display patches > threshold\n            threshold (float): binarization threshold\n            max_size (int): Maximum canvas size (clip if goes over)\n            custom_downsample (int): additionally downscale the heatmap by specified factor\n            cmap (str): name of matplotlib colormap to use\n        \"\"\"", "\n", "\n", "if", "vis_level", "<", "0", ":", "\n", "            ", "vis_level", "=", "self", ".", "wsi", ".", "get_best_level_for_downsample", "(", "32", ")", "\n", "\n", "", "downsample", "=", "self", ".", "level_downsamples", "[", "vis_level", "]", "\n", "scale", "=", "[", "1", "/", "downsample", "[", "0", "]", ",", "1", "/", "downsample", "[", "1", "]", "]", "# Scaling from 0 to desired level", "\n", "\n", "if", "len", "(", "scores", ".", "shape", ")", "==", "2", ":", "\n", "            ", "scores", "=", "scores", ".", "flatten", "(", ")", "\n", "\n", "", "if", "binarize", ":", "\n", "            ", "if", "thresh", "<", "0", ":", "\n", "                ", "threshold", "=", "1.0", "/", "len", "(", "scores", ")", "\n", "\n", "", "else", ":", "\n", "                ", "threshold", "=", "thresh", "\n", "\n", "", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "##### calculate size of heatmap and filter coordinates/scores outside specified bbox region #####", "\n", "", "if", "top_left", "is", "not", "None", "and", "bot_right", "is", "not", "None", ":", "\n", "            ", "scores", ",", "coords", "=", "screen_coords", "(", "scores", ",", "coords", ",", "top_left", ",", "bot_right", ")", "\n", "coords", "=", "coords", "-", "top_left", "\n", "top_left", "=", "tuple", "(", "top_left", ")", "\n", "bot_right", "=", "tuple", "(", "bot_right", ")", "\n", "w", ",", "h", "=", "tuple", "(", "(", "np", ".", "array", "(", "bot_right", ")", "*", "scale", ")", ".", "astype", "(", "int", ")", "-", "(", "np", ".", "array", "(", "top_left", ")", "*", "scale", ")", ".", "astype", "(", "int", ")", ")", "\n", "region_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "", "else", ":", "\n", "            ", "region_size", "=", "self", ".", "level_dim", "[", "vis_level", "]", "\n", "top_left", "=", "(", "0", ",", "0", ")", "\n", "bot_right", "=", "self", ".", "level_dim", "[", "0", "]", "\n", "w", ",", "h", "=", "region_size", "\n", "\n", "", "patch_size", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "patch_size", ")", "*", "np", ".", "array", "(", "scale", ")", ")", ".", "astype", "(", "int", ")", "\n", "coords", "=", "np", ".", "ceil", "(", "coords", "*", "np", ".", "array", "(", "scale", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "print", "(", "'\\ncreating heatmap for: '", ")", "\n", "print", "(", "'top_left: '", ",", "top_left", ",", "'bot_right: '", ",", "bot_right", ")", "\n", "print", "(", "'w: {}, h: {}'", ".", "format", "(", "w", ",", "h", ")", ")", "\n", "print", "(", "'scaled patch size: '", ",", "patch_size", ")", "\n", "\n", "###### normalize filtered scores ######", "\n", "if", "convert_to_percentiles", ":", "\n", "            ", "scores", "=", "to_percentiles", "(", "scores", ")", "\n", "\n", "", "scores", "/=", "100", "\n", "\n", "######## calculate the heatmap of raw attention scores (before colormap) ", "\n", "# by accumulating scores over overlapped regions ######", "\n", "\n", "# heatmap overlay: tracks attention score over each pixel of heatmap", "\n", "# overlay counter: tracks how many times attention score is accumulated over each pixel of heatmap", "\n", "overlay", "=", "np", ".", "full", "(", "np", ".", "flip", "(", "region_size", ")", ",", "0", ")", ".", "astype", "(", "float", ")", "\n", "counter", "=", "np", ".", "full", "(", "np", ".", "flip", "(", "region_size", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "count", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "coords", ")", ")", ":", "\n", "            ", "score", "=", "scores", "[", "idx", "]", "\n", "coord", "=", "coords", "[", "idx", "]", "\n", "if", "score", ">=", "threshold", ":", "\n", "                ", "if", "binarize", ":", "\n", "                    ", "score", "=", "1.0", "\n", "count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "score", "=", "0.0", "\n", "# accumulate attention", "\n", "", "overlay", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", "+=", "score", "\n", "# accumulate counter", "\n", "counter", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", "+=", "1", "\n", "\n", "", "if", "binarize", ":", "\n", "            ", "print", "(", "'\\nbinarized tiles based on cutoff of {}'", ".", "format", "(", "threshold", ")", ")", "\n", "print", "(", "'identified {}/{} patches as positive'", ".", "format", "(", "count", ",", "len", "(", "coords", ")", ")", ")", "\n", "\n", "# fetch attended region and average accumulated attention", "\n", "", "zero_mask", "=", "counter", "==", "0", "\n", "\n", "if", "binarize", ":", "\n", "            ", "overlay", "[", "~", "zero_mask", "]", "=", "np", ".", "around", "(", "overlay", "[", "~", "zero_mask", "]", "/", "counter", "[", "~", "zero_mask", "]", ")", "\n", "", "else", ":", "\n", "            ", "overlay", "[", "~", "zero_mask", "]", "=", "overlay", "[", "~", "zero_mask", "]", "/", "counter", "[", "~", "zero_mask", "]", "\n", "", "del", "counter", "\n", "if", "blur", ":", "\n", "            ", "overlay", "=", "cv2", ".", "GaussianBlur", "(", "overlay", ",", "tuple", "(", "(", "patch_size", "*", "(", "1", "-", "overlap", ")", ")", ".", "astype", "(", "int", ")", "*", "2", "+", "1", ")", ",", "0", ")", "\n", "\n", "", "if", "segment", ":", "\n", "            ", "tissue_mask", "=", "self", ".", "get_seg_mask", "(", "region_size", ",", "scale", ",", "use_holes", "=", "use_holes", ",", "offset", "=", "tuple", "(", "top_left", ")", ")", "\n", "# return Image.fromarray(tissue_mask) # tissue mask", "\n", "\n", "", "if", "not", "blank_canvas", ":", "\n", "# downsample original image and use as canvas", "\n", "            ", "img", "=", "np", ".", "array", "(", "self", ".", "wsi", ".", "read_region", "(", "top_left", ",", "vis_level", ",", "region_size", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "else", ":", "\n", "# use blank canvas", "\n", "            ", "img", "=", "np", ".", "array", "(", "Image", ".", "new", "(", "size", "=", "region_size", ",", "mode", "=", "\"RGB\"", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "\n", "#return Image.fromarray(img) #raw image", "\n", "\n", "", "print", "(", "'\\ncomputing heatmap image'", ")", "\n", "print", "(", "'total of {} patches'", ".", "format", "(", "len", "(", "coords", ")", ")", ")", "\n", "twenty_percent_chunk", "=", "max", "(", "1", ",", "int", "(", "len", "(", "coords", ")", "*", "0.2", ")", ")", "\n", "\n", "if", "isinstance", "(", "cmap", ",", "str", ")", ":", "\n", "            ", "cmap", "=", "plt", ".", "get_cmap", "(", "cmap", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "coords", ")", ")", ":", "\n", "            ", "if", "(", "idx", "+", "1", ")", "%", "twenty_percent_chunk", "==", "0", ":", "\n", "                ", "print", "(", "'progress: {}/{}'", ".", "format", "(", "idx", ",", "len", "(", "coords", ")", ")", ")", "\n", "\n", "", "score", "=", "scores", "[", "idx", "]", "\n", "coord", "=", "coords", "[", "idx", "]", "\n", "if", "score", ">=", "threshold", ":", "\n", "\n", "# attention block", "\n", "                ", "raw_block", "=", "overlay", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", "\n", "\n", "# image block (either blank canvas or orig image)", "\n", "img_block", "=", "img", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", ".", "copy", "(", ")", "\n", "\n", "# color block (cmap applied to attention block)", "\n", "color_block", "=", "(", "cmap", "(", "raw_block", ")", "*", "255", ")", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "segment", ":", "\n", "# tissue mask block", "\n", "                    ", "mask_block", "=", "tissue_mask", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", "\n", "# copy over only tissue masked portion of color block", "\n", "img_block", "[", "mask_block", "]", "=", "color_block", "[", "mask_block", "]", "\n", "", "else", ":", "\n", "# copy over entire color block", "\n", "                    ", "img_block", "=", "color_block", "\n", "\n", "# rewrite image block", "\n", "", "img", "[", "coord", "[", "1", "]", ":", "coord", "[", "1", "]", "+", "patch_size", "[", "1", "]", ",", "coord", "[", "0", "]", ":", "coord", "[", "0", "]", "+", "patch_size", "[", "0", "]", "]", "=", "img_block", ".", "copy", "(", ")", "\n", "\n", "#return Image.fromarray(img) #overlay", "\n", "", "", "print", "(", "'Done'", ")", "\n", "del", "overlay", "\n", "\n", "if", "blur", ":", "\n", "            ", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "tuple", "(", "(", "patch_size", "*", "(", "1", "-", "overlap", ")", ")", ".", "astype", "(", "int", ")", "*", "2", "+", "1", ")", ",", "0", ")", "\n", "\n", "", "if", "alpha", "<", "1.0", ":", "\n", "            ", "img", "=", "self", ".", "block_blending", "(", "img", ",", "vis_level", ",", "top_left", ",", "bot_right", ",", "alpha", "=", "alpha", ",", "blank_canvas", "=", "blank_canvas", ",", "block_size", "=", "1024", ")", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "/", "custom_downsample", ")", ",", "int", "(", "h", "/", "custom_downsample", ")", ")", ")", "\n", "\n", "", "if", "max_size", "is", "not", "None", "and", "(", "w", ">", "max_size", "or", "h", ">", "max_size", ")", ":", "\n", "            ", "resizeFactor", "=", "max_size", "/", "w", "if", "w", ">", "h", "else", "max_size", "/", "h", "\n", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "*", "resizeFactor", ")", ",", "int", "(", "h", "*", "resizeFactor", ")", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.block_blending": [[678, 719], ["print", "min", "min", "print", "range", "range", "int", "int", "int", "min", "min", "cv2.addWeighted", "int", "numpy.array", "numpy.array", "int", "int", "WholeSlideImage.WholeSlideImage.wsi.read_region().convert", "PIL.Image.new", "WholeSlideImage.WholeSlideImage.wsi.read_region"], "methods", ["None"], ["", "def", "block_blending", "(", "self", ",", "img", ",", "vis_level", ",", "top_left", ",", "bot_right", ",", "alpha", "=", "0.5", ",", "blank_canvas", "=", "False", ",", "block_size", "=", "1024", ")", ":", "\n", "        ", "print", "(", "'\\ncomputing blend'", ")", "\n", "downsample", "=", "self", ".", "level_downsamples", "[", "vis_level", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "block_size_x", "=", "min", "(", "block_size", ",", "w", ")", "\n", "block_size_y", "=", "min", "(", "block_size", ",", "h", ")", "\n", "print", "(", "'using block size: {} x {}'", ".", "format", "(", "block_size_x", ",", "block_size_y", ")", ")", "\n", "\n", "shift", "=", "top_left", "# amount shifted w.r.t. (0,0)", "\n", "for", "x_start", "in", "range", "(", "top_left", "[", "0", "]", ",", "bot_right", "[", "0", "]", ",", "block_size_x", "*", "int", "(", "downsample", "[", "0", "]", ")", ")", ":", "\n", "            ", "for", "y_start", "in", "range", "(", "top_left", "[", "1", "]", ",", "bot_right", "[", "1", "]", ",", "block_size_y", "*", "int", "(", "downsample", "[", "1", "]", ")", ")", ":", "\n", "#print(x_start, y_start)", "\n", "\n", "# 1. convert wsi coordinates to image coordinates via shift and scale", "\n", "                ", "x_start_img", "=", "int", "(", "(", "x_start", "-", "shift", "[", "0", "]", ")", "/", "int", "(", "downsample", "[", "0", "]", ")", ")", "\n", "y_start_img", "=", "int", "(", "(", "y_start", "-", "shift", "[", "1", "]", ")", "/", "int", "(", "downsample", "[", "1", "]", ")", ")", "\n", "\n", "# 2. compute end points of blend tile, careful not to go over the edge of the image", "\n", "y_end_img", "=", "min", "(", "h", ",", "y_start_img", "+", "block_size_y", ")", "\n", "x_end_img", "=", "min", "(", "w", ",", "x_start_img", "+", "block_size_x", ")", "\n", "\n", "if", "y_end_img", "==", "y_start_img", "or", "x_end_img", "==", "x_start_img", ":", "\n", "                    ", "continue", "\n", "#print('start_coord: {} end_coord: {}'.format((x_start_img, y_start_img), (x_end_img, y_end_img)))", "\n", "\n", "# 3. fetch blend block and size", "\n", "", "blend_block", "=", "img", "[", "y_start_img", ":", "y_end_img", ",", "x_start_img", ":", "x_end_img", "]", "\n", "blend_block_size", "=", "(", "x_end_img", "-", "x_start_img", ",", "y_end_img", "-", "y_start_img", ")", "\n", "\n", "if", "not", "blank_canvas", ":", "\n", "# 4. read actual wsi block as canvas block", "\n", "                    ", "pt", "=", "(", "x_start", ",", "y_start", ")", "\n", "canvas", "=", "np", ".", "array", "(", "self", ".", "wsi", ".", "read_region", "(", "pt", ",", "vis_level", ",", "blend_block_size", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "else", ":", "\n", "# 4. OR create blank canvas block", "\n", "                    ", "canvas", "=", "np", ".", "array", "(", "Image", ".", "new", "(", "size", "=", "blend_block_size", ",", "mode", "=", "\"RGB\"", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "\n", "# 5. blend color block and canvas block", "\n", "", "img", "[", "y_start_img", ":", "y_end_img", ",", "x_start_img", ":", "x_end_img", "]", "=", "cv2", ".", "addWeighted", "(", "blend_block", ",", "alpha", ",", "canvas", ",", "1", "-", "alpha", ",", "0", ",", "canvas", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.get_seg_mask": [[720, 738], ["print", "numpy.full().astype", "WholeSlideImage.WholeSlideImage.scaleContourDim", "tuple", "WholeSlideImage.WholeSlideImage.scaleHolesDim", "zip", "range", "tissue_mask.astype.astype.astype", "print", "len", "cv2.drawContours", "numpy.full", "sorted", "cv2.drawContours", "tissue_mask.astype.astype.sum", "numpy.flip", "zip", "numpy.array", "numpy.array", "cv2.contourArea"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleContourDim", "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.WholeSlideImage.WholeSlideImage.scaleHolesDim"], ["", "def", "get_seg_mask", "(", "self", ",", "region_size", ",", "scale", ",", "use_holes", "=", "False", ",", "offset", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "        ", "print", "(", "'\\ncomputing foreground tissue mask'", ")", "\n", "tissue_mask", "=", "np", ".", "full", "(", "np", ".", "flip", "(", "region_size", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "contours_tissue", "=", "self", ".", "scaleContourDim", "(", "self", ".", "contours_tissue", ",", "scale", ")", "\n", "offset", "=", "tuple", "(", "(", "np", ".", "array", "(", "offset", ")", "*", "np", ".", "array", "(", "scale", ")", "*", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n", "contours_holes", "=", "self", ".", "scaleHolesDim", "(", "self", ".", "holes_tissue", ",", "scale", ")", "\n", "contours_tissue", ",", "contours_holes", "=", "zip", "(", "*", "sorted", "(", "zip", "(", "contours_tissue", ",", "contours_holes", ")", ",", "key", "=", "lambda", "x", ":", "cv2", ".", "contourArea", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "contours_tissue", ")", ")", ":", "\n", "            ", "cv2", ".", "drawContours", "(", "image", "=", "tissue_mask", ",", "contours", "=", "contours_tissue", ",", "contourIdx", "=", "idx", ",", "color", "=", "(", "1", ")", ",", "offset", "=", "offset", ",", "thickness", "=", "-", "1", ")", "\n", "\n", "if", "use_holes", ":", "\n", "                ", "cv2", ".", "drawContours", "(", "image", "=", "tissue_mask", ",", "contours", "=", "contours_holes", "[", "idx", "]", ",", "contourIdx", "=", "-", "1", ",", "color", "=", "(", "0", ")", ",", "offset", "=", "offset", ",", "thickness", "=", "-", "1", ")", "\n", "# contours_holes = self._scaleContourDim(self.holes_tissue, scale, holes=True, area_thresh=area_thresh)", "\n", "\n", "", "", "tissue_mask", "=", "tissue_mask", ".", "astype", "(", "bool", ")", "\n", "print", "(", "'detected {}/{} of region as tissue'", ".", "format", "(", "tissue_mask", ".", "sum", "(", ")", ",", "tissue_mask", ".", "size", ")", ")", "\n", "return", "tissue_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_CLAM.wsi_core.batch_process_utils.initialize_df": [[17, 83], ["len", "isinstance", "default_df_dict.update", "isinstance", "numpy.full", "default_df_dict.update", "default_df_dict.update", "default_df_dict.update", "pandas.DataFrame", "default_df_dict.keys", "pandas.DataFrame", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "int", "int", "int", "int", "bool", "int", "int", "int", "int", "int", "bool", "numpy.full", "numpy.full", "numpy.empty().fill", "numpy.empty().fill", "numpy.empty().fill", "numpy.empty().fill", "slides[].isna", "pd.DataFrame.insert", "int", "int", "len", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "function", ["None"], ["def", "initialize_df", "(", "slides", ",", "seg_params", ",", "filter_params", ",", "vis_params", ",", "patch_params", ",", "\n", "use_heatmap_args", "=", "False", ",", "save_patches", "=", "False", ")", ":", "\n", "\n", "\t", "total", "=", "len", "(", "slides", ")", "\n", "if", "isinstance", "(", "slides", ",", "pd", ".", "DataFrame", ")", ":", "\n", "\t\t", "slide_ids", "=", "slides", ".", "slide_id", ".", "values", "\n", "", "else", ":", "\n", "\t\t", "slide_ids", "=", "slides", "\n", "", "default_df_dict", "=", "{", "'slide_id'", ":", "slide_ids", ",", "'process'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "1", ",", "dtype", "=", "np", ".", "uint8", ")", "}", "\n", "\n", "# initiate empty labels in case not provided", "\n", "if", "use_heatmap_args", ":", "\n", "\t\t", "default_df_dict", ".", "update", "(", "{", "'label'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "-", "1", ")", "}", ")", "\n", "\n", "", "default_df_dict", ".", "update", "(", "{", "\n", "'status'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "'tbp'", ")", ",", "\n", "# seg params", "\n", "'seg_level'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "seg_params", "[", "'seg_level'", "]", ")", ",", "dtype", "=", "np", ".", "int8", ")", ",", "\n", "'sthresh'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "seg_params", "[", "'sthresh'", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "'mthresh'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "seg_params", "[", "'mthresh'", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "'close'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "seg_params", "[", "'close'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "'use_otsu'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "bool", "(", "seg_params", "[", "'use_otsu'", "]", ")", ",", "dtype", "=", "bool", ")", ",", "\n", "'keep_ids'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "seg_params", "[", "'keep_ids'", "]", ")", ",", "\n", "'exclude_ids'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "seg_params", "[", "'exclude_ids'", "]", ")", ",", "\n", "\n", "# filter params", "\n", "'a_t'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "filter_params", "[", "'a_t'", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'a_h'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "filter_params", "[", "'a_h'", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'max_n_holes'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "filter_params", "[", "'max_n_holes'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "\n", "# vis params", "\n", "'vis_level'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "vis_params", "[", "'vis_level'", "]", ")", ",", "dtype", "=", "np", ".", "int8", ")", ",", "\n", "'line_thickness'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "vis_params", "[", "'line_thickness'", "]", ")", ",", "dtype", "=", "np", ".", "uint32", ")", ",", "\n", "\n", "# patching params", "\n", "'use_padding'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "bool", "(", "patch_params", "[", "'use_padding'", "]", ")", ",", "dtype", "=", "bool", ")", ",", "\n", "'contour_fn'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "patch_params", "[", "'contour_fn'", "]", ")", "\n", "}", ")", "\n", "\n", "if", "save_patches", ":", "\n", "\t\t", "default_df_dict", ".", "update", "(", "{", "\n", "'white_thresh'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "patch_params", "[", "'white_thresh'", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "'black_thresh'", ":", "np", ".", "full", "(", "(", "total", ")", ",", "int", "(", "patch_params", "[", "'black_thresh'", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "}", ")", "\n", "\n", "", "if", "use_heatmap_args", ":", "\n", "# initiate empty x,y coordinates in case not provided", "\n", "\t\t", "default_df_dict", ".", "update", "(", "{", "'x1'", ":", "np", ".", "empty", "(", "(", "total", ")", ")", ".", "fill", "(", "np", ".", "NaN", ")", ",", "\n", "'x2'", ":", "np", ".", "empty", "(", "(", "total", ")", ")", ".", "fill", "(", "np", ".", "NaN", ")", ",", "\n", "'y1'", ":", "np", ".", "empty", "(", "(", "total", ")", ")", ".", "fill", "(", "np", ".", "NaN", ")", ",", "\n", "'y2'", ":", "np", ".", "empty", "(", "(", "total", ")", ")", ".", "fill", "(", "np", ".", "NaN", ")", "}", ")", "\n", "\n", "\n", "", "if", "isinstance", "(", "slides", ",", "pd", ".", "DataFrame", ")", ":", "\n", "\t\t", "temp_copy", "=", "pd", ".", "DataFrame", "(", "default_df_dict", ")", "# temporary dataframe w/ default params", "\n", "# find key in provided df", "\n", "# if exist, fill empty fields w/ default values, else, insert the default values as a new column", "\n", "for", "key", "in", "default_df_dict", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "if", "key", "in", "slides", ".", "columns", ":", "\n", "\t\t\t\t", "mask", "=", "slides", "[", "key", "]", ".", "isna", "(", ")", "\n", "slides", ".", "loc", "[", "mask", ",", "key", "]", "=", "temp_copy", ".", "loc", "[", "mask", ",", "key", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "slides", ".", "insert", "(", "len", "(", "slides", ".", "columns", ")", ",", "key", ",", "default_df_dict", "[", "key", "]", ")", "\n", "", "", "", "else", ":", "\n", "\t\t", "slides", "=", "pd", ".", "DataFrame", "(", "default_df_dict", ")", "\n", "\n", "", "return", "slides", "", "", ""]]}