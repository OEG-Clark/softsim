{"home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.__init__": [[399, 403], ["pretrain.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.reset": [[404, 409], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update": [[410, 415], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.__str__": [[416, 419], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.print_ck": [[420, 422], ["None"], "methods", ["None"], ["", "def", "print_ck", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.ProgressMeter.__init__": [[425, 429], ["pretrain.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.ProgressMeter.display": [[430, 434], ["print", "str", "pretrain.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.ProgressMeter._get_batch_fmtstr": [[435, 439], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.main": [[181, 195], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.spawn", "pretrain.main_worker"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.main_worker": [[197, 306], ["print", "pretrain.create_encoder", "pretrain.create_encoder", "utils.builders.builder_fa.MoCo().cuda", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ChexpertLoader.run", "range", "print", "torch.init_process_group", "model.cuda.parameters", "utils.dataloaders.dataloader.ChestDataloader", "pretrain.adjust_learning_rate", "pretrain.train", "int", "utils.builders.builder_fa.MoCo", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "ChexpertLoader", "train_sampler.set_epoch", "pretrain.save_checkpoint", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "top1.print_ck"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.create_encoder", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.create_encoder", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.run", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.adjust_learning_rate", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.train", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.save_checkpoint", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.print_ck"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "densenet121", "\n", "base_encoder", "=", "create_encoder", "(", "backbone", ",", "args", ")", "\n", "momentum_encoder", "=", "create_encoder", "(", "backbone", ",", "args", ")", "\n", "model", "=", "builder_fa", ".", "MoCo", "(", "\n", "base_encoder", ",", "momentum_encoder", ",", "args", ".", "latent_dim", ",", "args", ".", "mem_k", ",", "args", ".", "mom_m", ",", "args", ".", "t", "\n", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# model = builder_fa.MoCo(args.latent_dim, args.mem_k, args.mom_m, args.t, mlp=args.mlp, joint=args.jcl,", "\n", "#                               dense_local=args.densecl)", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "num_workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "task", "=", "args", ".", "task", "[", "0", "]", "\n", "if", "args", ".", "task", "==", "\"chestxray14\"", ":", "\n", "        ", "loader", "=", "ChestDataloader", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "img_resize", "=", "args", ".", "resize", ",", "\n", "root_dir", "=", "args", ".", "data", ",", "\n", "gc_cloud", "=", "args", ".", "gcloud", ",", "\n", "k_crop", "=", "2", ",", "\n", ")", "\n", "", "elif", "args", ".", "task", "==", "\"chexpert\"", ":", "\n", "        ", "loader", "=", "ChexpertLoader", "(", "\n", "root_path", "=", "args", ".", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "img_resize", "=", "args", ".", "resize", "\n", ")", "\n", "\n", "", "pretrain_loader", ",", "train_sampler", "=", "loader", ".", "run", "(", "mode", "=", "\"moco_train\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "top1", ",", "top5", "=", "train", "(", "pretrain_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "\n", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", "\n", ")", ":", "\n", "            ", "save_checkpoint", "(", "\n", "state", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "args", "=", "args", ",", "\n", "ck_name", "=", "\"ck_{:03d}_{}.pth.tar\"", ".", "format", "(", "epoch", ",", "top1", ".", "print_ck", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.save_checkpoint": [[309, 313], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "upload_checkpoint"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "args", ",", "ck_name", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "ck_name", ")", "\n", "prefix", "=", "os", ".", "path", ".", "join", "(", "args", ".", "user", ",", "\"pretrain/s2mts2\"", ",", "args", ".", "upload_name", ")", "\n", "upload_checkpoint", "(", "args", ".", "dst_bucket_project", ",", "args", ".", "dst_bucket_name", ",", "prefix", ",", "ck_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.train": [[315, 377], ["pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.AverageMeter", "pretrain.ProgressMeter", "model.train", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "time.time", "enumerate", "len", "pretrain.AverageMeter.update", "optimizer.zero_grad", "pretrain.AverageMeter.update", "pretrain.AverageMeter.update", "pretrain.accuracy", "pretrain.AverageMeter.update", "pretrain.AverageMeter.update", "pretrain.AverageMeter.update", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "pretrain.AverageMeter.update", "time.time", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "jcl_loss.item", "output.size", "criterion.item", "output.size", "final_loss.item", "images[].size", "images[].size", "images[].size", "pretrain.ProgressMeter.display", "time.time", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "images[].cuda", "images[].cuda", "torch.cuda.amp.GradScaler.scale", "time.time", "m.cuda"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.train", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.accuracy", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.WeightEMA.step", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.ProgressMeter.display"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.4e\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "jcl_losses", "=", "AverageMeter", "(", "\"jcl_Loss\"", ",", "\":.4e\"", ")", "\n", "cls_losses", "=", "AverageMeter", "(", "\"CLS_Loss\"", ",", "\":.4e\"", ")", "\n", "print_infos", "=", "[", "batch_time", ",", "data_time", ",", "losses", ",", "jcl_losses", ",", "cls_losses", ",", "top1", ",", "top5", "]", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "print_infos", ",", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "True", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "_", ",", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "jcl", ":", "\n", "                ", "images", "=", "[", "m", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "for", "m", "in", "images", "]", "\n", "images", "[", "1", "]", "=", "torch", ".", "cat", "(", "images", "[", "1", ":", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "            ", "ratio", "=", "2.0", "*", "(", "(", "epoch", "+", "1", ")", "/", "args", ".", "epochs", ")", "if", "args", ".", "jcl", "else", "None", "\n", "output", ",", "target", ",", "jcl_loss", "=", "model", "(", "\n", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ",", "ratio", "=", "ratio", "\n", ")", "\n", "cls_loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "final_loss", "=", "cls_loss", "+", "jcl_loss", "\n", "\n", "", "jcl_losses", ".", "update", "(", "jcl_loss", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "cls_losses", ".", "update", "(", "cls_loss", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "# TODO acc global and dense", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "final_loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "#", "\n", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "scaler", ".", "scale", "(", "final_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "", "", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.create_encoder": [[379, 394], ["arch", "print", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.Linear"], "function", ["None"], ["", "def", "create_encoder", "(", "arch", ",", "args", ")", ":", "\n", "    ", "model", "=", "arch", "(", "pretrained", "=", "True", ")", "\n", "in_features", "=", "model", ".", "classifier", ".", "in_features", "\n", "if", "args", ".", "mlp", ":", "\n", "        ", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_features", ",", "in_features", ")", "\n", "# model.classifier_mlp3 = nn.Linear(in_features, args.moco_dim, bias=False)", "\n", "model", ".", "classifier_group", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", ",", "in_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", ",", "args", ".", "latent_dim", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_features", ",", "args", ".", "latent_dim", ")", "\n", "", "print", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.adjust_learning_rate": [[441, 451], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.0", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.accuracy": [[453, 468], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.WeightEMA.__init__": [[89, 99], ["list", "list", "zip", "model.state_dict().values", "ema_model.state_dict().values", "param.data.copy_", "model.state_dict", "ema_model.state_dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "ema_model", ",", "alpha", "=", "0.999", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "ema_model", "=", "ema_model", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "params", "=", "list", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "\n", "self", ".", "ema_params", "=", "list", "(", "ema_model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "\n", "# self.wd = 0.02 * args.lr", "\n", "\n", "for", "param", ",", "ema_param", "in", "zip", "(", "self", ".", "params", ",", "self", ".", "ema_params", ")", ":", "\n", "            ", "param", ".", "data", ".", "copy_", "(", "ema_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.WeightEMA.step": [[100, 108], ["zip", "param.type", "ema_param.mul_", "ema_param.add_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "one_minus_alpha", "=", "1.0", "-", "self", ".", "alpha", "\n", "for", "param", ",", "ema_param", "in", "zip", "(", "self", ".", "params", ",", "self", ".", "ema_params", ")", ":", "\n", "            ", "if", "param", ".", "type", "(", ")", "==", "\"torch.cuda.LongTensor\"", ":", "\n", "                ", "ema_param", "=", "param", "\n", "", "else", ":", "\n", "                ", "ema_param", ".", "mul_", "(", "self", ".", "alpha", ")", "\n", "ema_param", ".", "add_", "(", "param", "*", "one_minus_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.__init__": [[111, 134], ["object.__init__", "finetune.Moco_lincls_single.create_log", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "finetune.Moco_lincls_single.create_model", "finetune.Moco_lincls_single.create_optimizer", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "utils.dataloaders.dataloader_semi.ChestDataloader", "finetune.Moco_lincls_single.create_scheduler"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_log", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_model", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_optimizer", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_scheduler"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_log", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "backbone", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "\n", "self", ".", "net1", "=", "self", ".", "create_model", "(", "backbone", ",", "args", ".", "num_class", ",", "args", ".", "mlp", ")", "\n", "\n", "self", ".", "optimizer1", "=", "self", ".", "create_optimizer", "(", ")", "\n", "\n", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "True", ")", "\n", "self", ".", "loader", "=", "ChestDataloader", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "img_resize", "=", "args", ".", "resize", ",", "\n", "root_dir", "=", "args", ".", "data_path", ",", "\n", "gc_cloud", "=", "args", ".", "gcloud", ",", "\n", "imagenet", "=", "args", ".", "imagenet", ",", "\n", ")", "\n", "\n", "self", ".", "lr_scheulder1", "=", "self", ".", "create_scheduler", "(", "\"step\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.deploy": [[135, 188], ["finetune.Moco_lincls_single.loader.run", "finetune.Moco_lincls_single.loader.run", "torch.MultiLabelSoftMarginLoss().cuda", "torch.MultiLabelSoftMarginLoss().cuda", "torch.MultiLabelSoftMarginLoss().cuda", "range", "finetune.Moco_lincls_single.save_checkpoint", "finetune.Moco_lincls_single.loader.run", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "finetune.Moco_lincls_single.net1.load_state_dict", "print", "finetune.Moco_lincls_single.net1.named_parameters", "finetune.Moco_lincls_single.net1.classifier_group.weight.data.normal_", "finetune.Moco_lincls_single.net1.classifier_group.bias.data.zero_", "finetune.Moco_lincls_single.warmup_train", "finetune.Moco_lincls_single.lr_scheulder1.step", "finetune.Moco_lincls_single.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "finetune.Moco_lincls_single.save_checkpoint", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "finetune.Moco_lincls_single.keys", "k.startswith", "k.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.run", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.run", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.save_checkpoint", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.run", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.warmup_train", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.WeightEMA.step", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.test", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.save_checkpoint"], ["", "def", "deploy", "(", "self", ")", ":", "\n", "        ", "test_loader", ",", "_", "=", "self", ".", "loader", ".", "run", "(", "\"test\"", ")", "\n", "labeled_loader", ",", "_", "=", "self", ".", "loader", ".", "run", "(", "\n", "\"sup_train\"", ",", "ratio", "=", "args", ".", "ratio", ",", "runtime", "=", "args", ".", "runtime", "\n", ")", "\n", "if", "args", ".", "ratio", "!=", "100", ":", "\n", "            ", "unlabeled_loader", ",", "_", "=", "self", ".", "loader", ".", "run", "(", "\n", "\"unlabeled\"", ",", "ratio", "=", "args", ".", "ratio", ",", "runtime", "=", "args", ".", "runtime", "\n", ")", "\n", "", "else", ":", "\n", "            ", "unlabeled_loader", "=", "None", "\n", "", "warmup_criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "warmup", "=", "0", "\n", "if", "args", ".", "pretrained", ":", "\n", "            ", "prefix", "=", "os", ".", "path", ".", "join", "(", "args", ".", "user", ",", "args", ".", "download_name", ",", "\"checkpoints\"", ")", "\n", "print", "(", "\"==> loading checkpoint {}\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "checkpoint1", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "state_dict", "=", "checkpoint1", "[", "\"state_dict\"", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# use v2mlp with three layer mlp, remove from middle", "\n", "# use v1mlp with two layer mlp, remove all", "\n", "                ", "if", "k", ".", "startswith", "(", "\"module.encoder_q\"", ")", "and", "not", "k", ".", "startswith", "(", "\n", "\"module.encoder_q.{}\"", ".", "format", "(", "\n", "\"classifier_group\"", "if", "args", ".", "v2mlp", "else", "\"classifier\"", "\n", ")", "\n", ")", ":", "\n", "                    ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "", "args", ".", "start_epoch", "=", "0", "\n", "self", ".", "net1", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"==> loaded checkpoint {}\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "if", "args", ".", "freeze_net", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "net1", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "name", "not", "in", "[", "\"classifier_group.weight\"", ",", "\"classifier_group.bias\"", "]", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "self", ".", "net1", ".", "classifier_group", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "self", ".", "net1", ".", "classifier_group", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "for", "warmup", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "warmup_epochs", ")", ":", "\n", "            ", "state_dict", "=", "self", ".", "warmup_train", "(", "\n", "warmup_criterion", ",", "warmup", ",", "self", ".", "net1", ",", "self", ".", "optimizer1", ",", "labeled_loader", ",", "1", "\n", ")", "\n", "self", ".", "lr_scheulder1", ".", "step", "(", ")", "\n", "mean_auc", "=", "self", ".", "test", "(", "warmup", ",", "test_loader", ")", "\n", "\n", "checkpoint_name", "=", "\"net{}_epoch{}_{}\"", ".", "format", "(", "1", ",", "warmup", ",", "mean_auc", "*", "100", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_name", ")", "\n", "\n", "self", ".", "save_checkpoint", "(", "filename", "=", "checkpoint_name", ")", "\n", "# upload each label auc", "\n", "", "self", ".", "save_checkpoint", "(", "filename", "=", "\"result.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.save_checkpoint": [[189, 193], ["os.path.join", "upload_checkpoint"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "filename", "=", "\"checkpoint\"", ")", ":", "\n", "        ", "prefix", "=", "os", ".", "path", ".", "join", "(", "args", ".", "user", ",", "args", ".", "upload_name", ",", "\"checkpoints\"", ")", "\n", "upload_checkpoint", "(", "\n", "args", ".", "dst_bucket_project", ",", "args", ".", "dst_bucket_name", ",", "prefix", ",", "filename", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.warmup_train": [[195, 217], ["net.train", "enumerate", "tqdm.tqdm.tqdm", "finetune.Moco_lincls_single.scaler.scale().backward", "finetune.Moco_lincls_single.scaler.step", "finetune.Moco_lincls_single.scaler.update", "optimizer.zero_grad", "net.state_dict", "optimizer.state_dict", "inputs.cuda", "labels.squeeze().cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "net", "criterion", "net.float", "labels.float", "finetune.Moco_lincls_single.scaler.scale", "labels.squeeze"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.train", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.WeightEMA.step", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.pretrain.AverageMeter.update"], ["", "def", "warmup_train", "(", "self", ",", "criterion", ",", "epoch", ",", "net", ",", "optimizer", ",", "loader", ",", "train_flag", ")", ":", "\n", "# net.eval()", "\n", "        ", "net", ".", "train", "(", ")", "\n", "\n", "loader", "=", "enumerate", "(", "tqdm", "(", "loader", ",", "desc", "=", "\"Warmup {}\"", ".", "format", "(", "epoch", ")", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "labels", ")", "in", "loader", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "                ", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ".", "float", "(", ")", ",", "labels", ".", "float", "(", ")", ")", "\n", "", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "step", "(", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# print('loss {}'.format(loss.item()))", "\n", "", "state", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"state_dict\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "return", "state", "\n", "# torch.save(state, os.path.join(", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.test": [[220, 264], ["finetune.Moco_lincls_single.net1.eval", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "finetune.Moco_lincls_single.auc_roc_score", "open", "f.write", "tqdm.tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "preds[].squeeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "inputs.cuda", "targets.cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "finetune.Moco_lincls_single.net1", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "targets.detach().cpu().long", "torch.stack().mean.item", "torch.stack().mean.item", "torch.stack().mean.item", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "targets.detach().cpu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "targets.detach"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.auc_roc_score"], ["", "def", "test", "(", "self", ",", "epoch", ",", "loader", ")", ":", "\n", "        ", "self", ".", "net1", ".", "eval", "(", ")", "\n", "targs", ",", "preds", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", ",", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "\n", "tqdm", "(", "loader", ",", "desc", "=", "\"Test{}\"", ".", "format", "(", "epoch", ")", ")", "\n", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "outputs1", "=", "self", ".", "net1", "(", "inputs", ")", "\n", "# outputs = (outputs1 + outputs2) / 2", "\n", "", "outputs", "=", "outputs1", "\n", "\n", "preds", "=", "torch", ".", "cat", "(", "(", "preds", ",", "torch", ".", "sigmoid", "(", "outputs", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "targs", "=", "torch", ".", "cat", "(", "(", "targs", ",", "targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "long", "(", ")", ")", ")", "\n", "", "", "all_auc", "=", "[", "\n", "self", ".", "auc_roc_score", "(", "preds", "[", ":", ",", "i", "]", ".", "squeeze", "(", ")", ",", "targs", ".", "squeeze", "(", ")", "[", ":", ",", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "num_class", "-", "1", ")", "\n", "]", "\n", "mean_auc", "=", "torch", ".", "stack", "(", "all_auc", ")", ".", "mean", "(", ")", "\n", "with", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\n", "\"%03d,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f,%0.6f\\n\"", "\n", "%", "(", "\n", "epoch", ",", "\n", "all_auc", "[", "0", "]", ",", "\n", "all_auc", "[", "1", "]", ",", "\n", "all_auc", "[", "2", "]", ",", "\n", "all_auc", "[", "3", "]", ",", "\n", "all_auc", "[", "4", "]", ",", "\n", "all_auc", "[", "5", "]", ",", "\n", "all_auc", "[", "6", "]", ",", "\n", "all_auc", "[", "7", "]", ",", "\n", "all_auc", "[", "8", "]", ",", "\n", "all_auc", "[", "9", "]", ",", "\n", "all_auc", "[", "10", "]", ",", "\n", "all_auc", "[", "11", "]", ",", "\n", "all_auc", "[", "12", "]", ",", "\n", "all_auc", "[", "13", "]", ",", "\n", "mean_auc", ".", "item", "(", ")", ",", "\n", ")", "\n", ")", "\n", "", "print", "(", "\"| Mean AUC {}\"", ".", "format", "(", "mean_auc", ".", "item", "(", ")", ")", ")", "\n", "return", "mean_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_scheduler": [[265, 273], ["torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["None"], ["", "def", "create_scheduler", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "\"cosine\"", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "self", ".", "optimizer1", ",", "T_max", "=", "10", ",", "eta_min", "=", "0.001", "\n", ")", "\n", "", "elif", "name", "==", "\"step\"", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimizer1", ",", "[", "15", ",", "25", "]", ",", "gamma", "=", "0.1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_log": [[275, 286], ["open", "f.write"], "methods", ["None"], ["", "", "def", "create_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "experiment_name", "=", "args", ".", "desc", "\n", "# self.img_path = os.path.join(args.save, self.experiment_name, 'img')", "\n", "# self.net_path = os.path.join(args.save, self.experiment_name, 'net')", "\n", "self", ".", "log_path", "=", "\"result.csv\"", "\n", "# self.log_path = os.path.join(", "\n", "#     args.save, self.experiment_name, 'results.csv')", "\n", "\n", "with", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\n", "\"epoch,Atelectasis,Cardiomegaly,Effusion,Infiltration,Mass,Nodule,Pneumonia,Pneumothorax,Consolidation,Edema,Emphysema,Fibrosis,Pleural_Thickening,Hernia,Mean\\n\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_model": [[288, 298], ["arch", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arch.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "", "def", "create_model", "(", "self", ",", "arch", ",", "num_class", ",", "mlp", ")", ":", "\n", "        ", "model1", "=", "arch", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ")", "\n", "in_features", "=", "model1", ".", "classifier", ".", "in_features", "\n", "model1", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_features", ",", "in_features", ")", "\n", "model1", ".", "classifier_group", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", ",", "in_features", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", ",", "num_class", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "return", "model1", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.create_optimizer": [[299, 302], ["list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "finetune.Moco_lincls_single.net1.parameters"], "methods", ["None"], ["", "def", "create_optimizer", "(", "self", ")", ":", "\n", "        ", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net1", ".", "parameters", "(", ")", ")", ")", "\n", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "eps", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.auc_roc_score": [[303, 310], ["finetune.Moco_lincls_single.roc_curve", "slice", "slice", "slice", "slice", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.roc_curve"], ["", "def", "auc_roc_score", "(", "self", ",", "input", ",", "targ", ")", ":", "\n", "        ", "\"Computes the area under the receiver operator characteristic (ROC) curve using the trapezoid method. Restricted binary classification tasks.\"", "\n", "fpr", ",", "tpr", "=", "self", ".", "roc_curve", "(", "input", ",", "targ", ")", "\n", "d", "=", "fpr", "[", "1", ":", "]", "-", "fpr", "[", ":", "-", "1", "]", "\n", "sl1", ",", "sl2", "=", "[", "slice", "(", "None", ")", "]", ",", "[", "slice", "(", "None", ")", "]", "\n", "sl1", "[", "-", "1", "]", ",", "sl2", "[", "-", "1", "]", "=", "slice", "(", "1", ",", "None", ")", ",", "slice", "(", "None", ",", "-", "1", ")", "\n", "return", "(", "d", "*", "(", "tpr", "[", "tuple", "(", "sl1", ")", "]", "+", "tpr", "[", "tuple", "(", "sl2", ")", "]", ")", "/", "2.0", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.None.finetune.Moco_lincls_single.roc_curve": [[311, 330], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.argsort", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.cat.float", "torch.cat.float", "torch.cat.float", "torch.cat.float", "torch.cat.float", "torch.cat.float", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len"], "methods", ["None"], ["", "def", "roc_curve", "(", "self", ",", "input", ",", "targ", ")", ":", "\n", "        ", "\"Computes the receiver operator characteristic (ROC) curve by determining the true positive ratio (TPR) and false positive ratio (FPR) for various classification thresholds. Restricted binary classification tasks.\"", "\n", "targ", "=", "targ", "==", "1", "\n", "desc_score_indices", "=", "torch", ".", "flip", "(", "input", ".", "argsort", "(", "-", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "input", "=", "input", "[", "desc_score_indices", "]", "\n", "targ", "=", "targ", "[", "desc_score_indices", "]", "\n", "d", "=", "input", "[", "1", ":", "]", "-", "input", "[", ":", "-", "1", "]", "\n", "distinct_value_indices", "=", "torch", ".", "nonzero", "(", "d", ")", ".", "transpose", "(", "0", ",", "1", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "torch", ".", "cat", "(", "\n", "(", "distinct_value_indices", ",", "torch", ".", "LongTensor", "(", "[", "len", "(", "targ", ")", "-", "1", "]", ")", ".", "to", "(", "targ", ".", "device", ")", ")", "\n", ")", "\n", "tps", "=", "torch", ".", "cumsum", "(", "targ", "*", "1", ",", "dim", "=", "-", "1", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "\n", "if", "tps", "[", "0", "]", "!=", "0", "or", "fps", "[", "0", "]", "!=", "0", ":", "\n", "            ", "zer", "=", "fps", ".", "new_zeros", "(", "1", ")", "\n", "fps", "=", "torch", ".", "cat", "(", "(", "zer", ",", "fps", ")", ")", "\n", "tps", "=", "torch", ".", "cat", "(", "(", "zer", ",", "tps", ")", ")", "\n", "", "fpr", ",", "tpr", "=", "fps", ".", "float", "(", ")", "/", "fps", "[", "-", "1", "]", ",", "tps", ".", "float", "(", ")", "/", "tps", "[", "-", "1", "]", "\n", "return", "fpr", ",", "tpr", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.Normalize.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.Normalize.forward": [[27, 31], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.0", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.SELayer.__init__": [[34, 42], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.SELayer.forward": [[44, 49], ["x.size", "model_se.SELayer.avg_pool().view", "model_se.SELayer.fc().view", "model_se.SELayer.avg_pool", "model_se.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.__init__": [[52, 88], ["torch.Module.__init__", "float", "model_se._DenseLayer.add_module", "model_se._DenseLayer.add_module", "model_se._DenseLayer.add_module", "model_se._DenseLayer.add_module", "model_se._DenseLayer.add_module", "model_se._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_input_features", ",", "\n", "growth_rate", ",", "\n", "bn_size", ",", "\n", "drop_rate", ",", "\n", "memory_efficient", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\"norm1\"", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "\"relu1\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "\n", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "num_input_features", ",", "\n", "bn_size", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "self", ".", "add_module", "(", "\"norm2\"", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "\"relu2\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "\n", "\"conv2\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "bn_size", "*", "growth_rate", ",", "\n", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "self", ".", "drop_rate", "=", "float", "(", "drop_rate", ")", "\n", "self", ".", "memory_efficient", "=", "memory_efficient", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.bn_function": [[89, 96], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_se._DenseLayer.conv1", "model_se._DenseLayer.relu1", "model_se._DenseLayer.norm1"], "methods", ["None"], ["", "def", "bn_function", "(", "self", ",", "inputs", ")", ":", "\n", "# type: (List[Tensor]) -> Tensor", "\n", "        ", "concated_features", "=", "torch", ".", "cat", "(", "inputs", ",", "1", ")", "\n", "bottleneck_output", "=", "self", ".", "conv1", "(", "\n", "self", ".", "relu1", "(", "self", ".", "norm1", "(", "concated_features", ")", ")", "\n", ")", "# noqa: T484", "\n", "return", "bottleneck_output", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.any_requires_grad": [[98, 104], ["None"], "methods", ["None"], ["", "def", "any_requires_grad", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> bool", "\n", "        ", "for", "tensor", "in", "input", ":", "\n", "            ", "if", "tensor", ".", "requires_grad", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.call_checkpoint_bottleneck": [[105, 112], ["torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "model_se._DenseLayer.bn_function"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.bn_function"], ["", "@", "torch", ".", "jit", ".", "unused", "# noqa: T484", "\n", "def", "call_checkpoint_bottleneck", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> Tensor", "\n", "        ", "def", "closure", "(", "*", "inputs", ")", ":", "\n", "            ", "return", "self", ".", "bn_function", "(", "inputs", ")", "\n", "\n", "", "return", "cp", ".", "checkpoint", "(", "closure", ",", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.forward": [[125, 145], ["isinstance", "model_se._DenseLayer.conv2", "model_se._DenseLayer.any_requires_grad", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "model_se._DenseLayer.call_checkpoint_bottleneck", "model_se._DenseLayer.bn_function", "model_se._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "Exception", "model_se._DenseLayer.norm2"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.any_requires_grad", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.call_checkpoint_bottleneck", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseLayer.bn_function"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "# noqa: F811", "\n", "        ", "if", "isinstance", "(", "input", ",", "Tensor", ")", ":", "\n", "            ", "prev_features", "=", "[", "input", "]", "\n", "", "else", ":", "\n", "            ", "prev_features", "=", "input", "\n", "\n", "", "if", "self", ".", "memory_efficient", "and", "self", ".", "any_requires_grad", "(", "prev_features", ")", ":", "\n", "            ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Memory Efficient not supported in JIT\"", ")", "\n", "\n", "", "bottleneck_output", "=", "self", ".", "call_checkpoint_bottleneck", "(", "prev_features", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck_output", "=", "self", ".", "bn_function", "(", "prev_features", ")", "\n", "\n", "", "new_features", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "self", ".", "norm2", "(", "bottleneck_output", ")", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "\n", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", "\n", ")", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseBlock.__init__": [[150, 169], ["torch.ModuleDict.__init__", "range", "model_se._DenseLayer", "model_se._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_layers", ",", "\n", "num_input_features", ",", "\n", "bn_size", ",", "\n", "growth_rate", ",", "\n", "drop_rate", ",", "\n", "memory_efficient", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "\n", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "\"denselayer%d\"", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._DenseBlock.forward": [[170, 176], ["model_se._DenseBlock.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "init_features", ")", ":", "\n", "        ", "features", "=", "[", "init_features", "]", "\n", "for", "name", ",", "layer", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "new_features", "=", "layer", "(", "features", ")", "\n", "features", ".", "append", "(", "new_features", ")", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._Transition.__init__": [[179, 194], ["torch.Sequential.__init__", "model_se._Transition.add_module", "model_se._Transition.add_module", "model_se._Transition.add_module", "model_se._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\"norm\"", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "\"conv\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "num_input_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "\"pool\"", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.DenseNet.__init__": [[212, 289], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "model_se.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "model_se._DenseBlock", "model_se.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_se._Transition", "model_se.DenseNet.features.add_module", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "\n", "bn_size", "=", "4", ",", "\n", "drop_rate", "=", "0", ",", "\n", "num_classes", "=", "1000", ",", "\n", "memory_efficient", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"conv0\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "3", ",", "\n", "num_init_features", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"norm0\"", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "\"relu0\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"pool0\"", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "# self.features.add_module('SELayer_0a', SELayer(channel=num_init_features))", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "# self.features.add_module('SELayer_%da' % (", "\n", "#         i + 1), SELayer(channel=num_features))", "\n", "            ", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\"denseblock%d\"", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "# self.features.add_module('SELayer_%db' % (", "\n", "#         i + 1), SELayer(channel=num_features))", "\n", "\n", "                ", "trans", "=", "_Transition", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "\n", ")", "\n", "# self.features.add_module('SELayer_%db' % (", "\n", "#         i + 1), SELayer(channel=num_features // 2))", "\n", "self", ".", "features", ".", "add_module", "(", "\"transition%d\"", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "\"norm5\"", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# self.features.add_module('SELayer_0b', SELayer(channel=num_features))", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "classifier_group", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "self", ".", "classifier_group", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.DenseNet.forward": [[290, 300], ["model_se.DenseNet.features", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model_se.DenseNet.classifier", "model_se.DenseNet.relu", "model_se.DenseNet.classifier_group", "model_se.DenseNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "leaky_relu", "(", "features", ",", "0.1", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "# N C H W", "\n", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "classifier", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "classifier_group", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._load_state_dict": [[302, 319], ["re.compile", "torch.hub.load_state_dict_from_url", "list", "model.load_state_dict", "torch.hub.load_state_dict_from_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "", "def", "_load_state_dict", "(", "model", ",", "model_url", ",", "progress", ")", ":", "\n", "# '.'s are no longer allowed in module names, but previous _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "\n", "r\"^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$\"", "\n", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "            ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._densenet": [[321, 329], ["model_se.DenseNet", "print", "model_se._load_state_dict"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._load_state_dict"], ["", "def", "_densenet", "(", "\n", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"=> Load ImageNet pre-train\"", ")", "\n", "_load_state_dict", "(", "model", ",", "model_urls", "[", "arch", "]", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.densenet121": [[331, 343], ["model_se._densenet"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "\n", "\"densenet121\"", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.densenet161": [[346, 358], ["model_se._densenet"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "\n", "\"densenet161\"", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.densenet169": [[361, 373], ["model_se._densenet"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "\n", "\"densenet169\"", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se.densenet201": [[376, 388], ["model_se._densenet"], "function", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.model_se._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "\n", "\"densenet201\"", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.utils.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo.__init__": [[11, 46], ["torch.Module.__init__", "zip", "builder_fa.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder_fa.MoCo.register_buffer", "builder_fa.MoCo.encoder_q.parameters", "builder_fa.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "momentum_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: utils momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "encoder_q", "=", "base_encoder", "\n", "self", ".", "encoder_k", "=", "momentum_encoder", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "# self.encoder_q = base_encoder(num_classes=dim)", "\n", "# self.encoder_k = base_encoder(num_classes=dim)", "\n", "\n", "# if mlp:  # hack: brute-force replacement", "\n", "# dim_mlp = self.encoder_q.fc.weight.shape[1]", "\n", "# self.encoder_q.fc = nn.Sequential(", "\n", "#     nn.Linear(dim_mlp, dim_mlp), nn.ReLU(), self.encoder_q.fc)", "\n", "# self.encoder_k.fc = nn.Sequential(", "\n", "#     nn.Linear(dim_mlp, dim_mlp), nn.ReLU(), self.encoder_k.fc)", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo._momentum_update_key_encoder": [[47, 54], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder_fa.MoCo.encoder_q.parameters", "builder_fa.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo._dequeue_and_enqueue": [[55, 70], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_fa.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo._batch_shuffle_ddp": [[71, 97], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_fa.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo._batch_unshuffle_ddp": [[98, 116], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_fa.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.MoCo.forward": [[117, 185], ["builder_fa.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.mean.squeeze", "torch.mean.squeeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder_fa.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_fa.MoCo._momentum_update_key_encoder", "builder_fa.MoCo._batch_shuffle_ddp", "builder_fa.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder_fa.MoCo._batch_unshuffle_ddp", "int", "builder_fa.MoCo.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "value_minus_mean.permute", "value_minus_mean.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder_fa.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.bmm().mean", "torch.bmm().mean", "torch.bmm().mean", "torch.bmm().mean", "builder_fa.MoCo.queue.clone", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.functional.normalize.reshape", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.functional.normalize.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.functional.normalize.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ",", "ratio", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "# im_k, idx_unshuffle = self._batch_shuffle_ddp(im_k)", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "q_shape", "=", "q", ".", "shape", "[", "0", "]", "\n", "k_tryies", "=", "k", ".", "shape", "[", "0", "]", "/", "q_shape", "\n", "k_tryies", "=", "int", "(", "k_tryies", ")", "\n", "k_new_shape", "=", "k", ".", "view", "(", "k_tryies", ",", "q_shape", ",", "-", "1", ")", "\n", "k_means", "=", "torch", ".", "mean", "(", "k_new_shape", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "# Sample * Batch_size * Feature_dim", "\n", "value_minus_mean", "=", "k_new_shape", "-", "k_means", "\n", "# batch_size * sample * feature_dim", "\n", "value_minus_mean_part_1", "=", "value_minus_mean", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# batch_size * feature_dim * sample", "\n", "value_minus_mean_part_2", "=", "value_minus_mean", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "# batch_size * feature_dim * feature_dim", "\n", "k_sigma", "=", "torch", ".", "bmm", "(", "value_minus_mean_part_2", ",", "\n", "value_minus_mean_part_1", ")", "/", "k_tryies", "\n", "k_sigma", "=", "k_sigma", "*", "ratio", "/", "self", ".", "T", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "k_means", "=", "k_means", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "\n", "[", "q", ",", "k_means", "+", "0.5", "*", "torch", ".", "bmm", "(", "k_sigma", ",", "q", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# l_pos = torch.einsum('nc,nc->n',[q,k]).unsqueeze(-1)", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k_means", ")", "\n", "N", ",", "C", "=", "q", ".", "shape", "\n", "jcl_loss", "=", "0.5", "*", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "q", ".", "reshape", "(", "N", ",", "1", ",", "C", ")", ",", "k_sigma", ")", ",", "\n", "q", ".", "reshape", "(", "N", ",", "C", ",", "1", ")", ")", ".", "mean", "(", ")", "/", "self", ".", "T", "\n", "return", "logits", ",", "labels", ",", "jcl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder_fa.concat_all_gather": [[187, 199], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo.__init__": [[11, 47], ["torch.Module.__init__", "zip", "builder.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.register_buffer", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "momentum_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ",", "imagenet", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: utils momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "# model1 = base_encoder(pretrained=imagenet)", "\n", "# model2 = base_encoder(pretrained=imagenet)", "\n", "# model1.classifier = nn.Linear(1024,dim)", "\n", "# model2.classifier = nn.Linear(1024,dim)", "\n", "self", ".", "encoder_q", "=", "base_encoder", "\n", "self", ".", "encoder_k", "=", "momentum_encoder", "\n", "\n", "# if mlp:  # hack: brute-force replacement", "\n", "#     dim_mlp = self.encoder_q.classifier.weight.shape[1]", "\n", "#     self.encoder_q.classifier = nn.Sequential(nn.Linear(dim_mlp, dim_mlp), nn.ReLU(), self.encoder_q.classifier)", "\n", "#     self.encoder_k.classifier = nn.Sequential(nn.Linear(dim_mlp, dim_mlp), nn.ReLU(), self.encoder_k.classifier)", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "# 128, 65536", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._momentum_update_key_encoder": [[48, 55], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._dequeue_and_enqueue": [[56, 71], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_shuffle_ddp": [[72, 99], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_unshuffle_ddp": [[100, 118], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo.forward": [[119, 167], ["builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.MoCo._momentum_update_key_encoder", "builder.MoCo._batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "# print('q',q.shape)", "\n", "# print('queue',self.queue.clone().detach().shape)", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.builders.builder.concat_all_gather": [[170, 182], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.ChestDataset.__init__": [[37, 82], ["os.path.join", "pandas.read_csv", "os.path.join", "numpy.asarray", "os.path.join", "numpy.asarray", "numpy.zeros", "enumerate", "len", "pandas.read_csv.to_dict", "open", "f.read().splitlines", "open", "f.read().splitlines", "i.split", "mlb.fit_transform().squeeze", "numpy.asarray", "numpy.setdiff1d", "numpy.asarray", "numpy.zeros", "enumerate", "i.split", "mlb.fit_transform().squeeze", "f.read", "f.read", "mlb.fit_transform", "mlb.fit_transform"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", ",", "mode", ",", "runtime", "=", "1", ",", "ratio", "=", "100", ")", "->", "None", ":", "\n", "        ", "if", "len", "(", "transform", ")", ">", "1", ":", "\n", "            ", "self", ".", "strong_aug", ",", "self", ".", "weak_aug", "=", "transform", "\n", "", "else", ":", "\n", "            ", "self", ".", "weak_aug", "=", "transform", "[", "0", "]", "\n", "", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "gr_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"Data_Entry_2017.csv\"", ")", "\n", "gr", "=", "pd", ".", "read_csv", "(", "gr_path", ",", "index_col", "=", "0", ")", "\n", "gr", "=", "gr", ".", "to_dict", "(", ")", "[", "\"Finding Labels\"", "]", "\n", "\n", "img_list", "=", "os", ".", "path", ".", "join", "(", "\n", "root_dir", ",", "\n", "\"test_list.txt\"", "\n", "if", "mode", "==", "\"test\"", "\n", "else", "\"train_val_list_{}_{}.txt\"", ".", "format", "(", "ratio", ",", "runtime", ")", ",", "\n", ")", "\n", "with", "open", "(", "img_list", ")", "as", "f", ":", "\n", "            ", "names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "self", ".", "labeled_imgs", "=", "np", ".", "asarray", "(", "[", "x", "for", "x", "in", "names", "]", ")", "\n", "\n", "all_img_list", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"train_val_list.txt\"", ")", "\n", "with", "open", "(", "all_img_list", ")", "as", "f", ":", "\n", "            ", "all_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# gr = np.asarray([gr[i] for i in all_names])", "\n", "\n", "", "labeled_gr", "=", "np", ".", "asarray", "(", "[", "gr", "[", "i", "]", "for", "i", "in", "self", ".", "labeled_imgs", "]", ")", "\n", "# self.unlabeled_gr = np.asarray([gr[i] for i in self.unlabeled_imgs])", "\n", "\n", "\n", "self", ".", "labeled_gr", "=", "np", ".", "zeros", "(", "(", "labeled_gr", ".", "shape", "[", "0", "]", ",", "15", ")", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "labeled_gr", ")", ":", "\n", "            ", "target", "=", "i", ".", "split", "(", "\"|\"", ")", "\n", "binary_result", "=", "mlb", ".", "fit_transform", "(", "[", "[", "Labels", "[", "i", "]", "for", "i", "in", "target", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "labeled_gr", "[", "idx", "]", "=", "binary_result", "\n", "", "if", "mode", "==", "\"unlabeled\"", ":", "\n", "            ", "self", ".", "all_imgs", "=", "np", ".", "asarray", "(", "[", "x", "for", "x", "in", "all_names", "]", ")", "\n", "self", ".", "unlabeled_imgs", "=", "np", ".", "setdiff1d", "(", "self", ".", "all_imgs", ",", "self", ".", "labeled_imgs", ")", "\n", "unlabeled_gr", "=", "np", ".", "asarray", "(", "[", "gr", "[", "i", "]", "for", "i", "in", "self", ".", "unlabeled_imgs", "]", ")", "\n", "self", ".", "unlabeled_gr", "=", "np", ".", "zeros", "(", "(", "unlabeled_gr", ".", "shape", "[", "0", "]", ",", "15", ")", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "unlabeled_gr", ")", ":", "\n", "                ", "target", "=", "i", ".", "split", "(", "\"|\"", ")", "\n", "binary_result", "=", "mlb", ".", "fit_transform", "(", "[", "[", "Labels", "[", "i", "]", "for", "i", "in", "target", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "unlabeled_gr", "[", "idx", "]", "=", "binary_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.ChestDataset.__getitem__": [[86, 115], ["skimage.io.imread", "PIL.Image.fromarray().convert", "dataloader_semi.ChestDataset.strong_aug", "dataloader_semi.ChestDataset.weak_aug", "os.path.join", "skimage.io.imread", "PIL.Image.fromarray().convert", "dataloader_semi.ChestDataset.strong_aug", "dataloader_semi.ChestDataset.weak_aug", "PIL.Image.fromarray", "os.path.join", "skimage.io.imread", "PIL.Image.fromarray().convert", "dataloader_semi.ChestDataset.weak_aug", "PIL.Image.fromarray", "os.path.join", "PIL.Image.fromarray"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"labeled\"", ":", "\n", "            ", "img", "=", "io", ".", "imread", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"data\"", ",", "self", ".", "labeled_imgs", "[", "item", "]", ")", "\n", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_s", "=", "self", ".", "strong_aug", "(", "img", ")", "\n", "img_w", "=", "self", ".", "weak_aug", "(", "img", ")", "\n", "# img2 = self.transform(img)", "\n", "target", "=", "self", ".", "labeled_gr", "[", "item", "]", "\n", "return", "img_s", ",", "img_w", ",", "target", ",", "item", "\n", "", "elif", "self", ".", "mode", "==", "\"unlabeled\"", ":", "\n", "            ", "img", "=", "io", ".", "imread", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"data\"", ",", "self", ".", "unlabeled_imgs", "[", "item", "]", ")", "\n", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_s", "=", "self", ".", "strong_aug", "(", "img", ")", "\n", "img_w", "=", "self", ".", "weak_aug", "(", "img", ")", "\n", "target", "=", "self", ".", "unlabeled_gr", "[", "item", "]", "\n", "# img2 = self.transform(img)", "\n", "return", "img_s", ",", "img_w", ",", "target", ",", "item", "\n", "", "elif", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "img", "=", "io", ".", "imread", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"data\"", ",", "self", ".", "labeled_imgs", "[", "item", "]", ")", "\n", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_w", "=", "self", ".", "weak_aug", "(", "img", ")", "\n", "target", "=", "self", ".", "labeled_gr", "[", "item", "]", "\n", "return", "img_w", ",", "target", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.ChestDataset.__len__": [[116, 121], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"labeled\"", "or", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "return", "self", ".", "labeled_imgs", ".", "shape", "[", "0", "]", "\n", "", "elif", "self", ".", "mode", "==", "\"unlabeled\"", ":", "\n", "            ", "return", "self", ".", "unlabeled_imgs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.GaussianBlur.__init__": [[126, 128], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", "0.1", ",", "2.0", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.GaussianBlur.__call__": [[129, 133], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.ChestDataloader.__init__": [[136, 191], ["print", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "download_chestxray_unzip", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomRotation", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.ColorJitter", "dataloader_semi.GaussianBlur"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "8", ",", "\n", "img_resize", "=", "512", ",", "\n", "root_dir", "=", "None", ",", "\n", "gc_cloud", "=", "False", ",", "\n", "imagenet", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "img_resize", "=", "img_resize", "\n", "if", "imagenet", ":", "\n", "            ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "else", ":", "\n", "            ", "mean", "=", "[", "0.508135", ",", "0.508135", ",", "0.508135", "]", "\n", "std", "=", "[", "0.252920", ",", "0.252920", ",", "0.252920", "]", "\n", "\n", "", "print", "(", "\"Use GCloud: {} \"", ".", "format", "(", "gc_cloud", ")", ")", "\n", "if", "gc_cloud", ":", "\n", "            ", "download_chestxray_unzip", "(", "root_dir", ")", "\n", "\n", "", "self", ".", "root_dir", "=", "root_dir", "\n", "\n", "self", ".", "strong_aug", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "img_resize", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", "]", ",", "p", "=", "0.8", "\n", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "45", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur", "(", "[", "0.1", ",", "2.0", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "# transforms.RandomRotation(5),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "# transforms.RandomErasing(inplace=True)", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "weaka_aug", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "img_resize", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "img_resize", "+", "32", "*", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_semi.ChestDataloader.run": [[194, 221], ["dataloader_semi.ChestDataset", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", ",", "exp", "=", "None", ",", "ratio", "=", "100", ",", "runtime", "=", "1", ")", ":", "\n", "        ", "use_transform", "=", "(", "\n", "[", "self", ".", "strong_aug", ",", "self", ".", "weaka_aug", "]", "\n", "if", "mode", "==", "\"labeled\"", "or", "mode", "==", "\"unlabeled\"", "\n", "else", "[", "self", ".", "transform_test", "]", "\n", ")", "\n", "\n", "all_dataset", "=", "ChestDataset", "(", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "\n", "transform", "=", "use_transform", ",", "\n", "mode", "=", "mode", ",", "\n", "ratio", "=", "ratio", ",", "\n", "runtime", "=", "runtime", ",", "\n", ")", "\n", "sampler", "=", "None", "\n", "batch_size", "=", "(", "self", ".", "batch_size", "*", "8", ")", "if", "mode", "==", "\"test\"", "else", "self", ".", "batch_size", "\n", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "all_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "loader", ",", "sampler", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.ChexpertDataset.__init__": [[15, 50], ["os.path.join", "open", "open.close", "open.readline", "open.readline.split", "os.path.basename().split", "os.path.join", "os.path.join", "numpy.asarray", "numpy.count_nonzero", "dataloader_xpert.ChexpertDataset.img_paths.append", "dataloader_xpert.ChexpertDataset.labels.append", "os.path.basename", "int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "img_filepath", ",", "transform", ",", "policy", "=", "'ones'", ")", ":", "\n", "        ", "img_filepath", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "img_filepath", ")", "\n", "\n", "# filter lateral", "\n", "# all_tokens = all_tokens[all_tokens[keys[3]] != 'Lateral']", "\n", "# all_tokens = all_tokens.reset_index()", "\n", "# fill nan with 0", "\n", "# all_tokens = all_tokens.fillna(1 if policy == 'ones' else 0)", "\n", "# all_tokens = all_tokens.fillna(0)", "\n", "# fill -1 with 0", "\n", "# all_tokens = all_tokens.replace(-1,0)", "\n", "# all_tokens = all_tokens.replace(-1, 1 if policy == 'ones' else 0)", "\n", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "file_d", "=", "open", "(", "img_filepath", ",", "'r'", ")", "\n", "line", "=", "True", "\n", "while", "line", ":", "\n", "            ", "line", "=", "file_d", ".", "readline", "(", ")", "\n", "if", "line", ":", "\n", "                ", "lineItems", "=", "line", ".", "split", "(", ")", "\n", "img_path", "=", "os", ".", "path", ".", "basename", "(", "lineItems", "[", "0", "]", ")", ".", "split", "(", "'_'", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_path", "[", "0", "]", ",", "img_path", "[", "1", "]", ",", "img_path", "[", "2", "]", "+", "'_'", "+", "img_path", "[", "3", "]", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'train'", ",", "img_path", ")", "\n", "\n", "label", "=", "lineItems", "[", "1", ":", "]", "\n", "label", "=", "np", ".", "asarray", "(", "[", "int", "(", "float", "(", "i", ")", ")", "for", "i", "in", "label", "]", ")", "\n", "if", "np", ".", "count_nonzero", "(", "label", ")", "!=", "0", ":", "\n", "                    ", "self", ".", "img_paths", ".", "append", "(", "img_path", ")", "\n", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "", "file_d", ".", "close", "(", ")", "\n", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.ChexpertDataset.__getitem__": [[51, 68], ["os.path.join", "skimage.io.imread", "PIL.Image.fromarray().convert", "dataloader_xpert.ChexpertDataset.transform", "torch.FloatTensor", "range", "imgs.append", "PIL.Image.fromarray", "dataloader_xpert.ChexpertDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_paths", "[", "item", "]", ")", "\n", "# print(img)", "\n", "img", "=", "io", ".", "imread", "(", "img", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_trans1", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "target", "=", "torch", ".", "FloatTensor", "(", "self", ".", "labels", "[", "item", "]", ")", "\n", "# if np.count_nonzero(target) == 0:", "\n", "#     target = np.append(target,1)", "\n", "# else:", "\n", "#     target = np.append(target,0)", "\n", "\n", "imgs", "=", "[", "img_trans1", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "self", ".", "transform", "(", "img", ")", ")", "\n", "", "return", "imgs", ",", "target", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.ChexpertDataset.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.GaussianBlur.__init__": [[76, 78], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.GaussianBlur.__call__": [[79, 83], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.ChexpertLoader.__init__": [[86, 126], ["torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomRotation", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomAffine", "torchvision.transforms.transforms.ColorJitter", "dataloader_xpert.GaussianBlur", "torchvision.transforms.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "batch_size", ",", "img_resize", "=", "128", ",", "gcloud", "=", "True", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "root_path", "=", "root_path", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "# if gcloud:", "\n", "#     download_chexpert_unzip(root_path)", "\n", "self", ".", "moco_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "img_resize", ",", "img_resize", ")", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "RandomAffine", "(", "10", ")", "\n", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "# transforms.RandomErasing(p=0.5, inplace=True),", "\n", "]", ")", "\n", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize(img_resize),", "\n", "# transforms.CenterCrop(img_resize),", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "img_resize", ",", "img_resize", ")", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "10", ")", ",", "\n", "# transforms.RandomApply(", "\n", "#     [GaussianBlur([.1, 2.])], p=0.5),", "\n", "# transforms.RandomRotation(5),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "self", ".", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "img_resize", ",", "img_resize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader_xpert.ChexpertLoader.run": [[128, 152], ["dataloader_xpert.ChexpertDataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", "=", "'train'", ",", "ratio", "=", "100", ")", ":", "\n", "        ", "if", "mode", "==", "'label'", ":", "\n", "            ", "file_path", "=", "f'train_{ratio}.txt'", "\n", "transform", "=", "self", ".", "train_transform", "\n", "", "if", "mode", "==", "'unlabel'", ":", "\n", "            ", "file_path", "=", "f'train_500_unlab.txt'", "\n", "transform", "=", "self", ".", "train_transform", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_path", "=", "f'train_500_test_10000.txt'", "\n", "transform", "=", "self", ".", "val_transform", "\n", "", "elif", "mode", "==", "'moco_train'", ":", "\n", "            ", "file_path", "=", "'train.csv'", "\n", "transform", "=", "self", ".", "moco_transform", "\n", "", "chexpert_dataset", "=", "ChexpertDataset", "(", "root_path", "=", "self", ".", "root_path", ",", "img_filepath", "=", "file_path", ",", "\n", "transform", "=", "transform", ")", "\n", "if", "mode", "==", "'moco_train'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "chexpert_dataset", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "", "loader", "=", "DataLoader", "(", "dataset", "=", "chexpert_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "if", "mode", "!=", "'test'", "else", "False", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "if", "'label'", "in", "mode", "else", "False", ",", "num_workers", "=", "8", ")", "\n", "return", "loader", ",", "sampler", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.ISICDataset.__init__": [[15, 22], ["torch.utils.data.Dataset.__init__", "pandas.read_csv", "pandas.read_csv.iloc[].values.astype", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "img_filepath", ",", "transform", ")", ":", "\n", "        ", "super", "(", "ISICDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "gr", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root_path", ",", "img_filepath", ")", ")", "\n", "self", ".", "root", "=", "root_path", "\n", "self", ".", "imgs", "=", "gr", "[", "'image'", "]", ".", "values", "\n", "self", ".", "gr", "=", "gr", ".", "iloc", "[", ":", ",", "1", ":", "-", "1", "]", ".", "values", ".", "astype", "(", "int", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.ISICDataset.__getitem__": [[23, 33], ["os.path.join", "PIL.Image.open().convert", "dataloaders_isic.ISICDataset.transform", "range", "imgs.append", "PIL.Image.open", "dataloaders_isic.ISICDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "imgs", "[", "item", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train'", ",", "img_path", "+", "'.jpg'", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "self", ".", "gr", "[", "item", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "imgs", "=", "[", "img1", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "self", ".", "transform", "(", "img", ")", ")", "\n", "", "return", "imgs", ",", "target", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.ISICDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.GaussianBlur.__init__": [[41, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.GaussianBlur.__call__": [[44, 48], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.ISICLoader.__init__": [[51, 84], ["torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "utils.gcloud.download_isic_unzip", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.CenterCrop", "torchvision.transforms.transforms.RandomAffine", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomAffine", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.ColorJitter", "dataloaders_isic.GaussianBlur"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "batch_size", ",", "img_resize", "=", "224", ",", "gcloud", "=", "True", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "root_path", "=", "root_path", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "if", "gcloud", ":", "\n", "            ", "download_isic_unzip", "(", "root_path", ")", "\n", "", "self", ".", "moco_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "img_resize", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "img_resize", ")", ",", "\n", "transforms", ".", "RandomAffine", "(", "10", ",", "translate", "=", "(", "0.02", ",", "0.02", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "img_resize", ",", "img_resize", ")", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomAffine", "(", "10", ",", "translate", "=", "(", "0.02", ",", "0.02", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "self", ".", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "img_resize", ",", "img_resize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloaders_isic.ISICLoader.run": [[86, 113], ["dataloaders_isic.ISICDataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", "=", "'train'", ",", "ratio", "=", "20", ",", "runtime", "=", "1", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "file_path", "=", "'training.csv'", "\n", "transform", "=", "self", ".", "train_transform", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "file_path", "=", "'testing.csv'", "\n", "transform", "=", "self", ".", "val_transform", "\n", "", "elif", "mode", "==", "'moco_train'", ":", "\n", "            ", "file_path", "=", "'training.csv'", "\n", "transform", "=", "self", ".", "moco_transform", "\n", "", "elif", "mode", "==", "'labeled'", ":", "\n", "            ", "file_path", "=", "f'isic2018_label{ratio}_{runtime}.csv'", "\n", "transform", "=", "self", ".", "train_transform", "\n", "", "elif", "mode", "==", "'unlabeled'", ":", "\n", "            ", "file_path", "=", "f'isic2018_unlabel{ratio}_{runtime}.csv'", "\n", "transform", "=", "self", ".", "train_transform", "\n", "", "chexpert_dataset", "=", "ISICDataset", "(", "root_path", "=", "self", ".", "root_path", ",", "img_filepath", "=", "file_path", ",", "\n", "transform", "=", "transform", ",", ")", "\n", "if", "mode", "==", "'moco_train'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "chexpert_dataset", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "", "loader", "=", "DataLoader", "(", "dataset", "=", "chexpert_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "if", "mode", "==", "'train'", "else", "False", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "if", "'train'", "in", "mode", "else", "False", ",", "num_workers", "=", "8", ")", "\n", "return", "loader", ",", "sampler", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.Cutout.__init__": [[28, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", ",", "length", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.Cutout.__call__": [[32, 60], ["img.size", "img.size", "numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes of dimension length x length cut out of it.\n        \"\"\"", "\n", "h", "=", "img", ".", "size", "(", "1", ")", "\n", "w", "=", "img", ".", "size", "(", "2", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataset.__init__": [[63, 92], ["os.path.join", "pandas.read_csv", "os.path.join", "numpy.asarray", "numpy.asarray", "numpy.zeros", "enumerate", "numpy.asarray.to_dict", "open", "f.read().splitlines", "i.split", "mlb.fit_transform().squeeze", "f.read", "mlb.fit_transform"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", ",", "mode", ",", "runtime", "=", "1", ",", "ratio", "=", "100", ",", "k_crop", "=", "5", ")", "->", "None", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "k_crops", "=", "k_crop", "\n", "\n", "gr_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'Data_Entry_2017.csv'", ")", "\n", "gr", "=", "pd", ".", "read_csv", "(", "gr_path", ",", "index_col", "=", "0", ")", "\n", "gr", "=", "gr", ".", "to_dict", "(", ")", "[", "'Finding Labels'", "]", "\n", "\n", "read_img_list", "=", "'test_list.txt'", "if", "self", ".", "mode", "==", "'test'", "else", "'valid_list.txt'", "if", "self", ".", "mode", "==", "'val'", "else", "'train_val_list_{}_{}.txt'", ".", "format", "(", "\n", "ratio", ",", "runtime", ")", "if", "self", ".", "mode", "==", "'sup_train'", "else", "'train_val_list.txt'", "\n", "img_path_list", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "read_img_list", ")", "\n", "# img_all_path_list = os.path.join(root_dir,'train_val_list.txt')", "\n", "with", "open", "(", "img_path_list", ")", "as", "f", ":", "\n", "            ", "names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# with open(img_all_path_list) as f:", "\n", "#     all_names = f.read().splitlines()", "\n", "", "self", ".", "imgs", "=", "np", ".", "asarray", "(", "[", "x", "for", "x", "in", "names", "]", ")", "\n", "# self.all_imgs = np.asarray([x for x in all_names])", "\n", "# self.unlabel_imgs = self.all_imgs - self.imgs", "\n", "gr", "=", "np", ".", "asarray", "(", "[", "gr", "[", "i", "]", "for", "i", "in", "self", ".", "imgs", "]", ")", "\n", "\n", "self", ".", "gr", "=", "np", ".", "zeros", "(", "(", "gr", ".", "shape", "[", "0", "]", ",", "15", ")", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "gr", ")", ":", "\n", "            ", "target", "=", "i", ".", "split", "(", "'|'", ")", "\n", "binary_result", "=", "mlb", ".", "fit_transform", "(", "\n", "[", "[", "Labels", "[", "i", "]", "for", "i", "in", "target", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "gr", "[", "idx", "]", "=", "binary_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataset.__getitem__": [[93, 109], ["skimage.io.imread", "PIL.Image.fromarray().convert", "dataloader.ChestDataset.transform", "os.path.join", "range", "PIL.Image.fromarray", "imgs.append", "dataloader.ChestDataset.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'data'", ",", "self", ".", "imgs", "[", "item", "]", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "# img1 = self.transform(image=img)['image']", "\n", "\n", "target", "=", "self", ".", "gr", "[", "item", "]", "\n", "imgs", "=", "[", "img1", "]", "\n", "if", "self", ".", "mode", "==", "'moco_train'", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "k_crops", ")", ":", "\n", "                ", "imgs", ".", "append", "(", "self", ".", "transform", "(", "img", ")", ")", "\n", "# img2 = self.transform(img)", "\n", "# img2 = self.transform(image=img)['image']", "\n", "", "return", "imgs", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "img1", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataset.__len__": [[110, 112], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "imgs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.GaussianBlur.__init__": [[117, 119], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.GaussianBlur.__call__": [[120, 124], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.__init__": [[127, 168], ["torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomErasing", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.transforms.RandomRotation", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.RandomAffine", "torchvision.transforms.transforms.ColorJitter", "dataloader.GaussianBlur"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "128", ",", "num_workers", "=", "8", ",", "img_resize", "=", "512", ",", "root_dir", "=", "None", ",", "gc_cloud", "=", "False", ",", "k_crop", "=", "5", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "img_resize", "=", "img_resize", "\n", "self", ".", "k_crop", "=", "k_crop", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "\n", "# strong_aug = randaug.CLSAAug()", "\n", "self", ".", "transform_moco_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "img_resize", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "RandomAffine", "(", "10", ")", "\n", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "transforms", ".", "RandomErasing", "(", "p", "=", "0.5", ",", "inplace", "=", "True", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "transform_sup_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "img_resize", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "img_resize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fengbeiliu_semi-chest.dataloaders.dataloader.ChestDataloader.run": [[170, 190], ["dataloader.ChestDataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", ",", "exp", "=", "None", ",", "ratio", "=", "100", ",", "runtime", "=", "1", ")", ":", "\n", "        ", "if", "exp", ":", "\n", "            ", "use_transform", "=", "self", ".", "transform_moco_train_exp", "if", "mode", "==", "'moco_train'", "else", "self", ".", "transform_sup_train", "if", "mode", "==", "'sup_train'", "else", "self", ".", "transform_test", "\n", "", "else", ":", "\n", "            ", "use_transform", "=", "self", ".", "transform_moco_train", "if", "mode", "==", "'moco_train'", "else", "self", ".", "transform_sup_train", "if", "mode", "==", "'sup_train'", "else", "self", ".", "transform_test", "\n", "\n", "", "all_dataset", "=", "ChestDataset", "(", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "use_transform", ",", "mode", "=", "mode", ",", "ratio", "=", "ratio", ",", "runtime", "=", "runtime", ",", "k_crop", "=", "self", ".", "k_crop", ")", "\n", "if", "mode", "==", "'moco_train'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "all_dataset", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "", "batch_size", "=", "self", ".", "batch_size", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "all_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", "if", "mode", "==", "'moco_train'", "else", "True", ",", "\n", "sampler", "=", "sampler", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", "if", "'train'", "in", "mode", "else", "False", ")", "\n", "\n", "return", "loader", ",", "sampler", "\n", "", "", ""]]}