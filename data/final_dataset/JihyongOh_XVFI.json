{"home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.XVFInet.__init__": [[11, 37], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "XVFInet.VFInet", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "range", "XVFInet.XVFInet.rec_ext_ds_module.append", "XVFInet.XVFInet.rec_ext_ds_module.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "print", "print", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "XVFInet.XVFInet.rec_ext_ds_module.append", "XVFInet.XVFInet.rec_ext_ds_module.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "XVFInet.RResBlock2D_3D", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.log2", "torch.ReLU", "torch.ReLU", "torch.ReLU", "str"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "XVFInet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "# will be used as \"x.to(device)\"", "\n", "self", ".", "nf", "=", "args", ".", "nf", "\n", "self", ".", "scale", "=", "args", ".", "module_scale_factor", "\n", "self", ".", "vfinet", "=", "VFInet", "(", "args", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "in_channels", "=", "3", "\n", "self", ".", "channel_converter", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "in_channels", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "rec_ext_ds_module", "=", "[", "self", ".", "channel_converter", "]", "\n", "self", ".", "rec_ext_ds", "=", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "[", "1", ",", "2", ",", "2", "]", ",", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "for", "_", "in", "range", "(", "int", "(", "np", ".", "log2", "(", "self", ".", "scale", ")", ")", ")", ":", "\n", "\t\t\t", "self", ".", "rec_ext_ds_module", ".", "append", "(", "self", ".", "rec_ext_ds", ")", "\n", "self", ".", "rec_ext_ds_module", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "rec_ext_ds_module", ".", "append", "(", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "1", ",", "[", "0", ",", "1", ",", "1", "]", ")", ")", "\n", "self", ".", "rec_ext_ds_module", ".", "append", "(", "RResBlock2D_3D", "(", "args", ",", "T_reduce_flag", "=", "False", ")", ")", "\n", "self", ".", "rec_ext_ds_module", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "rec_ext_ds_module", ")", "\n", "\n", "self", ".", "rec_ctx_ds", "=", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "[", "1", ",", "2", ",", "2", "]", ",", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "\n", "print", "(", "\"The lowest scale depth for training (S_trn): \"", ",", "self", ".", "args", ".", "S_trn", ")", "\n", "print", "(", "\"The lowest scale depth for test (S_tst): \"", ",", "self", ".", "args", ".", "S_tst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.XVFInet.forward": [[38, 76], ["x.size", "t_value.view.view.size", "t_value.view.view.view", "XVFInet.XVFInet.rec_ext_ds_module", "range", "XVFInet.XVFInet.rec_ctx_ds", "feat_x_list.append", "XVFInet.XVFInet.vfinet", "out_l_list.append", "flow_refine_l_list.append", "range", "XVFInet.XVFInet.vfinet", "out_l_list.append", "flow_refine_l_list.append", "range", "XVFInet.XVFInet.vfinet", "XVFInet.XVFInet.vfinet", "out_l_list.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "XVFInet.XVFInet.vfinet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "t_value", ",", "is_training", "=", "True", ")", ":", "\n", "\t\t", "'''\n\t\tx shape : [B,C,T,H,W]\n\t\tt_value shape : [B,1] ###############\n\t\t'''", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "B2", ",", "C2", "=", "t_value", ".", "size", "(", ")", "\n", "assert", "C2", "==", "1", ",", "\"t_value shape is [B,]\"", "\n", "assert", "T", "%", "2", "==", "0", ",", "\"T must be an even number\"", "\n", "t_value", "=", "t_value", ".", "view", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "flow_l", "=", "None", "\n", "feat_x", "=", "self", ".", "rec_ext_ds_module", "(", "x", ")", "\n", "feat_x_list", "=", "[", "feat_x", "]", "\n", "self", ".", "lowest_depth_level", "=", "self", ".", "args", ".", "S_trn", "if", "is_training", "else", "self", ".", "args", ".", "S_tst", "\n", "for", "level", "in", "range", "(", "1", ",", "self", ".", "lowest_depth_level", "+", "1", ")", ":", "\n", "\t\t\t", "feat_x", "=", "self", ".", "rec_ctx_ds", "(", "feat_x", ")", "\n", "feat_x_list", ".", "append", "(", "feat_x", ")", "\n", "\n", "", "if", "is_training", ":", "\n", "\t\t\t", "out_l_list", "=", "[", "]", "\n", "flow_refine_l_list", "=", "[", "]", "\n", "out_l", ",", "flow_l", ",", "flow_refine_l", "=", "self", ".", "vfinet", "(", "x", ",", "feat_x_list", "[", "self", ".", "args", ".", "S_trn", "]", ",", "flow_l", ",", "t_value", ",", "level", "=", "self", ".", "args", ".", "S_trn", ",", "is_training", "=", "True", ")", "\n", "out_l_list", ".", "append", "(", "out_l", ")", "\n", "flow_refine_l_list", ".", "append", "(", "flow_refine_l", ")", "\n", "for", "level", "in", "range", "(", "self", ".", "args", ".", "S_trn", "-", "1", ",", "0", ",", "-", "1", ")", ":", "## self.args.S_trn, self.args.S_trn-1, ..., 1. level 0 is not included", "\n", "\t\t\t\t", "out_l", ",", "flow_l", "=", "self", ".", "vfinet", "(", "x", ",", "feat_x_list", "[", "level", "]", ",", "flow_l", ",", "t_value", ",", "level", "=", "level", ",", "is_training", "=", "True", ")", "\n", "out_l_list", ".", "append", "(", "out_l", ")", "\n", "", "out_l", ",", "flow_l", ",", "flow_refine_l", ",", "occ_0_l0", "=", "self", ".", "vfinet", "(", "x", ",", "feat_x_list", "[", "0", "]", ",", "flow_l", ",", "t_value", ",", "level", "=", "0", ",", "is_training", "=", "True", ")", "\n", "out_l_list", ".", "append", "(", "out_l", ")", "\n", "flow_refine_l_list", ".", "append", "(", "flow_refine_l", ")", "\n", "return", "out_l_list", "[", ":", ":", "-", "1", "]", ",", "flow_refine_l_list", "[", ":", ":", "-", "1", "]", ",", "occ_0_l0", ",", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ")", "# out_l_list should be reversed. [out_l0, out_l1, ...]", "\n", "\n", "", "else", ":", "# Testing", "\n", "\t\t\t", "for", "level", "in", "range", "(", "self", ".", "args", ".", "S_tst", ",", "0", ",", "-", "1", ")", ":", "## self.args.S_tst, self.args.S_tst-1, ..., 1. level 0 is not included", "\n", "\t\t\t\t", "flow_l", "=", "self", ".", "vfinet", "(", "x", ",", "feat_x_list", "[", "level", "]", ",", "flow_l", ",", "t_value", ",", "level", "=", "level", ",", "is_training", "=", "False", ")", "\n", "", "out_l", "=", "self", ".", "vfinet", "(", "x", ",", "feat_x_list", "[", "0", "]", ",", "flow_l", ",", "t_value", ",", "level", "=", "0", ",", "is_training", "=", "False", ")", "\n", "return", "out_l", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.__init__": [[80, 136], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "XVFInet.RefineUNet", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "VFInet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "# will be used as \"x.to(device)\"", "\n", "self", ".", "nf", "=", "args", ".", "nf", "\n", "self", ".", "scale", "=", "args", ".", "module_scale_factor", "\n", "self", ".", "in_channels", "=", "3", "\n", "\n", "self", ".", "conv_flow_bottom", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "4", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "6", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv_flow1", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "conv_flow2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", "+", "4", ",", "2", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "4", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "6", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv_flow3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", "+", "self", ".", "nf", "*", "4", ",", "self", ".", "nf", ",", "[", "1", ",", "1", "]", ",", "1", ",", "[", "0", ",", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "4", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "4", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", ",", "\n", ")", "\n", "\n", "self", ".", "refine_unet", "=", "RefineUNet", "(", "args", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.forward": [[137, 236], ["x.size", "x.permute", "torch.interpolate.contiguous().view", "torch.interpolate.view", "torch.interpolate.permute", "torch.interpolate.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "XVFInet.VFInet.z_fwarp", "XVFInet.VFInet.z_fwarp", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.bwarp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.refine_unet", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "XVFInet.VFInet.conv_flow_bottom", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.bwarp", "XVFInet.VFInet.conv_flow2", "norm_l.type", "XVFInet.VFInet.conv_flow3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "flow_l_prev.detach", "norm_l.detach", "flow_t0_l.clone", "flow_t1_l.clone", "torch.pixel_shuffle", "torch.pixel_shuffle", "torch.pixel_shuffle", "XVFInet.VFInet.conv_flow1", "XVFInet.VFInet.conv_flow1", "norm_l.clone", "norm_l.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.z_fwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.z_fwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp"], ["", "def", "forward", "(", "self", ",", "x", ",", "feat_x", ",", "flow_l_prev", ",", "t_value", ",", "level", ",", "is_training", ")", ":", "\n", "\t\t", "'''\n\t\tx shape : [B,C,T,H,W]\n\t\tt_value shape : [B,1] ###############\n\t\t'''", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "assert", "T", "%", "2", "==", "0", ",", "\"T must be an even number\"", "\n", "\n", "####################### For a single level ", "\n", "l", "=", "2", "**", "level", "\n", "x_l", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "x_l", "=", "x_l", ".", "contiguous", "(", ")", ".", "view", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "if", "level", "==", "0", ":", "\n", "\t\t\t", "pass", "\n", "", "else", ":", "\n", "\t\t\t", "x_l", "=", "F", ".", "interpolate", "(", "x_l", ",", "scale_factor", "=", "(", "1.0", "/", "l", ",", "1.0", "/", "l", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "", "'''\n\t\tDown pixel-shuffle\n\t\t'''", "\n", "x_l", "=", "x_l", ".", "view", "(", "B", ",", "T", ",", "C", ",", "H", "//", "l", ",", "W", "//", "l", ")", "\n", "x_l", "=", "x_l", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "x_l", ".", "size", "(", ")", "\n", "\n", "## Feature extraction", "\n", "feat0_l", "=", "feat_x", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "feat1_l", "=", "feat_x", "[", ":", ",", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "## Flow estimation", "\n", "if", "flow_l_prev", "is", "None", ":", "\n", "\t\t\t", "flow_l_tmp", "=", "self", ".", "conv_flow_bottom", "(", "torch", ".", "cat", "(", "(", "feat0_l", ",", "feat1_l", ")", ",", "dim", "=", "1", ")", ")", "\n", "flow_l", "=", "flow_l_tmp", "[", ":", ",", ":", "4", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "up_flow_l_prev", "=", "2.0", "*", "F", ".", "interpolate", "(", "flow_l_prev", ".", "detach", "(", ")", ",", "scale_factor", "=", "(", "2", ",", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "warped_feat1_l", "=", "self", ".", "bwarp", "(", "feat1_l", ",", "up_flow_l_prev", "[", ":", ",", ":", "2", ",", ":", ",", ":", "]", ")", "\n", "warped_feat0_l", "=", "self", ".", "bwarp", "(", "feat0_l", ",", "up_flow_l_prev", "[", ":", ",", "2", ":", ",", ":", ",", ":", "]", ")", "\n", "flow_l_tmp", "=", "self", ".", "conv_flow2", "(", "torch", ".", "cat", "(", "[", "self", ".", "conv_flow1", "(", "torch", ".", "cat", "(", "[", "feat0_l", ",", "warped_feat1_l", "]", ",", "dim", "=", "1", ")", ")", ",", "self", ".", "conv_flow1", "(", "torch", ".", "cat", "(", "[", "feat1_l", ",", "warped_feat0_l", "]", ",", "dim", "=", "1", ")", ")", ",", "up_flow_l_prev", "]", ",", "dim", "=", "1", ")", ")", "\n", "flow_l", "=", "flow_l_tmp", "[", ":", ",", ":", "4", ",", ":", ",", ":", "]", "+", "up_flow_l_prev", "\n", "\n", "", "if", "not", "is_training", "and", "level", "!=", "0", ":", "\n", "\t\t\t", "return", "flow_l", "\n", "\n", "", "flow_01_l", "=", "flow_l", "[", ":", ",", ":", "2", ",", ":", ",", ":", "]", "\n", "flow_10_l", "=", "flow_l", "[", ":", ",", "2", ":", ",", ":", ",", ":", "]", "\n", "z_01_l", "=", "torch", ".", "sigmoid", "(", "flow_l_tmp", "[", ":", ",", "4", ":", "5", ",", ":", ",", ":", "]", ")", "\n", "z_10_l", "=", "torch", ".", "sigmoid", "(", "flow_l_tmp", "[", ":", ",", "5", ":", "6", ",", ":", ",", ":", "]", ")", "\n", "\n", "## Complementary Flow Reversal (CFR)", "\n", "flow_forward", ",", "norm0_l", "=", "self", ".", "z_fwarp", "(", "flow_01_l", ",", "t_value", "*", "flow_01_l", ",", "z_01_l", ")", "## Actually, F (t) -> (t+1). Translation only. Not normalized yet", "\n", "flow_backward", ",", "norm1_l", "=", "self", ".", "z_fwarp", "(", "flow_10_l", ",", "(", "1", "-", "t_value", ")", "*", "flow_10_l", ",", "z_10_l", ")", "## Actually, F (1-t) -> (-t). Translation only. Not normalized yet", "\n", "\n", "flow_t0_l", "=", "-", "(", "1", "-", "t_value", ")", "*", "(", "(", "t_value", ")", "*", "flow_forward", ")", "+", "(", "t_value", ")", "*", "(", "(", "t_value", ")", "*", "flow_backward", ")", "# The numerator of Eq.(1) in the paper.", "\n", "flow_t1_l", "=", "(", "1", "-", "t_value", ")", "*", "(", "(", "1", "-", "t_value", ")", "*", "flow_forward", ")", "-", "(", "t_value", ")", "*", "(", "(", "1", "-", "t_value", ")", "*", "flow_backward", ")", "# The numerator of Eq.(2) in the paper.", "\n", "\n", "norm_l", "=", "(", "1", "-", "t_value", ")", "*", "norm0_l", "+", "t_value", "*", "norm1_l", "\n", "mask_", "=", "(", "norm_l", ".", "detach", "(", ")", ">", "0", ")", ".", "type", "(", "norm_l", ".", "type", "(", ")", ")", "\n", "flow_t0_l", "=", "(", "1", "-", "mask_", ")", "*", "flow_t0_l", "+", "mask_", "*", "(", "flow_t0_l", ".", "clone", "(", ")", "/", "(", "norm_l", ".", "clone", "(", ")", "+", "(", "1", "-", "mask_", ")", ")", ")", "# Divide the numerator with denominator in Eq.(1)", "\n", "flow_t1_l", "=", "(", "1", "-", "mask_", ")", "*", "flow_t1_l", "+", "mask_", "*", "(", "flow_t1_l", ".", "clone", "(", ")", "/", "(", "norm_l", ".", "clone", "(", ")", "+", "(", "1", "-", "mask_", ")", ")", ")", "# Divide the numerator with denominator in Eq.(2)", "\n", "\n", "## Feature warping", "\n", "warped0_l", "=", "self", ".", "bwarp", "(", "feat0_l", ",", "flow_t0_l", ")", "\n", "warped1_l", "=", "self", ".", "bwarp", "(", "feat1_l", ",", "flow_t1_l", ")", "\n", "\n", "## Flow refinement", "\n", "flow_refine_l", "=", "torch", ".", "cat", "(", "[", "feat0_l", ",", "warped0_l", ",", "warped1_l", ",", "feat1_l", ",", "flow_t0_l", ",", "flow_t1_l", "]", ",", "dim", "=", "1", ")", "\n", "flow_refine_l", "=", "self", ".", "conv_flow3", "(", "flow_refine_l", ")", "+", "torch", ".", "cat", "(", "[", "flow_t0_l", ",", "flow_t1_l", "]", ",", "dim", "=", "1", ")", "\n", "flow_t0_l", "=", "flow_refine_l", "[", ":", ",", ":", "2", ",", ":", ",", ":", "]", "\n", "flow_t1_l", "=", "flow_refine_l", "[", ":", ",", "2", ":", "4", ",", ":", ",", ":", "]", "\n", "\n", "warped0_l", "=", "self", ".", "bwarp", "(", "feat0_l", ",", "flow_t0_l", ")", "\n", "warped1_l", "=", "self", ".", "bwarp", "(", "feat1_l", ",", "flow_t1_l", ")", "\n", "\n", "## Flow upscale", "\n", "flow_t0_l", "=", "self", ".", "scale", "*", "F", ".", "interpolate", "(", "flow_t0_l", ",", "scale_factor", "=", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "flow_t1_l", "=", "self", ".", "scale", "*", "F", ".", "interpolate", "(", "flow_t1_l", ",", "scale_factor", "=", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "## Image warping and blending", "\n", "warped_img0_l", "=", "self", ".", "bwarp", "(", "x_l", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", ",", "flow_t0_l", ")", "\n", "warped_img1_l", "=", "self", ".", "bwarp", "(", "x_l", "[", ":", ",", ":", ",", "1", ",", ":", ",", ":", "]", ",", "flow_t1_l", ")", "\n", "\n", "refine_out", "=", "self", ".", "refine_unet", "(", "torch", ".", "cat", "(", "[", "F", ".", "pixel_shuffle", "(", "torch", ".", "cat", "(", "[", "feat0_l", ",", "feat1_l", ",", "warped0_l", ",", "warped1_l", "]", ",", "dim", "=", "1", ")", ",", "self", ".", "scale", ")", ",", "x_l", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", ",", "x_l", "[", ":", ",", ":", ",", "1", ",", ":", ",", ":", "]", ",", "warped_img0_l", ",", "warped_img1_l", ",", "flow_t0_l", ",", "flow_t1_l", "]", ",", "dim", "=", "1", ")", ")", "\n", "occ_0_l", "=", "torch", ".", "sigmoid", "(", "refine_out", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", "\n", "occ_1_l", "=", "1", "-", "occ_0_l", "\n", "\n", "out_l", "=", "(", "1", "-", "t_value", ")", "*", "occ_0_l", "*", "warped_img0_l", "+", "t_value", "*", "occ_1_l", "*", "warped_img1_l", "\n", "out_l", "=", "out_l", "/", "(", "(", "1", "-", "t_value", ")", "*", "occ_0_l", "+", "t_value", "*", "occ_1_l", ")", "+", "refine_out", "[", ":", ",", "1", ":", "4", ",", ":", ",", ":", "]", "\n", "\n", "if", "not", "is_training", "and", "level", "==", "0", ":", "\n", "\t\t\t", "return", "out_l", "\n", "\n", "", "if", "is_training", ":", "\n", "\t\t\t", "if", "flow_l_prev", "is", "None", ":", "\n", "# if level == self.args.S_trn:", "\n", "\t\t\t\t", "return", "out_l", ",", "flow_l", ",", "flow_refine_l", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", "\n", "", "elif", "level", "!=", "0", ":", "\n", "\t\t\t\t", "return", "out_l", ",", "flow_l", "\n", "", "else", ":", "# level==0", "\n", "\t\t\t\t", "return", "out_l", ",", "flow_l", ",", "flow_refine_l", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", ",", "occ_0_l", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.bwarp": [[237, 267], ["x.size", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "vgrid.permute.permute.permute", "torch.functional.grid_sample", "torch.functional.grid_sample", "torch.functional.grid_sample", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.functional.grid_sample", "torch.functional.grid_sample", "torch.functional.grid_sample", "mask.masked_fill_.masked_fill_.masked_fill_", "mask.masked_fill_.masked_fill_.masked_fill_", "grid.to.to.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "max", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "vgrid[].clone", "vgrid[].clone", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size"], "methods", ["None"], ["", "", "", "def", "bwarp", "(", "self", ",", "x", ",", "flo", ")", ":", "\n", "\t\t", "'''\n\t\tx: [B, C, H, W] (im2)\n\t\tflo: [B, 2, H, W] flow\n\t\t'''", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "# mesh grid", "\n", "xx", "=", "torch", ".", "arange", "(", "0", ",", "W", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "W", ")", ".", "expand", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "H", ")", ".", "view", "(", "1", ",", "1", ",", "H", ",", "1", ")", ".", "expand", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "\t\t\t", "grid", "=", "grid", ".", "to", "(", "self", ".", "device", ")", "\n", "", "vgrid", "=", "torch", ".", "autograd", ".", "Variable", "(", "grid", ")", "+", "flo", "\n", "\n", "# scale grid to [-1,1]", "\n", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "/", "max", "(", "W", "-", "1", ",", "1", ")", "-", "1.0", "\n", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "/", "max", "(", "H", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "vgrid", "=", "vgrid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# [B,H,W,2]", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ",", "align_corners", "=", "True", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "x", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mask", "=", "nn", ".", "functional", ".", "grid_sample", "(", "mask", ",", "vgrid", ",", "align_corners", "=", "True", ")", "\n", "\n", "# mask[mask<0.9999] = 0", "\n", "# mask[mask>0] = 1", "\n", "mask", "=", "mask", ".", "masked_fill_", "(", "mask", "<", "0.999", ",", "0", ")", "\n", "mask", "=", "mask", ".", "masked_fill_", "(", "mask", ">", "0", ",", "1", ")", "\n", "\n", "return", "output", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.fwarp": [[268, 316], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "XVFInet.VFInet.get_gaussian_weights", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.get_gaussian_weights", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one"], ["", "def", "fwarp", "(", "self", ",", "img", ",", "flo", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\t\t-img: image (N, C, H, W)\n\t\t\t-flo: optical flow (N, 2, H, W)\n\t\t\telements of flo is in [0, H] and [0, W] for dx, dy\n\t\t\thttps://github.com/lyh-18/EQVI/blob/EQVI-master/models/forward_warp_gaussian.py\n\t\t\"\"\"", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get gaussian weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_gaussian_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "\n", "# secondly, sample each weighted corner", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.z_fwarp": [[318, 365], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "XVFInet.VFInet.get_gaussian_weights", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one", "XVFInet.VFInet.sample_one"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.get_gaussian_weights", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one"], ["", "def", "z_fwarp", "(", "self", ",", "img", ",", "flo", ",", "z", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\t-img: image (N, C, H, W)\n\t\t\t-flo: optical flow (N, 2, H, W)\n\t\t\telements of flo is in [0, H] and [0, W] for dx, dy\n\t\t\tmodified from https://github.com/lyh-18/EQVI/blob/EQVI-master/models/forward_warp_gaussian.py\n\t\t\"\"\"", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get gaussian weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_gaussian_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "z", "+", "1e-5", ")", "\n", "\n", "# secondly, sample each weighted corner", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.get_gaussian_weights": [[367, 375], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "get_gaussian_weights", "(", "self", ",", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "z", "=", "1.0", ")", ":", "\n", "# z 0.0 ~ 1.0", "\n", "\t\t", "w11", "=", "z", "*", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w12", "=", "z", "*", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "w21", "=", "z", "*", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w22", "=", "z", "*", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "\n", "return", "w11", ",", "w12", ",", "w21", ",", "w22", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.VFInet.sample_one": [[376, 414], ["img.size", "shiftx.view", "shifty.view", "[].to().long().repeat().view", "[].to().long().repeat().view", "weight.view", "img.contiguous().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.arange().view().to().long().repeat().view", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.masked_select().clone().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.put_", "torch.zeros().to.put_", "torch.zeros().to.put_", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.put_", "torch.zeros().to.put_", "torch.zeros().to.put_", "shiftx.view.long", "shifty.view.long", "idxy.lt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.zeros().to.view", "torch.zeros().to.view", "torch.zeros().to.view", "torch.zeros().to.view", "torch.zeros().to.view", "torch.zeros().to.view", "[].to().long().repeat", "[].to().long().repeat", "img.contiguous", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "torch.arange().view().to().long().repeat", "idxy.ge", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idxx.ge", "idxx.lt", "[].to().long", "[].to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.arange().view().to().long", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "[].to", "[].to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_one", "(", "self", ",", "img", ",", "shiftx", ",", "shifty", ",", "weight", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tInput:\n\t\t\t-img (N, C, H, W)\n\t\t\t-shiftx, shifty (N, c, H, W)\n\t\t\"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "\n", "# flatten all (all restored as Tensors)", "\n", "flat_shiftx", "=", "shiftx", ".", "view", "(", "-", "1", ")", "\n", "flat_shifty", "=", "shifty", ".", "view", "(", "-", "1", ")", "\n", "flat_basex", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "[", "None", ",", "None", "]", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_basey", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "-", "1", ")", "[", "None", ",", "None", "]", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "H", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_weight", "=", "weight", ".", "view", "(", "-", "1", ")", "\n", "flat_img", "=", "img", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# The corresponding positions in I1", "\n", "idxn", "=", "torch", ".", "arange", "(", "0", ",", "N", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", ".", "repeat", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxc", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxx", "=", "flat_shiftx", ".", "long", "(", ")", "+", "flat_basex", "\n", "idxy", "=", "flat_shifty", ".", "long", "(", ")", "+", "flat_basey", "\n", "\n", "# recording the inside part the shifted", "\n", "mask", "=", "idxx", ".", "ge", "(", "0", ")", "&", "idxx", ".", "lt", "(", "H", ")", "&", "idxy", ".", "ge", "(", "0", ")", "&", "idxy", ".", "lt", "(", "W", ")", "\n", "\n", "# Mask off points out of boundaries", "\n", "ids", "=", "(", "idxn", "*", "C", "*", "H", "*", "W", "+", "idxc", "*", "H", "*", "W", "+", "idxx", "*", "W", "+", "idxy", ")", "\n", "ids_mask", "=", "torch", ".", "masked_select", "(", "ids", ",", "mask", ")", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Note here! accmulate fla must be true for proper bp", "\n", "img_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "img_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_img", "*", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "one_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "one_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "return", "img_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", ",", "one_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.RefineUNet.__init__": [[416, 433], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "RefineUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "scale", "=", "args", ".", "module_scale_factor", "\n", "self", ".", "nf", "=", "args", ".", "nf", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "NN", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "enc1", "=", "nn", ".", "Conv2d", "(", "(", "4", "*", "self", ".", "nf", ")", "//", "self", ".", "scale", "//", "self", ".", "scale", "+", "4", "*", "args", ".", "img_ch", "+", "4", ",", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "enc2", "=", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "enc3", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", ",", "4", "*", "self", ".", "nf", ",", "[", "4", ",", "4", "]", ",", "2", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "dec0", "=", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "nf", ",", "4", "*", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "dec1", "=", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "nf", "+", "2", "*", "self", ".", "nf", ",", "2", "*", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "## input concatenated with enc2", "\n", "self", ".", "dec2", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "nf", "+", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "## input concatenated with enc1", "\n", "self", ".", "dec3", "=", "nn", ".", "Conv2d", "(", "self", ".", "nf", ",", "1", "+", "args", ".", "img_ch", ",", "[", "3", ",", "3", "]", ",", "1", ",", "[", "1", ",", "1", "]", ")", "## input added with warped image", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.RefineUNet.forward": [[434, 452], ["XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.NN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.NN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "XVFInet.RefineUNet.lrelu", "XVFInet.RefineUNet.NN", "XVFInet.RefineUNet.dec3", "XVFInet.RefineUNet.enc1", "XVFInet.RefineUNet.enc2", "XVFInet.RefineUNet.enc3", "XVFInet.RefineUNet.dec0", "XVFInet.RefineUNet.dec1", "XVFInet.RefineUNet.dec2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "concat", ")", ":", "\n", "\t\t", "enc1", "=", "self", ".", "lrelu", "(", "self", ".", "enc1", "(", "concat", ")", ")", "\n", "enc2", "=", "self", ".", "lrelu", "(", "self", ".", "enc2", "(", "enc1", ")", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "enc3", "(", "enc2", ")", ")", "\n", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "dec0", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "NN", "(", "out", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "dec1", "(", "out", ")", ")", "\n", "\n", "out", "=", "self", ".", "NN", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "dec2", "(", "out", ")", ")", "\n", "\n", "out", "=", "self", ".", "NN", "(", "out", ")", "\n", "out", "=", "self", ".", "dec3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.ResBlock2D_3D.__init__": [[456, 464], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "ResBlock2D_3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nf", "=", "args", ".", "nf", "\n", "\n", "self", ".", "conv3x3_1", "=", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "1", ",", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "conv3x3_2", "=", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "1", ",", "3", ",", "3", "]", ",", "1", ",", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.ResBlock2D_3D.forward": [[465, 474], ["x.size", "XVFInet.ResBlock2D_3D.conv3x3_2", "XVFInet.ResBlock2D_3D.lrelu", "XVFInet.ResBlock2D_3D.conv3x3_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "'''\n\t\tx shape : [B,C,T,H,W]\n\t\t'''", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "out", "=", "self", ".", "conv3x3_2", "(", "self", ".", "lrelu", "(", "self", ".", "conv3x3_1", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.RResBlock2D_3D.__init__": [[477, 486], ["torch.Module.__init__", "XVFInet.ResBlock2D_3D", "XVFInet.ResBlock2D_3D", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "T_reduce_flag", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "RResBlock2D_3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nf", "=", "args", ".", "nf", "\n", "self", ".", "T_reduce_flag", "=", "T_reduce_flag", "\n", "self", ".", "resblock1", "=", "ResBlock2D_3D", "(", "self", ".", "args", ")", "\n", "self", ".", "resblock2", "=", "ResBlock2D_3D", "(", "self", ".", "args", ")", "\n", "if", "T_reduce_flag", ":", "\n", "\t\t\t", "self", ".", "reduceT_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "nf", ",", "self", ".", "nf", ",", "[", "3", ",", "1", ",", "1", "]", ",", "1", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.XVFInet.RResBlock2D_3D.forward": [[487, 497], ["XVFInet.RResBlock2D_3D.resblock1", "XVFInet.RResBlock2D_3D.resblock2", "XVFInet.RResBlock2D_3D.reduceT_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "'''\n\t\tx shape : [B,C,T,H,W]\n\t\t'''", "\n", "out", "=", "self", ".", "resblock1", "(", "x", ")", "\n", "out", "=", "self", ".", "resblock2", "(", "out", ")", "\n", "if", "self", ".", "T_reduce_flag", ":", "\n", "\t\t\t", "return", "self", ".", "reduceT_conv", "(", "out", "+", "x", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "out", "+", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.parse_args": [[12, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "main.check_args", "argparse.ArgumentParser.parse_args", "utils.weights_init"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.check_args", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.parse_args", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.weights_init"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "desc", "=", "\"PyTorch implementation for XVFI\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'gpu index'", ")", "\n", "parser", ".", "add_argument", "(", "'--net_type'", ",", "type", "=", "str", ",", "default", "=", "'XVFInet'", ",", "choices", "=", "[", "'XVFInet'", "]", ",", "help", "=", "'The type of Net'", ")", "\n", "parser", ".", "add_argument", "(", "'--net_object'", ",", "default", "=", "XVFInet", ",", "choices", "=", "[", "XVFInet", "]", ",", "help", "=", "'The type of Net'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_num'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'The experiment number'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "choices", "=", "[", "'train'", ",", "'test'", ",", "'test_custom'", ",", "'metrics_evaluation'", ",", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_training'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'continue the training'", ")", "\n", "\n", "\"\"\" Information of directories \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--test_img_dir'", ",", "type", "=", "str", ",", "default", "=", "'./test_img_dir'", ",", "help", "=", "'test_img_dir path'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_dir'", ",", "type", "=", "str", ",", "default", "=", "'./text_dir'", ",", "help", "=", "'text_dir path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoint_dir'", ",", "help", "=", "'checkpoint_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "'./log_dir'", ",", "help", "=", "'Directory name to save training logs'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'X4K1000FPS'", ",", "choices", "=", "[", "'X4K1000FPS'", ",", "'Vimeo'", "]", ",", "\n", "help", "=", "'Training/test Dataset'", ")", "\n", "\n", "# parser.add_argument('--train_data_path', type=str, default='./X4K1000FPS/train')", "\n", "# parser.add_argument('--val_data_path', type=str, default='./X4K1000FPS/val')", "\n", "# parser.add_argument('--test_data_path', type=str, default='./X4K1000FPS/test')", "\n", "parser", ".", "add_argument", "(", "'--train_data_path'", ",", "type", "=", "str", ",", "default", "=", "'../Datasets/VIC_4K_1000FPS/train'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_data_path'", ",", "type", "=", "str", ",", "default", "=", "'../Datasets/VIC_4K_1000FPS/val'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_data_path'", ",", "type", "=", "str", ",", "default", "=", "'../Datasets/VIC_4K_1000FPS/test'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--vimeo_data_path'", ",", "type", "=", "str", ",", "default", "=", "'./vimeo_triplet'", ")", "\n", "\n", "\"\"\" Hyperparameters for Training (when [phase=='train']) \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'The number of epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--freq_display'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'The number of iterations frequency for display'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_img_num'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'The number of saved image while training for visualization. It should smaller than the batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'The initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_dec_fac'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'step - lr_decreasing_factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_milestones'", ",", "type", "=", "int", ",", "default", "=", "[", "100", ",", "150", ",", "180", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_dec_start'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'When scheduler is StepLR, lr decreases from epoch at lr_dec_start'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'The size of batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'for optim., weight decay (default: 0)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--need_patch'", ",", "default", "=", "True", ",", "help", "=", "'get patch form image while training'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_ch'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'base number of channels for image'", ")", "\n", "parser", ".", "add_argument", "(", "'--nf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'base number of channels for feature maps'", ")", "# 64", "\n", "parser", ".", "add_argument", "(", "'--module_scale_factor'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'sptial reduction for pixelshuffle'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "384", ",", "help", "=", "'patch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_thrds'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of threads for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "default", "=", "'L1'", ",", "choices", "=", "[", "'L1'", ",", "'MSE'", ",", "'L1_Charbonnier_loss'", "]", ",", "help", "=", "'Loss type'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--S_trn'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'The lowest scale depth for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--S_tst'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'The lowest scale depth for test'", ")", "\n", "\n", "\"\"\" Weighting Parameters Lambda for Losses (when [phase=='train']) \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--rec_lambda'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Lambda for Reconstruction Loss'", ")", "\n", "\n", "\"\"\" Settings for Testing (when [phase=='test' or 'test_custom']) \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--saving_flow_flag'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--multiple'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'Due to the indexing problem of the file names, we recommend to use the power of 2. (e.g. 2, 4, 8, 16 ...). CAUTION : For the provided X-TEST, multiple should be one of [2, 4, 8, 16, 32].'", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics_types'", ",", "type", "=", "list", ",", "default", "=", "[", "\"PSNR\"", ",", "\"SSIM\"", ",", "\"tOF\"", "]", ",", "choices", "=", "[", "\"PSNR\"", ",", "\"SSIM\"", ",", "\"tOF\"", "]", ")", "\n", "\n", "\"\"\" Settings for test_custom (when [phase=='test_custom']) \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--custom_path'", ",", "type", "=", "str", ",", "default", "=", "'./custom_path'", ",", "help", "=", "'path for custom video containing frames'", ")", "\n", "\n", "return", "check_args", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.check_args": [[79, 93], ["utils.check_folder", "utils.check_folder", "utils.check_folder", "utils.check_folder"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder"], ["", "def", "check_args", "(", "args", ")", ":", "\n", "# --checkpoint_dir", "\n", "    ", "check_folder", "(", "args", ".", "checkpoint_dir", ")", "\n", "\n", "# --text_dir", "\n", "check_folder", "(", "args", ".", "text_dir", ")", "\n", "\n", "# --log_dir", "\n", "check_folder", "(", "args", ".", "log_dir", ")", "\n", "\n", "# --test_img_dir", "\n", "check_folder", "(", "args", ".", "test_img_dir", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.main": [[95, 169], ["main.parse_args", "print", "vars", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "print", "print", "utils.save_manager", "parse_args.net_object().apply().to", "print", "print", "print", "str", "exit", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "print", "utils.set_rec_loss().to", "utils.set_smoothness_loss().to", "main.train", "str", "print", "print", "utils.get_test_data", "main.test", "utils.save_manager.write_info", "utils.metrics_evaluation_X_Test", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "parse_args.net_object().apply", "utils.save_manager.load_model", "args.net_object().apply().to.load_state_dict", "os.path.join", "getattr", "str", "utils.set_rec_loss", "utils.set_smoothness_loss", "str", "parse_args.net_object", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.parse_args", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.train", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_test_data", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.test", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.write_info", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.metrics_evaluation_X_Test", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.load_model", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_rec_loss"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "if", "args", ".", "dataset", "==", "'Vimeo'", ":", "\n", "        ", "if", "args", ".", "phase", "!=", "'test_custom'", ":", "\n", "            ", "args", ".", "multiple", "=", "2", "\n", "", "args", ".", "S_trn", "=", "1", "\n", "args", ".", "S_tst", "=", "1", "\n", "args", ".", "module_scale_factor", "=", "2", "\n", "args", ".", "patch_size", "=", "256", "\n", "args", ".", "batch_size", "=", "16", "\n", "print", "(", "'vimeo triplet data dir : '", ",", "args", ".", "vimeo_data_path", ")", "\n", "\n", "", "print", "(", "\"Exp:\"", ",", "args", ".", "exp_num", ")", "\n", "args", ".", "model_dir", "=", "args", ".", "net_type", "+", "'_'", "+", "args", ".", "dataset", "+", "'_exp'", "+", "str", "(", "\n", "args", ".", "exp_num", ")", "# ex) model_dir = \"XVFInet_X4K1000FPS_exp1\"", "\n", "\n", "if", "args", "is", "None", ":", "\n", "        ", "exit", "(", ")", "\n", "", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "print", "(", "'# {} : {}'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "\n", "'cuda:'", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "# will be used as \"x.to(device)\"", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "# change allocation of current GPU", "\n", "# caution!!!! if not \"torch.cuda.set_device()\":", "\n", "# RuntimeError: grid_sampler(): expected input and grid to be on same device, but input is on cuda:1 and grid is on cuda:0", "\n", "print", "(", "'Available devices: '", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "print", "(", "'Current cuda device: '", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", "\n", "print", "(", "'Current cuda device name: '", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "device", ")", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} is used\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "SM", "=", "save_manager", "(", "args", ")", "\n", "\n", "\"\"\" Initialize a model \"\"\"", "\n", "model_net", "=", "args", ".", "net_object", "(", "args", ")", ".", "apply", "(", "weights_init", ")", ".", "to", "(", "device", ")", "\n", "criterion", "=", "[", "set_rec_loss", "(", "args", ")", ".", "to", "(", "device", ")", ",", "set_smoothness_loss", "(", ")", ".", "to", "(", "device", ")", "]", "\n", "\n", "# to enable the inbuilt cudnn auto-tuner", "\n", "# to find the best algorithm to use for your hardware.", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "phase", "==", "\"train\"", ":", "\n", "        ", "train", "(", "model_net", ",", "criterion", ",", "device", ",", "SM", ",", "args", ")", "\n", "epoch", "=", "args", ".", "epochs", "-", "1", "\n", "\n", "", "elif", "args", ".", "phase", "==", "\"test\"", "or", "args", ".", "phase", "==", "\"metrics_evaluation\"", "or", "args", ".", "phase", "==", "'test_custom'", ":", "\n", "        ", "checkpoint", "=", "SM", ".", "load_model", "(", ")", "\n", "model_net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict_Model'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'last_epoch'", "]", "\n", "\n", "", "postfix", "=", "'_final_x'", "+", "str", "(", "args", ".", "multiple", ")", "+", "'_S_tst'", "+", "str", "(", "args", ".", "S_tst", ")", "\n", "if", "args", ".", "phase", "!=", "\"metrics_evaluation\"", ":", "\n", "        ", "print", "(", "\"\\n-------------------------------------- Final Test starts -------------------------------------- \"", ")", "\n", "print", "(", "'Evaluate on test set (final test) with multiple = %d '", "%", "(", "args", ".", "multiple", ")", ")", "\n", "\n", "final_test_loader", "=", "get_test_data", "(", "args", ",", "multiple", "=", "args", ".", "multiple", ",", "\n", "validation", "=", "False", ")", "# multiple is only used for X4K1000FPS", "\n", "\n", "testLoss", ",", "testPSNR", ",", "testSSIM", ",", "final_pred_save_path", "=", "test", "(", "final_test_loader", ",", "model_net", ",", "\n", "criterion", ",", "epoch", ",", "\n", "args", ",", "device", ",", "\n", "multiple", "=", "args", ".", "multiple", ",", "\n", "postfix", "=", "postfix", ",", "validation", "=", "False", ")", "\n", "SM", ".", "write_info", "(", "'Final 4k frames PSNR : {:.4}\\n'", ".", "format", "(", "testPSNR", ")", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'X4K1000FPS'", "and", "args", ".", "phase", "!=", "'test_custom'", ":", "\n", "        ", "final_pred_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_img_dir", ",", "args", ".", "model_dir", ",", "'epoch_'", "+", "str", "(", "epoch", ")", ".", "zfill", "(", "5", ")", ")", "+", "postfix", "\n", "metrics_evaluation_X_Test", "(", "final_pred_save_path", ",", "args", ".", "test_data_path", ",", "args", ".", "metrics_types", ",", "\n", "flow_flag", "=", "args", ".", "saving_flow_flag", ",", "multiple", "=", "args", ".", "multiple", ")", "\n", "\n", "\n", "\n", "", "print", "(", "\"------------------------- Test has been ended. -------------------------\\n\"", ")", "\n", "print", "(", "\"Exp:\"", ",", "args", ".", "exp_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.train": [[171, 307], ["torch.Adam", "torch.lr_scheduler.MultiStepLR", "collections.Counter", "print", "model_net.train", "time.time", "SM.write_info", "print", "utils.get_test_data", "range", "print", "print", "print", "model_net.parameters", "SM.load_model", "model_net.load_state_dict", "optim.Adam.load_state_dict", "optim.lr_scheduler.MultiStepLR.load_state_dict", "print", "utils.get_train_data", "utils.AverageClass", "utils.AverageClass", "utils.ProgressMeter", "print", "enumerate", "print", "main.test", "print", "max", "SM.save_best_model", "SM.write_info", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "optim.Adam.zero_grad", "model_net", "enumerate", "len", "F.interpolate", "total_loss.backward", "optim.Adam.step", "utils.AverageClass.update", "utils.AverageClass.update", "time.time", "optim.lr_scheduler.MultiStepLR.step", "str", "model_net.state_dict", "optim.Adam.state_dict", "optim.lr_scheduler.MultiStepLR.state_dict", "SM.save_epc_model", "torch.autograd.Variable.to", "torch.autograd.Variable.to", "torch.autograd.Variable.to", "smoothness_loss", "F.interpolate", "total_loss.item", "utils.ProgressMeter.print", "utils.get_batch_images", "cv2.imwrite", "str", "multi_scale_recon_loss", "F.interpolate", "time.time", "os.path.join", "str", "datetime.now", "F.interpolate"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.train", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.write_info", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_test_data", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.load_model", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_train_data", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.test", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.save_best_model", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.write_info", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.save_epc_model", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_batch_images"], ["", "def", "train", "(", "model_net", ",", "criterion", ",", "device", ",", "save_manager", ",", "args", ")", ":", "\n", "    ", "SM", "=", "save_manager", "\n", "multi_scale_recon_loss", "=", "criterion", "[", "0", "]", "\n", "smoothness_loss", "=", "criterion", "[", "1", "]", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model_net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "init_lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "# optimizer", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_milestones", ",", "gamma", "=", "args", ".", "lr_dec_fac", ")", "\n", "\n", "last_epoch", "=", "0", "\n", "best_PSNR", "=", "0.0", "\n", "\n", "if", "args", ".", "continue_training", ":", "\n", "        ", "checkpoint", "=", "SM", ".", "load_model", "(", ")", "\n", "last_epoch", "=", "checkpoint", "[", "'last_epoch'", "]", "+", "1", "\n", "best_PSNR", "=", "checkpoint", "[", "'best_PSNR'", "]", "\n", "model_net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict_Model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict_Optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict_Scheduler'", "]", ")", "\n", "print", "(", "\"Optimizer and Scheduler have been reloaded. \"", ")", "\n", "", "scheduler", ".", "milestones", "=", "Counter", "(", "args", ".", "lr_milestones", ")", "\n", "scheduler", ".", "gamma", "=", "args", ".", "lr_dec_fac", "\n", "print", "(", "\"scheduler.milestones : {}, scheduler.gamma : {}\"", ".", "format", "(", "scheduler", ".", "milestones", ",", "scheduler", ".", "gamma", ")", ")", "\n", "start_epoch", "=", "last_epoch", "\n", "\n", "# switch to train mode", "\n", "model_net", ".", "train", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "SM", ".", "write_info", "(", "'Epoch\\ttrainLoss\\ttestPSNR\\tbest_PSNR\\n'", ")", "\n", "print", "(", "\"[*] Training starts\"", ")", "\n", "\n", "# Main training loop for total epochs (start from 'epoch=0')", "\n", "valid_loader", "=", "get_test_data", "(", "args", ",", "multiple", "=", "4", ",", "validation", "=", "True", ")", "# multiple is only used for X4K1000FPS", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "train_loader", "=", "get_train_data", "(", "args", ",", "\n", "max_t_step_size", "=", "32", ")", "# max_t_step_size (temporal distance) is only used for X4K1000FPS", "\n", "\n", "batch_time", "=", "AverageClass", "(", "'batch_time[s]:'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageClass", "(", "'Loss:'", ",", "':.4e'", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "train_loader", ")", ",", "batch_time", ",", "losses", ",", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "print", "(", "'Start epoch {} at [{:s}], learning rate : [{}]'", ".", "format", "(", "epoch", ",", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", "[", ":", "-", "7", "]", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "# train for one epoch", "\n", "for", "trainIndex", ",", "(", "frames", ",", "t_value", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "            ", "input_frames", "=", "frames", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "# [B, C, T, H, W]", "\n", "frameT", "=", "frames", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "# [B, C, H, W]", "\n", "\n", "# Getting the input and the target from the training set", "\n", "input_frames", "=", "Variable", "(", "input_frames", ".", "to", "(", "device", ")", ")", "\n", "frameT", "=", "Variable", "(", "frameT", ".", "to", "(", "device", ")", ")", "# ground truth for frameT", "\n", "t_value", "=", "Variable", "(", "t_value", ".", "to", "(", "device", ")", ")", "# [B,1]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# compute output", "\n", "pred_frameT_pyramid", ",", "pred_flow_pyramid", ",", "occ_map", ",", "simple_mean", "=", "model_net", "(", "input_frames", ",", "t_value", ")", "\n", "rec_loss", "=", "0.0", "\n", "smooth_loss", "=", "0.0", "\n", "for", "l", ",", "pred_frameT_l", "in", "enumerate", "(", "pred_frameT_pyramid", ")", ":", "\n", "                ", "rec_loss", "+=", "args", ".", "rec_lambda", "*", "multi_scale_recon_loss", "(", "pred_frameT_l", ",", "\n", "F", ".", "interpolate", "(", "frameT", ",", "scale_factor", "=", "1", "/", "(", "2", "**", "l", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", ")", "\n", "", "smooth_loss", "+=", "0.5", "*", "smoothness_loss", "(", "pred_flow_pyramid", "[", "0", "]", ",", "\n", "F", ".", "interpolate", "(", "frameT", ",", "scale_factor", "=", "1", "/", "args", ".", "module_scale_factor", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", "align_corners", "=", "False", ")", ")", "# Apply 1st order edge-aware smoothness loss to the fineset level", "\n", "rec_loss", "/=", "len", "(", "pred_frameT_pyramid", ")", "\n", "pred_frameT", "=", "pred_frameT_pyramid", "[", "0", "]", "# final result I^0_t at original scale (s=0)", "\n", "pred_coarse_flow", "=", "2", "**", "(", "args", ".", "S_trn", ")", "*", "F", ".", "interpolate", "(", "pred_flow_pyramid", "[", "-", "1", "]", ",", "scale_factor", "=", "2", "**", "(", "\n", "args", ".", "S_trn", ")", "*", "args", ".", "module_scale_factor", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "pred_fine_flow", "=", "F", ".", "interpolate", "(", "pred_flow_pyramid", "[", "0", "]", ",", "scale_factor", "=", "args", ".", "module_scale_factor", ",", "mode", "=", "'bicubic'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "total_loss", "=", "rec_loss", "+", "smooth_loss", "\n", "\n", "# compute gradient and do SGD step", "\n", "total_loss", ".", "backward", "(", ")", "# Backpropagate", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer update", "\n", "\n", "# measure accumulated time and update average \"batch\" time consumptions via \"AverageClass\"", "\n", "# update average values via \"AverageClass\"", "\n", "losses", ".", "update", "(", "total_loss", ".", "item", "(", ")", ",", "1", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "trainIndex", "%", "args", ".", "freq_display", "==", "0", ":", "\n", "                ", "progress", ".", "print", "(", "trainIndex", ")", "\n", "batch_images", "=", "get_batch_images", "(", "args", ",", "save_img_num", "=", "args", ".", "save_img_num", ",", "\n", "save_images", "=", "[", "pred_frameT", ",", "pred_coarse_flow", ",", "pred_fine_flow", ",", "frameT", ",", "\n", "simple_mean", ",", "occ_map", "]", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "'{:03d}_{:04d}_training.png'", ".", "format", "(", "epoch", ",", "trainIndex", ")", ")", ",", "batch_images", ")", "\n", "\n", "\n", "\n", "", "", "if", "epoch", ">=", "args", ".", "lr_dec_start", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# if (epoch + 1) % 10 == 0 or epoch==0:", "\n", "", "val_multiple", "=", "4", "if", "args", ".", "dataset", "==", "'X4K1000FPS'", "else", "2", "\n", "print", "(", "'\\nEvaluate on test set (validation while training) with multiple = {}'", ".", "format", "(", "val_multiple", ")", ")", "\n", "postfix", "=", "'_val_'", "+", "str", "(", "val_multiple", ")", "+", "'_S_tst'", "+", "str", "(", "args", ".", "S_tst", ")", "\n", "testLoss", ",", "testPSNR", ",", "testSSIM", ",", "final_pred_save_path", "=", "test", "(", "valid_loader", ",", "model_net", ",", "criterion", ",", "epoch", ",", "args", ",", "\n", "device", ",", "multiple", "=", "val_multiple", ",", "postfix", "=", "postfix", ",", "\n", "validation", "=", "True", ")", "\n", "\n", "# remember best best_PSNR and best_SSIM and save checkpoint", "\n", "print", "(", "\"best_PSNR : {:.3f}, testPSNR : {:.3f}\"", ".", "format", "(", "best_PSNR", ",", "testPSNR", ")", ")", "\n", "best_PSNR_flag", "=", "testPSNR", ">", "best_PSNR", "\n", "best_PSNR", "=", "max", "(", "testPSNR", ",", "best_PSNR", ")", "\n", "# save checkpoint.", "\n", "combined_state_dict", "=", "{", "\n", "'net_type'", ":", "args", ".", "net_type", ",", "\n", "'last_epoch'", ":", "epoch", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'trainLoss'", ":", "losses", ".", "avg", ",", "\n", "'testLoss'", ":", "testLoss", ",", "\n", "'testPSNR'", ":", "testPSNR", ",", "\n", "'best_PSNR'", ":", "best_PSNR", ",", "\n", "'state_dict_Model'", ":", "model_net", ".", "state_dict", "(", ")", ",", "\n", "'state_dict_Optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state_dict_Scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", "}", "\n", "\n", "SM", ".", "save_best_model", "(", "combined_state_dict", ",", "best_PSNR_flag", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "SM", ".", "save_epc_model", "(", "combined_state_dict", ",", "epoch", ")", "\n", "", "SM", ".", "write_info", "(", "'{}\\t{:.4}\\t{:.4}\\t{:.4}\\n'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ",", "testPSNR", ",", "best_PSNR", ")", ")", "\n", "\n", "", "print", "(", "\"------------------------- Training has been ended. -------------------------\\n\"", ")", "\n", "print", "(", "\"information of model:\"", ",", "args", ".", "model_dir", ")", "\n", "print", "(", "\"best_PSNR of model:\"", ",", "best_PSNR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.main.test": [[309, 414], ["utils.AverageClass", "utils.AverageClass", "utils.AverageClass", "utils.AverageClass", "utils.ProgressMeter", "model_net.eval", "print", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "torch.autograd.Variable", "torch.autograd.Variable", "model_net", "np.squeeze.to", "torch.autograd.Variable.to", "torch.autograd.Variable", "F.pad.size", "numpy.squeeze", "numpy.squeeze", "numpy.around", "utils.denorm255_np", "utils.psnr", "utils.ssim_bgr", "utils.check_folder", "os.path.join", "utils.check_folder", "cv2.imwrite", "utils.AverageClass.update", "utils.AverageClass.update", "utils.AverageClass.update", "utils.AverageClass.update", "time.time", "os.path.join", "numpy.squeeze", "numpy.around", "print", "cv2.imwrite", "utils.AverageClass.update", "utils.AverageClass.update", "utils.AverageClass.update", "F.pad.to", "F.pad", "multi_scale_recon_loss", "np.squeeze.detach().cpu().numpy", "np.squeeze.detach().cpu().numpy", "utils.denorm255_np", "numpy.transpose", "os.path.join", "os.path.join", "cv2.imwrite", "cv2.imwrite", "os.path.join", "np.around.astype", "test_loss.item", "utils.ProgressMeter.print", "np.squeeze.detach().cpu().numpy", "utils.denorm255_np", "os.path.join", "os.path.join", "np.around.astype", "numpy.transpose", "os.path.join", "numpy.transpose().astype", "os.path.join", "numpy.transpose().astype", "time.time", "numpy.transpose", "np.squeeze.detach().cpu", "np.squeeze.detach().cpu", "np.squeeze.detach().cpu", "str().zfill", "numpy.transpose", "numpy.transpose", "np.squeeze.detach", "np.squeeze.detach", "numpy.squeeze", "numpy.squeeze", "np.squeeze.detach", "str", "utils.denorm255_np", "utils.denorm255_np", "save_input_frames[].detach().numpy", "save_input_frames[].detach().numpy", "save_input_frames[].detach", "save_input_frames[].detach"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.psnr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ssim_bgr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np"], ["", "def", "test", "(", "test_loader", ",", "model_net", ",", "criterion", ",", "epoch", ",", "args", ",", "device", ",", "multiple", ",", "postfix", ",", "validation", ")", ":", "\n", "    ", "batch_time", "=", "AverageClass", "(", "'Time:'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageClass", "(", "'testLoss:'", ",", "':.4e'", ")", "\n", "PSNRs", "=", "AverageClass", "(", "'testPSNR:'", ",", "':.4e'", ")", "\n", "SSIMs", "=", "AverageClass", "(", "'testSSIM:'", ",", "':.4e'", ")", "\n", "args", ".", "divide", "=", "2", "**", "(", "args", ".", "S_tst", ")", "*", "args", ".", "module_scale_factor", "*", "4", "\n", "\n", "# progress = ProgressMeter(len(test_loader), batch_time, accm_time, losses, PSNRs, SSIMs, prefix='Test after Epoch[{}]: '.format(epoch))", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "test_loader", ")", ",", "PSNRs", ",", "SSIMs", ",", "prefix", "=", "'Test after Epoch[{}]: '", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "multi_scale_recon_loss", "=", "criterion", "[", "0", "]", "\n", "\n", "# switch to evaluate mode", "\n", "model_net", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"------------------------------------------- Test ----------------------------------------------\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "testIndex", ",", "(", "frames", ",", "t_value", ",", "scene_name", ",", "frameRange", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# Shape of 'frames' : [1,C,T+1,H,W]", "\n", "            ", "frameT", "=", "frames", "[", ":", ",", ":", ",", "-", "1", ",", ":", ",", ":", "]", "# [1,C,H,W]", "\n", "It_Path", ",", "I0_Path", ",", "I1_Path", "=", "frameRange", "\n", "\n", "frameT", "=", "Variable", "(", "frameT", ".", "to", "(", "device", ")", ")", "# ground truth for frameT", "\n", "t_value", "=", "Variable", "(", "t_value", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "(", "testIndex", "%", "(", "multiple", "-", "1", ")", ")", "==", "0", ":", "\n", "                ", "input_frames", "=", "frames", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "# [1,C,T,H,W]", "\n", "input_frames", "=", "Variable", "(", "input_frames", ".", "to", "(", "device", ")", ")", "\n", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "input_frames", ".", "size", "(", ")", "\n", "H_padding", "=", "(", "args", ".", "divide", "-", "H", "%", "args", ".", "divide", ")", "%", "args", ".", "divide", "\n", "W_padding", "=", "(", "args", ".", "divide", "-", "W", "%", "args", ".", "divide", ")", "%", "args", ".", "divide", "\n", "if", "H_padding", "!=", "0", "or", "W_padding", "!=", "0", ":", "\n", "                    ", "input_frames", "=", "F", ".", "pad", "(", "input_frames", ",", "(", "0", ",", "W_padding", ",", "0", ",", "H_padding", ")", ",", "\"constant\"", ")", "\n", "\n", "\n", "", "", "pred_frameT", "=", "model_net", "(", "input_frames", ",", "t_value", ",", "is_training", "=", "False", ")", "\n", "\n", "if", "H_padding", "!=", "0", "or", "W_padding", "!=", "0", ":", "\n", "                ", "pred_frameT", "=", "pred_frameT", "[", ":", ",", ":", ",", ":", "H", ",", ":", "W", "]", "\n", "\n", "\n", "\n", "", "if", "args", ".", "phase", "!=", "'test_custom'", ":", "\n", "                ", "test_loss", "=", "args", ".", "rec_lambda", "*", "multi_scale_recon_loss", "(", "pred_frameT", ",", "frameT", ")", "\n", "\n", "pred_frameT", "=", "np", ".", "squeeze", "(", "pred_frameT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "frameT", "=", "np", ".", "squeeze", "(", "frameT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\"\"\" compute PSNR & SSIM \"\"\"", "\n", "output_img", "=", "np", ".", "around", "(", "denorm255_np", "(", "np", ".", "transpose", "(", "pred_frameT", ",", "[", "1", ",", "2", ",", "0", "]", ")", ")", ")", "# [h,w,c] and [-1,1] to [0,255]", "\n", "target_img", "=", "denorm255_np", "(", "np", ".", "transpose", "(", "frameT", ",", "[", "1", ",", "2", ",", "0", "]", ")", ")", "# [h,w,c] and [-1,1] to [0,255]", "\n", "\n", "test_psnr", "=", "psnr", "(", "target_img", ",", "output_img", ")", "\n", "test_ssim", "=", "ssim_bgr", "(", "target_img", ",", "output_img", ")", "############### CAUTION: calculation for BGR", "\n", "\n", "\"\"\" save frame0 & frame1 \"\"\"", "\n", "if", "validation", ":", "\n", "                    ", "epoch_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_img_dir", ",", "args", ".", "model_dir", ",", "'latest'", "+", "postfix", ")", "\n", "", "else", ":", "\n", "                    ", "epoch_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_img_dir", ",", "args", ".", "model_dir", ",", "\n", "'epoch_'", "+", "str", "(", "epoch", ")", ".", "zfill", "(", "5", ")", "+", "postfix", ")", "\n", "", "check_folder", "(", "epoch_save_path", ")", "\n", "scene_save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_save_path", ",", "scene_name", "[", "0", "]", ")", "\n", "check_folder", "(", "scene_save_path", ")", "\n", "\n", "if", "(", "testIndex", "%", "(", "multiple", "-", "1", ")", ")", "==", "0", ":", "\n", "                    ", "save_input_frames", "=", "frames", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "scene_save_path", ",", "I0_Path", "[", "0", "]", ")", ",", "\n", "np", ".", "transpose", "(", "np", ".", "squeeze", "(", "denorm255_np", "(", "save_input_frames", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "scene_save_path", ",", "I1_Path", "[", "0", "]", ")", ",", "\n", "np", ".", "transpose", "(", "np", ".", "squeeze", "(", "denorm255_np", "(", "save_input_frames", "[", ":", ",", ":", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "scene_save_path", ",", "It_Path", "[", "0", "]", ")", ",", "output_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# measure", "\n", "losses", ".", "update", "(", "test_loss", ".", "item", "(", ")", ",", "1", ")", "\n", "PSNRs", ".", "update", "(", "test_psnr", ",", "1", ")", "\n", "SSIMs", ".", "update", "(", "test_ssim", ",", "1", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "testIndex", "%", "(", "multiple", "-", "1", ")", ")", "==", "multiple", "-", "2", ":", "\n", "                    ", "progress", ".", "print", "(", "testIndex", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "epoch_save_path", "=", "args", ".", "custom_path", "\n", "scene_save_path", "=", "os", ".", "path", ".", "join", "(", "epoch_save_path", ",", "scene_name", "[", "0", "]", ")", "\n", "pred_frameT", "=", "np", ".", "squeeze", "(", "pred_frameT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "output_img", "=", "np", ".", "around", "(", "denorm255_np", "(", "np", ".", "transpose", "(", "pred_frameT", ",", "[", "1", ",", "2", ",", "0", "]", ")", ")", ")", "# [h,w,c] and [-1,1] to [0,255]", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "scene_save_path", ",", "It_Path", "[", "0", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "scene_save_path", ",", "It_Path", "[", "0", "]", ")", ",", "output_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "losses", ".", "update", "(", "0.0", ",", "1", ")", "\n", "PSNRs", ".", "update", "(", "0.0", ",", "1", ")", "\n", "SSIMs", ".", "update", "(", "0.0", ",", "1", ")", "\n", "\n", "", "", "print", "(", "\"-----------------------------------------------------------------------------------------------\"", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "PSNRs", ".", "avg", ",", "SSIMs", ".", "avg", ",", "epoch_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.__init__": [[17, 42], ["print", "os.path.join", "utils.check_folder", "print", "os.path.join", "print", "str", "os.path.exists", "open", "utils.save_manager.log_file.write", "utils.save_manager.log_file.write", "vars", "utils.save_manager.log_file.close", "utils.save_manager.log_file.write", "str", "getattr", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "model_dir", "=", "self", ".", "args", ".", "net_type", "+", "'_'", "+", "self", ".", "args", ".", "dataset", "+", "'_exp'", "+", "str", "(", "self", ".", "args", ".", "exp_num", ")", "\n", "print", "(", "\"model_dir:\"", ",", "self", ".", "model_dir", ")", "\n", "# ex) model_dir = \"XVFInet_exp1\"", "\n", "\n", "self", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "self", ".", "model_dir", ")", "\n", "# './checkpoint_dir/XVFInet_exp1\"", "\n", "check_folder", "(", "self", ".", "checkpoint_dir", ")", "\n", "\n", "print", "(", "\"checkpoint_dir:\"", ",", "self", ".", "checkpoint_dir", ")", "\n", "\n", "self", ".", "text_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "text_dir", ",", "self", ".", "model_dir", ")", "\n", "print", "(", "\"text_dir:\"", ",", "self", ".", "text_dir", ")", "\n", "\n", "\"\"\" Save a text file \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "text_dir", "+", "'.txt'", ")", ":", "\n", "            ", "self", ".", "log_file", "=", "open", "(", "self", ".", "text_dir", "+", "'.txt'", ",", "'w'", ")", "\n", "# \"w\" - Write - Opens a file for writing, creates the file if it does not exist", "\n", "self", ".", "log_file", ".", "write", "(", "'----- Model parameters -----\\n'", ")", "\n", "self", ".", "log_file", ".", "write", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", "[", ":", "-", "7", "]", "+", "'\\n'", ")", "\n", "for", "arg", "in", "vars", "(", "self", ".", "args", ")", ":", "\n", "                ", "self", ".", "log_file", ".", "write", "(", "'{} : {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "self", ".", "args", ",", "arg", ")", ")", ")", "\n", "# ex) ./text_dir/XVFInet_exp1.txt", "\n", "", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.write_info": [[45, 49], ["open", "utils.save_manager.log_file.write", "utils.save_manager.log_file.close"], "methods", ["None"], ["", "", "def", "write_info", "(", "self", ",", "strings", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "self", ".", "text_dir", "+", "'.txt'", ",", "'a'", ")", "\n", "self", ".", "log_file", ".", "write", "(", "strings", ")", "\n", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.save_best_model": [[50, 56], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "methods", ["None"], ["", "def", "save_best_model", "(", "self", ",", "combined_state_dict", ",", "best_PSNR_flag", ")", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_latest.pt'", ")", "\n", "# file_name = \"./checkpoint_dir/XVFInet_exp1/XVFInet_exp1_latest.ckpt", "\n", "torch", ".", "save", "(", "combined_state_dict", ",", "file_name", ")", "\n", "if", "best_PSNR_flag", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "file_name", ",", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_best_PSNR.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.save_epc_model": [[59, 63], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str"], "methods", ["None"], ["", "", "def", "save_epc_model", "(", "self", ",", "combined_state_dict", ",", "epoch", ")", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_epc'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "# file_name = \"./checkpoint_dir/XVFInet_exp1/XVFInet_exp1_epc10.ckpt", "\n", "torch", ".", "save", "(", "combined_state_dict", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.load_epc_model": [[64, 70], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "os.path.join", "os.path.join", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "load_epc_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_epc'", "+", "str", "(", "epoch", "-", "1", ")", "+", "'.pt'", ")", ")", "\n", "print", "(", "\"load model '{}', epoch: {}, best_PSNR: {:3f}\"", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_epc'", "+", "str", "(", "epoch", "-", "1", ")", "+", "'.pt'", ")", ",", "checkpoint", "[", "'last_epoch'", "]", "+", "1", ",", "\n", "checkpoint", "[", "'best_PSNR'", "]", ")", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.load_model": [[71, 77], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "load_model", "(", "self", ",", ")", ":", "\n", "# checkpoint = torch.load(self.checkpoint_dir + '/' + self.model_dir + '_latest.pt')", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_latest.pt'", ")", ",", "map_location", "=", "'cuda:0'", ")", "\n", "print", "(", "\"load model '{}', epoch: {},\"", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_latest.pt'", ")", ",", "checkpoint", "[", "'last_epoch'", "]", "+", "1", ")", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.save_manager.load_best_PSNR_model": [[78, 84], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "load_best_PSNR_model", "(", "self", ",", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_best_PSNR.pt'", ")", ")", "\n", "print", "(", "\"load _best_PSNR model '{}', epoch: {}, best_PSNR: {:3f}, best_SSIM: {:3f}\"", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "self", ".", "model_dir", "+", "'_best_PSNR.pt'", ")", ",", "checkpoint", "[", "'last_epoch'", "]", "+", "1", ",", "\n", "checkpoint", "[", "'best_PSNR'", "]", ",", "checkpoint", "[", "'best_SSIM'", "]", ")", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Train.__init__": [[204, 214], ["utils.make_2D_dataset_X_Train", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_X_Train"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "max_t_step_size", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "max_t_step_size", "=", "max_t_step_size", "\n", "\n", "self", ".", "framesPath", "=", "make_2D_dataset_X_Train", "(", "self", ".", "args", ".", "train_data_path", ")", "\n", "self", ".", "nScenes", "=", "len", "(", "self", ".", "framesPath", ")", "\n", "\n", "# Raise error if no images found in train_data_path.", "\n", "if", "self", ".", "nScenes", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "self", ".", "args", ".", "train_data_path", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Train.__getitem__": [[215, 236], ["random.randint", "numpy.linspace", "random.randint", "random.randint", "random.randint", "utils.frames_loader_train", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_train"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "t_step_size", "=", "random", ".", "randint", "(", "2", ",", "self", ".", "max_t_step_size", ")", "\n", "t_list", "=", "np", ".", "linspace", "(", "(", "1", "/", "t_step_size", ")", ",", "(", "1", "-", "(", "1", "/", "t_step_size", ")", ")", ",", "(", "t_step_size", "-", "1", ")", ")", "\n", "\n", "candidate_frames", "=", "self", ".", "framesPath", "[", "idx", "]", "\n", "firstFrameIdx", "=", "random", ".", "randint", "(", "0", ",", "(", "64", "-", "t_step_size", ")", ")", "\n", "interIdx", "=", "random", ".", "randint", "(", "1", ",", "t_step_size", "-", "1", ")", "# relative index, 1~self.t_step_size-1", "\n", "interFrameIdx", "=", "firstFrameIdx", "+", "interIdx", "# absolute index", "\n", "t_value", "=", "t_list", "[", "interIdx", "-", "1", "]", "# [0,1]", "\n", "\n", "if", "(", "random", ".", "randint", "(", "0", ",", "1", ")", ")", ":", "\n", "            ", "frameRange", "=", "[", "firstFrameIdx", ",", "firstFrameIdx", "+", "t_step_size", ",", "interFrameIdx", "]", "\n", "", "else", ":", "## temporally reversed order", "\n", "            ", "frameRange", "=", "[", "firstFrameIdx", "+", "t_step_size", ",", "firstFrameIdx", ",", "interFrameIdx", "]", "\n", "interIdx", "=", "t_step_size", "-", "interIdx", "# (self.t_step_size-1) ~ 1", "\n", "t_value", "=", "1.0", "-", "t_value", "\n", "\n", "", "frames", "=", "frames_loader_train", "(", "self", ".", "args", ",", "candidate_frames", ",", "\n", "frameRange", ")", "# including \"np2Tensor [-1,1] normalized\"", "\n", "\n", "return", "frames", ",", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "t_value", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Train.__len__": [[237, 239], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nScenes", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Test.__init__": [[264, 281], ["len", "utils.make_2D_dataset_X_Test", "utils.make_2D_dataset_X_Test", "len", "RuntimeError", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_X_Test", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_X_Test"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "multiple", ",", "validation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "multiple", "=", "multiple", "\n", "self", ".", "validation", "=", "validation", "\n", "if", "validation", ":", "\n", "            ", "self", ".", "testPath", "=", "make_2D_dataset_X_Test", "(", "self", ".", "args", ".", "val_data_path", ",", "multiple", ",", "t_step_size", "=", "32", ")", "\n", "", "else", ":", "## test", "\n", "            ", "self", ".", "testPath", "=", "make_2D_dataset_X_Test", "(", "self", ".", "args", ".", "test_data_path", ",", "multiple", ",", "t_step_size", "=", "32", ")", "\n", "\n", "", "self", ".", "nIterations", "=", "len", "(", "self", ".", "testPath", ")", "\n", "\n", "# Raise error if no images found in test_data_path.", "\n", "if", "len", "(", "self", ".", "testPath", ")", "==", "0", ":", "\n", "            ", "if", "validation", ":", "\n", "                ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "self", ".", "args", ".", "val_data_path", "+", "\"\\n\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "self", ".", "args", ".", "test_data_path", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Test.__getitem__": [[282, 295], ["utils.frames_loader_test", "I0.split", "I1.split", "It.split", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_test"], ["", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "I0", ",", "I1", ",", "It", ",", "t_value", ",", "scene_name", "=", "self", ".", "testPath", "[", "idx", "]", "\n", "\n", "I0I1It_Path", "=", "[", "I0", ",", "I1", ",", "It", "]", "\n", "\n", "frames", "=", "frames_loader_test", "(", "self", ".", "args", ",", "I0I1It_Path", ",", "self", ".", "validation", ")", "\n", "# including \"np2Tensor [-1,1] normalized\"", "\n", "\n", "I0_path", "=", "I0", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "I1_path", "=", "I1", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "It_path", "=", "It", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "\n", "return", "frames", ",", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "t_value", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0", ")", ",", "scene_name", ",", "[", "It_path", ",", "I0_path", ",", "I1_path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.X_Test.__len__": [[296, 298], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nIterations", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Train.__init__": [[301, 319], ["open", "len", "print", "os.path.join", "sorted", "utils.Vimeo_Train.framesPath.append", "RuntimeError", "open.readline().split", "glob.glob", "os.path.join", "open.readline"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "t", "=", "0.5", "\n", "self", ".", "framesPath", "=", "[", "]", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "vimeo_data_path", ",", "'tri_trainlist.txt'", ")", ",", "\n", "'r'", ")", "# '../Datasets/vimeo_triplet/sequences/tri_trainlist.txt'", "\n", "while", "True", ":", "\n", "            ", "scene_path", "=", "f", ".", "readline", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "if", "not", "scene_path", ":", "break", "\n", "frames_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "vimeo_data_path", ",", "'sequences'", ",", "scene_path", ",", "\n", "'*.png'", ")", ")", ")", "# '../Datasets/vimeo_triplet/sequences/%05d/%04d/*.png'", "\n", "self", ".", "framesPath", ".", "append", "(", "frames_list", ")", "\n", "", "f", ".", "close", "\n", "# self.framesPath = self.framesPath[:20]", "\n", "self", ".", "nScenes", "=", "len", "(", "self", ".", "framesPath", ")", "\n", "if", "self", ".", "nScenes", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "args", ".", "vimeo_data_path", "+", "\"\\n\"", ")", ")", "\n", "", "print", "(", "\"nScenes of Vimeo train triplet : \"", ",", "self", ".", "nScenes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Train.__getitem__": [[320, 332], ["random.randint", "utils.frames_loader_train", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_train"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "candidate_frames", "=", "self", ".", "framesPath", "[", "idx", "]", "\n", "\n", "\"\"\" Randomly reverse frames \"\"\"", "\n", "if", "(", "random", ".", "randint", "(", "0", ",", "1", ")", ")", ":", "\n", "            ", "frameRange", "=", "[", "0", ",", "2", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "frameRange", "=", "[", "2", ",", "0", ",", "1", "]", "\n", "", "frames", "=", "frames_loader_train", "(", "self", ".", "args", ",", "candidate_frames", ",", "\n", "frameRange", ")", "# including \"np2Tensor [-1,1] normalized\"", "\n", "\n", "return", "frames", ",", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "0.5", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Train.__len__": [[333, 335], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nScenes", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Test.__init__": [[338, 357], ["open", "len", "os.path.join", "sorted", "utils.Vimeo_Test.framesPath.append", "len", "RuntimeError", "print", "open.readline().split", "glob.glob", "os.path.join", "open.readline"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "validation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "framesPath", "=", "[", "]", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "vimeo_data_path", ",", "'tri_testlist.txt'", ")", ",", "'r'", ")", "\n", "while", "True", ":", "\n", "            ", "scene_path", "=", "f", ".", "readline", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "if", "not", "scene_path", ":", "break", "\n", "frames_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "vimeo_data_path", ",", "'sequences'", ",", "scene_path", ",", "\n", "'*.png'", ")", ")", ")", "# '../Datasets/vimeo_triplet/sequences/%05d/%04d/*.png'", "\n", "self", ".", "framesPath", ".", "append", "(", "frames_list", ")", "\n", "", "if", "validation", ":", "\n", "            ", "self", ".", "framesPath", "=", "self", ".", "framesPath", "[", ":", ":", "37", "]", "\n", "", "f", ".", "close", "\n", "\n", "self", ".", "num_scene", "=", "len", "(", "self", ".", "framesPath", ")", "# total test scenes", "\n", "if", "len", "(", "self", ".", "framesPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "args", ".", "vimeo_data_path", "+", "\"\\n\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"# of Vimeo triplet testset : \"", ",", "self", ".", "num_scene", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Test.__getitem__": [[358, 370], ["[].split", "os.path.join", "utils.frames_loader_test", "I0.split", "I1.split", "It.split", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_test"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "scene_name", "=", "self", ".", "framesPath", "[", "idx", "]", "[", "0", "]", ".", "split", "(", "os", ".", "sep", ")", "\n", "scene_name", "=", "os", ".", "path", ".", "join", "(", "scene_name", "[", "-", "3", "]", ",", "scene_name", "[", "-", "2", "]", ")", "\n", "I0", ",", "It", ",", "I1", "=", "self", ".", "framesPath", "[", "idx", "]", "\n", "I0I1It_Path", "=", "[", "I0", ",", "I1", ",", "It", "]", "\n", "frames", "=", "frames_loader_test", "(", "self", ".", "args", ",", "I0I1It_Path", ",", "validation", "=", "False", ")", "\n", "\n", "I0_path", "=", "I0", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "I1_path", "=", "I1", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "It_path", "=", "It", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "\n", "return", "frames", ",", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "0.5", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0", ")", ",", "scene_name", ",", "[", "It_path", ",", "I0_path", ",", "I1_path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Vimeo_Test.__len__": [[371, 373], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_scene", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Custom_Test.__init__": [[421, 430], ["utils.make_2D_dataset_Custom_Test", "len", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_Custom_Test"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "multiple", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "multiple", "=", "multiple", "\n", "self", ".", "testPath", "=", "make_2D_dataset_Custom_Test", "(", "self", ".", "args", ".", "custom_path", ",", "self", ".", "multiple", ")", "\n", "self", ".", "nIterations", "=", "len", "(", "self", ".", "testPath", ")", "\n", "\n", "# Raise error if no images found in test_data_path.", "\n", "if", "len", "(", "self", ".", "testPath", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "self", ".", "args", ".", "custom_path", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Custom_Test.__getitem__": [[431, 444], ["utils.frames_loader_test", "I0.split", "I1.split", "It.split", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_test"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "I0", ",", "I1", ",", "It", ",", "t_value", ",", "scene_name", "=", "self", ".", "testPath", "[", "idx", "]", "\n", "dummy_dir", "=", "I1", "# due to there is not ground truth intermediate frame.", "\n", "I0I1It_Path", "=", "[", "I0", ",", "I1", ",", "dummy_dir", "]", "\n", "\n", "frames", "=", "frames_loader_test", "(", "self", ".", "args", ",", "I0I1It_Path", ",", "None", ")", "\n", "# including \"np2Tensor [-1,1] normalized\"", "\n", "\n", "I0_path", "=", "I0", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "I1_path", "=", "I1", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "It_path", "=", "It", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "\n", "return", "frames", ",", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "t_value", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0", ")", ",", "scene_name", ",", "[", "It_path", ",", "I0_path", ",", "I1_path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.Custom_Test.__len__": [[445, 447], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nIterations", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.L1_Charbonnier_loss.__init__": [[452, 455], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L1_Charbonnier_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "1e-3", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.L1_Charbonnier_loss.forward": [[456, 459], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "(", "X", "-", "Y", ")", "**", "2", "+", "self", ".", "epsilon", "**", "2", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.__init__": [[477, 481], ["utils.AverageClass.reset"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.reset": [[482, 487], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.update": [[488, 493], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.AverageClass.__str__": [[494, 498], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} (avg:{avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "# Accm_Time[s]: 1263.517 (avg:639.701)    (<== if AverageClass('Accm_Time[s]:', ':6.3f'))", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.__init__": [[504, 508], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter._get_batch_fmtstr"], ["def", "__init__", "(", "self", ",", "num_batches", ",", "*", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print": [[509, 514], ["utils.ProgressMeter.print"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "print", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "# # Epoch: [0][  0/196]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter._get_batch_fmtstr": [[515, 519], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__": [[806, 810], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "150.0", ",", "edge_aware", "=", "True", ")", ":", "\n", "        ", "super", "(", "set_smoothness_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "edge_aware", "=", "edge_aware", "\n", "self", ".", "weight", "=", "weight", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_smoothness_loss.forward": [[811, 824], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "img", ")", ":", "\n", "        ", "img_gh", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "(", "img", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "img", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "img_gw", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "(", "img", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "img", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "weight_gh", "=", "torch", ".", "exp", "(", "-", "self", ".", "weight", "*", "img_gh", ")", "\n", "weight_gw", "=", "torch", ".", "exp", "(", "-", "self", ".", "weight", "*", "img_gw", ")", "\n", "\n", "flow_gh", "=", "torch", ".", "abs", "(", "flow", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "flow", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "flow_gw", "=", "torch", ".", "abs", "(", "flow", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "flow", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "if", "self", ".", "edge_aware", ":", "\n", "            ", "return", "(", "torch", ".", "mean", "(", "weight_gh", "*", "flow_gh", ")", "+", "torch", ".", "mean", "(", "weight_gw", "*", "flow_gw", ")", ")", "*", "0.5", "\n", "", "else", ":", "\n", "            ", "return", "(", "torch", ".", "mean", "(", "flow_gh", ")", "+", "torch", ".", "mean", "(", "flow_gw", ")", ")", "*", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder": [[86, 90], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "check_folder", "(", "log_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.weights_init": [[92, 99], ["torch.nn.init.xavier_normal_", "classname.find", "classname.find", "hasattr", "torch.nn.init.zeros_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "(", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ")", "or", "(", "classname", ".", "find", "(", "'Conv3d'", ")", "!=", "-", "1", ")", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "# init.kaiming_normal_(m.weight, nonlinearity='relu')", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_train_data": [[101, 109], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.X_Train", "utils.Vimeo_Train", "int"], "function", ["None"], ["", "", "", "def", "get_train_data", "(", "args", ",", "max_t_step_size", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'X4K1000FPS'", ":", "\n", "        ", "data_train", "=", "X_Train", "(", "args", ",", "max_t_step_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'Vimeo'", ":", "\n", "        ", "data_train", "=", "Vimeo_Train", "(", "args", ")", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data_train", ",", "batch_size", "=", "args", ".", "batch_size", ",", "drop_last", "=", "True", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "args", ".", "num_thrds", ")", ",", "pin_memory", "=", "False", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_test_data": [[111, 120], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.X_Test", "utils.Vimeo_Test", "utils.Custom_Test"], "function", ["None"], ["", "def", "get_test_data", "(", "args", ",", "multiple", ",", "validation", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'X4K1000FPS'", "and", "args", ".", "phase", "!=", "'test_custom'", ":", "\n", "        ", "data_test", "=", "X_Test", "(", "args", ",", "multiple", ",", "validation", ")", "# 'validation' for validation while training for simplicity", "\n", "", "elif", "args", ".", "dataset", "==", "'Vimeo'", "and", "args", ".", "phase", "!=", "'test_custom'", ":", "\n", "        ", "data_test", "=", "Vimeo_Test", "(", "args", ",", "validation", ")", "\n", "", "elif", "args", ".", "phase", "==", "'test_custom'", ":", "\n", "        ", "data_test", "=", "Custom_Test", "(", "args", ",", "multiple", ")", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data_test", ",", "batch_size", "=", "1", ",", "drop_last", "=", "True", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "False", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_train": [[122, 147], ["numpy.stack", "random.randint", "numpy.rot90", "utils.RGBframes_np2Tensor", "cv2.imread", "RGBframes_np2Tensor.append", "random.randrange", "random.randrange", "random.random"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.RGBframes_np2Tensor"], ["", "def", "frames_loader_train", "(", "args", ",", "candidate_frames", ",", "frameRange", ")", ":", "\n", "    ", "frames", "=", "[", "]", "\n", "for", "frameIndex", "in", "frameRange", ":", "\n", "        ", "frame", "=", "cv2", ".", "imread", "(", "candidate_frames", "[", "frameIndex", "]", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "(", "ih", ",", "iw", ",", "c", ")", "=", "frame", ".", "shape", "\n", "frames", "=", "np", ".", "stack", "(", "frames", ",", "axis", "=", "0", ")", "# (T, H, W, 3)", "\n", "if", "args", ".", "need_patch", ":", "## random crop", "\n", "        ", "ps", "=", "args", ".", "patch_size", "\n", "ix", "=", "random", ".", "randrange", "(", "0", ",", "iw", "-", "ps", "+", "1", ")", "\n", "iy", "=", "random", ".", "randrange", "(", "0", ",", "ih", "-", "ps", "+", "1", ")", "\n", "frames", "=", "frames", "[", ":", ",", "iy", ":", "iy", "+", "ps", ",", "ix", ":", "ix", "+", "ps", ",", ":", "]", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "# random horizontal flip", "\n", "        ", "frames", "=", "frames", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "# No vertical flip", "\n", "\n", "", "rot", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "# random rotate", "\n", "frames", "=", "np", ".", "rot90", "(", "frames", ",", "rot", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "\"\"\" np2Tensor [-1,1] normalized \"\"\"", "\n", "frames", "=", "RGBframes_np2Tensor", "(", "frames", ",", "args", ".", "img_ch", ")", "\n", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.frames_loader_test": [[149, 168], ["numpy.stack", "utils.RGBframes_np2Tensor", "cv2.imread", "RGBframes_np2Tensor.append"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.RGBframes_np2Tensor"], ["", "def", "frames_loader_test", "(", "args", ",", "I0I1It_Path", ",", "validation", ")", ":", "\n", "    ", "frames", "=", "[", "]", "\n", "for", "path", "in", "I0I1It_Path", ":", "\n", "        ", "frame", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "(", "ih", ",", "iw", ",", "c", ")", "=", "frame", ".", "shape", "\n", "frames", "=", "np", ".", "stack", "(", "frames", ",", "axis", "=", "0", ")", "# (T, H, W, 3)", "\n", "\n", "if", "args", ".", "dataset", "==", "'X4K1000FPS'", ":", "\n", "        ", "if", "validation", ":", "\n", "            ", "ps", "=", "512", "\n", "ix", "=", "(", "iw", "-", "ps", ")", "//", "2", "\n", "iy", "=", "(", "ih", "-", "ps", ")", "//", "2", "\n", "frames", "=", "frames", "[", ":", ",", "iy", ":", "iy", "+", "ps", ",", "ix", ":", "ix", "+", "ps", ",", ":", "]", "\n", "\n", "", "", "\"\"\" np2Tensor [-1,1] normalized \"\"\"", "\n", "frames", "=", "RGBframes_np2Tensor", "(", "frames", ",", "args", ".", "img_ch", ")", "\n", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.RGBframes_np2Tensor": [[170, 185], ["torch.Tensor().mul_", "torch.Tensor().mul_", "torch.Tensor().mul_", "torch.Tensor().mul_", "numpy.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().mul_.transpose().astype", "numpy.reshape", "torch.Tensor().mul_.transpose"], "function", ["None"], ["", "def", "RGBframes_np2Tensor", "(", "imgIn", ",", "channel", ")", ":", "\n", "## input : T, H, W, C", "\n", "    ", "if", "channel", "==", "1", ":", "\n", "# rgb --> Y (gray)", "\n", "        ", "imgIn", "=", "np", ".", "sum", "(", "imgIn", "*", "np", ".", "reshape", "(", "[", "65.481", ",", "128.553", ",", "24.966", "]", ",", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", "/", "255.0", ",", "axis", "=", "3", ",", "\n", "keepdims", "=", "True", ")", "+", "16.0", "\n", "\n", "# to Tensor", "\n", "", "ts", "=", "(", "3", ",", "0", ",", "1", ",", "2", ")", "############# dimension order should be [C, T, H, W]", "\n", "imgIn", "=", "torch", ".", "Tensor", "(", "imgIn", ".", "transpose", "(", "ts", ")", ".", "astype", "(", "float", ")", ")", ".", "mul_", "(", "1.0", ")", "\n", "\n", "# normalization [-1,1]", "\n", "imgIn", "=", "(", "imgIn", "/", "255.0", "-", "0.5", ")", "*", "2", "\n", "\n", "return", "imgIn", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_X_Train": [[187, 201], ["sorted", "print", "glob.glob", "sorted", "os.path.join", "glob.glob", "sorted", "framesPath.append", "len", "os.path.join", "glob.glob", "frame65_list.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "make_2D_dataset_X_Train", "(", "dir", ")", ":", "\n", "    ", "framesPath", "=", "[", "]", "\n", "# Find and loop over all the clips in root `dir`.", "\n", "for", "scene_path", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'*'", ",", "''", ")", ")", ")", ":", "\n", "        ", "sample_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "scene_path", ",", "'*'", ",", "''", ")", ")", ")", "\n", "for", "sample_path", "in", "sample_paths", ":", "\n", "            ", "frame65_list", "=", "[", "]", "\n", "for", "frame", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "sample_path", ",", "'*.png'", ")", ")", ")", ":", "\n", "                ", "frame65_list", ".", "append", "(", "frame", ")", "\n", "", "framesPath", ".", "append", "(", "frame65_list", ")", "\n", "\n", "", "", "print", "(", "\"The number of total training samples : {} which has 65 frames each.\"", ".", "format", "(", "\n", "len", "(", "framesPath", ")", ")", ")", "## 4408 folders which have 65 frames each", "\n", "return", "framesPath", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_X_Test": [[241, 261], ["numpy.linspace", "sorted", "glob.glob", "sorted", "os.path.join", "glob.glob", "sorted", "range", "os.path.join", "glob.glob", "len", "range", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "testPath.append", "len", "scene_folder.split", "os.path.join", "int"], "function", ["None"], ["", "", "def", "make_2D_dataset_X_Test", "(", "dir", ",", "multiple", ",", "t_step_size", ")", ":", "\n", "    ", "\"\"\" make [I0,I1,It,t,scene_folder] \"\"\"", "\n", "\"\"\" 1D (accumulated) \"\"\"", "\n", "testPath", "=", "[", "]", "\n", "t", "=", "np", ".", "linspace", "(", "(", "1", "/", "multiple", ")", ",", "(", "1", "-", "(", "1", "/", "multiple", ")", ")", ",", "(", "multiple", "-", "1", ")", ")", "\n", "for", "type_folder", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'*'", ",", "''", ")", ")", ")", ":", "# [type1,type2,type3,...]", "\n", "        ", "for", "scene_folder", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "type_folder", ",", "'*'", ",", "''", ")", ")", ")", ":", "# [scene1,scene2,..]", "\n", "            ", "frame_folder", "=", "sorted", "(", "glob", ".", "glob", "(", "scene_folder", "+", "'*.png'", ")", ")", "# 32 multiple, ['00000.png',...,'00032.png']", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "frame_folder", ")", ",", "t_step_size", ")", ":", "# 0,32,64,...", "\n", "                ", "if", "idx", "==", "len", "(", "frame_folder", ")", "-", "1", ":", "\n", "                    ", "break", "\n", "", "for", "mul", "in", "range", "(", "multiple", "-", "1", ")", ":", "\n", "                    ", "I0I1It_paths", "=", "[", "]", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "]", ")", "# I0 (fix)", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "+", "t_step_size", "]", ")", "# I1 (fix)", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "+", "int", "(", "(", "t_step_size", "//", "multiple", ")", "*", "(", "mul", "+", "1", ")", ")", "]", ")", "# It", "\n", "I0I1It_paths", ".", "append", "(", "t", "[", "mul", "]", ")", "\n", "I0I1It_paths", ".", "append", "(", "scene_folder", ".", "split", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "''", ")", ")", "[", "-", "1", "]", ")", "# type1/scene1", "\n", "testPath", ".", "append", "(", "I0I1It_paths", ")", "\n", "", "", "", "", "return", "testPath", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.make_2D_dataset_Custom_Test": [[374, 395], ["numpy.linspace", "sorted", "glob.glob", "sorted", "range", "os.path.join", "glob.glob", "len", "enumerate", "range", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "I0I1It_paths.append", "testPath.append", "len", "os.path.join", "str().zfill", "[].split", "[].split", "str", "frame_folder[].split", "os.path.join", "frame_folder[].split"], "function", ["None"], ["", "", "def", "make_2D_dataset_Custom_Test", "(", "dir", ",", "multiple", ")", ":", "\n", "    ", "\"\"\" make [I0,I1,It,t,scene_folder] \"\"\"", "\n", "\"\"\" 1D (accumulated) \"\"\"", "\n", "testPath", "=", "[", "]", "\n", "t", "=", "np", ".", "linspace", "(", "(", "1", "/", "multiple", ")", ",", "(", "1", "-", "(", "1", "/", "multiple", ")", ")", ",", "(", "multiple", "-", "1", ")", ")", "\n", "for", "scene_folder", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'*'", ",", "''", ")", ")", ")", ":", "# [scene1, scene2, scene3, ...]", "\n", "        ", "frame_folder", "=", "sorted", "(", "glob", ".", "glob", "(", "scene_folder", "+", "'*.png'", ")", ")", "# ex) ['00000.png',...,'00123.png']", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "frame_folder", ")", ")", ":", "\n", "            ", "if", "idx", "==", "len", "(", "frame_folder", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "for", "suffix", ",", "mul", "in", "enumerate", "(", "range", "(", "multiple", "-", "1", ")", ")", ":", "\n", "                ", "I0I1It_paths", "=", "[", "]", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "]", ")", "# I0 (fix)", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "+", "1", "]", ")", "# I1 (fix)", "\n", "target_t_Idx", "=", "frame_folder", "[", "idx", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_'", "+", "str", "(", "suffix", ")", ".", "zfill", "(", "3", ")", "+", "'.png'", "\n", "# ex) target t name: 00017.png => '00017_1.png'", "\n", "I0I1It_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "scene_folder", ",", "target_t_Idx", ")", ")", "# It", "\n", "I0I1It_paths", ".", "append", "(", "t", "[", "mul", "]", ")", "# t", "\n", "I0I1It_paths", ".", "append", "(", "frame_folder", "[", "idx", "]", ".", "split", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "''", ")", ")", "[", "-", "1", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "0", "]", ")", "# scene1", "\n", "testPath", ".", "append", "(", "I0I1It_paths", ")", "\n", "", "", "", "return", "testPath", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.set_rec_loss": [[461, 471], ["torch.MSELoss", "torch.L1Loss", "utils.L1_Charbonnier_loss"], "function", ["None"], ["", "", "def", "set_rec_loss", "(", "args", ")", ":", "\n", "    ", "loss_type", "=", "args", ".", "loss_type", "\n", "if", "loss_type", "==", "'MSE'", ":", "\n", "        ", "lossfunction", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "loss_type", "==", "'L1'", ":", "\n", "        ", "lossfunction", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "loss_type", "==", "'L1_Charbonnier_loss'", ":", "\n", "        ", "lossfunction", "=", "L1_Charbonnier_loss", "(", ")", "\n", "\n", "", "return", "lossfunction", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.metrics_evaluation_X_Test": [[521, 731], ["sorted", "dict.fromkeys", "dict.fromkeys", "dict.fromkeys", "dict.fromkeys", "dict.fromkeys", "print", "enumerate", "pandas.DataFrame().to_csv", "pandas.DataFrame().to_csv", "pandas.DataFrame().to_csv", "pandas.DataFrame().to_csv", "print", "print", "glob.glob", "sorted", "len", "RuntimeError", "enumerate", "os.path.join", "pandas.DataFrame().to_csv", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "print", "os.path.join", "glob.glob", "sorted", "pred_framesPath.append", "str", "numpy.float32", "pandas.Series", "np.float32.sum", "numpy.float32", "np.float32.sum", "print", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "os.path.join", "glob.glob", "scene_framesPath.append", "cv2.imread().astype", "cv2.imread().astype", "pred_frame.split", "print", "pandas.DataFrame", "cv2.cvtColor", "cv2.cvtColor", "cv2.calcOpticalFlowFarneback", "cv2.calcOpticalFlowFarneback", "numpy.absolute", "numpy.sqrt().mean", "total_list_dict[].append", "per_scene_list_dict[].append", "utils.psnr", "total_list_dict[].append", "per_scene_list_dict[].append", "utils.ssim_bgr", "total_list_dict[].append", "per_scene_list_dict[].append", "cv2.imread", "cv2.imread", "os.path.join", "cv2.cvtColor", "utils.check_folder", "os.path.join", "numpy.zeros_like", "cv2.cartToPolar", "cv2.cvtColor", "cv2.imwrite", "print", "np.float32.max", "np.float32.min", "pred_frame.replace", "cv2.imread().astype", "numpy.clip", "numpy.sqrt", "save_path.split", "numpy.sum", "cv2.imread"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.psnr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ssim_bgr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.check_folder", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "", "def", "metrics_evaluation_X_Test", "(", "pred_save_path", ",", "test_data_path", ",", "metrics_types", ",", "flow_flag", "=", "False", ",", "multiple", "=", "8", ",", "server", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        pred_save_path = './test_img_dir/XVFInet_exp1/epoch_00099' when 'args.epochs=100'\n        test_data_path = ex) 'F:/Jihyong/4K_1000fps_dataset/VIC_4K_1000FPS/X_TEST'\n            format: -type1\n                        -scene1\n                            :\n                        -scene5\n                    -type2\n                            :\n                    -type3\n                        :\n                        -scene5\n        \"metrics_types\": [\"PSNR\", \"SSIM\", \"LPIPS\", \"tOF\", \"tLP100\"]\n        \"flow_flag\": option for saving motion visualization\n        \"final_test_type\": ['first_interval', 1, 2, 3, 4]\n        \"multiple\": x4, x8, x16, x32 for interpolation\n     \"\"\"", "\n", "\n", "pred_framesPath", "=", "[", "]", "\n", "for", "type_folder", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pred_save_path", ",", "'*'", ",", "''", ")", ")", ")", ":", "# [type1,type2,type3,...]", "\n", "        ", "for", "scene_folder", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "type_folder", ",", "'*'", ",", "''", ")", ")", ")", ":", "# [scene1,scene2,..]", "\n", "            ", "scene_framesPath", "=", "[", "]", "\n", "for", "frame_path", "in", "sorted", "(", "glob", ".", "glob", "(", "scene_folder", "+", "'*.png'", ")", ")", ":", "\n", "                ", "scene_framesPath", ".", "append", "(", "frame_path", ")", "\n", "", "pred_framesPath", ".", "append", "(", "scene_framesPath", ")", "\n", "", "", "if", "len", "(", "pred_framesPath", ")", "==", "0", ":", "\n", "        ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in \"", "+", "pred_save_path", "+", "\"\\n\"", ")", ")", "\n", "\n", "# GT_framesPath = make_2D_dataset_X_Test(test_data_path, multiple, t_step_size=32)", "\n", "# pred_framesPath = make_2D_dataset_X_Test(pred_save_path, multiple, t_step_size=32)", "\n", "\n", "# ex) pred_save_path: './test_img_dir/XVFInet_exp1/epoch_00099' when 'args.epochs=100'", "\n", "# ex) framesPath: [['./VIC_4K_1000FPS/VIC_Test/Fast/003_TEST_Fast/00000.png',...], ..., []] 2D List, len=30", "\n", "# ex) scenesFolder: ['Fast/003_TEST_Fast',...]", "\n", "\n", "", "keys", "=", "metrics_types", "\n", "len_dict", "=", "dict", ".", "fromkeys", "(", "keys", ",", "0", ")", "\n", "Total_avg_dict", "=", "dict", ".", "fromkeys", "(", "[", "\"TotalAvg_\"", "+", "_", "for", "_", "in", "keys", "]", ",", "0", ")", "\n", "Type1_dict", "=", "dict", ".", "fromkeys", "(", "[", "\"Type1Avg_\"", "+", "_", "for", "_", "in", "keys", "]", ",", "0", ")", "\n", "Type2_dict", "=", "dict", ".", "fromkeys", "(", "[", "\"Type2Avg_\"", "+", "_", "for", "_", "in", "keys", "]", ",", "0", ")", "\n", "Type3_dict", "=", "dict", ".", "fromkeys", "(", "[", "\"Type3Avg_\"", "+", "_", "for", "_", "in", "keys", "]", ",", "0", ")", "\n", "\n", "# LPIPSnet = dm.DistModel()", "\n", "# LPIPSnet.initialize(model='net-lin', net='alex', use_gpu=True)", "\n", "\n", "total_list_dict", "=", "{", "}", "\n", "key_str", "=", "'Metrics -->'", "\n", "for", "key_i", "in", "keys", ":", "\n", "        ", "total_list_dict", "[", "key_i", "]", "=", "[", "]", "\n", "key_str", "+=", "' '", "+", "str", "(", "key_i", ")", "\n", "", "key_str", "+=", "' will be measured.'", "\n", "print", "(", "key_str", ")", "\n", "\n", "for", "scene_idx", ",", "scene_folder", "in", "enumerate", "(", "pred_framesPath", ")", ":", "\n", "        ", "per_scene_list_dict", "=", "{", "}", "\n", "for", "key_i", "in", "keys", ":", "\n", "            ", "per_scene_list_dict", "[", "key_i", "]", "=", "[", "]", "\n", "", "pred_candidate", "=", "pred_framesPath", "[", "scene_idx", "]", "# get all frames in pred_framesPath", "\n", "# GT_candidate = GT_framesPath[scene_idx]  # get 4800 frames", "\n", "# num_pred_frame_per_folder = len(pred_candidate)", "\n", "\n", "# save_path = os.path.join(pred_save_path, pred_scenesFolder[scene_idx])", "\n", "save_path", "=", "scene_folder", "[", "0", "]", "\n", "# './test_img_dir/XVFInet_exp1/epoch_00099/type1/scene1'", "\n", "\n", "# excluding both frame0 and frame1 (multiple of 32 indices)", "\n", "for", "frameIndex", ",", "pred_frame", "in", "enumerate", "(", "pred_candidate", ")", ":", "\n", "# if server==87:", "\n", "# GTinterFrameIdx = pred_frame.split('/')[-1]  # ex) 8, when multiple = 4, # 87 server", "\n", "# else:", "\n", "# GTinterFrameIdx = pred_frame.split('\\\\')[-1]  # ex) 8, when multiple = 4", "\n", "# if not (GTinterFrameIdx % 32) == 0:", "\n", "            ", "if", "frameIndex", ">", "0", "and", "frameIndex", "<", "multiple", ":", "\n", "                ", "\"\"\" only compute predicted frames (excluding multiples of 32 indices), ex) 8, 16, 24, 40, 48, 56, ... \"\"\"", "\n", "output_img", "=", "cv2", ".", "imread", "(", "pred_frame", ")", ".", "astype", "(", "np", ".", "float32", ")", "# BGR, [0,255]", "\n", "target_img", "=", "cv2", ".", "imread", "(", "pred_frame", ".", "replace", "(", "pred_save_path", ",", "test_data_path", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "# BGR, [0,255]", "\n", "pred_frame_split", "=", "pred_frame", ".", "split", "(", "os", ".", "sep", ")", "\n", "msg", "=", "\"[x%d] frame %s, \"", "%", "(", "\n", "multiple", ",", "os", ".", "path", ".", "join", "(", "pred_frame_split", "[", "-", "3", "]", ",", "pred_frame_split", "[", "-", "2", "]", ",", "pred_frame_split", "[", "-", "1", "]", ")", ")", "# per frame", "\n", "\n", "if", "\"tOF\"", "in", "keys", ":", "# tOF", "\n", "# if (GTinterFrameIdx % 32) == int(32/multiple):", "\n", "# if (frameIndex % multiple) == 1:", "\n", "                    ", "if", "frameIndex", "==", "1", ":", "\n", "# when first predicted frame in each interval", "\n", "                        ", "pre_out_grey", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "pred_candidate", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "cv2", ".", "COLOR_BGR2GRAY", ")", "#### CAUTION BRG", "\n", "# pre_tar_grey = cv2.cvtColor(cv2.imread(pred_candidate[0].replace(pred_save_path, test_data_path)), cv2.COLOR_BGR2GRAY)  #### CAUTION BRG", "\n", "pre_tar_grey", "=", "pre_out_grey", "#### CAUTION BRG", "\n", "\n", "# if not H_match_flag or not W_match_flag:", "\n", "#    pre_tar_grey = pre_tar_grey[:new_t_H, :new_t_W, :]", "\n", "\n", "# pre_tar_grey = pre_out_grey", "\n", "\n", "", "output_grey", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "target_grey", "=", "cv2", ".", "cvtColor", "(", "target_img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "target_OF", "=", "cv2", ".", "calcOpticalFlowFarneback", "(", "pre_tar_grey", ",", "target_grey", ",", "None", ",", "0.5", ",", "3", ",", "15", ",", "3", ",", "5", ",", "1.2", ",", "0", ")", "\n", "output_OF", "=", "cv2", ".", "calcOpticalFlowFarneback", "(", "pre_out_grey", ",", "output_grey", ",", "None", ",", "0.5", ",", "3", ",", "15", ",", "3", ",", "5", ",", "1.2", ",", "0", ")", "\n", "# target_OF, ofy, ofx = crop_8x8(target_OF) #check for size reason", "\n", "# output_OF, ofy, ofx = crop_8x8(output_OF)", "\n", "OF_diff", "=", "np", ".", "absolute", "(", "target_OF", "-", "output_OF", ")", "\n", "if", "flow_flag", ":", "\n", "                        ", "\"\"\" motion visualization \"\"\"", "\n", "flow_path", "=", "save_path", "+", "'_tOF_flow'", "\n", "check_folder", "(", "flow_path", ")", "\n", "# './test_img_dir/XVFInet_exp1/epoch_00099/Fast/003_TEST_Fast_tOF_flow'", "\n", "tOFpath", "=", "os", ".", "path", ".", "join", "(", "flow_path", ",", "\"tOF_flow_%05d.png\"", "%", "(", "GTinterFrameIdx", ")", ")", "\n", "# ex) \"./test_img_dir/epoch_005/Fast/003_TEST_Fast/00008_tOF\" when start_idx=0, multiple=4, frameIndex=0", "\n", "hsv", "=", "np", ".", "zeros_like", "(", "output_img", ")", "# check for size reason", "\n", "hsv", "[", "...", ",", "1", "]", "=", "255", "\n", "mag", ",", "ang", "=", "cv2", ".", "cartToPolar", "(", "OF_diff", "[", "...", ",", "0", "]", ",", "OF_diff", "[", "...", ",", "1", "]", ")", "\n", "# print(\"tar max %02.6f, min %02.6f, avg %02.6f\" % (mag.max(), mag.min(), mag.mean()))", "\n", "maxV", "=", "0.4", "\n", "mag", "=", "np", ".", "clip", "(", "mag", ",", "0.0", ",", "maxV", ")", "/", "maxV", "\n", "hsv", "[", "...", ",", "0", "]", "=", "ang", "*", "180", "/", "np", ".", "pi", "/", "2", "\n", "hsv", "[", "...", ",", "2", "]", "=", "mag", "*", "255.0", "#", "\n", "bgr", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "tOFpath", ",", "bgr", ")", "\n", "print", "(", "\"png for motion visualization has been saved in [%s]\"", "%", "\n", "(", "flow_path", ")", ")", "\n", "", "OF_diff_tmp", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "OF_diff", "*", "OF_diff", ",", "axis", "=", "-", "1", ")", ")", ".", "mean", "(", ")", "# l1 vector norm", "\n", "# OF_diff, ofy, ofx = crop_8x8(OF_diff)", "\n", "total_list_dict", "[", "\"tOF\"", "]", ".", "append", "(", "OF_diff_tmp", ")", "\n", "per_scene_list_dict", "[", "\"tOF\"", "]", ".", "append", "(", "OF_diff_tmp", ")", "\n", "msg", "+=", "\"tOF %02.2f, \"", "%", "(", "total_list_dict", "[", "\"tOF\"", "]", "[", "-", "1", "]", ")", "\n", "\n", "pre_out_grey", "=", "output_grey", "\n", "pre_tar_grey", "=", "target_grey", "\n", "\n", "# target_img, ofy, ofx = crop_8x8(target_img)", "\n", "# output_img, ofy, ofx = crop_8x8(output_img)", "\n", "\n", "", "if", "\"PSNR\"", "in", "keys", ":", "# psnr", "\n", "                    ", "psnr_tmp", "=", "psnr", "(", "target_img", ",", "output_img", ")", "\n", "total_list_dict", "[", "\"PSNR\"", "]", ".", "append", "(", "psnr_tmp", ")", "\n", "per_scene_list_dict", "[", "\"PSNR\"", "]", ".", "append", "(", "psnr_tmp", ")", "\n", "msg", "+=", "\"PSNR %02.2f\"", "%", "(", "total_list_dict", "[", "\"PSNR\"", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "\"SSIM\"", "in", "keys", ":", "# ssim", "\n", "                    ", "ssim_tmp", "=", "ssim_bgr", "(", "target_img", ",", "output_img", ")", "\n", "total_list_dict", "[", "\"SSIM\"", "]", ".", "append", "(", "ssim_tmp", ")", "\n", "per_scene_list_dict", "[", "\"SSIM\"", "]", ".", "append", "(", "ssim_tmp", ")", "\n", "\n", "msg", "+=", "\", SSIM %02.2f\"", "%", "(", "total_list_dict", "[", "\"SSIM\"", "]", "[", "-", "1", "]", ")", "\n", "\n", "# msg += \", crop (%d, %d)\" % (ofy, ofx) # per frame (not scene)", "\n", "", "print", "(", "msg", ")", "\n", "\n", "", "", "\"\"\" after finishing one scene \"\"\"", "\n", "per_scene_pd_dict", "=", "{", "}", "# per scene", "\n", "for", "cur_key", "in", "keys", ":", "\n", "# save_path = './test_img_dir/XVFInet_exp1/epoch_00099/Fast/003_TEST_Fast'", "\n", "            ", "num_data", "=", "cur_key", "+", "\"_[x%d]_[%s]\"", "%", "(", "multiple", ",", "save_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ")", "# '003_TEST_Fast'", "\n", "# num_data => ex) PSNR_[x8]_[041_TEST_Fast]", "\n", "\"\"\" per scene \"\"\"", "\n", "per_scene_cur_list", "=", "np", ".", "float32", "(", "per_scene_list_dict", "[", "cur_key", "]", ")", "\n", "per_scene_pd_dict", "[", "num_data", "]", "=", "pd", ".", "Series", "(", "per_scene_cur_list", ")", "# dictionary", "\n", "per_scene_num_data_sum", "=", "per_scene_cur_list", ".", "sum", "(", ")", "\n", "per_scene_num_data_len", "=", "per_scene_cur_list", ".", "shape", "[", "0", "]", "\n", "per_scene_num_data_mean", "=", "per_scene_num_data_sum", "/", "per_scene_num_data_len", "\n", "\"\"\" accumulation \"\"\"", "\n", "cur_list", "=", "np", ".", "float32", "(", "total_list_dict", "[", "cur_key", "]", ")", "\n", "num_data_sum", "=", "cur_list", ".", "sum", "(", ")", "\n", "num_data_len", "=", "cur_list", ".", "shape", "[", "0", "]", "# accum", "\n", "num_data_mean", "=", "num_data_sum", "/", "num_data_len", "\n", "print", "(", "\" %s, (per scene) max %02.4f, min %02.4f, avg %02.4f\"", "%", "\n", "(", "num_data", ",", "per_scene_cur_list", ".", "max", "(", ")", ",", "per_scene_cur_list", ".", "min", "(", ")", ",", "per_scene_num_data_mean", ")", ")", "#", "\n", "\n", "Total_avg_dict", "[", "\"TotalAvg_\"", "+", "cur_key", "]", "=", "num_data_mean", "# accum, update every iteration.", "\n", "\n", "len_dict", "[", "cur_key", "]", "=", "num_data_len", "# accum, update every iteration.", "\n", "\n", "# folder_dict[\"FolderAvg_\" + cur_key] += num_data_mean", "\n", "if", "scene_idx", "<", "5", ":", "\n", "                ", "Type1_dict", "[", "\"Type1Avg_\"", "+", "cur_key", "]", "+=", "per_scene_num_data_mean", "\n", "", "elif", "(", "scene_idx", ">=", "5", ")", "and", "(", "scene_idx", "<", "10", ")", ":", "\n", "                ", "Type2_dict", "[", "\"Type2Avg_\"", "+", "cur_key", "]", "+=", "per_scene_num_data_mean", "\n", "", "elif", "(", "scene_idx", ">=", "10", ")", "and", "(", "scene_idx", "<", "15", ")", ":", "\n", "                ", "Type3_dict", "[", "\"Type3Avg_\"", "+", "cur_key", "]", "+=", "per_scene_num_data_mean", "\n", "\n", "", "", "mode", "=", "'w'", "if", "scene_idx", "==", "0", "else", "'a'", "\n", "\n", "total_csv_path", "=", "os", ".", "path", ".", "join", "(", "pred_save_path", ",", "\"total_metrics.csv\"", ")", "\n", "# ex) pred_save_path: './test_img_dir/XVFInet_exp1/epoch_00099' when 'args.epochs=100'", "\n", "pd", ".", "DataFrame", "(", "per_scene_pd_dict", ")", ".", "to_csv", "(", "total_csv_path", ",", "mode", "=", "mode", ")", "\n", "\n", "", "\"\"\" combining all results after looping all scenes. \"\"\"", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "Total_avg_dict", "[", "\"TotalAvg_\"", "+", "key", "]", "=", "pd", ".", "Series", "(", "\n", "np", ".", "float32", "(", "Total_avg_dict", "[", "\"TotalAvg_\"", "+", "key", "]", ")", ")", "# replace key (update)", "\n", "Type1_dict", "[", "\"Type1Avg_\"", "+", "key", "]", "=", "pd", ".", "Series", "(", "np", ".", "float32", "(", "Type1_dict", "[", "\"Type1Avg_\"", "+", "key", "]", "/", "5", ")", ")", "# replace key (update)", "\n", "Type2_dict", "[", "\"Type2Avg_\"", "+", "key", "]", "=", "pd", ".", "Series", "(", "np", ".", "float32", "(", "Type2_dict", "[", "\"Type2Avg_\"", "+", "key", "]", "/", "5", ")", ")", "# replace key (update)", "\n", "Type3_dict", "[", "\"Type3Avg_\"", "+", "key", "]", "=", "pd", ".", "Series", "(", "np", ".", "float32", "(", "Type3_dict", "[", "\"Type3Avg_\"", "+", "key", "]", "/", "5", ")", ")", "# replace key (update)", "\n", "\n", "print", "(", "\"%s, total frames %d, total avg %02.4f, Type1 avg %02.4f, Type2 avg %02.4f, Type3 avg %02.4f\"", "%", "\n", "(", "key", ",", "len_dict", "[", "key", "]", ",", "Total_avg_dict", "[", "\"TotalAvg_\"", "+", "key", "]", ",", "\n", "Type1_dict", "[", "\"Type1Avg_\"", "+", "key", "]", ",", "Type2_dict", "[", "\"Type2Avg_\"", "+", "key", "]", ",", "Type3_dict", "[", "\"Type3Avg_\"", "+", "key", "]", ")", ")", "\n", "\n", "", "pd", ".", "DataFrame", "(", "Total_avg_dict", ")", ".", "to_csv", "(", "total_csv_path", ",", "mode", "=", "'a'", ")", "\n", "pd", ".", "DataFrame", "(", "Type1_dict", ")", ".", "to_csv", "(", "total_csv_path", ",", "mode", "=", "'a'", ")", "\n", "pd", ".", "DataFrame", "(", "Type2_dict", ")", ".", "to_csv", "(", "total_csv_path", ",", "mode", "=", "'a'", ")", "\n", "pd", ".", "DataFrame", "(", "Type3_dict", ")", ".", "to_csv", "(", "total_csv_path", ",", "mode", "=", "'a'", ")", "\n", "\n", "print", "(", "\"csv file of all metrics for all scenes has been saved in [%s]\"", "%", "\n", "(", "total_csv_path", ")", ")", "\n", "print", "(", "\"Finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.to_uint8": [[733, 738], ["x.astype.astype", "numpy.clip", "numpy.round"], "function", ["None"], ["", "def", "to_uint8", "(", "x", ",", "vmin", ",", "vmax", ")", ":", "\n", "##### color space transform, originally from https://github.com/yhjo09/VSR-DUF #####", "\n", "    ", "x", "=", "x", ".", "astype", "(", "'float32'", ")", "\n", "x", "=", "(", "x", "-", "vmin", ")", "/", "(", "vmax", "-", "vmin", ")", "*", "255", "# 0~255", "\n", "return", "np", ".", "clip", "(", "np", ".", "round", "(", "x", ")", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.psnr": [[740, 752], ["numpy.sqrt", "numpy.mean", "float", "numpy.log10", "numpy.power"], "function", ["None"], ["", "def", "psnr", "(", "img_true", ",", "img_pred", ")", ":", "\n", "##### PSNR with color space transform, originally from https://github.com/yhjo09/VSR-DUF #####", "\n", "    ", "\"\"\"\n    # img format : [h,w,c], RGB\n    \"\"\"", "\n", "# Y_true = _rgb2ycbcr(to_uint8(img_true, 0, 255), 255)[:, :, 0]", "\n", "# Y_pred = _rgb2ycbcr(to_uint8(img_pred, 0, 255), 255)[:, :, 0]", "\n", "diff", "=", "img_true", "-", "img_pred", "\n", "rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "power", "(", "diff", ",", "2", ")", ")", ")", "\n", "if", "rmse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "np", ".", "log10", "(", "255.", "/", "rmse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ssim_bgr": [[754, 762], ["skimage.metrics.structural_similarity", "utils._rgb2ycbcr", "utils._rgb2ycbcr", "utils.to_uint8", "utils.to_uint8", "Y_pred.max", "Y_pred.min"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils._rgb2ycbcr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils._rgb2ycbcr", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.to_uint8", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.to_uint8"], ["", "def", "ssim_bgr", "(", "img_true", ",", "img_pred", ")", ":", "##### SSIM for BGR, not RGB #####", "\n", "    ", "\"\"\"\n    # img format : [h,w,c], BGR\n    \"\"\"", "\n", "Y_true", "=", "_rgb2ycbcr", "(", "to_uint8", "(", "img_true", ",", "0", ",", "255", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "255", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "Y_pred", "=", "_rgb2ycbcr", "(", "to_uint8", "(", "img_pred", ",", "0", ",", "255", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "255", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "# return compare_ssim(Y_true, Y_pred, data_range=Y_pred.max() - Y_pred.min())", "\n", "return", "structural_similarity", "(", "Y_true", ",", "Y_pred", ",", "data_range", "=", "Y_pred", ".", "max", "(", ")", "-", "Y_pred", ".", "min", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.im2tensor": [[764, 768], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255": [[772, 775], ["out.clamp_"], "function", ["None"], ["", "def", "denorm255", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "return", "out", ".", "clamp_", "(", "0.0", ",", "1.0", ")", "*", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255_np": [[777, 781], ["out.clip"], "function", ["None"], ["", "def", "denorm255_np", "(", "x", ")", ":", "\n", "# numpy", "\n", "    ", "out", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "return", "out", ".", "clip", "(", "0.0", ",", "1.0", ")", "*", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils._rgb2ycbcr": [[783, 803], ["numpy.array", "numpy.array", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.transpose"], "function", ["None"], ["", "def", "_rgb2ycbcr", "(", "img", ",", "maxVal", "=", "255", ")", ":", "\n", "##### color space transform, originally from https://github.com/yhjo09/VSR-DUF #####", "\n", "    ", "O", "=", "np", ".", "array", "(", "[", "[", "16", "]", ",", "\n", "[", "128", "]", ",", "\n", "[", "128", "]", "]", ")", "\n", "T", "=", "np", ".", "array", "(", "[", "[", "0.256788235294118", ",", "0.504129411764706", ",", "0.097905882352941", "]", ",", "\n", "[", "-", "0.148223529411765", ",", "-", "0.290992156862745", ",", "0.439215686274510", "]", ",", "\n", "[", "0.439215686274510", ",", "-", "0.367788235294118", ",", "-", "0.071427450980392", "]", "]", ")", "\n", "\n", "if", "maxVal", "==", "1", ":", "\n", "        ", "O", "=", "O", "/", "255.0", "\n", "\n", "", "t", "=", "np", ".", "reshape", "(", "img", ",", "(", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ")", "\n", "t", "=", "np", ".", "dot", "(", "t", ",", "np", ".", "transpose", "(", "T", ")", ")", "\n", "t", "[", ":", ",", "0", "]", "+=", "O", "[", "0", "]", "\n", "t", "[", ":", ",", "1", "]", "+=", "O", "[", "1", "]", "\n", "t", "[", ":", ",", "2", "]", "+=", "O", "[", "2", "]", "\n", "ycbcr", "=", "np", ".", "reshape", "(", "t", ",", "[", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "return", "ycbcr", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.get_batch_images": [[826, 860], ["len", "numpy.zeros", "range", "utils.denorm255", "utils.denorm255", "utils.denorm255", "numpy.transpose().astype", "utils.flow2img", "utils.flow2img", "numpy.transpose().astype", "numpy.transpose().astype", "numpy.transpose().astype", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.transpose", "flow2img.detach().cpu().numpy", "flow2img.detach().cpu().numpy", "numpy.transpose", "numpy.transpose", "numpy.transpose", "np.transpose().astype.detach().cpu().numpy", "np.transpose().astype.detach().cpu().numpy", "np.transpose().astype.detach().cpu().numpy", "flow2img.detach().cpu", "flow2img.detach().cpu", "np.concatenate.detach().cpu().numpy", "np.transpose().astype.detach().cpu", "np.transpose().astype.detach().cpu", "np.transpose().astype.detach().cpu", "flow2img.detach", "flow2img.detach", "np.concatenate.detach().cpu", "np.transpose().astype.detach", "np.transpose().astype.detach", "np.transpose().astype.detach", "np.concatenate.detach"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.denorm255", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.flow2img", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.flow2img"], ["", "", "", "def", "get_batch_images", "(", "args", ",", "save_img_num", ",", "save_images", ")", ":", "## For visualization during training phase", "\n", "    ", "width_num", "=", "len", "(", "save_images", ")", "\n", "log_img", "=", "np", ".", "zeros", "(", "(", "save_img_num", "*", "args", ".", "patch_size", ",", "width_num", "*", "args", ".", "patch_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "pred_frameT", ",", "pred_coarse_flow", ",", "pred_fine_flow", ",", "frameT", ",", "simple_mean", ",", "occ_map", "=", "save_images", "\n", "for", "b", "in", "range", "(", "save_img_num", ")", ":", "\n", "        ", "output_img_tmp", "=", "denorm255", "(", "pred_frameT", "[", "b", ",", ":", "]", ")", "\n", "output_coarse_flow_tmp", "=", "pred_coarse_flow", "[", "b", ",", ":", "2", ",", ":", ",", ":", "]", "\n", "output_fine_flow_tmp", "=", "pred_fine_flow", "[", "b", ",", ":", "2", ",", ":", ",", ":", "]", "\n", "gt_img_tmp", "=", "denorm255", "(", "frameT", "[", "b", ",", ":", "]", ")", "\n", "simple_mean_img_tmp", "=", "denorm255", "(", "simple_mean", "[", "b", ",", ":", "]", ")", "\n", "occ_map_tmp", "=", "occ_map", "[", "b", ",", ":", "]", "\n", "\n", "output_img_tmp", "=", "np", ".", "transpose", "(", "output_img_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "output_coarse_flow_tmp", "=", "flow2img", "(", "np", ".", "transpose", "(", "output_coarse_flow_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ")", "\n", "output_fine_flow_tmp", "=", "flow2img", "(", "np", ".", "transpose", "(", "output_fine_flow_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ")", "\n", "gt_img_tmp", "=", "np", ".", "transpose", "(", "gt_img_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "simple_mean_img_tmp", "=", "np", ".", "transpose", "(", "simple_mean_img_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "occ_map_tmp", "=", "np", ".", "transpose", "(", "occ_map_tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", ",", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "occ_map_tmp", "=", "np", ".", "concatenate", "(", "[", "occ_map_tmp", ",", "occ_map_tmp", ",", "occ_map_tmp", "]", ",", "axis", "=", "2", ")", "\n", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "0", "*", "args", ".", "patch_size", ":", "1", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "simple_mean_img_tmp", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "1", "*", "args", ".", "patch_size", ":", "2", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "output_img_tmp", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "2", "*", "args", ".", "patch_size", ":", "3", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "gt_img_tmp", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "3", "*", "args", ".", "patch_size", ":", "4", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "output_coarse_flow_tmp", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "4", "*", "args", ".", "patch_size", ":", "5", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "output_fine_flow_tmp", "\n", "log_img", "[", "(", "b", ")", "*", "args", ".", "patch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "patch_size", ",", "5", "*", "args", ".", "patch_size", ":", "6", "*", "args", ".", "patch_size", ",", "\n", ":", "]", "=", "occ_map_tmp", "\n", "\n", "", "return", "log_img", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.flow2img": [[862, 915], ["utils.makecolorwheel", "numpy.sqrt", "fk.astype", "numpy.zeros", "range", "print", "numpy.log", "print", "numpy.arctan2", "numpy.clip().astype", "print", "numpy.max", "numpy.max", "numpy.clip", "numpy.max"], "function", ["home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.makecolorwheel", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print", "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.ProgressMeter.print"], ["", "def", "flow2img", "(", "flow", ",", "logscale", "=", "True", ",", "scaledown", "=", "6", ",", "output", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    topleft is zero, u is horiz, v is vertical\n    red is 3 o'clock, yellow is 6, light blue is 9, blue/purple is 12\n    \"\"\"", "\n", "u", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "# u = flow[:, :, 0]", "\n", "v", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "# v = flow[:, :, 1]", "\n", "\n", "colorwheel", "=", "makecolorwheel", "(", ")", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "\n", "radius", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "if", "output", ":", "\n", "        ", "print", "(", "\"Maximum flow magnitude: %04f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "", "if", "logscale", ":", "\n", "        ", "radius", "=", "np", ".", "log", "(", "radius", "+", "1", ")", "\n", "if", "output", ":", "\n", "            ", "print", "(", "\"Maximum flow magnitude (after log): %0.4f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "", "", "radius", "=", "radius", "/", "scaledown", "\n", "if", "output", ":", "\n", "        ", "print", "(", "\"Maximum flow magnitude (after scaledown): %0.4f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "# rot = np.arctan2(-v, -u) / np.pi", "\n", "", "rot", "=", "np", ".", "arctan2", "(", "v", ",", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "rot", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "# -1~1 maped to 0~ncols", "\n", "k0", "=", "fk", ".", "astype", "(", "np", ".", "uint8", ")", "# 0, 1, 2, ..., ncols", "\n", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "ncolors", "=", "colorwheel", ".", "shape", "[", "1", "]", "\n", "img", "=", "np", ".", "zeros", "(", "u", ".", "shape", "+", "(", "ncolors", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "ncolors", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "\n", "col1", "=", "tmp", "[", "k1", "]", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "radius", "<=", "1", "\n", "# increase saturation with radius", "\n", "col", "[", "idx", "]", "=", "1", "-", "radius", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "# out of range", "\n", "col", "[", "~", "idx", "]", "*=", "0.75", "\n", "# img[:,:,i] = np.floor(255*col).astype(np.uint8)", "\n", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "clip", "(", "255", "*", "col", ",", "0.0", ",", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# return img.astype(np.uint8)", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JihyongOh_XVFI.None.utils.makecolorwheel": [[917, 961], ["numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "makecolorwheel", "(", ")", ":", "\n", "# Create a colorwheel for visualization", "\n", "    ", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "col", ":", "col", "+", "RY", ",", "0", "]", "=", "1", "\n", "colorwheel", "[", "col", ":", "col", "+", "RY", ",", "1", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "RY", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "1", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "1", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "GC", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "1", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "1", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "BM", ")", "\n", "col", "+=", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "1", "\n", "\n", "return", "colorwheel", "\n", "", ""]]}