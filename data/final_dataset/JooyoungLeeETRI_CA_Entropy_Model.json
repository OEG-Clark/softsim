{"home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.__init__": [[12, 18], ["tester_basemodel.Tester_basemodel.build_model"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.build_model"], ["    ", "def", "__init__", "(", "self", ",", "model_dir", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "M", "=", "192", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.load_graph": [[19, 27], ["tensorflow.gfile.GFile", "tensorflow.GraphDef", "tensorflow.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "load_graph", "(", "self", ",", "frozen_graph_filename", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "GFile", "(", "frozen_graph_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"prefix\"", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.build_model": [[28, 64], ["tester_basemodel.Tester_basemodel.load_graph", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.load_graph"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "frozen_graph_filename", "=", "self", ".", "model_dir", "+", "\"/\"", "+", "\"saved_model.pb\"", "\n", "graph", "=", "self", ".", "load_graph", "(", "frozen_graph_filename", ")", "\n", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "# time.sleep(3)", "\n", "\n", "\n", "# for verifying", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "\n", "self", ".", "recon_image", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/clip_by_value:0'", ")", "\n", "self", ".", "y_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_3:0'", ")", "\n", "self", ".", "input_x", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Placeholder_2:0'", ")", "\n", "self", ".", "c_prime", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_8:0'", ")", "\n", "self", ".", "z_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Round_1:0'", ")", "\n", "self", ".", "sigma_z", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/Abs:0'", ")", "\n", "self", ".", "pred_mean", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_31/strided_slice:0'", ")", "\n", "self", ".", "pred_sigma", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_31/Exp:0'", ")", "\n", "self", ".", "concatenated_c_i", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/concat_31:0'", ")", "\n", "\n", "self", ".", "gah1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn/truediv:0'", ")", "\n", "self", ".", "gah2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_2/truediv:0'", ")", "\n", "self", ".", "gah3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_3/truediv:0'", ")", "\n", "\n", "self", ".", "gsh1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn/mul:0'", ")", "\n", "self", ".", "gsh2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_2/mul:0'", ")", "\n", "self", ".", "gsh3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_3/mul:0'", ")", "\n", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", "\n", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.extractor_prime": [[65, 67], ["None"], "methods", ["None"], ["", "def", "extractor_prime", "(", "self", ",", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "        ", "return", "padded_c_prime", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.extractor_doubleprime": [[68, 77], ["numpy.multiply"], "methods", ["None"], ["", "def", "extractor_doubleprime", "(", "self", ",", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "# Masking has no effect on decoding, because unknown variables are already set to zeros.", "\n", "# Therefore, the masking can be skipped in the case of decoding.", "\n", "# We just leave it here just to maintain a simple structure of code.", "\n", "        ", "mask", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "return", "np", ".", "multiply", "(", "padded_y_hat", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.encode": [[79, 195], ["PIL.Image.open", "open", "numpy.array", "numpy.array.tofile", "numpy.array", "numpy.array.tofile", "open.close", "int", "int", "numpy.asarray", "numpy.pad", "input_x.transpose.transpose.reshape", "input_x.transpose.transpose.transpose", "tester_basemodel.Tester_basemodel.sess.run", "numpy.pad", "tester_basemodel.Tester_basemodel.sess.run", "numpy.pad", "tester_basemodel.Tester_basemodel.sess.run", "numpy.pad", "tester_basemodel.Tester_basemodel.sess.run", "int", "int", "numpy.pad", "tester_basemodel.Tester_basemodel.sess.run", "utils.printProgressBar", "arithmeticcoding.BitOutputStream", "arithmeticcoding.ArithmeticEncoder", "range", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ArithmeticEncoder.finish", "arithmeticcoding.BitOutputStream.close", "open", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "tester_basemodel.Tester_basemodel.extractor_prime", "tester_basemodel.Tester_basemodel.extractor_doubleprime", "numpy.concatenate", "tester_basemodel.Tester_basemodel.sess.run", "range", "numpy.int", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ModelFrequencyTable", "numpy.int", "arithmeticcoding.ArithmeticEncoder.write", "float", "float", "float", "float", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.finish", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "encode", "(", "self", ",", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "img", "=", "Image", ".", "open", "(", "input_path", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "fileobj", "=", "open", "(", "compressed_file_path", ",", "mode", "=", "'wb'", ")", "\n", "\n", "buf", "=", "quality_level", "<<", "1", "\n", "buf", "=", "buf", "+", "model_type", "\n", "arr", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "arr", "[", "0", "]", "=", "buf", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "fileobj", ".", "close", "(", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "img_array", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_array", "=", "np", ".", "pad", "(", "img_array", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "input_x", "=", "img_array", "\n", "\n", "input_x", "=", "input_x", ".", "reshape", "(", "1", ",", "new_h", ",", "new_w", ",", "3", ")", "\n", "input_x", "=", "input_x", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "gah1", ",", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "gah1", ",", "self", ".", "sigma_z", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_x", ":", "input_x", "}", ")", "\n", "\n", "gah1", "=", "np", ".", "pad", "(", "gah1", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah2", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah2", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah1", ":", "gah1", "}", ")", "\n", "\n", "gah2", "=", "np", ".", "pad", "(", "gah2", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah3", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah3", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah2", ":", "gah2", "}", ")", "\n", "\n", "gah3", "=", "np", ".", "pad", "(", "gah3", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "y_hat", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "y_hat", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah3", ":", "gah3", "}", ")", "\n", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'symmetric'", ")", "\n", "z_hat", ",", "c_prime", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "z_hat", ",", "self", ".", "c_prime", "]", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "\n", "\n", "\n", "############### encode zhat ####################################", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "bitout", "=", "arithmeticcoding", ".", "BitOutputStream", "(", "open", "(", "compressed_file_path", ",", "\"ab+\"", ")", ")", "\n", "enc", "=", "arithmeticcoding", ".", "ArithmeticEncoder", "(", "bitout", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "np", ".", "int", "(", "z_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "############### encode yhat ####################################", "\n", "", "", "", "padded_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "\n", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "np", ".", "int", "(", "y_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "", "", "", "enc", ".", "write", "(", "freq", ",", "512", ")", "\n", "enc", ".", "finish", "(", ")", "\n", "bitout", ".", "close", "(", ")", "\n", "\n", "return", "compressed_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_basemodel.Tester_basemodel.decode": [[197, 317], ["open", "open.read", "open.read", "numpy.frombuffer", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "tester_basemodel.Tester_basemodel.sess.run", "numpy.zeros", "int", "int", "numpy.pad", "tester_basemodel.Tester_basemodel.sess.run", "arithmeticcoding.BitInputStream", "arithmeticcoding.ArithmeticDecoder", "utils.printProgressBar", "range", "tester_basemodel.Tester_basemodel.sess.run", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.BitInputStream.close", "tester_basemodel.Tester_basemodel.sess.run", "tester_basemodel.Tester_basemodel.sess.run", "tester_basemodel.Tester_basemodel.sess.run", "tester_basemodel.Tester_basemodel.sess.run", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "tester_basemodel.Tester_basemodel.astype", "math.ceil", "math.ceil", "int", "int", "math.ceil", "math.ceil", "range", "tester_basemodel.Tester_basemodel.extractor_prime", "tester_basemodel.Tester_basemodel.extractor_doubleprime", "numpy.concatenate", "tester_basemodel.Tester_basemodel.sess.run", "range", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "arithmeticcoding.ArithmeticDecoder.read", "arithmeticcoding.ModelFrequencyTable", "arithmeticcoding.ArithmeticDecoder.read", "float", "float", "float", "float", "float", "float", "print", "print"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "decode", "(", "self", ",", "compressed_file", ",", "recon_path", ")", ":", "# with TOP N dimensions", "\n", "        ", "fileobj", "=", "open", "(", "compressed_file", ",", "mode", "=", "'rb'", ")", "\n", "fileobj", ".", "read", "(", "1", ")", "#dummy", "\n", "buf", "=", "fileobj", ".", "read", "(", "4", ")", "\n", "arr", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "w", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w_1", "=", "int", "(", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_1", "=", "int", "(", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_1", "=", "math", ".", "floor", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "+", "pad_w_1", "\n", "res_h_1", "=", "math", ".", "floor", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "+", "pad_h_1", "\n", "\n", "pad_w_2", "=", "int", "(", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_2", "=", "int", "(", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_2", "=", "math", ".", "floor", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "+", "pad_w_2", "\n", "res_h_2", "=", "math", ".", "floor", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "+", "pad_h_2", "\n", "\n", "pad_w_3", "=", "int", "(", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_3", "=", "int", "(", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_3", "=", "math", ".", "floor", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "+", "pad_w_3", "\n", "res_h_3", "=", "math", ".", "floor", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "+", "pad_h_3", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "sigma_z", ")", "\n", "y_hat", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "M", ",", "int", "(", "float", "(", "res_h_3", ")", "/", "2.0", ")", ",", "int", "(", "float", "(", "res_w_3", ")", "/", "2.0", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "z_hat", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "z_hat", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "# NCHW", "\n", "\n", "############### decode zhat ####################################", "\n", "bitin", "=", "arithmeticcoding", ".", "BitInputStream", "(", "fileobj", ")", "\n", "dec", "=", "arithmeticcoding", ".", "ArithmeticDecoder", "(", "bitin", ")", "\n", "\n", "z_hat", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "dec", ".", "read", "(", "freq", ")", "\n", "if", "symbol", "==", "512", ":", "# EOF symbol", "\n", "                        ", "print", "(", "\"EOF symbol\"", ")", "\n", "break", "\n", "", "z_hat", "[", ":", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "=", "symbol", "-", "255", "\n", "\n", "\n", "############### decode yhat ####################################", "\n", "", "", "", "c_prime", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "c_prime", ",", "feed_dict", "=", "{", "self", ".", "z_hat", ":", "z_hat", "}", ")", "\n", "# c_prime = np.round(c_prime, decimals=4)", "\n", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "padded_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "padded_y_hat", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Decoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Decoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "dec", ".", "read", "(", "freq", ")", "\n", "if", "symbol", "==", "512", ":", "# EOF symbol", "\n", "                        ", "print", "(", "\"EOF symbol\"", ")", "\n", "break", "\n", "", "padded_y_hat", "[", ":", ",", "ch_idx", ",", "h_idx", "+", "3", ",", "w_idx", "+", "2", "]", "=", "symbol", "-", "255", "\n", "\n", "", "", "", "bitin", ".", "close", "(", ")", "\n", "y_hat", "=", "padded_y_hat", "[", ":", ",", ":", ",", "3", ":", ",", "2", ":", "-", "1", "]", "\n", "#################################################", "\n", "\n", "###############", "\n", "gsh1", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh1", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "y_hat", "}", ")", "\n", "gsh1", "=", "gsh1", "[", ":", ",", ":", "res_h_3", "-", "pad_h_3", ",", ":", "res_w_3", "-", "pad_w_3", ",", ":", "]", "\n", "\n", "gsh2", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh2", ",", "feed_dict", "=", "{", "self", ".", "gsh1", ":", "gsh1", "}", ")", "\n", "gsh2", "=", "gsh2", "[", ":", ",", ":", "res_h_2", "-", "pad_h_2", ",", ":", "res_w_2", "-", "pad_w_2", ",", ":", "]", "\n", "\n", "gsh3", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh3", ",", "feed_dict", "=", "{", "self", ".", "gsh2", ":", "gsh2", "}", ")", "\n", "gsh3", "=", "gsh3", "[", ":", ",", ":", "res_h_1", "-", "pad_h_1", ",", ":", "res_w_1", "-", "pad_w_1", ",", ":", "]", "\n", "\n", "recon", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recon_image", ",", "feed_dict", "=", "{", "self", ".", "gsh3", ":", "gsh3", "}", ")", "\n", "recon", "=", "recon", "[", "0", ",", ":", "recon", ".", "shape", "[", "1", "]", "-", "pad_h", ",", ":", "recon", ".", "shape", "[", "2", "]", "-", "pad_w", ",", ":", "]", "\n", "###############", "\n", "\n", "im", "=", "Image", ".", "fromarray", "(", "recon", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "im", ".", "save", "(", "recon_path", ")", "\n", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive": [[19, 74], ["os.path.dirname", "os.path.exists", "os.makedirs", "requests.Session", "print", "sys.stdout.flush", "requests.Session.get", "google_drive_downloader.GoogleDriveDownloader._get_confirm_token", "google_drive_downloader.GoogleDriveDownloader._save_response_content", "print", "os.path.exists", "requests.Session.get", "print", "sys.stdout.flush", "print", "zipfile.ZipFile", "z.extractall", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._get_confirm_token", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._save_response_content", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get"], ["@", "staticmethod", "\n", "def", "download_file_from_google_drive", "(", "file_id", ",", "dest_path", ",", "overwrite", "=", "False", ",", "unzip", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Downloads a shared file from google drive into a given folder.\n        Optionally unzips it.\n\n        Parameters\n        ----------\n        file_id: str\n            the file identifier.\n            You can obtain it from the sharable link.\n        dest_path: str\n            the destination where to save the downloaded file.\n            Must be a path (for example: './downloaded_file.txt')\n        overwrite: bool\n            optional, if True forces re-download and overwrite.\n        unzip: bool\n            optional, if True unzips a file.\n            If the file is not a zip file, ignores it.\n\n        Returns\n        -------\n        None\n        \"\"\"", "\n", "\n", "destination_directory", "=", "dirname", "(", "dest_path", ")", "\n", "if", "not", "exists", "(", "destination_directory", ")", ":", "\n", "            ", "makedirs", "(", "destination_directory", ")", "\n", "\n", "", "if", "not", "exists", "(", "dest_path", ")", "or", "overwrite", ":", "\n", "\n", "            ", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "print", "(", "'Downloading {} into {}... '", ".", "format", "(", "file_id", ",", "dest_path", ")", ",", "end", "=", "''", ")", "\n", "stdout", ".", "flush", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "GoogleDriveDownloader", ".", "DOWNLOAD_URL", ",", "params", "=", "{", "'id'", ":", "file_id", "}", ",", "stream", "=", "True", ")", "\n", "\n", "token", "=", "GoogleDriveDownloader", ".", "_get_confirm_token", "(", "response", ")", "\n", "if", "token", ":", "\n", "                ", "params", "=", "{", "'id'", ":", "file_id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "GoogleDriveDownloader", ".", "DOWNLOAD_URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "GoogleDriveDownloader", ".", "_save_response_content", "(", "response", ",", "dest_path", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n", "if", "unzip", ":", "\n", "                ", "try", ":", "\n", "                    ", "print", "(", "'Unzipping...'", ",", "end", "=", "''", ")", "\n", "stdout", ".", "flush", "(", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "dest_path", ",", "'r'", ")", "as", "z", ":", "\n", "                        ", "z", ".", "extractall", "(", "destination_directory", ")", "\n", "", "print", "(", "'Done.'", ")", "\n", "", "except", "zipfile", ".", "BadZipfile", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Ignoring `unzip` since \"{}\" does not look like a valid zip file'", ".", "format", "(", "file_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.google_drive_downloader.GoogleDriveDownloader._get_confirm_token": [[75, 81], ["response.cookies.items", "key.startswith"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "_get_confirm_token", "(", "response", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "                ", "return", "value", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.google_drive_downloader.GoogleDriveDownloader._save_response_content": [[82, 88], ["open", "response.iter_content", "f.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "@", "staticmethod", "\n", "def", "_save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "        ", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "response", ".", "iter_content", "(", "GoogleDriveDownloader", ".", "CHUNK_SIZE", ")", ":", "\n", "                ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.encode.encode_list": [[13, 63], ["glob.glob", "os.makedirs", "numpy.mean", "numpy.sum", "bpp_list.append", "filesize_list.append", "numpy.savetxt", "numpy.savetxt", "print", "multiprocessing.Process", "j.start", "j.join", "PIL.Image.open", "bpp_list.append", "filesize_list.append", "numpy.asarray", "numpy.asarray", "jobs.append", "os.path.getsize", "os.path.splitext", "jobs.append", "os.path.splitext", "str", "os.path.basename", "j.start", "j.join", "os.path.basename"], "function", ["None"], ["def", "encode_list", "(", "model_type", ",", "input_path", ",", "quality_level", ",", "no_proc", "=", "1", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "input_path", ")", "\n", "\n", "dir", "=", "'./compressed_files/{}/{}'", ".", "format", "(", "model_type", ",", "quality_level", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "bpp_list", "=", "[", "]", "\n", "filesize_list", "=", "[", "]", "\n", "\n", "jobs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "\n", "for", "filepath", "in", "file_list", ":", "\n", "        ", "print", "(", "str", "(", "idx", "+", "1", ")", "+", "\":\"", "+", "filepath", ")", "\n", "compressed_file_path", "=", "'{}/{}.cmp'", ".", "format", "(", "dir", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filepath", ")", ")", "[", "0", "]", ")", "\n", "idx", "+=", "1", "\n", "# if not os.path.isfile(compressed_file_path):", "\n", "process", "=", "multiprocessing", ".", "Process", "(", "target", "=", "encode", ",", "args", "=", "(", "model_type", ",", "filepath", ",", "compressed_file_path", ",", "quality_level", ")", ")", "\n", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "# decode(filepath)", "\n", "", "elif", "idx", "%", "no_proc", "==", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "join", "(", ")", "\n", "", "jobs", "=", "[", "]", "\n", "# encode(filepath, compressed_file_path, quality_level)", "\n", "", "", "for", "j", "in", "jobs", ":", "\n", "        ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "        ", "j", ".", "join", "(", ")", "\n", "\n", "", "for", "filepath", "in", "file_list", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "filepath", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "size", "=", "w", "*", "h", "\n", "\n", "compressed_file_path", "=", "'{}/{}.cmp'", ".", "format", "(", "dir", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filepath", ")", ")", "[", "0", "]", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "compressed_file_path", ")", "*", "8", "\n", "bpp", "=", "file_size", "/", "size", "\n", "bpp_list", ".", "append", "(", "bpp", ")", "\n", "\n", "filesize_list", ".", "append", "(", "file_size", ")", "\n", "", "avg_bpp", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "bpp_list", ")", ")", "\n", "total_filesize", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "filesize_list", ")", ")", "\n", "bpp_list", ".", "append", "(", "avg_bpp", ")", "\n", "filesize_list", ".", "append", "(", "total_filesize", ")", "\n", "np", ".", "savetxt", "(", "'{}/TEST_RESULT_BPP.csv'", ".", "format", "(", "dir", ")", ",", "bpp_list", ",", "delimiter", "=", "\",\"", ")", "\n", "np", ".", "savetxt", "(", "'{}/TEST_RESULT_FILESIZE.csv'", ".", "format", "(", "dir", ")", ",", "filesize_list", ",", "delimiter", "=", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.encode.encode": [[65, 97], ["utils.downloadModels", "print", "tester_hybridmodel.Tester_hybridmodel.encode", "print", "print", "sys.exit", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "print", "sys.exit", "str", "str", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.downloadModels", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.encode"], ["", "def", "encode", "(", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ",", "no_proc", "=", "1", ")", ":", "\n", "\n", "    ", "downloadModels", "(", ")", "\n", "\n", "if", "quality_level", "not", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", ":", "\n", "        ", "print", "(", "\n", "'Value of quality_grade option must be one of [1, 2, 3, 4, 5, 6, 7, 8, 9].'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "model_type", "==", "0", ":", "\n", "        ", "if", "quality_level", "<=", "5", ":", "\n", "            ", "model_dir", "=", "'./models/MSEopt/Base_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_basemodel", "(", "model_dir", ")", "\n", "", "else", ":", "\n", "            ", "model_dir", "=", "'./models/MSEopt/Hybrid_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_hybridmodel", "(", "model_dir", ",", "model_type", ",", "quality_level", ")", "\n", "\n", "", "", "elif", "model_type", "==", "1", ":", "\n", "        ", "if", "quality_level", "<=", "5", ":", "\n", "            ", "model_dir", "=", "'./models/MSSSIMopt/Base_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_basemodel", "(", "model_dir", ")", "\n", "", "else", ":", "\n", "            ", "model_dir", "=", "'./models/MSSSIMopt/Hybrid_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_hybridmodel", "(", "model_dir", ",", "model_type", ",", "quality_level", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\n", "'Model type parameter must be 0(MSE -optimized) or 1(MS-SSIM optimized).'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "print", "(", "\"Compressing.. (Input: {}, Quality level: {})\"", ".", "format", "(", "input_path", ",", "quality_level", ")", ")", "\n", "tester", ".", "encode", "(", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ")", "\n", "print", "(", "\"Compression completed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.decode.decode_list": [[11, 36], ["glob.glob", "multiprocessing.Process", "print", "jobs.append", "j.start", "j.join", "jobs.append", "j.start", "j.join"], "function", ["None"], ["def", "decode_list", "(", "compressed_file_path", ",", "no_proc", "=", "1", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "compressed_file_path", ")", "\n", "jobs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "filepath", "in", "file_list", ":", "\n", "        ", "process", "=", "multiprocessing", ".", "Process", "(", "target", "=", "decode", ",", "args", "=", "(", "filepath", ",", ")", ")", "\n", "\n", "idx", "+=", "1", "\n", "print", "(", "idx", ")", "\n", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "# decode(filepath)", "\n", "", "elif", "idx", "%", "no_proc", "==", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "join", "(", ")", "\n", "", "jobs", "=", "[", "]", "\n", "\n", "", "", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "        ", "for", "j", "in", "jobs", ":", "\n", "            ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "            ", "j", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.decode.decode": [[38, 72], ["utils.downloadModels", "open", "open.read", "numpy.frombuffer", "int", "open.close", "print", "tester_hybridmodel.Tester_hybridmodel.decode", "print", "os.path.splitext", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.downloadModels", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.decode"], ["", "", "", "def", "decode", "(", "compressed_file_path", ")", ":", "\n", "\n", "    ", "downloadModels", "(", ")", "\n", "\n", "fileobj", "=", "open", "(", "compressed_file_path", ",", "mode", "=", "'rb'", ")", "\n", "buf", "=", "fileobj", ".", "read", "(", "1", ")", "\n", "arr", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "b", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "model_type", "=", "b", "%", "2", "\n", "quality_level", "=", "b", ">>", "1", "\n", "fileobj", ".", "close", "(", ")", "\n", "\n", "if", "model_type", "==", "0", ":", "\n", "        ", "if", "quality_level", "<=", "5", ":", "\n", "            ", "model_dir", "=", "'./models/MSEopt/Base_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_basemodel", "(", "model_dir", ")", "\n", "", "else", ":", "\n", "            ", "model_dir", "=", "'./models/MSEopt/Hybrid_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_hybridmodel", "(", "model_dir", ",", "model_type", ",", "quality_level", ")", "\n", "", "", "elif", "model_type", "==", "1", ":", "\n", "        ", "if", "quality_level", "<=", "5", ":", "\n", "            ", "model_dir", "=", "'./models/MSSSIMopt/Base_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_basemodel", "(", "model_dir", ")", "\n", "", "else", ":", "\n", "            ", "model_dir", "=", "'./models/MSSSIMopt/Hybrid_model/'", "+", "str", "(", "quality_level", ")", "\n", "tester", "=", "Tester_hybridmodel", "(", "model_dir", ",", "model_type", ",", "quality_level", ")", "\n", "\n", "", "", "base", "=", "os", ".", "path", ".", "splitext", "(", "compressed_file_path", ")", "[", "0", "]", "\n", "recon_path", "=", "base", "+", "'.png'", "\n", "\n", "print", "(", "\"Reconstructing.. (Input: {}, Output: {}, Quality level: {})\"", ".", "format", "(", "compressed_file_path", ",", "recon_path", ",", "\n", "quality_level", ")", ")", "\n", "tester", ".", "decode", "(", "compressed_file_path", ",", "recon_path", ")", "\n", "print", "(", "\"Reconstruction completed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph.freeze_graph_with_def_protos": [[62, 158], ["print", "print", "tensorflow.python.framework.importer.import_graph_def", "tensorflow.python.client.session.Session", "tensorflow.python.training.saver.checkpoint_exists", "tensorflow.python.training.saver.Saver", "saver_lib.Saver.restore", "variable_names_whitelist.split", "variable_names_blacklist.split", "tensorflow.python.framework.graph_util.convert_variables_to_constants", "tensorflow.python.framework.graph_util.convert_variables_to_constants", "tensorflow.python.platform.gfile.GFile", "f.write", "tensorflow.python.training.saver.import_meta_graph", "saver_lib.import_meta_graph.restore", "output_node_names.split", "output_node_names.split", "graph_util.convert_variables_to_constants.SerializeToString", "sess.run", "tensorflow.python.saved_model.loader.load", "tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "tensorflow.python.training.saver.Saver", "saver_lib.Saver.restore", "initializer_nodes.split", "sess.run", "sess.graph.get_tensor_by_name", "initializer_nodes.split"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["def", "freeze_graph_with_def_protos", "(", "input_graph_def", ",", "\n", "input_saver_def", ",", "\n", "input_checkpoint", ",", "\n", "output_node_names", ",", "\n", "restore_op_name", ",", "\n", "filename_tensor_name", ",", "\n", "output_graph", ",", "\n", "clear_devices", ",", "\n", "initializer_nodes", ",", "\n", "variable_names_whitelist", "=", "\"\"", ",", "\n", "variable_names_blacklist", "=", "\"\"", ",", "\n", "input_meta_graph_def", "=", "None", ",", "\n", "input_saved_model_dir", "=", "None", ",", "\n", "saved_model_tags", "=", "None", ")", ":", "\n", "  ", "\"\"\"Converts all variables in a graph and checkpoint into constants.\"\"\"", "\n", "del", "restore_op_name", ",", "filename_tensor_name", "# Unused by updated loading code.", "\n", "\n", "# 'input_checkpoint' may be a prefix if we're using Saver V2 format", "\n", "if", "(", "not", "input_saved_model_dir", "and", "\n", "not", "saver_lib", ".", "checkpoint_exists", "(", "input_checkpoint", ")", ")", ":", "\n", "    ", "print", "(", "\"Input checkpoint '\"", "+", "input_checkpoint", "+", "\"' doesn't exist!\"", ")", "\n", "return", "-", "1", "\n", "\n", "", "if", "not", "output_node_names", ":", "\n", "    ", "print", "(", "\"You need to supply the name of a node to --output_node_names.\"", ")", "\n", "return", "-", "1", "\n", "\n", "# Remove all the explicit device specifications for this node. This helps to", "\n", "# make the graph more portable.", "\n", "", "if", "clear_devices", ":", "\n", "    ", "if", "input_meta_graph_def", ":", "\n", "      ", "for", "node", "in", "input_meta_graph_def", ".", "graph_def", ".", "node", ":", "\n", "        ", "node", ".", "device", "=", "\"\"", "\n", "", "", "elif", "input_graph_def", ":", "\n", "      ", "for", "node", "in", "input_graph_def", ".", "node", ":", "\n", "        ", "node", ".", "device", "=", "\"\"", "\n", "\n", "", "", "", "if", "input_graph_def", ":", "\n", "    ", "_", "=", "importer", ".", "import_graph_def", "(", "input_graph_def", ",", "name", "=", "\"\"", ")", "\n", "", "with", "session", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "if", "input_saver_def", ":", "\n", "      ", "saver", "=", "saver_lib", ".", "Saver", "(", "saver_def", "=", "input_saver_def", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "input_checkpoint", ")", "\n", "", "elif", "input_meta_graph_def", ":", "\n", "      ", "restorer", "=", "saver_lib", ".", "import_meta_graph", "(", "\n", "input_meta_graph_def", ",", "clear_devices", "=", "True", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "input_checkpoint", ")", "\n", "if", "initializer_nodes", ":", "\n", "        ", "sess", ".", "run", "(", "initializer_nodes", ".", "split", "(", "\",\"", ")", ")", "\n", "", "", "elif", "input_saved_model_dir", ":", "\n", "      ", "if", "saved_model_tags", "is", "None", ":", "\n", "        ", "saved_model_tags", "=", "[", "]", "\n", "", "loader", ".", "load", "(", "sess", ",", "saved_model_tags", ",", "input_saved_model_dir", ")", "\n", "", "else", ":", "\n", "      ", "var_list", "=", "{", "}", "\n", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "input_checkpoint", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "for", "key", "in", "var_to_shape_map", ":", "\n", "        ", "try", ":", "\n", "          ", "tensor", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "key", "+", "\":0\"", ")", "\n", "", "except", "KeyError", ":", "\n", "# This tensor doesn't exist in the graph (for example it's", "\n", "# 'global_step' or a similar housekeeping element) so skip it.", "\n", "          ", "continue", "\n", "", "var_list", "[", "key", "]", "=", "tensor", "\n", "", "saver", "=", "saver_lib", ".", "Saver", "(", "var_list", "=", "var_list", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "input_checkpoint", ")", "\n", "if", "initializer_nodes", ":", "\n", "        ", "sess", ".", "run", "(", "initializer_nodes", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "", "", "variable_names_whitelist", "=", "(", "variable_names_whitelist", ".", "split", "(", "\",\"", ")", "\n", "if", "variable_names_whitelist", "else", "None", ")", "\n", "variable_names_blacklist", "=", "(", "variable_names_blacklist", ".", "split", "(", "\",\"", ")", "\n", "if", "variable_names_blacklist", "else", "None", ")", "\n", "\n", "if", "input_meta_graph_def", ":", "\n", "      ", "output_graph_def", "=", "graph_util", ".", "convert_variables_to_constants", "(", "\n", "sess", ",", "\n", "input_meta_graph_def", ".", "graph_def", ",", "\n", "output_node_names", ".", "split", "(", "\",\"", ")", ",", "\n", "variable_names_whitelist", "=", "variable_names_whitelist", ",", "\n", "variable_names_blacklist", "=", "variable_names_blacklist", ")", "\n", "", "else", ":", "\n", "      ", "output_graph_def", "=", "graph_util", ".", "convert_variables_to_constants", "(", "\n", "sess", ",", "\n", "input_graph_def", ",", "\n", "output_node_names", ".", "split", "(", "\",\"", ")", ",", "\n", "variable_names_whitelist", "=", "variable_names_whitelist", ",", "\n", "variable_names_blacklist", "=", "variable_names_blacklist", ")", "\n", "\n", "# Write GraphDef to file if output path has been given.", "\n", "", "", "if", "output_graph", ":", "\n", "    ", "with", "gfile", ".", "GFile", "(", "output_graph", ",", "\"wb\"", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "output_graph_def", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "", "return", "output_graph_def", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_graph_proto": [[160, 173], ["tensorflow.core.framework.graph_pb2.GraphDef", "tensorflow.python.platform.gfile.Exists", "print", "tensorflow.python.platform.gfile.FastGFile", "graph_pb2.GraphDef.ParseFromString", "google.protobuf.text_format.Merge", "f.read", "f.read"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "_parse_input_graph_proto", "(", "input_graph", ",", "input_binary", ")", ":", "\n", "  ", "\"\"\"Parser input tensorflow graph into GraphDef proto.\"\"\"", "\n", "if", "not", "gfile", ".", "Exists", "(", "input_graph", ")", ":", "\n", "    ", "print", "(", "\"Input graph file '\"", "+", "input_graph", "+", "\"' does not exist!\"", ")", "\n", "return", "-", "1", "\n", "", "input_graph_def", "=", "graph_pb2", ".", "GraphDef", "(", ")", "\n", "mode", "=", "\"rb\"", "if", "input_binary", "else", "\"r\"", "\n", "with", "gfile", ".", "FastGFile", "(", "input_graph", ",", "mode", ")", "as", "f", ":", "\n", "    ", "if", "input_binary", ":", "\n", "      ", "input_graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "text_format", ".", "Merge", "(", "f", ".", "read", "(", ")", ",", "input_graph_def", ")", "\n", "", "", "return", "input_graph_def", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_meta_graph_proto": [[175, 189], ["tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef", "print", "tensorflow.python.platform.gfile.Exists", "print", "tensorflow.python.platform.gfile.FastGFile", "tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef.ParseFromString", "google.protobuf.text_format.Merge", "f.read", "f.read"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "_parse_input_meta_graph_proto", "(", "input_graph", ",", "input_binary", ")", ":", "\n", "  ", "\"\"\"Parser input tensorflow graph into MetaGraphDef proto.\"\"\"", "\n", "if", "not", "gfile", ".", "Exists", "(", "input_graph", ")", ":", "\n", "    ", "print", "(", "\"Input meta graph file '\"", "+", "input_graph", "+", "\"' does not exist!\"", ")", "\n", "return", "-", "1", "\n", "", "input_meta_graph_def", "=", "MetaGraphDef", "(", ")", "\n", "mode", "=", "\"rb\"", "if", "input_binary", "else", "\"r\"", "\n", "with", "gfile", ".", "FastGFile", "(", "input_graph", ",", "mode", ")", "as", "f", ":", "\n", "    ", "if", "input_binary", ":", "\n", "      ", "input_meta_graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "text_format", ".", "Merge", "(", "f", ".", "read", "(", ")", ",", "input_meta_graph_def", ")", "\n", "", "", "print", "(", "\"Loaded meta graph file '\"", "+", "input_graph", ")", "\n", "return", "input_meta_graph_def", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_saver_proto": [[191, 204], ["tensorflow.python.platform.gfile.Exists", "print", "tensorflow.python.platform.gfile.FastGFile", "tensorflow.core.protobuf.saver_pb2.SaverDef", "saver_pb2.SaverDef.ParseFromString", "google.protobuf.text_format.Merge", "f.read", "f.read"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "_parse_input_saver_proto", "(", "input_saver", ",", "input_binary", ")", ":", "\n", "  ", "\"\"\"Parser input tensorflow Saver into SaverDef proto.\"\"\"", "\n", "if", "not", "gfile", ".", "Exists", "(", "input_saver", ")", ":", "\n", "    ", "print", "(", "\"Input saver file '\"", "+", "input_saver", "+", "\"' does not exist!\"", ")", "\n", "return", "-", "1", "\n", "", "mode", "=", "\"rb\"", "if", "input_binary", "else", "\"r\"", "\n", "with", "gfile", ".", "FastGFile", "(", "input_saver", ",", "mode", ")", "as", "f", ":", "\n", "    ", "saver_def", "=", "saver_pb2", ".", "SaverDef", "(", ")", "\n", "if", "input_binary", ":", "\n", "      ", "saver_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "text_format", ".", "Merge", "(", "f", ".", "read", "(", ")", ",", "saver_def", ")", "\n", "", "", "return", "saver_def", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph.freeze_graph": [[206, 240], ["freeze_graph.freeze_graph_with_def_protos", "freeze_graph._parse_input_meta_graph_proto", "freeze_graph._parse_input_saver_proto", "saved_model_tags.split", "tensorflow.python.tools.saved_model_utils.get_meta_graph_def", "freeze_graph._parse_input_graph_proto"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph.freeze_graph_with_def_protos", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_meta_graph_proto", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_saver_proto", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph._parse_input_graph_proto"], ["", "def", "freeze_graph", "(", "input_graph", ",", "\n", "input_saver", ",", "\n", "input_binary", ",", "\n", "input_checkpoint", ",", "\n", "output_node_names", ",", "\n", "restore_op_name", ",", "\n", "filename_tensor_name", ",", "\n", "output_graph", ",", "\n", "clear_devices", ",", "\n", "initializer_nodes", ",", "\n", "variable_names_whitelist", "=", "\"\"", ",", "\n", "variable_names_blacklist", "=", "\"\"", ",", "\n", "input_meta_graph", "=", "None", ",", "\n", "input_saved_model_dir", "=", "None", ",", "\n", "saved_model_tags", "=", "tag_constants", ".", "SERVING", ")", ":", "\n", "  ", "\"\"\"Converts all variables in a graph and checkpoint into constants.\"\"\"", "\n", "input_graph_def", "=", "None", "\n", "if", "input_saved_model_dir", ":", "\n", "    ", "input_graph_def", "=", "saved_model_utils", ".", "get_meta_graph_def", "(", "\n", "input_saved_model_dir", ",", "saved_model_tags", ")", ".", "graph_def", "\n", "", "elif", "input_graph", ":", "\n", "    ", "input_graph_def", "=", "_parse_input_graph_proto", "(", "input_graph", ",", "input_binary", ")", "\n", "", "input_meta_graph_def", "=", "None", "\n", "if", "input_meta_graph", ":", "\n", "    ", "input_meta_graph_def", "=", "_parse_input_meta_graph_proto", "(", "\n", "input_meta_graph", ",", "input_binary", ")", "\n", "", "input_saver_def", "=", "None", "\n", "if", "input_saver", ":", "\n", "    ", "input_saver_def", "=", "_parse_input_saver_proto", "(", "input_saver", ",", "input_binary", ")", "\n", "", "freeze_graph_with_def_protos", "(", "\n", "input_graph_def", ",", "input_saver_def", ",", "input_checkpoint", ",", "output_node_names", ",", "\n", "restore_op_name", ",", "filename_tensor_name", ",", "output_graph", ",", "clear_devices", ",", "\n", "initializer_nodes", ",", "variable_names_whitelist", ",", "variable_names_blacklist", ",", "\n", "input_meta_graph_def", ",", "input_saved_model_dir", ",", "saved_model_tags", ".", "split", "(", "\",\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph.main": [[242, 250], ["freeze_graph.freeze_graph"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.freeze_graph.freeze_graph"], ["", "def", "main", "(", "unused_args", ")", ":", "\n", "  ", "freeze_graph", "(", "FLAGS", ".", "input_graph", ",", "FLAGS", ".", "input_saver", ",", "FLAGS", ".", "input_binary", ",", "\n", "FLAGS", ".", "input_checkpoint", ",", "FLAGS", ".", "output_node_names", ",", "\n", "FLAGS", ".", "restore_op_name", ",", "FLAGS", ".", "filename_tensor_name", ",", "\n", "FLAGS", ".", "output_graph", ",", "FLAGS", ".", "clear_devices", ",", "FLAGS", ".", "initializer_nodes", ",", "\n", "FLAGS", ".", "variable_names_whitelist", ",", "FLAGS", ".", "variable_names_blacklist", ",", "\n", "FLAGS", ".", "input_meta_graph", ",", "FLAGS", ".", "input_saved_model_dir", ",", "\n", "FLAGS", ".", "saved_model_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticCoderBase.__init__": [[42, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# Low end of this arithmetic coder's current range. Conceptually has an infinite number of trailing 0s.", "\n", "        ", "self", ".", "low", "=", "0", "\n", "# High end of this arithmetic coder's current range. Conceptually has an infinite number of trailing 1s.", "\n", "self", ".", "high", "=", "ArithmeticCoderBase", ".", "MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticCoderBase.update": [[60, 103], ["freqs.get_total", "freqs.get_low", "freqs.get_high", "AssertionError", "AssertionError", "range", "ValueError", "ValueError", "arithmeticcoding.ArithmeticCoderBase.shift", "arithmeticcoding.ArithmeticCoderBase.underflow", "print", "print", "print", "print", "print", "str", "str", "str", "str", "freqs.get_low", "freqs.get_high"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.shift", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.underflow", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high"], ["", "def", "update", "(", "self", ",", "freqs", ",", "symbol", ")", ":", "\n", "# State check", "\n", "        ", "low", "=", "self", ".", "low", "\n", "high", "=", "self", ".", "high", "\n", "if", "low", ">=", "high", "or", "(", "low", "&", "ArithmeticCoderBase", ".", "MASK", ")", "!=", "low", "or", "(", "high", "&", "ArithmeticCoderBase", ".", "MASK", ")", "!=", "high", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Low or high out of range\"", ")", "\n", "", "range_", "=", "high", "-", "low", "+", "1", "\n", "if", "not", "(", "ArithmeticCoderBase", ".", "MIN_RANGE", "<=", "range_", "<=", "ArithmeticCoderBase", ".", "MAX_RANGE", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Range out of range\"", ")", "\n", "\n", "# Frequency table values check", "\n", "", "total", "=", "freqs", ".", "get_total", "(", ")", "\n", "symlow", "=", "freqs", ".", "get_low", "(", "symbol", ")", "\n", "symhigh", "=", "freqs", ".", "get_high", "(", "symbol", ")", "\n", "if", "symlow", "==", "symhigh", ":", "\n", "            ", "for", "idx", "in", "range", "(", "symbol", "-", "20", ",", "symbol", "+", "20", ")", ":", "\n", "                ", "print", "(", "\"--------------------\"", ")", "\n", "print", "(", "\"symbol:\"", "+", "str", "(", "idx", ")", ")", "\n", "print", "(", "\"symlow:\"", "+", "str", "(", "freqs", ".", "get_low", "(", "idx", ")", ")", ")", "\n", "print", "(", "\"symhigh:\"", "+", "str", "(", "freqs", ".", "get_high", "(", "idx", ")", ")", ")", "\n", "print", "(", "\"--------------------\"", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Symbol has zero frequency. symbol:\"", "+", "str", "(", "symbol", ")", ")", "\n", "", "if", "total", ">", "ArithmeticCoderBase", ".", "MAX_TOTAL", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot code symbol because total is too large\"", ")", "\n", "\n", "# Update range", "\n", "", "newlow", "=", "low", "+", "symlow", "*", "range_", "//", "total", "\n", "newhigh", "=", "low", "+", "symhigh", "*", "range_", "//", "total", "-", "1", "\n", "self", ".", "low", "=", "newlow", "\n", "self", ".", "high", "=", "newhigh", "\n", "\n", "# While the highest bits are equal", "\n", "while", "(", "(", "self", ".", "low", "^", "self", ".", "high", ")", "&", "ArithmeticCoderBase", ".", "TOP_MASK", ")", "==", "0", ":", "\n", "            ", "self", ".", "shift", "(", ")", "\n", "self", ".", "low", "=", "(", "self", ".", "low", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", "\n", "self", ".", "high", "=", "(", "(", "self", ".", "high", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", ")", "|", "1", "\n", "\n", "# While the second highest bit of low is 1 and the second highest bit of high is 0", "\n", "", "while", "(", "self", ".", "low", "&", "~", "self", ".", "high", "&", "ArithmeticCoderBase", ".", "SECOND_MASK", ")", "!=", "0", ":", "\n", "            ", "self", ".", "underflow", "(", ")", "\n", "self", ".", "low", "=", "(", "self", ".", "low", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", "\n", "self", ".", "high", "=", "(", "(", "self", ".", "high", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", ")", "|", "ArithmeticCoderBase", ".", "TOP_MASK", "|", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticCoderBase.shift": [[105, 107], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "shift", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticCoderBase.underflow": [[109, 111], ["NotImplementedError"], "methods", ["None"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticEncoder.__init__": [[116, 122], ["arithmeticcoding.ArithmeticCoderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bitout", ")", ":", "\n", "        ", "super", "(", "ArithmeticEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The underlying bit output stream.", "\n", "self", ".", "output", "=", "bitout", "\n", "# Number of saved underflow bits. This value can grow without bound.", "\n", "self", ".", "num_underflow", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticEncoder.write": [[125, 129], ["arithmeticcoding.ArithmeticEncoder.update"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.update"], ["", "def", "write", "(", "self", ",", "freqs", ",", "symbol", ")", ":", "\n", "# if not isinstance(freqs, CheckedFrequencyTable):", "\n", "#     freqs = CheckedFrequencyTable(freqs)", "\n", "        ", "self", ".", "update", "(", "freqs", ",", "symbol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticEncoder.finish": [[133, 135], ["arithmeticcoding.ArithmeticEncoder.output.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "self", ".", "output", ".", "write", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticEncoder.shift": [[136, 144], ["arithmeticcoding.ArithmeticEncoder.output.write", "range", "arithmeticcoding.ArithmeticEncoder.output.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "shift", "(", "self", ")", ":", "\n", "        ", "bit", "=", "self", ".", "low", ">>", "(", "ArithmeticCoderBase", ".", "STATE_SIZE", "-", "1", ")", "\n", "self", ".", "output", ".", "write", "(", "bit", ")", "\n", "\n", "# Write out the saved underflow bits", "\n", "for", "i", "in", "range", "(", "self", ".", "num_underflow", ")", ":", "\n", "            ", "self", ".", "output", ".", "write", "(", "bit", "^", "1", ")", "\n", "", "self", ".", "num_underflow", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticEncoder.underflow": [[145, 147], ["None"], "methods", ["None"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_underflow", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticDecoder.__init__": [[153, 161], ["arithmeticcoding.ArithmeticCoderBase.__init__", "range", "arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.__init__", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["    ", "def", "__init__", "(", "self", ",", "bitin", ")", ":", "\n", "        ", "super", "(", "ArithmeticDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The underlying bit input stream.", "\n", "self", ".", "input", "=", "bitin", "\n", "# The current raw code bits being buffered, which is always in the range [low, high].", "\n", "self", ".", "code", "=", "0", "\n", "for", "i", "in", "range", "(", "ArithmeticCoderBase", ".", "STATE_SIZE", ")", ":", "\n", "            ", "self", ".", "code", "=", "self", ".", "code", "<<", "1", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticDecoder.read": [[164, 221], ["freqs.get_total", "int", "freqs.get_symbol_limit", "arithmeticcoding.ArithmeticDecoder.update", "ValueError", "math.floor", "print", "print", "print", "print", "math.floor", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "AssertionError", "math.floor", "freqs.get_low", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "freqs.get_low", "freqs.get_high", "freqs.get_low", "freqs.get_high", "freqs.get_symbol_limit", "freqs.get_low", "freqs.get_high"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.update", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high"], ["", "", "def", "read", "(", "self", ",", "freqs", ")", ":", "\n", "# if not isinstance(freqs, CheckedFrequencyTable):", "\n", "#     freqs = CheckedFrequencyTable(freqs)", "\n", "\n", "# Translate from coding range scale to frequency table scale", "\n", "        ", "total", "=", "freqs", ".", "get_total", "(", ")", "\n", "if", "total", ">", "ArithmeticCoderBase", ".", "MAX_TOTAL", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot decode symbol because total is too large\"", ")", "\n", "", "range", "=", "self", ".", "high", "-", "self", ".", "low", "+", "1", "\n", "offset", "=", "self", ".", "code", "-", "self", ".", "low", "\n", "# value = ((offset + 1) * total - 1) // range", "\n", "value", "=", "int", "(", "math", ".", "floor", "(", "(", "offset", "/", "range", ")", "*", "total", "+", "(", "total", "/", "range", ")", "-", "(", "1", "/", "range", ")", ")", ")", "\n", "\n", "if", "not", "(", "math", ".", "floor", "(", "(", "value", "/", "total", ")", "*", "(", "range", "/", "total", ")", ")", "<=", "offset", ")", ":", "\n", "            ", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "", "assert", "math", ".", "floor", "(", "(", "value", "/", "total", ")", "*", "(", "range", "/", "total", ")", ")", "<=", "offset", "\n", "# value * range // total <= offset", "\n", "\n", "if", "not", "(", "0", "<=", "value", "<", "total", ")", ":", "\n", "            ", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "", "assert", "0", "<=", "value", "<", "total", "\n", "\n", "# A kind of binary search. Find highest symbol such that freqs.get_low(symbol) <= value.", "\n", "start", "=", "0", "\n", "end", "=", "freqs", ".", "get_symbol_limit", "(", ")", "\n", "while", "end", "-", "start", ">", "1", ":", "\n", "            ", "middle", "=", "(", "start", "+", "end", ")", ">>", "1", "\n", "if", "freqs", ".", "get_low", "(", "middle", ")", ">", "value", ":", "\n", "                ", "end", "=", "middle", "\n", "", "else", ":", "\n", "                ", "start", "=", "middle", "\n", "", "", "assert", "start", "+", "1", "==", "end", "\n", "\n", "symbol", "=", "start", "\n", "if", "not", "(", "freqs", ".", "get_low", "(", "symbol", ")", "*", "range", "//", "total", "<=", "offset", "<", "freqs", ".", "get_high", "(", "symbol", ")", "*", "range", "//", "total", ")", ":", "\n", "            ", "print", "(", "'symbol:'", "+", "str", "(", "symbol", ")", ")", "\n", "print", "(", "'freqs.get_symbol_limit():'", "+", "str", "(", "freqs", ".", "get_symbol_limit", "(", ")", ")", ")", "\n", "print", "(", "'freqs.get_low(symbol):'", "+", "str", "(", "freqs", ".", "get_low", "(", "symbol", ")", ")", ")", "\n", "print", "(", "'freqs.get_high(symbol):'", "+", "str", "(", "freqs", ".", "get_high", "(", "symbol", ")", ")", ")", "\n", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "\n", "# assert math.floor((freqs.get_low(symbol) / total) * (range / total)) <= offset < math.floor(", "\n", "#     (freqs.get_high(symbol) / total) * (range / total))", "\n", "", "assert", "freqs", ".", "get_low", "(", "symbol", ")", "*", "range", "//", "total", "<=", "offset", "<", "freqs", ".", "get_high", "(", "symbol", ")", "*", "range", "//", "total", "\n", "self", ".", "update", "(", "freqs", ",", "symbol", ")", "\n", "if", "not", "(", "self", ".", "low", "<=", "self", ".", "code", "<=", "self", ".", "high", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Code out of range\"", ")", "\n", "", "return", "symbol", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticDecoder.shift": [[222, 224], ["arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["", "def", "shift", "(", "self", ")", ":", "\n", "        ", "self", ".", "code", "=", "(", "(", "self", ".", "code", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", ")", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticDecoder.underflow": [[225, 228], ["arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "self", ".", "code", "=", "(", "self", ".", "code", "&", "ArithmeticCoderBase", ".", "TOP_MASK", ")", "|", "(", "\n", "(", "self", ".", "code", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", ")", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ArithmeticDecoder.read_code_bit": [[231, 236], ["arithmeticcoding.ArithmeticDecoder.input.read"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read_code_bit", "(", "self", ")", ":", "\n", "        ", "temp", "=", "self", ".", "input", ".", "read", "(", ")", "\n", "if", "temp", "==", "-", "1", ":", "\n", "            ", "temp", "=", "0", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.get_symbol_limit": [[246, 248], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.get": [[250, 252], ["NotImplementedError"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.set": [[255, 257], ["NotImplementedError"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.increment": [[259, 261], ["NotImplementedError"], "methods", ["None"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.get_total": [[264, 266], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.get_low": [[269, 271], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FrequencyTable.get_high": [[274, 276], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.__init__": [[282, 286], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numsyms", ")", ":", "\n", "        ", "if", "numsyms", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of symbols must be positive\"", ")", "\n", "", "self", ".", "numsymbols", "=", "numsyms", "# Total number of symbols, which is at least 1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.get_symbol_limit": [[288, 290], ["None"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "numsymbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.get": [[292, 295], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.get_total": [[298, 300], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "numsymbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.get_low": [[303, 306], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "symbol", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.get_high": [[309, 312], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "symbol", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable._check_symbol": [[314, 319], ["ValueError"], "methods", ["None"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "self", ".", "numsymbols", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.__str__": [[321, 323], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"FlatFrequencyTable={}\"", ".", "format", "(", "self", ".", "numsymbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.set": [[325, 327], ["NotImplementedError"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.FlatFrequencyTable.increment": [[329, 331], ["NotImplementedError"], "methods", ["None"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.__init__": [[343, 364], ["isinstance", "sum", "freqs.get_symbol_limit", "list", "len", "ValueError", "freqs.get", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get"], ["    ", "def", "__init__", "(", "self", ",", "freqs", ")", ":", "\n", "        ", "if", "isinstance", "(", "freqs", ",", "FrequencyTable", ")", ":", "\n", "            ", "numsym", "=", "freqs", ".", "get_symbol_limit", "(", ")", "\n", "self", ".", "frequencies", "=", "[", "freqs", ".", "get", "(", "i", ")", "for", "i", "in", "range", "(", "numsym", ")", "]", "\n", "", "else", ":", "# Assume it is a sequence type", "\n", "            ", "self", ".", "frequencies", "=", "list", "(", "freqs", ")", "# Make copy", "\n", "\n", "# 'frequencies' is a list of the frequency for each symbol.", "\n", "# Its length is at least 1, and each element is non-negative.", "\n", "", "if", "len", "(", "self", ".", "frequencies", ")", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"At least 1 symbol needed\"", ")", "\n", "", "for", "freq", "in", "self", ".", "frequencies", ":", "\n", "            ", "if", "freq", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Negative frequency\"", ")", "\n", "\n", "# Always equal to the sum of 'frequencies'", "\n", "", "", "self", ".", "total", "=", "sum", "(", "self", ".", "frequencies", ")", "\n", "\n", "# cumulative[i] is the sum of 'frequencies' from 0 (inclusive) to i (exclusive).", "\n", "# Initialized lazily. When it is not None, the data is valid.", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.get_symbol_limit": [[366, 368], ["len"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frequencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.get": [[370, 373], ["arithmeticcoding.SimpleFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "self", ".", "frequencies", "[", "symbol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.set": [[376, 385], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "freq", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Negative frequency\"", ")", "\n", "", "temp", "=", "self", ".", "total", "-", "self", ".", "frequencies", "[", "symbol", "]", "\n", "assert", "temp", ">=", "0", "\n", "self", ".", "total", "=", "temp", "+", "freq", "\n", "self", ".", "frequencies", "[", "symbol", "]", "=", "freq", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.increment": [[387, 392], ["arithmeticcoding.SimpleFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "self", ".", "total", "+=", "1", "\n", "self", ".", "frequencies", "[", "symbol", "]", "+=", "1", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.get_total": [[395, 397], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.get_low": [[400, 405], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "arithmeticcoding.SimpleFrequencyTable._init_cumulative"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._init_cumulative"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "self", ".", "cumulative", "is", "None", ":", "\n", "            ", "self", ".", "_init_cumulative", "(", ")", "\n", "", "return", "self", ".", "cumulative", "[", "symbol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.get_high": [[408, 413], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "arithmeticcoding.SimpleFrequencyTable._init_cumulative"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._init_cumulative"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "self", ".", "cumulative", "is", "None", ":", "\n", "            ", "self", ".", "_init_cumulative", "(", ")", "\n", "", "return", "self", ".", "cumulative", "[", "symbol", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable._init_cumulative": [[415, 423], ["cumul.append"], "methods", ["None"], ["", "def", "_init_cumulative", "(", "self", ")", ":", "\n", "        ", "cumul", "=", "[", "0", "]", "\n", "sum", "=", "0", "\n", "for", "freq", "in", "self", ".", "frequencies", ":", "\n", "            ", "sum", "+=", "freq", "\n", "cumul", ".", "append", "(", "sum", ")", "\n", "", "assert", "sum", "==", "self", ".", "total", "\n", "self", ".", "cumulative", "=", "cumul", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable._check_symbol": [[425, 430], ["len", "ValueError"], "methods", ["None"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "len", "(", "self", ".", "frequencies", ")", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.SimpleFrequencyTable.__str__": [[433, 438], ["enumerate"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "result", "=", "\"\"", "\n", "for", "(", "i", ",", "freq", ")", "in", "enumerate", "(", "self", ".", "frequencies", ")", ":", "\n", "            ", "result", "+=", "\"{}\\t{}\\n\"", ".", "format", "(", "i", ",", "freq", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.__init__": [[443, 446], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "freqtab", ")", ":", "\n", "# The underlying frequency table that holds the data", "\n", "        ", "self", ".", "freqtable", "=", "freqtab", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.get_symbol_limit": [[447, 452], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get_symbol_limit", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get_symbol_limit", "(", ")", "\n", "if", "result", "<=", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Non-positive symbol limit\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.get": [[453, 460], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "AssertionError", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get", "(", "symbol", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "", "if", "result", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Negative symbol frequency\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.get_total": [[461, 466], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get_total", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get_total", "(", ")", "\n", "if", "result", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Negative total frequency\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.get_low": [[467, 477], ["arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "AssertionError", "AssertionError", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_total"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "low", "=", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "high", "=", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "if", "not", "(", "0", "<=", "low", "<=", "high", "<=", "self", ".", "freqtable", ".", "get_total", "(", ")", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\"Symbol low cumulative frequency out of range\"", ")", "\n", "", "return", "low", "\n", "", "else", ":", "\n", "            ", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.get_high": [[478, 488], ["arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "AssertionError", "AssertionError", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_total"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "low", "=", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "high", "=", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "if", "not", "(", "0", "<=", "low", "<=", "high", "<=", "self", ".", "freqtable", ".", "get_total", "(", ")", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\"Symbol high cumulative frequency out of range\"", ")", "\n", "", "return", "high", "\n", "", "else", ":", "\n", "            ", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.__str__": [[489, 491], ["str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"CheckFrequencyTable (\"", "+", "str", "(", "self", ".", "freqtable", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.set": [[492, 496], ["arithmeticcoding.CheckedFrequencyTable.freqtable.set", "AssertionError", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.set", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "self", ".", "freqtable", ".", "set", "(", "symbol", ",", "freq", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", "or", "freq", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable.increment": [[497, 501], ["arithmeticcoding.CheckedFrequencyTable.freqtable.increment", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.increment", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "freqtable", ".", "increment", "(", "symbol", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range": [[502, 504], ["arithmeticcoding.CheckedFrequencyTable.get_symbol_limit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "", "def", "_is_symbol_in_range", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "return", "0", "<=", "symbol", "<", "self", ".", "get_symbol_limit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.__init__": [[519, 538], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu_val", "=", "0", ",", "sigma_val", "=", "1", ")", ":", "\n", "        ", "self", ".", "mul_factor", "=", "10000000", "\n", "self", ".", "num_symbols", "=", "513", "\n", "self", ".", "EOF", "=", "self", ".", "num_symbols", "-", "1", "\n", "\n", "self", ".", "mu_val", "=", "mu_val", "\n", "self", ".", "sigma_val", "=", "sigma_val", "\n", "\n", "# self.TINY =  1e-2", "\n", "self", ".", "TINY", "=", "1e-10", "\n", "\n", "# print(\"mu_val: \" + str(mu_val))", "\n", "# print(\"sigma_val: \" + str(sigma_val))", "\n", "# Always equal to the sum of 'frequencies'", "\n", "self", ".", "total", "=", "self", ".", "mul_factor", "+", "513", "\n", "\n", "# cumulative[i] is the sum of 'frequencies' from 0 (inclusive) to i (exclusive).", "\n", "# Initialized lazily. When it is not None, the data is valid.", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.set_mu": [[539, 541], ["None"], "methods", ["None"], ["", "def", "set_mu", "(", "self", ",", "mu_val", ")", ":", "\n", "        ", "self", ".", "mu_val", "=", "mu_val", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.set_sigma": [[542, 544], ["None"], "methods", ["None"], ["", "def", "set_sigma", "(", "self", ",", "sigma_val", ")", ":", "\n", "        ", "self", ".", "sigma_val", "=", "sigma_val", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.get_symbol_limit": [[546, 548], ["None"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.get": [[550, 561], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "\n", "if", "symbol", "==", "self", ".", "EOF", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "c2", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "symbol", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c1", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "symbol", "-", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "freq", "=", "int", "(", "math", ".", "floor", "(", "(", "c2", "-", "c1", ")", "*", "self", ".", "mul_factor", ")", "+", "1", ")", "\n", "\n", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.get_total": [[583, 585], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.get_low": [[588, 593], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "c", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "(", "symbol", "-", "1", ")", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c", "=", "int", "(", "math", ".", "floor", "(", "c", "*", "self", ".", "mul_factor", ")", "+", "symbol", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.get_high": [[596, 605], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "c", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "(", "symbol", ")", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c", "=", "int", "(", "math", ".", "floor", "(", "c", "*", "self", ".", "mul_factor", ")", "+", "symbol", "+", "1", ")", "\n", "\n", "# if symbol == self.EOF:", "\n", "#     c = c + 1", "\n", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable._check_symbol": [[617, 622], ["arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "self", ".", "get_symbol_limit", "(", ")", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.ModelFrequencyTable.__str__": [[625, 630], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "result", "=", "\"\"", "\n", "# for (i, freq) in enumerate(self.frequencies):", "\n", "#     result += \"{}\\t{}\\n\".format(i, freq)", "\n", "return", "result", "\n", "###############################################################################################", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitInputStream.__init__": [[643, 650], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inp", ")", ":", "\n", "# The underlying byte stream to read from", "\n", "        ", "self", ".", "input", "=", "inp", "\n", "# Either in the range [0x00, 0xFF] if bits are available, or -1 if end of stream is reached", "\n", "self", ".", "currentbyte", "=", "0", "\n", "# Number of remaining bits in the current byte, always between 0 and 7 (inclusive)", "\n", "self", ".", "numbitsremaining", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitInputStream.read": [[653, 666], ["arithmeticcoding.BitInputStream.input.read", "len", "ord"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "currentbyte", "==", "-", "1", ":", "\n", "            ", "return", "-", "1", "\n", "", "if", "self", ".", "numbitsremaining", "==", "0", ":", "\n", "            ", "temp", "=", "self", ".", "input", ".", "read", "(", "1", ")", "\n", "if", "len", "(", "temp", ")", "==", "0", ":", "\n", "                ", "self", ".", "currentbyte", "=", "-", "1", "\n", "return", "-", "1", "\n", "", "self", ".", "currentbyte", "=", "temp", "[", "0", "]", "if", "python3", "else", "ord", "(", "temp", ")", "\n", "self", ".", "numbitsremaining", "=", "8", "\n", "", "assert", "self", ".", "numbitsremaining", ">", "0", "\n", "self", ".", "numbitsremaining", "-=", "1", "\n", "return", "(", "self", ".", "currentbyte", ">>", "self", ".", "numbitsremaining", ")", "&", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitInputStream.read_no_eof": [[669, 675], ["arithmeticcoding.BitInputStream.read", "EOFError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read_no_eof", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "read", "(", ")", "\n", "if", "result", "!=", "-", "1", ":", "\n", "            ", "return", "result", "\n", "", "else", ":", "\n", "            ", "raise", "EOFError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitInputStream.close": [[677, 681], ["arithmeticcoding.BitInputStream.input.close"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "input", ".", "close", "(", ")", "\n", "self", ".", "currentbyte", "=", "-", "1", "\n", "self", ".", "numbitsremaining", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitOutputStream.__init__": [[688, 692], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "out", ")", ":", "\n", "        ", "self", ".", "output", "=", "out", "# The underlying byte stream to write to", "\n", "self", ".", "currentbyte", "=", "0", "# The accumulated bits for the current byte, always in the range [0x00, 0xFF]", "\n", "self", ".", "numbitsfilled", "=", "0", "# Number of accumulated bits in the current byte, always between 0 and 7 (inclusive)", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitOutputStream.write": [[694, 704], ["ValueError", "arithmeticcoding.BitOutputStream.output.write", "bytes", "chr"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "write", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "b", "not", "in", "(", "0", ",", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Argument must be 0 or 1\"", ")", "\n", "", "self", ".", "currentbyte", "=", "(", "self", ".", "currentbyte", "<<", "1", ")", "|", "b", "\n", "self", ".", "numbitsfilled", "+=", "1", "\n", "if", "self", ".", "numbitsfilled", "==", "8", ":", "\n", "            ", "towrite", "=", "bytes", "(", "(", "self", ".", "currentbyte", ",", ")", ")", "if", "python3", "else", "chr", "(", "self", ".", "currentbyte", ")", "\n", "self", ".", "output", ".", "write", "(", "towrite", ")", "\n", "self", ".", "currentbyte", "=", "0", "\n", "self", ".", "numbitsfilled", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.arithmeticcoding.BitOutputStream.close": [[708, 712], ["arithmeticcoding.BitOutputStream.output.close", "arithmeticcoding.BitOutputStream.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "numbitsfilled", "!=", "0", ":", "\n", "            ", "self", ".", "write", "(", "0", ")", "\n", "", "self", ".", "output", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim._FSpecialGauss": [[32, 44], ["numpy.exp", "len", "np.exp.sum"], "function", ["None"], ["def", "_FSpecialGauss", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"Function to mimic the 'fspecial' gaussian MATLAB function.\"\"\"", "\n", "radius", "=", "size", "//", "2", "\n", "offset", "=", "0.0", "\n", "start", ",", "stop", "=", "-", "radius", ",", "radius", "+", "1", "\n", "if", "size", "%", "2", "==", "0", ":", "\n", "        ", "offset", "=", "0.5", "\n", "stop", "-=", "1", "\n", "", "x", ",", "y", "=", "np", ".", "mgrid", "[", "offset", "+", "start", ":", "stop", ",", "offset", "+", "start", ":", "stop", "]", "\n", "assert", "len", "(", "x", ")", "==", "size", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", "\n", "return", "g", "/", "g", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim._SSIMForMultiScale": [[46, 116], ["img1.astype.astype", "img2.astype.astype", "min", "numpy.mean", "numpy.mean", "RuntimeError", "RuntimeError", "numpy.reshape", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "msssim._FSpecialGauss"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim._FSpecialGauss"], ["", "def", "_SSIMForMultiScale", "(", "img1", ",", "img2", ",", "max_val", "=", "255", ",", "filter_size", "=", "11", ",", "\n", "filter_sigma", "=", "1.5", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ")", ":", "\n", "    ", "\"\"\"Return the Structural Similarity Map between `img1` and `img2`.\n    This function attempts to match the functionality of ssim_index_new.m by\n    Zhou Wang: http://www.cns.nyu.edu/~lcv/ssim/msssim.zip\n    Arguments:\n      img1: Numpy array holding the first RGB image batch.\n      img2: Numpy array holding the second RGB image batch.\n      max_val: the dynamic range of the images (i.e., the difference between the\n        maximum the and minimum allowed values).\n      filter_size: Size of blur kernel to use (will be reduced for small images).\n      filter_sigma: Standard deviation for Gaussian blur kernel (will be reduced\n        for small images).\n      k1: Constant used to maintain stability in the SSIM calculation (0.01 in\n        the original paper).\n      k2: Constant used to maintain stability in the SSIM calculation (0.03 in\n        the original paper).\n    Returns:\n      Pair containing the mean SSIM and contrast sensitivity between `img1` and\n      `img2`.\n    Raises:\n      RuntimeError: If input images don't have the same shape or don't have four\n        dimensions: [batch_size, height, width, depth].\n    \"\"\"", "\n", "if", "img1", ".", "shape", "!=", "img2", ".", "shape", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have the same shape (%s vs. %s).'", ",", "\n", "img1", ".", "shape", ",", "img2", ".", "shape", ")", "\n", "", "if", "img1", ".", "ndim", "!=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have four dimensions, not %d'", ",", "\n", "img1", ".", "ndim", ")", "\n", "\n", "", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "_", ",", "height", ",", "width", ",", "_", "=", "img1", ".", "shape", "\n", "\n", "# Filter size can't be larger than height or width of images.", "\n", "size", "=", "min", "(", "filter_size", ",", "height", ",", "width", ")", "\n", "\n", "# Scale down sigma if a smaller filter size is used.", "\n", "sigma", "=", "size", "*", "filter_sigma", "/", "filter_size", "if", "filter_size", "else", "0", "\n", "\n", "if", "filter_size", ":", "\n", "        ", "window", "=", "np", ".", "reshape", "(", "_FSpecialGauss", "(", "size", ",", "sigma", ")", ",", "(", "1", ",", "size", ",", "size", ",", "1", ")", ")", "\n", "mu1", "=", "signal", ".", "fftconvolve", "(", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "mu2", "=", "signal", ".", "fftconvolve", "(", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma11", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma22", "=", "signal", ".", "fftconvolve", "(", "img2", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma12", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "", "else", ":", "\n", "# Empty blur kernel so no need to convolve.", "\n", "        ", "mu1", ",", "mu2", "=", "img1", ",", "img2", "\n", "sigma11", "=", "img1", "*", "img1", "\n", "sigma22", "=", "img2", "*", "img2", "\n", "sigma12", "=", "img1", "*", "img2", "\n", "\n", "", "mu11", "=", "mu1", "*", "mu1", "\n", "mu22", "=", "mu2", "*", "mu2", "\n", "mu12", "=", "mu1", "*", "mu2", "\n", "sigma11", "-=", "mu11", "\n", "sigma22", "-=", "mu22", "\n", "sigma12", "-=", "mu12", "\n", "\n", "# Calculate intermediate values used by both ssim and cs_map.", "\n", "c1", "=", "(", "k1", "*", "max_val", ")", "**", "2", "\n", "c2", "=", "(", "k2", "*", "max_val", ")", "**", "2", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "c2", "\n", "v2", "=", "sigma11", "+", "sigma22", "+", "c2", "\n", "ssim", "=", "np", ".", "mean", "(", "(", "(", "(", "2.0", "*", "mu12", "+", "c1", ")", "*", "v1", ")", "/", "(", "(", "mu11", "+", "mu22", "+", "c1", ")", "*", "v2", ")", ")", ")", "\n", "cs", "=", "np", ".", "mean", "(", "v1", "/", "v2", ")", "\n", "return", "ssim", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim.MultiScaleSSIM": [[118, 173], ["numpy.array", "numpy.array", "numpy.array", "range", "RuntimeError", "RuntimeError", "numpy.ones", "x.astype", "msssim._SSIMForMultiScale", "numpy.append", "numpy.append", "numpy.prod", "scipy.ndimage.filters.convolve"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim._SSIMForMultiScale"], ["", "def", "MultiScaleSSIM", "(", "img1", ",", "img2", ",", "max_val", "=", "255", ",", "filter_size", "=", "11", ",", "filter_sigma", "=", "1.5", ",", "\n", "k1", "=", "0.01", ",", "k2", "=", "0.03", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the MS-SSIM score between `img1` and `img2`.\n    This function implements Multi-Scale Structural Similarity (MS-SSIM) Image\n    Quality Assessment according to Zhou Wang's paper, \"Multi-scale structural\n    similarity for image quality assessment\" (2003).\n    Link: https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf\n    Author's MATLAB implementation:\n    http://www.cns.nyu.edu/~lcv/ssim/msssim.zip\n    Arguments:\n      img1: Numpy array holding the first RGB image batch.\n      img2: Numpy array holding the second RGB image batch.\n      max_val: the dynamic range of the images (i.e., the difference between the\n        maximum the and minimum allowed values).\n      filter_size: Size of blur kernel to use (will be reduced for small images).\n      filter_sigma: Standard deviation for Gaussian blur kernel (will be reduced\n        for small images).\n      k1: Constant used to maintain stability in the SSIM calculation (0.01 in\n        the original paper).\n      k2: Constant used to maintain stability in the SSIM calculation (0.03 in\n        the original paper).\n      weights: List of weights for each level; if none, use five levels and the\n        weights from the original paper.\n    Returns:\n      MS-SSIM score between `img1` and `img2`.\n    Raises:\n      RuntimeError: If input images don't have the same shape or don't have four\n        dimensions: [batch_size, height, width, depth].\n    \"\"\"", "\n", "if", "img1", ".", "shape", "!=", "img2", ".", "shape", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have the same shape (%s vs. %s).'", ",", "\n", "img1", ".", "shape", ",", "img2", ".", "shape", ")", "\n", "", "if", "img1", ".", "ndim", "!=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have four dimensions, not %d'", ",", "\n", "img1", ".", "ndim", ")", "\n", "\n", "# Note: default weights don't sum to 1.0 but do match the paper / matlab code.", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", "if", "weights", "else", "\n", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", ")", "\n", "levels", "=", "weights", ".", "size", "\n", "downsample_filter", "=", "np", ".", "ones", "(", "(", "1", ",", "2", ",", "2", ",", "1", ")", ")", "/", "4.0", "\n", "im1", ",", "im2", "=", "[", "x", ".", "astype", "(", "np", ".", "float64", ")", "for", "x", "in", "[", "img1", ",", "img2", "]", "]", "\n", "mssim", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "mcs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "levels", ")", ":", "\n", "        ", "ssim", ",", "cs", "=", "_SSIMForMultiScale", "(", "\n", "im1", ",", "im2", ",", "max_val", "=", "max_val", ",", "filter_size", "=", "filter_size", ",", "\n", "filter_sigma", "=", "filter_sigma", ",", "k1", "=", "k1", ",", "k2", "=", "k2", ")", "\n", "mssim", "=", "np", ".", "append", "(", "mssim", ",", "ssim", ")", "\n", "mcs", "=", "np", ".", "append", "(", "mcs", ",", "cs", ")", "\n", "filtered", "=", "[", "convolve", "(", "im", ",", "downsample_filter", ",", "mode", "=", "'reflect'", ")", "\n", "for", "im", "in", "[", "im1", ",", "im2", "]", "]", "\n", "im1", ",", "im2", "=", "[", "x", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", ",", ":", "]", "for", "x", "in", "filtered", "]", "\n", "", "return", "(", "np", ".", "prod", "(", "mcs", "[", "0", ":", "levels", "-", "1", "]", "**", "weights", "[", "0", ":", "levels", "-", "1", "]", ")", "*", "\n", "(", "mssim", "[", "levels", "-", "1", "]", "**", "weights", "[", "levels", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim.main": [[175, 202], ["tensorflow.placeholder", "tensorflow.expand_dims", "print", "print", "tensorflow.gfile.Exists", "print", "tensorflow.gfile.Exists", "print", "tensorflow.gfile.FastGFile", "image_file.read", "tensorflow.gfile.FastGFile", "image_file.read", "tensorflow.image.decode_png", "tensorflow.Session", "sess.run", "sess.run", "msssim.MultiScaleSSIM"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.msssim.MultiScaleSSIM"], ["", "def", "main", "(", "_", ")", ":", "\n", "    ", "if", "FLAGS", ".", "original_image", "is", "None", "or", "FLAGS", ".", "compared_image", "is", "None", ":", "\n", "        ", "print", "(", "'\\nUsage: python msssim.py --original_image=original.png '", "\n", "'--compared_image=distorted.png\\n\\n'", ")", "\n", "return", "\n", "\n", "", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "FLAGS", ".", "original_image", ")", ":", "\n", "        ", "print", "(", "'\\nCannot find --original_image.\\n'", ")", "\n", "return", "\n", "\n", "", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "FLAGS", ".", "compared_image", ")", ":", "\n", "        ", "print", "(", "'\\nCannot find --compared_image.\\n'", ")", "\n", "return", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "FLAGS", ".", "original_image", ")", "as", "image_file", ":", "\n", "        ", "img1_str", "=", "image_file", ".", "read", "(", ")", "\n", "", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "FLAGS", ".", "compared_image", ")", "as", "image_file", ":", "\n", "        ", "img2_str", "=", "image_file", ".", "read", "(", ")", "\n", "\n", "", "input_img", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ")", "\n", "decoded_image", "=", "tf", ".", "expand_dims", "(", "tf", ".", "image", ".", "decode_png", "(", "input_img", ",", "channels", "=", "3", ")", ",", "0", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "img1", "=", "sess", ".", "run", "(", "decoded_image", ",", "feed_dict", "=", "{", "input_img", ":", "img1_str", "}", ")", "\n", "img2", "=", "sess", ".", "run", "(", "decoded_image", ",", "feed_dict", "=", "{", "input_img", ":", "img2_str", "}", ")", "\n", "\n", "", "print", "(", "(", "MultiScaleSSIM", "(", "img1", ",", "img2", ",", "max_val", "=", "255", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.__init__": [[11, 30], ["tester_hybridmodel.Tester_hybridmodel.build_model"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.build_model"], ["    ", "def", "__init__", "(", "self", ",", "model_dir", ",", "model_type", ",", "quality_level", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "M1", "=", "192", "\n", "if", "model_type", "==", "0", ":", "#MSE optimized", "\n", "            ", "if", "quality_level", "==", "6", ":", "\n", "                ", "self", ".", "M2", "=", "192", "\n", "", "elif", "quality_level", "==", "7", ":", "\n", "                ", "self", ".", "M2", "=", "228", "\n", "", "elif", "quality_level", "in", "[", "8", ",", "9", "]", ":", "\n", "                ", "self", ".", "M2", "=", "408", "\n", "", "", "elif", "model_type", "==", "1", ":", "#MS-SSIM optimized", "\n", "            ", "if", "quality_level", "in", "[", "6", ",", "7", "]", ":", "\n", "                ", "self", ".", "M2", "=", "192", "\n", "", "elif", "quality_level", "in", "[", "8", ",", "9", "]", ":", "\n", "                ", "self", ".", "M2", "=", "408", "\n", "", "", "self", ".", "M", "=", "self", ".", "M1", "+", "self", ".", "M2", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.load_graph": [[31, 39], ["tensorflow.gfile.GFile", "tensorflow.GraphDef", "tensorflow.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "load_graph", "(", "self", ",", "frozen_graph_filename", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "GFile", "(", "frozen_graph_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"prefix\"", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.build_model": [[40, 72], ["tester_hybridmodel.Tester_hybridmodel.load_graph", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.load_graph"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "frozen_graph_filename", "=", "self", ".", "model_dir", "+", "\"/\"", "+", "\"saved_model.pb\"", "\n", "graph", "=", "self", ".", "load_graph", "(", "frozen_graph_filename", ")", "\n", "\n", "\n", "\n", "# for verifying", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "\n", "self", ".", "recon_image", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/clip_by_value:0'", ")", "\n", "self", ".", "y_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_3:0'", ")", "\n", "self", ".", "input_x", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Placeholder_2:0'", ")", "\n", "self", ".", "h_s_out", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_8:0'", ")", "\n", "self", ".", "z_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Round_1:0'", ")", "\n", "self", ".", "sigma_z", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/Abs:0'", ")", "\n", "self", ".", "pred_mean", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_15/strided_slice:0'", ")", "\n", "self", ".", "pred_sigma", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_15/Exp:0'", ")", "\n", "self", ".", "concatenated_c_i", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/concat_45:0'", ")", "\n", "\n", "self", ".", "gah1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn/truediv:0'", ")", "\n", "self", ".", "gah2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_2/truediv:0'", ")", "\n", "self", ".", "gah3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_3/truediv:0'", ")", "\n", "\n", "self", ".", "gsh1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn/mul:0'", ")", "\n", "self", ".", "gsh2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_2/mul:0'", ")", "\n", "self", ".", "gsh3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_3/mul:0'", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", "\n", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.extractor_prime": [[73, 75], ["None"], "methods", ["None"], ["", "def", "extractor_prime", "(", "self", ",", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "        ", "return", "padded_c_prime", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime": [[76, 85], ["numpy.multiply"], "methods", ["None"], ["", "def", "extractor_doubleprime", "(", "self", ",", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "# Masking has no effect on decoding, because unknown variables are already set to zeros.", "\n", "# Therefore, the masking can be skipped in the case of decoding.", "\n", "# We just leave it here just to maintain a simple structure of code.", "\n", "        ", "mask", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "return", "np", ".", "multiply", "(", "padded_y_hat", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.encode": [[87, 222], ["PIL.Image.open", "open", "numpy.array", "numpy.array.tofile", "numpy.array", "numpy.array.tofile", "open.close", "int", "int", "numpy.asarray", "numpy.pad", "input_x.transpose.transpose.reshape", "input_x.transpose.transpose.transpose", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "tester_hybridmodel.Tester_hybridmodel.sess.run", "int", "int", "numpy.pad", "tester_hybridmodel.Tester_hybridmodel.sess.run", "utils.printProgressBar", "arithmeticcoding.BitOutputStream", "arithmeticcoding.ArithmeticEncoder", "utils.printProgressBar", "range", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ArithmeticEncoder.finish", "arithmeticcoding.BitOutputStream.close", "open", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "tester_hybridmodel.Tester_hybridmodel.extractor_prime", "tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "numpy.concatenate", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "range", "numpy.rint", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ModelFrequencyTable", "numpy.rint", "arithmeticcoding.ArithmeticEncoder.write", "float", "float", "float", "float", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.finish", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "encode", "(", "self", ",", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "img", "=", "Image", ".", "open", "(", "input_path", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "fileobj", "=", "open", "(", "compressed_file_path", ",", "mode", "=", "'wb'", ")", "\n", "\n", "buf", "=", "quality_level", "<<", "1", "\n", "buf", "=", "buf", "+", "model_type", "\n", "arr", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "arr", "[", "0", "]", "=", "buf", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "fileobj", ".", "close", "(", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "img_array", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_array", "=", "np", ".", "pad", "(", "img_array", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "input_x", "=", "img_array", "\n", "\n", "input_x", "=", "input_x", ".", "reshape", "(", "1", ",", "new_h", ",", "new_w", ",", "3", ")", "\n", "input_x", "=", "input_x", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "gah1", ",", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "gah1", ",", "self", ".", "sigma_z", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_x", ":", "input_x", "}", ")", "\n", "\n", "gah1", "=", "np", ".", "pad", "(", "gah1", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah2", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah2", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah1", ":", "gah1", "}", ")", "\n", "\n", "gah2", "=", "np", ".", "pad", "(", "gah2", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah3", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah3", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah2", ":", "gah2", "}", ")", "\n", "\n", "gah3", "=", "np", ".", "pad", "(", "gah3", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "y_hat", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "y_hat", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah3", ":", "gah3", "}", ")", "\n", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'symmetric'", ")", "\n", "z_hat", ",", "h_s_out", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "z_hat", ",", "self", ".", "h_s_out", "]", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "\n", "\n", "# h_s_out, y_hat, z_hat, sigma_z = self.sess.run([self.h_s_out, self.y_hat, self.z_hat, self.sigma_z],", "\n", "#                                                feed_dict={self.input_x: input_x})  # NCHW", "\n", "\n", "############### encode z ####################################", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "bitout", "=", "arithmeticcoding", ".", "BitOutputStream", "(", "open", "(", "compressed_file_path", ",", "\"ab+\"", ")", ")", "\n", "enc", "=", "arithmeticcoding", ".", "ArithmeticEncoder", "(", "bitout", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "np", ".", "rint", "(", "z_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "\n", "# print(symbol)", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "# enc.write(freq, 512)", "\n", "# enc.finish()", "\n", "# bitout.close()", "\n", "\n", "############### encode y ####################################", "\n", "", "", "", "padded_y1_hat", "=", "np", ".", "pad", "(", "y_hat", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "# bitout = arithmeticcoding.BitOutputStream(open(enc_outputfile, \"wb\"))", "\n", "# enc = arithmeticcoding.ArithmeticEncoder(bitout)", "\n", "\n", "c_prime", "=", "h_s_out", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", "\n", "sigma2", "=", "h_s_out", "[", ":", ",", "self", ".", "M1", ":", ",", ":", ",", ":", "]", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y1_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "zero_means", "=", "np", ".", "zeros", "(", "\n", "[", "pred_mean", ".", "shape", "[", "0", "]", ",", "self", ".", "M2", ",", "pred_mean", ".", "shape", "[", "2", "]", ",", "\n", "pred_mean", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "concat_pred_mean", "=", "np", ".", "concatenate", "(", "[", "pred_mean", ",", "zero_means", "]", ",", "axis", "=", "1", ")", "\n", "concat_pred_sigma", "=", "np", ".", "concatenate", "(", "[", "pred_sigma", ",", "sigma2", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "1", ",", "w_idx", ":", "w_idx", "+", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "concat_pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "concat_pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "np", ".", "rint", "(", "y_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "", "", "", "enc", ".", "write", "(", "freq", ",", "512", ")", "\n", "enc", ".", "finish", "(", ")", "\n", "bitout", ".", "close", "(", ")", "\n", "\n", "return", "compressed_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.tester_hybridmodel.Tester_hybridmodel.decode": [[224, 364], ["open", "open.read", "open.read", "numpy.frombuffer", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.zeros", "int", "int", "numpy.pad", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "arithmeticcoding.BitInputStream", "arithmeticcoding.ArithmeticDecoder", "utils.printProgressBar", "range", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.BitInputStream.close", "tester_hybridmodel.Tester_hybridmodel.sess.run", "tester_hybridmodel.Tester_hybridmodel.sess.run", "tester_hybridmodel.Tester_hybridmodel.sess.run", "tester_hybridmodel.Tester_hybridmodel.sess.run", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "tester_hybridmodel.Tester_hybridmodel.astype", "math.ceil", "math.ceil", "int", "int", "math.ceil", "math.ceil", "range", "tester_hybridmodel.Tester_hybridmodel.extractor_prime", "tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "numpy.concatenate", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "range", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "arithmeticcoding.ArithmeticDecoder.read", "arithmeticcoding.ModelFrequencyTable", "arithmeticcoding.ArithmeticDecoder.read", "float", "float", "float", "float", "float", "float", "print", "print"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "decode", "(", "self", ",", "compressed_file", ",", "recon_path", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "fileobj", "=", "open", "(", "compressed_file", ",", "mode", "=", "'rb'", ")", "\n", "fileobj", ".", "read", "(", "1", ")", "#dummy", "\n", "buf", "=", "fileobj", ".", "read", "(", "4", ")", "\n", "arr", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "w", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w_1", "=", "int", "(", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_1", "=", "int", "(", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_1", "=", "math", ".", "floor", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "+", "pad_w_1", "\n", "res_h_1", "=", "math", ".", "floor", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "+", "pad_h_1", "\n", "\n", "pad_w_2", "=", "int", "(", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_2", "=", "int", "(", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_2", "=", "math", ".", "floor", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "+", "pad_w_2", "\n", "res_h_2", "=", "math", ".", "floor", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "+", "pad_h_2", "\n", "\n", "pad_w_3", "=", "int", "(", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_3", "=", "int", "(", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_3", "=", "math", ".", "floor", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "+", "pad_w_3", "\n", "res_h_3", "=", "math", ".", "floor", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "+", "pad_h_3", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "sigma_z", ")", "\n", "y_hat", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "M", ",", "int", "(", "float", "(", "res_h_3", ")", "/", "2.0", ")", ",", "int", "(", "float", "(", "res_w_3", ")", "/", "2.0", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "z_hat", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "z_hat", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "# NCHW", "\n", "\n", "# y_hat, z_hat, sigma_z = self.sess.run([self.y_hat, self.z_hat, self.sigma_z],", "\n", "#                                       feed_dict={", "\n", "#                                           self.input_x: np.zeros((1, 3, padded_h, padded_w))})  # NCHW", "\n", "\n", "padded_y1_hat", "=", "np", ".", "pad", "(", "y_hat", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "############### decode zhat ####################################", "\n", "bitin", "=", "arithmeticcoding", ".", "BitInputStream", "(", "fileobj", ")", "\n", "dec", "=", "arithmeticcoding", ".", "ArithmeticDecoder", "(", "bitin", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "dec", ".", "read", "(", "freq", ")", "\n", "if", "symbol", "==", "512", ":", "# EOF symbol", "\n", "                        ", "print", "(", "\"EOF symbol\"", ")", "\n", "break", "\n", "", "z_hat", "[", ":", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "=", "symbol", "-", "255", "\n", "\n", "# bitin.close()", "\n", "\n", "##################", "\n", "#################################################", "\n", "# Entropy decoding y", "\n", "# padded_z = np.zeros_like(padded_z, dtype = np.float32)", "\n", "", "", "", "h_s_out", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "h_s_out", ",", "feed_dict", "=", "{", "self", ".", "z_hat", ":", "z_hat", "}", ")", "\n", "c_prime", "=", "h_s_out", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", "\n", "sigma2", "=", "h_s_out", "[", ":", ",", "self", ".", "M1", ":", ",", ":", ",", ":", "]", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "padded_y1_hat", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "y_hat", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "\n", "# bitin = arithmeticcoding.BitInputStream(open(dec_inputfile, \"rb\"))", "\n", "# dec = arithmeticcoding.ArithmeticDecoder(bitin)", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Decoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Decoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y1_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "zero_means", "=", "np", ".", "zeros", "(", "\n", "[", "pred_mean", ".", "shape", "[", "0", "]", ",", "self", ".", "M2", ",", "pred_mean", ".", "shape", "[", "2", "]", ",", "\n", "pred_mean", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "concat_pred_mean", "=", "np", ".", "concatenate", "(", "[", "pred_mean", ",", "zero_means", "]", ",", "axis", "=", "1", ")", "\n", "concat_pred_sigma", "=", "np", ".", "concatenate", "(", "[", "pred_sigma", ",", "sigma2", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "1", ",", "w_idx", ":", "w_idx", "+", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "concat_pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "concat_pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "dec", ".", "read", "(", "freq", ")", "\n", "if", "symbol", "==", "512", ":", "# EOF symbol", "\n", "                        ", "print", "(", "\"EOF symbol\"", ")", "\n", "break", "\n", "", "if", "ch_idx", "<", "self", ".", "M1", ":", "\n", "                        ", "padded_y1_hat", "[", ":", ",", "ch_idx", ",", "h_idx", "+", "3", ",", "w_idx", "+", "2", "]", "=", "symbol", "-", "255", "\n", "", "y_hat", "[", ":", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "=", "symbol", "-", "255", "\n", "", "", "", "bitin", ".", "close", "(", ")", "\n", "\n", "#################################################", "\n", "\n", "###############", "\n", "gsh1", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh1", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "y_hat", "}", ")", "\n", "gsh1", "=", "gsh1", "[", ":", ",", ":", "res_h_3", "-", "pad_h_3", ",", ":", "res_w_3", "-", "pad_w_3", ",", ":", "]", "\n", "\n", "gsh2", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh2", ",", "feed_dict", "=", "{", "self", ".", "gsh1", ":", "gsh1", "}", ")", "\n", "gsh2", "=", "gsh2", "[", ":", ",", ":", "res_h_2", "-", "pad_h_2", ",", ":", "res_w_2", "-", "pad_w_2", ",", ":", "]", "\n", "\n", "gsh3", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gsh3", ",", "feed_dict", "=", "{", "self", ".", "gsh2", ":", "gsh2", "}", ")", "\n", "gsh3", "=", "gsh3", "[", ":", ",", ":", "res_h_1", "-", "pad_h_1", ",", ":", "res_w_1", "-", "pad_w_1", ",", ":", "]", "\n", "\n", "recon", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recon_image", ",", "feed_dict", "=", "{", "self", ".", "gsh3", ":", "gsh3", "}", ")", "\n", "recon", "=", "recon", "[", "0", ",", ":", "recon", ".", "shape", "[", "1", "]", "-", "pad_h", ",", ":", "recon", ".", "shape", "[", "2", "]", "-", "pad_w", ",", ":", "]", "\n", "###############", "\n", "\n", "im", "=", "Image", ".", "fromarray", "(", "recon", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "im", ".", "save", "(", "recon_path", ")", "\n", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.utils.printProgressBar": [[6, 25], ["int", "print", "print", "float", "str"], "function", ["None"], ["def", "printProgressBar", "(", "iteration", ",", "total", ",", "prefix", "=", "''", ",", "suffix", "=", "''", ",", "decimals", "=", "1", ",", "length", "=", "100", ",", "fill", "=", "'\u2588'", ")", ":", "\n", "    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        length      - Optional  : character length of bar (Int)\n        fill        - Optional  : bar fill character (Str)\n    \"\"\"", "\n", "percent", "=", "(", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", ")", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filledLength", "=", "int", "(", "length", "*", "iteration", "//", "total", ")", "\n", "bar", "=", "fill", "*", "filledLength", "+", "'-'", "*", "(", "length", "-", "filledLength", ")", "\n", "print", "(", "'\\r%s |%s| %s%% %s'", "%", "(", "prefix", ",", "bar", ",", "percent", ",", "suffix", ")", ",", "end", "=", "'\\r'", ")", "\n", "# Print New Line on Complete", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.utils.downloadModels": [[26, 34], ["os.path.exists", "os.makedirs", "google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive", "os.remove"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive"], ["", "", "def", "downloadModels", "(", ")", ":", "\n", "    ", "if", "not", "exists", "(", "'./models'", ")", ":", "\n", "        ", "makedirs", "(", "'./models'", ")", "\n", "gdd", ".", "download_file_from_google_drive", "(", "file_id", "=", "'1NqIYWOJP4o_JbUl2n2SdxezZNVdpBw5c'", ",", "\n", "dest_path", "=", "'./models/models.zip'", ",", "\n", "unzip", "=", "True", ")", "\n", "remove", "(", "\"./models/models.zip\"", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test_v2.utils.save_response_content": [[35, 42], ["open", "response.iter_content", "f.write"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.__init__": [[11, 17], ["tester_basemodel.Tester_basemodel.build_model"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.build_model"], ["class", "Tester_basemodel", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model_dir", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "M", "=", "192", "\n", "self", ".", "build_model", "(", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.load_graph": [[18, 26], ["tensorflow.gfile.GFile", "tensorflow.GraphDef", "tensorflow.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["\n", "", "def", "load_graph", "(", "self", ",", "frozen_graph_filename", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "GFile", "(", "frozen_graph_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"prefix\"", ")", "\n", "", "return", "graph", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.build_model": [[27, 49], ["tester_basemodel.Tester_basemodel.load_graph", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tester_basemodel.Tester_basemodel.get_tensor_by_name", "tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.load_graph"], ["\n", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "frozen_graph_filename", "=", "self", ".", "model_dir", "+", "\"/\"", "+", "\"saved_model.pb\"", "\n", "graph", "=", "self", ".", "load_graph", "(", "frozen_graph_filename", ")", "\n", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "# time.sleep(3)", "\n", "\n", "\n", "# for verifying", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "\n", "self", ".", "recon_image", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/clip_by_value:0'", ")", "\n", "self", ".", "y_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_3:0'", ")", "\n", "self", ".", "input_x", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Placeholder_2:0'", ")", "\n", "self", ".", "c_prime", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_8:0'", ")", "\n", "self", ".", "z_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Round_1:0'", ")", "\n", "self", ".", "sigma_z", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/Abs:0'", ")", "\n", "self", ".", "pred_mean", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_31/strided_slice:0'", ")", "\n", "self", ".", "pred_sigma", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_31/Exp:0'", ")", "\n", "self", ".", "concatenated_c_i", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/concat_31:0'", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.extractor_prime": [[50, 52], ["None"], "methods", ["None"], ["\n", "self", ".", "gah1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn/truediv:0'", ")", "\n", "self", ".", "gah2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_2/truediv:0'", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.extractor_doubleprime": [[53, 62], ["numpy.multiply"], "methods", ["None"], ["self", ".", "gah3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_3/truediv:0'", ")", "\n", "\n", "self", ".", "gsh1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn/mul:0'", ")", "\n", "self", ".", "gsh2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_2/mul:0'", ")", "\n", "self", ".", "gsh3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_3/mul:0'", ")", "\n", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.encode": [[67, 158], ["PIL.Image.open", "open", "numpy.array", "numpy.array.tofile", "numpy.array", "numpy.array.tofile", "open.close", "int", "int", "numpy.asarray", "numpy.pad", "input_x.transpose.transpose.reshape", "input_x.transpose.transpose.transpose", "tester_basemodel.Tester_basemodel.sess.run", "utils.printProgressBar", "arithmeticcoding.BitOutputStream", "arithmeticcoding.ArithmeticEncoder", "range", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ArithmeticEncoder.finish", "arithmeticcoding.BitOutputStream.close", "open", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "math.ceil", "math.ceil", "range", "tester_basemodel.Tester_basemodel.extractor_prime", "tester_basemodel.Tester_basemodel.extractor_doubleprime", "numpy.concatenate", "tester_basemodel.Tester_basemodel.sess.run", "range", "numpy.int", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ModelFrequencyTable", "numpy.int", "arithmeticcoding.ArithmeticEncoder.write", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.finish", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["\n", "", "def", "extractor_doubleprime", "(", "self", ",", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "# Masking has no effect on decoding, because unknown variables are already set to zeros.", "\n", "# Therefore, the masking can be skipped in the case of decoding.", "\n", "# We just leave it here just to maintain a simple structure of code.", "\n", "        ", "mask", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "return", "np", ".", "multiply", "(", "padded_y_hat", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", ",", "mask", ")", "\n", "\n", "\n", "", "def", "encode", "(", "self", ",", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "img", "=", "Image", ".", "open", "(", "input_path", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "fileobj", "=", "open", "(", "compressed_file_path", ",", "mode", "=", "'wb'", ")", "\n", "\n", "buf", "=", "quality_level", "<<", "1", "\n", "buf", "=", "buf", "+", "model_type", "\n", "arr", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "arr", "[", "0", "]", "=", "buf", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "fileobj", ".", "close", "(", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "img_array", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_array", "=", "np", ".", "pad", "(", "img_array", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "input_x", "=", "img_array", "\n", "\n", "input_x", "=", "input_x", ".", "reshape", "(", "1", ",", "new_h", ",", "new_w", ",", "3", ")", "\n", "input_x", "=", "input_x", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "gah1", ",", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "gah1", ",", "self", ".", "sigma_z", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_x", ":", "input_x", "}", ")", "\n", "\n", "gah1", "=", "np", ".", "pad", "(", "gah1", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah2", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah2", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah1", ":", "gah1", "}", ")", "\n", "\n", "gah2", "=", "np", ".", "pad", "(", "gah2", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah3", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah3", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah2", ":", "gah2", "}", ")", "\n", "\n", "gah3", "=", "np", ".", "pad", "(", "gah3", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "y_hat", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "y_hat", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah3", ":", "gah3", "}", ")", "\n", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'symmetric'", ")", "\n", "z_hat", ",", "c_prime", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "z_hat", ",", "self", ".", "c_prime", "]", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "\n", "\n", "\n", "############### encode zhat ####################################", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "bitout", "=", "arithmeticcoding", ".", "BitOutputStream", "(", "open", "(", "compressed_file_path", ",", "\"ab+\"", ")", ")", "\n", "enc", "=", "arithmeticcoding", ".", "ArithmeticEncoder", "(", "bitout", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "np", ".", "int", "(", "z_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "############### encode yhat ####################################", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_basemodel.Tester_basemodel.decode": [[160, 245], ["open", "open.read", "open.read", "numpy.frombuffer", "int", "int", "int", "int", "tester_basemodel.Tester_basemodel.sess.run", "arithmeticcoding.BitInputStream", "arithmeticcoding.ArithmeticDecoder", "utils.printProgressBar", "range", "tester_basemodel.Tester_basemodel.sess.run", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.BitInputStream.close", "tester_basemodel.Tester_basemodel.sess.run", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "tester_basemodel.Tester_basemodel.astype", "math.ceil", "math.ceil", "range", "tester_basemodel.Tester_basemodel.extractor_prime", "tester_basemodel.Tester_basemodel.extractor_doubleprime", "numpy.concatenate", "tester_basemodel.Tester_basemodel.sess.run", "range", "numpy.zeros", "arithmeticcoding.ArithmeticDecoder.read", "arithmeticcoding.ModelFrequencyTable", "arithmeticcoding.ArithmeticDecoder.read", "print", "print"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "\n", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "np", ".", "int", "(", "y_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "", "", "", "enc", ".", "write", "(", "freq", ",", "512", ")", "\n", "enc", ".", "finish", "(", ")", "\n", "bitout", ".", "close", "(", ")", "\n", "\n", "return", "compressed_file_path", "\n", "\n", "\n", "", "def", "decode", "(", "self", ",", "compressed_file", ",", "recon_path", ")", ":", "# with TOP N dimensions", "\n", "        ", "fileobj", "=", "open", "(", "compressed_file", ",", "mode", "=", "'rb'", ")", "\n", "fileobj", ".", "read", "(", "1", ")", "#dummy", "\n", "buf", "=", "fileobj", ".", "read", "(", "4", ")", "\n", "arr", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "w", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w_1", "=", "int", "(", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_1", "=", "int", "(", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_1", "=", "math", ".", "floor", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "+", "pad_w_1", "\n", "res_h_1", "=", "math", ".", "floor", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "+", "pad_h_1", "\n", "\n", "pad_w_2", "=", "int", "(", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_2", "=", "int", "(", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_2", "=", "math", ".", "floor", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "+", "pad_w_2", "\n", "res_h_2", "=", "math", ".", "floor", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "+", "pad_h_2", "\n", "\n", "pad_w_3", "=", "int", "(", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_3", "=", "int", "(", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_3", "=", "math", ".", "floor", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "+", "pad_w_3", "\n", "res_h_3", "=", "math", ".", "floor", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "+", "pad_h_3", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "sigma_z", ")", "\n", "y_hat", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "M", ",", "int", "(", "float", "(", "res_h_3", ")", "/", "2.0", ")", ",", "int", "(", "float", "(", "res_w_3", ")", "/", "2.0", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "z_hat", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "z_hat", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "# NCHW", "\n", "\n", "############### decode zhat ####################################", "\n", "bitin", "=", "arithmeticcoding", ".", "BitInputStream", "(", "fileobj", ")", "\n", "dec", "=", "arithmeticcoding", ".", "ArithmeticDecoder", "(", "bitin", ")", "\n", "\n", "z_hat", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive": [[19, 74], ["os.path.dirname", "os.path.exists", "os.makedirs", "requests.Session", "print", "sys.stdout.flush", "requests.Session.get", "google_drive_downloader.GoogleDriveDownloader._get_confirm_token", "google_drive_downloader.GoogleDriveDownloader._save_response_content", "print", "os.path.exists", "requests.Session.get", "print", "sys.stdout.flush", "print", "zipfile.ZipFile", "z.extractall", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._get_confirm_token", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._save_response_content", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get"], ["@", "staticmethod", "\n", "def", "download_file_from_google_drive", "(", "file_id", ",", "dest_path", ",", "overwrite", "=", "False", ",", "unzip", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Downloads a shared file from google drive into a given folder.\n        Optionally unzips it.\n\n        Parameters\n        ----------\n        file_id: str\n            the file identifier.\n            You can obtain it from the sharable link.\n        dest_path: str\n            the destination where to save the downloaded file.\n            Must be a path (for example: './downloaded_file.txt')\n        overwrite: bool\n            optional, if True forces re-download and overwrite.\n        unzip: bool\n            optional, if True unzips a file.\n            If the file is not a zip file, ignores it.\n\n        Returns\n        -------\n        None\n        \"\"\"", "\n", "\n", "destination_directory", "=", "dirname", "(", "dest_path", ")", "\n", "if", "not", "exists", "(", "destination_directory", ")", ":", "\n", "            ", "makedirs", "(", "destination_directory", ")", "\n", "\n", "", "if", "not", "exists", "(", "dest_path", ")", "or", "overwrite", ":", "\n", "\n", "            ", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "print", "(", "'Downloading {} into {}... '", ".", "format", "(", "file_id", ",", "dest_path", ")", ",", "end", "=", "''", ")", "\n", "stdout", ".", "flush", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "GoogleDriveDownloader", ".", "DOWNLOAD_URL", ",", "params", "=", "{", "'id'", ":", "file_id", "}", ",", "stream", "=", "True", ")", "\n", "\n", "token", "=", "GoogleDriveDownloader", ".", "_get_confirm_token", "(", "response", ")", "\n", "if", "token", ":", "\n", "                ", "params", "=", "{", "'id'", ":", "file_id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "GoogleDriveDownloader", ".", "DOWNLOAD_URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "GoogleDriveDownloader", ".", "_save_response_content", "(", "response", ",", "dest_path", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n", "if", "unzip", ":", "\n", "                ", "try", ":", "\n", "                    ", "print", "(", "'Unzipping...'", ",", "end", "=", "''", ")", "\n", "stdout", ".", "flush", "(", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "dest_path", ",", "'r'", ")", "as", "z", ":", "\n", "                        ", "z", ".", "extractall", "(", "destination_directory", ")", "\n", "", "print", "(", "'Done.'", ")", "\n", "", "except", "zipfile", ".", "BadZipfile", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Ignoring `unzip` since \"{}\" does not look like a valid zip file'", ".", "format", "(", "file_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._get_confirm_token": [[75, 81], ["response.cookies.items", "key.startswith"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "_get_confirm_token", "(", "response", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "                ", "return", "value", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader._save_response_content": [[82, 88], ["open", "response.iter_content", "f.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "@", "staticmethod", "\n", "def", "_save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "        ", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "response", ".", "iter_content", "(", "GoogleDriveDownloader", ".", "CHUNK_SIZE", ")", ":", "\n", "                ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.encode.encode": [[7, 39], ["utils.downloadModels", "print", "tester_hybridmodel.Tester_hybridmodel.encode", "print", "print", "sys.exit", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "print", "sys.exit", "str", "str", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.downloadModels", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.encode"], ["import", "os", "\n", "import", "numpy", "as", "np", "\n", "import", "multiprocessing", "\n", "from", "PIL", "import", "Image", "\n", "\n", "\n", "def", "encode_list", "(", "model_type", ",", "input_path", ",", "quality_level", ",", "no_proc", "=", "1", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "input_path", ")", "\n", "\n", "dir", "=", "'./compressed_files/{}/{}'", ".", "format", "(", "model_type", ",", "quality_level", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "bpp_list", "=", "[", "]", "\n", "filesize_list", "=", "[", "]", "\n", "\n", "jobs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "\n", "for", "filepath", "in", "file_list", ":", "\n", "        ", "print", "(", "str", "(", "idx", "+", "1", ")", "+", "\":\"", "+", "filepath", ")", "\n", "compressed_file_path", "=", "'{}/{}.cmp'", ".", "format", "(", "dir", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filepath", ")", ")", "[", "0", "]", ")", "\n", "idx", "+=", "1", "\n", "# if not os.path.isfile(compressed_file_path):", "\n", "process", "=", "multiprocessing", ".", "Process", "(", "target", "=", "encode", ",", "args", "=", "(", "model_type", ",", "filepath", ",", "compressed_file_path", ",", "quality_level", ")", ")", "\n", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "# decode(filepath)", "\n", "", "elif", "idx", "%", "no_proc", "==", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "join", "(", ")", "\n", "", "jobs", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.decode.main": [[8, 39], ["utils.downloadModels", "open", "open.read", "numpy.frombuffer", "int", "open.close", "print", "tester_hybridmodel.Tester_hybridmodel.decode", "print", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str", "tester_basemodel.Tester_basemodel", "tester_hybridmodel.Tester_hybridmodel", "str", "str"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.downloadModels", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.decode"], ["import", "multiprocessing", "\n", "import", "os", "\n", "\n", "def", "decode_list", "(", "compressed_file_path", ",", "no_proc", "=", "1", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "compressed_file_path", ")", "\n", "jobs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "filepath", "in", "file_list", ":", "\n", "        ", "process", "=", "multiprocessing", ".", "Process", "(", "target", "=", "decode", ",", "args", "=", "(", "filepath", ",", ")", ")", "\n", "\n", "idx", "+=", "1", "\n", "print", "(", "idx", ")", "\n", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "# decode(filepath)", "\n", "", "elif", "idx", "%", "no_proc", "==", "0", ":", "\n", "            ", "jobs", ".", "append", "(", "process", ")", "\n", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "                ", "j", ".", "join", "(", ")", "\n", "", "jobs", "=", "[", "]", "\n", "\n", "", "", "if", "idx", "%", "no_proc", "!=", "0", ":", "\n", "        ", "for", "j", "in", "jobs", ":", "\n", "            ", "j", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "\n", "            ", "j", ".", "join", "(", ")", "\n", "\n", "\n", "", "", "", "def", "decode", "(", "compressed_file_path", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.__init__": [[42, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# Low end of this arithmetic coder's current range. Conceptually has an infinite number of trailing 0s.", "\n", "        ", "self", ".", "low", "=", "0", "\n", "# High end of this arithmetic coder's current range. Conceptually has an infinite number of trailing 1s.", "\n", "self", ".", "high", "=", "ArithmeticCoderBase", ".", "MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.update": [[60, 103], ["freqs.get_total", "freqs.get_low", "freqs.get_high", "AssertionError", "AssertionError", "range", "ValueError", "ValueError", "arithmeticcoding.ArithmeticCoderBase.shift", "arithmeticcoding.ArithmeticCoderBase.underflow", "print", "print", "print", "print", "print", "str", "str", "str", "str", "freqs.get_low", "freqs.get_high"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.shift", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.underflow", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high"], ["", "def", "update", "(", "self", ",", "freqs", ",", "symbol", ")", ":", "\n", "# State check", "\n", "        ", "low", "=", "self", ".", "low", "\n", "high", "=", "self", ".", "high", "\n", "if", "low", ">=", "high", "or", "(", "low", "&", "ArithmeticCoderBase", ".", "MASK", ")", "!=", "low", "or", "(", "high", "&", "ArithmeticCoderBase", ".", "MASK", ")", "!=", "high", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Low or high out of range\"", ")", "\n", "", "range_", "=", "high", "-", "low", "+", "1", "\n", "if", "not", "(", "ArithmeticCoderBase", ".", "MIN_RANGE", "<=", "range_", "<=", "ArithmeticCoderBase", ".", "MAX_RANGE", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Range out of range\"", ")", "\n", "\n", "# Frequency table values check", "\n", "", "total", "=", "freqs", ".", "get_total", "(", ")", "\n", "symlow", "=", "freqs", ".", "get_low", "(", "symbol", ")", "\n", "symhigh", "=", "freqs", ".", "get_high", "(", "symbol", ")", "\n", "if", "symlow", "==", "symhigh", ":", "\n", "            ", "for", "idx", "in", "range", "(", "symbol", "-", "20", ",", "symbol", "+", "20", ")", ":", "\n", "                ", "print", "(", "\"--------------------\"", ")", "\n", "print", "(", "\"symbol:\"", "+", "str", "(", "idx", ")", ")", "\n", "print", "(", "\"symlow:\"", "+", "str", "(", "freqs", ".", "get_low", "(", "idx", ")", ")", ")", "\n", "print", "(", "\"symhigh:\"", "+", "str", "(", "freqs", ".", "get_high", "(", "idx", ")", ")", ")", "\n", "print", "(", "\"--------------------\"", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Symbol has zero frequency. symbol:\"", "+", "str", "(", "symbol", ")", ")", "\n", "", "if", "total", ">", "ArithmeticCoderBase", ".", "MAX_TOTAL", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot code symbol because total is too large\"", ")", "\n", "\n", "# Update range", "\n", "", "newlow", "=", "low", "+", "symlow", "*", "range_", "//", "total", "\n", "newhigh", "=", "low", "+", "symhigh", "*", "range_", "//", "total", "-", "1", "\n", "self", ".", "low", "=", "newlow", "\n", "self", ".", "high", "=", "newhigh", "\n", "\n", "# While the highest bits are equal", "\n", "while", "(", "(", "self", ".", "low", "^", "self", ".", "high", ")", "&", "ArithmeticCoderBase", ".", "TOP_MASK", ")", "==", "0", ":", "\n", "            ", "self", ".", "shift", "(", ")", "\n", "self", ".", "low", "=", "(", "self", ".", "low", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", "\n", "self", ".", "high", "=", "(", "(", "self", ".", "high", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", ")", "|", "1", "\n", "\n", "# While the second highest bit of low is 1 and the second highest bit of high is 0", "\n", "", "while", "(", "self", ".", "low", "&", "~", "self", ".", "high", "&", "ArithmeticCoderBase", ".", "SECOND_MASK", ")", "!=", "0", ":", "\n", "            ", "self", ".", "underflow", "(", ")", "\n", "self", ".", "low", "=", "(", "self", ".", "low", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", "\n", "self", ".", "high", "=", "(", "(", "self", ".", "high", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", ")", "|", "ArithmeticCoderBase", ".", "TOP_MASK", "|", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.shift": [[105, 107], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "shift", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.underflow": [[109, 111], ["NotImplementedError"], "methods", ["None"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.__init__": [[116, 122], ["arithmeticcoding.ArithmeticCoderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bitout", ")", ":", "\n", "        ", "super", "(", "ArithmeticEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The underlying bit output stream.", "\n", "self", ".", "output", "=", "bitout", "\n", "# Number of saved underflow bits. This value can grow without bound.", "\n", "self", ".", "num_underflow", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.write": [[125, 129], ["arithmeticcoding.ArithmeticEncoder.update"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.update"], ["", "def", "write", "(", "self", ",", "freqs", ",", "symbol", ")", ":", "\n", "# if not isinstance(freqs, CheckedFrequencyTable):", "\n", "#     freqs = CheckedFrequencyTable(freqs)", "\n", "        ", "self", ".", "update", "(", "freqs", ",", "symbol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.finish": [[133, 135], ["arithmeticcoding.ArithmeticEncoder.output.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "self", ".", "output", ".", "write", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.shift": [[136, 144], ["arithmeticcoding.ArithmeticEncoder.output.write", "range", "arithmeticcoding.ArithmeticEncoder.output.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "shift", "(", "self", ")", ":", "\n", "        ", "bit", "=", "self", ".", "low", ">>", "(", "ArithmeticCoderBase", ".", "STATE_SIZE", "-", "1", ")", "\n", "self", ".", "output", ".", "write", "(", "bit", ")", "\n", "\n", "# Write out the saved underflow bits", "\n", "for", "i", "in", "range", "(", "self", ".", "num_underflow", ")", ":", "\n", "            ", "self", ".", "output", ".", "write", "(", "bit", "^", "1", ")", "\n", "", "self", ".", "num_underflow", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.underflow": [[145, 147], ["None"], "methods", ["None"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_underflow", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.__init__": [[153, 161], ["arithmeticcoding.ArithmeticCoderBase.__init__", "range", "arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.__init__", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["    ", "def", "__init__", "(", "self", ",", "bitin", ")", ":", "\n", "        ", "super", "(", "ArithmeticDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The underlying bit input stream.", "\n", "self", ".", "input", "=", "bitin", "\n", "# The current raw code bits being buffered, which is always in the range [low, high].", "\n", "self", ".", "code", "=", "0", "\n", "for", "i", "in", "range", "(", "ArithmeticCoderBase", ".", "STATE_SIZE", ")", ":", "\n", "            ", "self", ".", "code", "=", "self", ".", "code", "<<", "1", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read": [[164, 221], ["freqs.get_total", "int", "freqs.get_symbol_limit", "arithmeticcoding.ArithmeticDecoder.update", "ValueError", "math.floor", "print", "print", "print", "print", "math.floor", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "AssertionError", "math.floor", "freqs.get_low", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "freqs.get_low", "freqs.get_high", "freqs.get_low", "freqs.get_high", "freqs.get_symbol_limit", "freqs.get_low", "freqs.get_high"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticCoderBase.update", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high"], ["", "", "def", "read", "(", "self", ",", "freqs", ")", ":", "\n", "# if not isinstance(freqs, CheckedFrequencyTable):", "\n", "#     freqs = CheckedFrequencyTable(freqs)", "\n", "\n", "# Translate from coding range scale to frequency table scale", "\n", "        ", "total", "=", "freqs", ".", "get_total", "(", ")", "\n", "if", "total", ">", "ArithmeticCoderBase", ".", "MAX_TOTAL", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot decode symbol because total is too large\"", ")", "\n", "", "range", "=", "self", ".", "high", "-", "self", ".", "low", "+", "1", "\n", "offset", "=", "self", ".", "code", "-", "self", ".", "low", "\n", "# value = ((offset + 1) * total - 1) // range", "\n", "value", "=", "int", "(", "math", ".", "floor", "(", "(", "offset", "/", "range", ")", "*", "total", "+", "(", "total", "/", "range", ")", "-", "(", "1", "/", "range", ")", ")", ")", "\n", "\n", "if", "not", "(", "math", ".", "floor", "(", "(", "value", "/", "total", ")", "*", "(", "range", "/", "total", ")", ")", "<=", "offset", ")", ":", "\n", "            ", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "", "assert", "math", ".", "floor", "(", "(", "value", "/", "total", ")", "*", "(", "range", "/", "total", ")", ")", "<=", "offset", "\n", "# value * range // total <= offset", "\n", "\n", "if", "not", "(", "0", "<=", "value", "<", "total", ")", ":", "\n", "            ", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "", "assert", "0", "<=", "value", "<", "total", "\n", "\n", "# A kind of binary search. Find highest symbol such that freqs.get_low(symbol) <= value.", "\n", "start", "=", "0", "\n", "end", "=", "freqs", ".", "get_symbol_limit", "(", ")", "\n", "while", "end", "-", "start", ">", "1", ":", "\n", "            ", "middle", "=", "(", "start", "+", "end", ")", ">>", "1", "\n", "if", "freqs", ".", "get_low", "(", "middle", ")", ">", "value", ":", "\n", "                ", "end", "=", "middle", "\n", "", "else", ":", "\n", "                ", "start", "=", "middle", "\n", "", "", "assert", "start", "+", "1", "==", "end", "\n", "\n", "symbol", "=", "start", "\n", "if", "not", "(", "freqs", ".", "get_low", "(", "symbol", ")", "*", "range", "//", "total", "<=", "offset", "<", "freqs", ".", "get_high", "(", "symbol", ")", "*", "range", "//", "total", ")", ":", "\n", "            ", "print", "(", "'symbol:'", "+", "str", "(", "symbol", ")", ")", "\n", "print", "(", "'freqs.get_symbol_limit():'", "+", "str", "(", "freqs", ".", "get_symbol_limit", "(", ")", ")", ")", "\n", "print", "(", "'freqs.get_low(symbol):'", "+", "str", "(", "freqs", ".", "get_low", "(", "symbol", ")", ")", ")", "\n", "print", "(", "'freqs.get_high(symbol):'", "+", "str", "(", "freqs", ".", "get_high", "(", "symbol", ")", ")", ")", "\n", "print", "(", "'offset:'", "+", "str", "(", "offset", ")", ")", "\n", "print", "(", "'range:'", "+", "str", "(", "range", ")", ")", "\n", "print", "(", "'value:'", "+", "str", "(", "value", ")", ")", "\n", "print", "(", "'total:'", "+", "str", "(", "total", ")", ")", "\n", "\n", "# assert math.floor((freqs.get_low(symbol) / total) * (range / total)) <= offset < math.floor(", "\n", "#     (freqs.get_high(symbol) / total) * (range / total))", "\n", "", "assert", "freqs", ".", "get_low", "(", "symbol", ")", "*", "range", "//", "total", "<=", "offset", "<", "freqs", ".", "get_high", "(", "symbol", ")", "*", "range", "//", "total", "\n", "self", ".", "update", "(", "freqs", ",", "symbol", ")", "\n", "if", "not", "(", "self", ".", "low", "<=", "self", ".", "code", "<=", "self", ".", "high", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Code out of range\"", ")", "\n", "", "return", "symbol", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.shift": [[222, 224], ["arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["", "def", "shift", "(", "self", ")", ":", "\n", "        ", "self", ".", "code", "=", "(", "(", "self", ".", "code", "<<", "1", ")", "&", "ArithmeticCoderBase", ".", "MASK", ")", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.underflow": [[225, 228], ["arithmeticcoding.ArithmeticDecoder.read_code_bit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit"], ["", "def", "underflow", "(", "self", ")", ":", "\n", "        ", "self", ".", "code", "=", "(", "self", ".", "code", "&", "ArithmeticCoderBase", ".", "TOP_MASK", ")", "|", "(", "\n", "(", "self", ".", "code", "<<", "1", ")", "&", "(", "ArithmeticCoderBase", ".", "MASK", ">>", "1", ")", ")", "|", "self", ".", "read_code_bit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticDecoder.read_code_bit": [[231, 236], ["arithmeticcoding.ArithmeticDecoder.input.read"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read_code_bit", "(", "self", ")", ":", "\n", "        ", "temp", "=", "self", ".", "input", ".", "read", "(", ")", "\n", "if", "temp", "==", "-", "1", ":", "\n", "            ", "temp", "=", "0", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.get_symbol_limit": [[246, 248], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.get": [[250, 252], ["NotImplementedError"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.set": [[255, 257], ["NotImplementedError"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.increment": [[259, 261], ["NotImplementedError"], "methods", ["None"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.get_total": [[264, 266], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.get_low": [[269, 271], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FrequencyTable.get_high": [[274, 276], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.__init__": [[282, 286], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numsyms", ")", ":", "\n", "        ", "if", "numsyms", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of symbols must be positive\"", ")", "\n", "", "self", ".", "numsymbols", "=", "numsyms", "# Total number of symbols, which is at least 1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.get_symbol_limit": [[288, 290], ["None"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "numsymbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.get": [[292, 295], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.get_total": [[298, 300], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "numsymbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.get_low": [[303, 306], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "symbol", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.get_high": [[309, 312], ["arithmeticcoding.FlatFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "symbol", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable._check_symbol": [[314, 319], ["ValueError"], "methods", ["None"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "self", ".", "numsymbols", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.__str__": [[321, 323], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"FlatFrequencyTable={}\"", ".", "format", "(", "self", ".", "numsymbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.set": [[325, 327], ["NotImplementedError"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.FlatFrequencyTable.increment": [[329, 331], ["NotImplementedError"], "methods", ["None"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.__init__": [[343, 364], ["isinstance", "sum", "freqs.get_symbol_limit", "list", "len", "ValueError", "freqs.get", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get"], ["    ", "def", "__init__", "(", "self", ",", "freqs", ")", ":", "\n", "        ", "if", "isinstance", "(", "freqs", ",", "FrequencyTable", ")", ":", "\n", "            ", "numsym", "=", "freqs", ".", "get_symbol_limit", "(", ")", "\n", "self", ".", "frequencies", "=", "[", "freqs", ".", "get", "(", "i", ")", "for", "i", "in", "range", "(", "numsym", ")", "]", "\n", "", "else", ":", "# Assume it is a sequence type", "\n", "            ", "self", ".", "frequencies", "=", "list", "(", "freqs", ")", "# Make copy", "\n", "\n", "# 'frequencies' is a list of the frequency for each symbol.", "\n", "# Its length is at least 1, and each element is non-negative.", "\n", "", "if", "len", "(", "self", ".", "frequencies", ")", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"At least 1 symbol needed\"", ")", "\n", "", "for", "freq", "in", "self", ".", "frequencies", ":", "\n", "            ", "if", "freq", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Negative frequency\"", ")", "\n", "\n", "# Always equal to the sum of 'frequencies'", "\n", "", "", "self", ".", "total", "=", "sum", "(", "self", ".", "frequencies", ")", "\n", "\n", "# cumulative[i] is the sum of 'frequencies' from 0 (inclusive) to i (exclusive).", "\n", "# Initialized lazily. When it is not None, the data is valid.", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.get_symbol_limit": [[366, 368], ["len"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frequencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.get": [[370, 373], ["arithmeticcoding.SimpleFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "return", "self", ".", "frequencies", "[", "symbol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.set": [[376, 385], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "freq", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Negative frequency\"", ")", "\n", "", "temp", "=", "self", ".", "total", "-", "self", ".", "frequencies", "[", "symbol", "]", "\n", "assert", "temp", ">=", "0", "\n", "self", ".", "total", "=", "temp", "+", "freq", "\n", "self", ".", "frequencies", "[", "symbol", "]", "=", "freq", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.increment": [[387, 392], ["arithmeticcoding.SimpleFrequencyTable._check_symbol"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "self", ".", "total", "+=", "1", "\n", "self", ".", "frequencies", "[", "symbol", "]", "+=", "1", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.get_total": [[395, 397], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.get_low": [[400, 405], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "arithmeticcoding.SimpleFrequencyTable._init_cumulative"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._init_cumulative"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "self", ".", "cumulative", "is", "None", ":", "\n", "            ", "self", ".", "_init_cumulative", "(", ")", "\n", "", "return", "self", ".", "cumulative", "[", "symbol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.get_high": [[408, 413], ["arithmeticcoding.SimpleFrequencyTable._check_symbol", "arithmeticcoding.SimpleFrequencyTable._init_cumulative"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._init_cumulative"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "if", "self", ".", "cumulative", "is", "None", ":", "\n", "            ", "self", ".", "_init_cumulative", "(", ")", "\n", "", "return", "self", ".", "cumulative", "[", "symbol", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._init_cumulative": [[415, 423], ["cumul.append"], "methods", ["None"], ["", "def", "_init_cumulative", "(", "self", ")", ":", "\n", "        ", "cumul", "=", "[", "0", "]", "\n", "sum", "=", "0", "\n", "for", "freq", "in", "self", ".", "frequencies", ":", "\n", "            ", "sum", "+=", "freq", "\n", "cumul", ".", "append", "(", "sum", ")", "\n", "", "assert", "sum", "==", "self", ".", "total", "\n", "self", ".", "cumulative", "=", "cumul", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable._check_symbol": [[425, 430], ["len", "ValueError"], "methods", ["None"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "len", "(", "self", ".", "frequencies", ")", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.SimpleFrequencyTable.__str__": [[433, 438], ["enumerate"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "result", "=", "\"\"", "\n", "for", "(", "i", ",", "freq", ")", "in", "enumerate", "(", "self", ".", "frequencies", ")", ":", "\n", "            ", "result", "+=", "\"{}\\t{}\\n\"", ".", "format", "(", "i", ",", "freq", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.__init__": [[443, 446], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "freqtab", ")", ":", "\n", "# The underlying frequency table that holds the data", "\n", "        ", "self", ".", "freqtable", "=", "freqtab", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.get_symbol_limit": [[447, 452], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get_symbol_limit", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get_symbol_limit", "(", ")", "\n", "if", "result", "<=", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Non-positive symbol limit\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.get": [[453, 460], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "AssertionError", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get", "(", "symbol", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "", "if", "result", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Negative symbol frequency\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.get_total": [[461, 466], ["arithmeticcoding.CheckedFrequencyTable.freqtable.get_total", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "freqtable", ".", "get_total", "(", ")", "\n", "if", "result", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Negative total frequency\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.get_low": [[467, 477], ["arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "AssertionError", "AssertionError", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_total"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "low", "=", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "high", "=", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "if", "not", "(", "0", "<=", "low", "<=", "high", "<=", "self", ".", "freqtable", ".", "get_total", "(", ")", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\"Symbol low cumulative frequency out of range\"", ")", "\n", "", "return", "low", "\n", "", "else", ":", "\n", "            ", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.get_high": [[478, 488], ["arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_low", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_high", "AssertionError", "AssertionError", "arithmeticcoding.CheckedFrequencyTable.freqtable.get_total"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total"], ["", "", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "low", "=", "self", ".", "freqtable", ".", "get_low", "(", "symbol", ")", "\n", "high", "=", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "if", "not", "(", "0", "<=", "low", "<=", "high", "<=", "self", ".", "freqtable", ".", "get_total", "(", ")", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\"Symbol high cumulative frequency out of range\"", ")", "\n", "", "return", "high", "\n", "", "else", ":", "\n", "            ", "self", ".", "freqtable", ".", "get_high", "(", "symbol", ")", "\n", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.__str__": [[489, 491], ["str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"CheckFrequencyTable (\"", "+", "str", "(", "self", ".", "freqtable", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.set": [[492, 496], ["arithmeticcoding.CheckedFrequencyTable.freqtable.set", "AssertionError", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.set", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "def", "set", "(", "self", ",", "symbol", ",", "freq", ")", ":", "\n", "        ", "self", ".", "freqtable", ".", "set", "(", "symbol", ",", "freq", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", "or", "freq", "<", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.increment": [[497, 501], ["arithmeticcoding.CheckedFrequencyTable.freqtable.increment", "arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable.increment", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range"], ["", "", "def", "increment", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "freqtable", ".", "increment", "(", "symbol", ")", "\n", "if", "not", "self", ".", "_is_symbol_in_range", "(", "symbol", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"ValueError expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.CheckedFrequencyTable._is_symbol_in_range": [[502, 504], ["arithmeticcoding.CheckedFrequencyTable.get_symbol_limit"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "", "def", "_is_symbol_in_range", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "return", "0", "<=", "symbol", "<", "self", ".", "get_symbol_limit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.__init__": [[519, 538], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu_val", "=", "0", ",", "sigma_val", "=", "1", ")", ":", "\n", "        ", "self", ".", "mul_factor", "=", "10000000", "\n", "self", ".", "num_symbols", "=", "513", "\n", "self", ".", "EOF", "=", "self", ".", "num_symbols", "-", "1", "\n", "\n", "self", ".", "mu_val", "=", "mu_val", "\n", "self", ".", "sigma_val", "=", "sigma_val", "\n", "\n", "# self.TINY =  1e-2", "\n", "self", ".", "TINY", "=", "1e-10", "\n", "\n", "# print(\"mu_val: \" + str(mu_val))", "\n", "# print(\"sigma_val: \" + str(sigma_val))", "\n", "# Always equal to the sum of 'frequencies'", "\n", "self", ".", "total", "=", "self", ".", "mul_factor", "+", "513", "\n", "\n", "# cumulative[i] is the sum of 'frequencies' from 0 (inclusive) to i (exclusive).", "\n", "# Initialized lazily. When it is not None, the data is valid.", "\n", "self", ".", "cumulative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.set_mu": [[539, 541], ["None"], "methods", ["None"], ["", "def", "set_mu", "(", "self", ",", "mu_val", ")", ":", "\n", "        ", "self", ".", "mu_val", "=", "mu_val", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.set_sigma": [[542, 544], ["None"], "methods", ["None"], ["", "def", "set_sigma", "(", "self", ",", "sigma_val", ")", ":", "\n", "        ", "self", ".", "sigma_val", "=", "sigma_val", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit": [[546, 548], ["None"], "methods", ["None"], ["", "def", "get_symbol_limit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get": [[550, 561], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "\n", "if", "symbol", "==", "self", ".", "EOF", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "c2", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "symbol", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c1", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "symbol", "-", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "freq", "=", "int", "(", "math", ".", "floor", "(", "(", "c2", "-", "c1", ")", "*", "self", ".", "mul_factor", ")", "+", "1", ")", "\n", "\n", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_total": [[583, 585], ["None"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_low": [[588, 593], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_low", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "c", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "(", "symbol", "-", "1", ")", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c", "=", "int", "(", "math", ".", "floor", "(", "c", "*", "self", ".", "mul_factor", ")", "+", "symbol", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_high": [[596, 605], ["arithmeticcoding.ModelFrequencyTable._check_symbol", "int", "scipy.special.erf", "math.floor"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol"], ["", "def", "get_high", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "self", ".", "_check_symbol", "(", "symbol", ")", "\n", "c", "=", "0.5", "*", "(", "1", "+", "scipy", ".", "special", ".", "erf", "(", "(", "(", "symbol", ")", "+", "0.5", "-", "self", ".", "mu_val", ")", "/", "(", "(", "self", ".", "sigma_val", "+", "self", ".", "TINY", ")", "*", "2", "**", "0.5", ")", ")", ")", "\n", "c", "=", "int", "(", "math", ".", "floor", "(", "c", "*", "self", ".", "mul_factor", ")", "+", "symbol", "+", "1", ")", "\n", "\n", "# if symbol == self.EOF:", "\n", "#     c = c + 1", "\n", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable._check_symbol": [[617, 622], ["arithmeticcoding.ModelFrequencyTable.get_symbol_limit", "ValueError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.get_symbol_limit"], ["", "def", "_check_symbol", "(", "self", ",", "symbol", ")", ":", "\n", "        ", "if", "0", "<=", "symbol", "<", "self", ".", "get_symbol_limit", "(", ")", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Symbol out of range\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ModelFrequencyTable.__str__": [[625, 630], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "result", "=", "\"\"", "\n", "# for (i, freq) in enumerate(self.frequencies):", "\n", "#     result += \"{}\\t{}\\n\".format(i, freq)", "\n", "return", "result", "\n", "###############################################################################################", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.__init__": [[643, 650], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inp", ")", ":", "\n", "# The underlying byte stream to read from", "\n", "        ", "self", ".", "input", "=", "inp", "\n", "# Either in the range [0x00, 0xFF] if bits are available, or -1 if end of stream is reached", "\n", "self", ".", "currentbyte", "=", "0", "\n", "# Number of remaining bits in the current byte, always between 0 and 7 (inclusive)", "\n", "self", ".", "numbitsremaining", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read": [[653, 666], ["arithmeticcoding.BitInputStream.input.read", "len", "ord"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "currentbyte", "==", "-", "1", ":", "\n", "            ", "return", "-", "1", "\n", "", "if", "self", ".", "numbitsremaining", "==", "0", ":", "\n", "            ", "temp", "=", "self", ".", "input", ".", "read", "(", "1", ")", "\n", "if", "len", "(", "temp", ")", "==", "0", ":", "\n", "                ", "self", ".", "currentbyte", "=", "-", "1", "\n", "return", "-", "1", "\n", "", "self", ".", "currentbyte", "=", "temp", "[", "0", "]", "if", "python3", "else", "ord", "(", "temp", ")", "\n", "self", ".", "numbitsremaining", "=", "8", "\n", "", "assert", "self", ".", "numbitsremaining", ">", "0", "\n", "self", ".", "numbitsremaining", "-=", "1", "\n", "return", "(", "self", ".", "currentbyte", ">>", "self", ".", "numbitsremaining", ")", "&", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read_no_eof": [[669, 675], ["arithmeticcoding.BitInputStream.read", "EOFError"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "read_no_eof", "(", "self", ")", ":", "\n", "        ", "result", "=", "self", ".", "read", "(", ")", "\n", "if", "result", "!=", "-", "1", ":", "\n", "            ", "return", "result", "\n", "", "else", ":", "\n", "            ", "raise", "EOFError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.close": [[677, 681], ["arithmeticcoding.BitInputStream.input.close"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "input", ".", "close", "(", ")", "\n", "self", ".", "currentbyte", "=", "-", "1", "\n", "self", ".", "numbitsremaining", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.__init__": [[688, 692], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "out", ")", ":", "\n", "        ", "self", ".", "output", "=", "out", "# The underlying byte stream to write to", "\n", "self", ".", "currentbyte", "=", "0", "# The accumulated bits for the current byte, always in the range [0x00, 0xFF]", "\n", "self", ".", "numbitsfilled", "=", "0", "# Number of accumulated bits in the current byte, always between 0 and 7 (inclusive)", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write": [[694, 704], ["ValueError", "arithmeticcoding.BitOutputStream.output.write", "bytes", "chr"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "write", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "b", "not", "in", "(", "0", ",", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Argument must be 0 or 1\"", ")", "\n", "", "self", ".", "currentbyte", "=", "(", "self", ".", "currentbyte", "<<", "1", ")", "|", "b", "\n", "self", ".", "numbitsfilled", "+=", "1", "\n", "if", "self", ".", "numbitsfilled", "==", "8", ":", "\n", "            ", "towrite", "=", "bytes", "(", "(", "self", ".", "currentbyte", ",", ")", ")", "if", "python3", "else", "chr", "(", "self", ".", "currentbyte", ")", "\n", "self", ".", "output", ".", "write", "(", "towrite", ")", "\n", "self", ".", "currentbyte", "=", "0", "\n", "self", ".", "numbitsfilled", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close": [[708, 712], ["arithmeticcoding.BitOutputStream.output.close", "arithmeticcoding.BitOutputStream.write"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "numbitsfilled", "!=", "0", ":", "\n", "            ", "self", ".", "write", "(", "0", ")", "\n", "", "self", ".", "output", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.__init__": [[11, 30], ["tester_hybridmodel.Tester_hybridmodel.build_model"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.build_model"], ["    ", "def", "__init__", "(", "self", ",", "model_dir", ",", "model_type", ",", "quality_level", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "M1", "=", "192", "\n", "if", "model_type", "==", "0", ":", "#MSE optimized", "\n", "            ", "if", "quality_level", "==", "6", ":", "\n", "                ", "self", ".", "M2", "=", "192", "\n", "", "elif", "quality_level", "==", "7", ":", "\n", "                ", "self", ".", "M2", "=", "228", "\n", "", "elif", "quality_level", "in", "[", "8", ",", "9", "]", ":", "\n", "                ", "self", ".", "M2", "=", "408", "\n", "", "", "elif", "model_type", "==", "1", ":", "#MS-SSIM optimized", "\n", "            ", "if", "quality_level", "in", "[", "6", ",", "7", "]", ":", "\n", "                ", "self", ".", "M2", "=", "192", "\n", "", "elif", "quality_level", "in", "[", "8", ",", "9", "]", ":", "\n", "                ", "self", ".", "M2", "=", "408", "\n", "", "", "self", ".", "M", "=", "self", ".", "M1", "+", "self", ".", "M2", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.load_graph": [[31, 39], ["tensorflow.gfile.GFile", "tensorflow.GraphDef", "tensorflow.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["", "def", "load_graph", "(", "self", ",", "frozen_graph_filename", ")", ":", "\n", "        ", "with", "tf", ".", "gfile", ".", "GFile", "(", "frozen_graph_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"prefix\"", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.build_model": [[40, 62], ["tester_hybridmodel.Tester_hybridmodel.load_graph", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tester_hybridmodel.Tester_hybridmodel.get_tensor_by_name", "tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.load_graph"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "frozen_graph_filename", "=", "self", ".", "model_dir", "+", "\"/\"", "+", "\"saved_model.pb\"", "\n", "graph", "=", "self", ".", "load_graph", "(", "frozen_graph_filename", ")", "\n", "\n", "\n", "\n", "# for verifying", "\n", "# for op in graph.get_operations():", "\n", "#     print(op.name)", "\n", "\n", "self", ".", "recon_image", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/clip_by_value:0'", ")", "\n", "self", ".", "y_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_3:0'", ")", "\n", "self", ".", "input_x", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Placeholder_2:0'", ")", "\n", "self", ".", "h_s_out", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/transpose_8:0'", ")", "\n", "self", ".", "z_hat", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/Round_1:0'", ")", "\n", "self", ".", "sigma_z", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/Abs:0'", ")", "\n", "self", ".", "pred_mean", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_15/strided_slice:0'", ")", "\n", "self", ".", "pred_sigma", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/P_15/Exp:0'", ")", "\n", "self", ".", "concatenated_c_i", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/H/concat_45:0'", ")", "\n", "\n", "self", ".", "gah1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn/truediv:0'", ")", "\n", "self", ".", "gah2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_2/truediv:0'", ")", "\n", "self", ".", "gah3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/E/gdn_3/truediv:0'", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime": [[63, 65], ["None"], "methods", ["None"], ["\n", "self", ".", "gsh1", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn/mul:0'", ")", "\n", "self", ".", "gsh2", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_2/mul:0'", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime": [[66, 75], ["numpy.multiply"], "methods", ["None"], ["self", ".", "gsh3", "=", "graph", ".", "get_tensor_by_name", "(", "'prefix/D/gdn_3/mul:0'", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", "\n", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "config", ")", "\n", "\n", "", "def", "extractor_prime", "(", "self", ",", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", ":", "# with TOP N dimensions", "\n", "        ", "return", "padded_c_prime", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.encode": [[77, 180], ["PIL.Image.open", "open", "numpy.array", "numpy.array.tofile", "numpy.array", "numpy.array.tofile", "open.close", "int", "int", "numpy.asarray", "numpy.pad", "input_x.transpose.transpose.reshape", "input_x.transpose.transpose.transpose", "tester_hybridmodel.Tester_hybridmodel.sess.run", "arithmeticcoding.BitOutputStream", "arithmeticcoding.ArithmeticEncoder", "utils.printProgressBar", "range", "numpy.pad", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ArithmeticEncoder.finish", "arithmeticcoding.BitOutputStream.close", "open", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "math.ceil", "math.ceil", "range", "tester_hybridmodel.Tester_hybridmodel.extractor_prime", "tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "numpy.concatenate", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "range", "numpy.rint", "arithmeticcoding.ArithmeticEncoder.write", "arithmeticcoding.ModelFrequencyTable", "numpy.rint", "arithmeticcoding.ArithmeticEncoder.write", "print", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.ArithmeticEncoder.finish", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["# Masking has no effect on decoding, because unknown variables are already set to zeros.", "\n", "# Therefore, the masking can be skipped in the case of decoding.", "\n", "# We just leave it here just to maintain a simple structure of code.", "\n", "        ", "mask", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "return", "np", ".", "multiply", "(", "padded_y_hat", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "4", ",", "w_idx", ":", "w_idx", "+", "4", "]", ",", "mask", ")", "\n", "\n", "\n", "", "def", "encode", "(", "self", ",", "model_type", ",", "input_path", ",", "compressed_file_path", ",", "quality_level", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "img", "=", "Image", ".", "open", "(", "input_path", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "fileobj", "=", "open", "(", "compressed_file_path", ",", "mode", "=", "'wb'", ")", "\n", "\n", "buf", "=", "quality_level", "<<", "1", "\n", "buf", "=", "buf", "+", "model_type", "\n", "arr", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "arr", "[", "0", "]", "=", "buf", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "arr", ".", "tofile", "(", "fileobj", ")", "\n", "fileobj", ".", "close", "(", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "img_array", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_array", "=", "np", ".", "pad", "(", "img_array", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "input_x", "=", "img_array", "\n", "\n", "input_x", "=", "input_x", ".", "reshape", "(", "1", ",", "new_h", ",", "new_w", ",", "3", ")", "\n", "input_x", "=", "input_x", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "gah1", ",", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "gah1", ",", "self", ".", "sigma_z", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_x", ":", "input_x", "}", ")", "\n", "\n", "gah1", "=", "np", ".", "pad", "(", "gah1", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah1", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah2", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah2", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah1", ":", "gah1", "}", ")", "\n", "\n", "gah2", "=", "np", ".", "pad", "(", "gah2", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah2", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "gah3", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "gah3", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah2", ":", "gah2", "}", ")", "\n", "\n", "gah3", "=", "np", ".", "pad", "(", "gah3", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "1", "]", "%", "2", ")", ",", "(", "0", ",", "gah3", ".", "shape", "[", "2", "]", "%", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "y_hat", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "y_hat", ",", "\n", "feed_dict", "=", "{", "self", ".", "gah3", ":", "gah3", "}", ")", "\n", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'symmetric'", ")", "\n", "z_hat", ",", "h_s_out", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "z_hat", ",", "self", ".", "h_s_out", "]", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "\n", "\n", "# h_s_out, y_hat, z_hat, sigma_z = self.sess.run([self.h_s_out, self.y_hat, self.z_hat, self.sigma_z],", "\n", "#                                                feed_dict={self.input_x: input_x})  # NCHW", "\n", "\n", "############### encode z ####################################", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "bitout", "=", "arithmeticcoding", ".", "BitOutputStream", "(", "open", "(", "compressed_file_path", ",", "\"ab+\"", ")", ")", "\n", "enc", "=", "arithmeticcoding", ".", "ArithmeticEncoder", "(", "bitout", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Encoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "for", "h_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "for", "w_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                    ", "symbol", "=", "np", ".", "rint", "(", "z_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "\n", "# print(symbol)", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "\n", "# enc.write(freq, 512)", "\n", "# enc.finish()", "\n", "# bitout.close()", "\n", "\n", "############### encode y ####################################", "\n", "", "", "", "padded_y1_hat", "=", "np", ".", "pad", "(", "y_hat", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "# bitout = arithmeticcoding.BitOutputStream(open(enc_outputfile, \"wb\"))", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.decode": [[182, 283], ["open", "open.read", "open.read", "numpy.frombuffer", "int", "int", "int", "int", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "arithmeticcoding.BitInputStream", "arithmeticcoding.ArithmeticDecoder", "utils.printProgressBar", "range", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.pad", "utils.printProgressBar", "range", "arithmeticcoding.BitInputStream.close", "tester_hybridmodel.Tester_hybridmodel.sess.run", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "utils.printProgressBar", "arithmeticcoding.ModelFrequencyTable", "range", "utils.printProgressBar", "range", "tester_hybridmodel.Tester_hybridmodel.astype", "math.ceil", "math.ceil", "range", "tester_hybridmodel.Tester_hybridmodel.extractor_prime", "tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "numpy.concatenate", "tester_hybridmodel.Tester_hybridmodel.sess.run", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "range", "numpy.zeros", "arithmeticcoding.ArithmeticDecoder.read", "arithmeticcoding.ModelFrequencyTable", "arithmeticcoding.ArithmeticDecoder.read", "print", "print"], "methods", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.close", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_prime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.tester_hybridmodel.Tester_hybridmodel.extractor_doubleprime", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read", "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitInputStream.read"], ["\n", "c_prime", "=", "h_s_out", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", "\n", "sigma2", "=", "h_s_out", "[", ":", ",", "self", ".", "M1", ":", ",", ":", ",", ":", "]", "\n", "padded_c_prime", "=", "np", ".", "pad", "(", "c_prime", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "h_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "h_idx", "+", "1", ",", "y_hat", ".", "shape", "[", "2", "]", ",", "prefix", "=", "'Encoding y_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "w_idx", "in", "range", "(", "y_hat", ".", "shape", "[", "3", "]", ")", ":", "\n", "                ", "c_prime_i", "=", "self", ".", "extractor_prime", "(", "padded_c_prime", ",", "h_idx", ",", "w_idx", ")", "\n", "c_doubleprime_i", "=", "self", ".", "extractor_doubleprime", "(", "padded_y1_hat", ",", "h_idx", ",", "w_idx", ")", "\n", "concatenated_c_i", "=", "np", ".", "concatenate", "(", "[", "c_doubleprime_i", ",", "c_prime_i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "pred_mean", ",", "pred_sigma", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_mean", ",", "self", ".", "pred_sigma", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "concatenated_c_i", ":", "concatenated_c_i", "}", ")", "\n", "\n", "zero_means", "=", "np", ".", "zeros", "(", "\n", "[", "pred_mean", ".", "shape", "[", "0", "]", ",", "self", ".", "M2", ",", "pred_mean", ".", "shape", "[", "2", "]", ",", "\n", "pred_mean", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "concat_pred_mean", "=", "np", ".", "concatenate", "(", "[", "pred_mean", ",", "zero_means", "]", ",", "axis", "=", "1", ")", "\n", "concat_pred_sigma", "=", "np", ".", "concatenate", "(", "[", "pred_sigma", ",", "sigma2", "[", ":", ",", ":", ",", "h_idx", ":", "h_idx", "+", "1", ",", "w_idx", ":", "w_idx", "+", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "for", "ch_idx", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "                    ", "mu_val", "=", "concat_pred_mean", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "+", "255", "\n", "sigma_val", "=", "concat_pred_sigma", "[", "0", ",", "ch_idx", ",", "0", ",", "0", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n", "\n", "symbol", "=", "np", ".", "rint", "(", "y_hat", "[", "0", ",", "ch_idx", ",", "h_idx", ",", "w_idx", "]", "+", "255", ")", "\n", "if", "symbol", "<", "0", "or", "symbol", ">", "511", ":", "\n", "                        ", "print", "(", "\"symbol range error: \"", "+", "str", "(", "symbol", ")", ")", "\n", "", "enc", ".", "write", "(", "freq", ",", "symbol", ")", "\n", "", "", "", "enc", ".", "write", "(", "freq", ",", "512", ")", "\n", "enc", ".", "finish", "(", ")", "\n", "bitout", ".", "close", "(", ")", "\n", "\n", "return", "compressed_file_path", "\n", "\n", "\n", "", "def", "decode", "(", "self", ",", "compressed_file", ",", "recon_path", ")", ":", "# with TOP N dimensions", "\n", "\n", "        ", "fileobj", "=", "open", "(", "compressed_file", ",", "mode", "=", "'rb'", ")", "\n", "fileobj", ".", "read", "(", "1", ")", "#dummy", "\n", "buf", "=", "fileobj", ".", "read", "(", "4", ")", "\n", "arr", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "w", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "\n", "new_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "w", ")", "/", "2.0", ")", "*", "2", ")", "\n", "new_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "h", ")", "/", "2.0", ")", "*", "2", ")", "\n", "\n", "pad_w_1", "=", "int", "(", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_1", "=", "int", "(", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_1", "=", "math", ".", "floor", "(", "float", "(", "new_w", ")", "/", "2.0", ")", "+", "pad_w_1", "\n", "res_h_1", "=", "math", ".", "floor", "(", "float", "(", "new_h", ")", "/", "2.0", ")", "+", "pad_h_1", "\n", "\n", "pad_w_2", "=", "int", "(", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_2", "=", "int", "(", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_2", "=", "math", ".", "floor", "(", "float", "(", "res_w_1", ")", "/", "2.0", ")", "+", "pad_w_2", "\n", "res_h_2", "=", "math", ".", "floor", "(", "float", "(", "res_h_1", ")", "/", "2.0", ")", "+", "pad_h_2", "\n", "\n", "pad_w_3", "=", "int", "(", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "pad_h_3", "=", "int", "(", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "%", "2", ")", "\n", "res_w_3", "=", "math", ".", "floor", "(", "float", "(", "res_w_2", ")", "/", "2.0", ")", "+", "pad_w_3", "\n", "res_h_3", "=", "math", ".", "floor", "(", "float", "(", "res_h_2", ")", "/", "2.0", ")", "+", "pad_h_3", "\n", "\n", "pad_w", "=", "new_w", "-", "w", "\n", "pad_h", "=", "new_h", "-", "h", "\n", "\n", "sigma_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "sigma_z", ")", "\n", "y_hat", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "M", ",", "int", "(", "float", "(", "res_h_3", ")", "/", "2.0", ")", ",", "int", "(", "float", "(", "res_w_3", ")", "/", "2.0", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_w", "=", "y_hat", ".", "shape", "[", "3", "]", "\n", "y_h", "=", "y_hat", ".", "shape", "[", "2", "]", "\n", "new_y_w", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_w", ")", "/", "4.0", ")", "*", "4", ")", "\n", "new_y_h", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "y_h", ")", "/", "4.0", ")", "*", "4", ")", "\n", "pad_y_w", "=", "new_y_w", "-", "y_w", "\n", "pad_y_h", "=", "new_y_h", "-", "y_h", "\n", "pad_y_hat", "=", "np", ".", "pad", "(", "y_hat", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_y_h", ")", ",", "(", "0", ",", "pad_y_w", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "z_hat", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "z_hat", ",", "feed_dict", "=", "{", "self", ".", "y_hat", ":", "pad_y_hat", "}", ")", "# NCHW", "\n", "\n", "# y_hat, z_hat, sigma_z = self.sess.run([self.y_hat, self.z_hat, self.sigma_z],", "\n", "#                                       feed_dict={", "\n", "#                                           self.input_x: np.zeros((1, 3, padded_h, padded_w))})  # NCHW", "\n", "\n", "padded_y1_hat", "=", "np", ".", "pad", "(", "y_hat", "[", ":", ",", ":", "self", ".", "M1", ",", ":", ",", ":", "]", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "3", ",", "0", ")", ",", "(", "2", ",", "1", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "############### decode zhat ####################################", "\n", "bitin", "=", "arithmeticcoding", ".", "BitInputStream", "(", "fileobj", ")", "\n", "dec", "=", "arithmeticcoding", ".", "ArithmeticDecoder", "(", "bitin", ")", "\n", "\n", "printProgressBar", "(", "0", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "for", "ch_idx", "in", "range", "(", "z_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "printProgressBar", "(", "ch_idx", "+", "1", ",", "z_hat", ".", "shape", "[", "1", "]", ",", "prefix", "=", "'Decoding z_hat:'", ",", "suffix", "=", "'Complete'", ",", "length", "=", "50", ")", "\n", "mu_val", "=", "255", "\n", "sigma_val", "=", "sigma_z", "[", "ch_idx", "]", "\n", "# exp_sigma_val = np.exp(sigma_val)", "\n", "\n", "freq", "=", "arithmeticcoding", ".", "ModelFrequencyTable", "(", "mu_val", ",", "sigma_val", ")", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.printProgressBar": [[6, 25], ["int", "print", "print", "float", "str"], "function", ["None"], ["def", "printProgressBar", "(", "iteration", ",", "total", ",", "prefix", "=", "''", ",", "suffix", "=", "''", ",", "decimals", "=", "1", ",", "length", "=", "100", ",", "fill", "=", "'\u2588'", ")", ":", "\n", "    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        length      - Optional  : character length of bar (Int)\n        fill        - Optional  : bar fill character (Str)\n    \"\"\"", "\n", "percent", "=", "(", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", ")", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filledLength", "=", "int", "(", "length", "*", "iteration", "//", "total", ")", "\n", "bar", "=", "fill", "*", "filledLength", "+", "'-'", "*", "(", "length", "-", "filledLength", ")", "\n", "print", "(", "'\\r%s |%s| %s%% %s'", "%", "(", "prefix", ",", "bar", ",", "percent", ",", "suffix", ")", ",", "end", "=", "'\\r'", ")", "\n", "# Print New Line on Complete", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.downloadModels": [[26, 34], ["os.path.exists", "os.makedirs", "google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive", "os.remove"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive"], ["", "", "def", "downloadModels", "(", ")", ":", "\n", "    ", "if", "not", "exists", "(", "'./models'", ")", ":", "\n", "        ", "makedirs", "(", "'./models'", ")", "\n", "gdd", ".", "download_file_from_google_drive", "(", "file_id", "=", "'1NqIYWOJP4o_JbUl2n2SdxezZNVdpBw5c'", ",", "\n", "dest_path", "=", "'./models/models.zip'", ",", "\n", "unzip", "=", "True", ")", "\n", "remove", "(", "\"./models/models.zip\"", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.utils.save_response_content": [[35, 42], ["open", "response.iter_content", "f.write"], "function", ["home.repos.pwc.inspect_result.JooyoungLeeETRI_CA_Entropy_Model.CA_EntropyModel_Test.arithmeticcoding.BitOutputStream.write"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", ""]]}