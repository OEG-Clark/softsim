{"home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.preprocess": [[15, 57], ["print", "interface.load_train", "interface.load_test", "print", "interface.load_metadata", "print", "Processor", "Processor.construct", "print", "tuple", "tuple", "Processor.process_metadata", "print", "Sampler", "torch.utils.data.DataLoader", "Sampler", "torch.utils.data.DataLoader", "tuple", "tuple", "Processor.preprocess", "Processor.preprocess"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_train", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_test", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.construct", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.process_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess"], ["def", "preprocess", "(", "interface", ",", "args", ")", ":", "\n", "    ", "\"\"\"Helper function for caching preprocessed data\n    \"\"\"", "\n", "print", "(", "'Loading train and dev data'", ")", "\n", "train_examples", "=", "interface", ".", "load_train", "(", ")", "\n", "dev_examples", "=", "interface", ".", "load_test", "(", ")", "\n", "\n", "# load metadata, such as GloVe", "\n", "print", "(", "'Loading metadata'", ")", "\n", "metadata", "=", "interface", ".", "load_metadata", "(", ")", "\n", "\n", "print", "(", "'Constructing processor'", ")", "\n", "processor", "=", "Processor", "(", "**", "args", ".", "__dict__", ")", "\n", "processor", ".", "construct", "(", "train_examples", ",", "metadata", ")", "\n", "\n", "# data loader", "\n", "print", "(", "'Preprocessing datasets and metadata'", ")", "\n", "train_dataset", "=", "tuple", "(", "processor", ".", "preprocess", "(", "example", ")", "for", "example", "in", "train_examples", ")", "\n", "dev_dataset", "=", "tuple", "(", "processor", ".", "preprocess", "(", "example", ")", "for", "example", "in", "dev_examples", ")", "\n", "processed_metadata", "=", "processor", ".", "process_metadata", "(", "metadata", ")", "\n", "\n", "print", "(", "'Creating data loaders'", ")", "\n", "train_sampler", "=", "Sampler", "(", "train_dataset", ",", "'train'", ",", "**", "args", ".", "__dict__", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "processor", ".", "collate", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "dev_sampler", "=", "Sampler", "(", "dev_dataset", ",", "'dev'", ",", "**", "args", ".", "__dict__", ")", "\n", "dev_loader", "=", "DataLoader", "(", "dev_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "processor", ".", "collate", ",", "sampler", "=", "dev_sampler", ")", "\n", "\n", "if", "args", ".", "preload", ":", "\n", "        ", "train_loader", "=", "tuple", "(", "train_loader", ")", "\n", "dev_loader", "=", "tuple", "(", "dev_loader", ")", "\n", "\n", "", "out", "=", "{", "'processor'", ":", "processor", ",", "\n", "'train_dataset'", ":", "train_dataset", ",", "\n", "'dev_dataset'", ":", "dev_dataset", ",", "\n", "'processed_metadata'", ":", "processed_metadata", ",", "\n", "'train_loader'", ":", "train_loader", ",", "\n", "'dev_loader'", ":", "dev_loader", "}", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.train": [[59, 150], ["time.time", "torch.device", "pprint.pprint", "FileInterface", "Model().to", "Model().to.init", "Loss().to", "torch.optim.Adam", "FileInterface.bind", "print", "FileInterface.save_args", "Model().to.train", "range", "FileInterface.cache", "main.preprocess", "enumerate", "Model", "Loss", "Model().to.", "processor.postprocess_batch", "Loss().to.", "float", "float", "torch.optim.Adam.zero_grad", "loss_model.backward", "torch.optim.Adam.step", "Model().to.parameters", "val.to", "numpy.mean", "numpy.mean", "collections.OrderedDict", "print", "train_batch.items", "FileInterface.report", "torch.no_grad", "Model().to.eval", "Loss().to.eval", "zip", "float", "float", "float", "collections.OrderedDict", "print", "Model().to.train", "Loss().to.train", "loss_model.item", "range", "Model().to.", "processor.postprocess_batch", "Loss().to.", "dev_results.extend", "dev_losses.append", "numpy.mean", "numpy.mean", "numpy.mean", "max", "FileInterface.save", "FileInterface.pred", "FileInterface.report", "time.time", "val.to", "loss_model.item", "dev_batch.items", "time.time"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.bind", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save_args", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.train", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.cache", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_batch", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.report", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.train", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.train", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_batch", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.pred", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.report", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "pprint", "(", "args", ".", "__dict__", ")", "\n", "interface", "=", "FileInterface", "(", "**", "args", ".", "__dict__", ")", "\n", "out", "=", "interface", ".", "cache", "(", "preprocess", ",", "args", ")", "if", "args", ".", "cache", "else", "preprocess", "(", "interface", ",", "args", ")", "\n", "processor", "=", "out", "[", "'processor'", "]", "\n", "processed_metadata", "=", "out", "[", "'processed_metadata'", "]", "\n", "train_dataset", "=", "out", "[", "'train_dataset'", "]", "\n", "dev_dataset", "=", "out", "[", "'dev_dataset'", "]", "\n", "train_loader", "=", "out", "[", "'train_loader'", "]", "\n", "dev_loader", "=", "out", "[", "'dev_loader'", "]", "\n", "\n", "model", "=", "Model", "(", "**", "args", ".", "__dict__", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "init", "(", "processed_metadata", ")", "\n", "\n", "loss_model", "=", "Loss", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n", "interface", ".", "bind", "(", "processor", ",", "model", ",", "optimizer", "=", "optimizer", ")", "\n", "\n", "step", "=", "0", "\n", "train_report", ",", "dev_report", "=", "None", ",", "None", "\n", "\n", "print", "(", "'Training'", ")", "\n", "interface", ".", "save_args", "(", "args", ".", "__dict__", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch_idx", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "for", "i", ",", "train_batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "train_batch", "=", "{", "key", ":", "val", ".", "to", "(", "device", ")", "for", "key", ",", "val", "in", "train_batch", ".", "items", "(", ")", "}", "\n", "model_output", "=", "model", "(", "step", "=", "step", ",", "**", "train_batch", ")", "\n", "train_results", "=", "processor", ".", "postprocess_batch", "(", "train_dataset", ",", "train_batch", ",", "model_output", ")", "\n", "train_loss", "=", "loss_model", "(", "step", "=", "step", ",", "**", "model_output", ",", "**", "train_batch", ")", "\n", "train_f1", "=", "float", "(", "np", ".", "mean", "(", "[", "result", "[", "'f1'", "]", "for", "result", "in", "train_results", "]", ")", ")", "\n", "train_em", "=", "float", "(", "np", ".", "mean", "(", "[", "result", "[", "'em'", "]", "for", "result", "in", "train_results", "]", ")", ")", "\n", "\n", "# optimize", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "step", "+=", "1", "\n", "\n", "# report & eval & save", "\n", "if", "step", "%", "args", ".", "report_period", "==", "1", ":", "\n", "                ", "train_report", "=", "OrderedDict", "(", "step", "=", "step", ",", "train_loss", "=", "train_loss", ".", "item", "(", ")", ",", "train_f1", "=", "train_f1", ",", "\n", "train_em", "=", "train_em", ",", "time", "=", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "print", "(", "interface", ".", "report", "(", "**", "train_report", ")", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "eval_save_period", "==", "1", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "loss_model", ".", "eval", "(", ")", "\n", "pred", "=", "{", "}", "\n", "dev_losses", ",", "dev_results", "=", "[", "]", ",", "[", "]", "\n", "for", "dev_batch", ",", "_", "in", "zip", "(", "dev_loader", ",", "range", "(", "args", ".", "eval_steps", ")", ")", ":", "\n", "                        ", "dev_batch", "=", "{", "key", ":", "val", ".", "to", "(", "device", ")", "for", "key", ",", "val", "in", "dev_batch", ".", "items", "(", ")", "}", "\n", "model_output", "=", "model", "(", "**", "dev_batch", ")", "\n", "results", "=", "processor", ".", "postprocess_batch", "(", "dev_dataset", ",", "dev_batch", ",", "model_output", ")", "\n", "\n", "dev_loss", "=", "loss_model", "(", "step", "=", "step", ",", "**", "dev_batch", ",", "**", "model_output", ")", "\n", "\n", "for", "result", "in", "results", ":", "\n", "                            ", "pred", "[", "result", "[", "'id'", "]", "]", "=", "result", "[", "'pred'", "]", "\n", "", "dev_results", ".", "extend", "(", "results", ")", "\n", "dev_losses", ".", "append", "(", "dev_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "dev_loss", "=", "float", "(", "np", ".", "mean", "(", "dev_losses", ")", ")", "\n", "dev_f1", "=", "float", "(", "np", ".", "mean", "(", "[", "result", "[", "'f1'", "]", "for", "result", "in", "dev_results", "]", ")", ")", "\n", "dev_em", "=", "float", "(", "np", ".", "mean", "(", "[", "result", "[", "'em'", "]", "for", "result", "in", "dev_results", "]", ")", ")", "\n", "dev_f1_best", "=", "dev_f1", "if", "dev_report", "is", "None", "else", "max", "(", "dev_f1", ",", "dev_report", "[", "'dev_f1_best'", "]", ")", "\n", "dev_f1_best_step", "=", "step", "if", "dev_report", "is", "None", "or", "dev_f1", ">", "dev_report", "[", "'dev_f1_best'", "]", "else", "dev_report", "[", "\n", "'dev_f1_best_step'", "]", "\n", "\n", "dev_report", "=", "OrderedDict", "(", "step", "=", "step", ",", "dev_loss", "=", "dev_loss", ",", "dev_f1", "=", "dev_f1", ",", "dev_em", "=", "dev_em", ",", "\n", "time", "=", "time", ".", "time", "(", ")", "-", "start_time", ",", "dev_f1_best", "=", "dev_f1_best", ",", "\n", "dev_f1_best_step", "=", "dev_f1_best_step", ")", "\n", "\n", "summary", "=", "False", "\n", "if", "dev_report", "[", "'dev_f1_best_step'", "]", "==", "step", ":", "\n", "                        ", "summary", "=", "True", "\n", "interface", ".", "save", "(", "iteration", "=", "step", ")", "\n", "interface", ".", "pred", "(", "pred", ")", "\n", "", "print", "(", "interface", ".", "report", "(", "summary", "=", "summary", ",", "**", "dev_report", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "loss_model", ".", "train", "(", ")", "\n", "\n", "", "", "if", "step", "==", "args", ".", "train_steps", ":", "\n", "                ", "break", "\n", "", "", "if", "step", "==", "args", ".", "train_steps", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.test": [[152, 196], ["torch.device", "pprint.pprint", "FileInterface", "Model().to", "Model().to.init", "FileInterface.bind", "FileInterface.load", "FileInterface.load_test", "tuple", "Sampler", "torch.utils.data.DataLoader", "print", "FileInterface.cache", "Processor", "FileInterface.load_metadata", "Processor.process_metadata", "torch.no_grad", "Model().to.eval", "enumerate", "FileInterface.pred", "Model", "Processor.preprocess", "zip", "Model().to.", "Processor.postprocess_batch", "print", "range", "val.to", "Processor.get_dump", "FileInterface.dump", "test_batch.items", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.bind", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_test", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.cache", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.process_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.pred", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_batch", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.get_dump", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump"], ["", "", "", "def", "test", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "pprint", "(", "args", ".", "__dict__", ")", "\n", "\n", "interface", "=", "FileInterface", "(", "**", "args", ".", "__dict__", ")", "\n", "# use cache for metadata", "\n", "if", "args", ".", "cache", ":", "\n", "        ", "out", "=", "interface", ".", "cache", "(", "preprocess", ",", "args", ")", "\n", "processor", "=", "out", "[", "'processor'", "]", "\n", "processed_metadata", "=", "out", "[", "'processed_metadata'", "]", "\n", "", "else", ":", "\n", "        ", "processor", "=", "Processor", "(", "**", "args", ".", "__dict__", ")", "\n", "metadata", "=", "interface", ".", "load_metadata", "(", ")", "\n", "processed_metadata", "=", "processor", ".", "process_metadata", "(", "metadata", ")", "\n", "\n", "", "model", "=", "Model", "(", "**", "args", ".", "__dict__", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "init", "(", "processed_metadata", ")", "\n", "interface", ".", "bind", "(", "processor", ",", "model", ")", "\n", "\n", "interface", ".", "load", "(", "args", ".", "iteration", ",", "session", "=", "args", ".", "load_dir", ")", "\n", "\n", "test_examples", "=", "interface", ".", "load_test", "(", ")", "\n", "test_dataset", "=", "tuple", "(", "processor", ".", "preprocess", "(", "example", ")", "for", "example", "in", "test_examples", ")", "\n", "\n", "test_sampler", "=", "Sampler", "(", "test_dataset", ",", "'test'", ",", "**", "args", ".", "__dict__", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "test_sampler", ",", "\n", "collate_fn", "=", "processor", ".", "collate", ")", "\n", "\n", "print", "(", "'Inferencing'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "pred", "=", "{", "}", "\n", "for", "batch_idx", ",", "(", "test_batch", ",", "_", ")", "in", "enumerate", "(", "zip", "(", "test_loader", ",", "range", "(", "args", ".", "eval_steps", ")", ")", ")", ":", "\n", "            ", "test_batch", "=", "{", "key", ":", "val", ".", "to", "(", "device", ")", "for", "key", ",", "val", "in", "test_batch", ".", "items", "(", ")", "}", "\n", "model_output", "=", "model", "(", "**", "test_batch", ")", "\n", "results", "=", "processor", ".", "postprocess_batch", "(", "test_dataset", ",", "test_batch", ",", "model_output", ")", "\n", "if", "batch_idx", "%", "args", ".", "dump_period", "==", "0", ":", "\n", "                ", "dump", "=", "processor", ".", "get_dump", "(", "test_dataset", ",", "test_batch", ",", "model_output", ",", "results", ")", "\n", "interface", ".", "dump", "(", "batch_idx", ",", "dump", ")", "\n", "", "for", "result", "in", "results", ":", "\n", "                ", "pred", "[", "result", "[", "'id'", "]", "]", "=", "result", "[", "'pred'", "]", "\n", "\n", "", "print", "(", "'[%d/%d]'", "%", "(", "batch_idx", "+", "1", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "", "interface", ".", "pred", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.embed": [[198, 255], ["torch.device", "pprint.pprint", "FileInterface", "Model().to", "Model().to.init", "FileInterface.bind", "FileInterface.load", "FileInterface.load_test", "tuple", "Sampler", "torch.utils.data.DataLoader", "print", "FileInterface.cache", "Processor", "FileInterface.load_metadata", "Processor.process_metadata", "torch.no_grad", "Model().to.eval", "enumerate", "print", "FileInterface.archive", "Model", "Processor.preprocess", "zip", "print", "range", "val.to", "Model().to.get_context", "Processor.postprocess_context_batch", "Model().to.get_question", "Processor.postprocess_question_batch", "test_batch.items", "FileInterface.context_emb", "FileInterface.question_emb", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.bind", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_test", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.cache", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.process_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.archive", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.get_context", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_context_batch", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.get_question", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_question_batch", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.context_emb", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.question_emb"], ["", "", "def", "embed", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "pprint", "(", "args", ".", "__dict__", ")", "\n", "\n", "interface", "=", "FileInterface", "(", "**", "args", ".", "__dict__", ")", "\n", "# use cache for metadata", "\n", "if", "args", ".", "cache", ":", "\n", "        ", "out", "=", "interface", ".", "cache", "(", "preprocess", ",", "args", ")", "\n", "processor", "=", "out", "[", "'processor'", "]", "\n", "processed_metadata", "=", "out", "[", "'processed_metadata'", "]", "\n", "", "else", ":", "\n", "        ", "processor", "=", "Processor", "(", "**", "args", ".", "__dict__", ")", "\n", "metadata", "=", "interface", ".", "load_metadata", "(", ")", "\n", "processed_metadata", "=", "processor", ".", "process_metadata", "(", "metadata", ")", "\n", "\n", "", "model", "=", "Model", "(", "**", "args", ".", "__dict__", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "init", "(", "processed_metadata", ")", "\n", "interface", ".", "bind", "(", "processor", ",", "model", ")", "\n", "\n", "interface", ".", "load", "(", "args", ".", "iteration", ",", "session", "=", "args", ".", "load_dir", ")", "\n", "\n", "test_examples", "=", "interface", ".", "load_test", "(", ")", "\n", "test_dataset", "=", "tuple", "(", "processor", ".", "preprocess", "(", "example", ")", "for", "example", "in", "test_examples", ")", "\n", "\n", "test_sampler", "=", "Sampler", "(", "test_dataset", ",", "'test'", ",", "**", "args", ".", "__dict__", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "test_sampler", ",", "\n", "collate_fn", "=", "processor", ".", "collate", ")", "\n", "\n", "print", "(", "'Saving embeddings'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "test_batch", ",", "_", ")", "in", "enumerate", "(", "zip", "(", "test_loader", ",", "range", "(", "args", ".", "eval_steps", ")", ")", ")", ":", "\n", "            ", "test_batch", "=", "{", "key", ":", "val", ".", "to", "(", "device", ")", "for", "key", ",", "val", "in", "test_batch", ".", "items", "(", ")", "}", "\n", "\n", "if", "args", ".", "mode", "==", "'embed'", "or", "args", ".", "mode", "==", "'embed_context'", ":", "\n", "\n", "                ", "context_output", "=", "model", ".", "get_context", "(", "**", "test_batch", ")", "\n", "context_results", "=", "processor", ".", "postprocess_context_batch", "(", "test_dataset", ",", "test_batch", ",", "context_output", ")", "\n", "\n", "for", "id_", ",", "phrases", ",", "matrix", ",", "metadata", "in", "context_results", ":", "\n", "                    ", "if", "not", "args", ".", "metadata", ":", "\n", "                        ", "metadata", "=", "None", "\n", "", "interface", ".", "context_emb", "(", "id_", ",", "phrases", ",", "matrix", ",", "metadata", "=", "metadata", ",", "emb_type", "=", "args", ".", "emb_type", ")", "\n", "\n", "", "", "if", "args", ".", "mode", "==", "'embed'", "or", "args", ".", "mode", "==", "'embed_question'", ":", "\n", "\n", "                ", "question_output", "=", "model", ".", "get_question", "(", "**", "test_batch", ")", "\n", "question_results", "=", "processor", ".", "postprocess_question_batch", "(", "test_dataset", ",", "test_batch", ",", "question_output", ")", "\n", "\n", "for", "id_", ",", "emb", "in", "question_results", ":", "\n", "                    ", "interface", ".", "question_emb", "(", "id_", ",", "emb", ",", "emb_type", "=", "args", ".", "emb_type", ")", "\n", "\n", "", "", "print", "(", "'[%d/%d]'", "%", "(", "batch_idx", "+", "1", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "archive", ":", "\n", "        ", "print", "(", "'Archiving'", ")", "\n", "interface", ".", "archive", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.serve": [[257, 415], ["torch.device", "pprint.pprint", "FileInterface", "Model().to", "Model().to.init", "FileInterface.bind", "FileInterface.load", "FileInterface.cache", "Processor", "FileInterface.load_metadata", "Processor.process_metadata", "torch.no_grad", "Model().to.eval", "Model", "FileInterface.context_load", "zip", "Flask", "CORS", "Flask.route", "Flask.route", "Flask.route", "print", "HTTPServer", "HTTPServer.listen", "IOLoop.instance().start", "range", "embs.append", "phrases.extend", "paras.append", "numpy.concatenate", "faiss.IndexIVFFlat.add", "torch.utils.data.DataLoader", "next", "Model().to.get_question", "Processor.postprocess_question_batch", "main.serve.search"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.bind", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.cache", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.process_metadata", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.context_load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.get_question", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_question_batch"], ["", "", "def", "serve", "(", "args", ")", ":", "\n", "# serve_demo: Load saved embeddings, serve question model. question in, results out.", "\n", "# serve_question: only serve question model. question in, vector out.", "\n", "# serve_context: only serve context model. context in, phrase-vector pairs out.", "\n", "# serve: serve all three.", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "pprint", "(", "args", ".", "__dict__", ")", "\n", "\n", "interface", "=", "FileInterface", "(", "**", "args", ".", "__dict__", ")", "\n", "# use cache for metadata", "\n", "if", "args", ".", "cache", ":", "\n", "        ", "out", "=", "interface", ".", "cache", "(", "preprocess", ",", "args", ")", "\n", "processor", "=", "out", "[", "'processor'", "]", "\n", "processed_metadata", "=", "out", "[", "'processed_metadata'", "]", "\n", "", "else", ":", "\n", "        ", "processor", "=", "Processor", "(", "**", "args", ".", "__dict__", ")", "\n", "metadata", "=", "interface", ".", "load_metadata", "(", ")", "\n", "processed_metadata", "=", "processor", ".", "process_metadata", "(", "metadata", ")", "\n", "\n", "", "model", "=", "Model", "(", "**", "args", ".", "__dict__", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "init", "(", "processed_metadata", ")", "\n", "interface", ".", "bind", "(", "processor", ",", "model", ")", "\n", "\n", "interface", ".", "load", "(", "args", ".", "iteration", ",", "session", "=", "args", ".", "load_dir", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'serve_demo'", ":", "\n", "            ", "phrases", "=", "[", "]", "\n", "paras", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "embs", "=", "[", "]", "\n", "idxs", "=", "[", "]", "\n", "iterator", "=", "interface", ".", "context_load", "(", "metadata", "=", "True", ",", "emb_type", "=", "args", ".", "emb_type", ")", "\n", "for", "_", ",", "(", "cur_phrases", ",", "each_emb", ",", "metadata", ")", "in", "zip", "(", "range", "(", "args", ".", "num_train_mats", ")", ",", "iterator", ")", ":", "\n", "                ", "embs", ".", "append", "(", "each_emb", ")", "\n", "phrases", ".", "extend", "(", "cur_phrases", ")", "\n", "for", "span", "in", "metadata", "[", "'answer_spans'", "]", ":", "\n", "                    ", "results", ".", "append", "(", "[", "len", "(", "paras", ")", ",", "span", "[", "0", "]", ",", "span", "[", "1", "]", "]", ")", "\n", "idxs", ".", "append", "(", "len", "(", "idxs", ")", ")", "\n", "", "paras", ".", "append", "(", "metadata", "[", "'context'", "]", ")", "\n", "", "if", "args", ".", "emb_type", "==", "'dense'", ":", "\n", "                ", "import", "faiss", "\n", "emb", "=", "np", ".", "concatenate", "(", "embs", ",", "0", ")", "\n", "\n", "d", "=", "4", "*", "args", ".", "hidden_size", "*", "args", ".", "num_heads", "\n", "if", "args", ".", "metric", "==", "'ip'", ":", "\n", "                    ", "quantizer", "=", "faiss", ".", "IndexFlatIP", "(", "d", ")", "# Exact Search", "\n", "", "elif", "args", ".", "metric", "==", "'l2'", ":", "\n", "                    ", "quantizer", "=", "faiss", ".", "IndexFlatL2", "(", "d", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", ")", "\n", "\n", "", "if", "args", ".", "nlist", "!=", "args", ".", "nprobe", ":", "\n", "# Approximate Search. nlist > nprobe makes it faster and less accurate", "\n", "                    ", "if", "args", ".", "bpv", "is", "None", ":", "\n", "                        ", "if", "args", ".", "metric", "==", "'ip'", ":", "\n", "                            ", "search_index", "=", "faiss", ".", "IndexIVFFlat", "(", "quantizer", ",", "d", ",", "args", ".", "nlist", ",", "faiss", ".", "METRIC_INNER_PRODUCT", ")", "\n", "", "elif", "args", ".", "metric", "==", "'l2'", ":", "\n", "                            ", "search_index", "=", "faiss", ".", "IndexIVFFlat", "(", "quantizer", ",", "d", ",", "args", ".", "nlist", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "assert", "args", ".", "metric", "==", "'l2'", "# only l2 is supported for product quantization", "\n", "search_index", "=", "faiss", ".", "IndexIVFPQ", "(", "quantizer", ",", "d", ",", "args", ".", "nlist", ",", "args", ".", "bpv", ",", "8", ")", "\n", "", "search_index", ".", "train", "(", "emb", ")", "\n", "", "else", ":", "\n", "                    ", "search_index", "=", "quantizer", "\n", "\n", "", "search_index", ".", "add", "(", "emb", ")", "\n", "for", "cur_phrases", ",", "each_emb", ",", "metadata", "in", "iterator", ":", "\n", "                    ", "phrases", ".", "extend", "(", "cur_phrases", ")", "\n", "for", "span", "in", "metadata", "[", "'answer_spans'", "]", ":", "\n", "                        ", "results", ".", "append", "(", "[", "len", "(", "paras", ")", ",", "span", "[", "0", "]", ",", "span", "[", "1", "]", "]", ")", "\n", "", "paras", ".", "append", "(", "metadata", "[", "'context'", "]", ")", "\n", "search_index", ".", "add", "(", "each_emb", ")", "\n", "\n", "", "if", "args", ".", "nlist", "!=", "args", ".", "nprobe", ":", "\n", "                    ", "search_index", ".", "nprobe", "=", "args", ".", "nprobe", "\n", "\n", "", "def", "search", "(", "emb", ",", "k", ")", ":", "\n", "                    ", "D", ",", "I", "=", "search_index", ".", "search", "(", "emb", ",", "k", ")", "\n", "return", "D", "[", "0", "]", ",", "I", "[", "0", "]", "\n", "\n", "", "", "elif", "args", ".", "emb_type", "==", "'sparse'", ":", "\n", "                ", "assert", "args", ".", "metric", "==", "'l2'", "# currently only l2 is supported (couldn't find a good ip library)", "\n", "import", "pysparnn", ".", "cluster_index", "as", "ci", "\n", "\n", "cp", "=", "ci", ".", "MultiClusterIndex", "(", "embs", ",", "idxs", ")", "\n", "\n", "for", "cur_phrases", ",", "each_emb", ",", "metadata", "in", "iterator", ":", "\n", "                    ", "phrases", ".", "extend", "(", "cur_phrases", ")", "\n", "for", "span", "in", "metadata", "[", "'answer_spans'", "]", ":", "\n", "                        ", "results", ".", "append", "(", "[", "len", "(", "paras", ")", ",", "span", "[", "0", "]", ",", "span", "[", "1", "]", "]", ")", "\n", "", "paras", ".", "append", "(", "metadata", "[", "'context'", "]", ")", "\n", "for", "each_vec", "in", "each_emb", ":", "\n", "                        ", "cp", ".", "insert", "(", "each_vec", ",", "len", "(", "idxs", ")", ")", "\n", "idxs", ".", "append", "(", "len", "(", "idxs", ")", ")", "\n", "\n", "", "", "def", "search", "(", "emb", ",", "k", ")", ":", "\n", "                    ", "return", "zip", "(", "*", "[", "each", "[", "0", "]", "for", "each", "in", "cp", ".", "search", "(", "emb", ",", "k", "=", "k", ")", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "\n", "", "def", "retrieve", "(", "question", ",", "k", ")", ":", "\n", "                ", "example", "=", "{", "'question'", ":", "question", ",", "'id'", ":", "'real'", ",", "'idx'", ":", "0", "}", "\n", "dataset", "=", "(", "processor", ".", "preprocess", "(", "example", ")", ",", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "collate_fn", "=", "processor", ".", "collate", ")", "\n", "batch", "=", "next", "(", "iter", "(", "loader", ")", ")", "\n", "question_output", "=", "model", ".", "get_question", "(", "**", "batch", ")", "\n", "question_results", "=", "processor", ".", "postprocess_question_batch", "(", "dataset", ",", "batch", ",", "question_output", ")", "\n", "id_", ",", "emb", "=", "question_results", "[", "0", "]", "\n", "D", ",", "I", "=", "search", "(", "emb", ",", "k", ")", "\n", "out", "=", "[", "(", "paras", "[", "results", "[", "i", "]", "[", "0", "]", "]", ",", "results", "[", "i", "]", "[", "1", "]", ",", "results", "[", "i", "]", "[", "2", "]", ",", "'%.4r'", "%", "d", ".", "item", "(", ")", ",", ")", "\n", "for", "d", ",", "i", "in", "zip", "(", "D", ",", "I", ")", "]", "\n", "return", "out", "\n", "\n", "", "if", "args", ".", "mem_info", ":", "\n", "                ", "import", "psutil", "\n", "import", "os", "\n", "pid", "=", "os", ".", "getpid", "(", ")", "\n", "py", "=", "psutil", ".", "Process", "(", "pid", ")", "\n", "info", "=", "py", ".", "memory_info", "(", ")", "[", "0", "]", "/", "2.", "**", "30", "\n", "print", "(", "'Memory Use: %.2f GB'", "%", "info", ")", "\n", "\n", "# Demo server. Requires flask and tornado", "\n", "", "from", "flask", "import", "Flask", ",", "request", ",", "jsonify", "\n", "from", "flask_cors", "import", "CORS", "\n", "\n", "from", "tornado", ".", "wsgi", "import", "WSGIContainer", "\n", "from", "tornado", ".", "httpserver", "import", "HTTPServer", "\n", "from", "tornado", ".", "ioloop", "import", "IOLoop", "\n", "\n", "app", "=", "Flask", "(", "__name__", ",", "static_url_path", "=", "'/static'", ")", "\n", "\n", "app", ".", "config", "[", "'JSONIFY_PRETTYPRINT_REGULAR'", "]", "=", "False", "\n", "CORS", "(", "app", ")", "\n", "\n", "@", "app", ".", "route", "(", "'/'", ")", "\n", "def", "index", "(", ")", ":", "\n", "                ", "return", "app", ".", "send_static_file", "(", "'index.html'", ")", "\n", "\n", "", "@", "app", ".", "route", "(", "'/files/<path:path>'", ")", "\n", "def", "static_files", "(", "path", ")", ":", "\n", "                ", "return", "app", ".", "send_static_file", "(", "'files/'", "+", "path", ")", "\n", "\n", "", "@", "app", ".", "route", "(", "'/api'", ",", "methods", "=", "[", "'GET'", "]", ")", "\n", "def", "api", "(", ")", ":", "\n", "                ", "query", "=", "request", ".", "args", "[", "'query'", "]", "\n", "out", "=", "retrieve", "(", "query", ",", "5", ")", "\n", "return", "jsonify", "(", "out", ")", "\n", "\n", "", "print", "(", "'Starting server at %d'", "%", "args", ".", "port", ")", "\n", "http_server", "=", "HTTPServer", "(", "WSGIContainer", "(", "app", ")", ")", "\n", "http_server", ".", "listen", "(", "args", ".", "port", ")", "\n", "IOLoop", ".", "instance", "(", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.main": [[417, 431], ["ArgumentParser", "ArgumentParser.add_arguments", "ArgumentParser.parse_args", "main.train", "main.test", "main.embed", "argument_parser.parse_args.mode.startswith", "main.serve", "Exception"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.add_arguments", "home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.parse_args", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.train", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.test", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.embed", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.main.serve"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "argument_parser", "=", "ArgumentParser", "(", ")", "\n", "argument_parser", ".", "add_arguments", "(", ")", "\n", "args", "=", "argument_parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "        ", "train", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "'test'", ":", "\n", "        ", "test", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "'embed'", "or", "args", ".", "mode", "==", "'embed_context'", "or", "args", ".", "mode", "==", "'embed_question'", ":", "\n", "        ", "embed", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", ".", "startswith", "(", "'serve'", ")", ":", "\n", "        ", "serve", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.evaluate.normalize_answer": [[12, 28], ["evaluate.normalize_answer.white_space_fix"], "function", ["None"], ["def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\b(a|an|the)\\b'", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.evaluate.f1_score": [[30, 41], ["normalize_answer().split", "normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "evaluate.normalize_answer", "evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer"], ["", "def", "f1_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "prediction_tokens", "=", "normalize_answer", "(", "prediction", ")", ".", "split", "(", ")", "\n", "ground_truth_tokens", "=", "normalize_answer", "(", "ground_truth", ")", ".", "split", "(", ")", "\n", "common", "=", "Counter", "(", "prediction_tokens", ")", "&", "Counter", "(", "ground_truth_tokens", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "ground_truth_tokens", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.evaluate.exact_match_score": [[43, 45], ["evaluate.normalize_answer", "evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer"], ["", "def", "exact_match_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "return", "(", "normalize_answer", "(", "prediction", ")", "==", "normalize_answer", "(", "ground_truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.evaluate.metric_max_over_ground_truths": [[47, 53], ["max", "scores_for_ground_truths.append", "evaluate.exact_match_score", "evaluate.f1_score"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.exact_match_score", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.f1_score"], ["", "def", "metric_max_over_ground_truths", "(", "metric_fn", ",", "prediction", ",", "ground_truths", ")", ":", "\n", "    ", "scores_for_ground_truths", "=", "[", "]", "\n", "for", "ground_truth", "in", "ground_truths", ":", "\n", "        ", "score", "=", "metric_fn", "(", "prediction", ",", "ground_truth", ")", "\n", "scores_for_ground_truths", ".", "append", "(", "score", ")", "\n", "", "return", "max", "(", "scores_for_ground_truths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.evaluate.evaluate": [[55, 77], ["list", "evaluate.metric_max_over_ground_truths", "evaluate.metric_max_over_ground_truths", "print", "map"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.metric_max_over_ground_truths"], ["", "def", "evaluate", "(", "dataset", ",", "predictions", ")", ":", "\n", "    ", "f1", "=", "exact_match", "=", "total", "=", "0", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "total", "+=", "1", "\n", "if", "qa", "[", "'id'", "]", "not", "in", "predictions", ":", "\n", "                    ", "message", "=", "'Unanswered question '", "+", "qa", "[", "'id'", "]", "+", "' will receive score 0.'", "\n", "print", "(", "message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "ground_truths", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text'", "]", ",", "qa", "[", "'answers'", "]", ")", ")", "\n", "prediction", "=", "predictions", "[", "qa", "[", "'id'", "]", "]", "\n", "exact_match", "+=", "metric_max_over_ground_truths", "(", "\n", "exact_match_score", ",", "prediction", ",", "ground_truths", ")", "\n", "f1", "+=", "metric_max_over_ground_truths", "(", "\n", "f1_score", ",", "prediction", ",", "ground_truths", ")", "\n", "\n", "", "", "", "exact_match", "=", "100.0", "*", "exact_match", "/", "total", "\n", "f1", "=", "100.0", "*", "f1", "/", "total", "\n", "\n", "return", "{", "'exact_match'", ":", "exact_match", ",", "'f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer": [[17, 34], ["piqa_evaluate.normalize_answer.white_space_fix"], "function", ["None"], ["def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\b(a|an|the)\\b'", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.f1_score": [[36, 47], ["normalize_answer().split", "normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "piqa_evaluate.normalize_answer", "piqa_evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer"], ["", "def", "f1_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "prediction_tokens", "=", "normalize_answer", "(", "prediction", ")", ".", "split", "(", ")", "\n", "ground_truth_tokens", "=", "normalize_answer", "(", "ground_truth", ")", ".", "split", "(", ")", "\n", "common", "=", "Counter", "(", "prediction_tokens", ")", "&", "Counter", "(", "ground_truth_tokens", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "ground_truth_tokens", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.exact_match_score": [[49, 51], ["piqa_evaluate.normalize_answer", "piqa_evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.normalize_answer"], ["", "def", "exact_match_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "return", "(", "normalize_answer", "(", "prediction", ")", "==", "normalize_answer", "(", "ground_truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.metric_max_over_ground_truths": [[53, 59], ["max", "scores_for_ground_truths.append", "piqa_evaluate.exact_match_score", "piqa_evaluate.f1_score"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.exact_match_score", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.f1_score"], ["", "def", "metric_max_over_ground_truths", "(", "metric_fn", ",", "prediction", ",", "ground_truths", ")", ":", "\n", "    ", "scores_for_ground_truths", "=", "[", "]", "\n", "for", "ground_truth", "in", "ground_truths", ":", "\n", "        ", "score", "=", "metric_fn", "(", "prediction", ",", "ground_truth", ")", "\n", "scores_for_ground_truths", ".", "append", "(", "score", ")", "\n", "", "return", "max", "(", "scores_for_ground_truths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.evaluate": [[61, 83], ["list", "piqa_evaluate.metric_max_over_ground_truths", "piqa_evaluate.metric_max_over_ground_truths", "print", "map"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.metric_max_over_ground_truths"], ["", "def", "evaluate", "(", "dataset", ",", "predictions", ")", ":", "\n", "    ", "f1", "=", "exact_match", "=", "total", "=", "0", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "total", "+=", "1", "\n", "if", "qa", "[", "'id'", "]", "not", "in", "predictions", ":", "\n", "                    ", "message", "=", "'Unanswered question '", "+", "qa", "[", "'id'", "]", "+", "' will receive score 0.'", "\n", "print", "(", "message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "ground_truths", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text'", "]", ",", "qa", "[", "'answers'", "]", ")", ")", "\n", "prediction", "=", "predictions", "[", "qa", "[", "'id'", "]", "]", "\n", "exact_match", "+=", "metric_max_over_ground_truths", "(", "\n", "exact_match_score", ",", "prediction", ",", "ground_truths", ")", "\n", "f1", "+=", "metric_max_over_ground_truths", "(", "\n", "f1_score", ",", "prediction", ",", "ground_truths", ")", "\n", "\n", "", "", "", "exact_match", "=", "100.0", "*", "exact_match", "/", "total", "\n", "f1", "=", "100.0", "*", "f1", "/", "total", "\n", "\n", "return", "{", "'exact_match'", ":", "exact_match", ",", "'f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.get_q2c": [[85, 93], ["enumerate"], "function", ["None"], ["", "def", "get_q2c", "(", "dataset", ")", ":", "\n", "    ", "q2c", "=", "{", "}", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "para_idx", ",", "paragraph", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "            ", "cid", "=", "'%s_%d'", "%", "(", "article", "[", "'title'", "]", ",", "para_idx", ")", "\n", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "q2c", "[", "qa", "[", "'id'", "]", "]", "=", "cid", "\n", "", "", "", "return", "q2c", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.piqa_evaluate.get_predictions": [[95, 155], ["os.path.splitext", "os.path.splitext", "tqdm", "print", "shutil.unpack_archive", "print", "shutil.unpack_archive", "q2c.items", "os.path.join", "os.path.join", "os.path.join", "load", "load", "sim.max.argmax", "shutil.rmtree", "shutil.rmtree", "os.path.exists", "print", "os.path.exists", "print", "os.path.exists", "print", "open", "json.load", "np.matmul.max", "numpy.squeeze", "numpy.matmul", "np.matmul.max", "numpy.array", "sim.max.todense"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], ["", "def", "get_predictions", "(", "context_emb_path", ",", "question_emb_path", ",", "q2c", ",", "sparse", "=", "False", ",", "progress", "=", "False", ")", ":", "\n", "    ", "context_emb_dir", ",", "context_emb_ext", "=", "os", ".", "path", ".", "splitext", "(", "context_emb_path", ")", "\n", "question_emb_dir", ",", "question_emb_ext", "=", "os", ".", "path", ".", "splitext", "(", "question_emb_path", ")", "\n", "if", "context_emb_ext", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'Extracting %s to %s'", "%", "(", "context_emb_path", ",", "context_emb_dir", ")", ")", "\n", "shutil", ".", "unpack_archive", "(", "context_emb_path", ",", "context_emb_dir", ")", "\n", "", "if", "question_emb_ext", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'Extracting %s to %s'", "%", "(", "question_emb_path", ",", "question_emb_dir", ")", ")", "\n", "shutil", ".", "unpack_archive", "(", "question_emb_path", ",", "question_emb_dir", ")", "\n", "\n", "", "if", "progress", ":", "\n", "        ", "from", "tqdm", "import", "tqdm", "\n", "", "else", ":", "\n", "        ", "tqdm", "=", "lambda", "x", ":", "x", "\n", "", "predictions", "=", "{", "}", "\n", "for", "id_", ",", "cid", "in", "tqdm", "(", "q2c", ".", "items", "(", ")", ")", ":", "\n", "        ", "q_emb_path", "=", "os", ".", "path", ".", "join", "(", "question_emb_dir", ",", "'%s.npz'", "%", "id_", ")", "\n", "c_emb_path", "=", "os", ".", "path", ".", "join", "(", "context_emb_dir", ",", "'%s.npz'", "%", "cid", ")", "\n", "c_json_path", "=", "os", ".", "path", ".", "join", "(", "context_emb_dir", ",", "'%s.json'", "%", "cid", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "q_emb_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "q_emb_path", ")", "\n", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "c_emb_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "c_emb_path", ")", "\n", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "c_json_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "c_json_path", ")", "\n", "continue", "\n", "\n", "", "load", "=", "scipy", ".", "sparse", ".", "load_npz", "if", "sparse", "else", "np", ".", "load", "\n", "q_emb", "=", "load", "(", "q_emb_path", ")", "# shape = [M, d], d is the embedding size.", "\n", "c_emb", "=", "load", "(", "c_emb_path", ")", "# shape = [N, d], d is the embedding size.", "\n", "\n", "with", "open", "(", "c_json_path", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "phrases", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "if", "sparse", ":", "\n", "            ", "sim", "=", "c_emb", "*", "q_emb", ".", "T", "\n", "m", "=", "sim", ".", "max", "(", "1", ")", "\n", "m", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "m", ".", "todense", "(", ")", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "q_emb", "=", "q_emb", "[", "'arr_0'", "]", "\n", "c_emb", "=", "c_emb", "[", "'arr_0'", "]", "\n", "sim", "=", "np", ".", "matmul", "(", "c_emb", ",", "q_emb", ".", "T", ")", "\n", "m", "=", "sim", ".", "max", "(", "1", ")", "\n", "\n", "", "argmax", "=", "m", ".", "argmax", "(", "0", ")", "\n", "predictions", "[", "id_", "]", "=", "phrases", "[", "argmax", "]", "\n", "\n", "# Dump piqa_pred", "\n", "# with open('test/piqa_pred.json', 'w') as f:", "\n", "#     f.write(json.dumps(predictions))", "\n", "\n", "", "if", "context_emb_ext", "==", "'.zip'", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "context_emb_dir", ")", "\n", "", "if", "question_emb_ext", "==", "'.zip'", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "question_emb_dir", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.merge.get_q2c": [[16, 24], ["enumerate"], "function", ["None"], ["def", "get_q2c", "(", "dataset", ")", ":", "\n", "    ", "q2c", "=", "{", "}", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "para_idx", ",", "paragraph", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "            ", "cid", "=", "'%s_%d'", "%", "(", "article", "[", "'title'", "]", ",", "para_idx", ")", "\n", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "q2c", "[", "qa", "[", "'id'", "]", "]", "=", "cid", "\n", "", "", "", "return", "q2c", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.squad.merge.get_predictions": [[26, 92], ["os.path.splitext", "os.path.splitext", "tqdm", "print", "shutil.unpack_archive", "print", "shutil.unpack_archive", "q2c.items", "os.path.join", "os.path.join", "os.path.join", "load", "load", "numpy.linalg.norm.argmax", "shutil.rmtree", "shutil.rmtree", "os.path.exists", "print", "os.path.exists", "print", "os.path.exists", "print", "open", "json.load", "np.matmul.max", "numpy.squeeze", "numpy.matmul", "np.matmul.max", "numpy.array", "scipy.sparse.linalg.norm", "scipy.sparse.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm.todense", "scipy.sparse.linalg.norm", "scipy.sparse.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], ["", "def", "get_predictions", "(", "context_emb_path", ",", "question_emb_path", ",", "q2c", ",", "sparse", "=", "False", ",", "metric", "=", "'ip'", ",", "progress", "=", "False", ")", ":", "\n", "    ", "context_emb_dir", ",", "context_emb_ext", "=", "os", ".", "path", ".", "splitext", "(", "context_emb_path", ")", "\n", "question_emb_dir", ",", "question_emb_ext", "=", "os", ".", "path", ".", "splitext", "(", "question_emb_path", ")", "\n", "if", "context_emb_ext", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'Extracting %s to %s'", "%", "(", "context_emb_path", ",", "context_emb_dir", ")", ")", "\n", "shutil", ".", "unpack_archive", "(", "context_emb_path", ",", "context_emb_dir", ")", "\n", "", "if", "question_emb_ext", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'Extracting %s to %s'", "%", "(", "question_emb_path", ",", "question_emb_dir", ")", ")", "\n", "shutil", ".", "unpack_archive", "(", "question_emb_path", ",", "question_emb_dir", ")", "\n", "\n", "", "if", "progress", ":", "\n", "        ", "from", "tqdm", "import", "tqdm", "\n", "", "else", ":", "\n", "        ", "tqdm", "=", "lambda", "x", ":", "x", "\n", "", "predictions", "=", "{", "}", "\n", "for", "id_", ",", "cid", "in", "tqdm", "(", "q2c", ".", "items", "(", ")", ")", ":", "\n", "        ", "q_emb_path", "=", "os", ".", "path", ".", "join", "(", "question_emb_dir", ",", "'%s.npz'", "%", "id_", ")", "\n", "c_emb_path", "=", "os", ".", "path", ".", "join", "(", "context_emb_dir", ",", "'%s.npz'", "%", "cid", ")", "\n", "c_json_path", "=", "os", ".", "path", ".", "join", "(", "context_emb_dir", ",", "'%s.json'", "%", "cid", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "q_emb_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "q_emb_path", ")", "\n", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "c_emb_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "c_emb_path", ")", "\n", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "c_json_path", ")", ":", "\n", "            ", "print", "(", "'Missing %s'", "%", "c_json_path", ")", "\n", "continue", "\n", "\n", "", "load", "=", "scipy", ".", "sparse", ".", "load_npz", "if", "sparse", "else", "np", ".", "load", "\n", "q_emb", "=", "load", "(", "q_emb_path", ")", "# shape = [M, d], d is the embedding size.", "\n", "c_emb", "=", "load", "(", "c_emb_path", ")", "# shape = [N, d], d is the embedding size.", "\n", "\n", "with", "open", "(", "c_json_path", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "phrases", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "if", "sparse", ":", "\n", "            ", "if", "metric", "==", "'ip'", ":", "\n", "                ", "sim", "=", "c_emb", "*", "q_emb", ".", "T", "\n", "m", "=", "sim", ".", "max", "(", "1", ")", "\n", "m", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "m", ".", "todense", "(", ")", ")", ",", "1", ")", "\n", "", "elif", "metric", "==", "'l1'", ":", "\n", "                ", "m", "=", "scipy", ".", "sparse", ".", "linalg", ".", "norm", "(", "c_emb", "-", "q_emb", ",", "ord", "=", "1", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'l2'", ":", "\n", "                ", "m", "=", "scipy", ".", "sparse", ".", "linalg", ".", "norm", "(", "c_emb", "-", "q_emb", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "q_emb", "=", "q_emb", "[", "'arr_0'", "]", "\n", "c_emb", "=", "c_emb", "[", "'arr_0'", "]", "\n", "if", "metric", "==", "'ip'", ":", "\n", "                ", "sim", "=", "np", ".", "matmul", "(", "c_emb", ",", "q_emb", ".", "T", ")", "\n", "m", "=", "sim", ".", "max", "(", "1", ")", "\n", "", "elif", "metric", "==", "'l1'", ":", "\n", "                ", "m", "=", "numpy", ".", "linalg", ".", "norm", "(", "c_emb", "-", "q_emb", ",", "ord", "=", "1", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'l2'", ":", "\n", "                ", "m", "=", "numpy", ".", "linalg", ".", "norm", "(", "c_emb", "-", "q_emb", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "argmax", "=", "m", ".", "argmax", "(", "0", ")", "\n", "predictions", "[", "id_", "]", "=", "phrases", "[", "argmax", "]", "\n", "\n", "", "if", "context_emb_ext", "==", "'.zip'", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "context_emb_dir", ")", "\n", "", "if", "question_emb_ext", "==", "'.zip'", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "question_emb_dir", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.scripts.tfidf.load_squad": [[10, 42], ["open", "json.load", "context.replace.replace", "examples.append", "answers.append", "answer_starts.append", "answer_ends.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], ["def", "load_squad", "(", "squad_path", ",", "draft", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "squad_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "squad", "=", "json", ".", "load", "(", "fp", ")", "\n", "examples", "=", "[", "]", "\n", "for", "article", "in", "squad", "[", "'data'", "]", ":", "\n", "            ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "                ", "context", "=", "paragraph", "[", "'context'", "]", "\n", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                    ", "question", "=", "qa", "[", "'question'", "]", "\n", "id_", "=", "qa", "[", "'id'", "]", "\n", "answers", ",", "answer_starts", ",", "answer_ends", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "answer", "in", "qa", "[", "'answers'", "]", ":", "\n", "                        ", "answer_start", "=", "answer", "[", "'answer_start'", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", "[", "'text'", "]", ")", "\n", "answers", ".", "append", "(", "answer", "[", "'text'", "]", ")", "\n", "answer_starts", ".", "append", "(", "answer_start", ")", "\n", "answer_ends", ".", "append", "(", "answer_end", ")", "\n", "\n", "# to avoid csv compatibility issue", "\n", "", "context", "=", "context", ".", "replace", "(", "'\\n'", ",", "'\\t'", ")", "\n", "\n", "example", "=", "{", "'id'", ":", "id_", ",", "\n", "'idx'", ":", "len", "(", "examples", ")", ",", "\n", "'context'", ":", "context", ",", "\n", "'question'", ":", "question", ",", "\n", "'answers'", ":", "answers", ",", "\n", "'answer_starts'", ":", "answer_starts", ",", "\n", "'answer_ends'", ":", "answer_ends", "}", "\n", "examples", ".", "append", "(", "example", ")", "\n", "if", "draft", "and", "len", "(", "examples", ")", "==", "100", ":", "\n", "                        ", "return", "examples", "\n", "", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.scripts.tfidf.tokenize": [[44, 49], ["in_.replace().replace().replace.replace().replace().replace", "nltk.word_tokenize", "word.replace().replace", "in_.replace().replace().replace.replace().replace", "word.replace", "in_.replace().replace().replace.replace"], "function", ["None"], ["", "", "def", "tokenize", "(", "in_", ")", ":", "\n", "    ", "in_", "=", "in_", ".", "replace", "(", "'``'", ",", "'\" '", ")", ".", "replace", "(", "\"''\"", ",", "'\" '", ")", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "words", "=", "nltk", ".", "word_tokenize", "(", "in_", ")", "\n", "words", "=", "[", "word", ".", "replace", "(", "'``'", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "for", "word", "in", "words", "]", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.scripts.tfidf.get_phrases_and_documents": [[51, 65], ["tfidf.tokenize", "range", "len", "range", "word.lower", "phrases.append", "documents.append", "min", "len", "len", "max", "min", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.PTBWordTokenizer.tokenize"], ["", "def", "get_phrases_and_documents", "(", "context", ",", "nbr_len", "=", "7", ",", "max_ans_len", "=", "7", ",", "lower", "=", "False", ")", ":", "\n", "    ", "words", "=", "tokenize", "(", "context", ")", "\n", "doc_words", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "words", "]", "if", "lower", "else", "words", "\n", "phrases", "=", "[", "]", "\n", "documents", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "min", "(", "len", "(", "words", ")", ",", "i", "+", "max_ans_len", ")", "+", "1", ")", ":", "\n", "            ", "phrase", "=", "' '", ".", "join", "(", "words", "[", "i", ":", "j", "]", ")", "\n", "document", "=", "doc_words", "[", "max", "(", "0", ",", "i", "-", "nbr_len", ")", ":", "i", "]", "+", "doc_words", "[", "j", ":", "min", "(", "len", "(", "words", ")", ",", "j", "+", "nbr_len", ")", "]", "\n", "if", "len", "(", "document", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "phrases", ".", "append", "(", "phrase", ")", "\n", "documents", ".", "append", "(", "document", ")", "\n", "", "", "return", "phrases", ",", "documents", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Tokenizer.tokenize": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.PTBSentTokenizer.tokenize": [[21, 24], ["nltk.sent_tokenize", "processor._get_spans"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_spans"], ["    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n", "        ", "sents", "=", "nltk", ".", "sent_tokenize", "(", "in_", ")", "\n", "return", "_get_spans", "(", "in_", ",", "sents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.PTBWordTokenizer.tokenize": [[27, 32], ["in_.replace().replace().replace.replace().replace().replace.replace().replace().replace", "nltk.word_tokenize", "tuple", "processor._get_spans", "in_.replace().replace().replace.replace().replace().replace.replace().replace", "word.replace().replace", "in_.replace().replace().replace.replace().replace().replace.replace", "word.replace"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_spans"], ["    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n", "        ", "in_", "=", "in_", ".", "replace", "(", "'``'", ",", "'\" '", ")", ".", "replace", "(", "\"''\"", ",", "'\" '", ")", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "words", "=", "nltk", ".", "word_tokenize", "(", "in_", ")", "\n", "words", "=", "tuple", "(", "word", ".", "replace", "(", "'``'", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "for", "word", "in", "words", ")", "\n", "return", "_get_spans", "(", "in_", ",", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.__init__": [[56, 76], ["processor.PTBWordTokenizer", "processor.PTBSentTokenizer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "char_vocab_size", "=", "None", ",", "glove_vocab_size", "=", "None", ",", "word_vocab_size", "=", "None", ",", "elmo", "=", "False", ",", "draft", "=", "False", ",", "\n", "emb_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_word_tokenizer", "=", "PTBWordTokenizer", "(", ")", "\n", "self", ".", "_sent_tokenizer", "=", "PTBSentTokenizer", "(", ")", "\n", "self", ".", "_char_vocab_size", "=", "char_vocab_size", "\n", "self", ".", "_glove_vocab_size", "=", "glove_vocab_size", "\n", "self", ".", "_word_vocab_size", "=", "word_vocab_size", "\n", "self", ".", "_elmo", "=", "elmo", "\n", "if", "elmo", ":", "\n", "            ", "from", "allennlp", ".", "modules", ".", "elmo", "import", "batch_to_ids", "\n", "self", ".", "_batch_to_ids", "=", "batch_to_ids", "\n", "", "self", ".", "_draft", "=", "draft", "\n", "self", ".", "_emb_type", "=", "emb_type", "\n", "self", ".", "_glove", "=", "None", "\n", "\n", "self", ".", "_word_cache", "=", "{", "}", "\n", "self", ".", "_sent_cache", "=", "{", "}", "\n", "self", ".", "_word2idx_dict", "=", "{", "}", "\n", "self", ".", "_word2idx_ext_dict", "=", "{", "}", "\n", "self", ".", "_char2idx_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.construct": [[77, 104], ["tuple", "tuple", "collections.Counter", "collections.Counter", "collections.Counter", "tuple", "len", "processor.Processor._word_tokenize", "len", "enumerate", "len", "enumerate", "enumerate", "sorted", "sorted", "word_counter.items", "char_counter.items"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word_tokenize"], ["", "def", "construct", "(", "self", ",", "examples", ",", "metadata", ")", ":", "\n", "        ", "assert", "metadata", "is", "not", "None", "\n", "glove_vocab", "=", "metadata", "[", "'glove_vocab'", "]", "\n", "word_counter", ",", "lower_word_counter", ",", "char_counter", "=", "Counter", "(", ")", ",", "Counter", "(", ")", ",", "Counter", "(", ")", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "for", "text", "in", "(", "example", "[", "'context'", "]", ",", "example", "[", "'question'", "]", ")", ":", "\n", "                ", "for", "span", "in", "self", ".", "_word_tokenize", "(", "example", "[", "'context'", "]", ")", ":", "\n", "                    ", "word", "=", "text", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", "\n", "word_counter", "[", "word", "]", "+=", "1", "\n", "lower_word_counter", "[", "word", "]", "+=", "1", "\n", "for", "char", "in", "word", ":", "\n", "                        ", "char_counter", "[", "char", "]", "+=", "1", "\n", "\n", "", "", "", "", "word_vocab", "=", "tuple", "(", "item", "[", "0", "]", "for", "item", "in", "sorted", "(", "word_counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "-", "item", "[", "1", "]", ")", ")", "\n", "word_vocab", "=", "(", "Processor", ".", "pad", ",", "Processor", ".", "unk", ")", "+", "word_vocab", "\n", "word_vocab", "=", "word_vocab", "[", ":", "self", ".", "_word_vocab_size", "]", "if", "len", "(", "word_vocab", ")", ">", "self", ".", "_word_vocab_size", "else", "word_vocab", "\n", "self", ".", "_word2idx_dict", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "word_vocab", ")", "}", "\n", "\n", "char_vocab", "=", "tuple", "(", "item", "[", "0", "]", "for", "item", "in", "sorted", "(", "char_counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "-", "item", "[", "1", "]", ")", ")", "\n", "char_vocab", "=", "(", "Processor", ".", "pad", ",", "Processor", ".", "unk", ")", "+", "char_vocab", "\n", "char_vocab", "=", "char_vocab", "[", ":", "self", ".", "_char_vocab_size", "]", "if", "len", "(", "char_vocab", ")", ">", "self", ".", "_char_vocab_size", "else", "char_vocab", "\n", "self", ".", "_char2idx_dict", "=", "{", "char", ":", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "char_vocab", ")", "}", "\n", "\n", "ext_vocab", "=", "(", "Processor", ".", "pad", ",", "Processor", ".", "unk", ")", "+", "tuple", "(", "glove_vocab", ")", "\n", "if", "len", "(", "ext_vocab", ")", ">", "self", ".", "_glove_vocab_size", ":", "\n", "            ", "ext_vocab", "=", "ext_vocab", "[", ":", "self", ".", "_glove_vocab_size", "]", "\n", "", "self", ".", "_word2idx_ext_dict", "=", "{", "ext", ":", "idx", "for", "idx", ",", "ext", "in", "enumerate", "(", "ext_vocab", ")", "}", "\n", "# assert max(self._word2idx_ext.values()) + 1 == self._glove_vocab_size, max(self._word2idx_ext.values()) + 1", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.state_dict": [[106, 111], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "'word2idx'", ":", "self", ".", "_word2idx_dict", ",", "\n", "'word2idx_ext'", ":", "self", ".", "_word2idx_ext_dict", ",", "\n", "'char2idx'", ":", "self", ".", "_char2idx_dict", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.load_state_dict": [[112, 116], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "in_", ")", ":", "\n", "        ", "self", ".", "_word2idx_dict", "=", "in_", "[", "'word2idx'", "]", "\n", "self", ".", "_word2idx_ext_dict", "=", "in_", "[", "'word2idx_ext'", "]", "\n", "self", ".", "_char2idx_dict", "=", "in_", "[", "'char2idx'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.preprocess": [[117, 162], ["dict", "processor.Processor._word_tokenize", "tuple", "tuple", "tuple", "tuple", "processor.Processor._word_tokenize", "tuple", "tuple", "tuple", "tuple", "map", "map", "map", "map", "enumerate", "answer_word_starts.append", "enumerate", "answer_word_ends.append", "tuple", "tuple", "tuple", "tuple", "example.items", "prepro_example.items", "map", "map"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word_tokenize", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word_tokenize"], ["", "def", "preprocess", "(", "self", ",", "example", ")", ":", "\n", "        ", "prepro_example", "=", "{", "'idx'", ":", "example", "[", "'idx'", "]", "}", "\n", "\n", "if", "'context'", "in", "example", ":", "\n", "            ", "context", "=", "example", "[", "'context'", "]", "\n", "context_spans", "=", "self", ".", "_word_tokenize", "(", "context", ")", "\n", "context_words", "=", "tuple", "(", "context", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", "for", "span", "in", "context_spans", ")", "\n", "context_word_idxs", "=", "tuple", "(", "map", "(", "self", ".", "_word2idx", ",", "context_words", ")", ")", "\n", "context_glove_idxs", "=", "tuple", "(", "map", "(", "self", ".", "_word2idx_ext", ",", "context_words", ")", ")", "\n", "context_char_idxs", "=", "tuple", "(", "tuple", "(", "map", "(", "self", ".", "_char2idx", ",", "word", ")", ")", "for", "word", "in", "context_words", ")", "\n", "prepro_example", "[", "'context_spans'", "]", "=", "context_spans", "\n", "prepro_example", "[", "'context_word_idxs'", "]", "=", "context_word_idxs", "\n", "prepro_example", "[", "'context_glove_idxs'", "]", "=", "context_glove_idxs", "\n", "prepro_example", "[", "'context_char_idxs'", "]", "=", "context_char_idxs", "\n", "\n", "", "if", "'question'", "in", "example", ":", "\n", "            ", "question", "=", "example", "[", "'question'", "]", "\n", "question_spans", "=", "self", ".", "_word_tokenize", "(", "example", "[", "'question'", "]", ")", "\n", "question_words", "=", "tuple", "(", "question", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", "for", "span", "in", "question_spans", ")", "\n", "question_word_idxs", "=", "tuple", "(", "map", "(", "self", ".", "_word2idx", ",", "question_words", ")", ")", "\n", "question_glove_idxs", "=", "tuple", "(", "map", "(", "self", ".", "_word2idx_ext", ",", "question_words", ")", ")", "\n", "question_char_idxs", "=", "tuple", "(", "tuple", "(", "map", "(", "self", ".", "_char2idx", ",", "word", ")", ")", "for", "word", "in", "question_words", ")", "\n", "prepro_example", "[", "'question_spans'", "]", "=", "question_spans", "\n", "prepro_example", "[", "'question_word_idxs'", "]", "=", "question_word_idxs", "\n", "prepro_example", "[", "'question_glove_idxs'", "]", "=", "question_glove_idxs", "\n", "prepro_example", "[", "'question_char_idxs'", "]", "=", "question_char_idxs", "\n", "\n", "", "if", "'answer_starts'", "in", "example", ":", "\n", "            ", "answer_word_start", ",", "answer_word_end", "=", "0", ",", "0", "\n", "answer_word_starts", ",", "answer_word_ends", "=", "[", "]", ",", "[", "]", "\n", "for", "answer_start", "in", "example", "[", "'answer_starts'", "]", ":", "\n", "                ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "context_spans", ")", ":", "\n", "                    ", "if", "span", "[", "0", "]", "<=", "answer_start", ":", "\n", "                        ", "answer_word_start", "=", "word_idx", "+", "1", "\n", "", "", "answer_word_starts", ".", "append", "(", "answer_word_start", ")", "\n", "", "for", "answer_end", "in", "example", "[", "'answer_ends'", "]", ":", "\n", "                ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "context_spans", ")", ":", "\n", "                    ", "if", "span", "[", "0", "]", "<=", "answer_end", ":", "\n", "                        ", "answer_word_end", "=", "word_idx", "+", "1", "\n", "", "", "answer_word_ends", ".", "append", "(", "answer_word_end", ")", "\n", "", "prepro_example", "[", "'answer_word_starts'", "]", "=", "answer_word_starts", "\n", "prepro_example", "[", "'answer_word_ends'", "]", "=", "answer_word_ends", "\n", "\n", "", "output", "=", "dict", "(", "tuple", "(", "example", ".", "items", "(", ")", ")", "+", "tuple", "(", "prepro_example", ".", "items", "(", ")", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess": [[163, 180], ["model_output[].item", "model_output[].item", "processor._get_pred", "max", "max", "zip", "processor._f1_score", "processor._exact_match_score"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_pred", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._f1_score", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._exact_match_score"], ["", "def", "postprocess", "(", "self", ",", "example", ",", "model_output", ")", ":", "\n", "        ", "yp1", "=", "model_output", "[", "'yp1'", "]", ".", "item", "(", ")", "\n", "yp2", "=", "model_output", "[", "'yp2'", "]", ".", "item", "(", ")", "\n", "context", "=", "example", "[", "'context'", "]", "\n", "context_spans", "=", "example", "[", "'context_spans'", "]", "\n", "pred", "=", "_get_pred", "(", "context", ",", "context_spans", ",", "yp1", ",", "yp2", ")", "\n", "out", "=", "{", "'pred'", ":", "pred", ",", "'id'", ":", "example", "[", "'id'", "]", "}", "\n", "if", "'answer_starts'", "in", "example", ":", "\n", "            ", "y1", "=", "example", "[", "'answer_starts'", "]", "\n", "y2", "=", "example", "[", "'answer_ends'", "]", "\n", "gt", "=", "[", "context", "[", "s", ":", "e", "]", "for", "s", ",", "e", "in", "zip", "(", "y1", ",", "y2", ")", "]", "\n", "f1", "=", "max", "(", "_f1_score", "(", "pred", ",", "gt_each", ")", "for", "gt_each", "in", "gt", ")", "\n", "em", "=", "max", "(", "_exact_match_score", "(", "pred", ",", "gt_each", ")", "for", "gt_each", "in", "gt", ")", "\n", "out", "[", "'gt'", "]", "=", "gt", "\n", "out", "[", "'f1'", "]", "=", "f1", "\n", "out", "[", "'em'", "]", "=", "em", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess_batch": [[181, 187], ["tuple", "processor.Processor.postprocess", "enumerate", "model_output.items"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess"], ["", "def", "postprocess_batch", "(", "self", ",", "dataset", ",", "model_input", ",", "model_output", ")", ":", "\n", "        ", "results", "=", "tuple", "(", "self", ".", "postprocess", "(", "dataset", "[", "idx", "]", ",", "\n", "{", "key", ":", "val", "[", "i", "]", "if", "val", "is", "not", "None", "else", "None", "for", "key", ",", "val", "in", "\n", "model_output", ".", "items", "(", ")", "}", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "model_input", "[", "'idx'", "]", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess_context": [[188, 199], ["dense.cpu().numpy", "tuple", "scipy.sparse.csc_matrix", "tuple", "dense.cpu", "processor._get_pred"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_pred"], ["", "def", "postprocess_context", "(", "self", ",", "example", ",", "context_output", ")", ":", "\n", "        ", "pos_tuple", ",", "dense", "=", "context_output", "\n", "out", "=", "dense", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "context", "=", "example", "[", "'context'", "]", "\n", "context_spans", "=", "example", "[", "'context_spans'", "]", "\n", "phrases", "=", "tuple", "(", "_get_pred", "(", "context", ",", "context_spans", ",", "yp1", ",", "yp2", ")", "for", "yp1", ",", "yp2", "in", "pos_tuple", ")", "\n", "if", "self", ".", "_emb_type", "==", "'sparse'", ":", "\n", "            ", "out", "=", "csc_matrix", "(", "out", ")", "\n", "", "metadata", "=", "{", "'context'", ":", "context", ",", "\n", "'answer_spans'", ":", "tuple", "(", "(", "context_spans", "[", "yp1", "]", "[", "0", "]", ",", "context_spans", "[", "yp2", "]", "[", "1", "]", ")", "for", "yp1", ",", "yp2", "in", "pos_tuple", ")", "}", "\n", "return", "example", "[", "'cid'", "]", ",", "phrases", ",", "out", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess_context_batch": [[200, 204], ["tuple", "processor.Processor.postprocess_context", "enumerate"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_context"], ["", "def", "postprocess_context_batch", "(", "self", ",", "dataset", ",", "model_input", ",", "context_output", ")", ":", "\n", "        ", "results", "=", "tuple", "(", "self", ".", "postprocess_context", "(", "dataset", "[", "idx", "]", ",", "context_output", "[", "i", "]", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "model_input", "[", "'idx'", "]", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess_question": [[205, 211], ["dense.cpu().numpy", "scipy.sparse.csc_matrix", "dense.cpu"], "methods", ["None"], ["", "def", "postprocess_question", "(", "self", ",", "example", ",", "question_output", ")", ":", "\n", "        ", "dense", "=", "question_output", "\n", "out", "=", "dense", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "_emb_type", "==", "'sparse'", ":", "\n", "            ", "out", "=", "csc_matrix", "(", "out", ")", "\n", "", "return", "example", "[", "'id'", "]", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.postprocess_question_batch": [[212, 216], ["tuple", "processor.Processor.postprocess_question", "enumerate"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_question"], ["", "def", "postprocess_question_batch", "(", "self", ",", "dataset", ",", "model_input", ",", "question_output", ")", ":", "\n", "        ", "results", "=", "tuple", "(", "self", ".", "postprocess_question", "(", "dataset", "[", "idx", "]", ",", "question_output", "[", "i", "]", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "model_input", "[", "'idx'", "]", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.collate": [[217, 240], ["tuple", "processor._get_shape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "processor._fill_tensor", "processor.Processor._batch_to_ids", "processor.Processor._batch_to_ids"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_shape", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._fill_tensor"], ["", "def", "collate", "(", "self", ",", "examples", ")", ":", "\n", "        ", "tensors", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "if", "key", "not", "in", "examples", "[", "0", "]", ":", "\n", "                ", "continue", "\n", "", "val", "=", "tuple", "(", "example", "[", "key", "]", "for", "example", "in", "examples", ")", "\n", "depth", "=", "self", ".", "depths", "[", "key", "]", "+", "1", "\n", "shape", "=", "_get_shape", "(", "val", ",", "depth", ")", "\n", "tensor", "=", "torch", ".", "zeros", "(", "shape", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "_fill_tensor", "(", "tensor", ",", "val", ")", "\n", "tensors", "[", "key", "]", "=", "tensor", "\n", "", "if", "self", ".", "_elmo", ":", "\n", "            ", "if", "'context'", "in", "examples", "[", "0", "]", ":", "\n", "                ", "sentences", "=", "[", "[", "example", "[", "'context'", "]", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", "for", "span", "in", "example", "[", "'context_spans'", "]", "]", "\n", "for", "example", "in", "examples", "]", "\n", "character_ids", "=", "self", ".", "_batch_to_ids", "(", "sentences", ")", "\n", "tensors", "[", "'context_elmo_idxs'", "]", "=", "character_ids", "\n", "", "if", "'question'", "in", "examples", "[", "0", "]", ":", "\n", "                ", "sentences", "=", "[", "[", "example", "[", "'question'", "]", "[", "span", "[", "0", "]", ":", "span", "[", "1", "]", "]", "for", "span", "in", "example", "[", "'question_spans'", "]", "]", "\n", "for", "example", "in", "examples", "]", "\n", "character_ids", "=", "self", ".", "_batch_to_ids", "(", "sentences", ")", "\n", "tensors", "[", "'question_elmo_idxs'", "]", "=", "character_ids", "\n", "", "", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.process_metadata": [[241, 245], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "process_metadata", "(", "self", ",", "metadata", ")", ":", "\n", "        ", "return", "{", "'glove_emb_mat'", ":", "torch", ".", "tensor", "(", "metadata", "[", "'glove_emb_mat'", "]", ")", ",", "\n", "'elmo_options_file'", ":", "metadata", "[", "'elmo_options_file'", "]", ",", "\n", "'elmo_weights_file'", ":", "metadata", "[", "'elmo_weights_file'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor.get_dump": [[246, 261], ["enumerate", "dump.append", "[].cpu().numpy", "[].cpu().numpy", "[].cpu", "[].cpu"], "methods", ["None"], ["", "def", "get_dump", "(", "self", ",", "dataset", ",", "input_", ",", "output", ",", "results", ")", ":", "\n", "        ", "dump", "=", "[", "]", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "input_", "[", "'idx'", "]", ")", ":", "\n", "            ", "example", "=", "dataset", "[", "idx", "]", "\n", "each", "=", "{", "'id'", ":", "example", "[", "'id'", "]", ",", "\n", "'context'", ":", "example", "[", "'context'", "]", ",", "\n", "'question'", ":", "example", "[", "'question'", "]", ",", "\n", "'answer_starts'", ":", "example", "[", "'answer_starts'", "]", ",", "\n", "'answer_ends'", ":", "example", "[", "'answer_ends'", "]", ",", "\n", "'context_spans'", ":", "example", "[", "'context_spans'", "]", ",", "\n", "'yp1'", ":", "output", "[", "'yp1'", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'yp2'", ":", "output", "[", "'yp2'", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n", "dump", ".", "append", "(", "each", ")", "\n", "", "return", "dump", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word_tokenize": [[263, 269], ["processor.Processor._word_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.PTBWordTokenizer.tokenize"], ["", "def", "_word_tokenize", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "string", "in", "self", ".", "_word_cache", ":", "\n", "            ", "return", "self", ".", "_word_cache", "[", "string", "]", "\n", "", "spans", "=", "self", ".", "_word_tokenizer", ".", "tokenize", "(", "string", ")", "\n", "self", ".", "_word_cache", "[", "string", "]", "=", "spans", "\n", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._sent_tokenize": [[270, 276], ["processor.Processor._sent_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.PTBWordTokenizer.tokenize"], ["", "def", "_sent_tokenize", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "string", "in", "self", ".", "_sent_cache", ":", "\n", "            ", "return", "self", ".", "_sent_cache", "[", "string", "]", "\n", "", "spans", "=", "self", ".", "_sent_tokenizer", ".", "tokenize", "(", "string", ")", "\n", "self", ".", "_sent_cache", "[", "string", "]", "=", "spans", "\n", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word2idx": [[277, 279], ["None"], "methods", ["None"], ["", "def", "_word2idx", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "self", ".", "_word2idx_dict", "[", "word", "]", "if", "word", "in", "self", ".", "_word2idx_dict", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._word2idx_ext": [[280, 283], ["word.lower.lower.lower"], "methods", ["None"], ["", "def", "_word2idx_ext", "(", "self", ",", "word", ")", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "self", ".", "_word2idx_ext_dict", "[", "word", "]", "if", "word", "in", "self", ".", "_word2idx_ext_dict", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Processor._char2idx": [[284, 286], ["None"], "methods", ["None"], ["", "def", "_char2idx", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "self", ".", "_char2idx_dict", "[", "char", "]", "if", "char", "in", "self", ".", "_char2idx_dict", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Sampler.__init__": [[289, 316], ["base.Sampler.__init__", "tuple", "random.sample", "len", "sorted", "sorted", "range", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "data_type", ",", "max_context_size", "=", "None", ",", "max_question_size", "=", "None", ",", "bucket", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "data_type", ")", "\n", "if", "data_type", "==", "'dev'", "or", "data_type", "==", "'test'", ":", "\n", "            ", "max_context_size", "=", "None", "\n", "max_question_size", "=", "None", "\n", "self", ".", "shuffle", "=", "False", "\n", "\n", "", "self", ".", "max_context_size", "=", "max_context_size", "\n", "self", ".", "max_question_size", "=", "max_question_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "bucket", "=", "bucket", "\n", "\n", "idxs", "=", "tuple", "(", "idx", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", "\n", "if", "(", "max_context_size", "is", "None", "or", "len", "(", "dataset", "[", "idx", "]", "[", "'context_spans'", "]", ")", "<=", "max_context_size", ")", "and", "\n", "(", "max_question_size", "is", "None", "or", "len", "(", "dataset", "[", "idx", "]", "[", "'question_spans'", "]", ")", "<=", "max_question_size", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "idxs", "=", "random", ".", "sample", "(", "idxs", ",", "len", "(", "idxs", ")", ")", "\n", "\n", "", "if", "bucket", ":", "\n", "            ", "if", "'context_spans'", "in", "dataset", "[", "0", "]", ":", "\n", "                ", "idxs", "=", "sorted", "(", "idxs", ",", "key", "=", "lambda", "idx", ":", "len", "(", "dataset", "[", "idx", "]", "[", "'context_spans'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "'question_spans'", "in", "dataset", "[", "0", "]", "\n", "idxs", "=", "sorted", "(", "idxs", ",", "key", "=", "lambda", "idx", ":", "len", "(", "dataset", "[", "idx", "]", "[", "'question_spans'", "]", ")", ")", "\n", "", "", "self", ".", "_idxs", "=", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Sampler.__iter__": [[317, 319], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.Sampler.__len__": [[320, 322], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.SparseTensor.__init__": [[325, 329], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx", ",", "val", ",", "max_", "=", "None", ")", ":", "\n", "        ", "self", ".", "idx", "=", "idx", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "max", "=", "max_", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor.SparseTensor.scipy": [[330, 336], ["processor.SparseTensor.idx.flatten", "numpy.tile().flatten", "processor.SparseTensor.val.flatten", "scipy.sparse.csc_matrix", "numpy.tile", "numpy.expand_dims", "range"], "methods", ["None"], ["", "def", "scipy", "(", "self", ")", ":", "\n", "        ", "col", "=", "self", ".", "idx", ".", "flatten", "(", ")", "\n", "row", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "range", "(", "self", ".", "idx", ".", "shape", "[", "0", "]", ")", ",", "1", ")", ",", "[", "1", ",", "self", ".", "idx", ".", "shape", "[", "1", "]", "]", ")", ".", "flatten", "(", ")", "\n", "data", "=", "self", ".", "val", ".", "flatten", "(", ")", "\n", "shape", "=", "None", "if", "self", ".", "max", "is", "None", "else", "[", "self", ".", "idx", ".", "shape", "[", "0", "]", ",", "self", ".", "max", "]", "\n", "return", "csc_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_pred": [[340, 350], ["len", "print", "len", "print"], "function", ["None"], ["", "", "def", "_get_pred", "(", "context", ",", "spans", ",", "yp1", ",", "yp2", ")", ":", "\n", "    ", "if", "yp1", ">=", "len", "(", "spans", ")", ":", "\n", "        ", "print", "(", "'warning: yp1 is set to 0'", ")", "\n", "yp1", "=", "0", "\n", "", "if", "yp2", ">=", "len", "(", "spans", ")", ":", "\n", "        ", "print", "(", "'warning: yp1 is set to 0'", ")", "\n", "yp2", "=", "0", "\n", "", "yp1c", "=", "spans", "[", "yp1", "]", "[", "0", "]", "\n", "yp2c", "=", "spans", "[", "yp2", "]", "[", "1", "]", "\n", "return", "context", "[", "yp1c", ":", "yp2c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_spans": [[352, 362], ["tuple", "in_.find", "pairs.append", "len", "len"], "function", ["None"], ["", "def", "_get_spans", "(", "in_", ",", "tokens", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "i", "=", "in_", ".", "find", "(", "token", ",", "i", ")", "\n", "assert", "i", ">=", "0", ",", "'token `%s` not found starting from %d: `%s`'", "%", "(", "token", ",", "i", ",", "in_", "[", "i", ":", "]", ")", "\n", "pair", "=", "(", "i", ",", "i", "+", "len", "(", "token", ")", ")", "\n", "pairs", ".", "append", "(", "pair", ")", "\n", "i", "+=", "len", "(", "token", ")", "\n", "", "return", "tuple", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_shape": [[364, 368], ["tuple", "len", "map", "zip", "processor._get_shape"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._get_shape"], ["", "def", "_get_shape", "(", "nested_list", ",", "depth", ")", ":", "\n", "    ", "if", "depth", ">", "0", ":", "\n", "        ", "return", "(", "len", "(", "nested_list", ")", ",", ")", "+", "tuple", "(", "map", "(", "max", ",", "zip", "(", "*", "[", "_get_shape", "(", "each", ",", "depth", "-", "1", ")", "for", "each", "in", "nested_list", "]", ")", ")", ")", "\n", "", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._fill_tensor": [[370, 383], ["tensor.dim", "torch.tensor", "torch.tensor", "tensor.dim", "enumerate", "len", "torch.tensor", "torch.tensor", "tensor.dim", "enumerate", "zip", "enumerate", "processor._fill_tensor", "torch.tensor", "torch.tensor", "len", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._fill_tensor"], ["", "def", "_fill_tensor", "(", "tensor", ",", "nested_list", ")", ":", "\n", "    ", "if", "tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "tensor", "[", ":", "len", "(", "nested_list", ")", "]", "=", "torch", ".", "tensor", "(", "nested_list", ")", "\n", "", "elif", "tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "for", "i", ",", "each", "in", "enumerate", "(", "nested_list", ")", ":", "\n", "            ", "tensor", "[", "i", ",", ":", "len", "(", "each", ")", "]", "=", "torch", ".", "tensor", "(", "each", ")", "\n", "", "", "elif", "tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "for", "i1", ",", "each1", "in", "enumerate", "(", "nested_list", ")", ":", "\n", "            ", "for", "i2", ",", "each2", "in", "enumerate", "(", "each1", ")", ":", "\n", "                ", "tensor", "[", "i1", ",", "i2", ",", ":", "len", "(", "each2", ")", "]", "=", "torch", ".", "tensor", "(", "each2", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "tensor_child", ",", "nested_list_child", "in", "zip", "(", "tensor", ",", "nested_list", ")", ":", "\n", "            ", "_fill_tensor", "(", "tensor_child", ",", "nested_list_child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._normalize_answer": [[387, 412], ["processor._normalize_answer.white_space_fix"], "function", ["None"], ["", "", "", "def", "_normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\n\n    Directly copied from official SQuAD eval script, SHOULD NOT BE MODIFIED.\n\n    Args:\n      s: Input text.\n    Returns:\n      Normalized text.\n    \"\"\"", "\n", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\b(a|an|the)\\b'", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._f1_score": [[414, 426], ["_normalize_answer().split", "_normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "processor._normalize_answer", "processor._normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._normalize_answer"], ["", "def", "_f1_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "\"\"\"Directly copied from official SQuAD eval script, SHOULD NOT BE MODIFIED.\"\"\"", "\n", "prediction_tokens", "=", "_normalize_answer", "(", "prediction", ")", ".", "split", "(", ")", "\n", "ground_truth_tokens", "=", "_normalize_answer", "(", "ground_truth", ")", ".", "split", "(", ")", "\n", "common", "=", "Counter", "(", "prediction_tokens", ")", "&", "Counter", "(", "ground_truth_tokens", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "ground_truth_tokens", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._exact_match_score": [[428, 431], ["processor._normalize_answer", "processor._normalize_answer"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._normalize_answer", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.processor._normalize_answer"], ["", "def", "_exact_match_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "\"\"\"Directly copied from official SQuAD eval script, SHOULD NOT BE MODIFIED.\"\"\"", "\n", "return", "_normalize_answer", "(", "prediction", ")", "==", "_normalize_answer", "(", "ground_truth", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface.FileInterface.__init__": [[10, 16], ["base.FileInterface.__init__"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "glove_dir", ",", "glove_size", ",", "elmo_options_file", ",", "elmo_weights_file", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_glove_dir", "=", "glove_dir", "\n", "self", ".", "_glove_size", "=", "glove_size", "\n", "self", ".", "_elmo_options_file", "=", "elmo_options_file", "\n", "self", ".", "_elmo_weights_file", "=", "elmo_weights_file", "\n", "super", "(", "FileInterface", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface.FileInterface.load_train": [[17, 19], ["file_interface._load_squad"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface._load_squad"], ["", "def", "load_train", "(", "self", ")", ":", "\n", "        ", "return", "_load_squad", "(", "self", ".", "_train_path", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface.FileInterface.load_test": [[20, 22], ["file_interface._load_squad"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface._load_squad"], ["", "def", "load_test", "(", "self", ")", ":", "\n", "        ", "return", "_load_squad", "(", "self", ".", "_test_path", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface.FileInterface.load_metadata": [[23, 29], ["file_interface._load_glove"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface._load_glove"], ["", "def", "load_metadata", "(", "self", ")", ":", "\n", "        ", "glove_vocab", ",", "glove_emb_mat", "=", "_load_glove", "(", "self", ".", "_glove_size", ",", "glove_dir", "=", "self", ".", "_glove_dir", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "return", "{", "'glove_vocab'", ":", "glove_vocab", ",", "\n", "'glove_emb_mat'", ":", "glove_emb_mat", ",", "\n", "'elmo_options_file'", ":", "self", ".", "_elmo_options_file", ",", "\n", "'elmo_weights_file'", ":", "self", ".", "_elmo_weights_file", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface._load_squad": [[31, 75], ["open", "json.load", "enumerate", "enumerate", "example.update", "examples.append", "example.update", "example.update", "examples.append", "len", "question_example.update", "len", "len", "answers.append", "answer_starts.append", "answer_ends.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], ["", "", "def", "_load_squad", "(", "squad_path", ",", "draft", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "squad_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "squad", "=", "json", ".", "load", "(", "fp", ")", "\n", "examples", "=", "[", "]", "\n", "for", "article", "in", "squad", "[", "'data'", "]", ":", "\n", "            ", "for", "para_idx", ",", "paragraph", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "                ", "cid", "=", "'%s_%d'", "%", "(", "article", "[", "'title'", "]", ",", "para_idx", ")", "\n", "if", "'context'", "in", "paragraph", ":", "\n", "                    ", "context", "=", "paragraph", "[", "'context'", "]", "\n", "context_example", "=", "{", "'cid'", ":", "cid", ",", "'context'", ":", "context", "}", "\n", "", "else", ":", "\n", "                    ", "context_example", "=", "{", "}", "\n", "\n", "", "if", "'qas'", "in", "paragraph", ":", "\n", "                    ", "for", "question_idx", ",", "qa", "in", "enumerate", "(", "paragraph", "[", "'qas'", "]", ")", ":", "\n", "                        ", "id_", "=", "qa", "[", "'id'", "]", "\n", "qid", "=", "'%s_%d'", "%", "(", "cid", ",", "question_idx", ")", "\n", "question", "=", "qa", "[", "'question'", "]", "\n", "question_example", "=", "{", "'id'", ":", "id_", ",", "'qid'", ":", "qid", ",", "'question'", ":", "question", "}", "\n", "if", "'answers'", "in", "qa", ":", "\n", "                            ", "answers", ",", "answer_starts", ",", "answer_ends", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "answer", "in", "qa", "[", "'answers'", "]", ":", "\n", "                                ", "answer_start", "=", "answer", "[", "'answer_start'", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", "[", "'text'", "]", ")", "\n", "answers", ".", "append", "(", "answer", "[", "'text'", "]", ")", "\n", "answer_starts", ".", "append", "(", "answer_start", ")", "\n", "answer_ends", ".", "append", "(", "answer_end", ")", "\n", "", "answer_example", "=", "{", "'answers'", ":", "answers", ",", "'answer_starts'", ":", "answer_starts", ",", "\n", "'answer_ends'", ":", "answer_ends", "}", "\n", "question_example", ".", "update", "(", "answer_example", ")", "\n", "\n", "", "example", "=", "{", "'idx'", ":", "len", "(", "examples", ")", "}", "\n", "example", ".", "update", "(", "context_example", ")", "\n", "example", ".", "update", "(", "question_example", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "if", "draft", "and", "len", "(", "examples", ")", "==", "100", ":", "\n", "                            ", "return", "examples", "\n", "", "", "", "else", ":", "\n", "                    ", "example", "=", "{", "'idx'", ":", "len", "(", "examples", ")", "}", "\n", "example", ".", "update", "(", "context_example", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "if", "draft", "and", "len", "(", "examples", ")", "==", "100", ":", "\n", "                        ", "return", "examples", "\n", "", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.file_interface._load_glove": [[77, 97], ["os.path.join", "numpy.array", "NotImplementedError", "open", "enumerate", "line.decode.decode", "line.decode.strip().split", "list", "vecs.append", "vocab.append", "map", "line.decode.strip"], "function", ["None"], ["", "", "def", "_load_glove", "(", "size", ",", "glove_dir", "=", "None", ",", "draft", "=", "False", ")", ":", "\n", "    ", "if", "glove_dir", "is", "None", ":", "\n", "        ", "glove_url", "=", "'http://nlp.stanford.edu/data/glove.6B.zip -O $GLOVE_DIR/glove.6B.zip'", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "glove_path", "=", "os", ".", "path", ".", "join", "(", "glove_dir", ",", "'glove.6B.%dd.txt'", "%", "size", ")", "\n", "with", "open", "(", "glove_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "vocab", "=", "[", "]", "\n", "vecs", "=", "[", "]", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "fp", ")", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "u' '", ")", "\n", "word", "=", "tokens", "[", "0", "]", "\n", "vec", "=", "list", "(", "map", "(", "float", ",", "tokens", "[", "1", ":", "]", ")", ")", "\n", "vecs", ".", "append", "(", "vec", ")", "\n", "vocab", ".", "append", "(", "word", ")", "\n", "if", "draft", "and", "idx", ">=", "99", ":", "\n", "                ", "break", "\n", "", "", "", "emb_mat", "=", "np", ".", "array", "(", "vecs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "vocab", ",", "emb_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.CharEmbedding.__init__": [[8, 14], ["torch.nn.Module.__init__", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "char_vocab_size", ",", "embed_dim", ")", ":", "\n", "        ", "super", "(", "CharEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "char_vocab_size", "=", "char_vocab_size", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "char_vocab_size", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.CharEmbedding.forward": [[15, 21], ["x.view", "model.CharEmbedding.embedding", "model.CharEmbedding.view", "torch.max", "x.size", "x.size", "model.CharEmbedding.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "flat_x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "flat_out", "=", "self", ".", "embedding", "(", "flat_x", ")", "\n", "out", "=", "flat_out", ".", "view", "(", "x", ".", "size", "(", ")", "+", "(", "flat_out", ".", "size", "(", ")", "[", "-", "1", "]", ",", ")", ")", "\n", "out", ",", "_", "=", "torch", ".", "max", "(", "out", ",", "-", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.__init__": [[24, 29], ["torch.nn.Module.__init__", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "word_vocab_size", "=", "None", ",", "embed_dim", "=", "None", ",", "requires_grad", "=", "True", ",", "cpu", "=", "False", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "word_vocab_size", ",", "embed_dim", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "_cpu", "=", "cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.forward": [[30, 39], ["x.to.to.to", "x.to.to.view", "model.WordEmbedding.embedding", "model.WordEmbedding.view", "out.to.to.to", "x.to.to.size", "x.to.to.size", "model.WordEmbedding.size"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "device", "=", "x", ".", "device", "\n", "weight_device", "=", "self", ".", "embedding", ".", "weight", ".", "device", "\n", "x", "=", "x", ".", "to", "(", "weight_device", ")", "\n", "flat_x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "flat_out", "=", "self", ".", "embedding", "(", "flat_x", ")", "\n", "out", "=", "flat_out", ".", "view", "(", "x", ".", "size", "(", ")", "+", "(", "flat_out", ".", "size", "(", ")", "[", "-", "1", "]", ",", ")", ")", "\n", "out", "=", "out", ".", "to", "(", "device", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to": [[40, 42], ["super().to"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "return", "self", "if", "self", ".", "_cpu", "else", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Highway.__init__": [[45, 52], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "Highway", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "gate_linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Highway.forward": [[53, 59], ["model.Highway.dropout", "model.Highway.relu", "model.Highway.sigmoid", "model.Highway.input_linear", "model.Highway.gate_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "input_", "=", "self", ".", "dropout", "(", "input_", ")", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "input_linear", "(", "input_", ")", ")", "\n", "gate", "=", "self", ".", "sigmoid", "(", "self", ".", "gate_linear", "(", "input_", ")", ")", "\n", "output", "=", "input_", "*", "gate", "+", "output", "*", "(", "1.0", "-", "gate", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.__init__": [[62, 75], ["torch.nn.Module.__init__", "model.WordEmbedding", "model.CharEmbedding", "model.WordEmbedding", "model.Highway", "model.Highway"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "char_vocab_size", ",", "glove_vocab_size", ",", "word_vocab_size", ",", "embed_dim", ",", "dropout", ",", "elmo", "=", "False", ",", "\n", "glove_cpu", "=", "False", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embedding", "=", "WordEmbedding", "(", "word_vocab_size", ",", "embed_dim", ")", "\n", "self", ".", "char_embedding", "=", "CharEmbedding", "(", "char_vocab_size", ",", "embed_dim", ")", "\n", "self", ".", "glove_embedding", "=", "WordEmbedding", "(", "glove_vocab_size", ",", "embed_dim", ",", "requires_grad", "=", "False", ",", "cpu", "=", "glove_cpu", ")", "\n", "self", ".", "output_size", "=", "2", "*", "embed_dim", "\n", "self", ".", "highway1", "=", "Highway", "(", "self", ".", "output_size", ",", "dropout", ")", "\n", "self", ".", "highway2", "=", "Highway", "(", "self", ".", "output_size", ",", "dropout", ")", "\n", "self", ".", "use_elmo", "=", "elmo", "\n", "self", ".", "elmo", "=", "None", "\n", "if", "self", ".", "use_elmo", ":", "\n", "            ", "self", ".", "output_size", "+=", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.load_glove": [[76, 81], ["torch.cat.to", "torch.cat", "torch.nn.Parameter", "torch.zeros().to", "torch.zeros", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to"], ["", "", "def", "load_glove", "(", "self", ",", "glove_emb_mat", ")", ":", "\n", "        ", "device", "=", "self", ".", "glove_embedding", ".", "embedding", ".", "weight", ".", "device", "\n", "glove_emb_mat", "=", "glove_emb_mat", ".", "to", "(", "device", ")", "\n", "glove_emb_mat", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "2", ",", "glove_emb_mat", ".", "size", "(", ")", "[", "-", "1", "]", ")", ".", "to", "(", "device", ")", ",", "glove_emb_mat", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "glove_embedding", ".", "embedding", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "glove_emb_mat", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.load_elmo": [[82, 86], ["Elmo().to", "Elmo"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.WordEmbedding.to"], ["", "def", "load_elmo", "(", "self", ",", "elmo_options_file", ",", "elmo_weights_file", ")", ":", "\n", "        ", "device", "=", "self", ".", "word_embedding", ".", "embedding", ".", "weight", ".", "device", "\n", "from", "allennlp", ".", "modules", ".", "elmo", "import", "Elmo", "\n", "self", ".", "elmo", "=", "Elmo", "(", "elmo_options_file", ",", "elmo_weights_file", ",", "1", ",", "dropout", "=", "0", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.init": [[87, 91], ["model.Embedding.load_glove", "model.Embedding.load_elmo"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.load_glove", "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.load_elmo"], ["", "def", "init", "(", "self", ",", "processed_metadata", ")", ":", "\n", "        ", "self", ".", "load_glove", "(", "processed_metadata", "[", "'glove_emb_mat'", "]", ")", "\n", "if", "self", ".", "use_elmo", ":", "\n", "            ", "self", ".", "load_elmo", "(", "processed_metadata", "[", "'elmo_options_file'", "]", ",", "processed_metadata", "[", "'elmo_weights_file'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Embedding.forward": [[92, 101], ["model.Embedding.char_embedding", "model.Embedding.glove_embedding", "torch.cat", "model.Embedding.highway2", "model.Embedding.highway1", "torch.cat", "model.Embedding.elmo"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "cx", ",", "gx", ",", "x", ",", "ex", "=", "None", ")", ":", "\n", "        ", "cx", "=", "self", ".", "char_embedding", "(", "cx", ")", "\n", "gx", "=", "self", ".", "glove_embedding", "(", "gx", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "cx", ",", "gx", "]", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "highway2", "(", "self", ".", "highway1", "(", "output", ")", ")", "\n", "if", "self", ".", "use_elmo", ":", "\n", "            ", "elmo", ",", "=", "self", ".", "elmo", "(", "ex", ")", "[", "'elmo_representations'", "]", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "elmo", "]", ",", "2", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.SelfSeqAtt.__init__": [[104, 116], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SelfSeqAtt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "query_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "key_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.SelfSeqAtt.forward": [[117, 127], ["model.SelfSeqAtt.dropout", "model.SelfSeqAtt.key_lstm", "model.SelfSeqAtt.key_lstm", "model.SelfSeqAtt.softmax", "model.SelfSeqAtt.matmul", "query.matmul", "mask.unsqueeze", "key.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "mask", ")", ":", "\n", "        ", "input_", "=", "self", ".", "dropout", "(", "input_", ")", "\n", "key_input", "=", "input_", "\n", "query_input", "=", "input_", "\n", "key", ",", "_", "=", "self", ".", "key_lstm", "(", "key_input", ")", "\n", "query", ",", "_", "=", "self", ".", "key_lstm", "(", "query_input", ")", "\n", "att", "=", "query", ".", "matmul", "(", "key", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "att", "=", "self", ".", "softmax", "(", "att", ")", "\n", "output", "=", "att", ".", "matmul", "(", "input_", ")", "\n", "return", "{", "'value'", ":", "output", ",", "'key'", ":", "key", ",", "'query'", ":", "query", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.ContextBoundary.__init__": [[130, 146], ["torch.nn.Module.__init__", "torch.nn.Dropout", "range", "range", "model.ContextBoundary.add_module", "model.ContextBoundary.add_module", "torch.nn.LSTM", "model.SelfSeqAtt"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "identity", "=", "True", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "ContextBoundary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_heads", ">=", "1", ",", "num_heads", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'lstm%d'", "%", "i", ",", "torch", ".", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", ")", "\n", "", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "identity", "=", "identity", "\n", "self", ".", "att_num_heads", "=", "num_heads", "-", "1", "if", "identity", "else", "num_heads", "\n", "for", "i", "in", "range", "(", "self", ".", "att_num_heads", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'self_att%d'", "%", "i", ",", "\n", "SelfSeqAtt", "(", "hidden_size", "*", "2", ",", "hidden_size", ",", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.ContextBoundary.forward": [[147, 159], ["dict", "model.ContextBoundary.dropout", "range", "range", "torch.cat", "model.ContextBoundary.named_children", "atts.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "m", ")", ":", "\n", "        ", "modules", "=", "dict", "(", "self", ".", "named_children", "(", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", ",", "_", "=", "modules", "[", "'lstm%d'", "%", "i", "]", "(", "x", ")", "\n", "", "atts", "=", "[", "x", "]", "if", "self", ".", "identity", "else", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "att_num_heads", ")", ":", "\n", "            ", "a", "=", "modules", "[", "'self_att%d'", "%", "i", "]", "(", "x", ",", "m", ")", "\n", "atts", ".", "append", "(", "a", "[", "'value'", "]", ")", "\n", "\n", "", "dense", "=", "torch", ".", "cat", "(", "atts", ",", "2", ")", "\n", "return", "{", "'dense'", ":", "dense", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.QuestionBoundary.__init__": [[162, 165], ["model.ContextBoundary.__init__"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "max_pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "QuestionBoundary", ",", "self", ")", ".", "__init__", "(", "input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "identity", "=", "False", ")", "\n", "self", ".", "max_pool", "=", "max_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.QuestionBoundary.forward": [[166, 173], ["model.ContextBoundary.forward", "d[].max"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Loss.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "m", ")", ":", "\n", "        ", "d", "=", "super", "(", ")", ".", "forward", "(", "x", ",", "m", ")", "\n", "if", "self", ".", "max_pool", ":", "\n", "            ", "dense", "=", "d", "[", "'dense'", "]", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "dense", "=", "d", "[", "'dense'", "]", "[", ":", ",", "0", ",", ":", "]", "\n", "", "return", "{", "'dense'", ":", "dense", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Model.__init__": [[176, 207], ["base.Model.__init__", "model.Embedding", "model.ContextBoundary", "model.ContextBoundary", "model.QuestionBoundary", "model.QuestionBoundary", "torch.nn.Softmax", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "char_vocab_size", ",", "\n", "glove_vocab_size", ",", "\n", "word_vocab_size", ",", "\n", "hidden_size", ",", "\n", "embed_size", ",", "\n", "dropout", ",", "\n", "num_heads", ",", "\n", "max_ans_len", "=", "7", ",", "\n", "elmo", "=", "False", ",", "\n", "max_pool", "=", "False", ",", "\n", "num_layers", "=", "1", ",", "\n", "glove_cpu", "=", "False", ",", "\n", "metric", "=", "'ip'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "Embedding", "(", "char_vocab_size", ",", "glove_vocab_size", ",", "word_vocab_size", ",", "embed_size", ",", "dropout", ",", "\n", "elmo", "=", "elmo", ",", "glove_cpu", "=", "glove_cpu", ")", "\n", "self", ".", "context_embedding", "=", "self", ".", "embedding", "\n", "self", ".", "question_embedding", "=", "self", ".", "embedding", "\n", "word_size", "=", "self", ".", "embedding", ".", "output_size", "\n", "context_input_size", "=", "word_size", "\n", "question_input_size", "=", "word_size", "\n", "self", ".", "context_start", "=", "ContextBoundary", "(", "context_input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "num_layers", "=", "num_layers", ")", "\n", "self", ".", "context_end", "=", "ContextBoundary", "(", "context_input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "num_layers", "=", "num_layers", ")", "\n", "self", ".", "question_start", "=", "QuestionBoundary", "(", "question_input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "max_pool", "=", "max_pool", ")", "\n", "self", ".", "question_end", "=", "QuestionBoundary", "(", "question_input_size", ",", "hidden_size", ",", "dropout", ",", "num_heads", ",", "max_pool", "=", "max_pool", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "max_ans_len", "=", "max_ans_len", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "word_size", ",", "1", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Model.forward": [[208, 260], ["model.Model.question_embedding", "model.Model.context_embedding", "model.Model.question_start", "model.Model.question_end", "model.Model.context_start", "model.Model.context_end", "model.Model.softmax", "model.Model.softmax", "[].max", "[].max", "torch.sum", "torch.sum", "model.Model.unsqueeze", "model.Model.unsqueeze", "q1.unsqueeze", "q2.unsqueeze", "torch.sum", "torch.sum().unsqueeze", "torch.sum", "torch.sum().unsqueeze", "torch.ones().triu", "torch.ones().triu", "prob.max", "prob.max", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "prob.size", "prob.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "context_char_idxs", ",", "\n", "context_glove_idxs", ",", "\n", "context_word_idxs", ",", "\n", "question_char_idxs", ",", "\n", "question_glove_idxs", ",", "\n", "question_word_idxs", ",", "\n", "context_elmo_idxs", "=", "None", ",", "\n", "question_elmo_idxs", "=", "None", ",", "\n", "num_samples", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "q", "=", "self", ".", "question_embedding", "(", "question_char_idxs", ",", "question_glove_idxs", ",", "question_word_idxs", ",", "ex", "=", "question_elmo_idxs", ")", "\n", "x", "=", "self", ".", "context_embedding", "(", "context_char_idxs", ",", "context_glove_idxs", ",", "context_word_idxs", ",", "ex", "=", "context_elmo_idxs", ")", "\n", "\n", "mq", "=", "(", "(", "question_glove_idxs", "==", "0", ")", ".", "float", "(", ")", "*", "-", "1e9", ")", "\n", "qd1", "=", "self", ".", "question_start", "(", "q", ",", "mq", ")", "\n", "qd2", "=", "self", ".", "question_end", "(", "q", ",", "mq", ")", "\n", "q1", "=", "qd1", "[", "'dense'", "]", "\n", "q2", "=", "qd2", "[", "'dense'", "]", "\n", "# print(qs1[0, question_word_idxs[0] > 0])", "\n", "\n", "mx", "=", "(", "context_glove_idxs", "==", "0", ")", ".", "float", "(", ")", "*", "-", "1e9", "\n", "\n", "hd1", "=", "self", ".", "context_start", "(", "x", ",", "mx", ")", "\n", "hd2", "=", "self", ".", "context_end", "(", "x", ",", "mx", ")", "\n", "x1", "=", "hd1", "[", "'dense'", "]", "\n", "x2", "=", "hd2", "[", "'dense'", "]", "\n", "\n", "logits1", "=", "torch", ".", "sum", "(", "x1", "*", "q1", ".", "unsqueeze", "(", "1", ")", ",", "2", ")", "+", "mx", "\n", "logits2", "=", "torch", ".", "sum", "(", "x2", "*", "q2", ".", "unsqueeze", "(", "1", ")", ",", "2", ")", "+", "mx", "\n", "\n", "if", "self", ".", "metric", "==", "'l2'", ":", "\n", "            ", "logits1", "+=", "-", "0.5", "*", "(", "torch", ".", "sum", "(", "x1", "*", "x1", ",", "2", ")", "+", "torch", ".", "sum", "(", "q1", "*", "q1", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "logits2", "+=", "-", "0.5", "*", "(", "torch", ".", "sum", "(", "x2", "*", "x2", ",", "2", ")", "+", "torch", ".", "sum", "(", "q2", "*", "q2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "", "prob1", "=", "self", ".", "softmax", "(", "logits1", ")", "\n", "prob2", "=", "self", ".", "softmax", "(", "logits2", ")", "\n", "prob", "=", "prob1", ".", "unsqueeze", "(", "2", ")", "*", "prob2", ".", "unsqueeze", "(", "1", ")", "\n", "mask", "=", "(", "torch", ".", "ones", "(", "*", "prob", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "triu", "(", ")", "-", "torch", ".", "ones", "(", "*", "prob", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "triu", "(", "self", ".", "max_ans_len", ")", ")", ".", "to", "(", "\n", "prob", ".", "device", ")", "\n", "prob", "*=", "mask", "\n", "_", ",", "yp1", "=", "prob", ".", "max", "(", "2", ")", "[", "0", "]", ".", "max", "(", "1", ")", "\n", "_", ",", "yp2", "=", "prob", ".", "max", "(", "1", ")", "[", "0", "]", ".", "max", "(", "1", ")", "\n", "\n", "return", "{", "'logits1'", ":", "logits1", ",", "\n", "'logits2'", ":", "logits2", ",", "\n", "'yp1'", ":", "yp1", ",", "\n", "'yp2'", ":", "yp2", ",", "\n", "'x1'", ":", "x1", ",", "\n", "'x2'", ":", "x2", ",", "\n", "'q1'", ":", "q1", ",", "\n", "'q2'", ":", "q2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Model.init": [[261, 263], ["model.Model.embedding.init"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init"], ["", "def", "init", "(", "self", ",", "processed_metadata", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "init", "(", "processed_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Model.get_context": [[264, 285], ["model.Model.context_embedding", "model.Model.context_start", "model.Model.context_end", "enumerate", "tuple", "zip", "range", "torch.stack", "out.append", "range", "min", "torch.cat", "pos_list.append", "vec_list.append", "tuple"], "methods", ["None"], ["", "def", "get_context", "(", "self", ",", "context_char_idxs", ",", "context_glove_idxs", ",", "context_word_idxs", ",", "context_elmo_idxs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "l", "=", "(", "context_glove_idxs", ">", "0", ")", ".", "sum", "(", "1", ")", "\n", "mx", "=", "(", "context_glove_idxs", "==", "0", ")", ".", "float", "(", ")", "*", "-", "1e9", "\n", "x", "=", "self", ".", "context_embedding", "(", "context_char_idxs", ",", "context_glove_idxs", ",", "context_word_idxs", ",", "ex", "=", "context_elmo_idxs", ")", "\n", "xd1", "=", "self", ".", "context_start", "(", "x", ",", "mx", ")", "\n", "x1", "=", "xd1", "[", "'dense'", "]", "\n", "xd2", "=", "self", ".", "context_end", "(", "x", ",", "mx", ")", "\n", "x2", "=", "xd2", "[", "'dense'", "]", "\n", "out", "=", "[", "]", "\n", "for", "k", ",", "(", "lb", ",", "x1b", ",", "x2b", ")", "in", "enumerate", "(", "zip", "(", "l", ",", "x1", ",", "x2", ")", ")", ":", "\n", "            ", "pos_list", "=", "[", "]", "\n", "vec_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "lb", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "i", "+", "self", ".", "max_ans_len", ",", "lb", ")", ")", ":", "\n", "                    ", "vec", "=", "torch", ".", "cat", "(", "[", "x1b", "[", "i", "]", ",", "x2b", "[", "j", "]", "]", ",", "0", ")", "\n", "pos_list", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "vec_list", ".", "append", "(", "vec", ")", "\n", "\n", "", "", "dense", "=", "torch", ".", "stack", "(", "vec_list", ",", "0", ")", "\n", "out", ".", "append", "(", "(", "tuple", "(", "pos_list", ")", ",", "dense", ")", ")", "\n", "", "return", "tuple", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Model.get_question": [[286, 296], ["model.Model.question_embedding", "model.Model.question_start", "model.Model.question_end", "list", "torch.cat().unsqueeze", "torch.cat"], "methods", ["None"], ["", "def", "get_question", "(", "self", ",", "question_char_idxs", ",", "question_glove_idxs", ",", "question_word_idxs", ",", "question_elmo_idxs", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "mq", "=", "(", "(", "question_glove_idxs", "==", "0", ")", ".", "float", "(", ")", "*", "-", "1e9", ")", "\n", "q", "=", "self", ".", "question_embedding", "(", "question_char_idxs", ",", "question_glove_idxs", ",", "question_word_idxs", ",", "ex", "=", "question_elmo_idxs", ")", "\n", "qd1", "=", "self", ".", "question_start", "(", "q", ",", "mq", ")", "\n", "q1", "=", "qd1", "[", "'dense'", "]", "\n", "qd2", "=", "self", ".", "question_end", "(", "q", ",", "mq", ")", "\n", "q2", "=", "qd2", "[", "'dense'", "]", "\n", "out", "=", "list", "(", "torch", ".", "cat", "(", "[", "q1", ",", "q2", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Loss.__init__": [[299, 302], ["base.Loss.__init__", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cel", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.model.Loss.forward": [[303, 310], ["model.Loss.cel", "model.Loss.cel"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits1", ",", "logits2", ",", "answer_word_starts", ",", "answer_word_ends", ",", "**", "kwargs", ")", ":", "\n", "        ", "answer_word_starts", "-=", "1", "\n", "answer_word_ends", "-=", "1", "\n", "loss1", "=", "self", ".", "cel", "(", "logits1", ",", "answer_word_starts", "[", ":", ",", "0", "]", ")", "\n", "loss2", "=", "self", ".", "cel", "(", "logits2", ",", "answer_word_ends", "[", ":", ",", "0", "]", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.argument_parser.ArgumentParser.__init__": [[6, 8], ["base.ArgumentParser.__init__"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "description", "=", "'baseline'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ArgumentParser", ",", "self", ")", ".", "__init__", "(", "description", "=", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.argument_parser.ArgumentParser.add_arguments": [[9, 41], ["super().add_arguments", "os.path.expanduser", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.add_arguments"], ["", "def", "add_arguments", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_arguments", "(", ")", "\n", "\n", "home", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "\n", "\n", "# Metadata paths", "\n", "self", ".", "add_argument", "(", "'--static_dir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "home", ",", "'data'", ")", ")", "\n", "self", ".", "add_argument", "(", "'--glove_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'location of GloVe'", ")", "\n", "self", ".", "add_argument", "(", "'--elmo_options_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--elmo_weights_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "# Model arguments", "\n", "self", ".", "add_argument", "(", "'--word_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "self", ".", "add_argument", "(", "'--char_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "self", ".", "add_argument", "(", "'--glove_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "400002", ")", "\n", "self", ".", "add_argument", "(", "'--glove_size'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "self", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "self", ".", "add_argument", "(", "'--elmo'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "add_argument", "(", "'--max_pool'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# Training arguments. Only valid during training", "\n", "self", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "self", ".", "add_argument", "(", "'--max_context_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "add_argument", "(", "'--max_question_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "add_argument", "(", "'--no_bucket'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--no_shuffle'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Other arguments", "\n", "self", ".", "add_argument", "(", "'--glove_cuda'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.baseline.argument_parser.ArgumentParser.parse_args": [[42, 60], ["super().parse_args", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.parse_args"], ["", "def", "parse_args", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "args", "=", "super", "(", ")", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "draft", ":", "\n", "            ", "args", ".", "glove_vocab_size", "=", "102", "\n", "\n", "", "if", "args", ".", "glove_dir", "is", "None", ":", "\n", "            ", "args", ".", "glove_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'glove'", ")", "\n", "", "if", "args", ".", "elmo_options_file", "is", "None", ":", "\n", "            ", "args", ".", "elmo_options_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'elmo'", ",", "'options.json'", ")", "\n", "", "if", "args", ".", "elmo_weights_file", "is", "None", ":", "\n", "            ", "args", ".", "elmo_weights_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'elmo'", ",", "'weights.hdf5'", ")", "\n", "\n", "", "args", ".", "embed_size", "=", "args", ".", "glove_size", "\n", "args", ".", "glove_cpu", "=", "not", "args", ".", "glove_cuda", "\n", "args", ".", "bucket", "=", "not", "args", ".", "no_bucket", "\n", "args", ".", "shuffle", "=", "not", "args", ".", "no_shuffle", "\n", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.construct": [[7, 9], ["NotImplementedError"], "methods", ["None"], ["import", "torch", "\n", "import", "torch", ".", "utils", ".", "data", "\n", "from", "scipy", ".", "sparse", "import", "csc_matrix", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.state_dict": [[10, 12], ["NotImplementedError"], "methods", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "import", "base", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.load_state_dict": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["\n", "\n", "class", "Tokenizer", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["\n", "", "", "class", "PTBSentTokenizer", "(", "Tokenizer", ")", ":", "\n", "    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_batch": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["        ", "sents", "=", "nltk", ".", "sent_tokenize", "(", "in_", ")", "\n", "return", "_get_spans", "(", "in_", ",", "sents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_context": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["\n", "", "", "class", "PTBWordTokenizer", "(", "Tokenizer", ")", ":", "\n", "    ", "def", "tokenize", "(", "self", ",", "in_", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_context_batch": [[28, 30], ["NotImplementedError"], "methods", ["None"], ["        ", "in_", "=", "in_", ".", "replace", "(", "'``'", ",", "'\" '", ")", ".", "replace", "(", "\"''\"", ",", "'\" '", ")", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "words", "=", "nltk", ".", "word_tokenize", "(", "in_", ")", "\n", "words", "=", "tuple", "(", "word", ".", "replace", "(", "'``'", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "for", "word", "in", "words", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_question": [[31, 33], ["NotImplementedError"], "methods", ["None"], ["return", "_get_spans", "(", "in_", ",", "words", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.postprocess_question_batch": [[34, 36], ["NotImplementedError"], "methods", ["None"], ["", "", "class", "Processor", "(", "base", ".", "Processor", ")", ":", "\n", "    ", "keys", "=", "{", "'context_word_idxs'", ",", "\n", "'context_glove_idxs'", ",", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.collate": [[37, 39], ["NotImplementedError"], "methods", ["None"], ["'context_char_idxs'", ",", "\n", "'question_word_idxs'", ",", "\n", "'question_glove_idxs'", ",", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.process_metadata": [[40, 42], ["NotImplementedError"], "methods", ["None"], ["'question_char_idxs'", ",", "\n", "'answer_word_starts'", ",", "\n", "'answer_word_ends'", ",", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.get_dump": [[43, 45], ["NotImplementedError"], "methods", ["None"], ["'idx'", "}", "\n", "depths", "=", "{", "'context_word_idxs'", ":", "1", ",", "\n", "'context_glove_idxs'", ":", "1", ",", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Sampler.__init__": [[48, 51], ["None"], "methods", ["None"], ["'question_glove_idxs'", ":", "1", ",", "\n", "'question_char_idxs'", ":", "2", ",", "\n", "'answer_word_starts'", ":", "1", ",", "\n", "'answer_word_ends'", ":", "1", ",", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.__init__": [[13, 34], ["os.path.join", "os.path.splitext", "os.path.splitext"], "methods", ["None"], ["self", ".", "_elmo_options_file", "=", "elmo_options_file", "\n", "self", ".", "_elmo_weights_file", "=", "elmo_weights_file", "\n", "super", "(", "FileInterface", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "", "def", "load_train", "(", "self", ")", ":", "\n", "        ", "return", "_load_squad", "(", "self", ".", "_train_path", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "\n", "", "def", "load_test", "(", "self", ")", ":", "\n", "        ", "return", "_load_squad", "(", "self", ".", "_test_path", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "\n", "", "def", "load_metadata", "(", "self", ")", ":", "\n", "        ", "glove_vocab", ",", "glove_emb_mat", "=", "_load_glove", "(", "self", ".", "_glove_size", ",", "glove_dir", "=", "self", ".", "_glove_dir", ",", "draft", "=", "self", ".", "_draft", ")", "\n", "return", "{", "'glove_vocab'", ":", "glove_vocab", ",", "\n", "'glove_emb_mat'", ":", "glove_emb_mat", ",", "\n", "'elmo_options_file'", ":", "self", ".", "_elmo_options_file", ",", "\n", "'elmo_weights_file'", ":", "self", ".", "_elmo_weights_file", "}", "\n", "\n", "\n", "", "", "def", "_load_squad", "(", "squad_path", ",", "draft", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "squad_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "squad", "=", "json", ".", "load", "(", "fp", ")", "\n", "examples", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface._bind": [[35, 38], ["None"], "methods", ["None"], ["for", "article", "in", "squad", "[", "'data'", "]", ":", "\n", "            ", "for", "para_idx", ",", "paragraph", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "                ", "cid", "=", "'%s_%d'", "%", "(", "article", "[", "'title'", "]", ",", "para_idx", ")", "\n", "if", "'context'", "in", "paragraph", ":", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save": [[39, 46], ["os.path.join", "save_fn", "str", "os.path.exists", "os.makedirs"], "methods", ["None"], ["                    ", "context", "=", "paragraph", "[", "'context'", "]", "\n", "context_example", "=", "{", "'cid'", ":", "cid", ",", "'context'", ":", "context", "}", "\n", "", "else", ":", "\n", "                    ", "context_example", "=", "{", "}", "\n", "\n", "", "if", "'qas'", "in", "paragraph", ":", "\n", "                    ", "for", "question_idx", ",", "qa", "in", "enumerate", "(", "paragraph", "[", "'qas'", "]", ")", ":", "\n", "                        ", "id_", "=", "qa", "[", "'id'", "]", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save_args": [[47, 52], ["os.path.exists", "os.makedirs", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump"], ["qid", "=", "'%s_%d'", "%", "(", "cid", ",", "question_idx", ")", "\n", "question", "=", "qa", "[", "'question'", "]", "\n", "question_example", "=", "{", "'id'", ":", "id_", ",", "'qid'", ":", "qid", ",", "'question'", ":", "question", "}", "\n", "if", "'answers'", "in", "qa", ":", "\n", "                            ", "answers", ",", "answer_starts", ",", "answer_ends", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "answer", "in", "qa", "[", "'answers'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load": [[53, 63], ["load_fn", "os.path.join", "str"], "methods", ["None"], ["                                ", "answer_start", "=", "answer", "[", "'answer_start'", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", "[", "'text'", "]", ")", "\n", "answers", ".", "append", "(", "answer", "[", "'text'", "]", ")", "\n", "answer_starts", ".", "append", "(", "answer_start", ")", "\n", "answer_ends", ".", "append", "(", "answer_end", ")", "\n", "", "answer_example", "=", "{", "'answers'", ":", "answers", ",", "'answer_starts'", ":", "answer_starts", ",", "\n", "'answer_ends'", ":", "answer_ends", "}", "\n", "question_example", ".", "update", "(", "answer_example", ")", "\n", "\n", "", "example", "=", "{", "'idx'", ":", "len", "(", "examples", ")", "}", "\n", "example", ".", "update", "(", "context_example", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.pred": [[64, 70], ["os.path.exists", "os.makedirs", "open", "json.dump", "print", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump"], ["example", ".", "update", "(", "question_example", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "if", "draft", "and", "len", "(", "examples", ")", "==", "100", ":", "\n", "                            ", "return", "examples", "\n", "", "", "", "else", ":", "\n", "                    ", "example", "=", "{", "'idx'", ":", "len", "(", "examples", ")", "}", "\n", "example", ".", "update", "(", "context_example", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.report": [[71, 92], ["kwargs.items", "file_interface.FileInterface._report.append", "os.path.exists", "os.makedirs", "os.path.exists", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerows", "os.path.dirname", "os.path.dirname", "len", "open", "csv.DictReader", "list", "file_interface.FileInterface._report.extend", "file_interface.FileInterface._report_header.append", "kwargs.items", "file_interface.FileInterface._report_header.append"], "methods", ["None"], ["examples", ".", "append", "(", "example", ")", "\n", "if", "draft", "and", "len", "(", "examples", ")", "==", "100", ":", "\n", "                        ", "return", "examples", "\n", "", "", "", "", "return", "examples", "\n", "\n", "\n", "", "", "def", "_load_glove", "(", "size", ",", "glove_dir", "=", "None", ",", "draft", "=", "False", ")", ":", "\n", "    ", "if", "glove_dir", "is", "None", ":", "\n", "        ", "glove_url", "=", "'http://nlp.stanford.edu/data/glove.6B.zip -O $GLOVE_DIR/glove.6B.zip'", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "glove_path", "=", "os", ".", "path", ".", "join", "(", "glove_dir", ",", "'glove.6B.%dd.txt'", "%", "size", ")", "\n", "with", "open", "(", "glove_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "vocab", "=", "[", "]", "\n", "vecs", "=", "[", "]", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "fp", ")", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "u' '", ")", "\n", "word", "=", "tokens", "[", "0", "]", "\n", "vec", "=", "list", "(", "map", "(", "float", ",", "tokens", "[", "1", ":", "]", ")", ")", "\n", "vecs", ".", "append", "(", "vec", ")", "\n", "vocab", ".", "append", "(", "word", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.question_emb": [[93, 99], ["os.path.join", "savez", "os.path.exists", "os.makedirs"], "methods", ["None"], ["if", "draft", "and", "idx", ">=", "99", ":", "\n", "                ", "break", "\n", "", "", "", "emb_mat", "=", "np", ".", "array", "(", "vecs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "vocab", ",", "emb_mat", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.context_emb": [[100, 121], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "print", "savez", "print", "os.path.join", "open", "json.dump", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.context_load": [[122, 143], ["os.listdir", "tuple", "tuple", "tuple", "zip", "random.shuffle", "os.path.join", "open", "json.load", "scipy.sparse.load_npz", "numpy.load", "open", "json.load", "os.path.splitext", "os.path.splitext", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.archive": [[144, 152], ["shutil.make_archive", "shutil.rmtree", "shutil.make_archive", "shutil.rmtree"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.cache": [[153, 159], ["os.path.exists", "preprocess", "torch.save", "torch.load"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.preprocess", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.dump": [[160, 166], ["os.path.join", "os.path.dirname", "torch.save", "os.path.exists", "os.makedirs", "str().zfill", "str"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.bind": [[167, 192], ["file_interface.FileInterface._bind", "torch.load", "processor.load_state_dict", "model.load_state_dict", "print", "os.path.join", "torch.save", "print", "model.eval", "optimizer.load_state_dict", "processor.state_dict", "model.state_dict", "optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface._bind", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.load_state_dict", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.load_state_dict", "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.save", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.load_state_dict", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.state_dict", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.state_dict", "home.repos.pwc.inspect_result.uwnlp_piqa.base.processor.Processor.state_dict"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_train": [[193, 195], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_test": [[196, 198], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.file_interface.FileInterface.load_metadata": [[199, 201], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.forward": [[7, 13], ["NotImplementedError"], "methods", ["None"], ["class", "CharEmbedding", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "char_vocab_size", ",", "embed_dim", ")", ":", "\n", "        ", "super", "(", "CharEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "char_vocab_size", "=", "char_vocab_size", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "char_vocab_size", ",", "embed_dim", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.init": [[14, 16], ["NotImplementedError"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "flat_x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.get_context": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["flat_out", "=", "self", ".", "embedding", "(", "flat_x", ")", "\n", "out", "=", "flat_out", ".", "view", "(", "x", ".", "size", "(", ")", "+", "(", "flat_out", ".", "size", "(", ")", "[", "-", "1", "]", ",", ")", ")", "\n", "out", ",", "_", "=", "torch", ".", "max", "(", "out", ",", "-", "2", ")", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Model.get_question": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.model.Loss.forward": [[25, 31], ["NotImplementedError"], "methods", ["None"], ["        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "word_vocab_size", ",", "embed_dim", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "_cpu", "=", "cpu", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "device", "=", "x", ".", "device", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__": [[6, 8], ["argparse.ArgumentParser.__init__"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "description", "=", "'baseline'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ArgumentParser", ",", "self", ")", ".", "__init__", "(", "description", "=", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.add_arguments": [[9, 61], ["os.path.expanduser", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "argument_parser.ArgumentParser.add_argument", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "add_arguments", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_arguments", "(", ")", "\n", "\n", "home", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "\n", "\n", "# Metadata paths", "\n", "self", ".", "add_argument", "(", "'--static_dir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "home", ",", "'data'", ")", ")", "\n", "self", ".", "add_argument", "(", "'--glove_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'location of GloVe'", ")", "\n", "self", ".", "add_argument", "(", "'--elmo_options_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--elmo_weights_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "# Model arguments", "\n", "self", ".", "add_argument", "(", "'--word_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "self", ".", "add_argument", "(", "'--char_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "self", ".", "add_argument", "(", "'--glove_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "400002", ")", "\n", "self", ".", "add_argument", "(", "'--glove_size'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "self", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "self", ".", "add_argument", "(", "'--elmo'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--num_heads'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "add_argument", "(", "'--max_pool'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# Training arguments. Only valid during training", "\n", "self", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "self", ".", "add_argument", "(", "'--max_context_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "add_argument", "(", "'--max_question_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "add_argument", "(", "'--no_bucket'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--no_shuffle'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Other arguments", "\n", "self", ".", "add_argument", "(", "'--glove_cuda'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "", "def", "parse_args", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "args", "=", "super", "(", ")", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "draft", ":", "\n", "            ", "args", ".", "glove_vocab_size", "=", "102", "\n", "\n", "", "if", "args", ".", "glove_dir", "is", "None", ":", "\n", "            ", "args", ".", "glove_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'glove'", ")", "\n", "", "if", "args", ".", "elmo_options_file", "is", "None", ":", "\n", "            ", "args", ".", "elmo_options_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'elmo'", ",", "'options.json'", ")", "\n", "", "if", "args", ".", "elmo_weights_file", "is", "None", ":", "\n", "            ", "args", ".", "elmo_weights_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "static_dir", ",", "'elmo'", ",", "'weights.hdf5'", ")", "\n", "\n", "", "args", ".", "embed_size", "=", "args", ".", "glove_size", "\n", "args", ".", "glove_cpu", "=", "not", "args", ".", "glove_cuda", "\n", "args", ".", "bucket", "=", "not", "args", ".", "no_bucket", "\n", "args", ".", "shuffle", "=", "not", "args", ".", "no_shuffle", "\n", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.parse_args": [[62, 92], ["super().parse_args", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uwnlp_piqa.base.argument_parser.ArgumentParser.parse_args"], []]}