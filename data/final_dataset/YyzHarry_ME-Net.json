{"home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.CIFAR10_Dataset.__init__": [[122, 134], ["train_adv.get_data", "train_adv.CIFAR10_Dataset.train_data.reshape", "train_adv.CIFAR10_Dataset.train_data.transpose", "train_adv.get_data", "train_adv.CIFAR10_Dataset.test_data.reshape", "train_adv.CIFAR10_Dataset.test_data.transpose"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", ",", "self", ".", "train_labels", "=", "get_data", "(", "train", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "self", ".", "train_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "get_data", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "self", ".", "test_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.CIFAR10_Dataset.__getitem__": [[135, 151], ["PIL.Image.fromarray", "transform_train", "transform_test", "train_adv.CIFAR10_Dataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.target_transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "img", "=", "transform_train", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "transform_test", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.CIFAR10_Dataset.__len__": [[152, 157], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.nucnorm.forward": [[183, 220], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "train_adv.nuclear_norm_solve", "range", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "train_adv.nuclear_norm_solve", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "random.uniform", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "", "W", "=", "nuclear_norm_solve", "(", "img", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "W", "=", "nuclear_norm_solve", "(", "img", "[", "channel", "]", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.nucnorm.backward": [[221, 225], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.usvt.forward": [[236, 284], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.linalg.svd", "numpy.zeros", "range", "numpy.concatenate", "range", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "len", "int", "numpy.dot", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "len", "numpy.linalg.svd", "numpy.zeros", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.zeros", "numpy.dot", "int", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "numpy.dot", "random.uniform", "random.uniform"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", "*", "c", ")", "\n", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                    ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "S", "=", "np", ".", "concatenate", "(", "(", "S", ",", "np", ".", "zeros", "(", "(", "h", ",", "w", "*", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "[", "channel", "]", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                        ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.usvt.backward": [[285, 289], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.softimp.forward": [[300, 340], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "fancyimpute.SoftImpute().fit_transform", "range", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.random.binomial().reshape().astype", "numpy.random.binomial().reshape().astype", "numpy.random.binomial().reshape().astype", "numpy.random.binomial().reshape().astype", "fancyimpute.SoftImpute().fit_transform", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "fancyimpute.SoftImpute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "numpy.random.binomial().reshape", "fancyimpute.SoftImpute", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "numpy.random.binomial", "random.uniform", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", ".", "astype", "(", "float", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", ".", "astype", "(", "float", ")", "\n", "", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask", "*", "img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "globe_train", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "startp", "+", "mask_train_cnt", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", ",", "\n", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", ".", "astype", "(", "float", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random", ".", "uniform", "(", "args", ".", "startp", ",", "args", ".", "endp", ")", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", ".", "astype", "(", "float", ")", "\n", "", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "mask_img", "=", "img", "[", "channel", "]", "*", "mask", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask_img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.softimp.backward": [[341, 345], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.MENet.__init__": [[354, 357], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "MENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.MENet.forward": [[358, 361], ["[].apply", "train_adv.MENet.model", "globals"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "globals", "(", ")", "[", "args", ".", "me_type", "]", ".", "apply", "(", "input", ")", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.AttackPGD.__init__": [[370, 378], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "config", ")", ":", "\n", "        ", "super", "(", "AttackPGD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rand", "=", "config", "[", "'random_start'", "]", "\n", "self", ".", "step_size", "=", "config", "[", "'step_size'", "]", "\n", "self", ".", "epsilon", "=", "config", "[", "'epsilon'", "]", "\n", "self", ".", "num_steps", "=", "config", "[", "'num_steps'", "]", "\n", "assert", "config", "[", "'loss_func'", "]", "==", "'xent'", ",", "'Use cross-entropy as loss function.'", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.AttackPGD.forward": [[379, 398], ["inputs.detach", "range", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "train_adv.AttackPGD.model", "train_adv.AttackPGD.model", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "train_adv.AttackPGD.model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "grad.detach"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "not", "args", ".", "attack", ":", "\n", "            ", "return", "self", ".", "model", "(", "inputs", ")", ",", "inputs", "\n", "\n", "", "x", "=", "inputs", ".", "detach", "(", ")", "\n", "if", "self", ".", "rand", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "zeros_like", "(", "x", ")", ".", "uniform_", "(", "-", "self", ".", "epsilon", ",", "self", ".", "epsilon", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "x", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "size_average", "=", "False", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x", "]", ")", "[", "0", "]", "\n", "# print(grad)", "\n", "x", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x", ",", "inputs", "-", "self", ".", "epsilon", ")", ",", "inputs", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "self", ".", "model", "(", "x", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.unpickle": [[79, 84], ["open", "pickle.load"], "function", ["None"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "pickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.get_data": [[86, 112], ["range", "range", "train_adv.unpickle", "train_adv.unpickle", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "str", "train_adv.train"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.train"], ["", "def", "get_data", "(", "train", "=", "False", ")", ":", "\n", "    ", "data", "=", "None", "\n", "labels", "=", "None", "\n", "if", "train", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/data_batch_'", "+", "str", "(", "i", ")", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "data", "=", "batch", "[", "b'data'", "]", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "batch", "[", "b'data'", "]", "]", ")", "\n", "", "if", "i", "==", "1", ":", "\n", "                ", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "", "else", ":", "\n", "                ", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "batch", "[", "b'labels'", "]", "]", ")", "\n", "\n", "", "", "data_tmp", "=", "data", "\n", "labels_tmp", "=", "labels", "\n", "# repeat n times for different masks", "\n", "for", "i", "in", "range", "(", "args", ".", "mask_num", "-", "1", ")", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "data_tmp", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "labels_tmp", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/test_batch'", ")", "\n", "data", "=", "batch", "[", "b'data'", "]", "\n", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.target_transform": [[114, 118], ["numpy.array", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "target_transform", "(", "label", ")", ":", "\n", "    ", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.nuclear_norm_solve": [[159, 172], ["Variable", "Minimize", "Problem", "Problem.solve", "sum_squares", "norm", "multiply"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve"], ["", "", "", "def", "nuclear_norm_solve", "(", "A", ",", "mask", ",", "mu", ")", ":", "\n", "    ", "\"\"\"Nuclear norm minimization solver.\n\n    :param A: matrix to complete\n    :param mask: matrix with entries zero (if missing) or one (if present)\n    :param mu: control trade-off between nuclear norm and square loss\n    :return: completed matrix\n    \"\"\"", "\n", "X", "=", "Variable", "(", "shape", "=", "A", ".", "shape", ")", "\n", "objective", "=", "Minimize", "(", "mu", "*", "norm", "(", "X", ",", "\"nuc\"", ")", "+", "sum_squares", "(", "multiply", "(", "mask", ",", "X", "-", "A", ")", ")", ")", "\n", "problem", "=", "Problem", "(", "objective", ",", "[", "]", ")", "\n", "problem", ".", "solve", "(", "solver", "=", "SCS", ")", "\n", "return", "X", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.train": [[400, 430], ["print", "net.train", "enumerate", "math.ceil", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "utils.progress_bar", "inputs.to", "targets.to", "len", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.train", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.softimp.backward", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "global", "globe_train", ",", "mask_train_cnt", "\n", "globe_train", "=", "True", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "mask_train_cnt", "=", "math", ".", "ceil", "(", "(", "batch_idx", "+", "1", ")", "/", "(", "50000", "/", "batch_size", ")", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "pert_inputs", "=", "net", "(", "inputs", ",", "targets", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "# Bar visualization", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "\n", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "", "return", "train_loss", "/", "batch_idx", ",", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.test": [[432, 457], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "criterion.item", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "utils.progress_bar", "inputs.to", "targets.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "criterion", "len", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "global", "globe_train", "\n", "globe_train", "=", "False", "\n", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", ",", "pert_inputs", "=", "net", "(", "inputs", ",", "targets", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "# Bar visualization", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "test_loader", ")", ",", "\n", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "", "", "return", "test_loss", "/", "batch_idx", ",", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.save_checkpoint": [[459, 470], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "os.path.isdir", "os.mkdir", "str"], "function", ["None"], ["", "def", "save_checkpoint", "(", "acc", ",", "epoch", ")", ":", "\n", "    ", "print", "(", "'=====> Saving checkpoint...'", ")", "\n", "state", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "args", ".", "save_dir", "+", "args", ".", "name", "+", "'_epoch'", "+", "str", "(", "epoch", ")", "+", "'.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_adv.adjust_lr": [[472, 482], ["None"], "function", ["None"], ["", "def", "adjust_lr", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "50", ":", "\n", "        ", "lr", "/=", "10", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "/=", "10", "\n", "", "if", "epoch", ">=", "150", ":", "\n", "        ", "lr", "/=", "10", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.CIFAR10_testset.__init__": [[84, 89], ["attack_whitebox.get_data", "attack_whitebox.CIFAR10_testset.test_data.reshape", "attack_whitebox.CIFAR10_testset.test_data.transpose"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data"], ["    ", "def", "__init__", "(", "self", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "get_data", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.CIFAR10_testset.__getitem__": [[90, 99], ["PIL.Image.fromarray", "transform_test", "attack_whitebox.CIFAR10_testset.target_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "transform_test", "(", "img", ")", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.CIFAR10_testset.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.nucnorm.forward": [[128, 157], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape", "attack_whitebox.nuclear_norm_solve", "range", "numpy.random.binomial().reshape", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "attack_whitebox.nuclear_norm_solve", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial", "numpy.random.binomial", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "W", "=", "nuclear_norm_solve", "(", "img", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "W", "=", "nuclear_norm_solve", "(", "img", "[", "channel", "]", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.nucnorm.backward": [[158, 162], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.usvt.forward": [[173, 214], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape", "numpy.linalg.svd", "numpy.zeros", "range", "numpy.concatenate", "range", "numpy.random.binomial().reshape", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "int", "numpy.dot", "len", "numpy.linalg.svd", "numpy.zeros", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial", "numpy.zeros", "numpy.dot", "numpy.random.binomial", "int", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.dot"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", "*", "c", ")", "\n", "\n", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                    ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "S", "=", "np", ".", "concatenate", "(", "(", "S", ",", "np", ".", "zeros", "(", "(", "h", ",", "w", "*", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "[", "channel", "]", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                        ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.usvt.backward": [[215, 219], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.softimp.forward": [[230, 262], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape().astype", "fancyimpute.SoftImpute().fit_transform", "range", "numpy.random.binomial().reshape().astype", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "fancyimpute.SoftImpute().fit_transform", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial().reshape", "fancyimpute.SoftImpute", "numpy.random.binomial().reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "fancyimpute.SoftImpute", "numpy.random.binomial", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask", "*", "img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "mask_img", "=", "img", "[", "channel", "]", "*", "mask", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask_img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.softimp.backward": [[263, 267], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.MENet.__init__": [[279, 282], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "MENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.MENet.forward": [[283, 286], ["[].apply", "attack_whitebox.MENet.model", "globals"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "globals", "(", ")", "[", "args", ".", "me_type", "]", ".", "apply", "(", "input", ")", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.AttackPGD.__init__": [[300, 308], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "config", ")", ":", "\n", "        ", "super", "(", "AttackPGD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rand", "=", "config", "[", "'random_start'", "]", "\n", "self", ".", "step_size", "=", "config", "[", "'step_size'", "]", "\n", "self", ".", "epsilon", "=", "config", "[", "'epsilon'", "]", "\n", "self", ".", "num_steps", "=", "config", "[", "'num_steps'", "]", "\n", "assert", "config", "[", "'loss_func'", "]", "==", "'xent'", ",", "'Use cross-entropy as loss function.'", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.AttackPGD.forward": [[309, 328], ["inputs.detach", "range", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "attack_whitebox.AttackPGD.model", "attack_whitebox.AttackPGD.model", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "attack_whitebox.AttackPGD.model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "grad.detach"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "not", "args", ".", "attack", ":", "\n", "            ", "return", "self", ".", "model", "(", "inputs", ")", ",", "inputs", "\n", "\n", "", "x", "=", "inputs", ".", "detach", "(", ")", "\n", "if", "self", ".", "rand", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "zeros_like", "(", "x", ")", ".", "uniform_", "(", "-", "self", ".", "epsilon", ",", "self", ".", "epsilon", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "x", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "size_average", "=", "False", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x", "]", ")", "[", "0", "]", "\n", "# print(grad)", "\n", "x", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x", ",", "inputs", "-", "self", ".", "epsilon", ")", ",", "inputs", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "self", ".", "model", "(", "x", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.unpickle": [[62, 67], ["open", "pickle.load"], "function", ["None"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "pickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.get_data": [[69, 74], ["attack_whitebox.unpickle"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle"], ["", "def", "get_data", "(", ")", ":", "\n", "    ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/test_batch'", ")", "\n", "data", "=", "batch", "[", "b'data'", "]", "\n", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.target_transform": [[76, 80], ["numpy.array", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "target_transform", "(", "label", ")", ":", "\n", "    ", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.nuclear_norm_solve": [[104, 117], ["Variable", "Minimize", "Problem", "Problem.solve", "sum_squares", "norm", "multiply"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve"], ["", "", "def", "nuclear_norm_solve", "(", "A", ",", "mask", ",", "mu", ")", ":", "\n", "    ", "\"\"\"Nuclear norm minimization solver.\n\n    :param A: matrix to complete\n    :param mask: matrix with entries zero (if missing) or one (if present)\n    :param mu: control trade-off between nuclear norm and square loss\n    :return: completed matrix\n    \"\"\"", "\n", "X", "=", "Variable", "(", "shape", "=", "A", ".", "shape", ")", "\n", "objective", "=", "Minimize", "(", "mu", "*", "norm", "(", "X", ",", "\"nuc\"", ")", "+", "sum_squares", "(", "multiply", "(", "mask", ",", "X", "-", "A", ")", ")", ")", "\n", "problem", "=", "Problem", "(", "objective", ",", "[", "]", ")", "\n", "problem", ".", "solve", "(", "solver", "=", "SCS", ")", "\n", "return", "X", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.attack_foolbox": [[330, 353], ["foolbox.models.PyTorchModel", "foolbox.criteria.Misclassification", "foolbox.attacks.ProjectedGradientDescentAttack", "enumerate", "foolbox.attacks.ProjectedGradientDescentAttack.", "sys.stdout.write", "sys.stdout.flush", "int", "inputs.astype", "inputs.astype", "numpy.argmax", "inputs.cpu().numpy", "targets.cpu().numpy", "foolbox.models.PyTorchModel.predictions", "inputs.cpu", "targets.cpu"], "function", ["None"], ["", "", "def", "attack_foolbox", "(", ")", ":", "\n", "    ", "fmodel", "=", "foolbox", ".", "models", ".", "PyTorchModel", "(", "menet_model", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "num_classes", "=", "10", ",", "preprocessing", "=", "(", "0", ",", "1", ")", ")", "\n", "attack_criteria", "=", "foolbox", ".", "criteria", ".", "Misclassification", "(", ")", "\n", "attack", "=", "foolbox", ".", "attacks", ".", "ProjectedGradientDescentAttack", "(", "model", "=", "fmodel", ",", "criterion", "=", "attack_criteria", ")", "\n", "\n", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "int", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "adversarial", "=", "attack", "(", "inputs", ".", "astype", "(", "np", ".", "float32", ")", ",", "targets", ",", "epsilon", "=", "config", "[", "'epsilon'", "]", ",", "\n", "stepsize", "=", "config", "[", "'step_size'", "]", ",", "iterations", "=", "config", "[", "'num_steps'", "]", ")", "\n", "\n", "if", "adversarial", "is", "None", ":", "\n", "            ", "adversarial", "=", "inputs", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "np", ".", "argmax", "(", "fmodel", ".", "predictions", "(", "adversarial", ")", ")", "==", "targets", ":", "\n", "            ", "correct", "+=", "1.", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\rWhite-box BPDA attack (toolbox)... Acc: %.3f%% (%d/%d)\"", "%", "\n", "(", "100.", "*", "correct", "/", "(", "batch_idx", "+", "1", ")", ",", "correct", ",", "batch_idx", "+", "1", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "return", "100.", "*", "correct", "/", "batch_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.attack_bpda": [[355, 374], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "sys.stdout.write", "sys.stdout.flush", "inputs.to", "targets.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["None"], ["", "def", "attack_bpda", "(", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", ",", "pert_inputs", "=", "net", "(", "inputs", ",", "targets", ")", "\n", "\n", "", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\rWhite-box BPDA attack... Acc: %.3f%% (%d/%d)\"", "\n", "%", "(", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_whitebox.test_generalization": [[376, 394], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "sys.stdout.write", "sys.stdout.flush", "inputs.to", "targets.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "menet_model", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["None"], ["", "def", "test_generalization", "(", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "menet_model", "(", "inputs", ")", "\n", "\n", "", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\rGeneralization... Acc: %.3f%% (%d/%d)\"", "\n", "%", "(", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.CIFAR10_Dataset.__init__": [[235, 249], ["train_pure.get_data", "train_pure.CIFAR10_Dataset.train_data.reshape", "train_pure.CIFAR10_Dataset.train_data.transpose", "train_pure.menet", "train_pure.get_data", "train_pure.CIFAR10_Dataset.test_data.reshape", "train_pure.CIFAR10_Dataset.test_data.transpose", "train_pure.menet"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.menet", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.menet"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", ",", "self", ".", "train_labels", "=", "get_data", "(", "train", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "self", ".", "train_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "train_data", "=", "menet", "(", "self", ".", "train_data", ",", "train", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "get_data", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "self", ".", "test_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "test_data", "=", "menet", "(", "self", ".", "test_data", ",", "train", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.CIFAR10_Dataset.__getitem__": [[250, 265], ["PIL.Image.fromarray", "transform_train", "transform_test", "train_pure.CIFAR10_Dataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.target_transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "img", "=", "transform_train", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "transform_test", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.CIFAR10_Dataset.__len__": [[266, 271], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.nuclear_norm_solve": [[29, 42], ["Variable", "Minimize", "Problem", "Problem.solve", "sum_squares", "norm", "multiply"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve"], ["def", "nuclear_norm_solve", "(", "A", ",", "mask", ",", "mu", ")", ":", "\n", "    ", "\"\"\"Nuclear norm minimization solver.\n\n    :param A: matrix to complete\n    :param mask: matrix with entries zero (if missing) or one (if present)\n    :param mu: control trade-off between nuclear norm and square loss\n    :return: completed matrix\n    \"\"\"", "\n", "X", "=", "Variable", "(", "shape", "=", "A", ".", "shape", ")", "\n", "objective", "=", "Minimize", "(", "mu", "*", "norm", "(", "X", ",", "\"nuc\"", ")", "+", "sum_squares", "(", "multiply", "(", "mask", ",", "X", "-", "A", ")", ")", ")", "\n", "problem", "=", "Problem", "(", "objective", ",", "[", "]", ")", "\n", "problem", ".", "solve", "(", "solver", "=", "SCS", ")", "\n", "return", "X", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.nucnorm": [[44, 78], ["np.concatenate.transpose", "numpy.concatenate", "numpy.random.binomial().reshape", "train_pure.nuclear_norm_solve", "numpy.zeros", "range", "numpy.random.binomial().reshape", "numpy.zeros", "range", "train_pure.nuclear_norm_solve", "np.concatenate.astype", "numpy.concatenate", "numpy.random.binomial", "numpy.random.binomial"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve"], ["", "def", "nucnorm", "(", "img", ",", "maskp", ")", ":", "\n", "    ", "\"\"\"Preprocessing with nuclear norm algorithm.\n\n    Data matrix is scaled between [-1, 1] before matrix estimation (and rescaled back after ME)\n    [Cand\u00e8s, J. and Recht, B. Exact matrix completion via convex optimization. 2009.]\n\n    :param img: original image\n    :param maskp: observation probability of each entry in mask matrix\n    :return: preprocessed image\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "img", "=", "img", ".", "astype", "(", "'float64'", ")", "*", "2", "/", "255", "-", "1", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "W", "=", "nuclear_norm_solve", "(", "img", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "w", ":", "(", "channel", "+", "1", ")", "*", "w", "]", "\n", "", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "W", "=", "nuclear_norm_solve", "(", "img", "[", ":", ",", ":", ",", "channel", "]", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.usvt": [[80, 130], ["np.concatenate.transpose", "numpy.concatenate", "numpy.random.binomial().reshape", "numpy.linalg.svd", "numpy.zeros", "range", "numpy.concatenate", "numpy.zeros", "range", "numpy.random.binomial().reshape", "numpy.zeros", "range", "len", "int", "numpy.dot", "len", "numpy.linalg.svd", "numpy.zeros", "numpy.concatenate", "range", "np.concatenate.astype", "numpy.concatenate", "numpy.random.binomial", "numpy.zeros", "numpy.dot", "numpy.random.binomial", "int", "numpy.dot", "numpy.zeros", "numpy.dot", "len"], "function", ["None"], ["", "def", "usvt", "(", "img", ",", "maskp", ")", ":", "\n", "    ", "\"\"\"Preprocessing with universal singular value thresholding (USVT) approach.\n\n    Data matrix is scaled between [-1, 1] before matrix estimation (and rescaled back after ME)\n    [Chatterjee, S. et al. Matrix estimation by universal singular value thresholding. 2015.]\n\n    :param img: original image\n    :param maskp: observation probability of each entry in mask matrix\n    :return: preprocessed image\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "img", "=", "img", ".", "astype", "(", "'float64'", ")", "*", "2", "/", "255", "-", "1", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", "*", "c", ")", "\n", "\n", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "h", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "            ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "S", "=", "np", ".", "concatenate", "(", "(", "S", ",", "np", ".", "zeros", "(", "(", "h", ",", "w", "*", "(", "c", "-", "1", ")", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "w", ":", "(", "channel", "+", "1", ")", "*", "w", "]", "\n", "", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", ")", "\n", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "[", ":", ",", ":", ",", "channel", "]", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "h", ")", ")", "\n", "sigma", "=", "np", ".", "concatenate", "(", "(", "sigma", ",", "np", ".", "zeros", "(", "h", "-", "len", "(", "sigma", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "\n", "", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.softimp": [[132, 171], ["np.concatenate.transpose", "numpy.concatenate", "numpy.random.binomial().reshape().astype", "fancyimpute.SoftImpute().fit_transform", "numpy.zeros", "range", "numpy.random.binomial().reshape().astype", "numpy.zeros", "range", "fancyimpute.SoftImpute().fit_transform", "np.concatenate.astype", "numpy.concatenate", "numpy.random.binomial().reshape", "fancyimpute.SoftImpute", "numpy.random.binomial().reshape", "fancyimpute.SoftImpute", "numpy.random.binomial", "numpy.random.binomial"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["", "def", "softimp", "(", "img", ",", "maskp", ")", ":", "\n", "    ", "\"\"\"Preprocessing with Soft-Impute approach.\n\n    Data matrix is scaled between [-1, 1] before matrix estimation (and rescaled back after ME)\n    [Mazumder, R. et al. Spectral regularization algorithms for learning large incomplete matrices. 2010.]\n\n    :param img: original image\n    :param maskp: observation probability of each entry in mask matrix\n    :return: preprocessed image\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "img", "=", "img", ".", "astype", "(", "'float64'", ")", "*", "2", "/", "255", "-", "1", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask", "*", "img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "w", ":", "(", "channel", "+", "1", ")", "*", "w", "]", "\n", "", "", "else", ":", "\n", "        ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "            ", "mask_img", "=", "img", "[", ":", ",", ":", ",", "channel", "]", "*", "mask", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask_img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "outputs", "[", ":", ",", ":", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "*", "255", "/", "2", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.unpickle": [[173, 178], ["open", "pickle.load"], "function", ["None"], ["", "def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "pickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.get_data": [[180, 206], ["range", "range", "train_pure.unpickle", "train_pure.unpickle", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "str", "train_pure.train"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.train"], ["", "def", "get_data", "(", "train", "=", "False", ")", ":", "\n", "    ", "data", "=", "None", "\n", "labels", "=", "None", "\n", "if", "train", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/data_batch_'", "+", "str", "(", "i", ")", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "data", "=", "batch", "[", "b'data'", "]", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "batch", "[", "b'data'", "]", "]", ")", "\n", "", "if", "i", "==", "1", ":", "\n", "                ", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "", "else", ":", "\n", "                ", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "batch", "[", "b'labels'", "]", "]", ")", "\n", "\n", "", "", "data_tmp", "=", "data", "\n", "labels_tmp", "=", "labels", "\n", "# repeat n times for different masks", "\n", "for", "i", "in", "range", "(", "args", ".", "mask_num", "-", "1", ")", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "data_tmp", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "labels_tmp", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/test_batch'", ")", "\n", "data", "=", "batch", "[", "b'data'", "]", "\n", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.target_transform": [[208, 212], ["numpy.array", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "target_transform", "(", "label", ")", ":", "\n", "    ", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.menet": [[215, 231], ["range", "range", "utils.progress_bar", "utils.progress_bar", "globals", "globals", "math.ceil"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar"], ["", "def", "menet", "(", "train_data", ",", "train", "=", "True", ")", ":", "\n", "    ", "if", "train", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "maskp", "=", "args", ".", "startp", "+", "math", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "50000", ")", "*", "(", "args", ".", "endp", "-", "args", ".", "startp", ")", "/", "args", ".", "mask_num", "\n", "train_data", "[", "i", "]", "=", "globals", "(", ")", "[", "args", ".", "me_type", "]", "(", "train_data", "[", "i", "]", ",", "maskp", ")", "\n", "# Bar visualization", "\n", "progress_bar", "(", "i", ",", "train_data", ".", "shape", "[", "0", "]", ",", "' | Training data'", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "maskp", "=", "(", "args", ".", "startp", "+", "args", ".", "endp", ")", "/", "2", "\n", "train_data", "[", "i", "]", "=", "globals", "(", ")", "[", "args", ".", "me_type", "]", "(", "train_data", "[", "i", "]", ",", "maskp", ")", "\n", "# Bar visualization", "\n", "progress_bar", "(", "i", ",", "train_data", ".", "shape", "[", "0", "]", ",", "' | Testing data'", ")", "\n", "\n", "", "", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.train": [[273, 302], ["print", "model.train", "enumerate", "model", "criterion", "criterion.item", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.progress_bar", "inputs.to", "targets.to", "len", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.train", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.softimp.backward", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar"], ["", "", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "# Backward and optimize", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "\n", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "", "return", "train_loss", "/", "batch_idx", ",", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.test": [[304, 324], ["model.eval", "enumerate", "model", "criterion", "criterion.item", "torch.max", "torch.max", "torch.max", "targets.size", "pred_idx.eq().cpu().sum().float", "utils.progress_bar", "inputs.to", "targets.to", "len", "pred_idx.eq().cpu().sum", "pred_idx.eq().cpu", "pred_idx.eq"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred_idx", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "test_loader", ")", ",", "\n", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "", "return", "test_loss", "/", "batch_idx", ",", "100.", "*", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.save_checkpoint": [[326, 337], ["print", "torch.save", "torch.save", "torch.save", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "os.path.isdir", "os.mkdir", "str"], "function", ["None"], ["", "def", "save_checkpoint", "(", "acc", ",", "epoch", ")", ":", "\n", "    ", "print", "(", "'=====> Saving checkpoint...'", ")", "\n", "state", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "args", ".", "save_dir", "+", "args", ".", "name", "+", "'_epoch'", "+", "str", "(", "epoch", ")", "+", "'.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.train_pure.adjust_lr": [[340, 348], ["None"], "function", ["None"], ["", "def", "adjust_lr", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "/=", "10", "\n", "", "if", "epoch", ">=", "150", ":", "\n", "        ", "lr", "/=", "10", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.CIFAR10_testset.__init__": [[97, 102], ["attack_blackbox.get_data", "attack_blackbox.CIFAR10_testset.test_data.reshape", "attack_blackbox.CIFAR10_testset.test_data.transpose"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data"], ["    ", "def", "__init__", "(", "self", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "get_data", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.CIFAR10_testset.__getitem__": [[103, 112], ["PIL.Image.fromarray", "transform_test", "attack_blackbox.CIFAR10_testset.target_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "transform_test", "(", "img", ")", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.CIFAR10_testset.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nucnorm.forward": [[141, 170], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape", "attack_blackbox.nuclear_norm_solve", "range", "numpy.random.binomial().reshape", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "attack_blackbox.nuclear_norm_solve", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial", "numpy.random.binomial", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "W", "=", "nuclear_norm_solve", "(", "img", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "W", "=", "nuclear_norm_solve", "(", "img", "[", "channel", "]", ",", "mask", ",", "mu", "=", "args", ".", "mu", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nucnorm.backward": [[171, 175], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.usvt.forward": [[186, 227], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape", "numpy.linalg.svd", "numpy.zeros", "range", "numpy.concatenate", "range", "numpy.random.binomial().reshape", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "int", "numpy.dot", "len", "numpy.linalg.svd", "numpy.zeros", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial", "numpy.zeros", "numpy.dot", "numpy.random.binomial", "int", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.dot"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", "*", "c", ")", "\n", "\n", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                    ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "S", "=", "np", ".", "concatenate", "(", "(", "S", ",", "np", ".", "zeros", "(", "(", "h", ",", "w", "*", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "p_obs", "=", "len", "(", "mask", "[", "mask", "==", "1", "]", ")", "/", "(", "h", "*", "w", ")", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "u", ",", "sigma", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "img", "[", "channel", "]", "*", "mask", ")", "\n", "S", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "args", ".", "svdprob", "*", "h", ")", ")", ":", "\n", "                        ", "S", "[", "j", "]", "[", "j", "]", "=", "sigma", "[", "j", "]", "\n", "", "W", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "S", ")", ",", "v", ")", "/", "p_obs", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.usvt.backward": [[228, 232], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.softimp.forward": [[243, 275], ["input.size", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "torch.zeros_like().cpu().numpy", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "numpy.concatenate", "numpy.random.binomial().reshape().astype", "fancyimpute.SoftImpute().fit_transform", "range", "numpy.random.binomial().reshape().astype", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "fancyimpute.SoftImpute().fit_transform", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.concatenate", "numpy.random.binomial().reshape", "fancyimpute.SoftImpute", "numpy.random.binomial().reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "fancyimpute.SoftImpute", "numpy.random.binomial", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "batch_num", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "img", "=", "(", "input", "[", "i", "]", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "me_channel", "==", "'concat'", ":", "\n", "                ", "img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "img", "[", "0", "]", ",", "img", "[", "1", "]", ")", ",", "axis", "=", "1", ")", ",", "img", "[", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", "*", "c", ")", ".", "reshape", "(", "h", ",", "w", "*", "c", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask", "*", "img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "est_matrix", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "output", "[", "i", ",", "channel", "]", "=", "est_matrix", "[", ":", ",", "channel", "*", "h", ":", "(", "channel", "+", "1", ")", "*", "h", "]", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "args", ".", "maskp", ",", "h", "*", "w", ")", ".", "reshape", "(", "h", ",", "w", ")", ".", "astype", "(", "float", ")", "\n", "mask", "[", "mask", "<", "1", "]", "=", "np", ".", "nan", "\n", "for", "channel", "in", "range", "(", "c", ")", ":", "\n", "                    ", "mask_img", "=", "img", "[", "channel", "]", "*", "mask", "\n", "W", "=", "SoftImpute", "(", "verbose", "=", "False", ")", ".", "fit_transform", "(", "mask_img", ")", "\n", "W", "[", "W", "<", "-", "1", "]", "=", "-", "1", "\n", "W", "[", "W", ">", "1", "]", "=", "1", "\n", "output", "[", "i", ",", "channel", "]", "=", "(", "W", "+", "1", ")", "/", "2", "\n", "\n", "", "", "", "output", "=", "output", "-", "mean", "\n", "output", "/=", "std", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.softimp.backward": [[276, 280], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# BPDA, approximate gradients", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.MENet.__init__": [[292, 295], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "MENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.MENet.forward": [[296, 299], ["[].apply", "attack_blackbox.MENet.model", "globals"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "globals", "(", ")", "[", "args", ".", "me_type", "]", ".", "apply", "(", "input", ")", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle": [[75, 80], ["open", "pickle.load"], "function", ["None"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "pickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.get_data": [[82, 87], ["attack_blackbox.unpickle"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.unpickle"], ["", "def", "get_data", "(", ")", ":", "\n", "    ", "batch", "=", "unpickle", "(", "args", ".", "data_dir", "+", "'cifar-10-batches-py/test_batch'", ")", "\n", "data", "=", "batch", "[", "b'data'", "]", "\n", "labels", "=", "batch", "[", "b'labels'", "]", "\n", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.target_transform": [[89, 93], ["numpy.array", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "target_transform", "(", "label", ")", ":", "\n", "    ", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.nuclear_norm_solve": [[117, 130], ["Variable", "Minimize", "Problem", "Problem.solve", "sum_squares", "norm", "multiply"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve"], ["", "", "def", "nuclear_norm_solve", "(", "A", ",", "mask", ",", "mu", ")", ":", "\n", "    ", "\"\"\"Nuclear norm minimization solver.\n\n    :param A: matrix to complete\n    :param mask: matrix with entries zero (if missing) or one (if present)\n    :param mu: control trade-off between nuclear norm and square loss\n    :return: completed matrix\n    \"\"\"", "\n", "X", "=", "Variable", "(", "shape", "=", "A", ".", "shape", ")", "\n", "objective", "=", "Minimize", "(", "mu", "*", "norm", "(", "X", ",", "\"nuc\"", ")", "+", "sum_squares", "(", "multiply", "(", "mask", ",", "X", "-", "A", ")", ")", ")", "\n", "problem", "=", "Problem", "(", "objective", ",", "[", "]", ")", "\n", "problem", ".", "solve", "(", "solver", "=", "SCS", ")", "\n", "return", "X", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.transfer_attack": [[301, 335], ["foolbox.models.PyTorchModel", "foolbox.models.PyTorchModel", "foolbox.criteria.Misclassification", "enumerate", "print", "foolbox.attacks.GradientSignAttack", "sys.stdout.write", "sys.stdout.flush", "foolbox.attacks.ProjectedGradientDescentAttack", "foolbox.attacks.CarliniWagnerL2Attack", "int", "foolbox.attacks.CarliniWagnerL2Attack.", "inputs.astype", "numpy.argmax", "inputs.cpu().numpy", "targets.cpu().numpy", "inputs.astype", "foolbox.attacks.CarliniWagnerL2Attack.", "foolbox.attacks.CarliniWagnerL2Attack.", "foolbox.models.PyTorchModel.predictions", "inputs.astype", "inputs.astype", "inputs.cpu", "targets.cpu"], "function", ["None"], ["", "", "def", "transfer_attack", "(", ")", ":", "\n", "    ", "fmodel", "=", "foolbox", ".", "models", ".", "PyTorchModel", "(", "menet_model", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "num_classes", "=", "10", ",", "preprocessing", "=", "(", "0", ",", "1", ")", ")", "\n", "fmodel_source", "=", "foolbox", ".", "models", ".", "PyTorchModel", "(", "source_model", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "num_classes", "=", "10", ",", "preprocessing", "=", "(", "0", ",", "1", ")", ")", "\n", "attack_criteria", "=", "foolbox", ".", "criteria", ".", "Misclassification", "(", ")", "\n", "\n", "if", "args", ".", "attack_type", "==", "'fgsm'", ":", "\n", "        ", "attack", "=", "foolbox", ".", "attacks", ".", "GradientSignAttack", "(", "model", "=", "fmodel_source", ",", "criterion", "=", "attack_criteria", ")", "\n", "", "elif", "args", ".", "attack_type", "==", "'pgd'", ":", "\n", "        ", "attack", "=", "foolbox", ".", "attacks", ".", "ProjectedGradientDescentAttack", "(", "model", "=", "fmodel_source", ",", "criterion", "=", "attack_criteria", ")", "\n", "", "else", ":", "\n", "        ", "attack", "=", "foolbox", ".", "attacks", ".", "CarliniWagnerL2Attack", "(", "model", "=", "fmodel_source", ",", "criterion", "=", "attack_criteria", ")", "\n", "\n", "", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "int", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "args", ".", "attack_type", "==", "'fgsm'", ":", "\n", "            ", "adversarial", "=", "attack", "(", "inputs", ".", "astype", "(", "np", ".", "float32", ")", ",", "targets", ",", "max_epsilon", "=", "config", "[", "'epsilon'", "]", ")", "\n", "", "elif", "args", ".", "attack_type", "==", "'pgd'", ":", "\n", "            ", "adversarial", "=", "attack", "(", "inputs", ".", "astype", "(", "np", ".", "float32", ")", ",", "targets", ",", "epsilon", "=", "config", "[", "'epsilon'", "]", ",", "\n", "stepsize", "=", "config", "[", "'step_size'", "]", ",", "iterations", "=", "config", "[", "'num_steps'", "]", ")", "\n", "", "else", ":", "\n", "            ", "adversarial", "=", "attack", "(", "inputs", ".", "astype", "(", "np", ".", "float32", ")", ",", "targets", ",", "max_iterations", "=", "config", "[", "'num_steps'", "]", ",", "\n", "confidence", "=", "args", ".", "cw_conf", ")", "\n", "", "if", "adversarial", "is", "None", ":", "\n", "            ", "adversarial", "=", "inputs", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "np", ".", "argmax", "(", "fmodel", ".", "predictions", "(", "adversarial", ")", ")", "==", "targets", ":", "\n", "            ", "correct", "+=", "1.", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\rTransfer-based black-box %s attack... Acc: %.3f%% (%d/%d)\"", "%", "\n", "(", "args", ".", "attack_type", ",", "100.", "*", "correct", "/", "(", "batch_idx", "+", "1", ")", ",", "correct", ",", "batch_idx", "+", "1", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "print", "(", "'Accuracy under transfer-based %s attack: %.3f%%'", "%", "(", "args", ".", "attack_type", ",", "100.", "*", "correct", "/", "batch_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.boundary_attack": [[337, 356], ["foolbox.models.PyTorchModel", "foolbox.criteria.Misclassification", "foolbox.attacks.BoundaryAttack", "enumerate", "print", "foolbox.attacks.BoundaryAttack.", "sys.stdout.write", "sys.stdout.flush", "int", "inputs.astype", "inputs.astype", "numpy.argmax", "inputs.cpu().numpy", "targets.cpu().numpy", "foolbox.models.PyTorchModel.predictions", "inputs.cpu", "targets.cpu"], "function", ["None"], ["", "def", "boundary_attack", "(", ")", ":", "\n", "    ", "fmodel", "=", "foolbox", ".", "models", ".", "PyTorchModel", "(", "menet_model", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "num_classes", "=", "10", ",", "preprocessing", "=", "(", "0", ",", "1", ")", ")", "\n", "attack_criteria", "=", "foolbox", ".", "criteria", ".", "Misclassification", "(", ")", "\n", "attack", "=", "foolbox", ".", "attacks", ".", "BoundaryAttack", "(", "model", "=", "fmodel", ",", "criterion", "=", "attack_criteria", ")", "\n", "\n", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "int", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "adversarial", "=", "attack", "(", "inputs", ".", "astype", "(", "np", ".", "float32", ")", ",", "targets", ",", "iterations", "=", "args", ".", "iter", ",", "log_every_n_steps", "=", "999999", ")", "\n", "if", "adversarial", "is", "None", ":", "\n", "            ", "adversarial", "=", "inputs", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "np", ".", "argmax", "(", "fmodel", ".", "predictions", "(", "adversarial", ")", ")", "==", "targets", ":", "\n", "            ", "correct", "+=", "1.", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\rBlack-box Boundary attack... Acc: %.3f%% (%d/%d)\"", "%", "\n", "(", "100.", "*", "correct", "/", "(", "batch_idx", "+", "1", ")", ",", "correct", ",", "batch_idx", "+", "1", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "print", "(", "'Accuracy under Boundary attack: %.3f%%'", "%", "(", "100.", "*", "correct", "/", "batch_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.attack_blackbox.spsa_attack": [[358, 395], ["tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "cleverhans.utils_pytorch.convert_pytorch_model_to_tf", "cleverhans.model.CallableModelWrapper", "cleverhans.attacks.SPSA", "cleverhans.attacks.SPSA.generate", "cleverhans.utils_pytorch.convert_pytorch_model_to_tf.", "enumerate", "print", "tf.Session.run", "len", "sys.stdout.write", "sys.stdout.flush", "numpy.argmax"], "function", ["None"], ["", "def", "spsa_attack", "(", ")", ":", "\n", "# Use tf for evaluation on adversarial data", "\n", "    ", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "x_op", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "3", ",", "32", ",", "32", ",", ")", ")", "\n", "y_op", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "\n", "# Convert pytorch model to a tf_model and wrap it in cleverhans", "\n", "tf_model_fn", "=", "convert_pytorch_model_to_tf", "(", "menet_model", ")", "\n", "cleverhans_model", "=", "CallableModelWrapper", "(", "tf_model_fn", ",", "output_layer", "=", "'logits'", ")", "\n", "\n", "# Create an SPSA attack", "\n", "spsa", "=", "SPSA", "(", "cleverhans_model", ",", "sess", "=", "sess", ")", "\n", "spsa_params", "=", "{", "\n", "'eps'", ":", "config", "[", "'epsilon'", "]", ",", "\n", "'nb_iter'", ":", "config", "[", "'num_steps'", "]", ",", "\n", "'clip_min'", ":", "0.", ",", "\n", "'clip_max'", ":", "1.", ",", "\n", "'spsa_samples'", ":", "args", ".", "spsa_sample", ",", "# in this case, the batch_size is equal to spsa_samples", "\n", "'spsa_iters'", ":", "1", ",", "\n", "}", "\n", "\n", "adv_x_op", "=", "spsa", ".", "generate", "(", "x_op", ",", "y_op", ",", "**", "spsa_params", ")", "\n", "adv_preds_op", "=", "tf_model_fn", "(", "adv_x_op", ")", "\n", "\n", "# Evaluation against SPSA attacks", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "adv_preds", "=", "sess", ".", "run", "(", "adv_preds_op", ",", "feed_dict", "=", "{", "x_op", ":", "inputs", ",", "y_op", ":", "targets", "}", ")", "\n", "correct", "+=", "(", "np", ".", "argmax", "(", "adv_preds", ",", "axis", "=", "1", ")", "==", "targets", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "total", "+=", "len", "(", "inputs", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\rBlack-box SPSA attack... Acc: %.3f%% (%d/%d)\"", "%", "(", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "print", "(", "'Accuracy under SPSA attack: %.3f%%'", "%", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.get_mean_and_std": [[11, 24], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "# Compute the mean and std value of dataset", "\n", "    ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'===> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.init_params": [[26, 40], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "# Init layer parameters", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.progress_bar": [[50, 93], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "int", "len", "int"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.format_time", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "# Reset for new bar", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.None.utils.format_time": [[95, 126], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.matrix_factorization.MatrixFactorization.__init__": [[38, 69], ["scaler.Scaler", "solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "rank", "=", "10", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "patience", "=", "5", ",", "\n", "l2_penalty", "=", "1e-5", ",", "\n", "use_bias", "=", "True", ",", "\n", "min_improvement", "=", "0.001", ",", "\n", "optimization_algorithm", "=", "\"nadam\"", ",", "\n", "loss", "=", "'mse'", ",", "\n", "validation_frac", "=", "0.1", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "normalizer", "=", "Scaler", "(", ")", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ",", "\n", "normalizer", "=", "normalizer", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "l2_penalty", "=", "l2_penalty", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "optimization_algorithm", "=", "optimization_algorithm", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "validation_frac", "=", "validation_frac", "\n", "self", ".", "min_improvement", "=", "min_improvement", "\n", "self", ".", "normalizer", "=", "normalizer", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.matrix_factorization.MatrixFactorization.solve": [[70, 120], ["sklearn.utils.check_array", "missing_mask.flatten", "observed_mask.flatten", "numpy.meshgrid", "sklearn.utils.shuffle", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.fit", "numpy.arange", "numpy.arange", "rows.flatten", "columns.flatten", "numpy.vstack", "sklearn.utils.check_array.flatten", "keras_models.KerasMatrixFactorizer", "common.import_from", "keras.callbacks.EarlyStopping", "rows.flatten", "columns.flatten", "numpy.vstack", "int", "keras.models.Model.predict", "keras.regularizers.l2", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.import_from"], ["", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "# shape data to fit into keras model", "\n", "(", "n_samples", ",", "n_features", ")", "=", "X", ".", "shape", "\n", "observed_mask", "=", "~", "missing_mask", "\n", "missing_mask_flat", "=", "missing_mask", ".", "flatten", "(", ")", "\n", "observed_mask_flat", "=", "observed_mask", ".", "flatten", "(", ")", "\n", "\n", "columns", ",", "rows", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n_features", ")", ",", "np", ".", "arange", "(", "n_samples", ")", ")", "\n", "\n", "# training data", "\n", "i_tr", "=", "rows", ".", "flatten", "(", ")", "[", "observed_mask_flat", "]", "\n", "j_tr", "=", "columns", ".", "flatten", "(", ")", "[", "observed_mask_flat", "]", "\n", "ij_tr", "=", "np", ".", "vstack", "(", "[", "i_tr", ",", "j_tr", "]", ")", ".", "T", "# input to factorizer", "\n", "y_tr", "=", "X", ".", "flatten", "(", ")", "[", "observed_mask_flat", "]", "# output of factorizer", "\n", "ij_tr", ",", "y_tr", "=", "shuffle", "(", "ij_tr", ",", "y_tr", ")", "\n", "\n", "# make a keras model", "\n", "main_input", "=", "Input", "(", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "embed", "=", "KerasMatrixFactorizer", "(", "\n", "rank", "=", "self", ".", "rank", ",", "\n", "input_dim_i", "=", "n_samples", ",", "\n", "input_dim_j", "=", "n_features", ",", "\n", "embeddings_regularizer", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_penalty", ")", "\n", ")", "(", "main_input", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "main_input", ",", "outputs", "=", "embed", ")", "\n", "optimizer", "=", "import_from", "(", "\n", "'keras.optimizers'", ",", "self", ".", "optimization_algorithm", "\n", ")", "(", "lr", "=", "self", ".", "learning_rate", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "self", ".", "loss", ")", "\n", "callbacks", "=", "[", "EarlyStopping", "(", "patience", "=", "self", ".", "patience", ",", "min_delta", "=", "self", ".", "min_improvement", ")", "]", "\n", "model", ".", "fit", "(", "\n", "ij_tr", ",", "\n", "y_tr", ",", "\n", "batch_size", "=", "int", "(", "len", "(", "y_tr", ")", "*", "(", "1", "-", "self", ".", "validation_frac", ")", ")", ",", "\n", "epochs", "=", "10000", ",", "\n", "validation_split", "=", "self", ".", "validation_frac", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "shuffle", "=", "True", ",", "\n", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "# reassemble the original X", "\n", "i_ts", "=", "rows", ".", "flatten", "(", ")", "[", "missing_mask_flat", "]", "\n", "j_ts", "=", "columns", ".", "flatten", "(", ")", "[", "missing_mask_flat", "]", "\n", "ij_ts", "=", "np", ".", "vstack", "(", "[", "i_ts", ",", "j_ts", "]", ")", ".", "T", "# input to factorizer", "\n", "X", "[", "i_ts", ",", "j_ts", "]", "=", "model", ".", "predict", "(", "ij_ts", ")", ".", "T", "[", "0", "]", "\n", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.import_from": [[21, 30], ["importlib.import_module", "getattr"], "function", ["None"], ["def", "import_from", "(", "module", ",", "name", ")", ":", "\n", "    ", "'''\n    usage example:\n    grid = import_from('sklearn.model_selection', 'GridSearchCV')\n    is equivalent to:\n    from sklearn.model_selection import GridSearchV as grid\n    '''", "\n", "module", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "return", "getattr", "(", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.masked_mae": [[32, 35], ["numpy.mean", "numpy.abs"], "function", ["None"], ["", "def", "masked_mae", "(", "X_true", ",", "X_pred", ",", "mask", ")", ":", "\n", "    ", "masked_diff", "=", "X_true", "[", "mask", "]", "-", "X_pred", "[", "mask", "]", "\n", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "masked_diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.masked_mse": [[37, 40], ["numpy.mean"], "function", ["None"], ["", "def", "masked_mse", "(", "X_true", ",", "X_pred", ",", "mask", ")", ":", "\n", "    ", "masked_diff", "=", "X_true", "[", "mask", "]", "-", "X_pred", "[", "mask", "]", "\n", "return", "np", ".", "mean", "(", "masked_diff", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.generate_random_column_samples": [[42, 56], ["numpy.isnan", "numpy.sum", "numpy.nanmean", "numpy.nanstd", "numpy.isclose", "len", "logging.warn", "numpy.zeros_like", "numpy.array", "numpy.random.randn"], "function", ["None"], ["", "def", "generate_random_column_samples", "(", "column", ")", ":", "\n", "    ", "col_mask", "=", "np", ".", "isnan", "(", "column", ")", "\n", "n_missing", "=", "np", ".", "sum", "(", "col_mask", ")", "\n", "if", "n_missing", "==", "len", "(", "column", ")", ":", "\n", "        ", "logging", ".", "warn", "(", "\"No observed values in column\"", ")", "\n", "return", "np", ".", "zeros_like", "(", "column", ")", "\n", "\n", "", "mean", "=", "np", ".", "nanmean", "(", "column", ")", "\n", "std", "=", "np", ".", "nanstd", "(", "column", ")", "\n", "\n", "if", "np", ".", "isclose", "(", "std", ",", "0", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "mean", "]", "*", "n_missing", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "random", ".", "randn", "(", "n_missing", ")", "*", "std", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.choose_solution_using_percentiles": [[58, 106], ["list", "numpy.isnan", "enumerate", "six.moves.range", "six.moves.range", "numpy.array", "numpy.array", "numpy.mean", "print", "col_missing.sum", "col_observed.sum", "numpy.percentile", "numpy.percentile", "len"], "function", ["None"], ["", "", "def", "choose_solution_using_percentiles", "(", "\n", "X_original", ",", "\n", "solutions", ",", "\n", "parameters", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "percentiles", "=", "list", "(", "range", "(", "10", ",", "100", ",", "10", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    It's tricky to pick a single matrix out of all the candidate\n    solutions with differing shrinkage thresholds.\n    Our heuristic is to pick the matrix whose percentiles match best\n    between the missing and observed data.\n    \"\"\"", "\n", "missing_mask", "=", "np", ".", "isnan", "(", "X_original", ")", "\n", "min_mse", "=", "np", ".", "inf", "\n", "best_solution", "=", "None", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "solutions", ")", ":", "\n", "        ", "for", "col_idx", "in", "range", "(", "X_original", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "col_data", "=", "candidate", "[", ":", ",", "col_idx", "]", "\n", "col_missing", "=", "missing_mask", "[", ":", ",", "col_idx", "]", "\n", "col_observed", "=", "~", "col_missing", "\n", "if", "col_missing", ".", "sum", "(", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "elif", "col_observed", ".", "sum", "(", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "missing_data", "=", "col_data", "[", "col_missing", "]", "\n", "observed_data", "=", "col_data", "[", "col_observed", "]", "\n", "\n", "missing_percentiles", "=", "np", ".", "array", "(", "[", "\n", "np", ".", "percentile", "(", "missing_data", ",", "p", ")", "\n", "for", "p", "in", "percentiles", "]", ")", "\n", "\n", "observed_percentiles", "=", "np", ".", "array", "(", "[", "\n", "np", ".", "percentile", "(", "observed_data", ",", "p", ")", "\n", "for", "p", "in", "percentiles", "]", ")", "\n", "\n", "mse", "=", "np", ".", "mean", "(", "(", "missing_percentiles", "-", "observed_percentiles", ")", "**", "2", ")", "\n", "", "if", "mse", "<", "min_mse", ":", "\n", "            ", "min_mse", "=", "mse", "\n", "best_solution", "=", "candidate", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Candidate #%d/%d%s: %f\"", "%", "(", "\n", "i", "+", "1", ",", "\n", "len", "(", "solutions", ")", ",", "\n", "(", "\" (parameter=%s) \"", "%", "parameters", "[", "i", "]", "\n", "if", "parameters", "is", "not", "None", "\n", "else", "\"\"", ")", ",", "\n", "mse", ")", ")", "\n", "", "", "return", "best_solution", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.__init__": [[26, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "fill_method", "=", "\"zero\"", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "normalizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "fill_method", "=", "fill_method", "\n", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "self", ".", "normalizer", "=", "normalizer", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.__repr__": [[37, 39], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.__str__": [[40, 50], ["sorted", "solver.Solver.__dict__.items", "isinstance", "field_list.append", "isinstance", "field_list.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "field_list", "=", "[", "]", "\n", "for", "(", "k", ",", "v", ")", "in", "sorted", "(", "self", ".", "__dict__", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "v", "is", "None", "or", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                ", "field_list", ".", "append", "(", "\"%s=%s\"", "%", "(", "k", ",", "v", ")", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "field_list", ".", "append", "(", "\"%s='%s'\"", "%", "(", "k", ",", "v", ")", ")", "\n", "", "", "return", "\"%s(%s)\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "\", \"", ".", "join", "(", "field_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._check_input": [[51, 54], ["len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected 2d matrix, got %s array\"", "%", "(", "X", ".", "shape", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._check_missing_value_mask": [[55, 61], ["missing.all", "missing.any", "warnings.simplefilter", "ValueError"], "methods", ["None"], ["", "", "def", "_check_missing_value_mask", "(", "self", ",", "missing", ")", ":", "\n", "        ", "if", "not", "missing", ".", "any", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"always\"", ")", "\n", "# warnings.warn(\"Input matrix is not missing any values\")", "\n", "", "if", "missing", ".", "all", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input matrix must have some non-missing values\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._fill_columns_with_fn": [[62, 73], ["six.moves.range", "missing_col.sum", "col_fn", "numpy.all", "numpy.isnan"], "methods", ["None"], ["", "", "def", "_fill_columns_with_fn", "(", "self", ",", "X", ",", "missing_mask", ",", "col_fn", ")", ":", "\n", "        ", "for", "col_idx", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "missing_col", "=", "missing_mask", "[", ":", ",", "col_idx", "]", "\n", "n_missing", "=", "missing_col", ".", "sum", "(", ")", "\n", "if", "n_missing", "==", "0", ":", "\n", "                ", "continue", "\n", "", "col_data", "=", "X", "[", ":", ",", "col_idx", "]", "\n", "fill_values", "=", "col_fn", "(", "col_data", ")", "\n", "if", "np", ".", "all", "(", "np", ".", "isnan", "(", "fill_values", ")", ")", ":", "\n", "                ", "fill_values", "=", "0", "\n", "", "X", "[", "missing_col", ",", "col_idx", "]", "=", "fill_values", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.fill": [[74, 124], ["sklearn.utils.check_array", "X.copy.copy.copy", "ValueError", "solver.Solver._fill_columns_with_fn", "solver.Solver._fill_columns_with_fn", "solver.Solver._fill_columns_with_fn", "solver.Solver._fill_columns_with_fn"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._fill_columns_with_fn", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._fill_columns_with_fn", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._fill_columns_with_fn", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._fill_columns_with_fn"], ["", "", "def", "fill", "(", "\n", "self", ",", "\n", "X", ",", "\n", "missing_mask", ",", "\n", "fill_method", "=", "None", ",", "\n", "inplace", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        X : np.array\n            Data array containing NaN entries\n\n        missing_mask : np.array\n            Boolean array indicating where NaN entries are\n\n        fill_method : str\n            \"zero\": fill missing entries with zeros\n            \"mean\": fill with column means\n            \"median\" : fill with column medians\n            \"min\": fill with min value per column\n            \"random\": fill with gaussian samples according to mean/std of column\n\n        inplace : bool\n            Modify matrix or fill a copy\n        \"\"\"", "\n", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "if", "not", "inplace", ":", "\n", "            ", "X", "=", "X", ".", "copy", "(", ")", "\n", "\n", "", "if", "not", "fill_method", ":", "\n", "            ", "fill_method", "=", "self", ".", "fill_method", "\n", "\n", "", "if", "fill_method", "not", "in", "(", "\"zero\"", ",", "\"mean\"", ",", "\"median\"", ",", "\"min\"", ",", "\"random\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid fill method: '%s'\"", "%", "(", "fill_method", ")", ")", "\n", "", "elif", "fill_method", "==", "\"zero\"", ":", "\n", "# replace NaN's with 0", "\n", "            ", "X", "[", "missing_mask", "]", "=", "0", "\n", "", "elif", "fill_method", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "_fill_columns_with_fn", "(", "X", ",", "missing_mask", ",", "np", ".", "nanmean", ")", "\n", "", "elif", "fill_method", "==", "\"median\"", ":", "\n", "            ", "self", ".", "_fill_columns_with_fn", "(", "X", ",", "missing_mask", ",", "np", ".", "nanmedian", ")", "\n", "", "elif", "fill_method", "==", "\"min\"", ":", "\n", "            ", "self", ".", "_fill_columns_with_fn", "(", "X", ",", "missing_mask", ",", "np", ".", "nanmin", ")", "\n", "", "elif", "fill_method", "==", "\"random\"", ":", "\n", "            ", "self", ".", "_fill_columns_with_fn", "(", "\n", "X", ",", "\n", "missing_mask", ",", "\n", "col_fn", "=", "generate_random_column_samples", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.prepare_input_data": [[125, 138], ["sklearn.utils.check_array", "solver.Solver._check_input", "numpy.isnan", "solver.Solver._check_missing_value_mask", "X.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._check_input", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver._check_missing_value_mask"], ["", "def", "prepare_input_data", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Check to make sure that the input matrix and its mask of missing\n        values are valid. Returns X and missing mask.\n        \"\"\"", "\n", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "if", "X", ".", "dtype", "!=", "\"f\"", "and", "X", ".", "dtype", "!=", "\"d\"", ":", "\n", "            ", "X", "=", "X", ".", "astype", "(", "float", ")", "\n", "\n", "", "self", ".", "_check_input", "(", "X", ")", "\n", "missing_mask", "=", "np", ".", "isnan", "(", "X", ")", "\n", "self", ".", "_check_missing_value_mask", "(", "missing_mask", ")", "\n", "return", "X", ",", "missing_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip": [[139, 149], ["numpy.asarray"], "methods", ["None"], ["", "def", "clip", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Clip values to fall within any global or column-wise min/max constraints\n        \"\"\"", "\n", "X", "=", "np", ".", "asarray", "(", "X", ")", "\n", "if", "self", ".", "min_value", "is", "not", "None", ":", "\n", "            ", "X", "[", "X", "<", "self", ".", "min_value", "]", "=", "self", ".", "min_value", "\n", "", "if", "self", ".", "max_value", "is", "not", "None", ":", "\n", "            ", "X", "[", "X", ">", "self", ".", "max_value", "]", "=", "self", ".", "max_value", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.project_result": [[150, 159], ["numpy.asarray", "solver.Solver.clip", "solver.Solver.normalizer.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.inverse_transform"], ["", "def", "project_result", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        First undo normalization and then clip to the user-specified min/max\n        range.\n        \"\"\"", "\n", "X", "=", "np", ".", "asarray", "(", "X", ")", "\n", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "X", "=", "self", ".", "normalizer", ".", "inverse_transform", "(", "X", ")", "\n", "", "return", "self", ".", "clip", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.solve": [[160, 167], ["ValueError"], "methods", ["None"], ["", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "\"\"\"\n        Given an initialized matrix X and a mask of where its missing values\n        had been, return a completion of X.\n        \"\"\"", "\n", "raise", "ValueError", "(", "\"%s.solve not yet implemented!\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.fit_transform": [[168, 199], ["solver.Solver.prepare_input_data", "X_original.copy", "solver.Solver.fill", "solver.Solver.solve", "solver.Solver.project_result", "solver.Solver.normalizer.fit_transform", "isinstance", "TypeError", "isinstance", "TypeError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.prepare_input_data", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.fill", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.project_result", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Fit the imputer and then transform input `X`\n\n        Note: all imputations should have a `fit_transform` method,\n        but only some (like IterativeImputer) also support inductive mode\n        using `fit` or `fit_transform` on `X_train` and then `transform`\n        on new `X_test`.\n        \"\"\"", "\n", "X_original", ",", "missing_mask", "=", "self", ".", "prepare_input_data", "(", "X", ")", "\n", "observed_mask", "=", "~", "missing_mask", "\n", "X", "=", "X_original", ".", "copy", "(", ")", "\n", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "X", "=", "self", ".", "normalizer", ".", "fit_transform", "(", "X", ")", "\n", "", "X_filled", "=", "self", ".", "fill", "(", "X", ",", "missing_mask", ",", "inplace", "=", "True", ")", "\n", "if", "not", "isinstance", "(", "X_filled", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Expected %s.fill() to return NumPy array but got %s\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "type", "(", "X_filled", ")", ")", ")", "\n", "\n", "", "X_result", "=", "self", ".", "solve", "(", "X_filled", ",", "missing_mask", ")", "\n", "if", "not", "isinstance", "(", "X_result", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Expected %s.solve() to return NumPy array but got %s\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "type", "(", "X_result", ")", ")", ")", "\n", "\n", "", "X_result", "=", "self", ".", "project_result", "(", "X", "=", "X_result", ")", "\n", "X_result", "[", "observed_mask", "]", "=", "X_original", "[", "observed_mask", "]", "\n", "return", "X_result", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.fit": [[200, 214], ["ValueError"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Fit the imputer on input `X`.\n\n        Note: all imputations should have a `fit_transform` method,\n        but only some (like IterativeImputer) also support inductive mode\n        using `fit` or `fit_transform` on `X_train` and then `transform`\n        on new `X_test`.\n        \"\"\"", "\n", "raise", "ValueError", "(", "\n", "\"%s.fit not implemented! This imputation algorithm likely \"", "\n", "\"doesn't support inductive mode. Only fit_transform is \"", "\n", "\"supported at this time.\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.transform": [[215, 229], ["ValueError"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Transform input `X`.\n\n        Note: all imputations should have a `fit_transform` method,\n        but only some (like IterativeImputer) also support inductive mode\n        using `fit` or `fit_transform` on `X_train` and then `transform`\n        on new `X_test`.\n        \"\"\"", "\n", "raise", "ValueError", "(", "\n", "\"%s.transform not implemented! This imputation algorithm likely \"", "\n", "\"doesn't support inductive mode. Only %s.fit_transform is \"", "\n", "\"supported at this time.\"", "%", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.simple_fill.SimpleFill.__init__": [[19, 33], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fill_method", "=", "\"mean\"", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Possible values for fill_method:\n            \"zero\": fill missing entries with zeros\n            \"mean\": fill with column means\n            \"median\" : fill with column medians\n            \"min\": fill with min value per column\n            \"random\": fill with gaussian noise according to mean/std of column\n        \"\"\"", "\n", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "fill_method", "=", "fill_method", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.simple_fill.SimpleFill.solve": [[34, 39], ["None"], "methods", ["None"], ["", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "\"\"\"\n        Since X is given to us already filled, just return it.\n        \"\"\"", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.dense_nan_matrix": [[25, 27], ["numpy.ones"], "function", ["None"], ["def", "dense_nan_matrix", "(", "shape", ",", "dtype", ")", ":", "\n", "    ", "return", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "*", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.collect_nested_keys": [[29, 37], ["list", "set", "list", "sorted", "inner_key_set.union.union", "sorted", "nested_dict.keys", "inner_dict.keys"], "function", ["None"], ["", "def", "collect_nested_keys", "(", "nested_dict", ")", ":", "\n", "    ", "outer_key_list", "=", "list", "(", "sorted", "(", "nested_dict", ".", "keys", "(", ")", ")", ")", "\n", "inner_key_set", "=", "set", "(", "[", "]", ")", "\n", "for", "k", "in", "outer_key_list", ":", "\n", "        ", "inner_dict", "=", "nested_dict", "[", "k", "]", "\n", "inner_key_set", "=", "inner_key_set", ".", "union", "(", "inner_dict", ".", "keys", "(", ")", ")", "\n", "", "inner_key_list", "=", "list", "(", "sorted", "(", "inner_key_set", ")", ")", "\n", "return", "outer_key_list", ",", "inner_key_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.nested_key_indices": [[39, 48], ["dictionary_helpers.collect_nested_keys", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.collect_nested_keys"], ["", "def", "nested_key_indices", "(", "nested_dict", ")", ":", "\n", "    ", "\"\"\"\n    Give an ordering to the outer and inner keys used in a dictionary that\n    maps to dictionaries.\n    \"\"\"", "\n", "outer_keys", ",", "inner_keys", "=", "collect_nested_keys", "(", "nested_dict", ")", "\n", "outer_key_indices", "=", "{", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "outer_keys", ")", "}", "\n", "inner_key_indices", "=", "{", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "inner_keys", ")", "}", "\n", "return", "outer_key_indices", ",", "inner_key_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.flattened_nested_key_indices": [[50, 58], ["dictionary_helpers.collect_nested_keys", "list", "sorted", "set", "enumerate"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.collect_nested_keys"], ["", "def", "flattened_nested_key_indices", "(", "nested_dict", ")", ":", "\n", "    ", "\"\"\"\n    Combine the outer and inner keys of nested dictionaries into a single\n    ordering.\n    \"\"\"", "\n", "outer_keys", ",", "inner_keys", "=", "collect_nested_keys", "(", "nested_dict", ")", "\n", "combined_keys", "=", "list", "(", "sorted", "(", "set", "(", "outer_keys", "+", "inner_keys", ")", ")", ")", "\n", "return", "{", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "combined_keys", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.index_dict_to_sorted_list": [[60, 65], ["key_indices.items", "len"], "function", ["None"], ["", "def", "index_dict_to_sorted_list", "(", "key_indices", ")", ":", "\n", "    ", "sorted_list", "=", "[", "None", "]", "*", "len", "(", "key_indices", ")", "\n", "for", "(", "key", ",", "index", ")", "in", "key_indices", ".", "items", "(", ")", ":", "\n", "        ", "sorted_list", "[", "index", "]", "=", "key", "\n", "", "return", "sorted_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_nested_dictionary": [[67, 108], ["len", "len", "array_fn", "nested_dict.items", "dictionary_helpers.index_dict_to_sorted_list", "dictionary_helpers.index_dict_to_sorted_list", "dictionary_helpers.flattened_nested_key_indices", "dictionary_helpers.nested_key_indices", "sub_dictionary.items"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.index_dict_to_sorted_list", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.index_dict_to_sorted_list", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.flattened_nested_key_indices", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.nested_key_indices"], ["", "def", "array_from_nested_dictionary", "(", "\n", "nested_dict", ",", "\n", "array_fn", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    nested_dict : dict\n        Dictionary which contains dictionaries\n\n    array_fn : function\n        Takes shape and dtype as arguments, returns empty array.\n\n    dtype : dtype\n        NumPy dtype of result array\n\n    square_result : bool\n        Combine keys from outer and inner dictionaries.\n\n    Returns array and sorted lists of the outer and inner keys.\n    \"\"\"", "\n", "if", "square_result", ":", "\n", "        ", "outer_key_indices", "=", "inner_key_indices", "=", "flattened_nested_key_indices", "(", "\n", "nested_dict", ")", "\n", "", "else", ":", "\n", "        ", "outer_key_indices", ",", "inner_key_indices", "=", "nested_key_indices", "(", "\n", "nested_dict", ")", "\n", "\n", "", "n_rows", "=", "len", "(", "outer_key_indices", ")", "\n", "n_cols", "=", "len", "(", "inner_key_indices", ")", "\n", "shape", "=", "(", "n_rows", ",", "n_cols", ")", "\n", "result", "=", "array_fn", "(", "shape", ",", "dtype", ")", "\n", "for", "outer_key", ",", "sub_dictionary", "in", "nested_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "outer_key_indices", "[", "outer_key", "]", "\n", "for", "inner_key", ",", "value", "in", "sub_dictionary", ".", "items", "(", ")", ":", "\n", "            ", "j", "=", "inner_key_indices", "[", "inner_key", "]", "\n", "result", "[", "i", ",", "j", "]", "=", "value", "\n", "", "", "outer_key_list", "=", "index_dict_to_sorted_list", "(", "outer_key_indices", ")", "\n", "inner_key_list", "=", "index_dict_to_sorted_list", "(", "inner_key_indices", ")", "\n", "return", "result", ",", "outer_key_list", ",", "inner_key_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.sparse_dok_matrix_from_nested_dictionary": [[110, 119], ["dictionary_helpers.array_from_nested_dictionary"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_nested_dictionary"], ["", "def", "sparse_dok_matrix_from_nested_dictionary", "(", "\n", "nested_dict", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "return", "array_from_nested_dictionary", "(", "\n", "nested_dict", ",", "\n", "array_fn", "=", "dok_matrix", ",", "\n", "dtype", "=", "dtype", ",", "\n", "square_result", "=", "square_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.dense_matrix_from_nested_dictionary": [[121, 130], ["dictionary_helpers.array_from_nested_dictionary"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_nested_dictionary"], ["", "def", "dense_matrix_from_nested_dictionary", "(", "\n", "nested_dict", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "return", "array_from_nested_dictionary", "(", "\n", "nested_dict", ",", "\n", "array_fn", "=", "dense_nan_matrix", ",", "\n", "dtype", "=", "dtype", ",", "\n", "square_result", "=", "square_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.matrix_to_pair_dictionary": [[132, 179], ["enumerate", "len", "ValueError", "len", "ValueError", "enumerate", "six.moves.range", "six.moves.range", "len", "len", "filter_fn"], "function", ["None"], ["", "def", "matrix_to_pair_dictionary", "(", "\n", "X", ",", "row_keys", "=", "None", ",", "column_keys", "=", "None", ",", "filter_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    X : numpy.ndarray\n\n    row_keys : dict\n        Dictionary mapping indices to row names. If omitted then maps each\n        number to its string representation, such as 1 -> \"1\".\n\n    column_keys : dict\n        If omitted and matrix is square, then use the same dictionary\n        as the rows. Otherwise map each column index to its string form.\n\n    filter_fn : function\n        If given then only add elements for which this function returns True.\n    \"\"\"", "\n", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "\n", "if", "row_keys", "is", "None", ":", "\n", "        ", "row_keys", "=", "{", "i", ":", "i", "for", "i", "in", "range", "(", "n_rows", ")", "}", "\n", "\n", "", "if", "column_keys", "is", "None", ":", "\n", "        ", "if", "n_rows", "==", "n_cols", ":", "\n", "            ", "column_keys", "=", "row_keys", "\n", "", "else", ":", "\n", "            ", "column_keys", "=", "{", "j", ":", "j", "for", "j", "in", "range", "(", "n_cols", ")", "}", "\n", "\n", "", "", "if", "len", "(", "row_keys", ")", "!=", "n_rows", ":", "\n", "        ", "raise", "ValueError", "(", "\"Need %d row keys but got list of length %d\"", "%", "(", "\n", "n_rows", ",", "\n", "len", "(", "row_keys", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "column_keys", ")", "!=", "n_cols", ":", "\n", "        ", "raise", "ValueError", "(", "\"Need %d column keys but got list of length %d\"", "%", "(", "\n", "n_cols", ",", "\n", "len", "(", "column_keys", ")", ")", ")", "\n", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "i", ",", "X_i", "in", "enumerate", "(", "X", ")", ":", "\n", "        ", "row_key", "=", "row_keys", "[", "i", "]", "\n", "for", "j", ",", "X_ij", "in", "enumerate", "(", "X_i", ")", ":", "\n", "            ", "if", "filter_fn", "and", "not", "filter_fn", "(", "X_ij", ")", ":", "\n", "                ", "continue", "\n", "", "column_key", "=", "column_keys", "[", "j", "]", "\n", "key_pair", "=", "(", "row_key", ",", "column_key", ")", "\n", "result_dict", "[", "key_pair", "]", "=", "X_ij", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.curry_pair_dictionary": [[181, 189], ["collections.defaultdict", "key_pair_dict.items"], "function", ["None"], ["", "def", "curry_pair_dictionary", "(", "key_pair_dict", ",", "default_value", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Transform dictionary from pairs of keys to dict -> dict -> float\n    \"\"\"", "\n", "result", "=", "defaultdict", "(", "dict", ")", "\n", "for", "(", "a", ",", "b", ")", ",", "value", "in", "key_pair_dict", ".", "items", "(", ")", ":", "\n", "        ", "result", "[", "a", "]", "[", "b", "]", "=", "value", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.uncurry_nested_dictionary": [[191, 201], ["curried_dict.items", "a_dict.items"], "function", ["None"], ["", "def", "uncurry_nested_dictionary", "(", "curried_dict", ")", ":", "\n", "    ", "\"\"\"\n    Transform dictionary from (key_a -> key_b -> float) to\n    (key_a, key_b) -> float\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "a", ",", "a_dict", "in", "curried_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "b", ",", "value", "in", "a_dict", ".", "items", "(", ")", ":", "\n", "            ", "result", "[", "(", "a", ",", "b", ")", "]", "=", "value", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.matrix_to_nested_dictionary": [[203, 214], ["dictionary_helpers.matrix_to_pair_dictionary", "dictionary_helpers.curry_pair_dictionary"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.matrix_to_pair_dictionary", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.curry_pair_dictionary"], ["", "def", "matrix_to_nested_dictionary", "(", "\n", "X", ",", "\n", "row_keys", "=", "None", ",", "\n", "column_keys", "=", "None", ",", "\n", "filter_fn", "=", "None", ")", ":", "\n", "    ", "pair_dict", "=", "matrix_to_pair_dictionary", "(", "\n", "X", ",", "\n", "row_keys", "=", "row_keys", ",", "\n", "column_keys", "=", "column_keys", ",", "\n", "filter_fn", "=", "filter_fn", ")", "\n", "return", "curry_pair_dictionary", "(", "pair_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.pair_dict_key_sets": [[216, 223], ["set", "set", "pair_dict.keys", "set.add", "set.add"], "function", ["None"], ["", "def", "pair_dict_key_sets", "(", "pair_dict", ")", ":", "\n", "    ", "row_keys", "=", "set", "(", "[", "]", ")", "\n", "column_keys", "=", "set", "(", "[", "]", ")", "\n", "for", "(", "row_key", ",", "column_key", ")", "in", "pair_dict", ".", "keys", "(", ")", ":", "\n", "        ", "row_keys", ".", "add", "(", "row_key", ")", "\n", "column_keys", ".", "add", "(", "column_key", ")", "\n", "", "return", "row_keys", ",", "column_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_pair_dictionary": [[225, 273], ["dictionary_helpers.pair_dict_key_sets", "len", "len", "array_fn", "pair_dict.items", "row_key_set.union", "list", "list", "list", "sorted", "sorted", "sorted", "enumerate", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.pair_dict_key_sets"], ["", "def", "array_from_pair_dictionary", "(", "\n", "pair_dict", ",", "\n", "array_fn", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convert a dictionary whose keys are pairs (k1, k2) into a sparse\n    or incomplete array.\n\n    Parameters\n    ----------\n    pair_dict : dict\n        Dictionary from pairs of keys to values.\n\n    array_fn : function\n        Takes shape and dtype as arguments, returns empty array.\n\n    dtype : dtype\n        NumPy dtype of result array\n\n    square_result : bool\n        Combine keys from rows and columns\n\n    Returns array and sorted lists of the row and column keys.\n    \"\"\"", "\n", "row_key_set", ",", "column_key_set", "=", "pair_dict_key_sets", "(", "pair_dict", ")", "\n", "\n", "if", "square_result", ":", "\n", "        ", "combined_key_set", "=", "row_key_set", ".", "union", "(", "column_key_set", ")", "\n", "row_key_list", "=", "column_key_list", "=", "list", "(", "sorted", "(", "combined_key_set", ")", ")", "\n", "row_key_indices", "=", "column_key_indices", "=", "{", "\n", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "row_key_list", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "row_key_list", "=", "list", "(", "sorted", "(", "row_key_set", ")", ")", "\n", "column_key_list", "=", "list", "(", "sorted", "(", "column_key_set", ")", ")", "\n", "row_key_indices", "=", "{", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "row_key_list", ")", "}", "\n", "column_key_indices", "=", "{", "k", ":", "i", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "column_key_list", ")", "}", "\n", "\n", "", "n_rows", "=", "len", "(", "row_key_indices", ")", "\n", "n_cols", "=", "len", "(", "column_key_indices", ")", "\n", "shape", "=", "(", "n_rows", ",", "n_cols", ")", "\n", "result", "=", "array_fn", "(", "shape", ",", "dtype", ")", "\n", "for", "(", "row_key", ",", "column_key", ")", ",", "value", "in", "pair_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "row_key_indices", "[", "row_key", "]", "\n", "j", "=", "column_key_indices", "[", "column_key", "]", "\n", "result", "[", "i", ",", "j", "]", "=", "value", "\n", "", "return", "result", ",", "row_key_list", ",", "column_key_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.sparse_dok_matrix_from_pair_dictionary": [[275, 284], ["dictionary_helpers.array_from_pair_dictionary"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_pair_dictionary"], ["", "def", "sparse_dok_matrix_from_pair_dictionary", "(", "\n", "pair_dict", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "return", "array_from_pair_dictionary", "(", "\n", "pair_dict", ",", "\n", "array_fn", "=", "dok_matrix", ",", "\n", "dtype", "=", "dtype", ",", "\n", "square_result", "=", "square_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.dense_matrix_from_pair_dictionary": [[286, 295], ["dictionary_helpers.array_from_pair_dictionary"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.array_from_pair_dictionary"], ["", "def", "dense_matrix_from_pair_dictionary", "(", "\n", "pair_dict", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "square_result", "=", "False", ")", ":", "\n", "    ", "return", "array_from_pair_dictionary", "(", "\n", "pair_dict", ",", "\n", "array_fn", "=", "dense_nan_matrix", ",", "\n", "dtype", "=", "dtype", ",", "\n", "square_result", "=", "square_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.transpose_nested_dictionary": [[297, 308], ["collections.defaultdict", "nested_dict.items", "d.items"], "function", ["None"], ["", "def", "transpose_nested_dictionary", "(", "nested_dict", ")", ":", "\n", "    ", "\"\"\"\n    Given a nested dictionary from k1 -> k2 > value\n    transpose its outer and inner keys so it maps\n    k2 -> k1 -> value.\n    \"\"\"", "\n", "result", "=", "defaultdict", "(", "dict", ")", "\n", "for", "k1", ",", "d", "in", "nested_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "k2", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "result", "[", "k2", "]", "[", "k1", "]", "=", "v", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.reverse_lookup_from_nested_dict": [[310, 331], ["collections.defaultdict", "values_dict.items", "column_dict.items", "reverse_lookup[].append"], "function", ["None"], ["", "def", "reverse_lookup_from_nested_dict", "(", "values_dict", ")", ":", "\n", "    ", "\"\"\"\n    Create reverse-lookup dictionary mapping each row key to a list of triplets:\n    [(column key, value), ...]\n\n    Parameters\n    ----------\n    nested_values_dict : dict\n        column_key -> row_key -> value\n\n    weights_dict : dict\n        column_key -> row_key -> sample weight\n\n    Returns dictionary mapping row_key -> [(column key, value)]\n    \"\"\"", "\n", "reverse_lookup", "=", "defaultdict", "(", "list", ")", "\n", "for", "column_key", ",", "column_dict", "in", "values_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "row_key", ",", "value", "in", "column_dict", ".", "items", "(", ")", ":", "\n", "            ", "entry", "=", "(", "column_key", ",", "value", ")", "\n", "reverse_lookup", "[", "row_key", "]", ".", "append", "(", "entry", ")", "\n", "", "", "return", "reverse_lookup", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer.__init__": [[209, 216], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "missing_values", "=", "np", ".", "nan", ",", "strategy", "=", "\"mean\"", ",", "\n", "fill_value", "=", "None", ",", "verbose", "=", "0", ",", "copy", "=", "True", ")", ":", "\n", "        ", "self", ".", "missing_values", "=", "missing_values", "\n", "self", ".", "strategy", "=", "strategy", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "copy", "=", "copy", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._validate_input": [[217, 255], ["iterative_imputer._check_inputs_dtype", "ValueError", "iterative_imputer.is_scalar_nan", "sklearn.utils.check_array", "ValueError", "str", "ValueError"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._check_inputs_dtype", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.is_scalar_nan"], ["", "def", "_validate_input", "(", "self", ",", "X", ")", ":", "\n", "        ", "allowed_strategies", "=", "[", "\"mean\"", ",", "\"median\"", ",", "\"most_frequent\"", ",", "\"constant\"", "]", "\n", "if", "self", ".", "strategy", "not", "in", "allowed_strategies", ":", "\n", "            ", "raise", "ValueError", "(", "\"Can only use these strategies: {0} \"", "\n", "\" got strategy={1}\"", ".", "format", "(", "allowed_strategies", ",", "\n", "self", ".", "strategy", ")", ")", "\n", "\n", "", "if", "self", ".", "strategy", "in", "(", "\"most_frequent\"", ",", "\"constant\"", ")", ":", "\n", "            ", "dtype", "=", "None", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "FLOAT_DTYPES", "\n", "\n", "", "if", "not", "is_scalar_nan", "(", "self", ".", "missing_values", ")", ":", "\n", "            ", "force_all_finite", "=", "True", "\n", "", "else", ":", "\n", "            ", "force_all_finite", "=", "False", "# \"allow-nan\"", "\n", "\n", "", "try", ":", "\n", "            ", "X", "=", "check_array", "(", "X", ",", "accept_sparse", "=", "'csc'", ",", "dtype", "=", "dtype", ",", "\n", "force_all_finite", "=", "force_all_finite", ",", "copy", "=", "self", ".", "copy", ")", "\n", "", "except", "ValueError", "as", "ve", ":", "\n", "            ", "if", "\"could not convert\"", "in", "str", "(", "ve", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cannot use {0} strategy with non-numeric \"", "\n", "\"data. Received datatype :{1}.\"", "\n", "\"\"", ".", "format", "(", "self", ".", "strategy", ",", "X", ".", "dtype", ".", "kind", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ve", "\n", "\n", "", "", "_check_inputs_dtype", "(", "X", ",", "self", ".", "missing_values", ")", "\n", "if", "X", ".", "dtype", ".", "kind", "not", "in", "(", "\"i\"", ",", "\"u\"", ",", "\"f\"", ",", "\"O\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"_SimpleImputer does not support data with dtype \"", "\n", "\"{0}. Please provide either a numeric array (with\"", "\n", "\" a floating point or integer dtype) or \"", "\n", "\"categorical data represented either as an array \"", "\n", "\"with integer dtype or an array of string values \"", "\n", "\"with an object dtype.\"", ".", "format", "(", "X", ".", "dtype", ")", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer.fit": [[256, 308], ["iterative_imputer._SimpleImputer._validate_input", "scipy.sparse.issparse", "ValueError", "iterative_imputer._SimpleImputer._dense_fit", "isinstance", "ValueError", "iterative_imputer._SimpleImputer._sparse_fit"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._validate_input", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._dense_fit", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._sparse_fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit the imputer on X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            Input data, where ``n_samples`` is the number of samples and\n            ``n_features`` is the number of features.\n\n        Returns\n        -------\n        self : _SimpleImputer\n        \"\"\"", "\n", "X", "=", "self", ".", "_validate_input", "(", "X", ")", "\n", "\n", "# default fill_value is 0 for numerical input and \"missing_value\"", "\n", "# otherwise", "\n", "if", "self", ".", "fill_value", "is", "None", ":", "\n", "            ", "if", "X", ".", "dtype", ".", "kind", "in", "(", "\"i\"", ",", "\"u\"", ",", "\"f\"", ")", ":", "\n", "                ", "fill_value", "=", "0", "\n", "", "else", ":", "\n", "                ", "fill_value", "=", "\"missing_value\"", "\n", "", "", "else", ":", "\n", "            ", "fill_value", "=", "self", ".", "fill_value", "\n", "\n", "# fill_value should be numerical in case of numerical input", "\n", "", "if", "(", "self", ".", "strategy", "==", "\"constant\"", "and", "\n", "X", ".", "dtype", ".", "kind", "in", "(", "\"i\"", ",", "\"u\"", ",", "\"f\"", ")", "and", "\n", "not", "isinstance", "(", "fill_value", ",", "numbers", ".", "Real", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"'fill_value'={0} is invalid. Expected a \"", "\n", "\"numerical value when imputing numerical \"", "\n", "\"data\"", ".", "format", "(", "fill_value", ")", ")", "\n", "\n", "", "if", "sparse", ".", "issparse", "(", "X", ")", ":", "\n", "# missing_values = 0 not allowed with sparse data as it would", "\n", "# force densification", "\n", "            ", "if", "self", ".", "missing_values", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Imputation not possible when missing_values \"", "\n", "\"== 0 and input is sparse. Provide a dense \"", "\n", "\"array instead.\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "statistics_", "=", "self", ".", "_sparse_fit", "(", "X", ",", "\n", "self", ".", "strategy", ",", "\n", "self", ".", "missing_values", ",", "\n", "fill_value", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "statistics_", "=", "self", ".", "_dense_fit", "(", "X", ",", "\n", "self", ".", "strategy", ",", "\n", "self", ".", "missing_values", ",", "\n", "fill_value", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._sparse_fit": [[309, 346], ["iterative_imputer._get_mask", "numpy.empty", "numpy.empty", "numpy.diff", "numpy.diff", "numpy.empty.fill", "range", "iterative_imputer._get_mask", "_get_mask.sum", "sklearn.utils.sparsefuncs._get_median", "column.sum", "iterative_imputer._most_frequent"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.fill", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._most_frequent"], ["", "def", "_sparse_fit", "(", "self", ",", "X", ",", "strategy", ",", "missing_values", ",", "fill_value", ")", ":", "\n", "        ", "\"\"\"Fit the transformer on sparse data.\"\"\"", "\n", "mask_data", "=", "_get_mask", "(", "X", ".", "data", ",", "missing_values", ")", "\n", "n_implicit_zeros", "=", "X", ".", "shape", "[", "0", "]", "-", "np", ".", "diff", "(", "X", ".", "indptr", ")", "\n", "\n", "statistics", "=", "np", ".", "empty", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "strategy", "==", "\"constant\"", ":", "\n", "# for constant strategy, self.statistcs_ is used to store", "\n", "# fill_value in each column", "\n", "            ", "statistics", ".", "fill", "(", "fill_value", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "column", "=", "X", ".", "data", "[", "X", ".", "indptr", "[", "i", "]", ":", "X", ".", "indptr", "[", "i", "+", "1", "]", "]", "\n", "mask_column", "=", "mask_data", "[", "X", ".", "indptr", "[", "i", "]", ":", "X", ".", "indptr", "[", "i", "+", "1", "]", "]", "\n", "column", "=", "column", "[", "~", "mask_column", "]", "\n", "\n", "# combine explicit and implicit zeros", "\n", "mask_zeros", "=", "_get_mask", "(", "column", ",", "0", ")", "\n", "column", "=", "column", "[", "~", "mask_zeros", "]", "\n", "n_explicit_zeros", "=", "mask_zeros", ".", "sum", "(", ")", "\n", "n_zeros", "=", "n_implicit_zeros", "[", "i", "]", "+", "n_explicit_zeros", "\n", "\n", "if", "strategy", "==", "\"mean\"", ":", "\n", "                    ", "s", "=", "column", ".", "size", "+", "n_zeros", "\n", "statistics", "[", "i", "]", "=", "np", ".", "nan", "if", "s", "==", "0", "else", "column", ".", "sum", "(", ")", "/", "s", "\n", "\n", "", "elif", "strategy", "==", "\"median\"", ":", "\n", "                    ", "statistics", "[", "i", "]", "=", "_get_median", "(", "column", ",", "\n", "n_zeros", ")", "\n", "\n", "", "elif", "strategy", "==", "\"most_frequent\"", ":", "\n", "                    ", "statistics", "[", "i", "]", "=", "_most_frequent", "(", "column", ",", "\n", "0", ",", "\n", "n_zeros", ")", "\n", "", "", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._dense_fit": [[347, 398], ["iterative_imputer._get_mask", "numpy.masked_array", "numpy.masked_array", "numpy.ma.mean", "numpy.ma.mean", "numpy.ma.getdata", "numpy.ma.getdata", "numpy.ma.median", "numpy.ma.median", "numpy.ma.getdata", "numpy.ma.getdata", "numpy.ma.getmask", "numpy.ma.getmask", "X.transpose.transpose.transpose", "mask.transpose.transpose.transpose", "enumerate", "numpy.ma.getmaskarray", "numpy.ma.getmaskarray", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "zip", "numpy.logical_not().astype", "numpy.logical_not().astype", "iterative_imputer._most_frequent", "numpy.full", "numpy.full", "numpy.logical_not", "numpy.logical_not"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._most_frequent"], ["", "def", "_dense_fit", "(", "self", ",", "X", ",", "strategy", ",", "missing_values", ",", "fill_value", ")", ":", "\n", "        ", "\"\"\"Fit the transformer on dense data.\"\"\"", "\n", "mask", "=", "_get_mask", "(", "X", ",", "missing_values", ")", "\n", "masked_X", "=", "ma", ".", "masked_array", "(", "X", ",", "mask", "=", "mask", ")", "\n", "\n", "# Mean", "\n", "if", "strategy", "==", "\"mean\"", ":", "\n", "            ", "mean_masked", "=", "np", ".", "ma", ".", "mean", "(", "masked_X", ",", "axis", "=", "0", ")", "\n", "# Avoid the warning \"Warning: converting a masked element to nan.\"", "\n", "mean", "=", "np", ".", "ma", ".", "getdata", "(", "mean_masked", ")", "\n", "mean", "[", "np", ".", "ma", ".", "getmask", "(", "mean_masked", ")", "]", "=", "np", ".", "nan", "\n", "\n", "return", "mean", "\n", "\n", "# Median", "\n", "", "elif", "strategy", "==", "\"median\"", ":", "\n", "            ", "median_masked", "=", "np", ".", "ma", ".", "median", "(", "masked_X", ",", "axis", "=", "0", ")", "\n", "# Avoid the warning \"Warning: converting a masked element to nan.\"", "\n", "median", "=", "np", ".", "ma", ".", "getdata", "(", "median_masked", ")", "\n", "median", "[", "np", ".", "ma", ".", "getmaskarray", "(", "median_masked", ")", "]", "=", "np", ".", "nan", "\n", "\n", "return", "median", "\n", "\n", "# Most frequent", "\n", "", "elif", "strategy", "==", "\"most_frequent\"", ":", "\n", "# scipy.stats.mstats.mode cannot be used because it will no work", "\n", "# properly if the first element is masked and if its frequency", "\n", "# is equal to the frequency of the most frequent valid element", "\n", "# See https://github.com/scipy/scipy/issues/2636", "\n", "\n", "# To be able access the elements by columns", "\n", "            ", "X", "=", "X", ".", "transpose", "(", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", ")", "\n", "\n", "if", "X", ".", "dtype", ".", "kind", "==", "\"O\"", ":", "\n", "                ", "most_frequent", "=", "np", ".", "empty", "(", "X", ".", "shape", "[", "0", "]", ",", "dtype", "=", "object", ")", "\n", "", "else", ":", "\n", "                ", "most_frequent", "=", "np", ".", "empty", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "for", "i", ",", "(", "row", ",", "row_mask", ")", "in", "enumerate", "(", "zip", "(", "X", "[", ":", "]", ",", "mask", "[", ":", "]", ")", ")", ":", "\n", "                ", "row_mask", "=", "np", ".", "logical_not", "(", "row_mask", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "row", "=", "row", "[", "row_mask", "]", "\n", "most_frequent", "[", "i", "]", "=", "_most_frequent", "(", "row", ",", "np", ".", "nan", ",", "0", ")", "\n", "\n", "", "return", "most_frequent", "\n", "\n", "# Constant", "\n", "", "elif", "strategy", "==", "\"constant\"", ":", "\n", "# for constant strategy, self.statistcs_ is used to store", "\n", "# fill_value in each column", "\n", "            ", "return", "np", ".", "full", "(", "X", ".", "shape", "[", "1", "]", ",", "fill_value", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer.transform": [[399, 456], ["sklearn.utils.validation.check_is_fitted", "iterative_imputer._SimpleImputer._validate_input", "scipy.sparse.issparse", "ValueError", "iterative_imputer._get_mask", "numpy.logical_not", "numpy.logical_not", "numpy.flatnonzero", "numpy.flatnonzero", "_get_mask.any", "iterative_imputer._get_mask", "numpy.sum", "numpy.sum", "numpy.repeat", "numpy.repeat", "ValueError", "iterative_imputer._get_mask", "valid_statistics[].astype", "numpy.where", "numpy.where", "numpy.arange", "numpy.arange", "warnings.warn", "numpy.repeat", "numpy.repeat", "_get_mask.transpose", "numpy.arange", "numpy.arange", "numpy.diff", "numpy.diff", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._SimpleImputer._validate_input", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask"], ["", "", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Impute all missing values in X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            The input data to complete.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "'statistics_'", ")", "\n", "\n", "X", "=", "self", ".", "_validate_input", "(", "X", ")", "\n", "\n", "statistics", "=", "self", ".", "statistics_", "\n", "\n", "if", "X", ".", "shape", "[", "1", "]", "!=", "statistics", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"X has %d features per sample, expected %d\"", "\n", "%", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "statistics_", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Delete the invalid columns if strategy is not constant", "\n", "", "if", "self", ".", "strategy", "==", "\"constant\"", ":", "\n", "            ", "valid_statistics", "=", "statistics", "\n", "", "else", ":", "\n", "# same as np.isnan but also works for object dtypes", "\n", "            ", "invalid_mask", "=", "_get_mask", "(", "statistics", ",", "np", ".", "nan", ")", "\n", "valid_mask", "=", "np", ".", "logical_not", "(", "invalid_mask", ")", "\n", "valid_statistics", "=", "statistics", "[", "valid_mask", "]", "\n", "valid_statistics_indexes", "=", "np", ".", "flatnonzero", "(", "valid_mask", ")", "\n", "\n", "if", "invalid_mask", ".", "any", "(", ")", ":", "\n", "                ", "missing", "=", "np", ".", "arange", "(", "X", ".", "shape", "[", "1", "]", ")", "[", "invalid_mask", "]", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Deleting features without \"", "\n", "\"observed values: %s\"", "%", "missing", ")", "\n", "", "X", "=", "X", "[", ":", ",", "valid_statistics_indexes", "]", "\n", "\n", "# Do actual imputation", "\n", "", "", "if", "sparse", ".", "issparse", "(", "X", ")", ":", "\n", "            ", "if", "self", ".", "missing_values", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Imputation not possible when missing_values \"", "\n", "\"== 0 and input is sparse. Provide a dense \"", "\n", "\"array instead.\"", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "_get_mask", "(", "X", ".", "data", ",", "self", ".", "missing_values", ")", "\n", "indexes", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "len", "(", "X", ".", "indptr", ")", "-", "1", ",", "dtype", "=", "np", ".", "int", ")", ",", "\n", "np", ".", "diff", "(", "X", ".", "indptr", ")", ")", "[", "mask", "]", "\n", "\n", "X", ".", "data", "[", "mask", "]", "=", "valid_statistics", "[", "indexes", "]", ".", "astype", "(", "X", ".", "dtype", ",", "\n", "copy", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "_get_mask", "(", "X", ",", "self", ".", "missing_values", ")", "\n", "n_missing", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "0", ")", "\n", "values", "=", "np", ".", "repeat", "(", "valid_statistics", ",", "n_missing", ")", "\n", "coordinates", "=", "np", ".", "where", "(", "mask", ".", "transpose", "(", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "X", "[", "coordinates", "]", "=", "values", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer.__init__": [[583, 610], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "missing_values", "=", "np", ".", "nan", ",", "\n", "imputation_order", "=", "'ascending'", ",", "\n", "n_iter", "=", "10", ",", "\n", "predictor", "=", "None", ",", "\n", "sample_posterior", "=", "False", ",", "\n", "n_nearest_features", "=", "None", ",", "\n", "initial_strategy", "=", "\"mean\"", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "\n", "        ", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ")", "\n", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "missing_values", "=", "missing_values", "\n", "self", ".", "imputation_order", "=", "imputation_order", "\n", "self", ".", "predictor", "=", "predictor", "\n", "self", ".", "sample_posterior", "=", "sample_posterior", "\n", "self", ".", "n_nearest_features", "=", "n_nearest_features", "\n", "self", ".", "initial_strategy", "=", "initial_strategy", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._impute_one_feature": [[611, 697], ["sklearn.utils.safe_indexing", "iterative_imputer.IterativeImputer.clip", "numpy.any", "numpy.any", "ValueError", "sklearn.base.clone", "sklearn.utils.safe_indexing", "sklearn.utils.safe_indexing", "sklearn.base.clone.fit", "sklearn.base.clone.predict", "numpy.zeros", "numpy.zeros", "iterative_imputer.IterativeImputer.random_state_.normal", "sklearn.base.clone.predict"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit"], ["", "def", "_impute_one_feature", "(", "self", ",", "\n", "X_filled", ",", "\n", "mask_missing_values", ",", "\n", "feat_idx", ",", "\n", "neighbor_feat_idx", ",", "\n", "predictor", "=", "None", ",", "\n", "fit_mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Impute a single feature from the others provided.\n\n        This function predicts the missing values of one of the features using\n        the current estimates of all the other features. The ``predictor`` must\n        support ``return_std=True`` in its ``predict`` method for this function\n        to work.\n\n        Parameters\n        ----------\n        X_filled : ndarray\n            Input data with the most recent imputations.\n\n        mask_missing_values : ndarray\n            Input data's missing indicator matrix.\n\n        feat_idx : int\n            Index of the feature currently being imputed.\n\n        neighbor_feat_idx : ndarray\n            Indices of the features to be used in imputing ``feat_idx``.\n\n        predictor : object\n            The predictor to use at this step of the round-robin imputation.\n            If ``sample_posterior`` is True, the predictor must support\n            ``return_std`` in its ``predict`` method.\n            If None, it will be cloned from self._predictor.\n\n        fit_mode : boolean, default=True\n            Whether to fit and predict with the predictor or just predict.\n\n        Returns\n        -------\n        X_filled : ndarray\n            Input data with ``X_filled[missing_row_mask, feat_idx]`` updated.\n\n        predictor : predictor with sklearn API\n            The fitted predictor used to impute\n            ``X_filled[missing_row_mask, feat_idx]``.\n        \"\"\"", "\n", "\n", "# if nothing is missing, just return the default", "\n", "# (should not happen at fit time because feat_ids would be excluded)", "\n", "missing_row_mask", "=", "mask_missing_values", "[", ":", ",", "feat_idx", "]", "\n", "if", "not", "np", ".", "any", "(", "missing_row_mask", ")", ":", "\n", "            ", "return", "X_filled", ",", "predictor", "\n", "\n", "", "if", "predictor", "is", "None", "and", "fit_mode", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"If fit_mode is False, then an already-fitted \"", "\n", "\"predictor should be passed in.\"", ")", "\n", "\n", "", "if", "predictor", "is", "None", ":", "\n", "            ", "predictor", "=", "clone", "(", "self", ".", "_predictor", ")", "\n", "\n", "", "if", "fit_mode", ":", "\n", "            ", "X_train", "=", "safe_indexing", "(", "X_filled", "[", ":", ",", "neighbor_feat_idx", "]", ",", "\n", "~", "missing_row_mask", ")", "\n", "y_train", "=", "safe_indexing", "(", "X_filled", "[", ":", ",", "feat_idx", "]", ",", "\n", "~", "missing_row_mask", ")", "\n", "predictor", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "# get posterior samples", "\n", "", "X_test", "=", "safe_indexing", "(", "X_filled", "[", ":", ",", "neighbor_feat_idx", "]", ",", "\n", "missing_row_mask", ")", "\n", "if", "self", ".", "sample_posterior", ":", "\n", "            ", "mus", ",", "sigmas", "=", "predictor", ".", "predict", "(", "X_test", ",", "return_std", "=", "True", ")", "\n", "good_sigmas", "=", "sigmas", ">", "0", "\n", "imputed_values", "=", "np", ".", "zeros", "(", "mus", ".", "shape", ",", "dtype", "=", "X_filled", ".", "dtype", ")", "\n", "imputed_values", "[", "~", "good_sigmas", "]", "=", "mus", "[", "~", "good_sigmas", "]", "\n", "imputed_values", "[", "good_sigmas", "]", "=", "self", ".", "random_state_", ".", "normal", "(", "\n", "loc", "=", "mus", "[", "good_sigmas", "]", ",", "scale", "=", "sigmas", "[", "good_sigmas", "]", ")", "\n", "", "else", ":", "\n", "            ", "imputed_values", "=", "predictor", ".", "predict", "(", "X_test", ")", "\n", "\n", "# clip the values", "\n", "", "imputed_values", "=", "self", ".", "clip", "(", "imputed_values", ")", "\n", "\n", "# update the feature", "\n", "X_filled", "[", "missing_row_mask", ",", "feat_idx", "]", "=", "imputed_values", "\n", "return", "X_filled", ",", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_neighbor_feat_idx": [[698, 737], ["iterative_imputer.IterativeImputer.random_state_.choice", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.concatenate", "numpy.concatenate", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "_get_neighbor_feat_idx", "(", "self", ",", "\n", "n_features", ",", "\n", "feat_idx", ",", "\n", "abs_corr_mat", ")", ":", "\n", "        ", "\"\"\"Get a list of other features to predict ``feat_idx``.\n\n        If self.n_nearest_features is less than or equal to the total\n        number of features, then use a probability proportional to the absolute\n        correlation between ``feat_idx`` and each other feature to randomly\n        choose a subsample of the other features (without replacement).\n\n        Parameters\n        ----------\n        n_features : int\n            Number of features in ``X``.\n\n        feat_idx : int\n            Index of the feature currently being imputed.\n\n        abs_corr_mat : ndarray, shape (n_features, n_features)\n            Absolute correlation matrix of ``X``. The diagonal has been zeroed\n            out and each feature has been normalized to sum to 1. Can be None.\n\n        Returns\n        -------\n        neighbor_feat_idx : array-like\n            The features to use to impute ``feat_idx``.\n        \"\"\"", "\n", "if", "(", "self", ".", "n_nearest_features", "is", "not", "None", "and", "\n", "self", ".", "n_nearest_features", "<", "n_features", ")", ":", "\n", "            ", "p", "=", "abs_corr_mat", "[", ":", ",", "feat_idx", "]", "\n", "neighbor_feat_idx", "=", "self", ".", "random_state_", ".", "choice", "(", "\n", "np", ".", "arange", "(", "n_features", ")", ",", "self", ".", "n_nearest_features", ",", "replace", "=", "False", ",", "\n", "p", "=", "p", ")", "\n", "", "else", ":", "\n", "            ", "inds_left", "=", "np", ".", "arange", "(", "feat_idx", ")", "\n", "inds_right", "=", "np", ".", "arange", "(", "feat_idx", "+", "1", ",", "n_features", ")", "\n", "neighbor_feat_idx", "=", "np", ".", "concatenate", "(", "(", "inds_left", ",", "inds_right", ")", ")", "\n", "", "return", "neighbor_feat_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_ordered_idx": [[738, 781], ["mask_missing_values.mean", "numpy.nonzero", "numpy.nonzero", "len", "len", "numpy.argsort", "numpy.argsort", "len", "len", "numpy.argsort", "numpy.argsort", "iterative_imputer.IterativeImputer.random_state_.shuffle", "ValueError"], "methods", ["None"], ["", "def", "_get_ordered_idx", "(", "self", ",", "mask_missing_values", ")", ":", "\n", "        ", "\"\"\"Decide in what order we will update the features.\n\n        As a homage to the MICE R package, we will have 4 main options of\n        how to order the updates, and use a random order if anything else\n        is specified.\n\n        Also, this function skips features which have no missing values.\n\n        Parameters\n        ----------\n        mask_missing_values : array-like, shape (n_samples, n_features)\n            Input data's missing indicator matrix, where \"n_samples\" is the\n            number of samples and \"n_features\" is the number of features.\n\n        Returns\n        -------\n        ordered_idx : ndarray, shape (n_features,)\n            The order in which to impute the features.\n        \"\"\"", "\n", "frac_of_missing_values", "=", "mask_missing_values", ".", "mean", "(", "axis", "=", "0", ")", "\n", "missing_values_idx", "=", "np", ".", "nonzero", "(", "frac_of_missing_values", ")", "[", "0", "]", "\n", "if", "self", ".", "imputation_order", "==", "'roman'", ":", "\n", "            ", "ordered_idx", "=", "missing_values_idx", "\n", "", "elif", "self", ".", "imputation_order", "==", "'arabic'", ":", "\n", "            ", "ordered_idx", "=", "missing_values_idx", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "imputation_order", "==", "'ascending'", ":", "\n", "            ", "n", "=", "len", "(", "frac_of_missing_values", ")", "-", "len", "(", "missing_values_idx", ")", "\n", "ordered_idx", "=", "np", ".", "argsort", "(", "frac_of_missing_values", ",", "\n", "kind", "=", "'mergesort'", ")", "[", "n", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "imputation_order", "==", "'descending'", ":", "\n", "            ", "n", "=", "len", "(", "frac_of_missing_values", ")", "-", "len", "(", "missing_values_idx", ")", "\n", "ordered_idx", "=", "np", ".", "argsort", "(", "frac_of_missing_values", ",", "\n", "kind", "=", "'mergesort'", ")", "[", "n", ":", "]", "\n", "", "elif", "self", ".", "imputation_order", "==", "'random'", ":", "\n", "            ", "ordered_idx", "=", "missing_values_idx", "\n", "self", ".", "random_state_", ".", "shuffle", "(", "ordered_idx", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Got an invalid imputation order: '{0}'. It must \"", "\n", "\"be one of the following: 'roman', 'arabic', \"", "\n", "\"'ascending', 'descending', or \"", "\n", "\"'random'.\"", ".", "format", "(", "self", ".", "imputation_order", ")", ")", "\n", "", "return", "ordered_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_abs_corr_mat": [[782, 816], ["numpy.abs", "numpy.abs", "numpy.clip", "numpy.clip", "numpy.fill_diagonal", "numpy.fill_diagonal", "sklearn.preprocessing.normalize", "numpy.corrcoef", "numpy.corrcoef", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip"], ["", "def", "_get_abs_corr_mat", "(", "self", ",", "X_filled", ",", "tolerance", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"Get absolute correlation matrix between features.\n\n        Parameters\n        ----------\n        X_filled : ndarray, shape (n_samples, n_features)\n            Input data with the most recent imputations.\n\n        tolerance : float, optional (default=1e-6)\n            ``abs_corr_mat`` can have nans, which will be replaced\n            with ``tolerance``.\n\n        Returns\n        -------\n        abs_corr_mat : ndarray, shape (n_features, n_features)\n            Absolute correlation matrix of ``X`` at the beginning of the\n            current round. The diagonal has been zeroed out and each feature's\n            absolute correlations with all others have been normalized to sum\n            to 1.\n        \"\"\"", "\n", "n_features", "=", "X_filled", ".", "shape", "[", "1", "]", "\n", "if", "(", "self", ".", "n_nearest_features", "is", "None", "or", "\n", "self", ".", "n_nearest_features", ">=", "n_features", ")", ":", "\n", "            ", "return", "None", "\n", "", "abs_corr_mat", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "X_filled", ".", "T", ")", ")", "\n", "# np.corrcoef is not defined for features with zero std", "\n", "abs_corr_mat", "[", "np", ".", "isnan", "(", "abs_corr_mat", ")", "]", "=", "tolerance", "\n", "# ensures exploration, i.e. at least some probability of sampling", "\n", "np", ".", "clip", "(", "abs_corr_mat", ",", "tolerance", ",", "None", ",", "out", "=", "abs_corr_mat", ")", "\n", "# features are not their own neighbors", "\n", "np", ".", "fill_diagonal", "(", "abs_corr_mat", ",", "0", ")", "\n", "# needs to sum to 1 for np.random.choice sampling", "\n", "abs_corr_mat", "=", "normalize", "(", "abs_corr_mat", ",", "norm", "=", "'l1'", ",", "axis", "=", "0", ",", "copy", "=", "False", ")", "\n", "return", "abs_corr_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._initial_imputation": [[817, 864], ["iterative_imputer.is_scalar_nan", "sklearn.utils.check_array", "iterative_imputer._check_inputs_dtype", "iterative_imputer._get_mask", "numpy.flatnonzero", "numpy.flatnonzero", "iterative_imputer._SimpleImputer", "iterative_imputer.IterativeImputer.initial_imputer_.fit_transform", "iterative_imputer.IterativeImputer.initial_imputer_.transform", "numpy.logical_not", "numpy.logical_not", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.is_scalar_nan", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._check_inputs_dtype", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.transform"], ["", "def", "_initial_imputation", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Perform initial imputation for input X.\n\n        Parameters\n        ----------\n        X : ndarray, shape (n_samples, n_features)\n            Input data, where \"n_samples\" is the number of samples and\n            \"n_features\" is the number of features.\n\n        Returns\n        -------\n        Xt : ndarray, shape (n_samples, n_features)\n            Input data, where \"n_samples\" is the number of samples and\n            \"n_features\" is the number of features.\n\n        X_filled : ndarray, shape (n_samples, n_features)\n            Input data with the most recent imputations.\n\n        mask_missing_values : ndarray, shape (n_samples, n_features)\n            Input data's missing indicator matrix, where \"n_samples\" is the\n            number of samples and \"n_features\" is the number of features.\n        \"\"\"", "\n", "# TODO: change False to \"allow-nan\"", "\n", "if", "is_scalar_nan", "(", "self", ".", "missing_values", ")", ":", "\n", "            ", "force_all_finite", "=", "False", "# \"allow-nan\"", "\n", "", "else", ":", "\n", "            ", "force_all_finite", "=", "True", "\n", "\n", "", "X", "=", "check_array", "(", "X", ",", "dtype", "=", "FLOAT_DTYPES", ",", "order", "=", "\"F\"", ",", "\n", "force_all_finite", "=", "force_all_finite", ")", "\n", "_check_inputs_dtype", "(", "X", ",", "self", ".", "missing_values", ")", "\n", "\n", "mask_missing_values", "=", "_get_mask", "(", "X", ",", "self", ".", "missing_values", ")", "\n", "if", "self", ".", "initial_imputer_", "is", "None", ":", "\n", "            ", "self", ".", "initial_imputer_", "=", "_SimpleImputer", "(", "\n", "missing_values", "=", "self", ".", "missing_values", ",", "\n", "strategy", "=", "self", ".", "initial_strategy", ")", "\n", "X_filled", "=", "self", ".", "initial_imputer_", ".", "fit_transform", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "X_filled", "=", "self", ".", "initial_imputer_", ".", "transform", "(", "X", ")", "\n", "\n", "", "valid_mask", "=", "np", ".", "flatnonzero", "(", "np", ".", "logical_not", "(", "\n", "np", ".", "isnan", "(", "self", ".", "initial_imputer_", ".", "statistics_", ")", ")", ")", "\n", "Xt", "=", "X", "[", ":", ",", "valid_mask", "]", "\n", "mask_missing_values", "=", "mask_missing_values", "[", ":", ",", "valid_mask", "]", "\n", "\n", "return", "Xt", ",", "X_filled", ",", "mask_missing_values", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer.fit_transform": [[865, 951], ["getattr", "hasattr", "iterative_imputer.IterativeImputer._initial_imputation", "iterative_imputer.IterativeImputer._get_ordered_idx", "len", "iterative_imputer.IterativeImputer._get_abs_corr_mat", "time.time.time", "range", "sklearn.utils.check_random_state", "ValueError", "sklearn.base.clone", "print", "BayesianRidge", "RidgeCV", "iterative_imputer.IterativeImputer._get_ordered_idx", "iterative_imputer.IterativeImputer._get_neighbor_feat_idx", "iterative_imputer.IterativeImputer._impute_one_feature", "ImputerTriplet", "iterative_imputer.IterativeImputer.imputation_sequence_.append", "print", "numpy.array", "numpy.array", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._initial_imputation", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_ordered_idx", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_abs_corr_mat", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_ordered_idx", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._get_neighbor_feat_idx", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._impute_one_feature"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the imputer on X and return the transformed X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Input data, where \"n_samples\" is the number of samples and\n            \"n_features\" is the number of features.\n\n        y : ignored.\n\n        Returns\n        -------\n        Xt : array-like, shape (n_samples, n_features)\n             The imputed input data.\n        \"\"\"", "\n", "self", ".", "random_state_", "=", "getattr", "(", "self", ",", "\"random_state_\"", ",", "\n", "check_random_state", "(", "self", ".", "random_state", ")", ")", "\n", "\n", "if", "self", ".", "n_iter", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"'n_iter' should be a positive integer. Got {} instead.\"", "\n", ".", "format", "(", "self", ".", "n_iter", ")", ")", "\n", "\n", "", "if", "self", ".", "predictor", "is", "None", ":", "\n", "            ", "if", "self", ".", "sample_posterior", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", "import", "BayesianRidge", "\n", "self", ".", "_predictor", "=", "BayesianRidge", "(", ")", "\n", "", "else", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", "import", "RidgeCV", "\n", "# including a very small alpha to approximate OLS", "\n", "self", ".", "_predictor", "=", "RidgeCV", "(", "alphas", "=", "np", ".", "array", "(", "[", "1e-5", ",", "0.1", ",", "1", ",", "10", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_predictor", "=", "clone", "(", "self", ".", "predictor", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "_predictor", ",", "'random_state'", ")", ":", "\n", "            ", "self", ".", "_predictor", ".", "random_state", "=", "self", ".", "random_state_", "\n", "\n", "", "self", ".", "_min_value", "=", "np", ".", "nan", "if", "self", ".", "min_value", "is", "None", "else", "self", ".", "min_value", "\n", "self", ".", "_max_value", "=", "np", ".", "nan", "if", "self", ".", "max_value", "is", "None", "else", "self", ".", "max_value", "\n", "\n", "self", ".", "initial_imputer_", "=", "None", "\n", "X", ",", "Xt", ",", "mask_missing_values", "=", "self", ".", "_initial_imputation", "(", "X", ")", "\n", "\n", "if", "self", ".", "n_iter", "==", "0", ":", "\n", "            ", "return", "Xt", "\n", "\n", "# order in which to impute", "\n", "# note this is probably too slow for large feature data (d > 100000)", "\n", "# and a better way would be good.", "\n", "# see: https://goo.gl/KyCNwj and subsequent comments", "\n", "", "ordered_idx", "=", "self", ".", "_get_ordered_idx", "(", "mask_missing_values", ")", "\n", "self", ".", "n_features_with_missing_", "=", "len", "(", "ordered_idx", ")", "\n", "\n", "abs_corr_mat", "=", "self", ".", "_get_abs_corr_mat", "(", "Xt", ")", "\n", "\n", "# impute data", "\n", "n_samples", ",", "n_features", "=", "Xt", ".", "shape", "\n", "self", ".", "imputation_sequence_", "=", "[", "]", "\n", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"[IterativeImputer] Completing matrix with shape %s\"", "\n", "%", "(", "X", ".", "shape", ",", ")", ")", "\n", "", "start_t", "=", "time", "(", ")", "\n", "for", "i_rnd", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "            ", "if", "self", ".", "imputation_order", "==", "'random'", ":", "\n", "                ", "ordered_idx", "=", "self", ".", "_get_ordered_idx", "(", "mask_missing_values", ")", "\n", "\n", "", "for", "feat_idx", "in", "ordered_idx", ":", "\n", "                ", "neighbor_feat_idx", "=", "self", ".", "_get_neighbor_feat_idx", "(", "n_features", ",", "\n", "feat_idx", ",", "\n", "abs_corr_mat", ")", "\n", "Xt", ",", "predictor", "=", "self", ".", "_impute_one_feature", "(", "\n", "Xt", ",", "mask_missing_values", ",", "feat_idx", ",", "neighbor_feat_idx", ",", "\n", "predictor", "=", "None", ",", "fit_mode", "=", "True", ")", "\n", "predictor_triplet", "=", "ImputerTriplet", "(", "feat_idx", ",", "\n", "neighbor_feat_idx", ",", "\n", "predictor", ")", "\n", "self", ".", "imputation_sequence_", ".", "append", "(", "predictor_triplet", ")", "\n", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                ", "print", "(", "'[IterativeImputer] Ending imputation round '", "\n", "'%d/%d, elapsed time %0.2f'", "\n", "%", "(", "i_rnd", "+", "1", ",", "self", ".", "n_iter", ",", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n", "", "", "Xt", "[", "~", "mask_missing_values", "]", "=", "X", "[", "~", "mask_missing_values", "]", "\n", "return", "Xt", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer.transform": [[952, 999], ["sklearn.utils.validation.check_is_fitted", "iterative_imputer.IterativeImputer._initial_imputation", "time.time.time", "enumerate", "len", "print", "iterative_imputer.IterativeImputer._impute_one_feature", "print", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._initial_imputation", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer._impute_one_feature"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Imputes all missing values in X.\n\n        Note that this is stochastic, and that if random_state is not fixed,\n        repeated calls, or permuted input, will yield different results.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            The input data to complete.\n\n        Returns\n        -------\n        Xt : array-like, shape (n_samples, n_features)\n             The imputed input data.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "'initial_imputer_'", ")", "\n", "\n", "X", ",", "Xt", ",", "mask_missing_values", "=", "self", ".", "_initial_imputation", "(", "X", ")", "\n", "\n", "if", "self", ".", "n_iter", "==", "0", ":", "\n", "            ", "return", "Xt", "\n", "\n", "", "imputations_per_round", "=", "len", "(", "self", ".", "imputation_sequence_", ")", "//", "self", ".", "n_iter", "\n", "i_rnd", "=", "0", "\n", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"[IterativeImputer] Completing matrix with shape %s\"", "\n", "%", "(", "X", ".", "shape", ",", ")", ")", "\n", "", "start_t", "=", "time", "(", ")", "\n", "for", "it", ",", "predictor_triplet", "in", "enumerate", "(", "self", ".", "imputation_sequence_", ")", ":", "\n", "            ", "Xt", ",", "_", "=", "self", ".", "_impute_one_feature", "(", "\n", "Xt", ",", "\n", "mask_missing_values", ",", "\n", "predictor_triplet", ".", "feat_idx", ",", "\n", "predictor_triplet", ".", "neighbor_feat_idx", ",", "\n", "predictor", "=", "predictor_triplet", ".", "predictor", ",", "\n", "fit_mode", "=", "False", "\n", ")", "\n", "if", "not", "(", "it", "+", "1", ")", "%", "imputations_per_round", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "1", ":", "\n", "                    ", "print", "(", "'[IterativeImputer] Ending imputation round '", "\n", "'%d/%d, elapsed time %0.2f'", "\n", "%", "(", "i_rnd", "+", "1", ",", "self", ".", "n_iter", ",", "time", "(", ")", "-", "start_t", ")", ")", "\n", "", "i_rnd", "+=", "1", "\n", "\n", "", "", "Xt", "[", "~", "mask_missing_values", "]", "=", "X", "[", "~", "mask_missing_values", "]", "\n", "return", "Xt", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.IterativeImputer.fit": [[1001, 1019], ["iterative_imputer.IterativeImputer.fit_transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the imputer on X and return self.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Input data, where \"n_samples\" is the number of samples and\n            \"n_features\" is the number of features.\n\n        y : ignored\n\n        Returns\n        -------\n        self : object\n            Returns self.\n        \"\"\"", "\n", "self", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.is_scalar_nan": [[59, 88], ["bool", "isinstance", "numpy.isnan"], "function", ["None"], ["", "", "def", "is_scalar_nan", "(", "x", ")", ":", "\n", "    ", "\"\"\"Tests if x is NaN\n    This function is meant to overcome the issue that np.isnan does not allow\n    non-numerical types as input, and that np.nan is not np.float('nan').\n    Parameters\n    ----------\n    x : any type\n    Returns\n    -------\n    boolean\n    Examples\n    --------\n    >>> is_scalar_nan(np.nan)\n    True\n    >>> is_scalar_nan(float(\"nan\"))\n    True\n    >>> is_scalar_nan(None)\n    False\n    >>> is_scalar_nan(\"\")\n    False\n    >>> is_scalar_nan([np.nan])\n    False\n    \"\"\"", "\n", "\n", "# convert from numpy.bool_ to python bool to ensure that testing", "\n", "# is_scalar_nan(x) is True does not fail.", "\n", "# Redondant np.floating is needed because numbers can't match np.float32", "\n", "# in python 2.", "\n", "return", "bool", "(", "isinstance", "(", "x", ",", "(", "numbers", ".", "Real", ",", "np", ".", "floating", ")", ")", "and", "np", ".", "isnan", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._check_inputs_dtype": [[90, 97], ["ValueError", "isinstance", "type"], "function", ["None"], ["", "def", "_check_inputs_dtype", "(", "X", ",", "missing_values", ")", ":", "\n", "    ", "if", "(", "X", ".", "dtype", ".", "kind", "in", "(", "\"f\"", ",", "\"i\"", ",", "\"u\"", ")", "and", "\n", "not", "isinstance", "(", "missing_values", ",", "numbers", ".", "Real", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"'X' and 'missing_values' types are expected to be\"", "\n", "\" both numerical. Got X.dtype={} and \"", "\n", "\" type(missing_values)={}.\"", "\n", ".", "format", "(", "X", ".", "dtype", ",", "type", "(", "missing_values", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._get_mask": [[99, 114], ["iterative_imputer.is_scalar_nan", "numpy.equal", "numpy.isnan", "numpy.zeros", "_object_dtype_isnan", "numpy.np.nan"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer.is_scalar_nan"], ["", "", "def", "_get_mask", "(", "X", ",", "value_to_mask", ")", ":", "\n", "    ", "\"\"\"Compute the boolean mask X == missing_values.\"\"\"", "\n", "if", "is_scalar_nan", "(", "value_to_mask", ")", ":", "\n", "        ", "if", "X", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "np", ".", "isnan", "(", "X", ")", "\n", "", "elif", "X", ".", "dtype", ".", "kind", "in", "(", "\"i\"", ",", "\"u\"", ")", ":", "\n", "# can't have NaNs in integer array.", "\n", "            ", "return", "np", ".", "zeros", "(", "X", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "# np.isnan does not work on object dtypes.", "\n", "            ", "return", "_object_dtype_isnan", "(", "X", ")", "\n", "", "", "else", ":", "\n", "# X == value_to_mask with object dytpes does not always perform", "\n", "# element-wise for old versions of numpy", "\n", "        ", "return", "np", ".", "equal", "(", "X", ",", "value_to_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_imputer._most_frequent": [[116, 148], ["warnings.catch_warnings", "warnings.simplefilter", "scipy.stats.mode", "numpy.np.nan"], "function", ["None"], ["", "", "def", "_most_frequent", "(", "array", ",", "extra_value", ",", "n_repeat", ")", ":", "\n", "    ", "\"\"\"Compute the most frequent value in a 1d array extended with\n       [extra_value] * n_repeat, where extra_value is assumed to be not part\n       of the array.\"\"\"", "\n", "# Compute the most frequent value in array only", "\n", "if", "array", ".", "size", ">", "0", ":", "\n", "        ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# stats.mode raises a warning when input array contains objects due", "\n", "# to incapacity to detect NaNs. Irrelevant here since input array", "\n", "# has already been NaN-masked.", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "RuntimeWarning", ")", "\n", "mode", "=", "stats", ".", "mode", "(", "array", ")", "\n", "\n", "", "most_frequent_value", "=", "mode", "[", "0", "]", "[", "0", "]", "\n", "most_frequent_count", "=", "mode", "[", "1", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "most_frequent_value", "=", "0", "\n", "most_frequent_count", "=", "0", "\n", "\n", "# Compare to array + [extra_value] * n_repeat", "\n", "", "if", "most_frequent_count", "==", "0", "and", "n_repeat", "==", "0", ":", "\n", "        ", "return", "np", ".", "nan", "\n", "", "elif", "most_frequent_count", "<", "n_repeat", ":", "\n", "        ", "return", "extra_value", "\n", "", "elif", "most_frequent_count", ">", "n_repeat", ":", "\n", "        ", "return", "most_frequent_value", "\n", "", "elif", "most_frequent_count", "==", "n_repeat", ":", "\n", "# Ties the breaks. Copy the behaviour of scipy.stats.mode", "\n", "        ", "if", "most_frequent_value", "<", "extra_value", ":", "\n", "            ", "return", "most_frequent_value", "\n", "", "else", ":", "\n", "            ", "return", "extra_value", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute.__init__": [[32, 95], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "shrinkage_value", "=", "None", ",", "\n", "convergence_threshold", "=", "0.001", ",", "\n", "max_iters", "=", "100", ",", "\n", "max_rank", "=", "None", ",", "\n", "n_power_iterations", "=", "1", ",", "\n", "init_fill_method", "=", "\"zero\"", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "normalizer", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        shrinkage_value : float\n            Value by which we shrink singular values on each iteration. If\n            omitted then the default value will be the maximum singular\n            value of the initialized matrix (zeros for missing values) divided\n            by 100.\n\n        convergence_threshold : float\n            Minimum ration difference between iterations (as a fraction of\n            the Frobenius norm of the current solution) before stopping.\n\n        max_iters : int\n            Maximum number of SVD iterations\n\n        max_rank : int, optional\n            Perform a truncated SVD on each iteration with this value as its\n            rank.\n\n        n_power_iterations : int\n            Number of power iterations to perform with randomized SVD\n\n        init_fill_method : str\n            How to initialize missing values of data matrix, default is\n            to fill them with zeros.\n\n        min_value : float\n            Smallest allowable value in the solution\n\n        max_value : float\n            Largest allowable value in the solution\n\n        normalizer : object\n            Any object (such as BiScaler) with fit() and transform() methods\n\n        verbose : bool\n            Print debugging info\n        \"\"\"", "\n", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "fill_method", "=", "init_fill_method", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ",", "\n", "normalizer", "=", "normalizer", ")", "\n", "self", ".", "shrinkage_value", "=", "shrinkage_value", "\n", "self", ".", "convergence_threshold", "=", "convergence_threshold", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "n_power_iterations", "=", "n_power_iterations", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute._converged": [[96, 108], ["numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "_converged", "(", "self", ",", "X_old", ",", "X_new", ",", "missing_mask", ")", ":", "\n", "# check for convergence", "\n", "        ", "old_missing_values", "=", "X_old", "[", "missing_mask", "]", "\n", "new_missing_values", "=", "X_new", "[", "missing_mask", "]", "\n", "difference", "=", "old_missing_values", "-", "new_missing_values", "\n", "ssd", "=", "np", ".", "sum", "(", "difference", "**", "2", ")", "\n", "old_norm", "=", "np", ".", "sqrt", "(", "(", "old_missing_values", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "# edge cases", "\n", "if", "old_norm", "==", "0", "or", "(", "old_norm", "<", "F32PREC", "and", "np", ".", "sqrt", "(", "ssd", ")", ">", "F32PREC", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "(", "np", ".", "sqrt", "(", "ssd", ")", "/", "old_norm", ")", "<", "self", ".", "convergence_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute._svd_step": [[109, 134], ["numpy.maximum", "numpy.diag", "numpy.dot", "sklearn.utils.extmath.randomized_svd", "numpy.linalg.svd", "numpy.dot"], "methods", ["None"], ["", "", "def", "_svd_step", "(", "self", ",", "X", ",", "shrinkage_value", ",", "max_rank", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns reconstructed X from low-rank thresholded SVD and\n        the rank achieved.\n        \"\"\"", "\n", "if", "max_rank", ":", "\n", "# if we have a max rank then perform the faster randomized SVD", "\n", "            ", "(", "U", ",", "s", ",", "V", ")", "=", "randomized_svd", "(", "\n", "X", ",", "\n", "max_rank", ",", "\n", "n_iter", "=", "self", ".", "n_power_iterations", ")", "\n", "", "else", ":", "\n", "# perform a full rank SVD using ARPACK", "\n", "            ", "(", "U", ",", "s", ",", "V", ")", "=", "np", ".", "linalg", ".", "svd", "(", "\n", "X", ",", "\n", "full_matrices", "=", "False", ",", "\n", "compute_uv", "=", "True", ")", "\n", "", "s_thresh", "=", "np", ".", "maximum", "(", "s", "-", "shrinkage_value", ",", "0", ")", "\n", "rank", "=", "(", "s_thresh", ">", "0", ")", ".", "sum", "(", ")", "\n", "s_thresh", "=", "s_thresh", "[", ":", "rank", "]", "\n", "U_thresh", "=", "U", "[", ":", ",", ":", "rank", "]", "\n", "V_thresh", "=", "V", "[", ":", "rank", ",", ":", "]", "\n", "S_thresh", "=", "np", ".", "diag", "(", "s_thresh", ")", "\n", "X_reconstruction", "=", "np", ".", "dot", "(", "U_thresh", ",", "np", ".", "dot", "(", "S_thresh", ",", "V_thresh", ")", ")", "\n", "return", "X_reconstruction", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute._max_singular_value": [[135, 142], ["sklearn.utils.extmath.randomized_svd"], "methods", ["None"], ["", "def", "_max_singular_value", "(", "self", ",", "X_filled", ")", ":", "\n", "# quick decomposition of X_filled into rank-1 SVD", "\n", "        ", "_", ",", "s", ",", "_", "=", "randomized_svd", "(", "\n", "X_filled", ",", "\n", "1", ",", "\n", "n_iter", "=", "5", ")", "\n", "return", "s", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute.solve": [[143, 194], ["sklearn.utils.check_array", "sklearn.utils.check_array.copy", "soft_impute.SoftImpute._max_singular_value", "six.moves.range", "print", "soft_impute.SoftImpute._svd_step", "soft_impute.SoftImpute.clip", "soft_impute.SoftImpute._converged", "print", "common.masked_mae", "print"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute._max_singular_value", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.soft_impute.SoftImpute._svd_step", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_svd.IterativeSVD._converged", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.masked_mae"], ["", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "X_init", "=", "X", ".", "copy", "(", ")", "\n", "\n", "X_filled", "=", "X", "\n", "observed_mask", "=", "~", "missing_mask", "\n", "max_singular_value", "=", "self", ".", "_max_singular_value", "(", "X_filled", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"[SoftImpute] Max Singular Value of X_init = %f\"", "%", "(", "\n", "max_singular_value", ")", ")", "\n", "\n", "", "if", "self", ".", "shrinkage_value", ":", "\n", "            ", "shrinkage_value", "=", "self", ".", "shrinkage_value", "\n", "", "else", ":", "\n", "# totally hackish heuristic: keep only components", "\n", "# with at least 1/50th the max singular value", "\n", "            ", "shrinkage_value", "=", "max_singular_value", "/", "50.0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "            ", "X_reconstruction", ",", "rank", "=", "self", ".", "_svd_step", "(", "\n", "X_filled", ",", "\n", "shrinkage_value", ",", "\n", "max_rank", "=", "self", ".", "max_rank", ")", "\n", "X_reconstruction", "=", "self", ".", "clip", "(", "X_reconstruction", ")", "\n", "\n", "# print error on observed data", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "mae", "=", "masked_mae", "(", "\n", "X_true", "=", "X_init", ",", "\n", "X_pred", "=", "X_reconstruction", ",", "\n", "mask", "=", "observed_mask", ")", "\n", "print", "(", "\n", "\"[SoftImpute] Iter %d: observed MAE=%0.6f rank=%d\"", "%", "(", "\n", "i", "+", "1", ",", "\n", "mae", ",", "\n", "rank", ")", ")", "\n", "\n", "", "converged", "=", "self", ".", "_converged", "(", "\n", "X_old", "=", "X_filled", ",", "\n", "X_new", "=", "X_reconstruction", ",", "\n", "missing_mask", "=", "missing_mask", ")", "\n", "X_filled", "[", "missing_mask", "]", "=", "X_reconstruction", "[", "missing_mask", "]", "\n", "if", "converged", ":", "\n", "                ", "break", "\n", "", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"[SoftImpute] Stopped after iteration %d for lambda=%f\"", "%", "(", "\n", "i", "+", "1", ",", "\n", "shrinkage_value", ")", ")", "\n", "\n", "", "return", "X_filled", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.knn.KNN.__init__": [[35, 86], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "k", "=", "5", ",", "\n", "orientation", "=", "\"rows\"", ",", "\n", "use_argpartition", "=", "False", ",", "\n", "print_interval", "=", "100", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "normalizer", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        k : int\n            Number of neighboring rows to use for imputation.\n\n        orientation : str\n            Which axis of the input matrix should be treated as a sample\n            (default is \"rows\" but can also be \"columns\")\n\n        use_argpartition : bool\n           Use a more naive implementation of kNN imputation whichs calls\n           numpy.argpartition for each row/column pair. May give NaN if fewer\n           than k neighbors are available for a missing value.\n\n        print_interval : int\n\n        min_value : float\n            Minimum possible imputed value\n\n        max_value : float\n            Maximum possible imputed value\n\n        normalizer : object\n            Any object (such as BiScaler) with fit() and transform() methods\n\n        verbose : bool\n        \"\"\"", "\n", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ",", "\n", "normalizer", "=", "normalizer", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "orientation", "=", "orientation", "\n", "self", ".", "print_interval", "=", "print_interval", "\n", "if", "use_argpartition", ":", "\n", "            ", "self", ".", "_impute_fn", "=", "knn_impute_with_argpartition", "\n", "", "else", ":", "\n", "            ", "self", ".", "_impute_fn", "=", "knn_impute_few_observed", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.knn.KNN.solve": [[87, 119], ["sklearn.utils.check_array", "knn.KNN._impute_fn", "numpy.isnan", "numpy.isnan.sum", "ValueError", "print"], "methods", ["None"], ["", "", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "if", "self", ".", "orientation", "==", "\"columns\"", ":", "\n", "            ", "X", "=", "X", ".", "T", "\n", "missing_mask", "=", "missing_mask", ".", "T", "\n", "\n", "", "elif", "self", ".", "orientation", "!=", "\"rows\"", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Orientation must be either 'rows' or 'columns', got: %s\"", "%", "(", "\n", "self", ".", "orientation", ",", ")", ")", "\n", "\n", "", "X_imputed", "=", "self", ".", "_impute_fn", "(", "\n", "X", "=", "X", ",", "\n", "missing_mask", "=", "missing_mask", ",", "\n", "k", "=", "self", ".", "k", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "print_interval", "=", "self", ".", "print_interval", ")", "\n", "\n", "failed_to_impute", "=", "np", ".", "isnan", "(", "X_imputed", ")", "\n", "n_missing_after_imputation", "=", "failed_to_impute", ".", "sum", "(", ")", "\n", "if", "n_missing_after_imputation", "!=", "0", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"[KNN] Warning: %d/%d still missing after imputation, replacing with 0\"", "%", "(", "\n", "n_missing_after_imputation", ",", "\n", "X", ".", "shape", "[", "0", "]", "*", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "X_imputed", "[", "failed_to_impute", "]", "=", "X", "[", "failed_to_impute", "]", "\n", "\n", "", "if", "self", ".", "orientation", "==", "\"columns\"", ":", "\n", "            ", "X_imputed", "=", "X_imputed", ".", "T", "\n", "\n", "", "return", "X_imputed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.Scaler.__init__": [[27, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "center_columns", "=", "True", ",", "\n", "scale_columns", "=", "True", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "center_columns", "=", "center_columns", "\n", "self", ".", "scale_columns", "=", "scale_columns", "\n", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "column_centers", "=", "None", "\n", "self", ".", "column_scales", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.Scaler.fit": [[43, 50], ["numpy.nanmean", "numpy.nanstd"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "center_columns", ":", "\n", "            ", "self", ".", "column_centers", "=", "np", ".", "nanmean", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "if", "self", ".", "scale_columns", ":", "\n", "            ", "self", ".", "column_scales", "=", "np", ".", "nanstd", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "column_scales", "[", "self", ".", "column_scales", "==", "0", "]", "=", "1.0", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.Scaler.transform": [[51, 58], ["numpy.asarray().copy", "numpy.asarray"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "asarray", "(", "X", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "center_columns", ":", "\n", "            ", "X", "-=", "self", ".", "column_centers", "\n", "", "if", "self", ".", "scale_columns", ":", "\n", "            ", "X", "/=", "self", ".", "column_scales", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.Scaler.fit_transform": [[59, 62], ["scaler.Scaler.fit", "scaler.Scaler.transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.transform"], ["", "def", "fit_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "transform", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.Scaler.inverse_transform": [[63, 70], ["numpy.asarray().copy", "numpy.asarray"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "asarray", "(", "X", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "scale_columns", ":", "\n", "            ", "X", "*=", "self", ".", "column_scales", "\n", "", "if", "self", ".", "center_columns", ":", "\n", "            ", "X", "+=", "self", ".", "column_centers", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.__init__": [[79, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "center_rows", "=", "True", ",", "\n", "center_columns", "=", "True", ",", "\n", "scale_rows", "=", "True", ",", "\n", "scale_columns", "=", "True", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "max_iters", "=", "100", ",", "\n", "tolerance", "=", "0.001", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "center_rows", "=", "center_rows", "\n", "self", ".", "center_columns", "=", "center_columns", "\n", "self", ".", "scale_rows", "=", "scale_rows", "\n", "self", ".", "scale_columns", "=", "scale_columns", "\n", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "tolerance", "=", "tolerance", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_row_means": [[100, 131], ["numpy.asarray", "column_weights.reshape", "numpy.zeros", "numpy.nansum", "six.moves.range", "len", "ValueError", "numpy.asarray.reshape", "column_weights[].sum"], "methods", ["None"], ["", "def", "estimate_row_means", "(", "\n", "self", ",", "\n", "X", ",", "\n", "observed", ",", "\n", "column_means", ",", "\n", "column_scales", ")", ":", "\n", "        ", "\"\"\"\n        row_center[i] =\n        sum{j in observed[i, :]}{\n            (1 / column_scale[j]) * (X[i, j] - column_center[j])\n        }\n        ------------------------------------------------------------\n        sum{j in observed[i, :]}{1 / column_scale[j]}\n        \"\"\"", "\n", "\n", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "\n", "column_means", "=", "np", ".", "asarray", "(", "column_means", ")", "\n", "if", "len", "(", "column_means", ")", "!=", "n_cols", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %d but got shape %s\"", "%", "(", "\n", "n_cols", ",", "column_means", ".", "shape", ")", ")", "\n", "", "X", "=", "X", "-", "column_means", ".", "reshape", "(", "(", "1", ",", "n_cols", ")", ")", "\n", "column_weights", "=", "1.0", "/", "column_scales", "\n", "X", "*=", "column_weights", ".", "reshape", "(", "(", "1", ",", "n_cols", ")", ")", "\n", "row_means", "=", "np", ".", "zeros", "(", "n_rows", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "row_residual_sums", "=", "np", ".", "nansum", "(", "X", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "            ", "row_mask", "=", "observed", "[", "i", ",", ":", "]", "\n", "sum_weights", "=", "column_weights", "[", "row_mask", "]", ".", "sum", "(", ")", "\n", "row_means", "[", "i", "]", "=", "row_residual_sums", "[", "i", "]", "/", "sum_weights", "\n", "", "return", "row_means", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_column_means": [[132, 163], ["numpy.asarray", "numpy.zeros", "row_weights.reshape", "numpy.nansum", "six.moves.range", "len", "ValueError", "numpy.asarray.reshape", "row_weights[].sum"], "methods", ["None"], ["", "def", "estimate_column_means", "(", "\n", "self", ",", "\n", "X", ",", "\n", "observed", ",", "\n", "row_means", ",", "\n", "row_scales", ")", ":", "\n", "        ", "\"\"\"\n        column_center[j] =\n        sum{i in observed[:, j]}{\n            (1 / row_scale[i]) * (X[i, j]) - row_center[i])\n        }\n        ------------------------------------------------------------\n        sum{i in observed[:, j]}{1 / row_scale[i]}\n        \"\"\"", "\n", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "row_means", "=", "np", ".", "asarray", "(", "row_means", ")", "\n", "\n", "if", "len", "(", "row_means", ")", "!=", "n_rows", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %d but got shape %s\"", "%", "(", "\n", "n_rows", ",", "row_means", ".", "shape", ")", ")", "\n", "", "column_means", "=", "np", ".", "zeros", "(", "n_cols", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "X", "=", "X", "-", "row_means", ".", "reshape", "(", "(", "n_rows", ",", "1", ")", ")", "\n", "row_weights", "=", "1.0", "/", "row_scales", "\n", "X", "*=", "row_weights", ".", "reshape", "(", "(", "n_rows", ",", "1", ")", ")", "\n", "col_residual_sums", "=", "np", ".", "nansum", "(", "X", ",", "axis", "=", "0", ")", "\n", "for", "j", "in", "range", "(", "n_cols", ")", ":", "\n", "            ", "col_mask", "=", "observed", "[", ":", ",", "j", "]", "\n", "sum_weights", "=", "row_weights", "[", "col_mask", "]", ".", "sum", "(", ")", "\n", "column_means", "[", "j", "]", "=", "col_residual_sums", "[", "j", "]", "/", "sum_weights", "\n", "", "return", "column_means", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.center": [[164, 179], ["numpy.asarray", "numpy.asarray", "numpy.asarray.reshape", "numpy.asarray.reshape", "len", "ValueError", "len", "ValueError", "X.copy.copy.copy"], "methods", ["None"], ["", "def", "center", "(", "self", ",", "X", ",", "row_means", ",", "column_means", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "row_means", "=", "np", ".", "asarray", "(", "row_means", ")", "\n", "column_means", "=", "np", ".", "asarray", "(", "column_means", ")", "\n", "if", "len", "(", "row_means", ")", "!=", "n_rows", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %d but got shape %s\"", "%", "(", "\n", "n_rows", ",", "row_means", ".", "shape", ")", ")", "\n", "", "if", "len", "(", "column_means", ")", "!=", "n_cols", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %d but got shape %s\"", "%", "(", "\n", "n_cols", ",", "column_means", ".", "shape", ")", ")", "\n", "", "if", "not", "inplace", ":", "\n", "            ", "X", "=", "X", ".", "copy", "(", ")", "\n", "", "X", "-=", "row_means", ".", "reshape", "(", "(", "n_rows", ",", "1", ")", ")", "\n", "X", "-=", "column_means", ".", "reshape", "(", "(", "1", ",", "n_cols", ")", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.rescale": [[180, 187], ["row_scales.reshape", "column_scales.reshape", "X.copy.copy.copy"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "X", ",", "row_scales", ",", "column_scales", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "if", "not", "inplace", ":", "\n", "            ", "X", "=", "X", ".", "copy", "(", ")", "\n", "", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "X", "/=", "row_scales", ".", "reshape", "(", "(", "n_rows", ",", "1", ")", ")", "\n", "X", "/=", "column_scales", ".", "reshape", "(", "(", "1", ",", "n_cols", ")", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_row_scales": [[188, 213], ["numpy.asarray", "numpy.nanmean", "numpy.sqrt", "len", "ValueError", "len", "len"], "methods", ["None"], ["", "def", "estimate_row_scales", "(", "\n", "self", ",", "\n", "X_centered", ",", "\n", "column_scales", ")", ":", "\n", "        ", "\"\"\"\n        row_scale[i]**2 =\n        mean{j in observed[i, :]}{\n            (X[i, j] - row_center[i] - column_center[j]) ** 2\n            --------------------------------------------------\n                        column_scale[j] ** 2\n        }\n        \"\"\"", "\n", "n_rows", ",", "n_cols", "=", "X_centered", ".", "shape", "\n", "column_scales", "=", "np", ".", "asarray", "(", "column_scales", ")", "\n", "if", "len", "(", "column_scales", ")", "!=", "n_cols", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %d but got shape %s\"", "%", "(", "\n", "n_cols", ",", "column_scales", ")", ")", "\n", "", "row_variances", "=", "np", ".", "nanmean", "(", "\n", "X_centered", "**", "2", "/", "(", "column_scales", "**", "2", ")", ".", "reshape", "(", "(", "1", ",", "n_cols", ")", ")", ",", "\n", "axis", "=", "1", ")", "\n", "row_variances", "[", "row_variances", "==", "0", "]", "=", "1.0", "\n", "assert", "len", "(", "row_variances", ")", "==", "n_rows", ",", "\"%d != %d\"", "%", "(", "\n", "len", "(", "row_variances", ")", ",", "\n", "n_rows", ")", "\n", "return", "np", ".", "sqrt", "(", "row_variances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_column_scales": [[214, 241], ["numpy.asarray", "numpy.nanmean", "numpy.sqrt", "len", "ValueError", "len", "len"], "methods", ["None"], ["", "def", "estimate_column_scales", "(", "\n", "self", ",", "\n", "X_centered", ",", "\n", "row_scales", ")", ":", "\n", "        ", "\"\"\"\n        column_scale[j] ** 2 =\n          mean{i in observed[:, j]}{\n            (X[i, j] - row_center[i] - column_center[j]) ** 2\n            -------------------------------------------------\n                        row_scale[i] ** 2\n        }\n        \"\"\"", "\n", "n_rows", ",", "n_cols", "=", "X_centered", ".", "shape", "\n", "row_scales", "=", "np", ".", "asarray", "(", "row_scales", ")", "\n", "\n", "if", "len", "(", "row_scales", ")", "!=", "n_rows", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected length %s, got shape %s\"", "%", "(", "\n", "n_rows", ",", "row_scales", ".", "shape", ",", ")", ")", "\n", "\n", "", "column_variances", "=", "np", ".", "nanmean", "(", "\n", "X_centered", "**", "2", "/", "(", "row_scales", "**", "2", ")", ".", "reshape", "(", "(", "n_rows", ",", "1", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "column_variances", "[", "column_variances", "==", "0", "]", "=", "1.0", "\n", "assert", "len", "(", "column_variances", ")", "==", "n_cols", ",", "\"%d != %d\"", "%", "(", "\n", "len", "(", "column_variances", ")", ",", "\n", "n_cols", ")", "\n", "return", "np", ".", "sqrt", "(", "column_variances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.residual": [[242, 263], ["numpy.nanmean", "numpy.nanmean", "numpy.nanvar", "numpy.nanvar", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "residual", "(", "self", ",", "X_normalized", ")", ":", "\n", "        ", "total", "=", "0", "\n", "if", "self", ".", "center_rows", ":", "\n", "            ", "row_means", "=", "np", ".", "nanmean", "(", "X_normalized", ",", "axis", "=", "1", ")", "\n", "total", "+=", "(", "row_means", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "self", ".", "center_columns", ":", "\n", "            ", "column_means", "=", "np", ".", "nanmean", "(", "X_normalized", ",", "axis", "=", "0", ")", "\n", "total", "+=", "(", "column_means", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "self", ".", "scale_rows", ":", "\n", "            ", "row_variances", "=", "np", ".", "nanvar", "(", "X_normalized", ",", "axis", "=", "1", ")", "\n", "row_variances", "[", "row_variances", "==", "0", "]", "=", "1.0", "\n", "total", "+=", "(", "np", ".", "log", "(", "row_variances", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "self", ".", "scale_columns", ":", "\n", "            ", "column_variances", "=", "np", ".", "nanvar", "(", "X_normalized", ",", "axis", "=", "0", ")", "\n", "column_variances", "[", "column_variances", "==", "0", "]", "=", "1.0", "\n", "total", "+=", "(", "np", ".", "log", "(", "column_variances", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp": [[264, 272], ["X.copy.copy.copy"], "methods", ["None"], ["", "def", "clamp", "(", "self", ",", "X", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "if", "not", "inplace", ":", "\n", "            ", "X", "=", "X", ".", "copy", "(", ")", "\n", "", "if", "self", ".", "min_value", "is", "not", "None", ":", "\n", "            ", "X", "[", "X", "<", "self", ".", "min_value", "]", "=", "self", ".", "min_value", "\n", "", "if", "self", ".", "max_value", "is", "not", "None", ":", "\n", "            ", "X", "[", "X", ">", "self", ".", "max_value", "]", "=", "self", ".", "max_value", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit": [[273, 382], ["scaler.BiScaler.clamp", "numpy.asarray", "numpy.asarray", "observed_row_major.sum", "numpy.asarray", "numpy.asarray.sum", "numpy.zeros", "numpy.ones", "scaler.BiScaler.residual", "six.moves.range", "numpy.isnan", "ValueError", "ValueError", "numpy.nanmean", "numpy.zeros", "numpy.nanstd", "numpy.ones", "print", "scaler.BiScaler.center", "scaler.BiScaler.rescale", "scaler.BiScaler.residual", "print", "len", "len", "len", "len", "scaler.BiScaler.estimate_row_means", "scaler.BiScaler.estimate_column_means", "scaler.BiScaler.estimate_row_scales", "scaler.BiScaler.estimate_column_scales", "print", "len", "len", "len", "len", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.residual", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.center", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.rescale", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.residual", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_row_means", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_column_means", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_row_scales", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.estimate_column_scales"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "clamp", "(", "X", ")", "\n", "n_rows", ",", "n_cols", "=", "X", ".", "shape", "\n", "dtype", "=", "X", ".", "dtype", "\n", "\n", "# To avoid inefficient memory access we keep around two copies", "\n", "# of the array, one contiguous in the rows and the other", "\n", "# contiguous in the columns", "\n", "X_row_major", "=", "np", ".", "asarray", "(", "X", ",", "order", "=", "\"C\"", ")", "\n", "X_column_major", "=", "np", ".", "asarray", "(", "X", ",", "order", "=", "\"F\"", ")", "\n", "\n", "observed_row_major", "=", "~", "np", ".", "isnan", "(", "X_row_major", ")", "\n", "n_observed_per_row", "=", "observed_row_major", ".", "sum", "(", "axis", "=", "1", ")", "\n", "n_empty_rows", "=", "(", "n_observed_per_row", "==", "0", ")", ".", "sum", "(", ")", "\n", "\n", "if", "n_empty_rows", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"%d rows have no observed values\"", "%", "n_empty_rows", ")", "\n", "\n", "", "observed_column_major", "=", "np", ".", "asarray", "(", "observed_row_major", ",", "order", "=", "\"F\"", ")", "\n", "n_observed_per_column", "=", "observed_column_major", ".", "sum", "(", "axis", "=", "0", ")", "\n", "n_empty_columns", "=", "(", "n_observed_per_column", "==", "0", ")", ".", "sum", "(", ")", "\n", "if", "n_empty_columns", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"%d columns have no observed values\"", "%", "(", "\n", "n_empty_columns", ",", ")", ")", "\n", "# initialize by assuming that rows are zero-mean/unit variance and", "\n", "# with a direct estimate of mean and standard deviation", "\n", "# of each column", "\n", "", "row_means", "=", "np", ".", "zeros", "(", "n_rows", ",", "dtype", "=", "dtype", ")", "\n", "row_scales", "=", "np", ".", "ones", "(", "n_rows", ",", "dtype", "=", "dtype", ")", "\n", "\n", "if", "self", ".", "center_columns", ":", "\n", "            ", "column_means", "=", "np", ".", "nanmean", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "column_means", "=", "np", ".", "zeros", "(", "n_cols", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "if", "self", ".", "scale_columns", ":", "\n", "            ", "column_scales", "=", "np", ".", "nanstd", "(", "X", ",", "axis", "=", "0", ")", "\n", "column_scales", "[", "column_scales", "==", "0", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "column_scales", "=", "np", ".", "ones", "(", "n_cols", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "last_residual", "=", "self", ".", "residual", "(", "X", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"[BiScaler] Initial log residual value = %f\"", "%", "(", "\n", "np", ".", "log", "(", "last_residual", ")", ",", ")", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "            ", "if", "last_residual", "==", "0", ":", "\n", "# already have a perfect fit, so let's get out of here", "\n", "                ", "print", "(", "\"[BiScaler] No room for improvement\"", ")", "\n", "break", "\n", "\n", "", "assert", "len", "(", "column_means", ")", "==", "n_cols", ",", "\"Wrong number of column means, expected %d but got %d\"", "%", "(", "\n", "n_cols", ",", "\n", "len", "(", "column_means", ")", ")", "\n", "assert", "len", "(", "column_scales", ")", "==", "n_cols", ",", "\"Wrong number of column scales, expected %d but got %d\"", "%", "(", "\n", "n_cols", ",", "\n", "len", "(", "column_scales", ")", ")", "\n", "assert", "len", "(", "row_means", ")", "==", "n_rows", ",", "\"Wrong number of row means, expected %d but got %d\"", "%", "(", "\n", "n_rows", ",", "\n", "len", "(", "row_means", ")", ")", "\n", "assert", "len", "(", "row_scales", ")", "==", "n_rows", ",", "\"Wrong number of row scales, expected %d but got %d\"", "%", "(", "\n", "n_rows", ",", "\n", "len", "(", "row_scales", ")", ")", "\n", "\n", "if", "self", ".", "center_rows", ":", "\n", "                ", "row_means", "=", "self", ".", "estimate_row_means", "(", "\n", "X", "=", "X_row_major", ",", "\n", "observed", "=", "observed_row_major", ",", "\n", "column_means", "=", "column_means", ",", "\n", "column_scales", "=", "column_scales", ")", "\n", "", "if", "self", ".", "center_columns", ":", "\n", "                ", "column_means", "=", "self", ".", "estimate_column_means", "(", "\n", "X", "=", "X_column_major", ",", "\n", "observed", "=", "observed_column_major", ",", "\n", "row_means", "=", "row_means", ",", "\n", "row_scales", "=", "row_scales", ")", "\n", "\n", "", "X_centered", "=", "self", ".", "center", "(", "\n", "X", ",", "\n", "row_means", ",", "\n", "column_means", ")", "\n", "if", "self", ".", "scale_rows", ":", "\n", "                ", "row_scales", "=", "self", ".", "estimate_row_scales", "(", "\n", "X_centered", "=", "X_centered", ",", "\n", "column_scales", "=", "column_scales", ")", "\n", "", "if", "self", ".", "scale_columns", ":", "\n", "                ", "column_scales", "=", "self", ".", "estimate_column_scales", "(", "\n", "X_centered", "=", "X_centered", ",", "\n", "row_scales", "=", "row_scales", ")", "\n", "\n", "", "X_normalized", "=", "self", ".", "rescale", "(", "X_centered", ",", "row_scales", ",", "column_scales", ")", "\n", "residual", "=", "self", ".", "residual", "(", "X_normalized", ")", "\n", "change_in_residual", "=", "last_residual", "-", "residual", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"[BiScaler] Iter %d: log residual = %f, log improvement ratio=%f\"", "%", "(", "\n", "i", "+", "1", ",", "\n", "np", ".", "log", "(", "residual", ")", ",", "\n", "np", ".", "log", "(", "last_residual", "/", "residual", ")", ")", ")", "\n", "", "if", "change_in_residual", "/", "last_residual", "<", "self", ".", "tolerance", ":", "\n", "                ", "break", "\n", "", "last_residual", "=", "residual", "\n", "", "self", ".", "row_means", "=", "row_means", "\n", "self", ".", "row_scales", "=", "row_scales", "\n", "self", ".", "column_means", "=", "column_means", "\n", "self", ".", "column_scales", "=", "column_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.transform": [[383, 388], ["numpy.asarray().copy", "scaler.BiScaler.center", "scaler.BiScaler.rescale", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.center", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.rescale"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "asarray", "(", "X", ")", ".", "copy", "(", ")", "\n", "X", "=", "self", ".", "center", "(", "X", ",", "self", ".", "row_means", ",", "self", ".", "column_means", ",", "inplace", "=", "True", ")", "\n", "X", "=", "self", ".", "rescale", "(", "X", ",", "self", ".", "row_scales", ",", "self", ".", "column_scales", ",", "inplace", "=", "True", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.inverse_transform": [[389, 400], ["numpy.asarray", "scaler.BiScaler.rescale", "scaler.BiScaler.center", "scaler.BiScaler.clamp", "X.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.rescale", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.center", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.clamp"], ["", "def", "inverse_transform", "(", "self", ",", "X", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "X", "=", "np", ".", "asarray", "(", "X", ")", "\n", "if", "not", "inplace", ":", "\n", "            ", "X", "=", "X", ".", "copy", "(", ")", "\n", "", "X", "=", "self", ".", "rescale", "(", "\n", "X", ",", "\n", "1.0", "/", "self", ".", "row_scales", ",", "\n", "1.0", "/", "self", ".", "column_scales", ",", "\n", "inplace", "=", "True", ")", "\n", "X", "=", "self", ".", "center", "(", "X", ",", "-", "self", ".", "row_means", ",", "-", "self", ".", "column_means", ",", "inplace", "=", "True", ")", "\n", "return", "self", ".", "clamp", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit_transform": [[401, 404], ["scaler.BiScaler.fit", "scaler.BiScaler.transform"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.fit", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.transform"], ["", "def", "fit_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "transform", "(", "X", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_svd.IterativeSVD.__init__": [[26, 48], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "rank", "=", "10", ",", "\n", "convergence_threshold", "=", "0.00001", ",", "\n", "max_iters", "=", "200", ",", "\n", "gradual_rank_increase", "=", "True", ",", "\n", "svd_algorithm", "=", "\"arpack\"", ",", "\n", "init_fill_method", "=", "\"zero\"", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "fill_method", "=", "init_fill_method", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "svd_algorithm", "=", "svd_algorithm", "\n", "self", ".", "convergence_threshold", "=", "convergence_threshold", "\n", "self", ".", "gradual_rank_increase", "=", "gradual_rank_increase", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_svd.IterativeSVD._converged": [[49, 62], ["numpy.sum"], "methods", ["None"], ["", "def", "_converged", "(", "self", ",", "X_old", ",", "X_new", ",", "missing_mask", ")", ":", "\n", "# check for convergence", "\n", "        ", "old_missing_values", "=", "X_old", "[", "missing_mask", "]", "\n", "new_missing_values", "=", "X_new", "[", "missing_mask", "]", "\n", "difference", "=", "old_missing_values", "-", "new_missing_values", "\n", "ssd", "=", "np", ".", "sum", "(", "difference", "**", "2", ")", "\n", "old_norm_squared", "=", "(", "old_missing_values", "**", "2", ")", ".", "sum", "(", ")", "\n", "# edge cases", "\n", "if", "old_norm_squared", "==", "0", "or", "(", "old_norm_squared", "<", "F32PREC", "and", "ssd", ">", "F32PREC", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "(", "ssd", "/", "old_norm_squared", ")", "<", "self", ".", "convergence_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_svd.IterativeSVD.solve": [[63, 95], ["sklearn.utils.check_array", "range", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit_transform", "sklearn.decomposition.TruncatedSVD.inverse_transform", "iterative_svd.IterativeSVD.clip", "common.masked_mae", "iterative_svd.IterativeSVD._converged", "min", "print"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.scaler.BiScaler.inverse_transform", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.solver.Solver.clip", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.common.masked_mae", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.iterative_svd.IterativeSVD._converged"], ["", "", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "observed_mask", "=", "~", "missing_mask", "\n", "X_filled", "=", "X", "\n", "for", "i", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "# deviation from original svdImpute algorithm:", "\n", "# gradually increase the rank of our approximation", "\n", "            ", "if", "self", ".", "gradual_rank_increase", ":", "\n", "                ", "curr_rank", "=", "min", "(", "2", "**", "i", ",", "self", ".", "rank", ")", "\n", "", "else", ":", "\n", "                ", "curr_rank", "=", "self", ".", "rank", "\n", "", "tsvd", "=", "TruncatedSVD", "(", "curr_rank", ",", "algorithm", "=", "self", ".", "svd_algorithm", ")", "\n", "X_reduced", "=", "tsvd", ".", "fit_transform", "(", "X_filled", ")", "\n", "X_reconstructed", "=", "tsvd", ".", "inverse_transform", "(", "X_reduced", ")", "\n", "X_reconstructed", "=", "self", ".", "clip", "(", "X_reconstructed", ")", "\n", "mae", "=", "masked_mae", "(", "\n", "X_true", "=", "X", ",", "\n", "X_pred", "=", "X_reconstructed", ",", "\n", "mask", "=", "observed_mask", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\n", "\"[IterativeSVD] Iter %d: observed MAE=%0.6f\"", "%", "(", "\n", "i", "+", "1", ",", "mae", ")", ")", "\n", "", "converged", "=", "self", ".", "_converged", "(", "\n", "X_old", "=", "X_filled", ",", "\n", "X_new", "=", "X_reconstructed", ",", "\n", "missing_mask", "=", "missing_mask", ")", "\n", "X_filled", "[", "missing_mask", "]", "=", "X_reconstructed", "[", "missing_mask", "]", "\n", "if", "converged", ":", "\n", "                ", "break", "\n", "", "", "return", "X_filled", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.__init__": [[38, 75], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "min_weight_for_similarity", "=", "0.1", ",", "\n", "min_count_for_similarity", "=", "2", ",", "\n", "similarity_exponent", "=", "4.0", ",", "\n", "shrinkage_coef", "=", "0.0001", ",", "\n", "orientation", "=", "\"rows\"", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        min_weight_for_similarity : float\n            If sum of values in shared rows between two columns falls below this\n            threhold then similarity can't be computed between those columns.\n\n        min_count_for_similarity : int\n            If number of overlapping rows between two columns falls below this\n            threhold then similarity can't be computed between those columns.\n\n        similarity_exponent : float\n            Exponent for turning similarities into weights on values of other\n            columns.\n\n        shrinkage_coef : float\n            Shrinks reconstructed values toward 0\n\n        orientation : str\n            Whether to compute similarities along rows or columns\n\n        verbose : bool\n        \"\"\"", "\n", "self", ".", "min_weight_for_similarity", "=", "min_weight_for_similarity", "\n", "self", ".", "min_count_for_similarity", "=", "min_count_for_similarity", "\n", "self", ".", "similarity_exponent", "=", "similarity_exponent", "\n", "self", ".", "shrinkage_coef", "=", "shrinkage_coef", "\n", "self", ".", "orientation", "=", "orientation", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.jacard_similarity_from_nested_dicts": [[76, 112], ["nested_dictionaries.items", "set", "nested_dictionaries.items", "column_dict_a.keys", "set", "set.intersection", "len", "column_dict_b.keys", "min", "max"], "methods", ["None"], ["", "def", "jacard_similarity_from_nested_dicts", "(", "self", ",", "nested_dictionaries", ")", ":", "\n", "        ", "\"\"\"\n        Compute the continuous Jacard similarity between all pairs\n        of keys in dictionary-of-dictionaries given as an input.\n\n        Returns three element tuple:\n            - similarity dictionary: (key, key) -> float\n            - overlap count dictionary: key -> key -> int\n            - weight dictionary: key -> key -> float\n        \"\"\"", "\n", "sims", "=", "{", "}", "\n", "overlaps", "=", "{", "}", "\n", "weights", "=", "{", "}", "\n", "for", "a", ",", "column_dict_a", "in", "nested_dictionaries", ".", "items", "(", ")", ":", "\n", "            ", "row_set_a", "=", "set", "(", "column_dict_a", ".", "keys", "(", ")", ")", "\n", "for", "b", ",", "column_dict_b", "in", "nested_dictionaries", ".", "items", "(", ")", ":", "\n", "                ", "row_set_b", "=", "set", "(", "column_dict_b", ".", "keys", "(", ")", ")", "\n", "common_rows", "=", "row_set_a", ".", "intersection", "(", "row_set_b", ")", "\n", "n_overlap", "=", "len", "(", "common_rows", ")", "\n", "overlaps", "[", "(", "a", ",", "b", ")", "]", "=", "n_overlap", "\n", "total", "=", "0.0", "\n", "weight", "=", "0.0", "\n", "for", "row_name", "in", "common_rows", ":", "\n", "                    ", "value_a", "=", "column_dict_a", "[", "row_name", "]", "\n", "value_b", "=", "column_dict_b", "[", "row_name", "]", "\n", "minval", "=", "min", "(", "value_a", ",", "value_b", ")", "\n", "maxval", "=", "max", "(", "value_a", ",", "value_b", ")", "\n", "total", "+=", "minval", "\n", "weight", "+=", "maxval", "\n", "", "weights", "[", "(", "a", ",", "b", ")", "]", "=", "weight", "\n", "if", "weight", "<", "self", ".", "min_weight_for_similarity", ":", "\n", "                    ", "continue", "\n", "", "if", "n_overlap", "<", "self", ".", "min_count_for_similarity", ":", "\n", "                    ", "continue", "\n", "", "sims", "[", "(", "a", ",", "b", ")", "]", "=", "total", "/", "weight", "\n", "", "", "return", "sims", ",", "overlaps", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.complete_dict": [[113, 154], ["dictionary_helpers.collect_nested_keys", "similarity_weighted_averaging.SimilarityWeightedAveraging.jacard_similarity_from_nested_dicts", "dictionary_helpers.reverse_lookup_from_nested_dict", "collections.defaultdict", "enumerate", "dictionary_helpers.transpose_nested_dictionary", "print", "print", "print", "dictionary_helpers.reverse_lookup_from_nested_dict.items", "dictionary_helpers.transpose_nested_dictionary", "len", "len", "similarities.get", "len"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.collect_nested_keys", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.jacard_similarity_from_nested_dicts", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.reverse_lookup_from_nested_dict", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.transpose_nested_dictionary", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.transpose_nested_dictionary"], ["", "def", "complete_dict", "(", "\n", "self", ",", "\n", "values_dict", ")", ":", "\n", "        ", "\"\"\"\n        Keys of nested dictionaries can be arbitrary objects.\n        \"\"\"", "\n", "if", "self", ".", "orientation", "!=", "\"rows\"", ":", "\n", "            ", "values_dict", "=", "transpose_nested_dictionary", "(", "values_dict", ")", "\n", "\n", "", "row_keys", ",", "column_keys", "=", "collect_nested_keys", "(", "values_dict", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"[SimilarityWeightedAveraging] # rows = %d\"", "%", "(", "len", "(", "row_keys", ")", ")", ")", "\n", "print", "(", "\"[SimilarityWeightedAveraging] # columns = %d\"", "%", "(", "len", "(", "column_keys", ")", ")", ")", "\n", "", "similarities", ",", "overlaps", ",", "weights", "=", "self", ".", "jacard_similarity_from_nested_dicts", "(", "values_dict", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\n", "\"[SimilarityWeightedAveraging] Computed %d similarities between rows\"", "%", "(", "\n", "len", "(", "similarities", ")", ",", ")", ")", "\n", "", "column_to_row_values", "=", "reverse_lookup_from_nested_dict", "(", "values_dict", ")", "\n", "\n", "result", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "exponent", "=", "self", ".", "similarity_exponent", "\n", "shrinkage_coef", "=", "self", ".", "shrinkage_coef", "\n", "for", "i", ",", "row_key", "in", "enumerate", "(", "row_keys", ")", ":", "\n", "            ", "for", "column_key", ",", "value_triplets", "in", "column_to_row_values", ".", "items", "(", ")", ":", "\n", "                ", "total", "=", "0", "\n", "denom", "=", "shrinkage_coef", "\n", "for", "(", "other_row_key", ",", "y", ")", "in", "value_triplets", ":", "\n", "                    ", "sample_weight", "=", "1.0", "\n", "sim", "=", "similarities", ".", "get", "(", "(", "row_key", ",", "other_row_key", ")", ",", "0", ")", "\n", "combined_weight", "=", "sim", "**", "exponent", "\n", "combined_weight", "*=", "sample_weight", "\n", "total", "+=", "combined_weight", "*", "y", "\n", "denom", "+=", "combined_weight", "\n", "", "if", "denom", ">", "shrinkage_coef", ":", "\n", "                    ", "result", "[", "row_key", "]", "[", "column_key", "]", "=", "total", "/", "denom", "\n", "", "", "", "if", "self", ".", "orientation", "!=", "\"rows\"", ":", "\n", "            ", "result", "=", "transpose_nested_dictionary", "(", "result", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.fit_transform": [[155, 176], ["sklearn.utils.check_array", "numpy.isnan", "dictionary_helpers.matrix_to_nested_dictionary", "similarity_weighted_averaging.SimilarityWeightedAveraging.complete_dict", "numpy.zeros_like", "similarity_weighted_averaging.SimilarityWeightedAveraging.items", "print", "row_dict.items"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.dictionary_helpers.matrix_to_nested_dictionary", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.similarity_weighted_averaging.SimilarityWeightedAveraging.complete_dict"], ["", "def", "fit_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\n", "(", "\"[SimilarityWeightedAveraging] Creating dictionary from matrix \"", "\n", "\" with shape %s\"", ")", "%", "(", "X", ".", "shape", ",", ")", ")", "\n", "", "missing_mask", "=", "np", ".", "isnan", "(", "X", ")", "\n", "observed_mask", "=", "~", "missing_mask", "\n", "sparse_dict", "=", "matrix_to_nested_dictionary", "(", "\n", "X", ",", "\n", "filter_fn", "=", "np", ".", "isfinite", ")", "\n", "\n", "completed_dict", "=", "self", ".", "complete_dict", "(", "\n", "sparse_dict", ")", "\n", "array_result", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "for", "row_idx", ",", "row_dict", "in", "completed_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "col_idx", ",", "value", "in", "row_dict", ".", "items", "(", ")", ":", "\n", "                ", "array_result", "[", "row_idx", ",", "col_idx", "]", "=", "value", "\n", "", "", "array_result", "[", "observed_mask", "]", "=", "X", "[", "observed_mask", "]", "\n", "return", "array_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.__init__": [[28, 66], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "require_symmetric_solution", "=", "False", ",", "\n", "min_value", "=", "None", ",", "\n", "max_value", "=", "None", ",", "\n", "error_tolerance", "=", "0.0001", ",", "\n", "max_iters", "=", "50000", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        require_symmetric_solution : bool\n            Add symmetry constraint to convex problem\n\n        min_value : float\n            Smallest possible imputed value\n\n        max_value : float\n            Largest possible imputed value\n\n        error_tolerance : bool\n            Degree of error allowed on reconstructed values. If omitted then\n            defaults to 0.0001\n\n        max_iters : int\n            Maximum number of iterations for the convex solver\n\n        verbose : bool\n            Print debug info\n        \"\"\"", "\n", "Solver", ".", "__init__", "(", "\n", "self", ",", "\n", "min_value", "=", "min_value", ",", "\n", "max_value", "=", "max_value", ")", "\n", "self", ".", "require_symmetric_solution", "=", "require_symmetric_solution", "\n", "self", ".", "error_tolerance", "=", "error_tolerance", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization._constraints": [[67, 96], ["cvxpy.multiply", "cvxpy.multiply", "cvxpy.abs", "constraints.append", "constraints.append", "constraints.append"], "methods", ["None"], ["", "def", "_constraints", "(", "self", ",", "X", ",", "missing_mask", ",", "S", ",", "error_tolerance", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        X : np.array\n            Data matrix with missing values filled in\n\n        missing_mask : np.array\n            Boolean array indicating where missing values were\n\n        S : cvxpy.Variable\n            Representation of solution variable\n        \"\"\"", "\n", "ok_mask", "=", "~", "missing_mask", "\n", "masked_X", "=", "cvxpy", ".", "multiply", "(", "ok_mask", ",", "X", ")", "\n", "masked_S", "=", "cvxpy", ".", "multiply", "(", "ok_mask", ",", "S", ")", "\n", "abs_diff", "=", "cvxpy", ".", "abs", "(", "masked_S", "-", "masked_X", ")", "\n", "close_to_data", "=", "abs_diff", "<=", "error_tolerance", "\n", "constraints", "=", "[", "close_to_data", "]", "\n", "if", "self", ".", "require_symmetric_solution", ":", "\n", "            ", "constraints", ".", "append", "(", "S", "==", "S", ".", "T", ")", "\n", "\n", "", "if", "self", ".", "min_value", "is", "not", "None", ":", "\n", "            ", "constraints", ".", "append", "(", "S", ">=", "self", ".", "min_value", ")", "\n", "\n", "", "if", "self", ".", "max_value", "is", "not", "None", ":", "\n", "            ", "constraints", ".", "append", "(", "S", "<=", "self", ".", "max_value", ")", "\n", "\n", "", "return", "constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization._create_objective": [[97, 112], ["cvxpy.Variable", "cvxpy.norm", "cvxpy.Minimize"], "methods", ["None"], ["", "def", "_create_objective", "(", "self", ",", "m", ",", "n", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        m, n : int\n            Dimensions that of solution matrix\n        Returns the objective function and a variable representing the\n        solution to the convex optimization problem.\n        \"\"\"", "\n", "# S is the completed matrix", "\n", "shape", "=", "(", "m", ",", "n", ")", "\n", "S", "=", "cvxpy", ".", "Variable", "(", "shape", ",", "name", "=", "\"S\"", ")", "\n", "norm", "=", "cvxpy", ".", "norm", "(", "S", ",", "\"nuc\"", ")", "\n", "objective", "=", "cvxpy", ".", "Minimize", "(", "norm", ")", "\n", "return", "S", ",", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve": [[113, 131], ["sklearn.utils.check_array", "nuclear_norm_minimization.NuclearNormMinimization._create_objective", "nuclear_norm_minimization.NuclearNormMinimization._constraints", "cvxpy.Problem", "cvxpy.Problem.solve"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization._create_objective", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization._constraints", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.nuclear_norm_minimization.NuclearNormMinimization.solve"], ["", "def", "solve", "(", "self", ",", "X", ",", "missing_mask", ")", ":", "\n", "        ", "X", "=", "check_array", "(", "X", ",", "force_all_finite", "=", "False", ")", "\n", "\n", "m", ",", "n", "=", "X", ".", "shape", "\n", "S", ",", "objective", "=", "self", ".", "_create_objective", "(", "m", ",", "n", ")", "\n", "constraints", "=", "self", ".", "_constraints", "(", "\n", "X", "=", "X", ",", "\n", "missing_mask", "=", "missing_mask", ",", "\n", "S", "=", "S", ",", "\n", "error_tolerance", "=", "self", ".", "error_tolerance", ")", "\n", "problem", "=", "cvxpy", ".", "Problem", "(", "objective", ",", "constraints", ")", "\n", "problem", ".", "solve", "(", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "solver", "=", "cvxpy", ".", "SCS", ",", "\n", "max_iters", "=", "self", ".", "max_iters", ",", "\n", "# use_indirect, see: https://github.com/cvxgrp/cvxpy/issues/547", "\n", "use_indirect", "=", "False", ")", "\n", "return", "S", ".", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.keras_models.KerasMatrixFactorizer.__init__": [[22, 37], ["keras.regularizers.get", "keras.engine.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "rank", ",", "\n", "input_dim_i", ",", "\n", "input_dim_j", ",", "\n", "embeddings_regularizer", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "input_dim_i", "=", "input_dim_i", "\n", "self", ".", "input_dim_j", "=", "input_dim_j", "\n", "self", ".", "embeddings_regularizer", "=", "regularizers", ".", "get", "(", "embeddings_regularizer", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "super", "(", "KerasMatrixFactorizer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.keras_models.KerasMatrixFactorizer.build": [[38, 71], ["keras_models.KerasMatrixFactorizer.add_weight", "keras_models.KerasMatrixFactorizer.add_weight", "super().build", "keras_models.KerasMatrixFactorizer.add_weight", "keras_models.KerasMatrixFactorizer.add_weight", "keras_models.KerasMatrixFactorizer.add_weight", "keras.initializers.RandomNormal", "keras.initializers.RandomNormal", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.keras_models.KerasMatrixFactorizer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# Create a trainable weight variable for this layer.", "\n", "        ", "self", ".", "i_embedding", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "input_dim_i", ",", "self", ".", "rank", ")", ",", "\n", "initializer", "=", "RandomNormal", "(", "mean", "=", "0.0", ",", "stddev", "=", "1", "/", "np", ".", "sqrt", "(", "self", ".", "rank", ")", ")", ",", "\n", "name", "=", "'i_embedding'", ",", "\n", "regularizer", "=", "self", ".", "embeddings_regularizer", "\n", ")", "\n", "self", ".", "j_embedding", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "input_dim_j", ",", "self", ".", "rank", ")", ",", "\n", "initializer", "=", "RandomNormal", "(", "mean", "=", "0.0", ",", "stddev", "=", "1", "/", "np", ".", "sqrt", "(", "self", ".", "rank", ")", ")", ",", "\n", "name", "=", "'j_embedding'", ",", "\n", "regularizer", "=", "self", ".", "embeddings_regularizer", "\n", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "i_bias", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "input_dim_i", ",", "1", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "name", "=", "'i_bias'", "\n", ")", "\n", "self", ".", "j_bias", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "input_dim_j", ",", "1", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "name", "=", "'j_bias'", "\n", ")", "\n", "self", ".", "constant", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "1", ",", "1", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "name", "=", "'constant'", ",", "\n", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "super", "(", "KerasMatrixFactorizer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.keras_models.KerasMatrixFactorizer.call": [[72, 87], ["keras.backend.gather", "keras.backend.gather", "keras.backend.batch_dot", "keras.backend.dtype", "keras.backend.cast", "keras.backend.gather", "keras.backend.gather"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "K", ".", "dtype", "(", "inputs", ")", "!=", "'int32'", ":", "\n", "            ", "inputs", "=", "K", ".", "cast", "(", "inputs", ",", "'int32'", ")", "\n", "# get the embeddings", "\n", "", "i", "=", "inputs", "[", ":", ",", "0", "]", "# by convention", "\n", "j", "=", "inputs", "[", ":", ",", "1", "]", "\n", "i_embedding", "=", "K", ".", "gather", "(", "self", ".", "i_embedding", ",", "i", ")", "\n", "j_embedding", "=", "K", ".", "gather", "(", "self", ".", "j_embedding", ",", "j", ")", "\n", "# <i_embed, j_embed> + i_bias + j_bias + constant", "\n", "out", "=", "K", ".", "batch_dot", "(", "i_embedding", ",", "j_embedding", ",", "axes", "=", "[", "1", ",", "1", "]", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "i_bias", "=", "K", ".", "gather", "(", "self", ".", "i_bias", ",", "i", ")", "\n", "j_bias", "=", "K", ".", "gather", "(", "self", ".", "j_bias", ",", "j", ")", "\n", "out", "+=", "(", "i_bias", "+", "j_bias", "+", "self", ".", "constant", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.fancyimpute.keras_models.KerasMatrixFactorizer.compute_output_shape": [[88, 90], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.vgg.VGG._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.vgg.VGG.__init__": [[16, 20], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.vgg.VGG.forward": [[21, 26], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.vgg.VGG._make_layers": [[27, 40], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.SepConv.__init__": [[14, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.SepConv.forward": [[22, 24], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.CellA.__init__": [[27, 34], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.CellA.forward": [[35, 41], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.CellB.__init__": [[43, 57], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.CellB.forward": [[58, 72], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet.__init__": [[74, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet._make_layer": [[90, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet._downsample": [[97, 101], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNetA": [[114, 116], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNetB": [[117, 119], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.test": [[121, 127], ["pnasnet.PNASNetB", "print", "torch.autograd.Variable", "PNASNetB.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.Bottleneck.__init__": [[10, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.Bottleneck.forward": [[29, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN._make_layer": [[55, 62], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN.forward": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN26": [[75, 83], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN92": [[84, 92], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.test": [[94, 99], ["dpn.DPN92", "torch.autograd.Variable", "DPN92.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleBlock.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleBlock.forward": [[17, 22], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.Bottleneck.__init__": [[25, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.Bottleneck.forward": [[43, 51], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNet.__init__": [[54, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNet._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNet.forward": [[77, 86], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNetG2": [[88, 95], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNetG3": [[96, 103], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.test": [[105, 110], ["shufflenet.ShuffleNetG2", "torch.autograd.Variable", "ShuffleNetG2.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.BasicBlock.__init__": [[8, 20], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "droprate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "droprate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.BasicBlock.forward": [[21, 31], ["wide_resnet.BasicBlock.relu2", "wide_resnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.NetworkBlock.__init__": [[34, 37], ["torch.Module.__init__", "wide_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "droprate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "droprate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.NetworkBlock._make_layer": [[38, 43], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.NetworkBlock.forward": [[44, 46], ["wide_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.WideResNet.__init__": [[49, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "droprate", "=", "0.0", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "droprate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "droprate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "droprate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.WideResNet.forward": [[79, 88], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.block1", "wide_resnet.WideResNet.block2", "wide_resnet.WideResNet.block3", "wide_resnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wide_resnet.WideResNet.fc", "wide_resnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.wide_resnet.WideResNet10": [[90, 92], ["wide_resnet.WideResNet"], "function", ["None"], ["", "", "def", "WideResNet10", "(", ")", ":", "\n", "    ", "return", "WideResNet", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.BasicBlock.__init__": [[19, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.BasicBlock.forward": [[33, 39], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.Bottleneck.__init__": [[44, 58], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.Bottleneck.forward": [[60, 67], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet.__init__": [[70, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet._make_layer": [[82, 89], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet.forward": [[90, 100], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet18": [[102, 104], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet34": [[105, 107], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet50": [[108, 110], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet101": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet152": [[114, 116], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.test": [[118, 122], ["resnet.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.BasicBlock.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.BasicBlock.forward": [[31, 45], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.PreActBlock.__init__": [[48, 63], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.PreActBlock.forward": [[64, 79], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.SENet.__init__": [[82, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.SENet._make_layer": [[94, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.SENet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.SENet18": [[114, 116], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.test": [[118, 122], ["senet.SENet18", "SENet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.test_densenet": [[103, 108], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.Block.__init__": [[16, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.Block.forward": [[33, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt._make_layer": [[57, 66], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt29_2x64d": [[79, 81], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt29_4x64d": [[82, 84], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt29_8x64d": [[85, 87], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt29_32x4d": [[88, 90], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.test_resnext": [[91, 96], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "torch.autograd.Variable", "net.size"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.googlenet.Inception.__init__": [[10, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.googlenet.Inception.forward": [[50, 56], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.googlenet.GoogLeNet.__init__": [[59, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.googlenet.GoogLeNet.forward": [[84, 101], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__": [[68, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet.forward": [[87, 97], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet18": [[99, 101], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet34": [[102, 104], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet50": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet101": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet152": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.test": [[115, 119], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.YyzHarry_ME-Net.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]]}