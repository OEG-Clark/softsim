{"home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.eval.parse_args": [[31, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"PaddleClas eval script\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-c'", ",", "\n", "'--config'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'./configs/eval.yaml'", ",", "\n", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-o'", ",", "\n", "'--override'", ",", "\n", "action", "=", "'append'", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'config options to be overridden'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.eval.main": [[49, 75], ["ppcls.utils.config.get_config", "ppcls.utils.config.get_config.get", "paddle.set_device", "paddle.distributed.get_world_size", "program.create_model", "ppcls.utils.save_load.init_model", "paddle.DataParallel.eval", "paddle.distributed.init_parallel_env", "paddle.DataParallel", "ppcls.data.Reader", "paddle.no_grad", "program.run"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.get_config", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.init_model"], ["", "def", "main", "(", "args", ",", "return_dict", "=", "{", "}", ")", ":", "\n", "    ", "config", "=", "get_config", "(", "args", ".", "config", ",", "overrides", "=", "args", ".", "override", ",", "show", "=", "True", ")", "\n", "config", ".", "mode", "=", "\"valid\"", "\n", "# assign place", "\n", "use_gpu", "=", "config", ".", "get", "(", "\"use_gpu\"", ",", "True", ")", "\n", "place", "=", "paddle", ".", "set_device", "(", "'gpu'", "if", "use_gpu", "else", "'cpu'", ")", "\n", "\n", "trainer_num", "=", "paddle", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "use_data_parallel", "=", "trainer_num", "!=", "1", "\n", "config", "[", "\"use_data_parallel\"", "]", "=", "use_data_parallel", "\n", "\n", "if", "config", "[", "\"use_data_parallel\"", "]", ":", "\n", "        ", "paddle", ".", "distributed", ".", "init_parallel_env", "(", ")", "\n", "\n", "", "net", "=", "program", ".", "create_model", "(", "config", ".", "ARCHITECTURE", ",", "config", ".", "classes_num", ")", "\n", "if", "config", "[", "\"use_data_parallel\"", "]", ":", "\n", "        ", "net", "=", "paddle", ".", "DataParallel", "(", "net", ")", "\n", "\n", "", "init_model", "(", "config", ",", "net", ",", "optimizer", "=", "None", ")", "\n", "valid_dataloader", "=", "Reader", "(", "config", ",", "'valid'", ",", "places", "=", "place", ")", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n", "        ", "top1_acc", "=", "program", ".", "run", "(", "valid_dataloader", ",", "config", ",", "net", ",", "None", ",", "None", ",", "0", ",", "\n", "'valid'", ")", "\n", "", "return_dict", "[", "\"top1_acc\"", "]", "=", "top1_acc", "\n", "return", "top1_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.train.parse_args": [[35, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"PaddleClas train script\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-c'", ",", "\n", "'--config'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'configs/ResNet/ResNet50.yaml'", ",", "\n", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-o'", ",", "\n", "'--override'", ",", "\n", "action", "=", "'append'", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'config options to be overridden'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.tools.train.main": [[53, 114], ["paddle.seed", "ppcls.utils.config.get_config", "ppcls.utils.config.get_config.get", "paddle.set_device", "paddle.distributed.get_world_size", "program.create_model", "program.create_optimizer", "ppcls.utils.save_load.init_model", "ppcls.utils.config.get_config.get", "range", "paddle.distributed.init_parallel_env", "paddle.DataParallel", "ppcls.data.Reader", "paddle.DataParallel.train", "program.run", "paddle.DataParallel.parameters", "ppcls.data.Reader", "paddle.DataParallel.eval", "ppcls.utils.logger.info", "os.path.join", "ppcls.utils.save_load.save_model", "paddle.no_grad", "program.run", "os.path.join", "ppcls.utils.save_load.save_model", "ppcls.utils.logger.coloring"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.get_config", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.init_model", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.train", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.save_model", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.save_model", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "paddle", ".", "seed", "(", "12345", ")", "\n", "\n", "config", "=", "get_config", "(", "args", ".", "config", ",", "overrides", "=", "args", ".", "override", ",", "show", "=", "True", ")", "\n", "# assign the place", "\n", "use_gpu", "=", "config", ".", "get", "(", "\"use_gpu\"", ",", "True", ")", "\n", "place", "=", "paddle", ".", "set_device", "(", "'gpu'", "if", "use_gpu", "else", "'cpu'", ")", "\n", "\n", "trainer_num", "=", "paddle", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "use_data_parallel", "=", "trainer_num", "!=", "1", "\n", "config", "[", "\"use_data_parallel\"", "]", "=", "use_data_parallel", "\n", "\n", "if", "config", "[", "\"use_data_parallel\"", "]", ":", "\n", "        ", "paddle", ".", "distributed", ".", "init_parallel_env", "(", ")", "\n", "\n", "", "net", "=", "program", ".", "create_model", "(", "config", ".", "ARCHITECTURE", ",", "config", ".", "classes_num", ")", "\n", "optimizer", ",", "lr_scheduler", "=", "program", ".", "create_optimizer", "(", "\n", "config", ",", "parameter_list", "=", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "config", "[", "\"use_data_parallel\"", "]", ":", "\n", "        ", "net", "=", "paddle", ".", "DataParallel", "(", "net", ")", "\n", "\n", "# load model from checkpoint or pretrained model", "\n", "", "init_model", "(", "config", ",", "net", ",", "optimizer", ")", "\n", "\n", "train_dataloader", "=", "Reader", "(", "config", ",", "'train'", ",", "places", "=", "place", ")", "(", ")", "\n", "\n", "if", "config", ".", "validate", ":", "\n", "        ", "valid_dataloader", "=", "Reader", "(", "config", ",", "'valid'", ",", "places", "=", "place", ")", "(", ")", "\n", "\n", "", "last_epoch_id", "=", "config", ".", "get", "(", "\"last_epoch\"", ",", "-", "1", ")", "\n", "best_top1_acc", "=", "0.0", "# best top1 acc record", "\n", "best_top1_epoch", "=", "last_epoch_id", "\n", "for", "epoch_id", "in", "range", "(", "last_epoch_id", "+", "1", ",", "config", ".", "epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "# 1. train with train dataset", "\n", "program", ".", "run", "(", "train_dataloader", ",", "config", ",", "net", ",", "optimizer", ",", "lr_scheduler", ",", "\n", "epoch_id", ",", "'train'", ")", "\n", "\n", "# 2. validate with validate dataset", "\n", "if", "config", ".", "validate", "and", "epoch_id", "%", "config", ".", "valid_interval", "==", "0", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n", "                ", "top1_acc", "=", "program", ".", "run", "(", "valid_dataloader", ",", "config", ",", "net", ",", "None", ",", "\n", "None", ",", "epoch_id", ",", "'valid'", ")", "\n", "", "if", "top1_acc", ">", "best_top1_acc", ":", "\n", "                ", "best_top1_acc", "=", "top1_acc", "\n", "best_top1_epoch", "=", "epoch_id", "\n", "if", "epoch_id", "%", "config", ".", "save_interval", "==", "0", ":", "\n", "                    ", "model_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_save_dir", ",", "\n", "config", ".", "ARCHITECTURE", "[", "\"name\"", "]", ")", "\n", "save_model", "(", "net", ",", "optimizer", ",", "model_path", ",", "\"best_model\"", ")", "\n", "", "", "message", "=", "\"The best top1 acc {:.5f}, in epoch: {:d}\"", ".", "format", "(", "\n", "best_top1_acc", ",", "best_top1_epoch", ")", "\n", "logger", ".", "info", "(", "\"{:s}\"", ".", "format", "(", "logger", ".", "coloring", "(", "message", ",", "\"RED\"", ")", ")", ")", "\n", "\n", "# 3. save the persistable model", "\n", "", "if", "epoch_id", "%", "config", ".", "save_interval", "==", "0", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_save_dir", ",", "\n", "config", ".", "ARCHITECTURE", "[", "\"name\"", "]", ")", "\n", "save_model", "(", "net", ",", "optimizer", ",", "model_path", ",", "epoch_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.AttrDict.__getattr__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.AttrDict.__setattr__": [[28, 33], ["None"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.create_attr_dict": [[35, 49], ["yaml_config.items", "isinstance", "isinstance", "type", "config.AttrDict", "config.create_attr_dict", "literal_eval"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.create_attr_dict"], ["", "", "", "def", "create_attr_dict", "(", "yaml_config", ")", ":", "\n", "    ", "from", "ast", "import", "literal_eval", "\n", "for", "key", ",", "value", "in", "yaml_config", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "value", ")", "is", "dict", ":", "\n", "            ", "yaml_config", "[", "key", "]", "=", "value", "=", "AttrDict", "(", "value", ")", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "pass", "\n", "", "", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "            ", "create_attr_dict", "(", "yaml_config", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "            ", "yaml_config", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.parse_config": [[51, 57], ["config.create_attr_dict", "open", "config.AttrDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.create_attr_dict"], ["", "", "", "def", "parse_config", "(", "cfg_file", ")", ":", "\n", "    ", "\"\"\"Load a config file into AttrDict\"\"\"", "\n", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "fopen", ":", "\n", "        ", "yaml_config", "=", "AttrDict", "(", "yaml", ".", "load", "(", "fopen", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", ")", "\n", "", "create_attr_dict", "(", "yaml_config", ")", "\n", "return", "yaml_config", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_dict": [[59, 82], ["sorted", "d.items", "isinstance", "k.isupper", "ppcls.utils.logger.info", "config.print_dict", "ppcls.utils.logger.info", "isinstance", "isinstance", "ppcls.utils.logger.info", "ppcls.utils.logger.info", "ppcls.utils.logger.coloring", "len", "config.print_dict", "ppcls.utils.logger.coloring", "ppcls.utils.logger.coloring", "ppcls.utils.logger.coloring", "str"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_dict", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_dict", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "def", "print_dict", "(", "d", ",", "delimiter", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Recursively visualize a dict and\n    indenting acrrording by the relationship of keys.\n    \"\"\"", "\n", "placeholder", "=", "\"-\"", "*", "60", "\n", "for", "k", ",", "v", "in", "sorted", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : \"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "k", ",", "\"HEADER\"", ")", ")", ")", "\n", "print_dict", "(", "v", ",", "delimiter", "+", "4", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">=", "1", "and", "isinstance", "(", "v", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : \"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "str", "(", "k", ")", ",", "\"HEADER\"", ")", ")", ")", "\n", "for", "value", "in", "v", ":", "\n", "                ", "print_dict", "(", "value", ",", "delimiter", "+", "4", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : {}\"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "k", ",", "\"HEADER\"", ")", ",", "\n", "logger", ".", "coloring", "(", "v", ",", "\"OKGREEN\"", ")", ")", ")", "\n", "\n", "", "if", "k", ".", "isupper", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "placeholder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_config": [[84, 93], ["ppcls.utils.logger.advertise", "config.print_dict"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.advertise", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_dict"], ["", "", "", "def", "print_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    visualize configs\n\n    Arguments:\n        config: configs\n    \"\"\"", "\n", "logger", ".", "advertise", "(", ")", "\n", "print_dict", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.check_config": [[95, 118], ["ppcls.utils.check.check_version", "config.get", "config.get", "ppcls.utils.check.check_architecture", "config.get", "ppcls.utils.check.check_mix", "config.get", "ppcls.utils.check.check_classes_num", "config.get", "ppcls.utils.check.check_gpu", "config.get.lower", "ppcls.utils.check.check_function_params", "ppcls.utils.check.check_function_params"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_version", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_architecture", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_mix", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_classes_num", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_gpu", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_function_params", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_function_params"], ["", "def", "check_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Check config\n    \"\"\"", "\n", "check", ".", "check_version", "(", ")", "\n", "\n", "use_gpu", "=", "config", ".", "get", "(", "'use_gpu'", ",", "True", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "check", ".", "check_gpu", "(", ")", "\n", "\n", "", "architecture", "=", "config", ".", "get", "(", "'ARCHITECTURE'", ")", "\n", "check", ".", "check_architecture", "(", "architecture", ")", "\n", "\n", "use_mix", "=", "config", ".", "get", "(", "'use_mix'", ",", "False", ")", "\n", "check", ".", "check_mix", "(", "architecture", ",", "use_mix", ")", "\n", "\n", "classes_num", "=", "config", ".", "get", "(", "'classes_num'", ")", "\n", "check", ".", "check_classes_num", "(", "classes_num", ")", "\n", "\n", "mode", "=", "config", ".", "get", "(", "'mode'", ",", "'train'", ")", "\n", "if", "mode", ".", "lower", "(", ")", "==", "'train'", ":", "\n", "        ", "check", ".", "check_function_params", "(", "config", ",", "'LEARNING_RATE'", ")", "\n", "check", ".", "check_function_params", "(", "config", ",", "'OPTIMIZER'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.override": [[120, 153], ["isinstance", "isinstance", "len", "config.override.str2num"], "function", ["None"], ["", "", "def", "override", "(", "dl", ",", "ks", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Recursively replace dict of list\n\n    Args:\n        dl(dict or list): dict or list to be replaced\n        ks(list): list of keys\n        v(str): value to be replaced\n    \"\"\"", "\n", "\n", "def", "str2num", "(", "v", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "eval", "(", "v", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "v", "\n", "\n", "", "", "assert", "isinstance", "(", "dl", ",", "(", "list", ",", "dict", ")", ")", ",", "(", "\"{} should be a list or a dict\"", ")", "\n", "assert", "len", "(", "ks", ")", ">", "0", ",", "(", "'lenght of keys should larger than 0'", ")", "\n", "if", "isinstance", "(", "dl", ",", "list", ")", ":", "\n", "        ", "k", "=", "str2num", "(", "ks", "[", "0", "]", ")", "\n", "if", "len", "(", "ks", ")", "==", "1", ":", "\n", "            ", "assert", "k", "<", "len", "(", "dl", ")", ",", "(", "'index({}) out of range({})'", ".", "format", "(", "k", ",", "dl", ")", ")", "\n", "dl", "[", "k", "]", "=", "str2num", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "override", "(", "dl", "[", "k", "]", ",", "ks", "[", "1", ":", "]", ",", "v", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "ks", ")", "==", "1", ":", "\n", "# assert ks[0] in dl, ('{} is not exist in {}'.format(ks[0], dl))", "\n", "            ", "if", "not", "ks", "[", "0", "]", "in", "dl", ":", "\n", "                ", "logger", ".", "warning", "(", "'A new filed ({}) detected!'", ".", "format", "(", "ks", "[", "0", "]", ",", "dl", ")", ")", "\n", "", "dl", "[", "ks", "[", "0", "]", "]", "=", "str2num", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "override", "(", "dl", "[", "ks", "[", "0", "]", "]", ",", "ks", "[", "1", ":", "]", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.override_config": [[155, 184], ["isinstance", "opt.split", "key.split", "config.override", "len"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.override"], ["", "", "", "def", "override_config", "(", "config", ",", "options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Recursively override the config\n\n    Args:\n        config(dict): dict to be replaced\n        options(list): list of pairs(key0.key1.idx.key2=value)\n            such as: [\n                'topk=2',\n                'VALID.transforms.1.ResizeImage.resize_short=300'\n            ]\n\n    Returns:\n        config(dict): replaced config\n    \"\"\"", "\n", "if", "options", "is", "not", "None", ":", "\n", "        ", "for", "opt", "in", "options", ":", "\n", "            ", "assert", "isinstance", "(", "opt", ",", "str", ")", ",", "(", "\n", "\"option({}) should be a str\"", ".", "format", "(", "opt", ")", ")", "\n", "assert", "\"=\"", "in", "opt", ",", "(", "\n", "\"option({}) should contain a =\"", "\n", "\"to distinguish between key and value\"", ".", "format", "(", "opt", ")", ")", "\n", "pair", "=", "opt", ".", "split", "(", "'='", ")", "\n", "assert", "len", "(", "pair", ")", "==", "2", ",", "(", "\"there can be only a = in the option\"", ")", "\n", "key", ",", "value", "=", "pair", "\n", "keys", "=", "key", ".", "split", "(", "'.'", ")", "\n", "override", "(", "config", ",", "keys", ",", "value", ")", "\n", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.get_config": [[186, 198], ["os.path.exists", "config.parse_config", "config.override_config", "config.check_config", "config.print_config"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.parse_config", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.override_config", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.check_config", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.config.print_config"], ["", "def", "get_config", "(", "fname", ",", "overrides", "=", "None", ",", "show", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Read config from file\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "(", "\n", "'config file({}) is not exist'", ".", "format", "(", "fname", ")", ")", "\n", "config", "=", "parse_config", "(", "fname", ")", "\n", "override_config", "(", "config", ",", "overrides", ")", "\n", "if", "show", ":", "\n", "        ", "print_config", "(", "config", ")", "\n", "", "check_config", "(", "config", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load._mkdir_if_not_exist": [[33, 47], ["os.path.exists", "os.makedirs", "os.path.isdir", "ppcls.utils.logger.warning", "OSError"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.warning"], ["def", "_mkdir_if_not_exist", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    mkdir if not exists, ignore the exception when multiprocess mkdir together\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "'be happy if some process has already created {}'", ".", "format", "(", "\n", "path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "OSError", "(", "'Failed to mkdir {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_dygraph_pretrain": [[49, 71], ["paddle.load", "model.set_dict", "ValueError", "paddle.static.load_program_state", "model.state_dict", "model.state_dict.keys", "model.set_dict", "os.path.isdir", "os.path.exists", "paddle.static.load_program_state.keys", "ppcls.utils.logger.info"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info"], ["", "", "", "", "def", "load_dygraph_pretrain", "(", "model", ",", "path", "=", "None", ",", "load_static_weights", "=", "False", ")", ":", "\n", "    ", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "path", ")", "or", "os", ".", "path", ".", "exists", "(", "path", "+", "'.pdparams'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model pretrain path {} does not \"", "\n", "\"exists.\"", ".", "format", "(", "path", ")", ")", "\n", "", "if", "load_static_weights", ":", "\n", "        ", "pre_state_dict", "=", "load_program_state", "(", "path", ")", "\n", "param_state_dict", "=", "{", "}", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "            ", "weight_name", "=", "model_dict", "[", "key", "]", ".", "name", "\n", "if", "weight_name", "in", "pre_state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'Load weight: {}, shape: {}'", ".", "format", "(", "\n", "weight_name", ",", "pre_state_dict", "[", "weight_name", "]", ".", "shape", ")", ")", "\n", "param_state_dict", "[", "key", "]", "=", "pre_state_dict", "[", "weight_name", "]", "\n", "", "else", ":", "\n", "                ", "param_state_dict", "[", "key", "]", "=", "model_dict", "[", "key", "]", "\n", "", "", "model", ".", "set_dict", "(", "param_state_dict", ")", "\n", "return", "\n", "\n", "", "param_state_dict", "=", "paddle", ".", "load", "(", "path", "+", "\".pdparams\"", ")", "\n", "model", ".", "set_dict", "(", "param_state_dict", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_distillation_model": [[73, 101], ["ppcls.utils.logger.info", "save_load.load_dygraph_pretrain", "ppcls.utils.logger.info", "save_load.load_dygraph_pretrain", "ppcls.utils.logger.info", "len", "len", "len", "len", "hasattr", "hasattr", "ppcls.utils.logger.coloring", "ppcls.utils.logger.coloring"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_dygraph_pretrain", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_dygraph_pretrain", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "def", "load_distillation_model", "(", "model", ",", "pretrained_model", ",", "load_static_weights", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"In distillation mode, teacher model will be \"", "\n", "\"loaded firstly before student model.\"", ")", "\n", "assert", "len", "(", "pretrained_model", "\n", ")", "==", "2", ",", "\"pretrained_model length should be 2 but got {}\"", ".", "format", "(", "\n", "len", "(", "pretrained_model", ")", ")", "\n", "assert", "len", "(", "\n", "load_static_weights", "\n", ")", "==", "2", ",", "\"load_static_weights length should be 2 but got {}\"", ".", "format", "(", "\n", "len", "(", "load_static_weights", ")", ")", "\n", "teacher", "=", "model", ".", "teacher", "if", "hasattr", "(", "model", ",", "\n", "\"teacher\"", ")", "else", "model", ".", "_layers", ".", "teacher", "\n", "student", "=", "model", ".", "student", "if", "hasattr", "(", "model", ",", "\n", "\"student\"", ")", "else", "model", ".", "_layers", ".", "student", "\n", "load_dygraph_pretrain", "(", "\n", "teacher", ",", "\n", "path", "=", "pretrained_model", "[", "0", "]", ",", "\n", "load_static_weights", "=", "load_static_weights", "[", "0", "]", ")", "\n", "logger", ".", "info", "(", "\n", "logger", ".", "coloring", "(", "\"Finish initing teacher model from {}\"", ".", "format", "(", "\n", "pretrained_model", ")", ",", "\"HEADER\"", ")", ")", "\n", "load_dygraph_pretrain", "(", "\n", "student", ",", "\n", "path", "=", "pretrained_model", "[", "1", "]", ",", "\n", "load_static_weights", "=", "load_static_weights", "[", "1", "]", ")", "\n", "logger", ".", "info", "(", "\n", "logger", ".", "coloring", "(", "\"Finish initing student model from {}\"", ".", "format", "(", "\n", "pretrained_model", ")", ",", "\"HEADER\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.init_model": [[103, 140], ["config.get", "config.get", "config.get", "config.get", "os.path.exists", "os.path.exists", "paddle.load", "paddle.load", "net.set_dict", "optimizer.set_state_dict", "ppcls.utils.logger.info", "isinstance", "ppcls.utils.logger.coloring", "save_load.load_distillation_model", "save_load.load_dygraph_pretrain", "ppcls.utils.logger.info", "isinstance", "ppcls.utils.logger.coloring", "len"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_distillation_model", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.load_dygraph_pretrain", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "def", "init_model", "(", "config", ",", "net", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    load model from checkpoint or pretrained_model\n    \"\"\"", "\n", "checkpoints", "=", "config", ".", "get", "(", "'checkpoints'", ")", "\n", "if", "checkpoints", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "checkpoints", "+", "\".pdparams\"", ")", ",", "\"Given dir {}.pdparams not exist.\"", ".", "format", "(", "checkpoints", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "checkpoints", "+", "\".pdopt\"", ")", ",", "\"Given dir {}.pdopt not exist.\"", ".", "format", "(", "checkpoints", ")", "\n", "para_dict", "=", "paddle", ".", "load", "(", "checkpoints", "+", "\".pdparams\"", ")", "\n", "opti_dict", "=", "paddle", ".", "load", "(", "checkpoints", "+", "\".pdopt\"", ")", "\n", "net", ".", "set_dict", "(", "para_dict", ")", "\n", "optimizer", ".", "set_state_dict", "(", "opti_dict", ")", "\n", "logger", ".", "info", "(", "\n", "logger", ".", "coloring", "(", "\"Finish initing model from {}\"", ".", "format", "(", "checkpoints", ")", ",", "\n", "\"HEADER\"", ")", ")", "\n", "return", "\n", "\n", "", "pretrained_model", "=", "config", ".", "get", "(", "'pretrained_model'", ")", "\n", "load_static_weights", "=", "config", ".", "get", "(", "'load_static_weights'", ",", "False", ")", "\n", "use_distillation", "=", "config", ".", "get", "(", "'use_distillation'", ",", "False", ")", "\n", "if", "pretrained_model", ":", "\n", "        ", "if", "isinstance", "(", "pretrained_model", ",", "\n", "list", ")", ":", "# load distillation pretrained model", "\n", "            ", "if", "not", "isinstance", "(", "load_static_weights", ",", "list", ")", ":", "\n", "                ", "load_static_weights", "=", "[", "load_static_weights", "]", "*", "len", "(", "\n", "pretrained_model", ")", "\n", "", "load_distillation_model", "(", "net", ",", "pretrained_model", ",", "load_static_weights", ")", "\n", "", "else", ":", "# common load", "\n", "            ", "load_dygraph_pretrain", "(", "\n", "net", ",", "\n", "path", "=", "pretrained_model", ",", "\n", "load_static_weights", "=", "load_static_weights", ")", "\n", "logger", ".", "info", "(", "\n", "logger", ".", "coloring", "(", "\"Finish initing model from {}\"", ".", "format", "(", "\n", "pretrained_model", ")", ",", "\"HEADER\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load.save_model": [[142, 157], ["os.path.join", "save_load._mkdir_if_not_exist", "os.path.join", "paddle.save", "paddle.save", "ppcls.utils.logger.info", "paddle.distributed.get_rank", "str", "net.state_dict", "optimizer.state_dict", "ppcls.utils.logger.coloring"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.save_load._mkdir_if_not_exist", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "", "", "def", "save_model", "(", "net", ",", "optimizer", ",", "model_path", ",", "epoch_id", ",", "prefix", "=", "'ppcls'", ")", ":", "\n", "    ", "\"\"\"\n    save model to the target path\n    \"\"\"", "\n", "if", "paddle", ".", "distributed", ".", "get_rank", "(", ")", "!=", "0", ":", "\n", "        ", "return", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "str", "(", "epoch_id", ")", ")", "\n", "_mkdir_if_not_exist", "(", "model_path", ")", "\n", "model_prefix", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "prefix", ")", "\n", "\n", "paddle", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "model_prefix", "+", "\".pdparams\"", ")", "\n", "paddle", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "model_prefix", "+", "\".pdopt\"", ")", "\n", "logger", ".", "info", "(", "\n", "logger", ".", "coloring", "(", "\"Already save model in {}\"", ".", "format", "(", "model_path", ")", ",", "\n", "\"HEADER\"", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.time_zone": [[25, 28], ["datetime.datetime.now", "datetime.datetime.now.timetuple"], "function", ["None"], ["def", "time_zone", "(", "sec", ",", "fmt", ")", ":", "\n", "    ", "real_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "return", "real_time", ".", "timetuple", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring": [[45, 51], ["os.environ.get", "Color.keys", "str"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get"], ["def", "coloring", "(", "message", ",", "color", "=", "\"OKGREEN\"", ")", ":", "\n", "    ", "assert", "color", "in", "Color", ".", "keys", "(", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "'PADDLECLAS_COLORING'", ",", "False", ")", ":", "\n", "        ", "return", "Color", "[", "color", "]", "+", "str", "(", "message", ")", "+", "Color", "[", "\"ENDC\"", "]", "\n", "", "else", ":", "\n", "        ", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.anti_fleet": [[53, 64], ["int", "log", "os.getenv"], "function", ["None"], ["", "", "def", "anti_fleet", "(", "log", ")", ":", "\n", "    ", "\"\"\"\n    logs will print multi-times when calling Fleet API.\n    Only display single log and ignore the others.\n    \"\"\"", "\n", "\n", "def", "wrapper", "(", "fmt", ",", "*", "args", ")", ":", "\n", "        ", "if", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINER_ID\"", ",", "0", ")", ")", "==", "0", ":", "\n", "            ", "log", "(", "fmt", ",", "*", "args", ")", "\n", "\n", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info": [[66, 69], ["_logger.info"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info"], ["", "@", "anti_fleet", "\n", "def", "info", "(", "fmt", ",", "*", "args", ")", ":", "\n", "    ", "_logger", ".", "info", "(", "fmt", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.warning": [[71, 74], ["_logger.warning", "logger.coloring"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.warning", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "@", "anti_fleet", "\n", "def", "warning", "(", "fmt", ",", "*", "args", ")", ":", "\n", "    ", "_logger", ".", "warning", "(", "coloring", "(", "fmt", ",", "\"RED\"", ")", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error": [[76, 79], ["_logger.error", "logger.coloring"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "@", "anti_fleet", "\n", "def", "error", "(", "fmt", ",", "*", "args", ")", ":", "\n", "    ", "_logger", ".", "error", "(", "coloring", "(", "fmt", ",", "\"FAIL\"", ")", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.scaler": [[81, 90], ["writer.add_scalar"], "function", ["None"], ["", "def", "scaler", "(", "name", ",", "value", ",", "step", ",", "writer", ")", ":", "\n", "    ", "\"\"\"\n    This function will draw a scalar curve generated by the visualdl.\n    Usage: Install visualdl: pip3 install visualdl==2.0.0b4\n           and then:\n           visualdl --logdir ./scalar --host 0.0.0.0 --port 8830 \n           to preview loss corve in real time.\n    \"\"\"", "\n", "writer", ".", "add_scalar", "(", "name", ",", "value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.advertise": [[92, 121], ["logger.info", "len", "logger.coloring", "max", "copyright.center", "ad.center", "website.center"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.coloring"], ["", "def", "advertise", "(", ")", ":", "\n", "    ", "\"\"\"\n    Show the advertising message like the following:\n\n    ===========================================================\n    ==        PaddleClas is powered by PaddlePaddle !        ==\n    ===========================================================\n    ==                                                       ==\n    ==   For more info please go to the following website.   ==\n    ==                                                       ==\n    ==       https://github.com/PaddlePaddle/PaddleClas      ==\n    ===========================================================\n\n    \"\"\"", "\n", "copyright", "=", "\"PaddleClas is powered by PaddlePaddle !\"", "\n", "ad", "=", "\"For more info please go to the following website.\"", "\n", "website", "=", "\"https://github.com/PaddlePaddle/PaddleClas\"", "\n", "AD_LEN", "=", "6", "+", "len", "(", "max", "(", "[", "copyright", ",", "ad", ",", "website", "]", ",", "key", "=", "len", ")", ")", "\n", "\n", "info", "(", "\n", "coloring", "(", "\"\\n{0}\\n{1}\\n{2}\\n{3}\\n{4}\\n{5}\\n{6}\\n{7}\\n\"", ".", "format", "(", "\n", "\"=\"", "*", "(", "AD_LEN", "+", "4", ")", ",", "\n", "\"=={}==\"", ".", "format", "(", "copyright", ".", "center", "(", "AD_LEN", ")", ")", ",", "\n", "\"=\"", "*", "(", "AD_LEN", "+", "4", ")", ",", "\n", "\"=={}==\"", ".", "format", "(", "' '", "*", "AD_LEN", ")", ",", "\n", "\"=={}==\"", ".", "format", "(", "ad", ".", "center", "(", "AD_LEN", ")", ")", ",", "\n", "\"=={}==\"", ".", "format", "(", "' '", "*", "AD_LEN", ")", ",", "\n", "\"=={}==\"", ".", "format", "(", "website", ".", "center", "(", "AD_LEN", ")", ")", ",", "\n", "\"=\"", "*", "(", "AD_LEN", "+", "4", ")", ",", ")", ",", "\"RED\"", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_": [[35, 41], ["paddle.no_grad", "paddle.no_grad", "tensor.set_value", "paddle.uniform", "paddle.uniform"], "function", ["None"], ["def", "_no_grad_uniform_", "(", "tensor", ",", "a", ",", "b", ")", ":", "\n", "    ", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n", "        ", "tensor", ".", "set_value", "(", "\n", "paddle", ".", "uniform", "(", "\n", "shape", "=", "tensor", ".", "shape", ",", "dtype", "=", "tensor", ".", "dtype", ",", "min", "=", "a", ",", "max", "=", "b", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_normal_": [[43, 47], ["paddle.no_grad", "paddle.no_grad", "tensor.set_value", "paddle.normal", "paddle.normal"], "function", ["None"], ["", "def", "_no_grad_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ")", ":", "\n", "    ", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n", "        ", "tensor", ".", "set_value", "(", "paddle", ".", "normal", "(", "mean", "=", "mean", ",", "std", "=", "std", ",", "shape", "=", "tensor", ".", "shape", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_": [[49, 55], ["paddle.no_grad", "paddle.no_grad", "paddle.rand", "paddle.rand", "tensor.set_value"], "function", ["None"], ["", "def", "_no_grad_fill_", "(", "tensor", ",", "value", "=", "0", ")", ":", "\n", "    ", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n", "        ", "v", "=", "paddle", ".", "rand", "(", "shape", "=", "tensor", ".", "shape", ",", "dtype", "=", "tensor", ".", "dtype", ")", "\n", "v", "[", "...", "]", "=", "value", "\n", "tensor", ".", "set_value", "(", "v", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.uniform_": [[57, 68], ["initializer._no_grad_uniform_"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_"], ["", "def", "uniform_", "(", "tensor", ",", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using uniform_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        a (float|int): min value.\n        b (float|int): max value.\n    Return:\n        tensor\n    \"\"\"", "\n", "return", "_no_grad_uniform_", "(", "tensor", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_": [[70, 81], ["initializer._no_grad_normal_"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_normal_"], ["", "def", "normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using normal_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        mean (float|int): mean value.\n        std (float|int): std value.\n    Return:\n        tensor\n    \"\"\"", "\n", "return", "_no_grad_normal_", "(", "tensor", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_": [[83, 93], ["initializer._no_grad_fill_"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_"], ["", "def", "constant_", "(", "tensor", ",", "value", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using constant_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        value (float|int): value to fill tensor.\n    Return:\n        tensor\n    \"\"\"", "\n", "return", "_no_grad_fill_", "(", "tensor", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.ones_": [[95, 104], ["initializer._no_grad_fill_"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_"], ["", "def", "ones_", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using ones_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n    Return:\n        tensor\n    \"\"\"", "\n", "return", "_no_grad_fill_", "(", "tensor", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.zeros_": [[106, 115], ["initializer._no_grad_fill_"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_"], ["", "def", "zeros_", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using zeros_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n    Return:\n        tensor\n    \"\"\"", "\n", "return", "_no_grad_fill_", "(", "tensor", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_fan_in_and_fan_out": [[117, 146], ["ValueError", "numpy.prod"], "function", ["None"], ["", "def", "_calculate_fan_in_and_fan_out", "(", "tensor", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculate (fan_in, _fan_out) for tensor\n\n    Args:\n        tensor (Tensor): paddle.Tensor\n        reverse (bool: False): tensor data format order, False by default as [fout, fin, ...]. e.g. : conv.weight [cout, cin, kh, kw] is False; linear.weight [cin, cout] is True\n\n    Return:\n        Tuple[fan_in, fan_out]\n    \"\"\"", "\n", "if", "tensor", ".", "ndim", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Fan in and fan out can not be computed for tensor with fewer than 2 dimensions\"", "\n", ")", "\n", "\n", "", "if", "reverse", ":", "\n", "        ", "num_input_fmaps", ",", "num_output_fmaps", "=", "tensor", ".", "shape", "[", "0", "]", ",", "tensor", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "num_input_fmaps", ",", "num_output_fmaps", "=", "tensor", ".", "shape", "[", "1", "]", ",", "tensor", ".", "shape", "[", "0", "]", "\n", "\n", "", "receptive_field_size", "=", "1", "\n", "if", "tensor", ".", "ndim", ">", "2", ":", "\n", "        ", "receptive_field_size", "=", "np", ".", "prod", "(", "tensor", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "fan_in", "=", "num_input_fmaps", "*", "receptive_field_size", "\n", "fan_out", "=", "num_output_fmaps", "*", "receptive_field_size", "\n", "\n", "return", "fan_in", ",", "fan_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.xavier_uniform_": [[148, 162], ["initializer._calculate_fan_in_and_fan_out", "initializer._no_grad_uniform_", "math.sqrt", "math.sqrt", "float"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_fan_in_and_fan_out", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_"], ["", "def", "xavier_uniform_", "(", "tensor", ",", "gain", "=", "1.", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using xavier_uniform_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        gain (str): super parameter, 1. default.\n        reverse (bool):  reverse (bool: False): tensor data format order, False by default as [fout, fin, ...].\n    Return:\n        tensor\n    \"\"\"", "\n", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ",", "reverse", "=", "reverse", ")", "\n", "std", "=", "gain", "*", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "k", "=", "math", ".", "sqrt", "(", "3.0", ")", "*", "std", "\n", "return", "_no_grad_uniform_", "(", "tensor", ",", "-", "k", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.xavier_normal_": [[164, 177], ["initializer._calculate_fan_in_and_fan_out", "initializer._no_grad_normal_", "math.sqrt", "float"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_fan_in_and_fan_out", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_normal_"], ["", "def", "xavier_normal_", "(", "tensor", ",", "gain", "=", "1.", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using xavier_normal_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        gain (str): super parameter, 1. default.\n        reverse (bool):  reverse (bool: False): tensor data format order, False by default as [fout, fin, ...].\n    Return:\n        tensor\n    \"\"\"", "\n", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ",", "reverse", "=", "reverse", ")", "\n", "std", "=", "gain", "*", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "return", "_no_grad_normal_", "(", "tensor", ",", "0", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_correct_fan": [[180, 190], ["mode.lower.lower", "initializer._calculate_fan_in_and_fan_out", "ValueError"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_fan_in_and_fan_out"], ["", "def", "_calculate_correct_fan", "(", "tensor", ",", "mode", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "mode", "=", "mode", ".", "lower", "(", ")", "\n", "valid_modes", "=", "[", "'fan_in'", ",", "'fan_out'", "]", "\n", "if", "mode", "not", "in", "valid_modes", ":", "\n", "        ", "raise", "ValueError", "(", "\"Mode {} not supported, please use one of {}\"", ".", "format", "(", "\n", "mode", ",", "valid_modes", ")", ")", "\n", "\n", "", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ",", "reverse", ")", "\n", "\n", "return", "fan_in", "if", "mode", "==", "'fan_in'", "else", "fan_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_gain": [[192, 218], ["math.sqrt", "math.sqrt", "ValueError", "isinstance", "ValueError", "isinstance", "isinstance"], "function", ["None"], ["", "def", "_calculate_gain", "(", "nonlinearity", ",", "param", "=", "None", ")", ":", "\n", "    ", "linear_fns", "=", "[", "\n", "'linear'", ",", "'conv1d'", ",", "'conv2d'", ",", "'conv3d'", ",", "'conv_transpose1d'", ",", "\n", "'conv_transpose2d'", ",", "'conv_transpose3d'", "\n", "]", "\n", "if", "nonlinearity", "in", "linear_fns", "or", "nonlinearity", "==", "'sigmoid'", ":", "\n", "        ", "return", "1", "\n", "", "elif", "nonlinearity", "==", "'tanh'", ":", "\n", "        ", "return", "5.0", "/", "3", "\n", "", "elif", "nonlinearity", "==", "'relu'", ":", "\n", "        ", "return", "math", ".", "sqrt", "(", "2.0", ")", "\n", "", "elif", "nonlinearity", "==", "'leaky_relu'", ":", "\n", "        ", "if", "param", "is", "None", ":", "\n", "            ", "negative_slope", "=", "0.01", "\n", "", "elif", "not", "isinstance", "(", "param", ",", "bool", ")", "and", "isinstance", "(", "\n", "param", ",", "int", ")", "or", "isinstance", "(", "param", ",", "float", ")", ":", "\n", "# True/False are instances of int, hence check above", "\n", "            ", "negative_slope", "=", "param", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"negative_slope {} not a valid number\"", ".", "format", "(", "\n", "param", ")", ")", "\n", "", "return", "math", ".", "sqrt", "(", "2.0", "/", "(", "1", "+", "negative_slope", "**", "2", ")", ")", "\n", "", "elif", "nonlinearity", "==", "'selu'", ":", "\n", "        ", "return", "3.0", "/", "4", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported nonlinearity {}\"", ".", "format", "(", "nonlinearity", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_": [[220, 240], ["initializer._calculate_correct_fan", "initializer._calculate_gain", "initializer._no_grad_uniform_", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_correct_fan", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_gain", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_"], ["", "", "def", "kaiming_uniform_", "(", "tensor", ",", "\n", "a", "=", "0", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "reverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using kaiming_uniform method\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        mode (str): ['fan_in', 'fan_out'], 'fin_in' defalut\n        nonlinearity (str): nonlinearity method name\n        reverse (bool):  reverse (bool: False): tensor data format order, False by default as [fout, fin, ...].\n    Return:\n        tensor\n    \"\"\"", "\n", "fan", "=", "_calculate_correct_fan", "(", "tensor", ",", "mode", ",", "reverse", ")", "\n", "gain", "=", "_calculate_gain", "(", "nonlinearity", ",", "a", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "k", "=", "math", ".", "sqrt", "(", "3.0", ")", "*", "std", "\n", "return", "_no_grad_uniform_", "(", "tensor", ",", "-", "k", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_": [[242, 261], ["initializer._calculate_correct_fan", "initializer._calculate_gain", "initializer._no_grad_normal_", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_correct_fan", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._calculate_gain", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_normal_"], ["", "def", "kaiming_normal_", "(", "tensor", ",", "\n", "a", "=", "0", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "reverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Modified tensor inspace using kaiming_normal_\n    Args:\n        tensor (paddle.Tensor): paddle Tensor\n        mode (str): ['fan_in', 'fan_out'], 'fin_in' defalut\n        nonlinearity (str): nonlinearity method name\n        reverse (bool):  reverse (bool: False): tensor data format order, False by default as [fout, fin, ...].\n    Return:\n        tensor\n    \"\"\"", "\n", "fan", "=", "_calculate_correct_fan", "(", "tensor", ",", "mode", ",", "reverse", ")", "\n", "gain", "=", "_calculate_gain", "(", "nonlinearity", ",", "a", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "return", "_no_grad_normal_", "(", "tensor", ",", "0", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.reset_initialized_parameter": [[263, 296], ["paddle.no_grad", "paddle.no_grad", "model.named_sublayers", "isinstance", "math.sqrt", "initializer._no_grad_uniform_", "isinstance", "float", "hasattr", "initializer._no_grad_uniform_", "math.sqrt", "initializer._no_grad_uniform_", "isinstance", "getattr", "hasattr", "initializer._no_grad_uniform_", "initializer._no_grad_normal_", "isinstance", "getattr", "initializer._no_grad_fill_", "hasattr", "initializer._no_grad_fill_", "getattr"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer._no_grad_fill_"], ["", "@", "paddle", ".", "no_grad", "(", ")", "\n", "def", "reset_initialized_parameter", "(", "model", ",", "include_self", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Reset initialized parameter using following method for [conv, linear, embedding, bn]\n\n    Args:\n        model (paddle.Layer): paddle Layer\n        include_self (bool: False): include_self for Layer.named_sublayers method. Indicate whether including itself\n    Return:\n        None\n    \"\"\"", "\n", "for", "_", ",", "m", "in", "model", ".", "named_sublayers", "(", "include_self", "=", "include_self", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2D", ")", ":", "\n", "            ", "k", "=", "float", "(", "m", ".", "_groups", ")", "/", "(", "m", ".", "_in_channels", "*", "m", ".", "_kernel_size", "[", "0", "]", "*", "\n", "m", ".", "_kernel_size", "[", "1", "]", ")", "\n", "k", "=", "math", ".", "sqrt", "(", "k", ")", "\n", "_no_grad_uniform_", "(", "m", ".", "weight", ",", "-", "k", ",", "k", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "getattr", "(", "m", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "                ", "_no_grad_uniform_", "(", "m", ".", "bias", ",", "-", "k", ",", "k", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "k", "=", "math", ".", "sqrt", "(", "1.", "/", "m", ".", "weight", ".", "shape", "[", "0", "]", ")", "\n", "_no_grad_uniform_", "(", "m", ".", "weight", ",", "-", "k", ",", "k", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "getattr", "(", "m", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "                ", "_no_grad_uniform_", "(", "m", ".", "bias", ",", "-", "k", ",", "k", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "_no_grad_normal_", "(", "m", ".", "weight", ",", "mean", "=", "0.", ",", "std", "=", "1.", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2D", ",", "nn", ".", "LayerNorm", ")", ")", ":", "\n", "            ", "_no_grad_fill_", "(", "m", ".", "weight", ",", "1.", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "getattr", "(", "m", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "                ", "_no_grad_fill_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.UrlError.__init__": [[38, 41], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "url", "=", "''", ",", "code", "=", "''", ")", ":", "\n", "        ", "message", "=", "\"Downloading from {} failed with code {}!\"", ".", "format", "(", "url", ",", "code", ")", "\n", "super", "(", "UrlError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.ModelNameError.__init__": [[47, 49], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "message", "=", "''", ")", ":", "\n", "        ", "super", "(", "ModelNameError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.RetryError.__init__": [[55, 59], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "url", "=", "''", ",", "times", "=", "''", ")", ":", "\n", "        ", "message", "=", "\"Download from {} failed. Retry({}) limit reached\"", ".", "format", "(", "\n", "url", ",", "times", ")", "\n", "super", "(", "RetryError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._get_url": [[61, 65], ["None"], "function", ["None"], ["", "", "def", "_get_url", "(", "architecture", ",", "postfix", "=", "\"pdparams\"", ")", ":", "\n", "    ", "prefix", "=", "\"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/\"", "\n", "fname", "=", "architecture", "+", "\"_pretrained.\"", "+", "postfix", "\n", "return", "prefix", "+", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._move_and_merge_tree": [[67, 88], ["os.path.exists", "shutil.move", "os.path.isfile", "shutil.move", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "model_zoo._move_and_merge_tree", "shutil.move", "os.path.isfile", "shutil.move", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._move_and_merge_tree"], ["", "def", "_move_and_merge_tree", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Move src directory to dst, if dst is already exists,\n    merge src to dst\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst", ")", ":", "\n", "        ", "shutil", ".", "move", "(", "src", ",", "dst", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "src", ")", ":", "\n", "        ", "shutil", ".", "move", "(", "src", ",", "dst", ")", "\n", "", "else", ":", "\n", "        ", "for", "fp", "in", "os", ".", "listdir", "(", "src", ")", ":", "\n", "            ", "src_fp", "=", "os", ".", "path", ".", "join", "(", "src", ",", "fp", ")", "\n", "dst_fp", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "fp", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "src_fp", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "dst_fp", ")", ":", "\n", "                    ", "_move_and_merge_tree", "(", "src_fp", ",", "dst_fp", ")", "\n", "", "else", ":", "\n", "                    ", "shutil", ".", "move", "(", "src_fp", ",", "dst_fp", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "src_fp", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "dst_fp", ")", ":", "\n", "                ", "shutil", ".", "move", "(", "src_fp", ",", "dst_fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._download": [[90, 134], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.split", "os.path.exists", "ppcls.utils.logger.info", "requests.get", "requests.get.headers.get", "shutil.move", "model_zoo.RetryError", "model_zoo.UrlError", "open", "tqdm.tqdm", "requests.get.iter_content", "requests.get.iter_content", "f.write", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get"], ["", "", "", "", "def", "_download", "(", "url", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n    Download from url, save to path.\n    url (str): download url\n    path (str): download to given path\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "fname", "=", "os", ".", "path", ".", "split", "(", "url", ")", "[", "-", "1", "]", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", "\n", "retry_cnt", "=", "0", "\n", "\n", "while", "not", "os", ".", "path", ".", "exists", "(", "fullname", ")", ":", "\n", "        ", "if", "retry_cnt", "<", "DOWNLOAD_RETRY_LIMIT", ":", "\n", "            ", "retry_cnt", "+=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "RetryError", "(", "url", ",", "DOWNLOAD_RETRY_LIMIT", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Downloading {} from {}\"", ".", "format", "(", "fname", ",", "url", ")", ")", "\n", "\n", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "if", "req", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "UrlError", "(", "url", ",", "req", ".", "status_code", ")", "\n", "\n", "# For protecting download interupted, download to", "\n", "# tmp_fullname firstly, move tmp_fullname to fullname", "\n", "# after download finished", "\n", "", "tmp_fullname", "=", "fullname", "+", "\"_tmp\"", "\n", "total_size", "=", "req", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "with", "open", "(", "tmp_fullname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "if", "total_size", ":", "\n", "                ", "for", "chunk", "in", "tqdm", ".", "tqdm", "(", "\n", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ",", "\n", "total", "=", "(", "int", "(", "total_size", ")", "+", "1023", ")", "//", "1024", ",", "\n", "unit", "=", "'KB'", ")", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "                    ", "if", "chunk", ":", "\n", "                        ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", "shutil", ".", "move", "(", "tmp_fullname", ",", "fullname", ")", "\n", "\n", "", "return", "fullname", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._decompress": [[136, 176], ["ppcls.utils.logger.info", "os.path.join", "os.path.isdir", "os.listdir", "os.path.join", "os.path.join", "model_zoo._move_and_merge_tree", "shutil.rmtree", "os.remove", "os.path.split", "shutil.rmtree", "os.makedirs", "fname.find", "len", "len", "tarfile.open", "tf.extractall", "fname.find", "TypeError", "zipfile.ZipFile", "zf.extractall"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._move_and_merge_tree"], ["", "def", "_decompress", "(", "fname", ")", ":", "\n", "    ", "\"\"\"\n    Decompress for zip and tar file\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Decompressing {}...\"", ".", "format", "(", "fname", ")", ")", "\n", "\n", "# For protecting decompressing interupted,", "\n", "# decompress to fpath_tmp directory firstly, if decompress", "\n", "# successed, move decompress files to fpath and delete", "\n", "# fpath_tmp and remove download compress file.", "\n", "fpath", "=", "os", ".", "path", ".", "split", "(", "fname", ")", "[", "0", "]", "\n", "fpath_tmp", "=", "os", ".", "path", ".", "join", "(", "fpath", ",", "'tmp'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "fpath_tmp", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "fpath_tmp", ")", "\n", "os", ".", "makedirs", "(", "fpath_tmp", ")", "\n", "\n", "", "if", "fname", ".", "find", "(", "'tar'", ")", ">=", "0", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "fname", ")", "as", "tf", ":", "\n", "            ", "tf", ".", "extractall", "(", "path", "=", "fpath_tmp", ")", "\n", "", "", "elif", "fname", ".", "find", "(", "'zip'", ")", ">=", "0", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "fname", ")", "as", "zf", ":", "\n", "            ", "zf", ".", "extractall", "(", "path", "=", "fpath_tmp", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupport compress file type {}\"", ".", "format", "(", "fname", ")", ")", "\n", "\n", "", "fs", "=", "os", ".", "listdir", "(", "fpath_tmp", ")", "\n", "assert", "len", "(", "\n", "fs", "\n", ")", "==", "1", ",", "\"There should just be 1 pretrained path in an archive file but got {}.\"", ".", "format", "(", "\n", "len", "(", "fs", ")", ")", "\n", "\n", "f", "=", "fs", "[", "0", "]", "\n", "src_dir", "=", "os", ".", "path", ".", "join", "(", "fpath_tmp", ",", "f", ")", "\n", "dst_dir", "=", "os", ".", "path", ".", "join", "(", "fpath", ",", "f", ")", "\n", "_move_and_merge_tree", "(", "src_dir", ",", "dst_dir", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "fpath_tmp", ")", "\n", "os", ".", "remove", "(", "fname", ")", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._get_pretrained": [[178, 182], ["open", "line.strip"], "function", ["None"], ["", "def", "_get_pretrained", "(", ")", ":", "\n", "    ", "with", "open", "(", "'./ppcls/utils/pretrained.list'", ")", "as", "flist", ":", "\n", "        ", "pretrained", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "flist", "]", "\n", "", "return", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._check_pretrained_name": [[184, 194], ["isinstance", "model_zoo._get_pretrained", "ppcls.modeling.utils.similar_architectures", "model_zoo.ModelNameError"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._get_pretrained", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.utils.similar_architectures"], ["", "def", "_check_pretrained_name", "(", "architecture", ")", ":", "\n", "    ", "assert", "isinstance", "(", "architecture", ",", "str", ")", ",", "(", "\"the type of architecture({}) should be str\"", ".", "format", "(", "architecture", ")", ")", "\n", "pretrained", "=", "_get_pretrained", "(", ")", "\n", "similar_names", "=", "similar_architectures", "(", "architecture", ",", "pretrained", ")", "\n", "model_list", "=", "', '", ".", "join", "(", "similar_names", ")", "\n", "err", "=", "\"{} is not exist! Maybe you want: [{}]\"", "\"\"", ".", "format", "(", "architecture", ",", "model_list", ")", "\n", "if", "architecture", "not", "in", "similar_names", ":", "\n", "        ", "raise", "ModelNameError", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.list_models": [[196, 202], ["model_zoo._get_pretrained", "ppcls.utils.logger.info"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._get_pretrained", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info"], ["", "", "def", "list_models", "(", ")", ":", "\n", "    ", "pretrained", "=", "_get_pretrained", "(", ")", "\n", "msg", "=", "\"All avialable pretrained models are as follows: {}\"", ".", "format", "(", "\n", "pretrained", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get": [[204, 214], ["model_zoo._check_pretrained_name", "model_zoo._get_url", "model_zoo._download", "ppcls.utils.logger.info", "model_zoo._decompress"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._check_pretrained_name", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._get_url", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._download", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo._decompress"], ["", "def", "get", "(", "architecture", ",", "path", ",", "decompress", "=", "False", ",", "postfix", "=", "\"pdparams\"", ")", ":", "\n", "    ", "\"\"\"\n    Get the pretrained model.\n    \"\"\"", "\n", "_check_pretrained_name", "(", "architecture", ")", "\n", "url", "=", "_get_url", "(", "architecture", ",", "postfix", "=", "postfix", ")", "\n", "fname", "=", "_download", "(", "url", ",", "path", ")", "\n", "if", "postfix", "==", "\"tar\"", "and", "decompress", ":", "\n", "        ", "_decompress", "(", "fname", ")", "\n", "", "logger", ".", "info", "(", "\"download {} finished \"", ".", "format", "(", "fname", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_version": [[30, 44], ["ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["def", "check_version", "(", ")", ":", "\n", "    ", "\"\"\"\n    Log error and exit when the installed version of paddlepaddle is\n    not satisfied.\n    \"\"\"", "\n", "err", "=", "\"PaddlePaddle version 1.8.0 or higher is required, \"", "\"or a suitable develop version is satisfied as well. \\n\"", "\"Please make sure the version is good with your code.\"", "\n", "try", ":", "\n", "        ", "pass", "\n", "# paddle.utils.require_version('0.0.0')", "\n", "", "except", "Exception", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_gpu": [[46, 58], ["paddle.is_compiled_with_cuda", "ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["", "", "def", "check_gpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    Log error and exit when using paddlepaddle cpu version.\n    \"\"\"", "\n", "err", "=", "\"You are using paddlepaddle cpu version! Please try to \"", "\"install paddlepaddle-gpu to run model on GPU.\"", "\n", "\n", "try", ":", "\n", "        ", "assert", "is_compiled_with_cuda", "(", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_architecture": [[60, 80], ["isinstance", "ppcls.modeling.utils.similar_architectures", "architecture.keys", "ppcls.modeling.utils.get_architectures", "ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.utils.similar_architectures", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.utils.get_architectures", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["", "", "def", "check_architecture", "(", "architecture", ")", ":", "\n", "    ", "\"\"\"\n    check architecture and recommend similar architectures\n    \"\"\"", "\n", "assert", "isinstance", "(", "architecture", ",", "dict", ")", ",", "(", "\"the type of architecture({}) should be dict\"", ".", "format", "(", "architecture", ")", ")", "\n", "assert", "\"name\"", "in", "architecture", ",", "(", "\"name must be in the architecture keys, just contains: {}\"", ".", "format", "(", "\n", "architecture", ".", "keys", "(", ")", ")", ")", "\n", "\n", "similar_names", "=", "similar_architectures", "(", "architecture", "[", "\"name\"", "]", ",", "\n", "get_architectures", "(", ")", ")", "\n", "model_list", "=", "', '", ".", "join", "(", "similar_names", ")", "\n", "err", "=", "\"Architecture [{}] is not exist! Maybe you want: [{}]\"", "\"\"", ".", "format", "(", "architecture", "[", "\"name\"", "]", ",", "model_list", ")", "\n", "try", ":", "\n", "        ", "assert", "architecture", "[", "\"name\"", "]", "in", "similar_names", "\n", "", "except", "AssertionError", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_mix": [[82, 94], ["ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["", "", "def", "check_mix", "(", "architecture", ",", "use_mix", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    check mix parameter\n    \"\"\"", "\n", "err", "=", "\"Cannot use mix processing in GoogLeNet, \"", "\"please set use_mix = False.\"", "\n", "try", ":", "\n", "        ", "if", "architecture", "[", "\"name\"", "]", "==", "\"GoogLeNet\"", ":", "\n", "            ", "assert", "use_mix", "is", "not", "True", "\n", "", "", "except", "AssertionError", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_classes_num": [[96, 108], ["isinstance", "ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["", "", "def", "check_classes_num", "(", "classes_num", ")", ":", "\n", "    ", "\"\"\"\n    check classes_num\n    \"\"\"", "\n", "err", "=", "\"classes_num({}) should be a positive integer\"", "\"and larger than 1\"", ".", "format", "(", "classes_num", ")", "\n", "try", ":", "\n", "        ", "assert", "isinstance", "(", "classes_num", ",", "int", ")", "\n", "assert", "classes_num", ">", "1", "\n", "", "except", "AssertionError", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_data_dir": [[110, 121], ["os.isdir", "ppcls.utils.logger.error", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.error"], ["", "", "def", "check_data_dir", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    check cata_dir\n    \"\"\"", "\n", "err", "=", "\"Data path is not exist, please given a right path\"", "\"\"", ".", "format", "(", "path", ")", "\n", "try", ":", "\n", "        ", "assert", "os", ".", "isdir", "(", "path", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "logger", ".", "error", "(", "err", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.check.check_function_params": [[123, 138], ["config.get", "config.get.get", "config.get.get", "isinstance"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get"], ["", "", "def", "check_function_params", "(", "config", ",", "key", ")", ":", "\n", "    ", "\"\"\"\n    check specify config\n    \"\"\"", "\n", "k_config", "=", "config", ".", "get", "(", "key", ")", "\n", "assert", "k_config", "is", "not", "None", ",", "(", "'{} is required in config'", ".", "format", "(", "key", ")", ")", "\n", "\n", "assert", "k_config", ".", "get", "(", "'function'", ")", ",", "(", "'function is required {} config'", ".", "format", "(", "key", ")", ")", "\n", "params", "=", "k_config", ".", "get", "(", "'params'", ")", "\n", "assert", "params", "is", "not", "None", ",", "(", "'params is required in {} config'", ".", "format", "(", "key", ")", ")", "\n", "assert", "isinstance", "(", "params", ",", "dict", ")", ",", "(", "'the params in {} config should be a dict'", ".", "format", "(", "key", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.__init__": [[23, 29], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", "=", "''", ",", "fmt", "=", "'f'", ",", "postfix", "=", "\"\"", ",", "need_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "postfix", "=", "postfix", "\n", "self", ".", "need_avg", "=", "need_avg", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.reset": [[30, 36], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" reset \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.update": [[37, 43], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\" update \"\"\"", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.total": [[44, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}_sum: {self.sum:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n", "self", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.total_minute": [[49, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_minute", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name} {s:{self.fmt}}{self.postfix} min'", ".", "format", "(", "\n", "s", "=", "self", ".", "sum", "/", "60", ",", "self", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean": [[54, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}: {self.avg:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n", "self", "=", "self", ")", "if", "self", ".", "need_avg", "else", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.value": [[59, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}: {self.val:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n", "self", "=", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.ABF.__init__": [[28, 54], ["paddle.nn.Layer.__init__", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.BatchNorm2D", "paddle.nn.BatchNorm2D", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.BatchNorm2D", "paddle.nn.BatchNorm2D", "paddle.nn.Sequential", "paddle.nn.Sequential", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.Sigmoid", "paddle.nn.Sigmoid", "paddle.nn.initializer.KaimingNormal", "paddle.nn.initializer.KaimingNormal", "paddle.nn.initializer.KaimingNormal", "paddle.nn.initializer.KaimingNormal"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel", ",", "fuse", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2D", "(", "\n", "in_channel", ",", "\n", "mid_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias_attr", "=", "False", ",", "\n", "weight_attr", "=", "ParamAttr", "(", "initializer", "=", "KaimingNormal", "(", ")", ")", ")", "\n", "self", ".", "conv1_bn", "=", "nn", ".", "BatchNorm2D", "(", "mid_channel", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2D", "(", "\n", "mid_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias_attr", "=", "False", ",", "\n", "weight_attr", "=", "ParamAttr", "(", "initializer", "=", "KaimingNormal", "(", ")", ")", ")", "\n", "self", ".", "conv2_bn", "=", "nn", ".", "BatchNorm2D", "(", "out_channel", ")", "\n", "if", "fuse", ":", "\n", "            ", "self", ".", "att_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "mid_channel", "*", "2", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att_conv", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.ABF.forward": [[55, 69], ["review_kd_loss.ABF.conv1", "review_kd_loss.ABF.conv2", "paddle.interpolate", "paddle.interpolate", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.concat", "review_kd_loss.ABF.att_conv", "z[].reshape", "z[].reshape"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# transform student features", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "att_conv", "is", "not", "None", ":", "\n", "# upsample residual features", "\n", "            ", "y", "=", "F", ".", "interpolate", "(", "y", ",", "(", "shape", ",", "shape", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "# fusion", "\n", "z", "=", "paddle", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "z", "=", "self", ".", "att_conv", "(", "z", ")", "\n", "x", "=", "(", "x", "*", "z", "[", ":", ",", "0", "]", ".", "reshape", "(", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", "+", "y", "*", "z", "[", ":", ",", "1", "]", ".", "reshape", "(", "\n", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", ")", "\n", "", "y", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.ReviewKDLoss.__init__": [[72, 93], ["paddle.nn.Layer.__init__", "paddle.nn.LayerList", "paddle.nn.LayerList", "enumerate", "review_kd_loss.HCL", "paddle.nn.LayerList.append", "review_kd_loss.ABF", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "mid_channel", ",", "\n", "shapes", "=", "[", "1", ",", "7", ",", "14", ",", "28", ",", "56", "]", ",", "\n", "hcl_mode", "=", "\"avg\"", ",", "\n", "name", "=", "\"loss_review_kd\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shapes", "=", "shapes", "\n", "self", ".", "name", "=", "name", "\n", "\n", "abfs", "=", "nn", ".", "LayerList", "(", ")", "\n", "\n", "for", "idx", ",", "in_channel", "in", "enumerate", "(", "in_channels", ")", ":", "\n", "            ", "abfs", ".", "append", "(", "\n", "ABF", "(", "in_channel", ",", "mid_channel", ",", "out_channels", "[", "idx", "]", ",", "idx", "<", "len", "(", "\n", "in_channels", ")", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "abfs", "=", "abfs", "[", ":", ":", "-", "1", "]", "\n", "\n", "self", ".", "hcl", "=", "HCL", "(", "mode", "=", "hcl_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.ReviewKDLoss.forward": [[94, 114], ["results.append", "range", "dict", "review_kd_loss.ReviewKDLoss.hcl", "len", "abf", "results.insert"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.hcl"], ["", "def", "forward", "(", "self", ",", "student_features", ",", "teacher_features", ")", ":", "\n", "        ", "'''\n        student_features: list of tensor, low-level -> high-level\n        student_logit: tensor, N x class_num\n        '''", "\n", "# merge students' feature", "\n", "# x is from high-level to low-level", "\n", "x", "=", "student_features", "[", ":", ":", "-", "1", "]", "\n", "results", "=", "[", "]", "\n", "out_features", ",", "res_features", "=", "self", ".", "abfs", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "out_features", ")", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "x", ")", ")", ":", "\n", "            ", "features", ",", "abf", ",", "shape", "=", "x", "[", "idx", "]", ",", "self", ".", "abfs", "[", "idx", "]", ",", "self", ".", "shapes", "[", "idx", "]", "\n", "out_features", ",", "res_features", "=", "abf", "(", "features", ",", "res_features", ",", "shape", ")", "\n", "results", ".", "insert", "(", "0", ",", "out_features", ")", "\n", "\n", "", "loss_dict", "=", "dict", "(", ")", "\n", "loss_dict", "[", "self", ".", "name", "]", "=", "self", ".", "hcl", "(", "results", ",", "teacher_features", ")", "\n", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.HCL.__init__": [[117, 121], ["paddle.nn.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"avg\"", ")", ":", "\n", "        ", "super", "(", "HCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mode", "in", "[", "\"max\"", ",", "\"avg\"", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.review_kd_loss.HCL.forward": [[122, 145], ["zip", "paddle.mse_loss", "paddle.mse_loss", "paddle.adaptive_max_pool2d", "paddle.adaptive_max_pool2d", "paddle.adaptive_max_pool2d", "paddle.adaptive_max_pool2d", "paddle.adaptive_avg_pool2d", "paddle.adaptive_avg_pool2d", "paddle.adaptive_avg_pool2d", "paddle.adaptive_avg_pool2d", "paddle.mse_loss", "paddle.mse_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fstudent", ",", "fteacher", ")", ":", "\n", "        ", "loss_all", "=", "0.0", "\n", "for", "fs", ",", "ft", "in", "zip", "(", "fstudent", ",", "fteacher", ")", ":", "\n", "            ", "h", "=", "fs", ".", "shape", "[", "2", "]", "\n", "loss", "=", "F", ".", "mse_loss", "(", "fs", ",", "ft", ")", "\n", "cnt", "=", "1.0", "\n", "tot", "=", "1.0", "\n", "for", "l", "in", "[", "4", ",", "2", ",", "1", "]", ":", "\n", "                ", "if", "l", ">=", "h", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "mode", "==", "\"max\"", ":", "\n", "                    ", "tmpfs", "=", "F", ".", "adaptive_max_pool2d", "(", "fs", ",", "(", "l", ",", "l", ")", ")", "\n", "tmpft", "=", "F", ".", "adaptive_max_pool2d", "(", "ft", ",", "(", "l", ",", "l", ")", ")", "\n", "", "else", ":", "\n", "                    ", "tmpfs", "=", "F", ".", "adaptive_avg_pool2d", "(", "fs", ",", "(", "l", ",", "l", ")", ")", "\n", "tmpft", "=", "F", ".", "adaptive_avg_pool2d", "(", "ft", ",", "(", "l", ",", "l", ")", ")", "\n", "\n", "", "cnt", "/=", "2.0", "\n", "loss", "+=", "F", ".", "mse_loss", "(", "tmpfs", ",", "tmpft", ")", "*", "cnt", "\n", "tot", "+=", "cnt", "\n", "", "loss", "=", "loss", "/", "tot", "\n", "loss_all", "=", "loss_all", "+", "loss", "\n", "", "return", "loss_all", "", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.CELoss.__init__": [[24, 30], ["paddle.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"loss_ce\"", ",", "epsilon", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "epsilon", "is", "not", "None", "and", "(", "epsilon", "<=", "0", "or", "epsilon", ">=", "1", ")", ":", "\n", "            ", "epsilon", "=", "None", "\n", "", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.CELoss._labelsmoothing": [[31, 39], ["paddle.label_smooth", "paddle.label_smooth", "paddle.label_smooth", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.one_hot", "paddle.one_hot", "paddle.one_hot"], "methods", ["None"], ["", "def", "_labelsmoothing", "(", "self", ",", "target", ",", "class_num", ")", ":", "\n", "        ", "if", "target", ".", "shape", "[", "-", "1", "]", "!=", "class_num", ":", "\n", "            ", "one_hot_target", "=", "F", ".", "one_hot", "(", "target", ",", "class_num", ")", "\n", "", "else", ":", "\n", "            ", "one_hot_target", "=", "target", "\n", "", "soft_target", "=", "F", ".", "label_smooth", "(", "one_hot_target", ",", "epsilon", "=", "self", ".", "epsilon", ")", "\n", "soft_target", "=", "paddle", ".", "reshape", "(", "soft_target", ",", "shape", "=", "[", "-", "1", ",", "class_num", "]", ")", "\n", "return", "soft_target", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.CELoss.__call__": [[40, 58], ["paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "dist_loss.CELoss._labelsmoothing", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.cross_entropy", "paddle.cross_entropy", "paddle.cross_entropy", "paddle.log_softmax", "paddle.log_softmax", "paddle.log_softmax", "paddle.softmax", "paddle.softmax", "paddle.softmax"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss._labelsmoothing"], ["", "def", "__call__", "(", "self", ",", "logits", ",", "label", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "if", "self", ".", "epsilon", "is", "not", "None", ":", "\n", "            ", "class_num", "=", "logits", ".", "shape", "[", "-", "1", "]", "\n", "label", "=", "self", ".", "_labelsmoothing", "(", "label", ",", "class_num", ")", "\n", "\n", "x", "=", "-", "F", ".", "log_softmax", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "loss", "=", "paddle", ".", "sum", "(", "x", "*", "label", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "label", ".", "shape", "[", "-", "1", "]", "==", "logits", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "label", "=", "F", ".", "softmax", "(", "label", ",", "axis", "=", "-", "1", ")", "\n", "soft_label", "=", "True", "\n", "", "else", ":", "\n", "                ", "soft_label", "=", "False", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", "=", "label", ",", "soft_label", "=", "soft_label", ")", "\n", "\n", "", "loss_dict", "[", "self", ".", "name", "]", "=", "paddle", ".", "mean", "(", "loss", ")", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_GT_CELoss.__init__": [[65, 67], ["dist_loss.CELoss.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"loss_ce_s_gt\"", ",", "epsilon", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "epsilon", "=", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_GT_CELoss.__call__": [[68, 72], ["batch[].reshape", "dist_loss.CELoss.__call__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.OptimizerBuilder.__call__"], ["", "def", "__call__", "(", "self", ",", "predicts", ",", "batch", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "logits", "=", "predicts", "[", "\"student\"", "]", "[", "\"logits\"", "]", "\n", "label", "=", "batch", "[", "\"label\"", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "super", "(", ")", ".", "__call__", "(", "logits", ",", "label", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_T_ReviewKDLoss.__init__": [[75, 94], ["review_kd_loss.ReviewKDLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", "=", "[", "]", ",", "\n", "out_channels", "=", "[", "]", ",", "\n", "mid_channel", "=", "256", ",", "\n", "shapes", "=", "[", "1", ",", "7", ",", "14", ",", "28", ",", "56", "]", ",", "\n", "student_keepkeys", "=", "[", "]", ",", "\n", "teacher_keepkeys", "=", "[", "]", ",", "\n", "hcl_mode", "=", "\"avg\"", ",", "\n", "name", "=", "\"loss_review_kd\"", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "mid_channel", "=", "mid_channel", ",", "\n", "shapes", "=", "shapes", ",", "\n", "hcl_mode", "=", "hcl_mode", ",", "\n", "name", "=", "name", ")", "\n", "self", ".", "student_keepkeys", "=", "student_keepkeys", "\n", "self", ".", "teacher_keepkeys", "=", "teacher_keepkeys", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_T_ReviewKDLoss.__call__": [[95, 103], ["super().__call__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.OptimizerBuilder.__call__"], ["", "def", "__call__", "(", "self", ",", "predicts", ",", "batch", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "s_feats", "=", "[", "\n", "predicts", "[", "\"student\"", "]", "[", "\"feats\"", "]", "[", "key", "]", "for", "key", "in", "self", ".", "student_keepkeys", "\n", "]", "\n", "t_feats", "=", "[", "\n", "predicts", "[", "\"teacher\"", "]", "[", "\"feats\"", "]", "[", "key", "]", "for", "key", "in", "self", ".", "teacher_keepkeys", "\n", "]", "\n", "return", "super", "(", ")", ".", "__call__", "(", "s_feats", ",", "t_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_T_HCLLoss.__init__": [[106, 116], ["review_kd_loss.HCL.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hcl_mode", "=", "\"avg\"", ",", "\n", "s_keep_keys", "=", "None", ",", "\n", "t_keep_keys", "=", "None", ",", "\n", "name", "=", "\"loss_review_kd\"", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "mode", "=", "hcl_mode", ")", "\n", "self", ".", "s_keep_keys", "=", "s_keep_keys", "\n", "self", ".", "t_keep_keys", "=", "t_keep_keys", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.dist_loss.S_T_HCLLoss.__call__": [[117, 127], ["super().__call__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.OptimizerBuilder.__call__"], ["", "def", "__call__", "(", "self", ",", "predicts", ",", "batch", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "s_feats", "=", "predicts", "[", "\"student\"", "]", "[", "\"feats\"", "]", "\n", "t_feats", "=", "predicts", "[", "\"teacher\"", "]", "[", "\"feats\"", "]", "\n", "if", "self", ".", "s_keep_keys", "is", "not", "None", ":", "\n", "            ", "s_feats", "=", "[", "s_feats", "[", "key", "]", "for", "key", "in", "self", ".", "s_keep_keys", "]", "\n", "", "if", "self", ".", "t_keep_keys", "is", "not", "None", ":", "\n", "            ", "t_feats", "=", "[", "t_feats", "[", "key", "]", "for", "key", "in", "self", ".", "t_keep_keys", "]", "\n", "\n", "", "loss", "=", "super", "(", ")", ".", "__call__", "(", "s_feats", ",", "t_feats", ")", "\n", "return", "{", "self", ".", "name", ":", "loss", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.__init__": [[27, 40], ["paddle.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ",", "epsilon", "=", "None", ",", "mode", "=", "\"mean\"", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "CELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_mode", "=", "mode", "\n", "assert", "mode", "in", "[", "\n", "\"mean\"", ",", "\"sum\"", "\n", "]", ",", "\"mode must be in [mean, sum], but got {]\"", ".", "format", "(", "mode", ")", "\n", "self", ".", "_classes_num", "=", "classes_num", "\n", "if", "epsilon", "is", "not", "None", "and", "epsilon", ">=", "0.0", "and", "epsilon", "<=", "1.0", ":", "\n", "            ", "self", ".", "_epsilon", "=", "epsilon", "\n", "self", ".", "_label_smoothing", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_epsilon", "=", "None", "\n", "self", ".", "_label_smoothing", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.reduce_loss": [[41, 47], ["paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean"], ["", "", "def", "reduce_loss", "(", "self", ",", "cost", ")", ":", "\n", "        ", "if", "self", ".", "_mode", "==", "\"mean\"", ":", "\n", "            ", "avg_cost", "=", "paddle", ".", "mean", "(", "cost", ")", "\n", "", "else", ":", "\n", "            ", "avg_cost", "=", "paddle", ".", "sum", "(", "cost", ")", "\n", "", "return", "avg_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss._labelsmoothing": [[48, 57], ["paddle.label_smooth", "paddle.label_smooth", "paddle.label_smooth", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.one_hot", "paddle.one_hot", "paddle.one_hot"], "methods", ["None"], ["", "def", "_labelsmoothing", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "target", ".", "shape", "[", "-", "1", "]", "!=", "self", ".", "_classes_num", ":", "\n", "            ", "one_hot_target", "=", "F", ".", "one_hot", "(", "target", ",", "self", ".", "_classes_num", ")", "\n", "", "else", ":", "\n", "            ", "one_hot_target", "=", "target", "\n", "", "soft_target", "=", "F", ".", "label_smooth", "(", "one_hot_target", ",", "epsilon", "=", "self", ".", "_epsilon", ")", "\n", "soft_target", "=", "paddle", ".", "reshape", "(", "\n", "soft_target", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "_classes_num", "]", ")", "\n", "return", "soft_target", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss": [[58, 67], ["loss.CELoss.reduce_loss", "loss.CELoss._labelsmoothing", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.cross_entropy", "paddle.cross_entropy", "paddle.cross_entropy", "paddle.log_softmax", "paddle.log_softmax", "paddle.log_softmax"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.reduce_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss._labelsmoothing"], ["", "def", "calc_loss", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "_label_smoothing", ":", "\n", "            ", "target", "=", "self", ".", "_labelsmoothing", "(", "target", ")", "\n", "x", "=", "-", "F", ".", "log_softmax", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "cost", "=", "paddle", ".", "sum", "(", "x", "*", "target", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "cost", "=", "F", ".", "cross_entropy", "(", "x", ",", "label", "=", "target", ")", "\n", "", "avg_cost", "=", "self", ".", "reduce_loss", "(", "cost", ")", "\n", "return", "avg_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.forward": [[68, 71], ["loss.CELoss.calc_loss"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "feeds", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "target", "=", "feeds", "[", "\"label\"", "]", "\n", "return", "self", ".", "calc_loss", "(", "x", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.MixCELoss.__init__": [[79, 82], ["loss.CELoss.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ",", "epsilon", "=", "None", ",", "mode", "=", "\"mean\"", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "MixCELoss", ",", "self", ")", ".", "__init__", "(", "\n", "classes_num", "=", "classes_num", ",", "epsilon", "=", "epsilon", ",", "mode", "=", "mode", ",", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.MixCELoss.forward": [[83, 97], ["loss.MixCELoss.reduce_loss", "loss.MixCELoss.calc_loss", "loss.MixCELoss.calc_loss", "loss.MixCELoss.calc_loss"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.reduce_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "feeds", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "target0", "=", "feeds", "[", "'y_a'", "]", "\n", "target1", "=", "feeds", "[", "'y_b'", "]", "\n", "lam", "=", "feeds", "[", "'lam'", "]", "\n", "cost0", "=", "self", ".", "calc_loss", "(", "x", ",", "target0", ")", "\n", "cost1", "=", "self", ".", "calc_loss", "(", "x", ",", "target1", ")", "\n", "cost", "=", "lam", "*", "cost0", "+", "(", "1.0", "-", "lam", ")", "*", "cost1", "\n", "", "else", ":", "\n", "            ", "target", "=", "feeds", "[", "\"label\"", "]", "\n", "cost", "=", "self", ".", "calc_loss", "(", "x", ",", "target", ")", "\n", "\n", "", "avg_cost", "=", "self", ".", "reduce_loss", "(", "cost", ")", "\n", "return", "avg_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.JSDivLoss.__init__": [[105, 108], ["paddle.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ")", ":", "\n", "        ", "super", "(", "JSDivLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_classes_num", "=", "classes_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.JSDivLoss._kldiv": [[109, 113], ["paddle.log", "paddle.log", "paddle.log", "paddle.log", "paddle.log", "paddle.log", "paddle.log", "paddle.log", "paddle.log"], "methods", ["None"], ["", "def", "_kldiv", "(", "self", ",", "x", ",", "target", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "cost", "=", "target", "*", "paddle", ".", "log", "(", "\n", "(", "target", "+", "eps", ")", "/", "(", "x", "+", "eps", ")", ")", "*", "self", ".", "_classes_num", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.JSDivLoss.forward": [[114, 121], ["paddle.softmax", "paddle.softmax", "paddle.softmax", "paddle.softmax", "paddle.softmax", "paddle.softmax", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "loss.JSDivLoss._kldiv", "loss.JSDivLoss._kldiv"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.misc.AverageMeter.mean", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.JSDivLoss._kldiv", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.JSDivLoss._kldiv"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "x", "=", "F", ".", "softmax", "(", "x", ")", "\n", "target", "=", "F", ".", "softmax", "(", "target", ")", "\n", "cost", "=", "self", ".", "_kldiv", "(", "x", ",", "target", ")", "+", "self", ".", "_kldiv", "(", "target", ",", "x", ")", "\n", "cost", "=", "cost", "/", "2", "\n", "avg_cost", "=", "paddle", ".", "mean", "(", "cost", ")", "\n", "return", "avg_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.GoogLeNetLoss.__init__": [[129, 132], ["loss.CELoss.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ",", "epsilon", "=", "None", ",", "mode", "=", "\"mean\"", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "GoogLeNetLoss", ",", "self", ")", ".", "__init__", "(", "\n", "classes_num", "=", "classes_num", ",", "epsilon", "=", "epsilon", ",", "mode", "=", "mode", ",", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.GoogLeNetLoss.forward": [[133, 146], ["loss.GoogLeNetLoss.calc_loss", "loss.GoogLeNetLoss.calc_loss", "loss.GoogLeNetLoss.calc_loss", "loss.GoogLeNetLoss.reduce_loss", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.calc_loss", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.CELoss.reduce_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "feeds", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "assert", "len", "(", "\n", "x", "\n", ")", "==", "3", ",", "\"input for {} must be 3 but got {}, please check your input\"", ".", "format", "(", "\n", ")", "\n", "target", "=", "feeds", "[", "\"label\"", "]", "\n", "cost0", "=", "self", ".", "calc_loss", "(", "x", "[", "0", "]", ",", "target", ")", "\n", "cost1", "=", "self", ".", "calc_loss", "(", "x", "[", "1", "]", ",", "target", ")", "\n", "cost2", "=", "self", ".", "calc_loss", "(", "x", "[", "2", "]", ",", "target", ")", "\n", "cost", "=", "cost0", "+", "0.3", "*", "cost1", "+", "0.3", "*", "cost2", "\n", "\n", "avg_cost", "=", "self", ".", "reduce_loss", "(", "cost", ")", "\n", "return", "avg_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.LossBuilder.__init__": [[157, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function", "=", "'CELoss'", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.loss.LossBuilder.__call__": [[161, 165], ["getattr", "getattr."], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "mod", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "func", "=", "getattr", "(", "mod", ",", "self", ".", "function", ")", "\n", "return", "func", "(", "**", "self", ".", "params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.__init__.CombinedLoss.__init__": [[33, 49], ["paddle.Layer.__init__", "isinstance", "print", "__init__.CombinedLoss.loss_weight.append", "__init__.CombinedLoss.loss_func.append", "isinstance", "list", "param.keys", "param.pop", "len", "eval"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.__init__.CombinedLoss.__call__": [[50, 59], ["enumerate", "paddle.add_n", "paddle.add_n", "paddle.add_n", "paddle.add_n", "loss_func", "loss_dict.update", "list", "loss_dict.values"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.__init__.build_loss": [[61, 66], ["copy.deepcopy", "__init__.CombinedLoss", "ppcls.utils.logger.info"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.utils.get_architectures": [[22, 31], ["architectures.__dict__.items", "isinstance", "names.append"], "function", ["None"], ["def", "get_architectures", "(", ")", ":", "\n", "    ", "\"\"\"\n    get all of model architectures\n    \"\"\"", "\n", "names", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "architectures", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "(", "types", ".", "FunctionType", ",", "six", ".", "class_types", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.modeling.utils.similar_architectures": [[33, 47], ["enumerate", "scores.sort", "n.startswith", "difflib.SequenceMatcher().quick_ratio", "scores.append", "difflib.SequenceMatcher", "n.lower", "name.lower", "min", "len"], "function", ["None"], ["", "def", "similar_architectures", "(", "name", "=", "''", ",", "names", "=", "[", "]", ",", "thresh", "=", "0.1", ",", "topk", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    inferred similar architectures\n    \"\"\"", "\n", "scores", "=", "[", "]", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "if", "n", ".", "startswith", "(", "'__'", ")", ":", "\n", "            ", "continue", "\n", "", "score", "=", "SequenceMatcher", "(", "None", ",", "n", ".", "lower", "(", ")", ",", "name", ".", "lower", "(", ")", ")", ".", "quick_ratio", "(", ")", "\n", "if", "score", ">", "thresh", ":", "\n", "            ", "scores", ".", "append", "(", "(", "idx", ",", "score", ")", ")", "\n", "", "", "scores", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "similar_names", "=", "[", "names", "[", "s", "[", "0", "]", "]", "for", "s", "in", "scores", "[", ":", "min", "(", "topk", ",", "len", "(", "scores", ")", ")", "]", "]", "\n", "return", "similar_names", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.distillation_models.DistillationModel.__init__": [[32, 47], ["paddle.Layer.__init__", "teacher_config.pop", "student_config.pop", "eval", "eval", "distillation_models.DistillationModel.teacher.parameters"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ",", "freeze_teacher", "=", "False", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "DistillationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "teacher_config", "=", "args", "[", "\"teacher\"", "]", "\n", "student_config", "=", "args", "[", "\"student\"", "]", "\n", "\n", "t_name", "=", "teacher_config", ".", "pop", "(", "\"name\"", ")", "\n", "s_name", "=", "student_config", ".", "pop", "(", "\"name\"", ")", "\n", "\n", "self", ".", "teacher", "=", "eval", "(", "t_name", ")", "(", "classes_num", "=", "classes_num", ",", "**", "teacher_config", ")", "\n", "self", ".", "student", "=", "eval", "(", "s_name", ")", "(", "classes_num", "=", "classes_num", ",", "**", "student_config", ")", "\n", "\n", "if", "freeze_teacher", ":", "\n", "            ", "for", "param", "in", "self", ".", "teacher", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "trainable", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.distillation_models.DistillationModel.forward": [[48, 56], ["distillation_models.DistillationModel.teacher", "distillation_models.DistillationModel.student"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "teacher_out", "=", "self", ".", "teacher", "(", "input", ")", "\n", "student_out", "=", "self", ".", "student", "(", "input", ")", "\n", "output", "=", "{", "\n", "\"teacher\"", ":", "teacher_out", ",", "\n", "\"student\"", ":", "student_out", ",", "\n", "}", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ConvBNLayer.__init__": [[34, 55], ["paddle.Layer.__init__", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.BatchNorm", "paddle.nn.BatchNorm", "paddle.nn.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "filter_size", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "ConvBNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_conv", "=", "Conv2D", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "num_filters", ",", "\n", "kernel_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "bias_attr", "=", "False", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "_batch_norm", "=", "BatchNorm", "(", "\n", "num_filters", ",", "act", "=", "act", ",", "data_layout", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ConvBNLayer.forward": [[56, 60], ["resnet.ConvBNLayer._conv", "resnet.ConvBNLayer._batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "_conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "_batch_norm", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.BottleneckBlock.__init__": [[63, 105], ["paddle.Layer.__init__", "resnet.ConvBNLayer", "resnet.ConvBNLayer", "resnet.ConvBNLayer", "resnet.ConvBNLayer"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv2", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n", "self", ".", "_num_channels_out", "=", "num_filters", "*", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.BottleneckBlock.forward": [[106, 121], ["resnet.BottleneckBlock.conv0", "resnet.BottleneckBlock.conv1", "resnet.BottleneckBlock.conv2", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "resnet.BottleneckBlock.short", "paddle.relu", "paddle.relu", "paddle.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv2", ")", "\n", "# get feature map before ", "\n", "if", "not", "self", ".", "is_last", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.BasicBlock.__init__": [[124, 155], ["paddle.Layer.__init__", "resnet.ConvBNLayer", "resnet.ConvBNLayer", "resnet.ConvBNLayer"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.BasicBlock.forward": [[156, 167], ["resnet.BasicBlock.conv0", "resnet.BasicBlock.conv1", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.add", "paddle.relu", "paddle.relu", "paddle.relu", "resnet.BasicBlock.short"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv1", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet.__init__": [[170, 273], ["paddle.Layer.__init__", "resnet.ConvBNLayer", "paddle.nn.MaxPool2D", "paddle.nn.MaxPool2D", "paddle.nn.MaxPool2D", "paddle.nn.AdaptiveAvgPool2D", "paddle.nn.AdaptiveAvgPool2D", "paddle.nn.AdaptiveAvgPool2D", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "range", "range", "math.sqrt", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "resnet.ResNet.set_dict", "print", "len", "range", "len", "range", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "resnet.ResNet.add_sublayer", "resnet.ResNet.block_list.append", "resnet.ResNet.add_sublayer", "resnet.ResNet.block_list.append", "resnet.BottleneckBlock", "chr", "resnet.BasicBlock", "paddle.nn.initializer.Uniform", "paddle.nn.initializer.Uniform", "paddle.nn.initializer.Uniform", "chr", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", "=", "50", ",", "\n", "classes_num", "=", "1000", ",", "\n", "input_image_channel", "=", "3", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "return_feats", "=", "False", ",", "\n", "get_feats_before_relu", "=", "True", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "input_image_channel", "=", "input_image_channel", "\n", "\n", "self", ".", "return_feats", "=", "return_feats", "\n", "self", ".", "get_feats_before_relu", "=", "get_feats_before_relu", "\n", "\n", "supported_layers", "=", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", "\n", "assert", "layers", "in", "supported_layers", ",", "\"supported layers are {} but input layer is {}\"", ".", "format", "(", "\n", "supported_layers", ",", "layers", ")", "\n", "\n", "if", "layers", "==", "18", ":", "\n", "            ", "depth", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "layers", "==", "34", "or", "layers", "==", "50", ":", "\n", "            ", "depth", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "layers", "==", "101", ":", "\n", "            ", "depth", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "layers", "==", "152", ":", "\n", "            ", "depth", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "num_channels", "=", "[", "64", ",", "256", ",", "512", ",", "\n", "1024", "]", "if", "layers", ">=", "50", "else", "[", "64", ",", "64", ",", "128", ",", "256", "]", "\n", "num_filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "\n", "self", ".", "conv", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "self", ".", "input_image_channel", ",", "\n", "num_filters", "=", "64", ",", "\n", "filter_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "self", ".", "pool2d_max", "=", "MaxPool2D", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "block_list", "=", "[", "]", "\n", "if", "layers", ">=", "50", ":", "\n", "            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "if", "layers", "in", "[", "101", ",", "152", "]", "and", "block", "==", "2", ":", "\n", "                        ", "if", "i", "==", "0", ":", "\n", "                            ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "\"a\"", "\n", "", "else", ":", "\n", "                            ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "\"b\"", "+", "str", "(", "i", ")", "\n", "", "", "else", ":", "\n", "                        ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "", "bottleneck_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BottleneckBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n", "if", "i", "==", "0", "else", "num_filters", "[", "block", "]", "*", "4", ",", "\n", "num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "is_last", "=", "i", "==", "depth", "[", "block", "]", "-", "1", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "bottleneck_block", ")", "\n", "shortcut", "=", "True", "\n", "", "", "", "else", ":", "\n", "            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "basic_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BasicBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n", "if", "i", "==", "0", "else", "num_filters", "[", "block", "]", ",", "\n", "num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "basic_block", ")", "\n", "shortcut", "=", "True", "\n", "\n", "", "", "", "self", ".", "pool2d_avg", "=", "AdaptiveAvgPool2D", "(", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "pool2d_avg_channels", "=", "num_channels", "[", "-", "1", "]", "*", "2", "\n", "\n", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "pool2d_avg_channels", "*", "1.0", ")", "\n", "\n", "self", ".", "out", "=", "Linear", "(", "\n", "self", ".", "pool2d_avg_channels", ",", "\n", "classes_num", ",", "\n", "weight_attr", "=", "ParamAttr", "(", "initializer", "=", "Uniform", "(", "-", "stdv", ",", "stdv", ")", ")", ",", "\n", "bias_attr", "=", "ParamAttr", "(", ")", ")", "\n", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "params", "=", "paddle", ".", "load", "(", "pretrained", ")", "\n", "self", ".", "set_dict", "(", "params", ")", "\n", "print", "(", "\"load pretrained model from: {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet.forward": [[274, 301], ["resnet.ResNet.conv", "resnet.ResNet.pool2d_max", "numpy.cumsum", "enumerate", "resnet.ResNet.pool2d_avg", "features.append", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "paddle.reshape", "resnet.ResNet.out", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "paddle.tensor.transpose", "block", "paddle.relu", "paddle.relu", "paddle.relu", "features.append", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "inputs", "=", "paddle", ".", "tensor", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "inputs", ".", "stop_gradient", "=", "True", "\n", "", "y", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "pool2d_max", "(", "y", ")", "\n", "stage_index", "=", "np", ".", "cumsum", "(", "self", ".", "depth", ")", "\n", "features", "=", "[", "]", "\n", "stage", "=", "2", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "y", "=", "block", "(", "y", ")", "\n", "if", "idx", "+", "1", "in", "stage_index", ":", "\n", "                ", "if", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "if", "not", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "stage", "+=", "1", "\n", "", "", "y", "=", "self", ".", "pool2d_avg", "(", "y", ")", "\n", "features", ".", "append", "(", "y", ")", "\n", "y", "=", "paddle", ".", "reshape", "(", "y", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "pool2d_avg_channels", "]", ")", "\n", "y", "=", "self", ".", "out", "(", "y", ")", "\n", "\n", "if", "self", ".", "return_feats", ":", "\n", "            ", "return", "{", "\"feats\"", ":", "features", ",", "\"logits\"", ":", "y", "}", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet18": [[303, 306], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "18", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet34": [[308, 311], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "34", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet50": [[313, 316], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "50", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet101": [[318, 321], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "101", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.resnet.ResNet152": [[323, 326], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "152", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.__init__": [[9, 49], ["paddle.Layer.__init__", "paddle.Sequential", "paddle.Sequential", "paddle.Sequential", "paddle.Linear", "paddle.Linear", "paddle.Linear", "mobilenet_v1.MobileNet.init_params", "paddle.Sequential", "paddle.Sequential", "paddle.Sequential", "paddle.Sequential", "paddle.Sequential", "paddle.Sequential", "mobilenet_v1.MobileNet.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ABF.init_params"], ["    ", "def", "__init__", "(", "self", ",", "classes_num", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias_attr", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2D", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias_attr", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2D", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2D", "(", "\n", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias_attr", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2D", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "AvgPool2D", "(", "7", ")", ",", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "classes_num", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.init_params": [[50, 59], ["mobilenet_v1.MobileNet.named_sublayers", "isinstance", "hasattr", "ppcls.utils.initializer.zeros_", "ppcls.utils.initializer.xavier_uniform_", "isinstance", "getattr", "ppcls.utils.initializer.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.zeros_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.xavier_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_"], ["", "def", "init_params", "(", "self", ",", ")", ":", "\n", "        ", "for", "_", ",", "m", "in", "self", ".", "named_sublayers", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "getattr", "(", "m", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "                ", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2D", ")", ":", "\n", "                ", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "1", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.forward": [[60, 67], ["mobilenet_v1.MobileNet.model", "mobilenet_v1.MobileNet.reshape", "mobilenet_v1.MobileNet.fc", "mobilenet_v1.MobileNet.extract_feature"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.extract_feature"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "if", "is_feat", ":", "\n", "            ", "return", "self", ".", "extract_feature", "(", "x", ",", "preReLU", "=", "True", ")", "\n", "", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "-", "1", ",", "1024", "]", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.get_bn_before_relu": [[68, 75], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "model", "[", "3", "]", "[", "-", "2", "]", "\n", "bn2", "=", "self", ".", "model", "[", "5", "]", "[", "-", "2", "]", "\n", "bn3", "=", "self", ".", "model", "[", "11", "]", "[", "-", "2", "]", "\n", "bn4", "=", "self", ".", "model", "[", "13", "]", "[", "-", "2", "]", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.get_channel_num": [[76, 79], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "[", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.mobilenet_v1.MobileNet.extract_feature": [[80, 98], ["feat5.reshape", "mobilenet_v1.MobileNet.fc", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu", "paddle.relu"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "\n", "        ", "feat1", "=", "self", ".", "model", "[", "3", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "0", ":", "3", "]", "(", "x", ")", ")", "\n", "feat2", "=", "self", ".", "model", "[", "5", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "4", ":", "5", "]", "(", "F", ".", "relu", "(", "feat1", ")", ")", ")", "\n", "feat3", "=", "self", ".", "model", "[", "11", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "6", ":", "11", "]", "(", "F", ".", "relu", "(", "feat2", ")", ")", ")", "\n", "feat4", "=", "self", ".", "model", "[", "13", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "12", ":", "13", "]", "(", "F", ".", "relu", "(", "feat3", ")", ")", ")", "\n", "\n", "feat5", "=", "self", ".", "model", "[", "14", "]", "(", "F", ".", "relu", "(", "feat4", ")", ")", "\n", "out", "=", "feat5", ".", "reshape", "(", "[", "-", "1", ",", "1024", "]", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "if", "not", "preReLU", ":", "\n", "            ", "feat1", "=", "F", ".", "relu", "(", "feat1", ")", "\n", "feat2", "=", "F", ".", "relu", "(", "feat2", ")", "\n", "feat3", "=", "F", ".", "relu", "(", "feat3", ")", "\n", "feat4", "=", "F", ".", "relu", "(", "feat4", ")", "\n", "\n", "", "return", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", "]", ",", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ABF.__init__": [[30, 53], ["paddle.nn.Layer.__init__", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.BatchNorm2D", "paddle.nn.BatchNorm2D", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.BatchNorm2D", "paddle.nn.BatchNorm2D", "reviewkd.ABF.init_params", "paddle.nn.Sequential", "paddle.nn.Sequential", "paddle.nn.Conv2D", "paddle.nn.Conv2D", "paddle.nn.Sigmoid", "paddle.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ABF.init_params"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel", ",", "fuse", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2D", "(", "\n", "in_channel", ",", "mid_channel", ",", "kernel_size", "=", "1", ",", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv1_bn", "=", "nn", ".", "BatchNorm2D", "(", "mid_channel", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2D", "(", "\n", "mid_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv2_bn", "=", "nn", ".", "BatchNorm2D", "(", "out_channel", ")", "\n", "if", "fuse", ":", "\n", "            ", "self", ".", "att_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "mid_channel", "*", "2", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att_conv", "=", "None", "\n", "\n", "", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ABF.init_params": [[54, 57], ["ppcls.utils.initializer.kaiming_uniform_", "ppcls.utils.initializer.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_"], ["", "def", "init_params", "(", "self", ",", ")", ":", "\n", "        ", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ",", "a", "=", "1", ")", "\n", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ABF.forward": [[58, 74], ["reviewkd.ABF.conv1", "reviewkd.ABF.conv1_bn", "reviewkd.ABF.conv2", "reviewkd.ABF.conv2_bn", "paddle.interpolate", "paddle.interpolate", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.concat", "reviewkd.ABF.att_conv", "z[].reshape", "z[].reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# transform student features", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_bn", "(", "x", ")", "\n", "if", "self", ".", "att_conv", "is", "not", "None", ":", "\n", "# upsample residual features", "\n", "            ", "y", "=", "F", ".", "interpolate", "(", "y", ",", "(", "shape", ",", "shape", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "# fusion", "\n", "z", "=", "paddle", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "z", "=", "self", ".", "att_conv", "(", "z", ")", "\n", "x", "=", "(", "x", "*", "z", "[", ":", ",", "0", "]", ".", "reshape", "(", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", "+", "y", "*", "z", "[", ":", ",", "1", "]", ".", "reshape", "(", "\n", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", ")", "\n", "", "y", "=", "self", ".", "conv2", "(", "x", ")", "\n", "y", "=", "self", ".", "conv2_bn", "(", "y", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ReviewKD.__init__": [[77, 98], ["dict", "paddle.nn.Layer.__init__", "paddle.nn.LayerList", "paddle.nn.LayerList", "enumerate", "eval", "paddle.nn.LayerList.append", "reviewkd.ABF", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "student", ",", "\n", "student_args", "=", "dict", "(", ")", ",", "\n", "in_channels", "=", "[", "]", ",", "\n", "out_channels", "=", "[", "]", ",", "\n", "mid_channel", "=", "[", "]", ",", "\n", "feat_keepkeys", "=", "[", "]", ",", "\n", "**", "kargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shapes", "=", "[", "1", ",", "7", ",", "14", ",", "28", ",", "56", "]", "\n", "self", ".", "student", "=", "eval", "(", "student", ")", "(", "**", "student_args", ")", "\n", "self", ".", "feat_keepkeys", "=", "feat_keepkeys", "\n", "\n", "abfs", "=", "nn", ".", "LayerList", "(", ")", "\n", "\n", "for", "idx", ",", "in_channel", "in", "enumerate", "(", "in_channels", ")", ":", "\n", "            ", "abfs", ".", "append", "(", "\n", "ABF", "(", "in_channel", ",", "mid_channel", ",", "out_channels", "[", "idx", "]", ",", "idx", "<", "len", "(", "\n", "in_channels", ")", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "abfs", "=", "abfs", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.architectures.reviewkd.ReviewKD.forward": [[99, 111], ["reviewkd.ReviewKD.student", "results.append", "zip", "abf", "results.insert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "student_features", "=", "self", ".", "student", "(", "x", ",", "is_feat", "=", "True", ")", "\n", "logit", "=", "student_features", "[", "1", "]", "\n", "x", "=", "student_features", "[", "0", "]", "[", ":", ":", "-", "1", "]", "\n", "results", "=", "[", "]", "\n", "out_features", ",", "res_features", "=", "self", ".", "abfs", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "out_features", ")", "\n", "for", "features", ",", "abf", ",", "shape", "in", "zip", "(", "x", "[", "1", ":", "]", ",", "self", ".", "abfs", "[", "1", ":", "]", ",", "self", ".", "shapes", "[", "1", ":", "]", ")", ":", "\n", "            ", "out_features", ",", "res_features", "=", "abf", "(", "features", ",", "res_features", ",", "shape", ")", "\n", "results", ".", "insert", "(", "0", ",", "out_features", ")", "\n", "\n", "", "return", "{", "\"feats\"", ":", "results", ",", "\"logits\"", ":", "logit", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.Cosine.__init__": [[41, 47], ["paddle.optimizer.lr.CosineAnnealingDecay.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "lr", ",", "step_each_epoch", ",", "epochs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Cosine", ",", "self", ")", ".", "__init__", "(", "\n", "learning_rate", "=", "lr", ",", "\n", "T_max", "=", "step_each_epoch", "*", "epochs", ",", ")", "\n", "\n", "self", ".", "update_specified", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.Piecewise.__init__": [[60, 67], ["paddle.optimizer.lr.PiecewiseDecay.__init__", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "lr", ",", "step_each_epoch", ",", "decay_epochs", ",", "gamma", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "boundaries", "=", "[", "step_each_epoch", "*", "e", "for", "e", "in", "decay_epochs", "]", "\n", "lr_values", "=", "[", "lr", "*", "(", "gamma", "**", "i", ")", "for", "i", "in", "range", "(", "len", "(", "boundaries", ")", "+", "1", ")", "]", "\n", "super", "(", "Piecewise", ",", "self", ")", ".", "__init__", "(", "\n", "boundaries", "=", "boundaries", ",", "values", "=", "lr_values", ")", "\n", "\n", "self", ".", "update_specified", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.CosineWarmup.__init__": [[82, 97], ["learning_rate.Cosine", "paddle.optimizer.lr.LinearWarmup.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "lr", ",", "step_each_epoch", ",", "epochs", ",", "warmup_epoch", "=", "5", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "epochs", ">", "warmup_epoch", ",", "\"total epoch({}) should be larger than warmup_epoch({}) in CosineWarmup.\"", ".", "format", "(", "\n", "epochs", ",", "warmup_epoch", ")", "\n", "warmup_step", "=", "warmup_epoch", "*", "step_each_epoch", "\n", "start_lr", "=", "0.0", "\n", "end_lr", "=", "lr", "\n", "lr_sch", "=", "Cosine", "(", "lr", ",", "step_each_epoch", ",", "epochs", "-", "warmup_epoch", ")", "\n", "\n", "super", "(", "CosineWarmup", ",", "self", ")", ".", "__init__", "(", "\n", "learning_rate", "=", "lr_sch", ",", "\n", "warmup_steps", "=", "warmup_step", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "end_lr", "=", "end_lr", ")", "\n", "\n", "self", ".", "update_specified", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.ExponentialWarmup.__init__": [[113, 136], ["paddle.optimizer.lr.ExponentialDecay", "paddle.optimizer.lr.LinearWarmup.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "lr", ",", "\n", "step_each_epoch", ",", "\n", "decay_epochs", "=", "2.4", ",", "\n", "decay_rate", "=", "0.97", ",", "\n", "warmup_epoch", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "warmup_step", "=", "warmup_epoch", "*", "step_each_epoch", "\n", "start_lr", "=", "0.0", "\n", "end_lr", "=", "lr", "\n", "lr_sch", "=", "ExponentialDecay", "(", "lr", ",", "decay_rate", ")", "\n", "\n", "super", "(", "ExponentialWarmup", ",", "self", ")", ".", "__init__", "(", "\n", "learning_rate", "=", "lr_sch", ",", "\n", "warmup_steps", "=", "warmup_step", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "end_lr", "=", "end_lr", ")", "\n", "\n", "# NOTE: hac method to update exponential lr scheduler", "\n", "self", ".", "update_specified", "=", "True", "\n", "self", ".", "update_start_step", "=", "warmup_step", "\n", "self", ".", "update_step_interval", "=", "int", "(", "decay_epochs", "*", "step_each_epoch", ")", "\n", "self", ".", "step_each_epoch", "=", "step_each_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.LearningRateBuilder.__init__": [[148, 155], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "function", "=", "'Linear'", ",", "\n", "params", "=", "{", "'lr'", ":", "0.1", ",", "\n", "'steps'", ":", "100", ",", "\n", "'end_lr'", ":", "0.0", "}", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.learning_rate.LearningRateBuilder.__call__": [[156, 160], ["getattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "mod", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "lr", "=", "getattr", "(", "mod", ",", "self", ".", "function", ")", "(", "**", "self", ".", "params", ")", "\n", "return", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.L1Decay.__init__": [[35, 38], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "factor", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "L1Decay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.L1Decay.__call__": [[39, 42], ["paddle.L1Decay", "paddle.L1Decay"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "reg", "=", "regularizer", ".", "L1Decay", "(", "self", ".", "factor", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.L2Decay.__init__": [[52, 55], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "factor", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "L2Decay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.L2Decay.__call__": [[56, 59], ["paddle.L2Decay", "paddle.L2Decay"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "reg", "=", "regularizer", ".", "L2Decay", "(", "self", ".", "factor", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.Momentum.__init__": [[72, 83], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "learning_rate", ",", "\n", "momentum", ",", "\n", "parameter_list", "=", "None", ",", "\n", "regularization", "=", "None", ",", "\n", "**", "args", ")", ":", "\n", "        ", "super", "(", "Momentum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "parameter_list", "=", "parameter_list", "\n", "self", ".", "regularization", "=", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.Momentum.__call__": [[84, 91], ["paddle.optimizer.Momentum", "paddle.optimizer.Momentum", "paddle.optimizer.Momentum", "paddle.optimizer.Momentum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "opt", "=", "paddle", ".", "optimizer", ".", "Momentum", "(", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "parameters", "=", "self", ".", "parameter_list", ",", "\n", "weight_decay", "=", "self", ".", "regularization", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.RMSProp.__init__": [[106, 121], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "learning_rate", ",", "\n", "momentum", ",", "\n", "rho", "=", "0.95", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "parameter_list", "=", "None", ",", "\n", "regularization", "=", "None", ",", "\n", "**", "args", ")", ":", "\n", "        ", "super", "(", "RMSProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "parameter_list", "=", "parameter_list", "\n", "self", ".", "regularization", "=", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.RMSProp.__call__": [[122, 131], ["paddle.optimizer.RMSProp", "paddle.optimizer.RMSProp", "paddle.optimizer.RMSProp", "paddle.optimizer.RMSProp"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "opt", "=", "paddle", ".", "optimizer", ".", "RMSProp", "(", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "rho", "=", "self", ".", "rho", ",", "\n", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "parameters", "=", "self", ".", "parameter_list", ",", "\n", "weight_decay", "=", "self", ".", "regularization", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.OptimizerBuilder.__init__": [[143, 156], ["getattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "function", "=", "'Momentum'", ",", "\n", "params", "=", "{", "'momentum'", ":", "0.9", "}", ",", "\n", "regularizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "self", ".", "params", "=", "params", "\n", "# create regularizer", "\n", "if", "regularizer", "is", "not", "None", ":", "\n", "            ", "mod", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "reg_func", "=", "regularizer", "[", "'function'", "]", "+", "'Decay'", "\n", "del", "regularizer", "[", "'function'", "]", "\n", "reg", "=", "getattr", "(", "mod", ",", "reg_func", ")", "(", "**", "regularizer", ")", "(", ")", "\n", "self", ".", "params", "[", "'regularization'", "]", "=", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.optimizer.optimizer.OptimizerBuilder.__call__": [[157, 163], ["getattr", "getattr."], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "learning_rate", ",", "parameter_list", "=", "None", ")", ":", "\n", "        ", "mod", "=", "sys", ".", "modules", "[", "__name__", "]", "\n", "opt", "=", "getattr", "(", "mod", ",", "self", ".", "function", ")", "\n", "return", "opt", "(", "learning_rate", "=", "learning_rate", ",", "\n", "parameter_list", "=", "parameter_list", ",", "\n", "**", "self", ".", "params", ")", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.__init__": [[316, 322], ["iter", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "imagenet_amp.data_prefetcher.preload", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.preload": [[323, 335], ["imagenet_amp.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_input", ",", "self", ".", "next_target", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_input", "=", "None", "\n", "self", ".", "next_target", "=", "None", "\n", "return", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "self", ".", "next_target", "=", "self", ".", "next_target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "float", "(", ")", "\n", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next": [[336, 346], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "imagenet_amp.data_prefetcher.preload", "input.record_stream", "target.record_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "input", "=", "self", ".", "next_input", "\n", "target", "=", "self", ".", "next_target", "\n", "if", "input", "is", "not", "None", ":", "\n", "            ", "input", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.AverageMeter.__init__": [[524, 526], ["imagenet_amp.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.AverageMeter.reset": [[527, 532], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.AverageMeter.update": [[533, 538], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.fast_collate": [[96, 111], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "numpy.asarray", "numpy.rollaxis", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.expand_dims"], "function", ["None"], ["def", "fast_collate", "(", "batch", ")", ":", "\n", "    ", "imgs", "=", "[", "img", "[", "0", "]", "for", "img", "in", "batch", "]", "\n", "targets", "=", "torch", ".", "tensor", "(", "[", "target", "[", "1", "]", "for", "target", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "w", "=", "imgs", "[", "0", "]", ".", "size", "[", "0", "]", "\n", "h", "=", "imgs", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "tensor", "=", "torch", ".", "zeros", "(", "(", "len", "(", "imgs", ")", ",", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "nump_array", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "(", "nump_array", ".", "ndim", "<", "3", ")", ":", "\n", "            ", "nump_array", "=", "np", ".", "expand_dims", "(", "nump_array", ",", "axis", "=", "-", "1", ")", "\n", "", "nump_array", "=", "np", ".", "rollaxis", "(", "nump_array", ",", "2", ")", "\n", "\n", "tensor", "[", "i", "]", "+=", "torch", ".", "from_numpy", "(", "nump_array", ")", "\n", "\n", "", "return", "tensor", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.main": [[131, 314], ["models.reviewkd.build_review_kd.cuda", "print", "print", "models.reviewkd.build_review_kd.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "amp.initialize", "torch.CrossEntropyLoss().cuda", "os.path.join", "os.path.join", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "print", "print", "print", "apex.parallel.convert_syncbn_model", "torch.optim.lr_scheduler.MultiStepLR", "DDP", "imagenet_amp.main.resume"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_prec1", ",", "args", "\n", "\n", "args", ".", "distributed", "=", "False", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'9901'", "\n", "\n", "", "args", ".", "gpu", "=", "0", "\n", "args", ".", "world_size", "=", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "gpu", "=", "args", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ")", "\n", "args", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "", "assert", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ",", "\"Amp requires cudnn backend to be enabled.\"", "\n", "\n", "# create model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "teacher", "!=", "''", ":", "\n", "            ", "model", "=", "build_review_kd", "(", "args", ".", "arch", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "", "if", "args", ".", "sync_bn", ":", "\n", "        ", "import", "apex", "\n", "print", "(", "\"using apex synced BN\"", ")", "\n", "model", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "model", ")", "\n", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "print", "(", "model", ")", "\n", "\n", "# Scale learning rate based on global batch size", "\n", "args", ".", "lr", "=", "args", ".", "lr", "*", "float", "(", "args", ".", "batch_size", "*", "args", ".", "world_size", ")", "/", "256.", "\n", "print", "(", "'learning rate: '", ",", "args", ".", "lr", ")", "\n", "param", "=", "model", ".", "parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "if", "args", ".", "lr_adjust_type", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_adjust_step", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "args", ".", "lr_adjust_type", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "args", ".", "epochs", ")", "\n", "", "elif", "args", ".", "lr_adjust_type", "==", "'exp'", ":", "\n", "        ", "scheduler", "=", "ExponentialLR", "(", "optimizer", ",", "args", ".", "gamma", ")", "\n", "\n", "# Initialize Amp.  Amp accepts either values or strings for the optional override arguments,", "\n", "# for convenient interoperation with argparse.", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "opt_level", "=", "args", ".", "opt_level", ",", "\n", "keep_batchnorm_fp32", "=", "args", ".", "keep_batchnorm_fp32", ",", "\n", "loss_scale", "=", "args", ".", "loss_scale", "\n", ")", "\n", "\n", "# For distributed training, wrap the model with apex.parallel.DistributedDataParallel.", "\n", "# This must be done AFTER the call to amp.initialize.  If model = DDP(model) is called", "\n", "# before model, ... = amp.initialize(model, ...), the call to amp.initialize may alter", "\n", "# the types of model's parameters in a way that disrupts or destroys DDP's allreduce hooks.", "\n", "if", "args", ".", "distributed", ":", "\n", "# By default, apex.parallel.DistributedDataParallel overlaps communication with ", "\n", "# computation in the backward pass.", "\n", "# model = DDP(model)", "\n", "# delay_allreduce delays all communication to the end of the backward pass.", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "delay_allreduce", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "# Use a local scope to avoid dangling references", "\n", "        ", "def", "resume", "(", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "", "resume", "(", ")", "\n", "\n", "# Data loading code", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "\n", "if", "(", "args", ".", "arch", "==", "\"inception_v3\"", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Currently, inception_v3 is not supported by this example.\"", ")", "\n", "# crop_size = 299", "\n", "# val_size = 320 # I chose this value arbitrarily, we can adjust.", "\n", "", "else", ":", "\n", "        ", "crop_size", "=", "224", "\n", "val_size", "=", "256", "\n", "\n", "", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "# transforms.ToTensor(), Too slow", "\n", "# normalize,", "\n", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "trans", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "val_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "]", ")", ")", "\n", "\n", "train_sampler", "=", "None", "\n", "val_sampler", "=", "None", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "collate_fn", "=", "fast_collate", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "collate_fn", "=", "fast_collate", ")", "\n", "\n", "if", "args", ".", "teacher", "!=", "''", ":", "\n", "        ", "if", "args", ".", "teacher_weight", "==", "'torchvision'", ":", "\n", "            ", "print", "(", "'Using torchvision pretrained model for teacher {}'", ".", "format", "(", "args", ".", "teacher", ")", ")", "\n", "teacher", "=", "models", ".", "__dict__", "[", "args", ".", "teacher", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "teacher", "=", "models", ".", "__dict__", "[", "args", ".", "teacher", "]", "(", ")", "\n", "for", "param", "in", "teacher", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "teacher_weight", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "teacher", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "teacher", "=", "teacher", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "teacher", "=", "None", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "teacher", ",", "criterion", ")", "\n", "return", "\n", "", "st_time", "=", "time", ".", "time", "(", ")", "\n", "prec1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "teacher", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "teacher", ",", "criterion", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "print", "(", "epoch", ")", "\n", "print", "(", "'Learning rate:'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "print", "(", "'Total Time: '", "+", "format_time", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "\n", "print", "(", "'Remaining Time: '", "+", "format_time", "(", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", "/", "(", "epoch", "-", "args", ".", "start_epoch", "+", "1", ")", "*", "(", "args", ".", "epochs", "-", "epoch", "-", "1", ")", ")", ")", "\n", "print", "(", "'Best Acc: '", "+", "str", "(", "best_prec1", ")", ")", "\n", "save_checkpoint", "(", "args", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.train": [[348, 458], ["imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "model.train", "teacher.eval", "time.time", "imagenet_amp.data_prefetcher", "imagenet_amp.data_prefetcher.next", "imagenet_amp.adjust_learning_rate", "model", "criterion", "optimizer.zero_grad", "optimizer.step", "imagenet_amp.data_prefetcher.next", "print", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.cudart().cudaProfilerStart", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "len", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "amp.scale_loss", "scaled_loss.backward", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "imagenet_amp.accuracy", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "imagenet_amp.AverageMeter.update", "time.time", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_push", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "torch.cuda.nvtx.range_pop", "print", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "torch.cuda.cudart().cudaProfilerStop", "quit", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "teacher", "models.reviewkd.hcl", "imagenet_amp.reduce_tensor", "imagenet_amp.reduce_tensor", "imagenet_amp.reduce_tensor", "imagenet_amp.reduce_tensor", "imagenet_amp.reduce_tensor", "to_python_float", "input.size", "to_python_float", "input.size", "to_python_float", "input.size", "to_python_float", "input.size", "to_python_float", "input.size", "print", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "torch.cuda.cudart", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.train", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.adjust_learning_rate", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.accuracy", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.hcl", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "teacher", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "reviewkd_losses", "=", "AverageMeter", "(", ")", "\n", "cls_losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "teacher", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "prefetcher", "=", "data_prefetcher", "(", "train_loader", ")", "\n", "input", ",", "target", "=", "prefetcher", ".", "next", "(", ")", "\n", "i", "=", "0", "\n", "while", "input", "is", "not", "None", ":", "\n", "        ", "i", "+=", "1", "\n", "if", "args", ".", "prof", ">=", "0", "and", "i", "==", "args", ".", "prof", ":", "\n", "            ", "print", "(", "\"Profiling begun at iteration {}\"", ".", "format", "(", "i", ")", ")", "\n", "torch", ".", "cuda", ".", "cudart", "(", ")", ".", "cudaProfilerStart", "(", ")", "\n", "\n", "", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_push", "(", "\"Body of iteration {}\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "adjust_learning_rate", "(", "scheduler", ",", "optimizer", ",", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ")", "\n", "\n", "# compute output", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_push", "(", "\"forward\"", ")", "\n", "output", "=", "model", "(", "input", ")", "\n", "if", "teacher", "is", "not", "None", ":", "\n", "            ", "fstudent", ",", "output", "=", "output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fteacher", ",", "_", "=", "teacher", "(", "input", ",", "is_feat", "=", "True", ")", "\n", "", "loss_reviewkd", "=", "hcl", "(", "fstudent", ",", "fteacher", ")", "*", "args", ".", "review_kd_loss_weight", "\n", "", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_pop", "(", ")", "\n", "loss_cls", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "=", "loss_cls", "+", "loss_reviewkd", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_push", "(", "\"backward\"", ")", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_pop", "(", ")", "\n", "\n", "# for param in model.parameters():", "\n", "#     print(param.data.double().sum().item(), param.grad.data.double().sum().item())", "\n", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_push", "(", "\"optimizer.step()\"", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_pop", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "# Every print_freq iterations, check the loss, accuracy, and speed.", "\n", "# For best performance, it doesn't make sense to print these metrics every", "\n", "# iteration, since they incur an allreduce and some host<->device syncs.", "\n", "\n", "# Measure accuracy", "\n", "            ", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "# Average loss and accuracy across processes for logging ", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "reduced_reviewkd_loss", "=", "reduce_tensor", "(", "loss_reviewkd", ".", "data", ")", "\n", "reduced_cls_loss", "=", "reduce_tensor", "(", "loss_cls", ".", "data", ")", "\n", "prec1", "=", "reduce_tensor", "(", "prec1", ")", "\n", "prec5", "=", "reduce_tensor", "(", "prec5", ")", "\n", "", "else", ":", "\n", "                ", "reduced_loss", "=", "loss", ".", "data", "\n", "reduced_reviewkd_loss", "=", "loss_reviewkd", ".", "data", "\n", "reduced_cls_loss", "=", "loss_cls", ".", "data", "\n", "\n", "# to_python_float incurs a host<->device sync", "\n", "", "losses", ".", "update", "(", "to_python_float", "(", "reduced_loss", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "reviewkd_losses", ".", "update", "(", "to_python_float", "(", "reduced_reviewkd_loss", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "cls_losses", ".", "update", "(", "to_python_float", "(", "reduced_cls_loss", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "to_python_float", "(", "prec1", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "to_python_float", "(", "prec5", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end", ")", "/", "args", ".", "print_freq", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {3:.3f} ({4:.3f})\\t'", "\n", "'Loss {loss.val:.10f} ({loss.avg:.4f})\\t'", "\n", "'ReviewKDLoss {reviewkdloss.val:.10f} ({reviewkdloss.avg:.4f})\\t'", "\n", "'ClsLoss {clsloss.val:.10f} ({clsloss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "\n", "args", ".", "world_size", "*", "args", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "args", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "reviewkdloss", "=", "reviewkd_losses", ",", "clsloss", "=", "cls_losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_push", "(", "\"prefetcher.next()\"", ")", "\n", "input", ",", "target", "=", "prefetcher", ".", "next", "(", ")", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_pop", "(", ")", "\n", "\n", "# Pop range \"Body of iteration {}\".format(i)", "\n", "if", "args", ".", "prof", ">=", "0", ":", "torch", ".", "cuda", ".", "nvtx", ".", "range_pop", "(", ")", "\n", "\n", "if", "args", ".", "prof", ">=", "0", "and", "i", "==", "args", ".", "prof", "+", "10", ":", "\n", "            ", "print", "(", "\"Profiling ended at iteration {}\"", ".", "format", "(", "i", ")", ")", "\n", "torch", ".", "cuda", ".", "cudart", "(", ")", ".", "cudaProfilerStop", "(", ")", "\n", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.validate": [[460, 515], ["imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "imagenet_amp.AverageMeter", "model.eval", "time.time", "imagenet_amp.data_prefetcher", "imagenet_amp.data_prefetcher.next", "print", "imagenet_amp.accuracy", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "imagenet_amp.AverageMeter.update", "time.time", "imagenet_amp.data_prefetcher.next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "imagenet_amp.reduce_tensor", "imagenet_amp.reduce_tensor", "to_python_float", "input.size", "to_python_float", "input.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.accuracy", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.data_prefetcher.next", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "teacher", ",", "criterion", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "prefetcher", "=", "data_prefetcher", "(", "val_loader", ")", "\n", "input", ",", "target", "=", "prefetcher", ".", "next", "(", ")", "\n", "i", "=", "0", "\n", "while", "input", "is", "not", "None", ":", "\n", "        ", "i", "+=", "1", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "input", ")", "\n", "", "if", "teacher", "is", "not", "None", ":", "\n", "            ", "fstudent", ",", "output", "=", "output", "\n", "\n", "# measure accuracy and record loss", "\n", "", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "            ", "prec1", "=", "reduce_tensor", "(", "prec1", ")", "\n", "prec5", "=", "reduce_tensor", "(", "prec5", ")", "\n", "\n", "", "top1", ".", "update", "(", "to_python_float", "(", "prec1", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "to_python_float", "(", "prec5", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# TODO:  Change timings to mirror train().", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Speed {2:.3f} ({3:.3f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "\n", "args", ".", "world_size", "*", "args", ".", "batch_size", "/", "batch_time", ".", "val", ",", "\n", "args", ".", "world_size", "*", "args", ".", "batch_size", "/", "batch_time", ".", "avg", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "input", ",", "target", "=", "prefetcher", ".", "next", "(", ")", "\n", "\n", "", "print", "(", "' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.save_checkpoint": [[516, 521], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "args", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.adjust_learning_rate": [[539, 555], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "scheduler", ",", "optimizer", ",", "epoch", ",", "step", ",", "len_epoch", ")", ":", "\n", "    ", "\"\"\"LR schedule that should yield 76% converged accuracy with batch size 256\"\"\"", "\n", "\n", "\"\"\"Warmup\"\"\"", "\n", "#    lr = args.lr", "\n", "#    if epoch < 5:", "\n", "#        lr = lr*float(1 + step + epoch*len_epoch)/(5.*len_epoch)", "\n", "#        for param_group in optimizer.param_groups:", "\n", "#            param_group['lr'] = lr", "\n", "#        return", "\n", "lr", "=", "args", ".", "lr", "\n", "for", "i", "in", "args", ".", "lr_adjust_step", ":", "\n", "        ", "if", "i", "<=", "epoch", ":", "\n", "            ", "lr", "*=", "0.1", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "         ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "#    scheduler.step(epoch)", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.accuracy": [[559, 573], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.reduce_tensor": [[575, 580], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "args", ".", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.format_time": [[581, 612], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.__init__": [[6, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.MobileNet.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "7", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.forward": [[46, 53], ["mobilenet.MobileNet.model", "mobilenet.MobileNet.view", "mobilenet.MobileNet.fc", "mobilenet.MobileNet.extract_feature"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.extract_feature"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "if", "is_feat", ":", "\n", "            ", "return", "self", ".", "extract_feature", "(", "x", ",", "preReLU", "=", "True", ")", "\n", "", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.get_bn_before_relu": [[54, 61], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "model", "[", "3", "]", "[", "-", "2", "]", "\n", "bn2", "=", "self", ".", "model", "[", "5", "]", "[", "-", "2", "]", "\n", "bn3", "=", "self", ".", "model", "[", "11", "]", "[", "-", "2", "]", "\n", "bn4", "=", "self", ".", "model", "[", "13", "]", "[", "-", "2", "]", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.get_channel_num": [[62, 65], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "[", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.mobilenet.MobileNet.extract_feature": [[66, 84], ["feat5.view", "mobilenet.MobileNet.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "\n", "        ", "feat1", "=", "self", ".", "model", "[", "3", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "0", ":", "3", "]", "(", "x", ")", ")", "\n", "feat2", "=", "self", ".", "model", "[", "5", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "4", ":", "5", "]", "(", "F", ".", "relu", "(", "feat1", ")", ")", ")", "\n", "feat3", "=", "self", ".", "model", "[", "11", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "6", ":", "11", "]", "(", "F", ".", "relu", "(", "feat2", ")", ")", ")", "\n", "feat4", "=", "self", ".", "model", "[", "13", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "12", ":", "13", "]", "(", "F", ".", "relu", "(", "feat3", ")", ")", ")", "\n", "\n", "feat5", "=", "self", ".", "model", "[", "14", "]", "(", "F", ".", "relu", "(", "feat4", ")", ")", "\n", "out", "=", "feat5", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "if", "not", "preReLU", ":", "\n", "            ", "feat1", "=", "F", ".", "relu", "(", "feat1", ")", "\n", "feat2", "=", "F", ".", "relu", "(", "feat2", ")", "\n", "feat3", "=", "F", ".", "relu", "(", "feat3", ")", "\n", "feat4", "=", "F", ".", "relu", "(", "feat4", ")", "\n", "\n", "", "return", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", "]", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.BasicBlock.__init__": [[41, 59], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3"], ["data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "ConvBNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_conv", "=", "Conv2D", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "num_filters", ",", "\n", "kernel_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "bias_attr", "=", "False", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "_batch_norm", "=", "BatchNorm", "(", "\n", "num_filters", ",", "act", "=", "act", ",", "data_layout", "=", "data_format", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "_conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "_batch_norm", "(", "y", ")", "\n", "return", "y", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.BasicBlock.forward": [[60, 78], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample", "resnet.BasicBlock.relu"], "methods", ["None"], ["\n", "\n", "", "", "class", "BottleneckBlock", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "\"relu\"", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.Bottleneck.__init__": [[89, 106], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.conv1x1", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.conv1x1"], ["num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n", "self", ".", "_num_channels_out", "=", "num_filters", "*", "4", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.Bottleneck.forward": [[107, 129], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.downsample", "resnet.Bottleneck.relu"], "methods", ["None"], ["        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv2", ")", "\n", "# get feature map before ", "\n", "if", "not", "self", ".", "is_last", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "", "return", "y", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.ResNet.__init__": [[133, 183], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_"], ["num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv1", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "layers", "=", "50", ",", "\n", "classes_num", "=", "1000", ",", "\n", "input_image_channel", "=", "3", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "return_feats", "=", "False", ",", "\n", "get_feats_before_relu", "=", "True", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "input_image_channel", "=", "input_image_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.ResNet._make_layer": [[184, 207], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.conv1x1"], ["self", ".", "return_feats", "=", "return_feats", "\n", "self", ".", "get_feats_before_relu", "=", "get_feats_before_relu", "\n", "\n", "supported_layers", "=", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", "\n", "assert", "layers", "in", "supported_layers", ",", "\"supported layers are {} but input layer is {}\"", ".", "format", "(", "\n", "supported_layers", ",", "layers", ")", "\n", "\n", "if", "layers", "==", "18", ":", "\n", "            ", "depth", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "layers", "==", "34", "or", "layers", "==", "50", ":", "\n", "            ", "depth", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "layers", "==", "101", ":", "\n", "            ", "depth", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "layers", "==", "152", ":", "\n", "            ", "depth", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "", "num_channels", "=", "[", "64", ",", "256", ",", "512", ",", "\n", "1024", "]", "if", "layers", ">=", "50", "else", "[", "64", ",", "64", ",", "128", ",", "256", "]", "\n", "num_filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "\n", "self", ".", "conv", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "self", ".", "input_image_channel", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.ResNet._forward_impl": [[208, 236], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.relu", "resnet.ResNet.layer2", "resnet.ResNet.relu", "resnet.ResNet.layer3", "resnet.ResNet.relu", "resnet.ResNet.layer4", "resnet.ResNet.relu", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["num_filters", "=", "64", ",", "\n", "filter_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "self", ".", "pool2d_max", "=", "MaxPool2D", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "block_list", "=", "[", "]", "\n", "if", "layers", ">=", "50", ":", "\n", "            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "if", "layers", "in", "[", "101", ",", "152", "]", "and", "block", "==", "2", ":", "\n", "                        ", "if", "i", "==", "0", ":", "\n", "                            ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "\"a\"", "\n", "", "else", ":", "\n", "                            ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "\"b\"", "+", "str", "(", "i", ")", "\n", "", "", "else", ":", "\n", "                        ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "", "bottleneck_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BottleneckBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n", "if", "i", "==", "0", "else", "num_filters", "[", "block", "]", "*", "4", ",", "\n", "num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.ResNet.forward": [[237, 239], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.ResNet._forward_impl"], ["is_last", "=", "i", "==", "depth", "[", "block", "]", "-", "1", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "bottleneck_block", ")", "\n", "shortcut", "=", "True", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["\n", "import", "math", "\n", "\n", "__all__", "=", "[", "\"ResNet18\"", ",", "\"ResNet34\"", ",", "\"ResNet50\"", ",", "\"ResNet101\"", ",", "\"ResNet152\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.conv1x1": [[33, 36], ["torch.Conv2d"], "function", ["None"], ["class", "ConvBNLayer", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet": [[241, 248], ["resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "basic_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BasicBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet18": [[250, 259], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "basic_block", ")", "\n", "shortcut", "=", "True", "\n", "\n", "", "", "", "self", ".", "pool2d_avg", "=", "AdaptiveAvgPool2D", "(", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "pool2d_avg_channels", "=", "num_channels", "[", "-", "1", "]", "*", "2", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet34": [[261, 270], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "pool2d_avg_channels", "*", "1.0", ")", "\n", "\n", "self", ".", "out", "=", "Linear", "(", "\n", "self", ".", "pool2d_avg_channels", ",", "\n", "classes_num", ",", "\n", "weight_attr", "=", "ParamAttr", "(", "initializer", "=", "Uniform", "(", "-", "stdv", ",", "stdv", ")", ")", ",", "\n", "bias_attr", "=", "ParamAttr", "(", ")", ")", "\n", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "params", "=", "paddle", ".", "load", "(", "pretrained", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet50": [[272, 281], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["print", "(", "\"load pretrained model from: {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "inputs", "=", "paddle", ".", "tensor", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "inputs", ".", "stop_gradient", "=", "True", "\n", "", "y", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "pool2d_max", "(", "y", ")", "\n", "stage_index", "=", "np", ".", "cumsum", "(", "self", ".", "depth", ")", "\n", "features", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet101": [[283, 292], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "y", "=", "block", "(", "y", ")", "\n", "if", "idx", "+", "1", "in", "stage_index", ":", "\n", "                ", "if", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "if", "not", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "stage", "+=", "1", "\n", "", "", "y", "=", "self", ".", "pool2d_avg", "(", "y", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet152": [[294, 303], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["y", "=", "paddle", ".", "reshape", "(", "y", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "pool2d_avg_channels", "]", ")", "\n", "y", "=", "self", ".", "out", "(", "y", ")", "\n", "\n", "if", "self", ".", "return_feats", ":", "\n", "            ", "return", "{", "\"feats\"", ":", "features", ",", "\"logits\"", ":", "y", "}", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n", "\n", "", "", "", "def", "ResNet18", "(", "**", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnext50_32x4d": [[305, 316], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["return", "model", "\n", "\n", "\n", "", "def", "ResNet34", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "34", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "ResNet50", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "50", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnext101_32x8d": [[318, 329], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["", "def", "ResNet101", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "101", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "ResNet152", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "152", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "# if __name__ == \"__main__\":", "\n", "#     resnet50 = ResNet50(return_feats=True, get_feats_before_relu=True)", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.wide_resnet50_2": [[331, 345], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], ["\n", "#     results, logits = resnet50(x)", "\n", "#     for r in results:", "\n", "#         print(r.shape)", "\n", "#     print(\"=====ligits====\")", "\n", "#     print(logits.shape)", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.wide_resnet101_2": [[347, 361], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet._resnet"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.ABF.__init__": [[9, 28], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_"], ["# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\n", "from", "__future__", "import", "absolute_import", "\n", "from", "__future__", "import", "division", "\n", "from", "__future__", "import", "print_function", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "paddle", "\n", "from", "paddle", "import", "nn", "\n", "from", "paddle", "import", "ParamAttr", "\n", "import", "paddle", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "from", "ppcls", ".", "utils", ".", "initializer", "import", "kaiming_normal_", ",", "kaiming_uniform_", "\n", "\n", "from", ".", "mobilenet_v1", "import", "MobileNet", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.ABF.forward": [[29, 43], ["reviewkd.ABF.conv1", "reviewkd.ABF.conv2", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reviewkd.ABF.att_conv", "z[].view", "z[].view"], "methods", ["None"], ["class", "ABF", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel", ",", "fuse", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2D", "(", "\n", "in_channel", ",", "mid_channel", ",", "kernel_size", "=", "1", ",", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv1_bn", "=", "nn", ".", "BatchNorm2D", "(", "mid_channel", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2D", "(", "\n", "mid_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv2_bn", "=", "nn", ".", "BatchNorm2D", "(", "out_channel", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.ReviewKD.__init__": [[45, 59], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "torch.nn.ModuleList.append", "reviewkd.ABF", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["            ", "self", ".", "att_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "mid_channel", "*", "2", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att_conv", "=", "None", "\n", "\n", "", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "init_params", "(", "self", ",", ")", ":", "\n", "        ", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ",", "a", "=", "1", ")", "\n", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.ReviewKD.forward": [[60, 72], ["reviewkd.ReviewKD.student", "results.append", "zip", "abf", "results.insert"], "methods", ["None"], ["# transform student features", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_bn", "(", "x", ")", "\n", "if", "self", ".", "att_conv", "is", "not", "None", ":", "\n", "# upsample residual features", "\n", "            ", "y", "=", "F", ".", "interpolate", "(", "y", ",", "(", "shape", ",", "shape", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "# fusion", "\n", "z", "=", "paddle", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "z", "=", "self", ".", "att_conv", "(", "z", ")", "\n", "x", "=", "(", "x", "*", "z", "[", ":", ",", "0", "]", ".", "reshape", "(", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", "+", "y", "*", "z", "[", ":", ",", "1", "]", ".", "reshape", "(", "\n", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", ")", "\n", "", "y", "=", "self", ".", "conv2", "(", "x", ")", "\n", "y", "=", "self", ".", "conv2_bn", "(", "y", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.build_review_kd": [[74, 90], ["reviewkd.ReviewKD", "resnet.resnet18", "mobilenet.MobileNet", "print"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.resnet.resnet18"], ["\n", "\n", "", "", "class", "ReviewKD", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "student", ",", "\n", "student_args", "=", "dict", "(", ")", ",", "\n", "in_channels", "=", "[", "]", ",", "\n", "out_channels", "=", "[", "]", ",", "\n", "mid_channel", "=", "[", "]", ",", "\n", "feat_keepkeys", "=", "[", "]", ",", "\n", "**", "kargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shapes", "=", "[", "1", ",", "7", ",", "14", ",", "28", ",", "56", "]", "\n", "self", ".", "student", "=", "eval", "(", "student", ")", "(", "**", "student_args", ")", "\n", "self", ".", "feat_keepkeys", "=", "feat_keepkeys", "\n", "\n", "abfs", "=", "nn", ".", "LayerList", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.models.reviewkd.hcl": [[91, 109], ["zip", "torch.mse_loss", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.mse_loss"], "function", ["None"], ["\n", "for", "idx", ",", "in_channel", "in", "enumerate", "(", "in_channels", ")", ":", "\n", "            ", "abfs", ".", "append", "(", "\n", "ABF", "(", "in_channel", ",", "mid_channel", ",", "out_channels", "[", "idx", "]", ",", "idx", "<", "len", "(", "\n", "in_channels", ")", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "abfs", "=", "abfs", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "student_features", "=", "self", ".", "student", "(", "x", ",", "is_feat", "=", "True", ")", "\n", "logit", "=", "student_features", "[", "1", "]", "\n", "x", "=", "student_features", "[", "0", "]", "[", ":", ":", "-", "1", "]", "\n", "results", "=", "[", "]", "\n", "out_features", ",", "res_features", "=", "self", ".", "abfs", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "out_features", ")", "\n", "for", "features", ",", "abf", ",", "shape", "in", "zip", "(", "x", "[", "1", ":", "]", ",", "self", ".", "abfs", "[", "1", ":", "]", ",", "self", ".", "shapes", "[", "1", ":", "]", ")", ":", "\n", "            ", "out_features", ",", "res_features", "=", "abf", "(", "features", ",", "res_features", ",", "shape", ")", "\n", "results", ".", "insert", "(", "0", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.CIFAR-100.train.test": [[182, 201], ["cnn.eval", "cnn.train", "labels.size", "images.cuda", "labels.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cnn", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.train"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.BasicBlock.__init__": [[15, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.BasicBlock.forward": [[30, 40], ["wide_resnet_cifar.BasicBlock.relu2", "wide_resnet_cifar.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet_cifar.BasicBlock.relu1", "wide_resnet_cifar.BasicBlock.relu1", "wide_resnet_cifar.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet_cifar.BasicBlock.bn1", "wide_resnet_cifar.BasicBlock.bn1", "wide_resnet_cifar.BasicBlock.conv1", "wide_resnet_cifar.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.NetworkBlock.__init__": [[43, 46], ["torch.Module.__init__", "wide_resnet_cifar.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.NetworkBlock._make_layer": [[47, 52], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.NetworkBlock.forward": [[53, 55], ["wide_resnet_cifar.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.WideResNet.__init__": [[58, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet_cifar.NetworkBlock", "wide_resnet_cifar.NetworkBlock", "wide_resnet_cifar.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet_cifar.WideResNet.modules", "wide_resnet_cifar.WideResNet.to", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "'depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.WideResNet.get_feat_modules": [[90, 97], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_feat_modules", "(", "self", ")", ":", "\n", "        ", "feat_m", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "conv1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "block1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "block2", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "block3", ")", "\n", "return", "feat_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.WideResNet.get_bn_before_relu": [[98, 104], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "block2", ".", "layer", "[", "0", "]", ".", "bn1", "\n", "bn2", "=", "self", ".", "block3", ".", "layer", "[", "0", "]", ".", "bn1", "\n", "bn3", "=", "self", ".", "bn1", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.WideResNet.forward": [[105, 127], ["wide_resnet_cifar.WideResNet.conv1", "wide_resnet_cifar.WideResNet.block1", "wide_resnet_cifar.WideResNet.block2", "wide_resnet_cifar.WideResNet.block3", "wide_resnet_cifar.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet_cifar.WideResNet.view", "wide_resnet_cifar.WideResNet.fc", "wide_resnet_cifar.WideResNet.bn1", "wide_resnet_cifar.WideResNet.block2.layer[].bn1", "wide_resnet_cifar.WideResNet.block3.layer[].bn1", "wide_resnet_cifar.WideResNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "preact", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "f0", "=", "out", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "f4", "=", "out", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "is_feat", ":", "\n", "            ", "if", "preact", ":", "\n", "                ", "f1", "=", "self", ".", "block2", ".", "layer", "[", "0", "]", ".", "bn1", "(", "f1", ")", "\n", "f2", "=", "self", ".", "block3", ".", "layer", "[", "0", "]", ".", "bn1", "(", "f2", ")", "\n", "f3", "=", "self", ".", "bn1", "(", "f3", ")", "\n", "", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn": [[129, 135], ["wide_resnet_cifar.WideResNet"], "function", ["None"], ["", "", "", "def", "wrn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Wide Residual Networks.\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn_40_2": [[137, 140], ["wide_resnet_cifar.WideResNet"], "function", ["None"], ["", "def", "wrn_40_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "WideResNet", "(", "depth", "=", "40", ",", "widen_factor", "=", "2", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn_40_1": [[142, 145], ["wide_resnet_cifar.WideResNet"], "function", ["None"], ["", "def", "wrn_40_1", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "WideResNet", "(", "depth", "=", "40", ",", "widen_factor", "=", "1", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn_16_2": [[147, 150], ["wide_resnet_cifar.WideResNet"], "function", ["None"], ["", "def", "wrn_16_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "WideResNet", "(", "depth", "=", "16", ",", "widen_factor", "=", "2", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn_16_1": [[152, 155], ["wide_resnet_cifar.WideResNet"], "function", ["None"], ["", "def", "wrn_16_1", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "WideResNet", "(", "depth", "=", "16", ",", "widen_factor", "=", "1", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.BasicBlock.__init__": [[27, 37], ["torch.Module.__init__", "resnet_cifar.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_cifar.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.BasicBlock.forward": [[38, 58], ["resnet_cifar.BasicBlock.conv1", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.relu", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.bn2", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.Bottleneck.__init__": [[63, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.Bottleneck.forward": [[77, 101], ["resnet_cifar.Bottleneck.conv1", "resnet_cifar.Bottleneck.bn1", "resnet_cifar.Bottleneck.relu", "resnet_cifar.Bottleneck.conv2", "resnet_cifar.Bottleneck.bn2", "resnet_cifar.Bottleneck.relu", "resnet_cifar.Bottleneck.conv3", "resnet_cifar.Bottleneck.bn3", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.ResNet.__init__": [[105, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_cifar.ResNet.modules", "resnet_cifar.ResNet.to", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_filters", ",", "block_name", "=", "'BasicBlock'", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "if", "block_name", ".", "lower", "(", ")", "==", "'basicblock'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'When use basicblock, depth should be 6n+2, e.g. 20, 32, 44, 56, 110, 1202'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", ".", "lower", "(", ")", "==", "'bottleneck'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'When use bottleneck, depth should be 9n+2, e.g. 20, 29, 47, 56, 110, 1199'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'block_name shoule be Basicblock or Bottleneck'", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "num_filters", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_filters", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "num_filters", "[", "1", "]", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "num_filters", "[", "2", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "num_filters", "[", "3", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "num_filters", "[", "3", "]", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.ResNet._make_layer": [[138, 154], ["list", "list.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "list.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", "[", "]", ")", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "is_last", "=", "(", "blocks", "==", "1", ")", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "is_last", "=", "(", "i", "==", "blocks", "-", "1", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.ResNet.get_feat_modules": [[155, 164], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_feat_modules", "(", "self", ")", ":", "\n", "        ", "feat_m", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "conv1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "bn1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "relu", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer2", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer3", ")", "\n", "return", "feat_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.ResNet.get_bn_before_relu": [[165, 178], ["isinstance", "isinstance", "NotImplementedError"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn3", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn3", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn3", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn2", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ResNet unknown block error !!!'", ")", "\n", "\n", "", "return", "[", "bn1", ",", "bn2", ",", "bn3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.ResNet.forward": [[179, 204], ["resnet_cifar.ResNet.conv1", "resnet_cifar.ResNet.bn1", "resnet_cifar.ResNet.relu", "resnet_cifar.ResNet.layer1", "resnet_cifar.ResNet.layer2", "resnet_cifar.ResNet.layer3", "resnet_cifar.ResNet.avgpool", "resnet_cifar.ResNet.view", "resnet_cifar.ResNet.fc", "resnet_cifar.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "preact", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "f0", "=", "x", "\n", "\n", "x", ",", "f1_pre", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "f1", "=", "x", "\n", "x", ",", "f2_pre", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "f2", "=", "x", "\n", "x", ",", "f3_pre", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "f3", "=", "x", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "f4", "=", "x", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "is_feat", ":", "\n", "            ", "if", "preact", ":", "\n", "                ", "return", "[", "f0", ",", "f1_pre", ",", "f2_pre", ",", "f3_pre", ",", "f4", "]", ",", "x", "\n", "", "else", ":", "\n", "                ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "x", "\n", "", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet8": [[206, 208], ["resnet_cifar.ResNet"], "function", ["None"], ["", "", "", "def", "resnet8", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "8", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet14": [[210, 212], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet14", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "14", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet20": [[214, 216], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "20", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet32": [[218, 220], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "32", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet44": [[222, 224], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "44", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet56": [[226, 228], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "56", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet110": [[230, 232], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "110", ",", "[", "16", ",", "16", ",", "32", ",", "64", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet8x4": [[234, 236], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet8x4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "8", ",", "[", "32", ",", "64", ",", "128", ",", "256", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet32x4": [[238, 240], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "resnet32x4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "32", ",", "[", "32", ",", "64", ",", "128", ",", "256", "]", ",", "'basicblock'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.build_resnet_backbone": [[241, 250], ["resnet_cifar.resnet20", "resnet_cifar.resnet32", "resnet_cifar.resnet56", "resnet_cifar.resnet110"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet20", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet32", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet56", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet110"], ["", "def", "build_resnet_backbone", "(", "depth", "=", "20", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "if", "depth", "==", "20", ":", "\n", "        ", "return", "resnet20", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "depth", "==", "32", ":", "\n", "        ", "return", "resnet32", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "depth", "==", "56", ":", "\n", "        ", "return", "resnet56", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "depth", "==", "110", ":", "\n", "        ", "return", "resnet110", "(", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.build_resnetx4_backbone": [[251, 256], ["resnet_cifar.resnet8x4", "resnet_cifar.resnet32x4"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet8x4", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.resnet32x4"], ["", "", "def", "build_resnetx4_backbone", "(", "depth", "=", "20", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "if", "depth", "==", "8", ":", "\n", "        ", "return", "resnet8x4", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "depth", "==", "32", ":", "\n", "        ", "return", "resnet32x4", "(", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleBlock.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleBlock.forward": [[14, 19], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.Bottleneck.__init__": [[22, 40], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv1.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "int", "(", "out_planes", "/", "4", ")", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.Bottleneck.forward": [[41, 54], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv1.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenetv1.Bottleneck.bn3", "shufflenetv1.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "shufflenetv1.Bottleneck.bn1", "shufflenetv1.Bottleneck.bn2", "shufflenetv1.Bottleneck.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv1.Bottleneck.conv1", "shufflenetv1.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", "if", "self", ".", "stride", "==", "2", "else", "out", "+", "res", "\n", "out", "=", "F", ".", "relu", "(", "preact", ")", "\n", "# out = F.relu(torch.cat([out, res], 1)) if self.stride == 2 else F.relu(out+res)", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleNet.__init__": [[57, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv1.ShuffleNet._make_layer", "shufflenetv1.ShuffleNet._make_layer", "shufflenetv1.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "shufflenetv1.ShuffleNet.to"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "num_classes", ")", "\n", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleNet._make_layer": [[72, 83], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenetv1.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "\n", "is_last", "=", "(", "i", "==", "num_blocks", "-", "1", ")", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleNet.get_feat_modules": [[84, 92], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_feat_modules", "(", "self", ")", ":", "\n", "        ", "feat_m", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "conv1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "bn1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer2", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer3", ")", "\n", "return", "feat_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleNet.get_bn_before_relu": [[93, 95], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'ShuffleNet currently is not supported for \"Overhaul\" teacher'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleNet.forward": [[96, 117], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv1.ShuffleNet.layer1", "shufflenetv1.ShuffleNet.layer2", "shufflenetv1.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv1.ShuffleNet.view", "shufflenetv1.ShuffleNet.linear", "shufflenetv1.ShuffleNet.bn1", "shufflenetv1.ShuffleNet.size", "shufflenetv1.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "preact", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "f0", "=", "out", "\n", "out", ",", "f1_pre", "=", "self", ".", "layer1", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", ",", "f2_pre", "=", "self", ".", "layer2", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", ",", "f3_pre", "=", "self", ".", "layer3", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "f4", "=", "out", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "if", "is_feat", ":", "\n", "            ", "if", "preact", ":", "\n", "                ", "return", "[", "f0", ",", "f1_pre", ",", "f2_pre", ",", "f3_pre", ",", "f4", "]", ",", "out", "\n", "", "else", ":", "\n", "                ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "out", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleV1": [[119, 126], ["shufflenetv1.ShuffleNet"], "function", ["None"], ["", "", "", "def", "ShuffleV1", "(", "**", "kwargs", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleBlock.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleBlock.forward": [[14, 19], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.SplitBlock.__init__": [[22, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.SplitBlock.forward": [[26, 29], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.BasicBlock.__init__": [[32, 47], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.BasicBlock.forward": [[48, 62], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "shufflenetv2.BasicBlock.bn3", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.conv3", "shufflenetv2.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "preact", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "preact", ")", "\n", "# out = F.relu(self.bn3(self.conv3(out)))", "\n", "preact", "=", "torch", ".", "cat", "(", "[", "x1", ",", "preact", "]", ",", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.DownBlock.__init__": [[65, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.DownBlock.forward": [[88, 100], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleNetV2.__init__": [[103, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "shufflenetv2.ShuffleNetV2.to"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "# self.conv1 = nn.Conv2d(3, 24, kernel_size=3,", "\n", "#                        stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleNetV2._make_layer": [[122, 128], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ",", "is_last", "=", "(", "i", "==", "num_blocks", "-", "1", ")", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleNetV2.get_feat_modules": [[129, 137], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_feat_modules", "(", "self", ")", ":", "\n", "        ", "feat_m", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "conv1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "bn1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer2", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer3", ")", "\n", "return", "feat_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleNetV2.get_bn_before_relu": [[138, 140], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'ShuffleNetV2 currently is not supported for \"Overhaul\" teacher'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleNetV2.forward": [[141, 163], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "preact", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "f0", "=", "out", "\n", "out", ",", "f1_pre", "=", "self", ".", "layer1", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", ",", "f2_pre", "=", "self", ".", "layer2", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", ",", "f3_pre", "=", "self", ".", "layer3", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "f4", "=", "out", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "if", "is_feat", ":", "\n", "            ", "if", "preact", ":", "\n", "                ", "return", "[", "f0", ",", "f1_pre", ",", "f2_pre", ",", "f3_pre", ",", "f4", "]", ",", "out", "\n", "", "else", ":", "\n", "                ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "out", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleV2": [[196, 199], ["shufflenetv2.ShuffleNetV2"], "function", ["None"], ["def", "ShuffleV2", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "net_size", "=", "1", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.BasicBlock.__init__": [[10, 24], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.BasicBlock.forward": [[24, 34], ["wide_resnet.BasicBlock.relu2", "wide_resnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.NetworkBlock.__init__": [[36, 39], ["torch.Module.__init__", "wide_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.NetworkBlock._make_layer": [[39, 44], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.NetworkBlock.forward": [[44, 46], ["wide_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.WideResNet.__init__": [[48, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet.WideResNet.forward": [[78, 89], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.block1", "wide_resnet.WideResNet.block2", "wide_resnet.WideResNet.block3", "wide_resnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.WideResNet.view", "wide_resnet.WideResNet.fc", "wide_resnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.BasicBlock.__init__": [[16, 28], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3"], ["from", "__future__", "import", "division", "\n", "from", "__future__", "import", "print_function", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "paddle", "\n", "from", "paddle", "import", "ParamAttr", "\n", "import", "paddle", ".", "nn", "as", "nn", "\n", "import", "paddle", ".", "nn", ".", "functional", "as", "F", "\n", "from", "paddle", ".", "nn", "import", "Conv2D", ",", "BatchNorm", ",", "Linear", ",", "Dropout", "\n", "from", "paddle", ".", "nn", "import", "AdaptiveAvgPool2D", ",", "MaxPool2D", ",", "AvgPool2D", "\n", "from", "paddle", ".", "nn", ".", "initializer", "import", "Uniform", "\n", "\n", "import", "math", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.BasicBlock.forward": [[30, 36], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["__all__", "=", "[", "\"ResNet18\"", ",", "\"ResNet34\"", ",", "\"ResNet50\"", ",", "\"ResNet101\"", ",", "\"ResNet152\"", "]", "\n", "\n", "\n", "class", "ConvBNLayer", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.Bottleneck.__init__": [[41, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "ConvBNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_conv", "=", "Conv2D", "(", "\n", "in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "num_filters", ",", "\n", "kernel_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "bias_attr", "=", "False", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "_batch_norm", "=", "BatchNorm", "(", "\n", "num_filters", ",", "act", "=", "act", ",", "data_layout", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.Bottleneck.forward": [[57, 64], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["        ", "y", "=", "self", ".", "_conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "_batch_norm", "(", "y", ")", "\n", "return", "y", "\n", "\n", "\n", "", "", "class", "BottleneckBlock", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet.__init__": [[67, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer"], ["shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "\"relu\"", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet.forward": [[87, 98], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["self", ".", "conv2", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.conv3x3": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet18": [[100, 102], ["resnet.ResNet"], "function", ["None"], ["data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet34": [[103, 105], ["resnet.ResNet"], "function", ["None"], ["\n", "self", ".", "_num_channels_out", "=", "num_filters", "*", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet50": [[106, 108], ["resnet.ResNet"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet101": [[109, 111], ["resnet.ResNet"], "function", ["None"], ["conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.ResNet152": [[112, 114], ["resnet.ResNet"], "function", ["None"], ["            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet.test_resnet": [[115, 119], ["resnet.ResNet50", "ResNet50.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet50"], ["\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv2", ")", "\n", "# get feature map before ", "\n", "if", "not", "self", ".", "is_last", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "y", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.BasicBlock.__init__": [[15, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.BasicBlock.forward": [[30, 40], ["torch.relu", "torch.relu", "torch.relu", "resnetv2_cifar.BasicBlock.bn2", "resnetv2_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnetv2_cifar.BasicBlock.bn1", "resnetv2_cifar.BasicBlock.conv2", "resnetv2_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.Bottleneck.__init__": [[45, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.Bottleneck.forward": [[62, 73], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnetv2_cifar.Bottleneck.bn3", "resnetv2_cifar.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnetv2_cifar.Bottleneck.bn1", "resnetv2_cifar.Bottleneck.bn2", "resnetv2_cifar.Bottleneck.conv3", "resnetv2_cifar.Bottleneck.conv1", "resnetv2_cifar.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet.__init__": [[76, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnetv2_cifar.ResNet._make_layer", "resnetv2_cifar.ResNet._make_layer", "resnetv2_cifar.ResNet._make_layer", "resnetv2_cifar.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnetv2_cifar.ResNet.modules", "resnetv2_cifar.ResNet.to", "isinstance", "resnetv2_cifar.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "", "", "", "self", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet.get_feat_modules": [[107, 116], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_feat_modules", "(", "self", ")", ":", "\n", "        ", "feat_m", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "conv1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "bn1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer1", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer2", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer3", ")", "\n", "feat_m", ".", "append", "(", "self", ".", "layer4", ")", "\n", "return", "feat_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet.get_bn_before_relu": [[117, 132], ["isinstance", "isinstance", "NotImplementedError"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn3", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn3", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn3", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn3", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn2", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn2", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ResNet unknown block error !!!'", ")", "\n", "\n", "", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet._make_layer": [[133, 141], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ",", "i", "==", "num_blocks", "-", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet.forward": [[142, 164], ["torch.relu", "torch.relu", "torch.relu", "resnetv2_cifar.ResNet.layer1", "resnetv2_cifar.ResNet.layer2", "resnetv2_cifar.ResNet.layer3", "resnetv2_cifar.ResNet.layer4", "resnetv2_cifar.ResNet.avgpool", "resnetv2_cifar.ResNet.view", "resnetv2_cifar.ResNet.linear", "resnetv2_cifar.ResNet.bn1", "resnetv2_cifar.ResNet.size", "resnetv2_cifar.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "preact", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "f0", "=", "out", "\n", "out", ",", "f1_pre", "=", "self", ".", "layer1", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", ",", "f2_pre", "=", "self", ".", "layer2", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", ",", "f3_pre", "=", "self", ".", "layer3", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", ",", "f4_pre", "=", "self", ".", "layer4", "(", "out", ")", "\n", "f4", "=", "out", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "f5", "=", "out", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "if", "is_feat", ":", "\n", "            ", "if", "preact", ":", "\n", "                ", "return", "[", "[", "f0", ",", "f1_pre", ",", "f2_pre", ",", "f3_pre", ",", "f4_pre", ",", "f5", "]", ",", "out", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", ",", "f5", "]", ",", "out", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet18": [[166, 168], ["resnetv2_cifar.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet34": [[170, 172], ["resnetv2_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet50": [[174, 176], ["resnetv2_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet101": [[178, 180], ["resnetv2_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet152": [[182, 184], ["resnetv2_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.ABF.__init__": [[21, 40], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_"], ["from", "paddle", "import", "nn", "\n", "from", "paddle", "import", "ParamAttr", "\n", "import", "paddle", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "from", "ppcls", ".", "utils", ".", "initializer", "import", "kaiming_normal_", ",", "kaiming_uniform_", "\n", "\n", "from", ".", "mobilenet_v1", "import", "MobileNet", "\n", "\n", "class", "ABF", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel", ",", "fuse", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2D", "(", "\n", "in_channel", ",", "mid_channel", ",", "kernel_size", "=", "1", ",", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv1_bn", "=", "nn", ".", "BatchNorm2D", "(", "mid_channel", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2D", "(", "\n", "mid_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.ABF.forward": [[41, 57], ["reviewkd.ABF.conv1", "reviewkd.ABF.conv2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reviewkd.ABF.att_conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "z[].view", "z[].view"], "methods", ["None"], ["padding", "=", "1", ",", "\n", "bias_attr", "=", "False", ")", "\n", "self", ".", "conv2_bn", "=", "nn", ".", "BatchNorm2D", "(", "out_channel", ")", "\n", "if", "fuse", ":", "\n", "            ", "self", ".", "att_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2D", "(", "\n", "mid_channel", "*", "2", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att_conv", "=", "None", "\n", "\n", "", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "init_params", "(", "self", ",", ")", ":", "\n", "        ", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ",", "a", "=", "1", ")", "\n", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.ReviewKD.__init__": [[59, 74], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "min", "enumerate", "reviewkd.ReviewKD.to", "torch.nn.ModuleList.append", "reviewkd.ABF", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# transform student features", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_bn", "(", "x", ")", "\n", "if", "self", ".", "att_conv", "is", "not", "None", ":", "\n", "# upsample residual features", "\n", "            ", "y", "=", "F", ".", "interpolate", "(", "y", ",", "(", "shape", ",", "shape", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "# fusion", "\n", "z", "=", "paddle", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "z", "=", "self", ".", "att_conv", "(", "z", ")", "\n", "x", "=", "(", "x", "*", "z", "[", ":", ",", "0", "]", ".", "reshape", "(", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", "+", "y", "*", "z", "[", ":", ",", "1", "]", ".", "reshape", "(", "\n", "[", "n", ",", "1", ",", "h", ",", "w", "]", ")", ")", "\n", "", "y", "=", "self", ".", "conv2", "(", "x", ")", "\n", "y", "=", "self", ".", "conv2_bn", "(", "y", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.ReviewKD.forward": [[75, 87], ["reviewkd.ReviewKD.student", "results.append", "zip", "abf", "results.insert"], "methods", ["None"], ["\n", "", "", "class", "ReviewKD", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "student", ",", "\n", "student_args", "=", "dict", "(", ")", ",", "\n", "in_channels", "=", "[", "]", ",", "\n", "out_channels", "=", "[", "]", ",", "\n", "mid_channel", "=", "[", "]", ",", "\n", "feat_keepkeys", "=", "[", "]", ",", "\n", "**", "kargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shapes", "=", "[", "1", ",", "7", ",", "14", ",", "28", ",", "56", "]", "\n", "self", ".", "student", "=", "eval", "(", "student", ")", "(", "**", "student_args", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.build_review_kd": [[90, 159], ["reviewkd.ReviewKD", "resnet_cifar.build_resnetx4_backbone", "resnet.ResNet50", "int", "resnet_cifar.build_resnet_backbone", "build_vgg_backbone", "int", "mobile_half", "int", "shufflenetv1.ShuffleV1", "shufflenetv2.ShuffleV2", "wide_resnet_cifar.wrn", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.build_resnetx4_backbone", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnetv2_cifar.ResNet50", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.resnet_cifar.build_resnet_backbone", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv1.ShuffleV1", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.shufflenetv2.ShuffleV2", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.wide_resnet_cifar.wrn"], ["abfs", "=", "nn", ".", "LayerList", "(", ")", "\n", "\n", "for", "idx", ",", "in_channel", "in", "enumerate", "(", "in_channels", ")", ":", "\n", "            ", "abfs", ".", "append", "(", "\n", "ABF", "(", "in_channel", ",", "mid_channel", ",", "out_channels", "[", "idx", "]", ",", "idx", "<", "len", "(", "\n", "in_channels", ")", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "abfs", "=", "abfs", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "student_features", "=", "self", ".", "student", "(", "x", ",", "is_feat", "=", "True", ")", "\n", "logit", "=", "student_features", "[", "1", "]", "\n", "x", "=", "student_features", "[", "0", "]", "[", ":", ":", "-", "1", "]", "\n", "results", "=", "[", "]", "\n", "out_features", ",", "res_features", "=", "self", ".", "abfs", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "out_features", ")", "\n", "for", "features", ",", "abf", ",", "shape", "in", "zip", "(", "x", "[", "1", ":", "]", ",", "self", ".", "abfs", "[", "1", ":", "]", ",", "self", ".", "shapes", "[", "1", ":", "]", ")", ":", "\n", "            ", "out_features", ",", "res_features", "=", "abf", "(", "features", ",", "res_features", ",", "shape", ")", "\n", "results", ".", "insert", "(", "0", ",", "out_features", ")", "\n", "\n", "", "return", "{", "\"feats\"", ":", "results", ",", "\"logits\"", ":", "logit", "}", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "in_channels", "=", "[", "128", ",", "256", ",", "512", ",", "1024", ",", "1024", "]", "\n", "out_channels", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", ",", "2048", "]", "\n", "mid_channel", "=", "256", "\n", "student", "=", "\"MobileNet\"", "\n", "student_args", "=", "{", "}", "\n", "review_kd", "=", "ReviewKD", "(", "\n", "student", ",", "\n", "student_args", "=", "student_args", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "mid_channel", "=", "mid_channel", ")", "\n", "\n", "x", "=", "paddle", ".", "rand", "(", "[", "1", ",", "3", ",", "224", ",", "224", "]", ")", "\n", "\n", "results", ",", "logits", "=", "review_kd", "(", "x", ")", "\n", "for", "r", "in", "results", ":", "\n", "        ", "print", "(", "r", ".", "shape", ")", "\n", "", "print", "(", "\"=====ligits====\"", ")", "\n", "print", "(", "logits", ".", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.reviewkd.hcl": [[160, 178], ["zip", "torch.mse_loss", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.mse_loss"], "function", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.__init__": [[35, 84], ["torch.nn.Module.__init__", "rcnn.ReviewKD.register_buffer", "rcnn.ReviewKD.register_buffer", "rcnn.ReviewKD.register_buffer", "rcnn.ReviewKD.register_buffer", "kd_trans.build_kd_trans", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.build_kd_trans"], ["@", "configurable", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "backbone", ":", "Backbone", ",", "\n", "proposal_generator", ":", "nn", ".", "Module", ",", "\n", "roi_heads", ":", "nn", ".", "Module", ",", "\n", "pixel_mean", ":", "Tuple", "[", "float", "]", ",", "\n", "pixel_std", ":", "Tuple", "[", "float", "]", ",", "\n", "teacher_pixel_mean", ":", "Tuple", "[", "float", "]", ",", "\n", "teacher_pixel_std", ":", "Tuple", "[", "float", "]", ",", "\n", "teacher", ":", "nn", ".", "Module", ",", "\n", "kd_args", ",", "\n", "input_format", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "teacher_input_format", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "vis_period", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            backbone: a backbone module, must follow detectron2's backbone interface\n            proposal_generator: a module that generates proposals using backbone features\n            roi_heads: a ROI head that performs per-region computation\n            pixel_mean, pixel_std: list or tuple with #channels element, representing\n                the per-channel mean and std to be used to normalize the input image\n            input_format: describe the meaning of channels of input. Needed by visualization\n            vis_period: the period to run visualization. Set to 0 to disable.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "proposal_generator", "=", "proposal_generator", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "kd_args", "=", "kd_args", "\n", "if", "self", ".", "kd_args", ".", "USE_REVIEWKD", ":", "\n", "            ", "self", ".", "kd_trans", "=", "build_kd_trans", "(", "self", ".", "kd_args", ")", "\n", "\n", "", "self", ".", "input_format", "=", "input_format", "\n", "self", ".", "teacher_input_format", "=", "teacher_input_format", "\n", "self", ".", "vis_period", "=", "vis_period", "\n", "if", "vis_period", ">", "0", ":", "\n", "            ", "assert", "input_format", "is", "not", "None", ",", "\"input_format is required for visualization!\"", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"pixel_mean\"", ",", "torch", ".", "tensor", "(", "pixel_mean", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"pixel_std\"", ",", "torch", ".", "tensor", "(", "pixel_std", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"teacher_pixel_mean\"", ",", "torch", ".", "tensor", "(", "teacher_pixel_mean", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"teacher_pixel_std\"", ",", "torch", ".", "tensor", "(", "teacher_pixel_std", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "assert", "(", "\n", "self", ".", "pixel_mean", ".", "shape", "==", "self", ".", "pixel_std", ".", "shape", "\n", ")", ",", "f\"{self.pixel_mean} and {self.pixel_std} have different shapes!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.from_config": [[85, 101], ["detectron2.modeling.backbone.build_backbone", "detectron2.modeling.proposal_generator.build_proposal_generator", "detectron2.modeling.roi_heads.build_roi_heads", "teacher.build_teacher", "detectron2.modeling.backbone.build_backbone.output_shape", "detectron2.modeling.backbone.build_backbone.output_shape"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.teacher.teacher.build_teacher", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ")", ":", "\n", "        ", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "return", "{", "\n", "\"backbone\"", ":", "backbone", ",", "\n", "\"proposal_generator\"", ":", "build_proposal_generator", "(", "cfg", ",", "backbone", ".", "output_shape", "(", ")", ")", ",", "\n", "\"roi_heads\"", ":", "build_roi_heads", "(", "cfg", ",", "backbone", ".", "output_shape", "(", ")", ")", ",", "\n", "\"input_format\"", ":", "cfg", ".", "INPUT", ".", "FORMAT", ",", "\n", "\"vis_period\"", ":", "cfg", ".", "VIS_PERIOD", ",", "\n", "\"pixel_mean\"", ":", "cfg", ".", "MODEL", ".", "PIXEL_MEAN", ",", "\n", "\"pixel_std\"", ":", "cfg", ".", "MODEL", ".", "PIXEL_STD", ",", "\n", "\"kd_args\"", ":", "cfg", ".", "KD", ",", "\n", "\"teacher\"", ":", "build_teacher", "(", "cfg", ")", ",", "\n", "\"teacher_input_format\"", ":", "cfg", ".", "TEACHER", ".", "INPUT", ".", "FORMAT", ",", "\n", "\"teacher_pixel_mean\"", ":", "cfg", ".", "TEACHER", ".", "MODEL", ".", "PIXEL_MEAN", ",", "\n", "\"teacher_pixel_std\"", ":", "cfg", ".", "TEACHER", ".", "MODEL", ".", "PIXEL_STD", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.device": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pixel_mean", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.visualize_training": [[108, 142], ["detectron2.utils.events.get_event_storage", "zip", "detectron2.data.detection_utils.convert_image_to_rgb", "Visualizer", "v_gt.overlay_instances.overlay_instances.overlay_instances", "v_gt.overlay_instances.overlay_instances.get_image", "min", "Visualizer", "v_pred.overlay_instances.overlay_instances.overlay_instances", "v_pred.overlay_instances.overlay_instances.get_image", "numpy.concatenate", "vis_img.transpose.transpose.transpose", "detectron2.utils.events.get_event_storage.put_image", "detectron2.data.detection_utils.convert_image_to_rgb.permute", "len", "prop.proposal_boxes[].tensor.cpu().numpy", "prop.proposal_boxes[].tensor.cpu"], "methods", ["None"], ["", "def", "visualize_training", "(", "self", ",", "batched_inputs", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        A function used to visualize images and proposals. It shows ground truth\n        bounding boxes on the original image and up to 20 top-scoring predicted\n        object proposals on the original image. Users can implement different\n        visualization functions for different models.\n\n        Args:\n            batched_inputs (list): a list that contains input to the model.\n            proposals (list): a list that contains predicted proposals. Both\n                batched_inputs and proposals should have the same length.\n        \"\"\"", "\n", "from", "detectron2", ".", "utils", ".", "visualizer", "import", "Visualizer", "\n", "\n", "storage", "=", "get_event_storage", "(", ")", "\n", "max_vis_prop", "=", "20", "\n", "\n", "for", "input", ",", "prop", "in", "zip", "(", "batched_inputs", ",", "proposals", ")", ":", "\n", "            ", "img", "=", "input", "[", "\"image\"", "]", "\n", "img", "=", "convert_image_to_rgb", "(", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "self", ".", "input_format", ")", "\n", "v_gt", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_gt", "=", "v_gt", ".", "overlay_instances", "(", "boxes", "=", "input", "[", "\"instances\"", "]", ".", "gt_boxes", ")", "\n", "anno_img", "=", "v_gt", ".", "get_image", "(", ")", "\n", "box_size", "=", "min", "(", "len", "(", "prop", ".", "proposal_boxes", ")", ",", "max_vis_prop", ")", "\n", "v_pred", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_pred", "=", "v_pred", ".", "overlay_instances", "(", "\n", "boxes", "=", "prop", ".", "proposal_boxes", "[", "0", ":", "box_size", "]", ".", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "prop_img", "=", "v_pred", ".", "get_image", "(", ")", "\n", "vis_img", "=", "np", ".", "concatenate", "(", "(", "anno_img", ",", "prop_img", ")", ",", "axis", "=", "1", ")", "\n", "vis_img", "=", "vis_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "vis_name", "=", "\"Left: GT bounding boxes;  Right: Predicted proposals\"", "\n", "storage", ".", "put_image", "(", "vis_name", ",", "vis_img", ")", "\n", "break", "# only visualize one image in a batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.forward": [[143, 204], ["rcnn.ReviewKD.preprocess_image", "rcnn.ReviewKD.backbone", "rcnn.ReviewKD.roi_heads", "losses.update", "losses.update", "rcnn.ReviewKD.inference", "rcnn.ReviewKD.teacher_preprocess_image", "rcnn.ReviewKD.teacher.backbone", "rcnn.ReviewKD.kd_trans", "rcnn.ReviewKD.proposal_generator", "detectron2.utils.events.get_event_storage", "x[].to", "kd_trans.hcl", "x[].to", "rcnn.ReviewKD.visualize_training"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.preprocess_image", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.teacher_preprocess_image", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.hcl", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.visualize_training"], ["", "", "def", "forward", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batched_inputs: a list, batched outputs of :class:`DatasetMapper` .\n                Each item in the list contains the inputs for one image.\n                For now, each item in the list is a dict that contains:\n\n                * image: Tensor, image in (C, H, W) format.\n                * instances (optional): groundtruth :class:`Instances`\n                * proposals (optional): :class:`Instances`, precomputed proposals.\n\n                Other information that's included in the original dicts, such as:\n\n                * \"height\", \"width\" (int): the output resolution of the model, used in inference.\n                  See :meth:`postprocess` for details.\n\n        Returns:\n            list[dict]:\n                Each dict is the output for one input image.\n                The dict contains one key \"instances\" whose value is a :class:`Instances`.\n                The :class:`Instances` object has the following keys:\n                \"pred_boxes\", \"pred_classes\", \"scores\", \"pred_masks\", \"pred_keypoints\"\n        \"\"\"", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "inference", "(", "batched_inputs", ")", "\n", "\n", "", "images", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "if", "\"instances\"", "in", "batched_inputs", "[", "0", "]", ":", "\n", "            ", "gt_instances", "=", "[", "x", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "", "else", ":", "\n", "            ", "gt_instances", "=", "None", "\n", "\n", "", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensor", ")", "\n", "losses", "=", "{", "}", "\n", "\n", "if", "self", ".", "kd_args", ".", "USE_REVIEWKD", ":", "\n", "            ", "teacher_images", "=", "self", ".", "teacher_preprocess_image", "(", "batched_inputs", ")", "\n", "t_features", "=", "self", ".", "teacher", ".", "backbone", "(", "teacher_images", ".", "tensor", ")", "\n", "t_features", "=", "[", "t_features", "[", "f", "]", "for", "f", "in", "t_features", "]", "\n", "s_features", "=", "[", "features", "[", "f", "]", "for", "f", "in", "features", "]", "\n", "s_features", "=", "self", ".", "kd_trans", "(", "s_features", ")", "\n", "\n", "losses", "[", "'loss_ReviewKD'", "]", "=", "hcl", "(", "s_features", ",", "t_features", ")", "*", "self", ".", "kd_args", ".", "REVIEWKD_LOSS_WEIGHT", "\n", "\n", "\n", "", "if", "self", ".", "proposal_generator", "is", "not", "None", ":", "\n", "            ", "proposals", ",", "proposal_losses", "=", "self", ".", "proposal_generator", "(", "images", ",", "features", ",", "gt_instances", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"proposals\"", "in", "batched_inputs", "[", "0", "]", "\n", "proposals", "=", "[", "x", "[", "\"proposals\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "proposal_losses", "=", "{", "}", "\n", "\n", "", "_", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "images", ",", "features", ",", "proposals", ",", "gt_instances", ")", "\n", "if", "self", ".", "vis_period", ">", "0", ":", "\n", "            ", "storage", "=", "get_event_storage", "(", ")", "\n", "if", "storage", ".", "iter", "%", "self", ".", "vis_period", "==", "0", ":", "\n", "                ", "self", ".", "visualize_training", "(", "batched_inputs", ",", "proposals", ")", "\n", "\n", "", "", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.inference": [[205, 250], ["rcnn.ReviewKD.preprocess_image", "rcnn.ReviewKD.backbone", "rcnn.ReviewKD.roi_heads", "rcnn.ReviewKD.roi_heads.forward_with_given_boxes", "rcnn.ReviewKD._postprocess", "rcnn.ReviewKD.proposal_generator", "x.to", "torch.jit.is_scripting", "x[].to"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.preprocess_image", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD._postprocess"], ["", "def", "inference", "(", "\n", "self", ",", "\n", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "detected_instances", ":", "Optional", "[", "List", "[", "Instances", "]", "]", "=", "None", ",", "\n", "do_postprocess", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Run inference on the given inputs.\n\n        Args:\n            batched_inputs (list[dict]): same as in :meth:`forward`\n            detected_instances (None or list[Instances]): if not None, it\n                contains an `Instances` object per image. The `Instances`\n                object contains \"pred_boxes\" and \"pred_classes\" which are\n                known boxes in the image.\n                The inference will then skip the detection of bounding boxes,\n                and only predict other per-ROI outputs.\n            do_postprocess (bool): whether to apply post-processing on the outputs.\n\n        Returns:\n            When do_postprocess=True, same as in :meth:`forward`.\n            Otherwise, a list[Instances] containing raw network outputs.\n        \"\"\"", "\n", "assert", "not", "self", ".", "training", "\n", "\n", "images", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensor", ")", "\n", "\n", "if", "detected_instances", "is", "None", ":", "\n", "            ", "if", "self", ".", "proposal_generator", "is", "not", "None", ":", "\n", "                ", "proposals", ",", "_", "=", "self", ".", "proposal_generator", "(", "images", ",", "features", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "assert", "\"proposals\"", "in", "batched_inputs", "[", "0", "]", "\n", "proposals", "=", "[", "x", "[", "\"proposals\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "\n", "", "results", ",", "_", "=", "self", ".", "roi_heads", "(", "images", ",", "features", ",", "proposals", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "detected_instances", "=", "[", "x", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "detected_instances", "]", "\n", "results", "=", "self", ".", "roi_heads", ".", "forward_with_given_boxes", "(", "features", ",", "detected_instances", ")", "\n", "\n", "", "if", "do_postprocess", ":", "\n", "            ", "assert", "not", "torch", ".", "jit", ".", "is_scripting", "(", ")", ",", "\"Scripting is not supported for postprocess.\"", "\n", "return", "ReviewKD", ".", "_postprocess", "(", "results", ",", "batched_inputs", ",", "images", ".", "image_sizes", ")", "\n", "", "else", ":", "\n", "            ", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.preprocess_image": [[251, 259], ["detectron2.structures.ImageList.from_tensors", "x[].to"], "methods", ["None"], ["", "", "def", "preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "[", "(", "x", "-", "self", ".", "pixel_mean", ")", "/", "self", ".", "pixel_std", "for", "x", "in", "images", "]", "\n", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "return", "images", "\n", "", "def", "teacher_preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD.teacher_preprocess_image": [[259, 269], ["detectron2.structures.ImageList.from_tensors", "x[].to", "x.index_select", "torch.LongTensor().to", "torch.LongTensor"], "methods", ["None"], ["", "def", "teacher_preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "[", "(", "x", "-", "self", ".", "teacher_pixel_mean", ")", "/", "self", ".", "teacher_pixel_std", "for", "x", "in", "images", "]", "\n", "if", "self", ".", "input_format", "!=", "self", ".", "teacher_input_format", ":", "\n", "            ", "images", "=", "[", "x", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", ",", "0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "for", "x", "in", "images", "]", "\n", "", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.rcnn.ReviewKD._postprocess": [[271, 286], ["zip", "input_per_image.get", "input_per_image.get", "detectron2.modeling.postprocessing.detector_postprocess", "processed_results.append"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get"], ["", "@", "staticmethod", "\n", "def", "_postprocess", "(", "instances", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Rescale the output instances to the target size.\n        \"\"\"", "\n", "# note: private function; subject to changes", "\n", "processed_results", "=", "[", "]", "\n", "for", "results_per_image", ",", "input_per_image", ",", "image_size", "in", "zip", "(", "\n", "instances", ",", "batched_inputs", ",", "image_sizes", "\n", ")", ":", "\n", "            ", "height", "=", "input_per_image", ".", "get", "(", "\"height\"", ",", "image_size", "[", "0", "]", ")", "\n", "width", "=", "input_per_image", ".", "get", "(", "\"width\"", ",", "image_size", "[", "1", "]", ")", "\n", "r", "=", "detector_postprocess", "(", "results_per_image", ",", "height", ",", "width", ")", "\n", "processed_results", ".", "append", "(", "{", "\"instances\"", ":", "r", "}", ")", "\n", "", "return", "processed_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.config.add_distillation_cfg": [[7, 21], ["detectron2.config.CfgNode", "detectron2.config.CfgNode", "config.add_teacher_cfg"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.config.add_teacher_cfg"], ["#     http://www.apache.org/licenses/LICENSE-2.0", "\n", "#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "import", "os", "\n", "\n", "import", "yaml", "\n", "\n", "from", "ppcls", ".", "utils", "import", "check", "\n", "from", "ppcls", ".", "utils", "import", "logger", "\n", "\n", "__all__", "=", "[", "'get_config'", "]", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.config.add_teacher_cfg": [[23, 632], ["detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "tuple", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "detectron2.config.CfgNode", "range"], "function", ["None"], ["\n", "class", "AttrDict", "(", "dict", ")", ":", "\n", "    ", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", "[", "key", "]", "\n", "\n", "", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", "[", "key", "]", "=", "value", "\n", "\n", "\n", "", "", "", "def", "create_attr_dict", "(", "yaml_config", ")", ":", "\n", "    ", "from", "ast", "import", "literal_eval", "\n", "for", "key", ",", "value", "in", "yaml_config", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "value", ")", "is", "dict", ":", "\n", "            ", "yaml_config", "[", "key", "]", "=", "value", "=", "AttrDict", "(", "value", ")", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "pass", "\n", "", "", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "            ", "create_attr_dict", "(", "yaml_config", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "            ", "yaml_config", "[", "key", "]", "=", "value", "\n", "\n", "\n", "", "", "", "def", "parse_config", "(", "cfg_file", ")", ":", "\n", "    ", "\"\"\"Load a config file into AttrDict\"\"\"", "\n", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "fopen", ":", "\n", "        ", "yaml_config", "=", "AttrDict", "(", "yaml", ".", "load", "(", "fopen", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", ")", "\n", "", "create_attr_dict", "(", "yaml_config", ")", "\n", "return", "yaml_config", "\n", "\n", "\n", "", "def", "print_dict", "(", "d", ",", "delimiter", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Recursively visualize a dict and\n    indenting acrrording by the relationship of keys.\n    \"\"\"", "\n", "placeholder", "=", "\"-\"", "*", "60", "\n", "for", "k", ",", "v", "in", "sorted", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : \"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "k", ",", "\"HEADER\"", ")", ")", ")", "\n", "print_dict", "(", "v", ",", "delimiter", "+", "4", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">=", "1", "and", "isinstance", "(", "v", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : \"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "str", "(", "k", ")", ",", "\"HEADER\"", ")", ")", ")", "\n", "for", "value", "in", "v", ":", "\n", "                ", "print_dict", "(", "value", ",", "delimiter", "+", "4", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}{} : {}\"", ".", "format", "(", "delimiter", "*", "\" \"", ",", "\n", "logger", ".", "coloring", "(", "k", ",", "\"HEADER\"", ")", ",", "\n", "logger", ".", "coloring", "(", "v", ",", "\"OKGREEN\"", ")", ")", ")", "\n", "\n", "", "if", "k", ".", "isupper", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "placeholder", ")", "\n", "\n", "\n", "", "", "", "def", "print_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    visualize configs\n\n    Arguments:\n        config: configs\n    \"\"\"", "\n", "logger", ".", "advertise", "(", ")", "\n", "print_dict", "(", "config", ")", "\n", "\n", "\n", "", "def", "check_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Check config\n    \"\"\"", "\n", "check", ".", "check_version", "(", ")", "\n", "\n", "use_gpu", "=", "config", ".", "get", "(", "'use_gpu'", ",", "True", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "check", ".", "check_gpu", "(", ")", "\n", "\n", "", "architecture", "=", "config", ".", "get", "(", "'ARCHITECTURE'", ")", "\n", "check", ".", "check_architecture", "(", "architecture", ")", "\n", "\n", "use_mix", "=", "config", ".", "get", "(", "'use_mix'", ",", "False", ")", "\n", "check", ".", "check_mix", "(", "architecture", ",", "use_mix", ")", "\n", "\n", "classes_num", "=", "config", ".", "get", "(", "'classes_num'", ")", "\n", "check", ".", "check_classes_num", "(", "classes_num", ")", "\n", "\n", "mode", "=", "config", ".", "get", "(", "'mode'", ",", "'train'", ")", "\n", "if", "mode", ".", "lower", "(", ")", "==", "'train'", ":", "\n", "        ", "check", ".", "check_function_params", "(", "config", ",", "'LEARNING_RATE'", ")", "\n", "check", ".", "check_function_params", "(", "config", ",", "'OPTIMIZER'", ")", "\n", "\n", "\n", "", "", "def", "override", "(", "dl", ",", "ks", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Recursively replace dict of list\n\n    Args:\n        dl(dict or list): dict or list to be replaced\n        ks(list): list of keys\n        v(str): value to be replaced\n    \"\"\"", "\n", "\n", "def", "str2num", "(", "v", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "eval", "(", "v", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "v", "\n", "\n", "", "", "assert", "isinstance", "(", "dl", ",", "(", "list", ",", "dict", ")", ")", ",", "(", "\"{} should be a list or a dict\"", ")", "\n", "assert", "len", "(", "ks", ")", ">", "0", ",", "(", "'lenght of keys should larger than 0'", ")", "\n", "if", "isinstance", "(", "dl", ",", "list", ")", ":", "\n", "        ", "k", "=", "str2num", "(", "ks", "[", "0", "]", ")", "\n", "if", "len", "(", "ks", ")", "==", "1", ":", "\n", "            ", "assert", "k", "<", "len", "(", "dl", ")", ",", "(", "'index({}) out of range({})'", ".", "format", "(", "k", ",", "dl", ")", ")", "\n", "dl", "[", "k", "]", "=", "str2num", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "override", "(", "dl", "[", "k", "]", ",", "ks", "[", "1", ":", "]", ",", "v", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "ks", ")", "==", "1", ":", "\n", "# assert ks[0] in dl, ('{} is not exist in {}'.format(ks[0], dl))", "\n", "            ", "if", "not", "ks", "[", "0", "]", "in", "dl", ":", "\n", "                ", "logger", ".", "warning", "(", "'A new filed ({}) detected!'", ".", "format", "(", "ks", "[", "0", "]", ",", "dl", ")", ")", "\n", "", "dl", "[", "ks", "[", "0", "]", "]", "=", "str2num", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "override", "(", "dl", "[", "ks", "[", "0", "]", "]", ",", "ks", "[", "1", ":", "]", ",", "v", ")", "\n", "\n", "\n", "", "", "", "def", "override_config", "(", "config", ",", "options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Recursively override the config\n\n    Args:\n        config(dict): dict to be replaced\n        options(list): list of pairs(key0.key1.idx.key2=value)\n            such as: [\n                'topk=2',\n                'VALID.transforms.1.ResizeImage.resize_short=300'\n            ]\n\n    Returns:\n        config(dict): replaced config\n    \"\"\"", "\n", "if", "options", "is", "not", "None", ":", "\n", "        ", "for", "opt", "in", "options", ":", "\n", "            ", "assert", "isinstance", "(", "opt", ",", "str", ")", ",", "(", "\n", "\"option({}) should be a str\"", ".", "format", "(", "opt", ")", ")", "\n", "assert", "\"=\"", "in", "opt", ",", "(", "\n", "\"option({}) should contain a =\"", "\n", "\"to distinguish between key and value\"", ".", "format", "(", "opt", ")", ")", "\n", "pair", "=", "opt", ".", "split", "(", "'='", ")", "\n", "assert", "len", "(", "pair", ")", "==", "2", ",", "(", "\"there can be only a = in the option\"", ")", "\n", "key", ",", "value", "=", "pair", "\n", "keys", "=", "key", ".", "split", "(", "'.'", ")", "\n", "override", "(", "config", ",", "keys", ",", "value", ")", "\n", "\n", "", "", "return", "config", "\n", "\n", "\n", "", "def", "get_config", "(", "fname", ",", "overrides", "=", "None", ",", "show", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Read config from file\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "(", "\n", "'config file({}) is not exist'", ".", "format", "(", "fname", ")", ")", "\n", "config", "=", "parse_config", "(", "fname", ")", "\n", "override_config", "(", "config", ",", "overrides", ")", "\n", "if", "show", ":", "\n", "        ", "print_config", "(", "config", ")", "\n", "", "check_config", "(", "config", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.__init__": [[51, 174], ["torch.nn.Module.__init__", "retinanet.ReviewKDRetinaNet.register_buffer", "retinanet.ReviewKDRetinaNet.register_buffer", "retinanet.ReviewKDRetinaNet.register_buffer", "retinanet.ReviewKDRetinaNet.register_buffer", "len", "len", "logger.warning", "kd_trans.build_kd_trans", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "retinanet.ReviewKDRetinaNet.backbone.output_shape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.warning", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.build_kd_trans", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape"], ["@", "configurable", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "backbone", ":", "Backbone", ",", "\n", "head", ":", "nn", ".", "Module", ",", "\n", "head_in_features", ",", "\n", "anchor_generator", ",", "\n", "box2box_transform", ",", "\n", "anchor_matcher", ",", "\n", "num_classes", ",", "\n", "focal_loss_alpha", "=", "0.25", ",", "\n", "focal_loss_gamma", "=", "2.0", ",", "\n", "smooth_l1_beta", "=", "0.0", ",", "\n", "box_reg_loss_type", "=", "\"smooth_l1\"", ",", "\n", "test_score_thresh", "=", "0.05", ",", "\n", "test_topk_candidates", "=", "1000", ",", "\n", "test_nms_thresh", "=", "0.5", ",", "\n", "max_detections_per_image", "=", "100", ",", "\n", "pixel_mean", ",", "\n", "pixel_std", ",", "\n", "vis_period", "=", "0", ",", "\n", "input_format", "=", "\"BGR\"", ",", "\n", "teacher_pixel_mean", ":", "Tuple", "[", "float", "]", ",", "\n", "teacher_pixel_std", ":", "Tuple", "[", "float", "]", ",", "\n", "teacher", ":", "nn", ".", "Module", ",", "\n", "kd_args", ",", "\n", "teacher_input_format", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: this interface is experimental.\n\n        Args:\n            backbone: a backbone module, must follow detectron2's backbone interface\n            head (nn.Module): a module that predicts logits and regression deltas\n                for each level from a list of per-level features\n            head_in_features (Tuple[str]): Names of the input feature maps to be used in head\n            anchor_generator (nn.Module): a module that creates anchors from a\n                list of features. Usually an instance of :class:`AnchorGenerator`\n            box2box_transform (Box2BoxTransform): defines the transform from anchors boxes to\n                instance boxes\n            anchor_matcher (Matcher): label the anchors by matching them with ground truth.\n            num_classes (int): number of classes. Used to label background proposals.\n\n            # Loss parameters:\n            focal_loss_alpha (float): focal_loss_alpha\n            focal_loss_gamma (float): focal_loss_gamma\n            smooth_l1_beta (float): smooth_l1_beta\n            box_reg_loss_type (str): Options are \"smooth_l1\", \"giou\"\n\n            # Inference parameters:\n            test_score_thresh (float): Inference cls score threshold, only anchors with\n                score > INFERENCE_TH are considered for inference (to improve speed)\n            test_topk_candidates (int): Select topk candidates before NMS\n            test_nms_thresh (float): Overlap threshold used for non-maximum suppression\n                (suppress boxes with IoU >= this threshold)\n            max_detections_per_image (int):\n                Maximum number of detections to return per image during inference\n                (100 is based on the limit established for the COCO dataset).\n\n            # Input parameters\n            pixel_mean (Tuple[float]):\n                Values to be used for image normalization (BGR order).\n                To train on images of different number of channels, set different mean & std.\n                Default values are the mean pixel value from ImageNet: [103.53, 116.28, 123.675]\n            pixel_std (Tuple[float]):\n                When using pre-trained models in Detectron1 or any MSRA models,\n                std has been absorbed into its conv1 weights, so the std needs to be set 1.\n                Otherwise, you can use [57.375, 57.120, 58.395] (ImageNet std)\n            vis_period (int):\n                The period (in terms of steps) for minibatch visualization at train time.\n                Set to 0 to disable.\n            input_format (str): Whether the model needs RGB, YUV, HSV etc.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "teacher", "=", "teacher", "\n", "self", ".", "head_in_features", "=", "head_in_features", "\n", "if", "len", "(", "self", ".", "backbone", ".", "output_shape", "(", ")", ")", "!=", "len", "(", "self", ".", "head_in_features", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"[RetinaNet] Backbone produces unused features.\"", ")", "\n", "\n", "", "self", ".", "kd_args", "=", "kd_args", "\n", "if", "self", ".", "kd_args", ".", "USE_REVIEWKD", ":", "\n", "            ", "self", ".", "kd_trans", "=", "build_kd_trans", "(", "self", ".", "kd_args", ")", "\n", "\n", "# Anchors", "\n", "", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "box2box_transform", "=", "box2box_transform", "\n", "self", ".", "anchor_matcher", "=", "anchor_matcher", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "# Loss parameters:", "\n", "self", ".", "focal_loss_alpha", "=", "focal_loss_alpha", "\n", "self", ".", "focal_loss_gamma", "=", "focal_loss_gamma", "\n", "self", ".", "smooth_l1_beta", "=", "smooth_l1_beta", "\n", "self", ".", "box_reg_loss_type", "=", "box_reg_loss_type", "\n", "# Inference parameters:", "\n", "self", ".", "test_score_thresh", "=", "test_score_thresh", "\n", "self", ".", "test_topk_candidates", "=", "test_topk_candidates", "\n", "self", ".", "test_nms_thresh", "=", "test_nms_thresh", "\n", "self", ".", "max_detections_per_image", "=", "max_detections_per_image", "\n", "# Vis parameters", "\n", "self", ".", "vis_period", "=", "vis_period", "\n", "self", ".", "input_format", "=", "input_format", "\n", "self", ".", "teacher_input_format", "=", "teacher_input_format", "\n", "\n", "\n", "self", ".", "register_buffer", "(", "\"pixel_mean\"", ",", "torch", ".", "tensor", "(", "pixel_mean", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"pixel_std\"", ",", "torch", ".", "tensor", "(", "pixel_std", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"teacher_pixel_mean\"", ",", "torch", ".", "tensor", "(", "teacher_pixel_mean", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"teacher_pixel_std\"", ",", "torch", ".", "tensor", "(", "teacher_pixel_std", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "False", ")", "\n", "\n", "\n", "\"\"\"\n        In Detectron1, loss is normalized by number of foreground samples in the batch.\n        When batch size is 1 per GPU, #foreground has a large variance and\n        using it lead to lower performance. Here we maintain an EMA of #foreground to\n        stabilize the normalizer.\n        \"\"\"", "\n", "self", ".", "loss_normalizer", "=", "100", "# initialize with any reasonable #fg that's not too small", "\n", "self", ".", "loss_normalizer_momentum", "=", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.from_config": [[175, 215], ["detectron2.modeling.backbone.build_backbone", "detectron2.modeling.backbone.build_backbone.output_shape", "retinanet.RetinaNetHead", "detectron2.modeling.anchor_generator.build_anchor_generator", "detectron2.modeling.box_regression.Box2BoxTransform", "detectron2.modeling.matcher.Matcher", "teacher.build_teacher"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.teacher.teacher.build_teacher"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ")", ":", "\n", "        ", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "backbone_shape", "=", "backbone", ".", "output_shape", "(", ")", "\n", "feature_shapes", "=", "[", "backbone_shape", "[", "f", "]", "for", "f", "in", "cfg", ".", "MODEL", ".", "RETINANET", ".", "IN_FEATURES", "]", "\n", "head", "=", "RetinaNetHead", "(", "cfg", ",", "feature_shapes", ")", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "cfg", ",", "feature_shapes", ")", "\n", "return", "{", "\n", "\"backbone\"", ":", "backbone", ",", "\n", "\"head\"", ":", "head", ",", "\n", "\"anchor_generator\"", ":", "anchor_generator", ",", "\n", "\"box2box_transform\"", ":", "Box2BoxTransform", "(", "weights", "=", "cfg", ".", "MODEL", ".", "RETINANET", ".", "BBOX_REG_WEIGHTS", ")", ",", "\n", "\"anchor_matcher\"", ":", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RETINANET", ".", "IOU_THRESHOLDS", ",", "\n", "cfg", ".", "MODEL", ".", "RETINANET", ".", "IOU_LABELS", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", ",", "\n", "\"pixel_mean\"", ":", "cfg", ".", "MODEL", ".", "PIXEL_MEAN", ",", "\n", "\"pixel_std\"", ":", "cfg", ".", "MODEL", ".", "PIXEL_STD", ",", "\n", "\"num_classes\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CLASSES", ",", "\n", "\"head_in_features\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "IN_FEATURES", ",", "\n", "# Loss parameters:", "\n", "\"focal_loss_alpha\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "FOCAL_LOSS_ALPHA", ",", "\n", "\"focal_loss_gamma\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "FOCAL_LOSS_GAMMA", ",", "\n", "\"smooth_l1_beta\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "SMOOTH_L1_LOSS_BETA", ",", "\n", "\"box_reg_loss_type\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "BBOX_REG_LOSS_TYPE", ",", "\n", "# Inference parameters:", "\n", "\"test_score_thresh\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "SCORE_THRESH_TEST", ",", "\n", "\"test_topk_candidates\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "TOPK_CANDIDATES_TEST", ",", "\n", "\"test_nms_thresh\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NMS_THRESH_TEST", ",", "\n", "\"max_detections_per_image\"", ":", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IMAGE", ",", "\n", "# Vis parameters", "\n", "\"vis_period\"", ":", "cfg", ".", "VIS_PERIOD", ",", "\n", "\"input_format\"", ":", "cfg", ".", "INPUT", ".", "FORMAT", ",", "\n", "# for kd", "\n", "\"kd_args\"", ":", "cfg", ".", "KD", ",", "\n", "\"teacher\"", ":", "build_teacher", "(", "cfg", ")", ",", "\n", "\"teacher_input_format\"", ":", "cfg", ".", "TEACHER", ".", "INPUT", ".", "FORMAT", ",", "\n", "\"teacher_pixel_mean\"", ":", "cfg", ".", "TEACHER", ".", "MODEL", ".", "PIXEL_MEAN", ",", "\n", "\"teacher_pixel_std\"", ":", "cfg", ".", "TEACHER", ".", "MODEL", ".", "PIXEL_STD", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.device": [[217, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pixel_mean", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.visualize_training": [[221, 255], ["detectron2.utils.events.get_event_storage", "detectron2.data.detection_utils.convert_image_to_rgb", "Visualizer", "v_gt.overlay_instances.overlay_instances.overlay_instances", "v_gt.overlay_instances.overlay_instances.get_image", "detectron2.modeling.postprocessing.detector_postprocess", "detectron2.modeling.postprocessing.detector_postprocess.pred_boxes.tensor.detach().cpu().numpy", "Visualizer", "v_pred.overlay_instances.overlay_instances.overlay_instances", "v_pred.overlay_instances.overlay_instances.get_image", "numpy.vstack", "vis_img.transpose.transpose.transpose", "detectron2.utils.events.get_event_storage.put_image", "len", "len", "detectron2.data.detection_utils.convert_image_to_rgb.permute", "detectron2.modeling.postprocessing.detector_postprocess.pred_boxes.tensor.detach().cpu", "detectron2.modeling.postprocessing.detector_postprocess.pred_boxes.tensor.detach"], "methods", ["None"], ["", "def", "visualize_training", "(", "self", ",", "batched_inputs", ",", "results", ")", ":", "\n", "        ", "\"\"\"\n        A function used to visualize ground truth images and final network predictions.\n        It shows ground truth bounding boxes on the original image and up to 20\n        predicted object bounding boxes on the original image.\n\n        Args:\n            batched_inputs (list): a list that contains input to the model.\n            results (List[Instances]): a list of #images elements.\n        \"\"\"", "\n", "from", "detectron2", ".", "utils", ".", "visualizer", "import", "Visualizer", "\n", "\n", "assert", "len", "(", "batched_inputs", ")", "==", "len", "(", "\n", "results", "\n", ")", ",", "\"Cannot visualize inputs and results of different sizes\"", "\n", "storage", "=", "get_event_storage", "(", ")", "\n", "max_boxes", "=", "20", "\n", "\n", "image_index", "=", "0", "# only visualize a single image", "\n", "img", "=", "batched_inputs", "[", "image_index", "]", "[", "\"image\"", "]", "\n", "img", "=", "convert_image_to_rgb", "(", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "self", ".", "input_format", ")", "\n", "v_gt", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_gt", "=", "v_gt", ".", "overlay_instances", "(", "boxes", "=", "batched_inputs", "[", "image_index", "]", "[", "\"instances\"", "]", ".", "gt_boxes", ")", "\n", "anno_img", "=", "v_gt", ".", "get_image", "(", ")", "\n", "processed_results", "=", "detector_postprocess", "(", "results", "[", "image_index", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "predicted_boxes", "=", "processed_results", ".", "pred_boxes", ".", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "v_pred", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_pred", "=", "v_pred", ".", "overlay_instances", "(", "boxes", "=", "predicted_boxes", "[", "0", ":", "max_boxes", "]", ")", "\n", "prop_img", "=", "v_pred", ".", "get_image", "(", ")", "\n", "vis_img", "=", "np", ".", "vstack", "(", "(", "anno_img", ",", "prop_img", ")", ")", "\n", "vis_img", "=", "vis_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "vis_name", "=", "f\"Top: GT bounding boxes; Bottom: {max_boxes} Highest Scoring Results\"", "\n", "storage", ".", "put_image", "(", "vis_name", ",", "vis_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.forward": [[256, 324], ["retinanet.ReviewKDRetinaNet.preprocess_image", "retinanet.ReviewKDRetinaNet.backbone", "retinanet.ReviewKDRetinaNet.anchor_generator", "retinanet.ReviewKDRetinaNet.head", "retinanet.permute_to_N_HWA_K", "retinanet.permute_to_N_HWA_K", "retinanet.ReviewKDRetinaNet.label_anchors", "retinanet.ReviewKDRetinaNet.losses", "retinanet.ReviewKDRetinaNet.inference", "torch.jit.is_scripting", "zip", "torch.jit.is_scripting", "x[].to", "retinanet.ReviewKDRetinaNet.teacher_preprocess_image", "retinanet.ReviewKDRetinaNet.teacher.backbone", "retinanet.ReviewKDRetinaNet.kd_trans", "detectron2.utils.events.get_event_storage", "input_per_image.get", "input_per_image.get", "detectron2.modeling.postprocessing.detector_postprocess", "processed_results.append", "kd_trans.hcl", "retinanet.ReviewKDRetinaNet.inference", "retinanet.ReviewKDRetinaNet.visualize_training"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.preprocess_image", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.permute_to_N_HWA_K", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.permute_to_N_HWA_K", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.label_anchors", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.losses", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.teacher_preprocess_image", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.hcl", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.visualize_training"], ["", "def", "forward", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batched_inputs: a list, batched outputs of :class:`DatasetMapper` .\n                Each item in the list contains the inputs for one image.\n                For now, each item in the list is a dict that contains:\n\n                * image: Tensor, image in (C, H, W) format.\n                * instances: Instances\n\n                Other information that's included in the original dicts, such as:\n\n                * \"height\", \"width\" (int): the output resolution of the model, used in inference.\n                  See :meth:`postprocess` for details.\n        Returns:\n            In training, dict[str, Tensor]: mapping from a named loss to a tensor storing the\n            loss. Used during training only. In inference, the standard output format, described\n            in :doc:`/tutorials/models`.\n        \"\"\"", "\n", "images", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensor", ")", "\n", "features", "=", "[", "features", "[", "f", "]", "for", "f", "in", "self", ".", "head_in_features", "]", "\n", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "features", ")", "\n", "pred_logits", ",", "pred_anchor_deltas", "=", "self", ".", "head", "(", "features", ")", "\n", "# Transpose the Hi*Wi*A dimension to the middle:", "\n", "pred_logits", "=", "[", "permute_to_N_HWA_K", "(", "x", ",", "self", ".", "num_classes", ")", "for", "x", "in", "pred_logits", "]", "\n", "pred_anchor_deltas", "=", "[", "permute_to_N_HWA_K", "(", "x", ",", "4", ")", "for", "x", "in", "pred_anchor_deltas", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "not", "torch", ".", "jit", ".", "is_scripting", "(", ")", ",", "\"Not supported\"", "\n", "assert", "\"instances\"", "in", "batched_inputs", "[", "0", "]", ",", "\"Instance annotations are missing in training!\"", "\n", "gt_instances", "=", "[", "x", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "\n", "gt_labels", ",", "gt_boxes", "=", "self", ".", "label_anchors", "(", "anchors", ",", "gt_instances", ")", "\n", "losses", "=", "self", ".", "losses", "(", "anchors", ",", "pred_logits", ",", "gt_labels", ",", "pred_anchor_deltas", ",", "gt_boxes", ")", "\n", "\n", "if", "self", ".", "kd_args", ".", "USE_REVIEWKD", ":", "\n", "                ", "teacher_images", "=", "self", ".", "teacher_preprocess_image", "(", "batched_inputs", ")", "\n", "t_features", "=", "self", ".", "teacher", ".", "backbone", "(", "teacher_images", ".", "tensor", ")", "\n", "t_features", "=", "[", "t_features", "[", "f", "]", "for", "f", "in", "self", ".", "head_in_features", "]", "\n", "s_features", "=", "self", ".", "kd_trans", "(", "features", ")", "\n", "\n", "losses", "[", "'loss_ReviewKD'", "]", "=", "hcl", "(", "s_features", ",", "t_features", ")", "*", "self", ".", "kd_args", ".", "REVIEWKD_LOSS_WEIGHT", "\n", "\n", "\n", "", "if", "self", ".", "vis_period", ">", "0", ":", "\n", "                ", "storage", "=", "get_event_storage", "(", ")", "\n", "if", "storage", ".", "iter", "%", "self", ".", "vis_period", "==", "0", ":", "\n", "                    ", "results", "=", "self", ".", "inference", "(", "\n", "anchors", ",", "pred_logits", ",", "pred_anchor_deltas", ",", "images", ".", "image_sizes", "\n", ")", "\n", "self", ".", "visualize_training", "(", "batched_inputs", ",", "results", ")", "\n", "\n", "", "", "return", "losses", "\n", "", "else", ":", "\n", "            ", "results", "=", "self", ".", "inference", "(", "anchors", ",", "pred_logits", ",", "pred_anchor_deltas", ",", "images", ".", "image_sizes", ")", "\n", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "                ", "return", "results", "\n", "", "processed_results", "=", "[", "]", "\n", "for", "results_per_image", ",", "input_per_image", ",", "image_size", "in", "zip", "(", "\n", "results", ",", "batched_inputs", ",", "images", ".", "image_sizes", "\n", ")", ":", "\n", "                ", "height", "=", "input_per_image", ".", "get", "(", "\"height\"", ",", "image_size", "[", "0", "]", ")", "\n", "width", "=", "input_per_image", ".", "get", "(", "\"width\"", ",", "image_size", "[", "1", "]", ")", "\n", "r", "=", "detector_postprocess", "(", "results_per_image", ",", "height", ",", "width", ")", "\n", "processed_results", ".", "append", "(", "{", "\"instances\"", ":", "r", "}", ")", "\n", "", "return", "processed_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.losses": [[325, 378], ["len", "torch.stack", "pos_mask.sum().item", "detectron2.utils.events.get_event_storage().put_scalar", "fvcore.nn.sigmoid_focal_loss_jit", "detectron2.modeling.box_regression._dense_box_regression_loss", "torch.nn.functional.one_hot", "gt_labels_target.to", "pos_mask.sum", "detectron2.utils.events.get_event_storage", "max", "detectron2.layers.cat"], "methods", ["None"], ["", "", "def", "losses", "(", "self", ",", "anchors", ",", "pred_logits", ",", "gt_labels", ",", "pred_anchor_deltas", ",", "gt_boxes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors (list[Boxes]): a list of #feature level Boxes\n            gt_labels, gt_boxes: see output of :meth:`RetinaNet.label_anchors`.\n                Their shapes are (N, R) and (N, R, 4), respectively, where R is\n                the total number of anchors across levels, i.e. sum(Hi x Wi x Ai)\n            pred_logits, pred_anchor_deltas: both are list[Tensor]. Each element in the\n                list corresponds to one level and has shape (N, Hi * Wi * Ai, K or 4).\n                Where K is the number of classes used in `pred_logits`.\n\n        Returns:\n            dict[str, Tensor]:\n                mapping from a named loss to a scalar tensor\n                storing the loss. Used during training only. The dict keys are:\n                \"loss_cls\" and \"loss_box_reg\"\n        \"\"\"", "\n", "num_images", "=", "len", "(", "gt_labels", ")", "\n", "gt_labels", "=", "torch", ".", "stack", "(", "gt_labels", ")", "# (N, R)", "\n", "\n", "valid_mask", "=", "gt_labels", ">=", "0", "\n", "pos_mask", "=", "(", "gt_labels", ">=", "0", ")", "&", "(", "gt_labels", "!=", "self", ".", "num_classes", ")", "\n", "num_pos_anchors", "=", "pos_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "get_event_storage", "(", ")", ".", "put_scalar", "(", "\"num_pos_anchors\"", ",", "num_pos_anchors", "/", "num_images", ")", "\n", "self", ".", "loss_normalizer", "=", "self", ".", "loss_normalizer_momentum", "*", "self", ".", "loss_normalizer", "+", "(", "\n", "1", "-", "self", ".", "loss_normalizer_momentum", "\n", ")", "*", "max", "(", "num_pos_anchors", ",", "1", ")", "\n", "\n", "# classification and regression loss", "\n", "gt_labels_target", "=", "F", ".", "one_hot", "(", "gt_labels", "[", "valid_mask", "]", ",", "num_classes", "=", "self", ".", "num_classes", "+", "1", ")", "[", "\n", ":", ",", ":", "-", "1", "\n", "]", "# no loss for the last (background) class", "\n", "loss_cls", "=", "sigmoid_focal_loss_jit", "(", "\n", "cat", "(", "pred_logits", ",", "dim", "=", "1", ")", "[", "valid_mask", "]", ",", "\n", "gt_labels_target", ".", "to", "(", "pred_logits", "[", "0", "]", ".", "dtype", ")", ",", "\n", "alpha", "=", "self", ".", "focal_loss_alpha", ",", "\n", "gamma", "=", "self", ".", "focal_loss_gamma", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "\n", "loss_box_reg", "=", "_dense_box_regression_loss", "(", "\n", "anchors", ",", "\n", "self", ".", "box2box_transform", ",", "\n", "pred_anchor_deltas", ",", "\n", "gt_boxes", ",", "\n", "pos_mask", ",", "\n", "box_reg_loss_type", "=", "self", ".", "box_reg_loss_type", ",", "\n", "smooth_l1_beta", "=", "self", ".", "smooth_l1_beta", ",", "\n", ")", "\n", "\n", "return", "{", "\n", "\"loss_cls\"", ":", "loss_cls", "/", "self", ".", "loss_normalizer", ",", "\n", "\"loss_box_reg\"", ":", "loss_box_reg", "/", "self", ".", "loss_normalizer", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.label_anchors": [[380, 424], ["torch.no_grad", "detectron2.structures.Boxes.cat", "detectron2.structures.pairwise_iou", "retinanet.ReviewKDRetinaNet.anchor_matcher", "gt_labels.append", "matched_gt_boxes.append", "len", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "label_anchors", "(", "self", ",", "anchors", ",", "gt_instances", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors (list[Boxes]): A list of #feature level Boxes.\n                The Boxes contains anchors of this image on the specific feature level.\n            gt_instances (list[Instances]): a list of N `Instances`s. The i-th\n                `Instances` contains the ground-truth per-instance annotations\n                for the i-th input image.\n\n        Returns:\n            list[Tensor]: List of #img tensors. i-th element is a vector of labels whose length is\n            the total number of anchors across all feature maps (sum(Hi * Wi * A)).\n            Label values are in {-1, 0, ..., K}, with -1 means ignore, and K means background.\n\n            list[Tensor]: i-th element is a Rx4 tensor, where R is the total number of anchors\n            across feature maps. The values are the matched gt boxes for each anchor.\n            Values are undefined for those anchors not labeled as foreground.\n        \"\"\"", "\n", "anchors", "=", "Boxes", ".", "cat", "(", "anchors", ")", "# Rx4", "\n", "\n", "gt_labels", "=", "[", "]", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "for", "gt_per_image", "in", "gt_instances", ":", "\n", "            ", "match_quality_matrix", "=", "pairwise_iou", "(", "gt_per_image", ".", "gt_boxes", ",", "anchors", ")", "\n", "matched_idxs", ",", "anchor_labels", "=", "self", ".", "anchor_matcher", "(", "match_quality_matrix", ")", "\n", "del", "match_quality_matrix", "\n", "\n", "if", "len", "(", "gt_per_image", ")", ">", "0", ":", "\n", "                ", "matched_gt_boxes_i", "=", "gt_per_image", ".", "gt_boxes", ".", "tensor", "[", "matched_idxs", "]", "\n", "\n", "gt_labels_i", "=", "gt_per_image", ".", "gt_classes", "[", "matched_idxs", "]", "\n", "# Anchors with label 0 are treated as background.", "\n", "gt_labels_i", "[", "anchor_labels", "==", "0", "]", "=", "self", ".", "num_classes", "\n", "# Anchors with label -1 are ignored.", "\n", "gt_labels_i", "[", "anchor_labels", "==", "-", "1", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "matched_gt_boxes_i", "=", "torch", ".", "zeros_like", "(", "anchors", ".", "tensor", ")", "\n", "gt_labels_i", "=", "torch", ".", "zeros_like", "(", "matched_idxs", ")", "+", "self", ".", "num_classes", "\n", "\n", "", "gt_labels", ".", "append", "(", "gt_labels_i", ")", "\n", "matched_gt_boxes", ".", "append", "(", "matched_gt_boxes_i", ")", "\n", "\n", "", "return", "gt_labels", ",", "matched_gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference": [[425, 452], ["enumerate", "retinanet.ReviewKDRetinaNet.inference_single_image", "results.append"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference_single_image"], ["", "def", "inference", "(", "\n", "self", ",", "\n", "anchors", ":", "List", "[", "Boxes", "]", ",", "\n", "pred_logits", ":", "List", "[", "Tensor", "]", ",", "\n", "pred_anchor_deltas", ":", "List", "[", "Tensor", "]", ",", "\n", "image_sizes", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[Boxes]): A list of #feature level Boxes.\n                The Boxes contain anchors of this image on the specific feature level.\n            pred_logits, pred_anchor_deltas: list[Tensor], one per level. Each\n                has shape (N, Hi * Wi * Ai, K or 4)\n            image_sizes (List[(h, w)]): the input image sizes\n\n        Returns:\n            results (List[Instances]): a list of #images elements.\n        \"\"\"", "\n", "results", ":", "List", "[", "Instances", "]", "=", "[", "]", "\n", "for", "img_idx", ",", "image_size", "in", "enumerate", "(", "image_sizes", ")", ":", "\n", "            ", "pred_logits_per_image", "=", "[", "x", "[", "img_idx", "]", "for", "x", "in", "pred_logits", "]", "\n", "deltas_per_image", "=", "[", "x", "[", "img_idx", "]", "for", "x", "in", "pred_anchor_deltas", "]", "\n", "results_per_image", "=", "self", ".", "inference_single_image", "(", "\n", "anchors", ",", "pred_logits_per_image", ",", "deltas_per_image", ",", "image_size", "\n", ")", "\n", "results", ".", "append", "(", "results_per_image", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.inference_single_image": [[453, 520], ["zip", "detectron2.layers.batched_nms", "detectron2.structures.Instances", "detectron2.structures.Boxes", "box_cls_i.flatten().sigmoid_", "min", "box_cls_i.flatten().sigmoid_.sort", "retinanet.ReviewKDRetinaNet.box2box_transform.apply_deltas", "boxes_all.append", "scores_all.append", "class_idxs_all.append", "detectron2.layers.cat", "detectron2.layers.nonzero_tuple", "topk_idxs.size", "box_cls_i.flatten"], "methods", ["None"], ["", "def", "inference_single_image", "(", "\n", "self", ",", "\n", "anchors", ":", "List", "[", "Boxes", "]", ",", "\n", "box_cls", ":", "List", "[", "Tensor", "]", ",", "\n", "box_delta", ":", "List", "[", "Tensor", "]", ",", "\n", "image_size", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Single-image inference. Return bounding-box detection results by thresholding\n        on scores and applying non-maximum suppression (NMS).\n\n        Arguments:\n            anchors (list[Boxes]): list of #feature levels. Each entry contains\n                a Boxes object, which contains all the anchors in that feature level.\n            box_cls (list[Tensor]): list of #feature levels. Each entry contains\n                tensor of size (H x W x A, K)\n            box_delta (list[Tensor]): Same shape as 'box_cls' except that K becomes 4.\n            image_size (tuple(H, W)): a tuple of the image height and width.\n\n        Returns:\n            Same as `inference`, but for only one image.\n        \"\"\"", "\n", "boxes_all", "=", "[", "]", "\n", "scores_all", "=", "[", "]", "\n", "class_idxs_all", "=", "[", "]", "\n", "\n", "# Iterate over every feature level", "\n", "for", "box_cls_i", ",", "box_reg_i", ",", "anchors_i", "in", "zip", "(", "box_cls", ",", "box_delta", ",", "anchors", ")", ":", "\n", "# (HxWxAxK,)", "\n", "            ", "predicted_prob", "=", "box_cls_i", ".", "flatten", "(", ")", ".", "sigmoid_", "(", ")", "\n", "\n", "# Apply two filtering below to make NMS faster.", "\n", "# 1. Keep boxes with confidence score higher than threshold", "\n", "keep_idxs", "=", "predicted_prob", ">", "self", ".", "test_score_thresh", "\n", "predicted_prob", "=", "predicted_prob", "[", "keep_idxs", "]", "\n", "topk_idxs", "=", "nonzero_tuple", "(", "keep_idxs", ")", "[", "0", "]", "\n", "\n", "# 2. Keep top k top scoring boxes only", "\n", "num_topk", "=", "min", "(", "self", ".", "test_topk_candidates", ",", "topk_idxs", ".", "size", "(", "0", ")", ")", "\n", "# torch.sort is actually faster than .topk (at least on GPUs)", "\n", "predicted_prob", ",", "idxs", "=", "predicted_prob", ".", "sort", "(", "descending", "=", "True", ")", "\n", "predicted_prob", "=", "predicted_prob", "[", ":", "num_topk", "]", "\n", "topk_idxs", "=", "topk_idxs", "[", "idxs", "[", ":", "num_topk", "]", "]", "\n", "\n", "anchor_idxs", "=", "topk_idxs", "//", "self", ".", "num_classes", "\n", "classes_idxs", "=", "topk_idxs", "%", "self", ".", "num_classes", "\n", "\n", "box_reg_i", "=", "box_reg_i", "[", "anchor_idxs", "]", "\n", "anchors_i", "=", "anchors_i", "[", "anchor_idxs", "]", "\n", "# predict boxes", "\n", "predicted_boxes", "=", "self", ".", "box2box_transform", ".", "apply_deltas", "(", "box_reg_i", ",", "anchors_i", ".", "tensor", ")", "\n", "\n", "boxes_all", ".", "append", "(", "predicted_boxes", ")", "\n", "scores_all", ".", "append", "(", "predicted_prob", ")", "\n", "class_idxs_all", ".", "append", "(", "classes_idxs", ")", "\n", "\n", "", "boxes_all", ",", "scores_all", ",", "class_idxs_all", "=", "[", "\n", "cat", "(", "x", ")", "for", "x", "in", "[", "boxes_all", ",", "scores_all", ",", "class_idxs_all", "]", "\n", "]", "\n", "keep", "=", "batched_nms", "(", "boxes_all", ",", "scores_all", ",", "class_idxs_all", ",", "self", ".", "test_nms_thresh", ")", "\n", "keep", "=", "keep", "[", ":", "self", ".", "max_detections_per_image", "]", "\n", "\n", "result", "=", "Instances", "(", "image_size", ")", "\n", "result", ".", "pred_boxes", "=", "Boxes", "(", "boxes_all", "[", "keep", "]", ")", "\n", "result", ".", "scores", "=", "scores_all", "[", "keep", "]", "\n", "result", ".", "pred_classes", "=", "class_idxs_all", "[", "keep", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.preprocess_image": [[521, 529], ["detectron2.structures.ImageList.from_tensors", "x[].to"], "methods", ["None"], ["", "def", "preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "[", "(", "x", "-", "self", ".", "pixel_mean", ")", "/", "self", ".", "pixel_std", "for", "x", "in", "images", "]", "\n", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "return", "images", "\n", "", "def", "teacher_preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.ReviewKDRetinaNet.teacher_preprocess_image": [[529, 539], ["detectron2.structures.ImageList.from_tensors", "x[].to", "x.index_select", "torch.LongTensor().to", "torch.LongTensor"], "methods", ["None"], ["", "def", "teacher_preprocess_image", "(", "self", ",", "batched_inputs", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "[", "(", "x", "-", "self", ".", "teacher_pixel_mean", ")", "/", "self", ".", "teacher_pixel_std", "for", "x", "in", "images", "]", "\n", "if", "self", ".", "input_format", "!=", "self", ".", "teacher_input_format", ":", "\n", "            ", "images", "=", "[", "x", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", ",", "0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "for", "x", "in", "images", "]", "\n", "", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.RetinaNetHead.__init__": [[547, 613], ["torch.nn.Module.__init__", "zip", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "logger.warning", "cls_subnet.append", "cls_subnet.append", "bbox_subnet.append", "bbox_subnet.append", "modules.modules", "math.log", "list", "torch.nn.Conv2d", "cls_subnet.append", "torch.nn.ReLU", "torch.nn.Conv2d", "bbox_subnet.append", "torch.nn.ReLU", "isinstance", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.warning", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_"], ["@", "configurable", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "input_shape", ":", "List", "[", "ShapeSpec", "]", ",", "\n", "num_classes", ",", "\n", "num_anchors", ",", "\n", "conv_dims", ":", "List", "[", "int", "]", ",", "\n", "norm", "=", "\"\"", ",", "\n", "prior_prob", "=", "0.01", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: this interface is experimental.\n\n        Args:\n            input_shape (List[ShapeSpec]): input shape\n            num_classes (int): number of classes. Used to label background proposals.\n            num_anchors (int): number of generated anchors\n            conv_dims (List[int]): dimensions for each convolution layer\n            norm (str or callable):\n                    Normalization for conv layers except for the two output layers.\n                    See :func:`detectron2.layers.get_norm` for supported types.\n            prior_prob (float): Prior weight for computing bias\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "norm", "==", "\"BN\"", "or", "norm", "==", "\"SyncBN\"", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Shared norm does not work well for BN, SyncBN, expect poor results\"", ")", "\n", "\n", "", "cls_subnet", "=", "[", "]", "\n", "bbox_subnet", "=", "[", "]", "\n", "for", "in_channels", ",", "out_channels", "in", "zip", "(", "\n", "[", "input_shape", "[", "0", "]", ".", "channels", "]", "+", "list", "(", "conv_dims", ")", ",", "conv_dims", "\n", ")", ":", "\n", "            ", "cls_subnet", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "if", "norm", ":", "\n", "                ", "cls_subnet", ".", "append", "(", "get_norm", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "cls_subnet", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bbox_subnet", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "if", "norm", ":", "\n", "                ", "bbox_subnet", ".", "append", "(", "get_norm", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "bbox_subnet", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "cls_subnet", "=", "nn", ".", "Sequential", "(", "*", "cls_subnet", ")", "\n", "self", ".", "bbox_subnet", "=", "nn", ".", "Sequential", "(", "*", "bbox_subnet", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Conv2d", "(", "\n", "conv_dims", "[", "-", "1", "]", ",", "num_anchors", "*", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "conv_dims", "[", "-", "1", "]", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "# Initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_subnet", ",", "self", ".", "bbox_subnet", ",", "self", ".", "cls_score", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "for", "layer", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "# Use prior in model initialization to improve stability", "\n", "", "", "", "bias_value", "=", "-", "(", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_score", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.RetinaNetHead.from_config": [[614, 629], ["detectron2.modeling.anchor_generator.build_anchor_generator", "len", "set"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ",", "input_shape", ":", "List", "[", "ShapeSpec", "]", ")", ":", "\n", "        ", "num_anchors", "=", "build_anchor_generator", "(", "cfg", ",", "input_shape", ")", ".", "num_cell_anchors", "\n", "assert", "(", "\n", "len", "(", "set", "(", "num_anchors", ")", ")", "==", "1", "\n", ")", ",", "\"Using different number of anchors between levels is not currently supported!\"", "\n", "num_anchors", "=", "num_anchors", "[", "0", "]", "\n", "\n", "return", "{", "\n", "\"input_shape\"", ":", "input_shape", ",", "\n", "\"num_classes\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CLASSES", ",", "\n", "\"conv_dims\"", ":", "[", "input_shape", "[", "0", "]", ".", "channels", "]", "*", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CONVS", ",", "\n", "\"prior_prob\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "PRIOR_PROB", ",", "\n", "\"norm\"", ":", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NORM", ",", "\n", "\"num_anchors\"", ":", "num_anchors", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.RetinaNetHead.forward": [[631, 653], ["logits.append", "bbox_reg.append", "retinanet.RetinaNetHead.cls_score", "retinanet.RetinaNetHead.bbox_pred", "retinanet.RetinaNetHead.cls_subnet", "retinanet.RetinaNetHead.bbox_subnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): FPN feature map tensors in high to low resolution.\n                Each tensor in the list correspond to different feature levels.\n\n        Returns:\n            logits (list[Tensor]): #lvl tensors, each has shape (N, AxK, Hi, Wi).\n                The tensor predicts the classification probability\n                at each spatial position for each of the A anchors and K object\n                classes.\n            bbox_reg (list[Tensor]): #lvl tensors, each has shape (N, Ax4, Hi, Wi).\n                The tensor predicts 4-vector (dx,dy,dw,dh) box\n                regression values for every anchor. These values are the\n                relative offset between the anchor and the ground truth box.\n        \"\"\"", "\n", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "features", ":", "\n", "            ", "logits", ".", "append", "(", "self", ".", "cls_score", "(", "self", ".", "cls_subnet", "(", "feature", ")", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "self", ".", "bbox_subnet", "(", "feature", ")", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.retinanet.permute_to_N_HWA_K": [[33, 43], ["tensor.reshape.view", "tensor.reshape.permute", "tensor.reshape.reshape", "tensor.reshape.dim"], "function", ["None"], ["def", "permute_to_N_HWA_K", "(", "tensor", ",", "K", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Transpose/reshape a tensor from (N, (Ai x K), H, W) to (N, (HxWxAi), K)\n    \"\"\"", "\n", "assert", "tensor", ".", "dim", "(", ")", "==", "4", ",", "tensor", ".", "shape", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "tensor", ".", "shape", "\n", "tensor", "=", "tensor", ".", "view", "(", "N", ",", "-", "1", ",", "K", ",", "H", ",", "W", ")", "\n", "tensor", "=", "tensor", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "tensor", "=", "tensor", ".", "reshape", "(", "N", ",", "-", "1", ",", "K", ")", "# Size=(N,HWA,K)", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.ABF.__init__": [[6, 25], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.kaiming_uniform_"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel", ",", "fuse", ")", ":", "\n", "        ", "super", "(", "ABF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "mid_channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channel", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "mid_channel", ",", "out_channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ",", "\n", ")", "\n", "if", "fuse", ":", "\n", "            ", "self", ".", "att_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "mid_channel", "*", "2", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att_conv", "=", "None", "\n", "", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv1", "[", "0", "]", ".", "weight", ",", "a", "=", "1", ")", "# pyre-ignore", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv2", "[", "0", "]", ".", "weight", ",", "a", "=", "1", ")", "# pyre-ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.ABF.forward": [[26, 41], ["kd_trans.ABF.conv1", "kd_trans.ABF.conv2", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kd_trans.ABF.att_conv", "z[].view", "z[].view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# transform student features", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "att_conv", "is", "not", "None", ":", "\n", "# upsample residual features", "\n", "            ", "shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "y", "=", "F", ".", "interpolate", "(", "y", ",", "shape", ",", "mode", "=", "\"nearest\"", ")", "\n", "# fusion", "\n", "z", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "self", ".", "att_conv", "(", "z", ")", "\n", "x", "=", "(", "x", "*", "z", "[", ":", ",", "0", "]", ".", "view", "(", "n", ",", "1", ",", "h", ",", "w", ")", "+", "y", "*", "z", "[", ":", ",", "1", "]", ".", "view", "(", "n", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "# output ", "\n", "", "y", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.ReviewKD.__init__": [[43, 55], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "torch.nn.ModuleList.append", "kd_trans.ABF", "len"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channel", "\n", ")", ":", "\n", "        ", "super", "(", "ReviewKD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "abfs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "idx", ",", "in_channel", "in", "enumerate", "(", "in_channels", ")", ":", "\n", "            ", "abfs", ".", "append", "(", "ABF", "(", "in_channel", ",", "mid_channel", ",", "out_channels", "[", "idx", "]", ",", "idx", "<", "len", "(", "in_channels", ")", "-", "1", ")", ")", "\n", "\n", "\n", "", "self", ".", "abfs", "=", "abfs", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.ReviewKD.forward": [[56, 66], ["results.append", "zip", "abf", "results.insert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "student_features", ")", ":", "\n", "        ", "x", "=", "student_features", "[", ":", ":", "-", "1", "]", "\n", "results", "=", "[", "]", "\n", "out_features", ",", "res_features", "=", "self", ".", "abfs", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "out_features", ")", "\n", "for", "features", ",", "abf", "in", "zip", "(", "x", "[", "1", ":", "]", ",", "self", ".", "abfs", "[", "1", ":", "]", ")", ":", "\n", "            ", "out_features", ",", "res_features", "=", "abf", "(", "features", ",", "res_features", ")", "\n", "results", ".", "insert", "(", "0", ",", "out_features", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.build_kd_trans": [[68, 74], ["kd_trans.ReviewKD"], "function", ["None"], ["", "", "def", "build_kd_trans", "(", "cfg", ")", ":", "\n", "    ", "in_channels", "=", "[", "256", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "out_channels", "=", "[", "256", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "mid_channel", "=", "256", "\n", "model", "=", "ReviewKD", "(", "in_channels", ",", "out_channels", ",", "mid_channel", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.kd_trans.hcl": [[75, 93], ["zip", "torch.mse_loss", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.mse_loss"], "function", ["None"], ["", "def", "hcl", "(", "fstudent", ",", "fteacher", ")", ":", "\n", "    ", "loss_all", "=", "0.0", "\n", "for", "fs", ",", "ft", "in", "zip", "(", "fstudent", ",", "fteacher", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "fs", ".", "shape", "\n", "loss", "=", "F", ".", "mse_loss", "(", "fs", ",", "ft", ",", "reduction", "=", "'mean'", ")", "\n", "cnt", "=", "1.0", "\n", "tot", "=", "1.0", "\n", "for", "l", "in", "[", "4", ",", "2", ",", "1", "]", ":", "\n", "            ", "if", "l", ">=", "h", ":", "\n", "                ", "continue", "\n", "", "tmpfs", "=", "F", ".", "adaptive_avg_pool2d", "(", "fs", ",", "(", "l", ",", "l", ")", ")", "\n", "tmpft", "=", "F", ".", "adaptive_avg_pool2d", "(", "ft", ",", "(", "l", ",", "l", ")", ")", "\n", "cnt", "/=", "2.0", "\n", "loss", "+=", "F", ".", "mse_loss", "(", "tmpfs", ",", "tmpft", ",", "reduction", "=", "'mean'", ")", "*", "cnt", "\n", "tot", "+=", "cnt", "\n", "", "loss", "=", "loss", "/", "tot", "\n", "loss_all", "=", "loss_all", "+", "loss", "\n", "", "return", "loss_all", "\n", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.kd.DistillKL.__init__": [[6, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "T", ")", ":", "\n", "        ", "super", "(", "DistillKL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.kd.DistillKL.forward": [[10, 15], ["torch.log_softmax", "torch.softmax", "torch.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_s", ",", "y_t", ")", ":", "\n", "        ", "p_s", "=", "F", ".", "log_softmax", "(", "y_s", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "p_t", "=", "F", ".", "softmax", "(", "y_t", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "p_s", ",", "p_t", ",", "reduction", "=", "'sum'", ")", "*", "(", "self", ".", "T", "**", "2", ")", "/", "y_s", ".", "shape", "[", "0", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.__init__": [[40, 42], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.reset"], ["self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.reset": [[43, 48], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}_sum: {self.sum:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n", "self", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update": [[49, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_minute", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name} {s:{self.fmt}}{self.postfix} min'", ".", "format", "(", "\n", "s", "=", "self", ".", "sum", "/", "60", ",", "self", "=", "self", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.Logger.__init__": [[63, 71], ["open", "vars", "misc.Logger.file.flush", "misc.Logger.file.write", "str", "getattr"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.Logger.writerow": [[72, 77], ["misc.Logger.file.write", "misc.Logger.file.flush", "misc.Logger.file.write"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.Logger.close": [[78, 80], ["misc.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.Logger.close"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.format_time": [[3, 34], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["# Licensed under the Apache License, Version 2.0 (the \"License\");", "\n", "# you may not use this file except in compliance with the License.", "\n", "# You may obtain a copy of the License at", "\n", "#", "\n", "#    http://www.apache.org/licenses/LICENSE-2.0", "\n", "#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\n", "__all__", "=", "[", "'AverageMeter'", "]", "\n", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    Computes and stores the average and current value\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", "=", "''", ",", "fmt", "=", "'f'", ",", "postfix", "=", "\"\"", ",", "need_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "postfix", "=", "postfix", "\n", "self", ".", "need_avg", "=", "need_avg", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" reset \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.lr_schedule": [[55, 61], ["None"], "function", ["None"], ["def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}: {self.avg:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n", "self", "=", "self", ")", "if", "self", ".", "need_avg", "else", "''", "\n", "\n", "", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "'{self.name}: {self.val:{self.fmt}}{self.postfix}'", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.load_teacher_weight": [[81, 86], ["torch.load", "teacher.load_state_dict", "teacher.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.Trainer.build_evaluator": [[53, 100], ["detectron2.evaluation.DatasetEvaluators", "os.path.join", "detectron2.data.MetadataCatalog.get", "evaluator_list.append", "evaluator_list.append", "evaluator_list.append", "detectron2.evaluation.CityscapesInstanceEvaluator", "detectron2.evaluation.CityscapesSemSegEvaluator", "len", "NotImplementedError", "detectron2.evaluation.SemSegEvaluator", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.COCOPanopticEvaluator", "torch.cuda.device_count", "detectron2.get_rank", "torch.cuda.device_count", "detectron2.get_rank", "detectron2.evaluation.PascalVOCDetectionEvaluator", "len", "detectron2.evaluation.LVISEvaluator"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.model_zoo.get"], ["@", "classmethod", "\n", "def", "build_evaluator", "(", "cls", ",", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create evaluator(s) for a given dataset.\n        This uses the special metadata \"evaluator_type\" associated with each builtin dataset.\n        For your own dataset, you can simply create an evaluator manually in your\n        script and do not have to worry about the hacky if-else logic here.\n        \"\"\"", "\n", "if", "output_folder", "is", "None", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "evaluator_list", "=", "[", "]", "\n", "evaluator_type", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", ".", "evaluator_type", "\n", "if", "evaluator_type", "in", "[", "\"sem_seg\"", ",", "\"coco_panoptic_seg\"", "]", ":", "\n", "            ", "evaluator_list", ".", "append", "(", "\n", "SemSegEvaluator", "(", "\n", "dataset_name", ",", "\n", "distributed", "=", "True", ",", "\n", "output_dir", "=", "output_folder", ",", "\n", ")", "\n", ")", "\n", "", "if", "evaluator_type", "in", "[", "\"coco\"", ",", "\"coco_panoptic_seg\"", "]", ":", "\n", "            ", "evaluator_list", ".", "append", "(", "COCOEvaluator", "(", "dataset_name", ",", "output_dir", "=", "output_folder", ")", ")", "\n", "", "if", "evaluator_type", "==", "\"coco_panoptic_seg\"", ":", "\n", "            ", "evaluator_list", ".", "append", "(", "COCOPanopticEvaluator", "(", "dataset_name", ",", "output_folder", ")", ")", "\n", "", "if", "evaluator_type", "==", "\"cityscapes_instance\"", ":", "\n", "            ", "assert", "(", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "comm", ".", "get_rank", "(", ")", "\n", ")", ",", "\"CityscapesEvaluator currently do not work with multiple machines.\"", "\n", "return", "CityscapesInstanceEvaluator", "(", "dataset_name", ")", "\n", "", "if", "evaluator_type", "==", "\"cityscapes_sem_seg\"", ":", "\n", "            ", "assert", "(", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "comm", ".", "get_rank", "(", ")", "\n", ")", ",", "\"CityscapesEvaluator currently do not work with multiple machines.\"", "\n", "return", "CityscapesSemSegEvaluator", "(", "dataset_name", ")", "\n", "", "elif", "evaluator_type", "==", "\"pascal_voc\"", ":", "\n", "            ", "return", "PascalVOCDetectionEvaluator", "(", "dataset_name", ")", "\n", "", "elif", "evaluator_type", "==", "\"lvis\"", ":", "\n", "            ", "return", "LVISEvaluator", "(", "dataset_name", ",", "output_dir", "=", "output_folder", ")", "\n", "", "if", "len", "(", "evaluator_list", ")", "==", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"no Evaluator for the dataset {} with the type {}\"", ".", "format", "(", "\n", "dataset_name", ",", "evaluator_type", "\n", ")", "\n", ")", "\n", "", "elif", "len", "(", "evaluator_list", ")", "==", "1", ":", "\n", "            ", "return", "evaluator_list", "[", "0", "]", "\n", "", "return", "DatasetEvaluators", "(", "evaluator_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.Trainer.test_with_TTA": [[101, 117], ["logging.getLogger", "logging.getLogger.info", "detectron2.modeling.GeneralizedRCNNWithTTA", "cls.test", "collections.OrderedDict", "cls.build_evaluator", "os.path.join", "collections.OrderedDict.items"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.logger.info", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.CIFAR-100.train.test", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.Trainer.build_evaluator"], ["", "@", "classmethod", "\n", "def", "test_with_TTA", "(", "cls", ",", "cfg", ",", "model", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "\"detectron2.trainer\"", ")", "\n", "# In the end of training, run an evaluation with TTA", "\n", "# Only support some R-CNN models.", "\n", "logger", ".", "info", "(", "\"Running inference with test-time augmentation ...\"", ")", "\n", "model", "=", "GeneralizedRCNNWithTTA", "(", "cfg", ",", "model", ")", "\n", "evaluators", "=", "[", "\n", "cls", ".", "build_evaluator", "(", "\n", "cfg", ",", "name", ",", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference_TTA\"", ")", "\n", ")", "\n", "for", "name", "in", "cfg", ".", "DATASETS", ".", "TEST", "\n", "]", "\n", "res", "=", "cls", ".", "test", "(", "cfg", ",", "model", ",", "evaluators", ")", "\n", "res", "=", "OrderedDict", "(", "{", "k", "+", "\"_TTA\"", ":", "v", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", "}", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.setup": [[119, 130], ["detectron2.config.get_cfg", "model.add_distillation_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.model.config.add_distillation_cfg", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNetBlockBase.freeze"], ["", "", "def", "setup", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Create configs and perform basic setups.\n    \"\"\"", "\n", "cfg", "=", "get_cfg", "(", ")", "\n", "add_distillation_cfg", "(", "cfg", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "default_setup", "(", "cfg", ",", "args", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.main": [[132, 159], ["train_net.setup", "train_net.Trainer", "Trainer.resume_or_load", "Trainer.train", "Trainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "Trainer.test", "detectron2.is_main_process", "Trainer.register_hooks", "Trainer.test.update", "detectron2.evaluation.verify_results", "detectron2.checkpoint.DetectionCheckpointer", "train_net.Trainer.test_with_TTA", "detectron2.engine.hooks.EvalHook", "train_net.Trainer.test_with_TTA"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.setup", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.ImageNet.imagenet_amp.train", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.CIFAR-100.train.test", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.util.misc.AverageMeter.update", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.Trainer.test_with_TTA", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.Detection.train_net.Trainer.test_with_TTA"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "setup", "(", "args", ")", "\n", "\n", "if", "args", ".", "eval_only", ":", "\n", "        ", "model", "=", "Trainer", ".", "build_model", "(", "cfg", ")", "\n", "DetectionCheckpointer", "(", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", "\n", ")", "\n", "res", "=", "Trainer", ".", "test", "(", "cfg", ",", "model", ")", "\n", "if", "cfg", ".", "TEST", ".", "AUG", ".", "ENABLED", ":", "\n", "            ", "res", ".", "update", "(", "Trainer", ".", "test_with_TTA", "(", "cfg", ",", "model", ")", ")", "\n", "", "if", "comm", ".", "is_main_process", "(", ")", ":", "\n", "            ", "verify_results", "(", "cfg", ",", "res", ")", "\n", "", "return", "res", "\n", "\n", "", "\"\"\"\n    If you'd like to do anything fancier than the standard training logic,\n    consider writing your own training loop (see plain_train_net.py) or\n    subclassing the trainer.\n    \"\"\"", "\n", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "resume_or_load", "(", "resume", "=", "args", ".", "resume", ")", "\n", "if", "cfg", ".", "TEST", ".", "AUG", ".", "ENABLED", ":", "\n", "        ", "trainer", ".", "register_hooks", "(", "\n", "[", "hooks", ".", "EvalHook", "(", "0", ",", "lambda", ":", "trainer", ".", "test_with_TTA", "(", "cfg", ",", "trainer", ".", "model", ")", ")", "]", "\n", ")", "\n", "", "return", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.teacher.teacher.Teacher.__init__": [[9, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "proposal_generator", ",", "roi_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "proposal_generator", "=", "proposal_generator", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.teacher.teacher.build_teacher": [[15, 28], ["detectron2.modeling.backbone.build_backbone", "teacher.Teacher", "Teacher.parameters", "detectron2.modeling.proposal_generator.build_proposal_generator", "detectron2.modeling.roi_heads.build_roi_heads", "detectron2.modeling.backbone.build_backbone.output_shape", "detectron2.modeling.backbone.build_backbone.output_shape"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape"], ["", "", "def", "build_teacher", "(", "cfg", ")", ":", "\n", "    ", "teacher_cfg", "=", "cfg", ".", "TEACHER", "\n", "backbone", "=", "build_backbone", "(", "teacher_cfg", ")", "\n", "if", "not", "'Retina'", "in", "teacher_cfg", ".", "MODEL", ".", "META_ARCHITECTURE", ":", "\n", "        ", "proposal_generator", "=", "build_proposal_generator", "(", "teacher_cfg", ",", "backbone", ".", "output_shape", "(", ")", ")", "\n", "roi_heads", "=", "build_roi_heads", "(", "teacher_cfg", ",", "backbone", ".", "output_shape", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "proposal_generator", "=", "None", "\n", "roi_heads", "=", "None", "\n", "", "teacher", "=", "Teacher", "(", "backbone", ",", "proposal_generator", ",", "roi_heads", ")", "\n", "for", "param", "in", "teacher", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "return", "teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.InvertedResidual.__init__": [[64, 94], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "detectron2.layers.get_norm", "torch.ReLU6", "torch.Conv2d", "detectron2.layers.get_norm", "torch.Conv2d", "detectron2.layers.get_norm", "torch.ReLU6", "torch.Conv2d", "detectron2.layers.get_norm", "torch.ReLU6", "torch.Conv2d", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ",", "bn", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "identity", "=", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.InvertedResidual.forward": [[96, 101], ["mobilenetv2.InvertedResidual.conv", "mobilenetv2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "identity", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.InvertedResidual.freeze": [[102, 107], ["mobilenetv2.InvertedResidual.parameters", "detectron2.layers.FrozenBatchNorm2d.convert_frozen_batchnorm"], "methods", ["None"], ["", "", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "FrozenBatchNorm2d", ".", "convert_frozen_batchnorm", "(", "self", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.MobileNetV2.__init__": [[111, 165], ["detectron2.modeling.backbone.Backbone.__init__", "mobilenetv2._make_divisible", "torch.Sequential", "mobilenetv2.MobileNetV2._initialize_weights", "mobilenetv2.conv_3x3_bn", "layers[].parameters", "detectron2.layers.FrozenBatchNorm2d.convert_frozen_batchnorm", "mobilenetv2._make_divisible", "range", "layers.append", "mobilenetv2.MobileNetV2.stage_name.append", "block", "layers[].freeze"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2._make_divisible", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.conv_3x3_bn", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2._make_divisible", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNetBlockBase.freeze"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "input_shape", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_out_features", "=", "cfg", ".", "MODEL", ".", "MOBILENETV2", ".", "OUT_FEATURES", "\n", "bn", "=", "cfg", ".", "MODEL", ".", "MOBILENETV2", ".", "NORM", "\n", "freeze_at", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_AT", "\n", "\n", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "cfgs", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", ",", "''", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", ",", "'m2'", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", ",", "'m3'", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", ",", "''", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", ",", "'m4'", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", ",", "''", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", ",", "'m5'", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "_make_divisible", "(", "32", "*", "width_mult", ",", "4", "if", "width_mult", "==", "0.1", "else", "8", ")", "\n", "layers", "=", "[", "conv_3x3_bn", "(", "input_shape", ".", "channels", ",", "input_channel", ",", "2", ",", "bn", ")", "]", "\n", "if", "freeze_at", ">=", "1", ":", "\n", "            ", "for", "p", "in", "layers", "[", "0", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "layers", "[", "0", "]", "=", "FrozenBatchNorm2d", ".", "convert_frozen_batchnorm", "(", "layers", "[", "0", "]", ")", "\n", "# building inverted residual blocks", "\n", "", "block", "=", "InvertedResidual", "\n", "self", ".", "stage_name", "=", "[", "''", "]", "\n", "self", ".", "_out_feature_channels", "=", "{", "}", "\n", "self", ".", "_out_feature_strides", "=", "{", "}", "\n", "cur_stride", "=", "2", "\n", "cur_stage", "=", "2", "\n", "for", "t", ",", "c", ",", "n", ",", "s", ",", "name", "in", "self", ".", "cfgs", ":", "\n", "            ", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "4", "if", "width_mult", "==", "0.1", "else", "8", ")", "\n", "cur_stride", "=", "cur_stride", "*", "s", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", "if", "i", "==", "0", "else", "1", ",", "t", ",", "bn", ")", ")", "\n", "if", "cur_stage", "<=", "freeze_at", ":", "\n", "                    ", "layers", "[", "-", "1", "]", ".", "freeze", "(", ")", "\n", "", "if", "name", "!=", "''", "and", "i", "==", "n", "-", "1", ":", "\n", "                    ", "self", ".", "_out_feature_channels", "[", "name", "]", "=", "output_channel", "\n", "self", ".", "_out_feature_strides", "[", "name", "]", "=", "cur_stride", "\n", "cur_stage", "+=", "1", "\n", "", "input_channel", "=", "output_channel", "\n", "self", ".", "stage_name", ".", "append", "(", "name", "if", "i", "==", "n", "-", "1", "else", "''", ")", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "# building last several layers", "\n", "#        output_channel = _make_divisible(1280 * width_mult, 4 if width_mult == 0.1 else 8) if width_mult > 1.0 else 1280", "\n", "#        self.conv = conv_1x1_bn(input_channel, output_channel)", "\n", "#        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#        self.classifier = nn.Linear(output_channel, num_classes)", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.MobileNetV2.forward": [[166, 181], ["range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "features", "[", "i", "]", "(", "x", ")", "\n", "if", "self", ".", "stage_name", "[", "i", "]", "in", "self", ".", "_out_features", ":", "\n", "                ", "output", "[", "self", ".", "stage_name", "[", "i", "]", "]", "=", "x", "\n", "", "", "return", "output", "\n", "'''\n        x = self.features(x)\n        x = self.conv(x)\n        x = self.avgpool(x)\n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.MobileNetV2._initialize_weights": [[182, 195], ["mobilenetv2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "output_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.MobileNetV2.output_shape": [[195, 201], ["detectron2.layers.ShapeSpec"], "methods", ["None"], ["", "", "", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "ShapeSpec", "(", "\n", "channels", "=", "self", ".", "_out_feature_channels", "[", "name", "]", ",", "stride", "=", "self", ".", "_out_feature_strides", "[", "name", "]", "\n", ")", "\n", "for", "name", "in", "self", ".", "_out_features", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2._make_divisible": [[27, 45], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.conv_3x3_bn": [[47, 52], ["torch.Sequential", "torch.Conv2d", "detectron2.layers.get_norm", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_3x3_bn", "(", "inp", ",", "oup", ",", "stride", ",", "bn", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.conv_1x1_bn": [[55, 60], ["torch.Sequential", "torch.Conv2d", "detectron2.layers.get_norm", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "get_norm", "(", "bn", ",", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.build_mobilenetv2_backbone": [[205, 211], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "mobilenetv2.MobileNetV2"], "function", ["None"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_mobilenetv2_backbone", "(", "cfg", ",", "input_shape", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNet V2 model\n    \"\"\"", "\n", "return", "MobileNetV2", "(", "cfg", ",", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.fpn.build_resnet_fpn_backbone_kd": [[9, 31], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "resnet.build_resnet_backbone_kd", "detectron2.modeling.backbone.FPN", "detectron2.modeling.backbone.fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.build_resnet_backbone_kd"], ["@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_resnet_fpn_backbone_kd", "(", "cfg", ",", "input_shape", ":", "ShapeSpec", ")", ":", "\n", "# add ResNet 18", "\n", "    ", "\"\"\"\n    Args:\n        cfg: a detectron2 CfgNode\n\n    Returns:\n        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.\n    \"\"\"", "\n", "bottom_up", "=", "build_resnet_backbone_kd", "(", "cfg", ",", "input_shape", ")", "\n", "in_features", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "IN_FEATURES", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "OUT_CHANNELS", "\n", "backbone", "=", "FPN", "(", "\n", "bottom_up", "=", "bottom_up", ",", "\n", "in_features", "=", "in_features", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "NORM", ",", "\n", "top_block", "=", "LastLevelMaxPool", "(", ")", ",", "\n", "fuse_type", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "FUSE_TYPE", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.fpn.build_mobilenetv2_fpn_backbone": [[32, 53], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "mobilenetv2.build_mobilenetv2_backbone", "detectron2.modeling.backbone.FPN", "detectron2.modeling.backbone.fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.mobilenetv2.build_mobilenetv2_backbone"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_mobilenetv2_fpn_backbone", "(", "cfg", ",", "input_shape", ":", "ShapeSpec", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cfg: a detectron2 CfgNode\n\n    Returns:\n        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.\n    \"\"\"", "\n", "bottom_up", "=", "build_mobilenetv2_backbone", "(", "cfg", ",", "input_shape", ")", "\n", "in_features", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "IN_FEATURES", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "OUT_CHANNELS", "\n", "backbone", "=", "FPN", "(", "\n", "bottom_up", "=", "bottom_up", ",", "\n", "in_features", "=", "in_features", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "NORM", ",", "\n", "top_block", "=", "LastLevelMaxPool", "(", ")", ",", "\n", "fuse_type", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "FUSE_TYPE", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNetBlockBase.__init__": [[31, 44], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["\n", "\n", "class", "ConvBNLayer", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "filter_size", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "ConvBNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_conv", "=", "Conv2D", "(", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNetBlockBase.freeze": [[45, 50], ["resnet.ResNetBlockBase.parameters", "detectron2.layers.FrozenBatchNorm2d.convert_frozen_batchnorm"], "methods", ["None"], ["in_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "num_filters", ",", "\n", "kernel_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "groups", ",", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicBlock.__init__": [[53, 103], ["resnet.ResNetBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["self", ".", "_batch_norm", "=", "BatchNorm", "(", "\n", "num_filters", ",", "act", "=", "act", ",", "data_layout", "=", "data_format", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "_conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "_batch_norm", "(", "y", ")", "\n", "return", "y", "\n", "\n", "\n", "", "", "class", "BottleneckBlock", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv2", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", "*", "4", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicBlock.forward": [[104, 118], ["resnet.BasicBlock.conv1", "torch.relu_", "torch.relu_", "resnet.BasicBlock.conv2", "torch.relu_", "torch.relu_", "resnet.BasicBlock.shortcut"], "methods", ["None"], ["self", ".", "_num_channels_out", "=", "num_filters", "*", "4", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv2", ")", "\n", "# get feature map before ", "\n", "if", "not", "self", ".", "is_last", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BottleneckBlock.__init__": [[120, 191], ["resnet.ResNetBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], ["", "return", "y", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "num_channels", ",", "\n", "num_filters", ",", "\n", "stride", ",", "\n", "shortcut", "=", "True", ",", "\n", "data_format", "=", "\"NCHW\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "conv0", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "self", ".", "conv1", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_filters", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "3", ",", "\n", "act", "=", "None", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "not", "shortcut", ":", "\n", "            ", "self", ".", "short", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "num_channels", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "filter_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "shortcut", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "inputs", ")", "\n", "conv1", "=", "self", ".", "conv1", "(", "y", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "short", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "short", "=", "self", ".", "short", "(", "inputs", ")", "\n", "", "y", "=", "paddle", ".", "add", "(", "x", "=", "short", ",", "y", "=", "conv1", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "layers", "=", "50", ",", "\n", "classes_num", "=", "1000", ",", "\n", "input_image_channel", "=", "3", ",", "\n", "data_format", "=", "\"NCHW\"", ",", "\n", "return_feats", "=", "False", ",", "\n", "get_feats_before_relu", "=", "True", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "input_image_channel", "=", "input_image_channel", "\n", "\n", "self", ".", "return_feats", "=", "return_feats", "\n", "self", ".", "get_feats_before_relu", "=", "get_feats_before_relu", "\n", "\n", "supported_layers", "=", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", "\n", "assert", "layers", "in", "supported_layers", ",", "\"supported layers are {} but input layer is {}\"", ".", "format", "(", "\n", "supported_layers", ",", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BottleneckBlock.forward": [[204, 221], ["resnet.BottleneckBlock.conv1", "torch.relu_", "torch.relu_", "resnet.BottleneckBlock.conv2", "torch.relu_", "torch.relu_", "resnet.BottleneckBlock.conv3", "torch.relu_", "torch.relu_", "resnet.BottleneckBlock.shortcut"], "methods", ["None"], ["self", ".", "depth", "=", "depth", "\n", "\n", "self", ".", "conv", "=", "ConvBNLayer", "(", "\n", "num_channels", "=", "self", ".", "input_image_channel", ",", "\n", "num_filters", "=", "64", ",", "\n", "filter_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "act", "=", "\"relu\"", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "self", ".", "pool2d_max", "=", "MaxPool2D", "(", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "block_list", "=", "[", "]", "\n", "if", "layers", ">=", "50", ":", "\n", "            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "if", "layers", "in", "[", "101", ",", "152", "]", "and", "block", "==", "2", ":", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.DeformBottleneckBlock.__init__": [[224, 310], ["resnet.ResNetBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "deform_conv_op", "detectron2.layers.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.constant_"], ["", "else", ":", "\n", "                            ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "\"b\"", "+", "str", "(", "i", ")", "\n", "", "", "else", ":", "\n", "                        ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "", "bottleneck_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BottleneckBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n", "if", "i", "==", "0", "else", "num_filters", "[", "block", "]", "*", "4", ",", "\n", "num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "is_last", "=", "i", "==", "depth", "[", "block", "]", "-", "1", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "bottleneck_block", ")", "\n", "shortcut", "=", "True", "\n", "", "", "", "else", ":", "\n", "            ", "for", "block", "in", "range", "(", "len", "(", "depth", ")", ")", ":", "\n", "                ", "shortcut", "=", "False", "\n", "for", "i", "in", "range", "(", "depth", "[", "block", "]", ")", ":", "\n", "                    ", "conv_name", "=", "\"res\"", "+", "str", "(", "block", "+", "2", ")", "+", "chr", "(", "97", "+", "i", ")", "\n", "basic_block", "=", "self", ".", "add_sublayer", "(", "\n", "conv_name", ",", "\n", "BasicBlock", "(", "\n", "num_channels", "=", "num_channels", "[", "block", "]", "\n", "if", "i", "==", "0", "else", "num_filters", "[", "block", "]", ",", "\n", "num_filters", "=", "num_filters", "[", "block", "]", ",", "\n", "stride", "=", "2", "if", "i", "==", "0", "and", "block", "!=", "0", "else", "1", ",", "\n", "shortcut", "=", "shortcut", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", ")", "\n", "self", ".", "block_list", ".", "append", "(", "basic_block", ")", "\n", "shortcut", "=", "True", "\n", "\n", "", "", "", "self", ".", "pool2d_avg", "=", "AdaptiveAvgPool2D", "(", "1", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "self", ".", "pool2d_avg_channels", "=", "num_channels", "[", "-", "1", "]", "*", "2", "\n", "\n", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "pool2d_avg_channels", "*", "1.0", ")", "\n", "\n", "self", ".", "out", "=", "Linear", "(", "\n", "self", ".", "pool2d_avg_channels", ",", "\n", "classes_num", ",", "\n", "weight_attr", "=", "ParamAttr", "(", "initializer", "=", "Uniform", "(", "-", "stdv", ",", "stdv", ")", ")", ",", "\n", "bias_attr", "=", "ParamAttr", "(", ")", ")", "\n", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "params", "=", "paddle", ".", "load", "(", "pretrained", ")", "\n", "self", ".", "set_dict", "(", "params", ")", "\n", "print", "(", "\"load pretrained model from: {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "inputs", "=", "paddle", ".", "tensor", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "inputs", ".", "stop_gradient", "=", "True", "\n", "", "y", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "y", "=", "self", ".", "pool2d_max", "(", "y", ")", "\n", "stage_index", "=", "np", ".", "cumsum", "(", "self", ".", "depth", ")", "\n", "features", "=", "[", "]", "\n", "stage", "=", "2", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "y", "=", "block", "(", "y", ")", "\n", "if", "idx", "+", "1", "in", "stage_index", ":", "\n", "                ", "if", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "if", "not", "self", ".", "get_feats_before_relu", ":", "\n", "                    ", "features", ".", "append", "(", "y", ")", "\n", "", "stage", "+=", "1", "\n", "", "", "y", "=", "self", ".", "pool2d_avg", "(", "y", ")", "\n", "features", ".", "append", "(", "y", ")", "\n", "y", "=", "paddle", ".", "reshape", "(", "y", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "pool2d_avg_channels", "]", ")", "\n", "y", "=", "self", ".", "out", "(", "y", ")", "\n", "\n", "if", "self", ".", "return_feats", ":", "\n", "            ", "return", "{", "\"feats\"", ":", "features", ",", "\"logits\"", ":", "y", "}", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n", "\n", "", "", "", "def", "ResNet18", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "18", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "ResNet34", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "34", ",", "**", "args", ")", "\n", "return", "model", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.DeformBottleneckBlock.forward": [[311, 336], ["resnet.DeformBottleneckBlock.conv1", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "resnet.DeformBottleneckBlock.conv3", "torch.relu_", "torch.relu_", "resnet.DeformBottleneckBlock.conv2_offset", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sigmoid.sigmoid.sigmoid", "resnet.DeformBottleneckBlock.conv2", "resnet.DeformBottleneckBlock.conv2_offset", "resnet.DeformBottleneckBlock.conv2", "resnet.DeformBottleneckBlock.shortcut"], "methods", ["None"], ["\n", "\n", "", "def", "ResNet50", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "50", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "ResNet101", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "101", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "ResNet152", "(", "**", "args", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "layers", "=", "152", ",", "**", "args", ")", "\n", "return", "model", "\n", "\n", "\n", "# if __name__ == \"__main__\":", "\n", "#     resnet50 = ResNet50(return_feats=True, get_feats_before_relu=True)", "\n", "#     x = paddle.rand([1, 3, 224, 224])", "\n", "\n", "#     results, logits = resnet50(x)", "\n", "#     for r in results:", "\n", "#         print(r.shape)", "\n", "#     print(\"=====ligits====\")", "\n", "#     print(logits.shape)", "\n"]], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicStem.__init__": [[360, 378], ["torch.nn.Module.__init__", "detectron2.layers.Conv2d", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicStem.forward": [[379, 384], ["resnet.BasicStem.conv1", "torch.relu_", "torch.relu_", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicStem.out_channels": [[385, 388], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.BasicStem.stride": [[389, 392], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__": [[395, 445], ["detectron2.modeling.backbone.Backbone.__init__", "enumerate", "len", "torch.nn.Sequential", "torch.nn.Sequential", "resnet.ResNet.add_module", "resnet.ResNet.stages_and_names.append", "int", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "str", "resnet.ResNet.named_children", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.utils.initializer.normal_"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.forward": [[446, 462], ["resnet.ResNet.stem", "stage", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNet.output_shape": [[463, 469], ["detectron2.layers.ShapeSpec"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.make_stage": [[338, 357], ["range", "blocks.append", "block_class"], "function", ["None"], []], "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.build_resnet_backbone_kd": [[472, 551], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "resnet.BasicStem", "max", "enumerate", "resnet.ResNet", "FrozenBatchNorm2d.convert_frozen_batchnorm.parameters", "detectron2.layers.FrozenBatchNorm2d.convert_frozen_batchnorm", "range", "resnet.make_stage", "stages.append", "block.freeze"], "function", ["home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.make_stage", "home.repos.pwc.inspect_result.Jia-Research-Lab_ReviewKD.backbone.resnet.ResNetBlockBase.freeze"], []]}