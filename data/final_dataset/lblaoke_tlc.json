{"home.repos.pwc.inspect_result.lblaoke_tlc.None.main.random_seed_setup": [[14, 25], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "random_seed_setup", "(", "seed", ":", "int", "=", "None", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "if", "seed", ":", "\n", "        ", "print", "(", "'Set random seed as'", ",", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.main.main": [[26, 74], ["config.get_logger", "config.init_obj", "config.init_obj.split_validation", "config.init_obj", "getattr", "config.init_obj", "config.init_obj", "trainer.Trainer", "main.random_seed_setup", "trainer.Trainer.train", "config.init_obj.parameters", "print", "torch.optim.lr_scheduler.LambdaLR", "float"], "function", ["home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.split_validation", "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.lblaoke_tlc.None.main.random_seed_setup", "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer.train"], ["", "", "def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "config", ".", "init_obj", "(", "'data_loader'", ",", "module_data", ")", "\n", "valid_data_loader", "=", "data_loader", ".", "split_validation", "(", ")", "\n", "\n", "# build model architecture, then print to console", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "\n", "# get loss", "\n", "loss_class", "=", "getattr", "(", "module_loss", ",", "config", "[", "\"loss\"", "]", "[", "\"type\"", "]", ")", "\n", "criterion", "=", "config", ".", "init_obj", "(", "'loss'", ",", "module_loss", ",", "cls_num_list", "=", "data_loader", ".", "cls_num_list", ")", "\n", "\n", "# build optimizer, learning rate scheduler. delete every lines containing lr_scheduler for disabling scheduler", "\n", "optimizer", "=", "config", ".", "init_obj", "(", "'optimizer'", ",", "torch", ".", "optim", ",", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "\"type\"", "in", "config", ".", "_config", "[", "\"lr_scheduler\"", "]", ":", "\n", "        ", "lr_scheduler_args", "=", "config", "[", "\"lr_scheduler\"", "]", "[", "\"args\"", "]", "\n", "gamma", "=", "lr_scheduler_args", "[", "\"gamma\"", "]", "if", "\"gamma\"", "in", "lr_scheduler_args", "else", "0.1", "\n", "print", "(", "\"step1, step2, warmup_epoch, gamma:\"", ",", "(", "lr_scheduler_args", "[", "\"step1\"", "]", ",", "lr_scheduler_args", "[", "\"step2\"", "]", ",", "lr_scheduler_args", "[", "\"warmup_epoch\"", "]", ",", "gamma", ")", ")", "\n", "\n", "def", "lr_lambda", "(", "epoch", ")", ":", "\n", "            ", "if", "epoch", ">=", "lr_scheduler_args", "[", "\"step2\"", "]", ":", "\n", "                ", "lr", "=", "gamma", "*", "gamma", "\n", "", "elif", "epoch", ">=", "lr_scheduler_args", "[", "\"step1\"", "]", ":", "\n", "                ", "lr", "=", "gamma", "\n", "", "else", ":", "\n", "                ", "lr", "=", "1", "\n", "", "warmup_epoch", "=", "lr_scheduler_args", "[", "\"warmup_epoch\"", "]", "\n", "if", "epoch", "<", "warmup_epoch", ":", "\n", "                ", "lr", "=", "lr", "*", "float", "(", "1", "+", "epoch", ")", "/", "warmup_epoch", "\n", "", "return", "lr", "\n", "", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "None", "\n", "\n", "", "trainer", "=", "Trainer", "(", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", "\n", ")", "\n", "random_seed_setup", "(", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.__init__": [[12, 50], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._update_config", "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.write_json", "home.repos.pwc.inspect_result.lblaoke_tlc.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ",", "load_crt", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class to parse configuration json file. Handles hyperparameters for training, initializations of modules, checkpoint saving\n        and logging module.\n        :param config: Dict containing configurations, hyperparameters for training. contents of `config.json` file for example.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default\n        \"\"\"", "\n", "# load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "\n", "self", ".", "load_crt", "=", "load_crt", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "if", "run_id", "is", "None", ":", "# use timestamp as default run-id", "\n", "            ", "run_id", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "run_id", "\n", "\n", "# make directory for saving checkpoints and log.", "\n", "exist_ok", "=", "run_id", "==", "''", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.from_args": [[52, 76], ["hasattr", "pathlib.Path", "utils.read_json", "cls", "args.parse_args.parse_args.add_argument", "isinstance", "args.parse_args.parse_args.parse_args", "getattr", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.read_json", "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "args", ",", "\"load_crt\"", ")", ":", "\n", "            ", "load_crt", "=", "args", ".", "load_crt", "\n", "", "else", ":", "\n", "            ", "load_crt", "=", "None", "\n", "\n", "", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "config", "=", "read_json", "(", "cfg_fname", ")", "\n", "\n", "# parse custom cli options into dictionary", "\n", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "return", "cls", "(", "config", ",", "modification", ",", "load_crt", "=", "load_crt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_obj": [[77, 91], ["module_args.update", "dict", "dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.update"], ["", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "if", "'args'", "in", "self", "[", "name", "]", "else", "dict", "(", ")", "\n", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.init_ftn": [[92, 106], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs)`.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.__getitem__": [[107, 110], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Access items like ordinary dict.\"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.get_logger": [[111, 117], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.config": [[119, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.save_dir": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config.ConfigParser.log_dir": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._update_config": [[132, 140], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._get_opt_name": [[141, 146], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._set_by_path": [[147, 151], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.None.parse_config._get_by_path": [[152, 155], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.gflops.gflops_normed_linear": [[53, 58], ["y.size", "torch.DoubleTensor", "m.weight.size", "m.weight.numel", "int"], "function", ["None"], ["def", "gflops_normed_linear", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# per output element", "\n", "    ", "num_instance", "=", "y", ".", "size", "(", "0", ")", "\n", "total_ops", "=", "m", ".", "weight", ".", "numel", "(", ")", "*", "num_instance", "+", "m", ".", "weight", ".", "size", "(", "0", ")", "# weight normalization can be ignored", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.__init__": [[83, 86], ["pandas.DataFrame", "util.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.reset": [[87, 90], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.update": [[91, 97], ["isinstance", "len"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "tuple", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "value", ",", "n", "=", "value", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.avg": [[98, 100], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.MetricTracker.result": [[101, 103], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.rename_parallel_state_dict": [[29, 40], ["list", "state_dict.keys", "k.startswith", "print", "state_dict.pop"], "function", ["None"], ["", "def", "rename_parallel_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "v", "=", "state_dict", ".", "pop", "(", "k", ")", "\n", "renamed", "=", "k", "[", "7", ":", "]", "\n", "state_dict", "[", "renamed", "]", "=", "v", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "print", "(", "\"Detected DataParallel: Renamed {} parameters\"", ".", "format", "(", "count", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.load_state_dict": [[41, 61], ["model.state_dict", "state_dict.items", "isinstance", "len", "print", "print", "own_state[].copy_", "print", "len"], "function", ["None"], ["", "def", "load_state_dict", "(", "model", ",", "state_dict", ",", "no_ignore", "=", "False", ")", ":", "\n", "    ", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "count", "=", "0", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "not", "in", "own_state", ":", "# ignore", "\n", "            ", "print", "(", "\"Warning: {} ignored because it does not exist in state_dict\"", ".", "format", "(", "name", ")", ")", "\n", "assert", "not", "no_ignore", ",", "\"Ignoring param that does not exist in model's own state dict is not allowed.\"", "\n", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "# backwards compatibility for serialized parameters", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "try", ":", "\n", "            ", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "\"Error in copying parameter {}, source shape: {}, destination shape: {}\"", ".", "format", "(", "name", ",", "param", ".", "shape", ",", "own_state", "[", "name", "]", ".", "shape", ")", ")", "\n", "raise", "e", "\n", "", "count", "+=", "1", "\n", "", "if", "count", "!=", "len", "(", "own_state", ")", ":", "\n", "        ", "print", "(", "\"Warning: Model has {} parameters, copied {} from state dict\"", ".", "format", "(", "len", "(", "own_state", ")", ",", "count", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.ensure_dir": [[62, 66], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["", "def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.read_json": [[67, 71], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.write_json": [[72, 76], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.inf_loop": [[77, 81], ["itertools.repeat"], "function", ["None"], ["", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.__init__": [[8, 35], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.sum", "numpy.max", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "max_m", "=", "0.5", ",", "reweight_epoch", "=", "-", "1", ",", "reweight_factor", "=", "0.05", ",", "annealing", "=", "500", ",", "tau", "=", "0.54", ")", ":", "\n", "        ", "super", "(", "TLCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "\n", "m_list", "=", "1.", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "idx", "=", "1", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "", "cls_num_list", "=", "np", ".", "array", "(", "cls_num_list", ")", "/", "np", ".", "sum", "(", "cls_num_list", ")", "\n", "C", "=", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "C", "*", "cls_num_list", "*", "reweight_factor", "+", "1", "-", "reweight_factor", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "max", "(", "per_cls_weights", ")", "\n", "\n", "# save diversity per_cls_weights", "\n", "self", ".", "per_cls_weights_enabled_diversity", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "\"cuda:0\"", ")", "\n", "self", ".", "T", "=", "(", "reweight_epoch", "+", "annealing", ")", "/", "reweight_factor", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to": [[36, 44], ["super().to", "loss.TLCLoss.m_list.to", "loss.TLCLoss.per_cls_weights_enabled.to", "loss.TLCLoss.per_cls_weights_enabled_diversity.to"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "", "if", "self", ".", "per_cls_weights_enabled_diversity", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", ".", "to", "(", "device", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss._hook_before_epoch": [[45, 54], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "self", ".", "per_cls_weights_enabled", "\n", "self", ".", "per_cls_weights_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "None", "\n", "self", ".", "per_cls_weights_diversity", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.get_final_output": [[55, 63], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "y.data.view", "torch.zeros_like.float.transpose", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["None"], ["", "", "", "def", "get_final_output", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "y", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "30", "*", "batch_m", "\n", "return", "torch", ".", "exp", "(", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.forward": [[64, 100], ["range", "loss.TLCLoss.get_final_output", "loss.TLCLoss.sum", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.one_hot", "torch.one_hot", "torch.one_hot", "alpha_tilde.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nll_loss.mean", "kl.squeeze", "loss.TLCLoss.per_cls_weights_diversity.view", "loss.TLCLoss.mean().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "[].max", "torch.where.sum", "torch.where.sum", "torch.where.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma().sum", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "loss.TLCLoss.mean", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "epoch", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "extra_info", "[", "\"num_expert\"", "]", ")", ":", "\n", "            ", "alpha", "=", "self", ".", "get_final_output", "(", "extra_info", "[", "\"logits\"", "]", "[", "i", "]", ",", "y", ")", "\n", "S", "=", "alpha", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "l", "=", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "alpha", ")", "-", "torch", ".", "log", "(", "S", ")", ",", "y", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "# KL", "\n", "yi", "=", "F", ".", "one_hot", "(", "y", ",", "num_classes", "=", "alpha", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# adjusted parameters of D(p|alpha)", "\n", "alpha_tilde", "=", "yi", "+", "(", "1", "-", "yi", ")", "*", "(", "alpha", "+", "1", ")", "\n", "S_tilde", "=", "alpha_tilde", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "kl", "=", "torch", ".", "lgamma", "(", "S_tilde", ")", "-", "torch", ".", "lgamma", "(", "torch", ".", "tensor", "(", "alpha_tilde", ".", "shape", "[", "1", "]", ")", ")", "-", "torch", ".", "lgamma", "(", "alpha_tilde", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "(", "(", "alpha_tilde", "-", "1", ")", "*", "(", "torch", ".", "digamma", "(", "alpha_tilde", ")", "-", "torch", ".", "digamma", "(", "S_tilde", ")", ")", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "l", "+=", "epoch", "/", "self", ".", "T", "*", "kl", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# diversity", "\n", "if", "self", ".", "per_cls_weights_diversity", "is", "not", "None", ":", "\n", "                ", "diversity_temperature", "=", "self", ".", "per_cls_weights_diversity", ".", "view", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "temperature_mean", "=", "diversity_temperature", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "diversity_temperature", "=", "1", "\n", "temperature_mean", "=", "1", "\n", "", "output_dist", "=", "F", ".", "log_softmax", "(", "extra_info", "[", "\"logits\"", "]", "[", "i", "]", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mean_output_dist", "=", "F", ".", "softmax", "(", "x", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "", "l", "-=", "0.01", "*", "temperature_mean", "*", "temperature_mean", "*", "F", ".", "kl_div", "(", "output_dist", ",", "mean_output_dist", ",", "reduction", "=", "\"none\"", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# dynamic engagement", "\n", "w", "=", "extra_info", "[", "'w'", "]", "[", "i", "]", "/", "extra_info", "[", "'w'", "]", "[", "i", "]", ".", "max", "(", ")", "\n", "w", "=", "torch", ".", "where", "(", "w", ">", "self", ".", "tau", ",", "True", ",", "False", ")", "\n", "loss", "+=", "(", "w", "*", "l", ")", ".", "sum", "(", ")", "/", "w", ".", "sum", "(", ")", "\n", "loss", "+=", "l", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.model.Model.__init__": [[10, 14], ["base.BaseModel.__init__", "backbone_class"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "backbone_class", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "backbone_class", "is", "not", "None", ":", "# Do not init backbone here if None", "\n", "            ", "self", ".", "backbone", "=", "backbone_class", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.model.Model._hook_before_iter": [[15, 17], ["model.Model.backbone._hook_before_iter"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._hook_before_iter"], ["", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "_hook_before_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.model.Model.forward": [[18, 20], ["model.Model.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "backbone", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.model.ResNet32Model.__init__": [[22, 30], ["model.Model.__init__", "ResnetCifar.ResNet_s"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "self", ".", "backbone", "=", "ResnetCifar", ".", "ResNet_s", "(", "\n", "ResnetCifar", ".", "BasicBlock", ",", "\n", "[", "5", ",", "5", ",", "5", "]", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_experts", "=", "num_experts", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.model.ResNet50Model.__init__": [[33, 43], ["model.Model.__init__", "ResnetImagenet.ResNet"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "self", ".", "backbone", "=", "ResnetImagenet", ".", "ResNet", "(", "\n", "ResnetImagenet", ".", "Bottleneck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "layer3_output_dim", "=", "layer3_output_dim", ",", "\n", "layer4_output_dim", "=", "layer4_output_dim", ",", "\n", "num_experts", "=", "num_experts", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.metric.ACC": [[6, 36], ["int", "target.bincount().cpu().numpy", "range", "print", "print", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.argmax", "torch.argmax", "correct.sum().item", "len", "region_correct.sum().item", "len", "torch.where().sum().item", "torch.where().sum().item", "torch.where().sum().item", "torch.where().sum().item", "target_count[].sum", "target_count[].sum", "target_count[].sum", "len", "correct[].item", "torch.count_nonzero().item", "torch.count_nonzero().item", "target.bincount().cpu", "range", "correct.sum", "region_correct.sum", "torch.arange", "torch.arange", "torch.where().sum", "torch.where().sum", "torch.where().sum", "torch.where().sum", "torch.count_nonzero", "torch.count_nonzero", "target.bincount", "torch.where", "torch.where", "torch.where", "torch.where", "target[].item"], "function", ["None"], ["def", "ACC", "(", "output", ",", "target", ",", "u", "=", "None", ",", "region_len", "=", "100", "/", "3", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "correct", "=", "(", "pred", "==", "target", ")", "\n", "region_correct", "=", "(", "pred", "/", "region_len", ")", ".", "long", "(", ")", "==", "(", "target", "/", "region_len", ")", ".", "long", "(", ")", "\n", "", "acc", "=", "correct", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "target", ")", "\n", "region_acc", "=", "region_correct", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "target", ")", "\n", "split_acc", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "# count number of classes for each region", "\n", "num_class", "=", "int", "(", "3", "*", "region_len", ")", "\n", "region_idx", "=", "(", "torch", ".", "arange", "(", "num_class", ")", "/", "region_len", ")", ".", "long", "(", ")", "\n", "region_vol", "=", "[", "\n", "num_class", "-", "torch", ".", "count_nonzero", "(", "region_idx", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "where", "(", "region_idx", "==", "1", ",", "True", ",", "False", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "where", "(", "region_idx", "==", "2", ",", "True", ",", "False", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "]", "\n", "target_count", "=", "target", ".", "bincount", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "region_vol", "=", "[", "target_count", "[", ":", "region_vol", "[", "0", "]", "]", ".", "sum", "(", ")", ",", "target_count", "[", "region_vol", "[", "0", "]", ":", "(", "region_vol", "[", "0", "]", "+", "region_vol", "[", "1", "]", ")", "]", ".", "sum", "(", ")", ",", "target_count", "[", "-", "region_vol", "[", "2", "]", ":", "]", ".", "sum", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target", ")", ")", ":", "\n", "        ", "split_acc", "[", "region_idx", "[", "target", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+=", "correct", "[", "i", "]", ".", "item", "(", ")", "\n", "", "split_acc", "=", "[", "split_acc", "[", "i", "]", "/", "region_vol", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "print", "(", "'Classification ACC:'", ")", "\n", "print", "(", "'\\t all \\t ='", ",", "acc", ")", "\n", "print", "(", "'\\t region  ='", ",", "region_acc", ")", "\n", "print", "(", "'\\t head \\t ='", ",", "split_acc", "[", "0", "]", ")", "\n", "print", "(", "'\\t med \\t ='", ",", "split_acc", "[", "1", "]", ")", "\n", "print", "(", "'\\t tail \\t ='", ",", "split_acc", "[", "2", "]", ")", "\n", "return", "acc", ",", "region_acc", ",", "split_acc", "[", "0", "]", ",", "split_acc", "[", "1", "]", ",", "split_acc", "[", "2", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.NormedLinear.__init__": [[14, 18], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "ResnetCifar.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ResnetCifar.NormedLinear.weight.data.uniform_().renorm_", "ResnetCifar.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.NormedLinear.forward": [[18, 20], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.BasicBlock.__init__": [[22, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "shortcut", "=", "lambda", "x", ":", "x", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "planes", "=", "planes", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "shortcut", "=", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.BasicBlock.forward": [[33, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResnetCifar.BasicBlock.bn1", "ResnetCifar.BasicBlock.bn2", "ResnetCifar.BasicBlock.shortcut", "ResnetCifar.BasicBlock.conv1", "ResnetCifar.BasicBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.ResNet_s.__init__": [[40, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "ResnetCifar.ResNet_s.apply", "range", "ResnetCifar.ResNet_s._make_layer", "ResnetCifar.ResNet_s._make_layer", "ResnetCifar.ResNet_s._make_layer", "ResnetCifar.NormedLinear", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_experts", ",", "num_classes", ",", "reweight_temperature", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "self", ".", "eta", "=", "reweight_temperature", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "self", ".", "layer2s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "64", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "\n", "self", ".", "use_experts", "=", "list", "(", "range", "(", "num_experts", ")", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.ResNet_s._make_layer": [[63, 71], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "self", ".", "next_in_planes", "=", "self", ".", "in_planes", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "next_in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.ResNet_s._hook_before_iter": [[72, 79], ["ResnetCifar.ResNet_s.modules", "isinstance", "module.eval"], "methods", ["None"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "not", "module", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar.ResNet_s.forward": [[80, 120], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "sum", "ResnetCifar.ResNet_s.bn1", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "xi.flatten.flatten.flatten", "outs.append", "alpha.sum", "ResnetCifar.ResNet_s.w.append", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "wi.unsqueeze", "ResnetCifar.ResNet_s.conv1", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "alpha.sum.squeeze", "wi.sum", "b0.view", "b.view", "bb.sum", "bb.diagonal().sum", "bb.diagonal"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "self", ".", "logits", "=", "outs", "\n", "b0", "=", "None", "\n", "self", ".", "w", "=", "[", "torch", ".", "ones", "(", "len", "(", "x", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "x", ".", "device", ")", "]", "\n", "\n", "for", "i", "in", "self", ".", "use_experts", ":", "\n", "            ", "xi", "=", "self", ".", "layer1s", "[", "i", "]", "(", "x", ")", "\n", "xi", "=", "self", ".", "layer2s", "[", "i", "]", "(", "xi", ")", "\n", "xi", "=", "self", ".", "layer3s", "[", "i", "]", "(", "xi", ")", "\n", "xi", "=", "F", ".", "avg_pool2d", "(", "xi", ",", "xi", ".", "shape", "[", "3", "]", ")", "\n", "xi", "=", "xi", ".", "flatten", "(", "1", ")", "\n", "xi", "=", "self", ".", "linears", "[", "i", "]", "(", "xi", ")", "\n", "xi", "=", "xi", "*", "30", "\n", "outs", ".", "append", "(", "xi", ")", "\n", "\n", "# evidential", "\n", "alpha", "=", "torch", ".", "exp", "(", "xi", ")", "+", "1", "\n", "S", "=", "alpha", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "b", "=", "(", "alpha", "-", "1", ")", "/", "S", "\n", "u", "=", "self", ".", "num_classes", "/", "S", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# update w", "\n", "if", "b0", "is", "None", ":", "\n", "                ", "C", "=", "0", "\n", "", "else", ":", "\n", "                ", "bb", "=", "b0", ".", "view", "(", "-", "1", ",", "b0", ".", "shape", "[", "1", "]", ",", "1", ")", "@", "b", ".", "view", "(", "-", "1", ",", "1", ",", "b", ".", "shape", "[", "1", "]", ")", "\n", "C", "=", "bb", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "-", "bb", ".", "diagonal", "(", "dim1", "=", "1", ",", "dim2", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "b0", "=", "b", "\n", "self", ".", "w", ".", "append", "(", "self", ".", "w", "[", "-", "1", "]", "*", "u", "/", "(", "1", "-", "C", ")", ")", "\n", "\n", "# dynamic reweighting", "\n", "", "exp_w", "=", "[", "torch", ".", "exp", "(", "wi", "/", "self", ".", "eta", ")", "for", "wi", "in", "self", ".", "w", "]", "\n", "exp_w", "=", "[", "wi", "/", "wi", ".", "sum", "(", ")", "for", "wi", "in", "exp_w", "]", "\n", "exp_w", "=", "[", "wi", ".", "unsqueeze", "(", "-", "1", ")", "for", "wi", "in", "exp_w", "]", "\n", "\n", "reweighted_outs", "=", "[", "outs", "[", "i", "]", "*", "exp_w", "[", "i", "]", "for", "i", "in", "self", ".", "use_experts", "]", "\n", "return", "sum", "(", "reweighted_outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetCifar._weights_init": [[8, 12], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.NormedLinear.__init__": [[8, 12], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ResnetImagenet.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ResnetImagenet.NormedLinear.weight.data.uniform_().renorm_", "ResnetImagenet.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.NormedLinear.forward": [[12, 14], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.Bottleneck.__init__": [[16, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.Bottleneck.forward": [[28, 49], ["ResnetImagenet.Bottleneck.conv1", "ResnetImagenet.Bottleneck.bn1", "ResnetImagenet.Bottleneck.relu", "ResnetImagenet.Bottleneck.conv2", "ResnetImagenet.Bottleneck.bn2", "ResnetImagenet.Bottleneck.relu", "ResnetImagenet.Bottleneck.conv3", "ResnetImagenet.Bottleneck.bn3", "ResnetImagenet.Bottleneck.relu", "ResnetImagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet.__init__": [[51, 88], ["list", "torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ResnetImagenet.ResNet._make_layer", "ResnetImagenet.ResNet._make_layer", "ResnetImagenet.ResNet._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "ResnetImagenet.ResNet.modules", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "isinstance", "ResnetImagenet.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "ResnetImagenet.NormedLinear", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "range"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_experts", ",", "num_classes", "=", "1000", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "reweight_temperature", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "self", ".", "eta", "=", "reweight_temperature", "\n", "self", ".", "use_experts", "=", "list", "(", "range", "(", "num_experts", ")", ")", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "layer3_output_dim", "=", "256", "\n", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "layer4_output_dim", "=", "512", "\n", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer4s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer4_output_dim", "*", "4", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._hook_before_iter": [[89, 99], ["ResnetImagenet.ResNet.modules", "isinstance", "print", "module.eval"], "methods", ["None"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._make_layer": [[100, 113], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "next_inplanes", "=", "planes", "*", "4", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet.expert_forward": [[114, 120], ["ResnetImagenet.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "expert_forward", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer4s", "[", "ind", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linears", "[", "ind", "]", "(", "x", ")", "\n", "return", "x", "*", "30", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet.forward": [[121, 162], ["sum", "utils.autocast", "ResnetImagenet.ResNet.conv1", "ResnetImagenet.ResNet.bn1", "ResnetImagenet.ResNet.relu", "ResnetImagenet.ResNet.maxpool", "ResnetImagenet.ResNet.layer1", "ResnetImagenet.ResNet.layer2", "ResnetImagenet.ResNet.layer3", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "wi.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ResnetImagenet.ResNet.expert_forward", "outs.append", "alpha.sum", "ResnetImagenet.ResNet.w.append", "wi.sum", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "alpha.sum.squeeze", "b0.view", "b.view", "bb.sum", "bb.diagonal().sum", "bb.diagonal"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet.expert_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "self", ".", "logits", "=", "outs", "\n", "b0", "=", "None", "\n", "self", ".", "w", "=", "[", "torch", ".", "ones", "(", "len", "(", "x", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "x", ".", "device", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "xi", "=", "self", ".", "expert_forward", "(", "x", ",", "i", ")", "\n", "outs", ".", "append", "(", "xi", ")", "\n", "\n", "# evidential", "\n", "alpha", "=", "torch", ".", "exp", "(", "xi", ")", "+", "1", "\n", "S", "=", "alpha", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "b", "=", "(", "alpha", "-", "1", ")", "/", "S", "\n", "u", "=", "self", ".", "num_classes", "/", "S", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# update w", "\n", "if", "b0", "is", "None", ":", "\n", "                    ", "C", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bb", "=", "b0", ".", "view", "(", "-", "1", ",", "b0", ".", "shape", "[", "1", "]", ",", "1", ")", "@", "b", ".", "view", "(", "-", "1", ",", "1", ",", "b", ".", "shape", "[", "1", "]", ")", "\n", "C", "=", "bb", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "-", "bb", ".", "diagonal", "(", "dim1", "=", "1", ",", "dim2", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "b0", "=", "b", "\n", "self", ".", "w", ".", "append", "(", "self", ".", "w", "[", "-", "1", "]", "*", "u", "/", "(", "1", "-", "C", ")", ")", "\n", "\n", "# dynamic reweighting", "\n", "", "", "exp_w", "=", "[", "torch", ".", "exp", "(", "wi", "/", "self", ".", "eta", ")", "for", "wi", "in", "self", ".", "w", "]", "\n", "exp_w", "=", "[", "wi", "/", "wi", ".", "sum", "(", ")", "for", "wi", "in", "exp_w", "]", "\n", "exp_w", "=", "[", "wi", ".", "unsqueeze", "(", "-", "1", ")", "for", "wi", "in", "exp_w", "]", "\n", "\n", "reweighted_outs", "=", "[", "outs", "[", "i", "]", "*", "exp_w", "[", "i", "]", "for", "i", "in", "self", ".", "use_experts", "]", "\n", "return", "sum", "(", "reweighted_outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.cifar_data_loaders.ImbalanceCIFAR100DataLoader.__init__": [[13, 43], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].tolist", "torch.utils.data.DataLoader.__init__", "imbalance_cifar.IMBALANCECIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "max", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "numpy.histogram"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "num_workers", ",", "training", "=", "True", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "dataset", "=", "IMBALANCECIFAR100", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "None", "\n", "\n", "", "num_classes", "=", "max", "(", "self", ".", "dataset", ".", "targets", ")", "+", "1", "\n", "assert", "num_classes", "==", "100", "\n", "\n", "self", ".", "cls_num_list", "=", "np", ".", "histogram", "(", "self", ".", "dataset", ".", "targets", ",", "bins", "=", "num_classes", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'drop_last'", ":", "False", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.cifar_data_loaders.ImbalanceCIFAR100DataLoader.split_validation": [[44, 51], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ",", "type", "=", "'test'", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "OOD_dataset", "if", "type", "==", "'OOD'", "else", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "4096", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.cifar_data_loaders.ImbalanceCIFAR10DataLoader.__init__": [[54, 90], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "[].tolist", "torch.utils.data.DataLoader.__init__", "imbalance_cifar.IMBALANCECIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "max", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "numpy.histogram"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "num_workers", ",", "training", "=", "True", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "dataset", "=", "IMBALANCECIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "None", "\n", "\n", "# Uncomment to use OOD datasets", "\n", "", "self", ".", "OOD_dataset", "=", "None", "\n", "# self.OOD_dataset = datasets.SVHN(data_dir,split=\"test\",download=True,transform=test_trsfm)", "\n", "# self.OOD_dataset = LT_Dataset('../ImageNet_LT/ImageNet_LT_open','../ImageNet_LT/ImageNet_LT_open.txt',train_trsfm)", "\n", "# self.OOD_dataset = LT_Dataset('../Places_LT/Places_LT_open','../Places_LT/Places_LT_open.txt',train_trsfm)", "\n", "\n", "num_classes", "=", "max", "(", "self", ".", "dataset", ".", "targets", ")", "+", "1", "\n", "assert", "num_classes", "==", "10", "\n", "\n", "self", ".", "cls_num_list", "=", "np", ".", "histogram", "(", "self", ".", "dataset", ".", "targets", ",", "bins", "=", "num_classes", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'drop_last'", ":", "False", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.cifar_data_loaders.ImbalanceCIFAR10DataLoader.split_validation": [[91, 98], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ",", "type", "=", "'test'", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "OOD_dataset", "if", "type", "==", "'OOD'", "else", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "4096", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "\n", "drop_last", "=", "False", "\n", ")", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.__init__": [[11, 15], ["super().__init__", "imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "IMBALANCECIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "num_class", ",", "imb_type", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls": [[16, 26], ["len", "range", "img_num_per_cls.extend", "img_num_per_cls.append", "exp", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "num_class", ",", "imb_type", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "num_class", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "num_class", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "exp", "(", "-", "cls_idx", "/", "self", ".", "decay_stride", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", "+", "0.5", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "num_class", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data": [[27, 45], ["numpy.array", "numpy.arange", "numpy.zeros", "zip", "numpy.vstack", "len", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "self", ".", "num_class", "\n", "new_data", ",", "new_targets", "=", "[", "]", ",", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "arange", "(", "self", ".", "num_class", ")", "\n", "\n", "self", ".", "num_per_cls", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "for", "class_i", ",", "volume_i", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls", "[", "class_i", "]", "=", "volume_i", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "class_i", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "keep_num", "=", "volume_i", "+", "1", "\n", "selec_idx", "=", "idx", "[", ":", "keep_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "class_i", "]", "*", "keep_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imbalance_cifar.IMBALANCECIFAR10.get_cls_num_list": [[46, 48], ["imbalance_cifar.IMBALANCECIFAR10.num_per_cls.tolist"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_per_cls", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imagenet_lt_data_loaders.LT_Dataset.__init__": [[11, 20], ["open", "imagenet_lt_data_loaders.LT_Dataset.img_paths.append", "imagenet_lt_data_loaders.LT_Dataset.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", ")", ":", "\n", "        ", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "", "", "self", ".", "targets", "=", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imagenet_lt_data_loaders.LT_Dataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imagenet_lt_data_loaders.LT_Dataset.__getitem__": [[24, 30], ["open", "PIL.Image.open().convert", "imagenet_lt_data_loaders.LT_Dataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "label", "=", "self", ".", "img_paths", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imagenet_lt_data_loaders.ImageNetLTDataLoader.__init__": [[32, 69], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "[].tolist", "torch.utils.data.DataLoader.__init__", "imagenet_lt_data_loaders.LT_Dataset", "imagenet_lt_data_loaders.LT_Dataset", "imagenet_lt_data_loaders.LT_Dataset", "max", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "numpy.histogram"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "num_workers", ",", "training", "=", "True", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "# We use relative path to avoid potential bugs. It is recommended to check the paths below to ensure data loading.", "\n", "if", "training", ":", "\n", "            ", "self", ".", "dataset", "=", "LT_Dataset", "(", "'../ImageNet_LT'", ",", "'../ImageNet_LT/ImageNet_LT_train.txt'", ",", "train_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "LT_Dataset", "(", "'../ImageNet_LT'", ",", "'../ImageNet_LT/ImageNet_LT_val.txt'", ",", "test_trsfm", ")", "\n", "", "else", ":", "# test", "\n", "            ", "self", ".", "dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/ImageNet_LT_val.txt'", ",", "test_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "None", "\n", "\n", "", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "num_classes", "=", "max", "(", "self", ".", "dataset", ".", "targets", ")", "+", "1", "\n", "assert", "num_classes", "==", "1000", "\n", "\n", "self", ".", "cls_num_list", "=", "np", ".", "histogram", "(", "self", ".", "dataset", ".", "targets", ",", "bins", "=", "num_classes", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'drop_last'", ":", "False", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.data_loader.imagenet_lt_data_loaders.ImageNetLTDataLoader.split_validation": [[70, 77], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ",", "type", "=", "'test'", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "OOD_dataset", "if", "type", "==", "'OOD'", "else", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "512", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "10", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.lblaoke_tlc.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.trainer.trainer.Trainer.__init__": [[12, 21], ["base.BaseTrainer.__init__", "len", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "trainer.Trainer.val_targets.max().item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "trainer.Trainer.val_targets.max"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "opt", ",", "config", ",", "data_loader", ",", "valid_data_loader", ",", "lr_scheduler", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "criterion", ",", "opt", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "val_targets", "=", "torch", ".", "tensor", "(", "valid_data_loader", ".", "dataset", ".", "targets", ",", "device", "=", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "self", ".", "num_class", "=", "self", ".", "val_targets", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.trainer.trainer.Trainer._train_epoch": [[22, 50], ["trainer.Trainer.model.train", "trainer.Trainer.model._hook_before_iter", "trainer.Trainer.criterion._hook_before_epoch", "tqdm.tqdm.tqdm", "trainer.Trainer._valid_epoch", "print", "enumerate", "trainer.Trainer.opt.zero_grad", "trainer.Trainer.opt.step", "total_loss.append", "trainer.Trainer.lr_scheduler.step", "data.to", "target.to", "utils.autocast", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.item", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.lblaoke_tlc.model.ResnetImagenet.ResNet._hook_before_iter", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss._hook_before_epoch", "home.repos.pwc.inspect_result.lblaoke_tlc.trainer.trainer.Trainer._valid_epoch", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "_hook_before_iter", "(", ")", "\n", "self", ".", "criterion", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "\n", "total_loss", "=", "[", "]", "\n", "for", "batch_id", ",", "(", "data", ",", "target", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "data_loader", ")", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "with", "autocast", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "extra_info", "=", "{", "\n", "\"num_expert\"", ":", "len", "(", "self", ".", "model", ".", "backbone", ".", "logits", ")", ",", "\n", "\"logits\"", ":", "self", ".", "model", ".", "backbone", ".", "logits", ",", "\n", "'w'", ":", "self", ".", "model", ".", "backbone", ".", "w", "\n", "}", "\n", "loss", "=", "self", ".", "criterion", "(", "x", "=", "output", ",", "y", "=", "target", ",", "epoch", "=", "epoch", ",", "extra_info", "=", "extra_info", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "self", ".", "_valid_epoch", "(", "epoch", ")", "\n", "print", "(", "\"loss =\"", ",", "sum", "(", "total_loss", ")", "/", "len", "(", "total_loss", ")", ")", "\n", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.trainer.trainer.Trainer._valid_epoch": [[51, 66], ["trainer.Trainer.model.eval", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "enumerate", "print", "ACC", "data.to.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model", "trainer.Trainer.detach", "u.detach"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.metric.ACC", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to"], ["", "", "def", "_valid_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "output", "=", "torch", ".", "empty", "(", "0", ",", "self", ".", "num_class", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "uncertainty", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "for", "_", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "o", "=", "self", ".", "model", "(", "data", ")", "\n", "u", "=", "self", ".", "model", ".", "backbone", ".", "w", "[", "-", "1", "]", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "o", ".", "detach", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "uncertainty", "=", "torch", ".", "cat", "(", "[", "uncertainty", ",", "u", ".", "detach", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "print", "(", "f'================ Epoch: {epoch:03d} ================'", ")", "\n", "ACC", "(", "output", ",", "self", ".", "val_targets", ",", "uncertainty", ",", "region_len", "=", "self", ".", "num_class", "/", "3", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer.__init__": [[8, 18], ["torch.device", "torch.device", "torch.device", "torch.device", "model.to", "criterion.to"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to", "home.repos.pwc.inspect_result.lblaoke_tlc.model.loss.TLCLoss.to"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "opt", ",", "config", ")", ":", "\n", "\n", "# Check with nvidia-smi about the available GPUs. Only 1 GPU is required.", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "epochs", "=", "config", "[", "'trainer'", "]", "[", "'epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer._train_epoch": [[19, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer.train": [[23, 26], ["range", "base_trainer.BaseTrainer._train_epoch"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_trainer.BaseTrainer._train_epoch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__": [[7, 24], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader._split_sampler": [[25, 50], ["numpy.arange", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_data_loader.BaseDataLoader.split_validation": [[51, 56], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lblaoke_tlc.base.base_model.BaseModel.forward": [[7, 10], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]]}