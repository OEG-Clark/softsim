{"home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV2.__init__": [[17, 29], ["vision_transformer.VisionTransformer.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "models.MCTformerV2.head.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "head", "=", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "head", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_classes", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "self", ".", "num_classes", ",", "self", ".", "embed_dim", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "print", "(", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV2.interpolate_pos_encoding": [[30, 52], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "self", ".", "num_classes", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "self", ".", "num_classes", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", ":", "self", ".", "num_classes", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "self", ".", "num_classes", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV2.forward_features": [[53, 68], ["models.MCTformerV2.patch_embed", "models.MCTformerV2.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MCTformerV2.pos_drop", "enumerate", "models.MCTformerV2.interpolate_pos_encoding", "blk", "attn_weights.append"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "forward_features", "(", "self", ",", "x", ",", "n", "=", "12", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "attn_weights", "=", "[", "]", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", ",", "weights_i", "=", "blk", "(", "x", ")", "\n", "attn_weights", ".", "append", "(", "weights_i", ")", "\n", "\n", "", "return", "x", "[", ":", ",", "0", ":", "self", ".", "num_classes", "]", ",", "x", "[", ":", ",", "self", ".", "num_classes", ":", "]", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV2.forward": [[69, 109], ["models.MCTformerV2.forward_features", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.contiguous", "torch.reshape.contiguous", "torch.reshape.contiguous", "models.MCTformerV2.head", "models.MCTformerV2.avgpool().squeeze().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.reshape.detach().clone", "torch.reshape.detach().clone", "torch.reshape.detach().clone", "torch.relu", "torch.relu", "torch.relu", "[].reshape", "x_cls.mean", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.MCTformerV2.avgpool().squeeze", "torch.reshape.detach", "torch.reshape.detach", "torch.reshape.detach", "int", "int", "attn_weights[].sum", "models.MCTformerV2.avgpool"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_att", "=", "False", ",", "n_layers", "=", "12", ",", "attention_type", "=", "'fused'", ")", ":", "\n", "        ", "w", ",", "h", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "x_cls", ",", "x_patch", ",", "attn_weights", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "n", ",", "p", ",", "c", "=", "x_patch", ".", "shape", "\n", "if", "w", "!=", "h", ":", "\n", "            ", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "x_patch", "=", "torch", ".", "reshape", "(", "x_patch", ",", "[", "n", ",", "w0", ",", "h0", ",", "c", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_patch", "=", "torch", ".", "reshape", "(", "x_patch", ",", "[", "n", ",", "int", "(", "p", "**", "0.5", ")", ",", "int", "(", "p", "**", "0.5", ")", ",", "c", "]", ")", "\n", "", "x_patch", "=", "x_patch", ".", "permute", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x_patch", "=", "x_patch", ".", "contiguous", "(", ")", "\n", "x_patch", "=", "self", ".", "head", "(", "x_patch", ")", "\n", "x_patch_logits", "=", "self", ".", "avgpool", "(", "x_patch", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "stack", "(", "attn_weights", ")", "# 12 * B * H * N * N", "\n", "attn_weights", "=", "torch", ".", "mean", "(", "attn_weights", ",", "dim", "=", "2", ")", "# 12 * B * N * N", "\n", "\n", "feature_map", "=", "x_patch", ".", "detach", "(", ")", ".", "clone", "(", ")", "# B * C * 14 * 14", "\n", "feature_map", "=", "F", ".", "relu", "(", "feature_map", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "feature_map", ".", "shape", "\n", "\n", "mtatt", "=", "attn_weights", "[", "-", "n_layers", ":", "]", ".", "sum", "(", "0", ")", "[", ":", ",", "0", ":", "self", ".", "num_classes", ",", "self", ".", "num_classes", ":", "]", ".", "reshape", "(", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "\n", "if", "attention_type", "==", "'fused'", ":", "\n", "            ", "cams", "=", "mtatt", "*", "feature_map", "# B * C * 14 * 14", "\n", "", "elif", "attention_type", "==", "'patchcam'", ":", "\n", "            ", "cams", "=", "feature_map", "\n", "", "else", ":", "\n", "            ", "cams", "=", "mtatt", "\n", "\n", "", "patch_attn", "=", "attn_weights", "[", ":", ",", ":", ",", "self", ".", "num_classes", ":", ",", "self", ".", "num_classes", ":", "]", "\n", "\n", "x_cls_logits", "=", "x_cls", ".", "mean", "(", "-", "1", ")", "\n", "\n", "if", "return_att", ":", "\n", "            ", "return", "x_cls_logits", ",", "cams", ",", "patch_attn", "\n", "", "else", ":", "\n", "            ", "return", "x_cls_logits", ",", "x_patch_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV1.__init__": [[112, 126], ["vision_transformer.VisionTransformer.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "print", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "models.MCTformerV1.head.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_opt", "=", "'average'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "last_opt", "=", "last_opt", "\n", "if", "last_opt", "==", "'fc'", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "self", ".", "num_classes", ",", "out_channels", "=", "self", ".", "num_classes", ",", "kernel_size", "=", "self", ".", "embed_dim", ",", "groups", "=", "self", ".", "num_classes", ")", "\n", "self", ".", "head", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_classes", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "self", ".", "num_classes", ",", "self", ".", "embed_dim", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "print", "(", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV1.interpolate_pos_encoding": [[127, 149], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "self", ".", "num_classes", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "self", ".", "num_classes", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", ":", "self", ".", "num_classes", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "self", ".", "num_classes", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV1.forward_features": [[150, 166], ["models.MCTformerV1.patch_embed", "models.MCTformerV1.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MCTformerV1.pos_drop", "enumerate", "models.MCTformerV1.interpolate_pos_encoding", "blk", "attn_weights.append", "len"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "forward_features", "(", "self", ",", "x", ",", "n", "=", "12", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "attn_weights", "=", "[", "]", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", ",", "weights_i", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "attn_weights", ".", "append", "(", "weights_i", ")", "\n", "", "", "return", "x", "[", ":", ",", "0", ":", "self", ".", "num_classes", "]", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.MCTformerV1.forward": [[167, 181], ["models.MCTformerV1.forward_features", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.mean", "attn_weights[].sum"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "n_layers", "=", "12", ",", "return_att", "=", "False", ")", ":", "\n", "        ", "x", ",", "attn_weights", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "stack", "(", "attn_weights", ")", "# 12 * B * H * N * N", "\n", "attn_weights", "=", "torch", ".", "mean", "(", "attn_weights", ",", "dim", "=", "2", ")", "# 12 * B * N * N", "\n", "mtatt", "=", "attn_weights", "[", "-", "n_layers", ":", "]", ".", "sum", "(", "0", ")", "[", ":", ",", "0", ":", "self", ".", "num_classes", ",", "self", ".", "num_classes", ":", "]", "\n", "patch_attn", "=", "attn_weights", "[", ":", ",", ":", ",", "self", ".", "num_classes", ":", ",", "self", ".", "num_classes", ":", "]", "\n", "\n", "x_cls_logits", "=", "x", ".", "mean", "(", "-", "1", ")", "\n", "\n", "if", "return_att", ":", "\n", "            ", "return", "x_cls_logits", ",", "mtatt", ",", "patch_attn", "\n", "", "else", ":", "\n", "            ", "return", "x_cls_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.deit_small_MCTformerV2_patch16_224": [[183, 204], ["models.MCTformerV2", "vision_transformer._cfg", "MCTformerV2.state_dict", "model.state_dict.update", "MCTformerV2.load_state_dict", "functools.partial", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "print", "checkpoint.items", "pretrained_dict.items"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer._cfg", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update"], ["", "", "", "@", "register_model", "\n", "def", "deit_small_MCTformerV2_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MCTformerV2", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/deit/deit_small_patch16_224-cd65a155.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "check_hash", "=", "True", "\n", ")", "[", "'model'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "[", "'head.weight'", ",", "'head.bias'", ",", "'head_dist.weight'", ",", "'head_dist.bias'", "]", ":", "\n", "            ", "if", "k", "in", "checkpoint", "and", "checkpoint", "[", "k", "]", ".", "shape", "!=", "model_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "f\"Removing key {k} from pretrained checkpoint\"", ")", "\n", "del", "checkpoint", "[", "k", "]", "\n", "", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "not", "in", "[", "'cls_token'", ",", "'pos_embed'", "]", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.models.deit_small_MCTformerV1_patch16_224": [[206, 220], ["models.MCTformerV1", "vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "MCTformerV1.load_state_dict", "functools.partial"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer._cfg"], ["", "@", "register_model", "\n", "def", "deit_small_MCTformerV1_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MCTformerV1", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/deit/deit_small_patch16_224-cd65a155.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "check_hash", "=", "True", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.train_one_epoch": [[15, 63], ["model.train", "utils.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "utils.SmoothedValue", "samples.to.to", "targets.to.to", "F.multilabel_soft_margin_loss.item", "optimizer.zero_grad", "loss_scaler", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.MetricLogger.update", "utils.MetricLogger.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "torch.multilabel_soft_margin_loss", "utils.MetricLogger.update", "math.isfinite", "print", "sys.exit", "hasattr", "utils.MetricLogger.meters.items", "isinstance", "torch.multilabel_soft_margin_loss", "utils.MetricLogger.update", "model.parameters", "F.multilabel_soft_margin_loss.item", "F.multilabel_soft_margin_loss.item"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update"], ["def", "train_one_epoch", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "data_loader", ":", "Iterable", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "device", ":", "torch", ".", "device", ",", "\n", "epoch", ":", "int", ",", "loss_scaler", ",", "max_norm", ":", "float", "=", "0", ",", "\n", "set_training_mode", "=", "True", ")", ":", "\n", "    ", "model", ".", "train", "(", "set_training_mode", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "10", "\n", "\n", "for", "samples", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "patch_outputs", "=", "None", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "samples", ")", "\n", "if", "not", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "outputs", ",", "patch_outputs", "=", "outputs", "\n", "\n", "", "loss", "=", "F", ".", "multilabel_soft_margin_loss", "(", "outputs", ",", "targets", ")", "\n", "metric_logger", ".", "update", "(", "cls_loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "if", "patch_outputs", "is", "not", "None", ":", "\n", "                ", "ploss", "=", "F", ".", "multilabel_soft_margin_loss", "(", "patch_outputs", ",", "targets", ")", "\n", "metric_logger", ".", "update", "(", "pat_loss", "=", "ploss", ".", "item", "(", ")", ")", "\n", "loss", "=", "loss", "+", "ploss", "\n", "\n", "", "", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# this attribute is added by timm on one optimizer (adahessian)", "\n", "is_second_order", "=", "hasattr", "(", "optimizer", ",", "'is_second_order'", ")", "and", "optimizer", ".", "is_second_order", "\n", "loss_scaler", "(", "loss", ",", "optimizer", ",", "clip_grad", "=", "max_norm", ",", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", ",", "create_graph", "=", "is_second_order", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.evaluate": [[65, 103], ["torch.no_grad", "torch.no_grad", "torch.nn.MultiLabelSoftMarginLoss", "torch.nn.MultiLabelSoftMarginLoss", "utils.MetricLogger", "model.eval", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "images.to.to", "target.to.to", "utils.MetricLogger.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "torch.nn.MultiLabelSoftMarginLoss.", "torch.sigmoid", "torch.sigmoid", "engine.compute_mAP", "utils.MetricLogger.meters[].update", "utils.MetricLogger.meters.items", "isinstance", "numpy.mean", "criterion.item"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.compute_mAP", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "data_loader", ",", "model", ",", "device", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "mAP", "=", "[", "]", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "# switch to evaluation mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "images", ",", "target", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "        ", "images", "=", "images", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "if", "not", "isinstance", "(", "output", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "output", ",", "patch_output", "=", "output", "\n", "", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "mAP_list", "=", "compute_mAP", "(", "target", ",", "output", ")", "\n", "mAP", "=", "mAP", "+", "mAP_list", "\n", "metric_logger", ".", "meters", "[", "'mAP'", "]", ".", "update", "(", "np", ".", "mean", "(", "mAP_list", ")", ",", "n", "=", "batch_size", ")", "\n", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "print", "(", "'* mAP {mAP.global_avg:.3f} loss {losses.global_avg:.3f}'", "\n", ".", "format", "(", "mAP", "=", "metric_logger", ".", "mAP", ",", "losses", "=", "metric_logger", ".", "loss", ")", ")", "\n", "\n", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.compute_mAP": [[105, 115], ["labels.cpu().numpy", "outputs.cpu().numpy", "range", "labels.cpu", "outputs.cpu", "numpy.sum", "sklearn.metrics.average_precision_score", "AP.append"], "function", ["None"], ["", "def", "compute_mAP", "(", "labels", ",", "outputs", ")", ":", "\n", "    ", "y_true", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "AP", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "y_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "y_true", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "ap_i", "=", "average_precision_score", "(", "y_true", "[", "i", "]", ",", "y_pred", "[", "i", "]", ")", "\n", "AP", ".", "append", "(", "ap_i", ")", "\n", "# print(ap_i)", "\n", "", "", "return", "AP", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.generate_attention_maps_ms": [[117, 213], ["torch.no_grad", "torch.no_grad", "utils.MetricLogger", "model.eval", "open().readlines", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "pathlib.Path().mkdir", "pathlib.Path().mkdir", "image_list[].to", "target.to.to", "img_list[].strip", "image_list[].to.permute().detach().cpu().numpy", "numpy.zeros_like", "open", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "range", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "sum_cam.unsqueeze().to.unsqueeze().to", "torch.sigmoid", "torch.sigmoid", "range", "pathlib.Path", "pathlib.Path", "os.path.join", "image_list[].to.permute().detach().cpu", "len", "image_list[].to", "cam_list.append", "vitattn_list.append", "model", "np.flip.reshape", "torch.sum", "torch.sum", "torch.matmul().reshape", "torch.matmul().reshape", "torch.interpolate", "np.flip.cpu().numpy", "target.to.clone().view().cpu().numpy", "numpy.flip", "sum_cam.unsqueeze().to.unsqueeze", "target[].sum", "range", "image_list[].to.permute().detach", "model", "torch.sum", "torch.sum", "numpy.save", "torch.matmul", "torch.matmul", "np.flip.cpu", "target.to.clone().view().cpu", "format", "cls_attention.cpu().numpy.cpu().numpy", "os.path.join", "image_list[].to.permute", "torch.sum.unsqueeze", "np.flip.view", "output[].cpu().numpy", "os.path.join", "engine.show_cam_on_image", "target.to.clone().view", "cls_attention.cpu().numpy.min", "cls_attention.cpu().numpy.cpu", "output[].cpu", "cls_attention.cpu().numpy.max", "cls_attention.cpu().numpy.min", "target.to.clone", "str", "str"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.show_cam_on_image", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_attention_maps_ms", "(", "data_loader", ",", "model", ",", "device", ",", "args", ")", ":", "\n", "    ", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Generating attention maps:'", "\n", "if", "args", ".", "attention_dir", "is", "not", "None", ":", "\n", "        ", "Path", "(", "args", ".", "attention_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "args", ".", "cam_npy_dir", "is", "not", "None", ":", "\n", "        ", "Path", "(", "args", ".", "cam_npy_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# switch to evaluation mode", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "img_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img_list", ",", "'train_aug_id.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "index", "=", "0", "\n", "for", "image_list", ",", "target", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "# for iter, (image_list, target) in enumerate(data_loader):", "\n", "        ", "images1", "=", "image_list", "[", "0", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "batch_size", "=", "images1", ".", "shape", "[", "0", "]", "\n", "img_name", "=", "img_list", "[", "index", "]", ".", "strip", "(", ")", "\n", "index", "+=", "1", "\n", "\n", "img_temp", "=", "images1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "orig_images", "=", "np", ".", "zeros_like", "(", "img_temp", ")", "\n", "orig_images", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "img_temp", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "0.229", "+", "0.485", ")", "*", "255.", "\n", "orig_images", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "img_temp", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "0.224", "+", "0.456", ")", "*", "255.", "\n", "orig_images", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "(", "img_temp", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "0.225", "+", "0.406", ")", "*", "255.", "\n", "\n", "w_orig", ",", "h_orig", "=", "orig_images", ".", "shape", "[", "1", "]", ",", "orig_images", ".", "shape", "[", "2", "]", "\n", "# w, h = images1.shape[2] - images1.shape[2] % args.patch_size, images1.shape[3] - images1.shape[3] % args.patch_size", "\n", "# w_featmap = w // args.patch_size", "\n", "# h_featmap = h // args.patch_size", "\n", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "cam_list", "=", "[", "]", "\n", "vitattn_list", "=", "[", "]", "\n", "cam_maps", "=", "None", "\n", "for", "s", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "                ", "images", "=", "image_list", "[", "s", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "w", ",", "h", "=", "images", ".", "shape", "[", "2", "]", "-", "images", ".", "shape", "[", "2", "]", "%", "args", ".", "patch_size", ",", "images", ".", "shape", "[", "3", "]", "-", "images", ".", "shape", "[", "3", "]", "%", "args", ".", "patch_size", "\n", "w_featmap", "=", "w", "//", "args", ".", "patch_size", "\n", "h_featmap", "=", "h", "//", "args", ".", "patch_size", "\n", "\n", "if", "'MCTformerV1'", "in", "args", ".", "model", ":", "\n", "                    ", "output", ",", "cls_attentions", ",", "patch_attn", "=", "model", "(", "images", ",", "return_att", "=", "True", ",", "n_layers", "=", "args", ".", "layer_index", ")", "\n", "cls_attentions", "=", "cls_attentions", ".", "reshape", "(", "batch_size", ",", "args", ".", "nb_classes", ",", "w_featmap", ",", "h_featmap", ")", "\n", "patch_attn", "=", "torch", ".", "sum", "(", "patch_attn", ",", "dim", "=", "0", ")", "\n", "\n", "", "elif", "'MCTformerV2'", "in", "args", ".", "model", ":", "\n", "                    ", "output", ",", "cls_attentions", ",", "patch_attn", "=", "model", "(", "images", ",", "return_att", "=", "True", ",", "n_layers", "=", "args", ".", "layer_index", ",", "attention_type", "=", "args", ".", "attention_type", ")", "\n", "patch_attn", "=", "torch", ".", "sum", "(", "patch_attn", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "if", "args", ".", "patch_attn_refine", ":", "\n", "                    ", "cls_attentions", "=", "torch", ".", "matmul", "(", "patch_attn", ".", "unsqueeze", "(", "1", ")", ",", "cls_attentions", ".", "view", "(", "cls_attentions", ".", "shape", "[", "0", "]", ",", "cls_attentions", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "cls_attentions", ".", "shape", "[", "0", "]", ",", "cls_attentions", ".", "shape", "[", "1", "]", ",", "w_featmap", ",", "h_featmap", ")", "\n", "\n", "", "cls_attentions", "=", "F", ".", "interpolate", "(", "cls_attentions", ",", "size", "=", "(", "w_orig", ",", "h_orig", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "cls_attentions", "=", "cls_attentions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "target", ".", "clone", "(", ")", ".", "view", "(", "args", ".", "nb_classes", ",", "1", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "%", "2", "==", "1", ":", "\n", "                    ", "cls_attentions", "=", "np", ".", "flip", "(", "cls_attentions", ",", "axis", "=", "-", "1", ")", "\n", "", "cam_list", ".", "append", "(", "cls_attentions", ")", "\n", "vitattn_list", ".", "append", "(", "cam_maps", ")", "\n", "\n", "", "sum_cam", "=", "np", ".", "sum", "(", "cam_list", ",", "axis", "=", "0", ")", "\n", "sum_cam", "=", "torch", ".", "from_numpy", "(", "sum_cam", ")", "\n", "sum_cam", "=", "sum_cam", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "", "if", "args", ".", "visualize_cls_attn", ":", "\n", "            ", "for", "b", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "(", "target", "[", "b", "]", ".", "sum", "(", ")", ")", ">", "0", ":", "\n", "                    ", "cam_dict", "=", "{", "}", "\n", "for", "cls_ind", "in", "range", "(", "args", ".", "nb_classes", ")", ":", "\n", "                        ", "if", "target", "[", "b", ",", "cls_ind", "]", ">", "0", ":", "\n", "                            ", "cls_score", "=", "format", "(", "output", "[", "b", ",", "cls_ind", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'.3f'", ")", "\n", "\n", "cls_attention", "=", "sum_cam", "[", "b", ",", "cls_ind", ",", ":", "]", "\n", "\n", "cls_attention", "=", "(", "cls_attention", "-", "cls_attention", ".", "min", "(", ")", ")", "/", "(", "cls_attention", ".", "max", "(", ")", "-", "cls_attention", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "cls_attention", "=", "cls_attention", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cam_dict", "[", "cls_ind", "]", "=", "cls_attention", "\n", "\n", "if", "args", ".", "attention_dir", "is", "not", "None", ":", "\n", "                                ", "fname", "=", "os", ".", "path", ".", "join", "(", "args", ".", "attention_dir", ",", "img_name", "+", "'_'", "+", "str", "(", "cls_ind", ")", "+", "'_'", "+", "str", "(", "cls_score", ")", "+", "'.png'", ")", "\n", "show_cam_on_image", "(", "orig_images", "[", "b", "]", ",", "cls_attention", ",", "fname", ")", "\n", "\n", "", "", "", "if", "args", ".", "cam_npy_dir", "is", "not", "None", ":", "\n", "                        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "cam_npy_dir", ",", "img_name", "+", "'.npy'", ")", ",", "cam_dict", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "", "", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.show_cam_on_image": [[215, 223], ["cv2.applyColorMap", "numpy.uint8", "cv2.imwrite", "numpy.float32", "numpy.uint8", "numpy.float32", "numpy.max"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.max"], ["", "def", "show_cam_on_image", "(", "img", ",", "mask", ",", "save_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "float32", "(", "img", ")", "/", "255.", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "cam", "=", "heatmap", "+", "img", "\n", "cam", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam", "=", "np", ".", "uint8", "(", "255", "*", "cam", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "cam", ")", "", "", ""]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.main.get_args_parser": [[21, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'DeiT training and evaluation script'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'deit_base_patch16_224'", ",", "type", "=", "str", ",", "metavar", "=", "'MODEL'", ",", "\n", "help", "=", "'Name of model to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-size'", ",", "default", "=", "224", ",", "type", "=", "int", ",", "help", "=", "'images input size'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--drop'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Dropout rate (default: 0.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop-path'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Drop path rate (default: 0.1)'", ")", "\n", "\n", "# Optimizer parameters", "\n", "parser", ".", "add_argument", "(", "'--opt'", ",", "default", "=", "'adamw'", ",", "type", "=", "str", ",", "metavar", "=", "'OPTIMIZER'", ",", "\n", "help", "=", "'Optimizer (default: \"adamw\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt-eps'", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "metavar", "=", "'EPSILON'", ",", "\n", "help", "=", "'Optimizer Epsilon (default: 1e-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt-betas'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "metavar", "=", "'BETA'", ",", "\n", "help", "=", "'Optimizer Betas (default: None, use opt default)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'NORM'", ",", "\n", "help", "=", "'Clip gradient norm (default: None, no clipping)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'weight decay (default: 0.05)'", ")", "\n", "# Learning rate schedule parameters", "\n", "parser", ".", "add_argument", "(", "'--sched'", ",", "default", "=", "'cosine'", ",", "type", "=", "str", ",", "metavar", "=", "'SCHEDULER'", ",", "\n", "help", "=", "'LR scheduler (default: \"cosine\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 5e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "metavar", "=", "'pct, pct'", ",", "\n", "help", "=", "'learning rate noise on/off epoch percentages'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise-pct'", ",", "type", "=", "float", ",", "default", "=", "0.67", ",", "metavar", "=", "'PERCENT'", ",", "\n", "help", "=", "'learning rate noise limit percent (default: 0.67)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise-std'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "metavar", "=", "'STDDEV'", ",", "\n", "help", "=", "'learning rate noise std-dev (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'warmup learning rate (default: 1e-6)'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'lower lr bound for cyclic schedulers that hit 0 (1e-5)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--decay-epochs'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epoch interval to decay LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epochs'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epochs to warmup LR, if scheduler supports'", ")", "\n", "parser", ".", "add_argument", "(", "'--cooldown-epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epochs to cooldown LR at min_lr, after cyclic schedule ends'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience-epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'patience epochs for Plateau LR scheduler (default: 10'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-rate'", ",", "'--dr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'RATE'", ",", "\n", "help", "=", "'LR decay rate (default: 0.1)'", ")", "\n", "\n", "# Augmentation parameters", "\n", "parser", ".", "add_argument", "(", "'--color-jitter'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Color jitter factor (default: 0.4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aa'", ",", "type", "=", "str", ",", "default", "=", "'rand-m9-mstd0.5-inc1'", ",", "metavar", "=", "'NAME'", ",", "\n", "help", "=", "'Use AutoAugment policy. \"v0\" or \"original\". \" + \\\n                             \"(default: rand-m9-mstd0.5-inc1)'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--smoothing'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Label smoothing (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-interpolation'", ",", "type", "=", "str", ",", "default", "=", "'bicubic'", ",", "\n", "help", "=", "'Training interpolation (random, bilinear, bicubic default: \"bicubic\")'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--repeated-aug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-repeated-aug'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'repeated_aug'", ")", "\n", "parser", ".", "set_defaults", "(", "repeated_aug", "=", "True", ")", "\n", "\n", "# * Random Erase params", "\n", "parser", ".", "add_argument", "(", "'--reprob'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Random erase prob (default: 0.25)'", ")", "\n", "parser", ".", "add_argument", "(", "'--remode'", ",", "type", "=", "str", ",", "default", "=", "'pixel'", ",", "\n", "help", "=", "'Random erase mode (default: \"pixel\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--recount'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Random erase count (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resplit'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Do not random erase first (clean) augmentation split'", ")", "\n", "\n", "\n", "# * Finetuning params", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "default", "=", "''", ",", "help", "=", "'finetune from checkpoint'", ")", "\n", "\n", "# Dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--data-path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--img-list'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'image list path'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-set'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'dataset'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Perform evaluation only'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pin-mem'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-pin-mem'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'pin_mem'", ",", "\n", "help", "=", "''", ")", "\n", "parser", ".", "set_defaults", "(", "pin_mem", "=", "True", ")", "\n", "\n", "\n", "# generating attention maps", "\n", "parser", ".", "add_argument", "(", "'--gen_attention_maps'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--layer-index'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'extract attention maps from the last layers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--patch-attn-refine'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize-cls-attn'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gt-dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--cam-npy-dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--scales\"", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--label-file-path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-type'", ",", "type", "=", "str", ",", "default", "=", "'fused'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.main.main": [[144, 309], ["print", "torch.device", "torch.device", "datasets.build_dataset", "datasets.build_dataset", "datasets.build_dataset", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "timm.models.create_model", "timm.models.create_model.to", "sum", "print", "timm.optim.create_optimizer", "timm.utils.NativeScaler", "timm.scheduler.create_scheduler", "pathlib.Path", "print", "time.time", "range", "torch.save", "torch.save", "str", "print", "args.finetune.startswith", "timm.models.create_model.state_dict", "args.finetune.startswith", "int", "int", "pos_tokens.permute().flatten.reshape().permute", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "pos_tokens.permute().flatten.permute().flatten", "torch.cat", "torch.cat", "timm.models.create_model.load_state_dict", "engine.evaluate", "print", "torch.load", "torch.load", "timm.models.create_model.load_state_dict", "engine.generate_attention_maps_ms", "engine.train_one_epoch", "lr_scheduler.step", "engine.evaluate", "print", "max", "print", "time.time", "datetime.timedelta", "int", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "args.finetune.startswith", "pos_embed_checkpoint[].repeat", "args.finetune.startswith", "cls_token_checkpoint.repeat", "p.numel", "utils.get_world_size", "utils.is_main_process", "timm.models.create_model.state_dict", "print", "pos_tokens.permute().flatten.reshape", "pos_tokens.permute().flatten.permute", "timm.models.create_model.parameters", "torch.save", "torch.save", "f.write", "int", "len", "len", "engine.train_one_epoch.items", "engine.evaluate.items", "timm.models.create_model.state_dict", "json.dumps"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_dataset", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_dataset", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_dataset", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.evaluate", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.generate_attention_maps_ms", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.engine.evaluate", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_world_size", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_main_process"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "args", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "dataset_train", ",", "args", ".", "nb_classes", "=", "build_dataset", "(", "is_train", "=", "True", ",", "args", "=", "args", ")", "\n", "dataset_train_", ",", "args", ".", "nb_classes", "=", "build_dataset", "(", "is_train", "=", "False", ",", "gen_attn", "=", "True", ",", "args", "=", "args", ")", "\n", "dataset_val", ",", "_", "=", "build_dataset", "(", "is_train", "=", "False", ",", "args", "=", "args", ")", "\n", "\n", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "data_loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "sampler", "=", "sampler_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "data_loader_train_", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train_", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "sampler", "=", "sampler_val", ",", "\n", "batch_size", "=", "int", "(", "1.5", "*", "args", ".", "batch_size", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "\n", "print", "(", "f\"Creating model: {args.model}\"", ")", "\n", "\n", "\n", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "args", ".", "nb_classes", ",", "\n", "drop_rate", "=", "args", ".", "drop", ",", "\n", "drop_path_rate", "=", "args", ".", "drop_path", ",", "\n", "drop_block_rate", "=", "None", "\n", ")", "\n", "\n", "\n", "if", "args", ".", "finetune", ":", "\n", "        ", "if", "args", ".", "finetune", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "finetune", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "finetune", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "[", "'model'", "]", "\n", "", "except", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "[", "'head.weight'", ",", "'head.bias'", ",", "'head_dist.weight'", ",", "'head_dist.bias'", "]", ":", "\n", "            ", "if", "k", "in", "checkpoint_model", "and", "checkpoint_model", "[", "k", "]", ".", "shape", "!=", "state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "f\"Removing key {k} from pretrained checkpoint\"", ")", "\n", "del", "checkpoint_model", "[", "k", "]", "\n", "\n", "# interpolate position embedding", "\n", "", "", "pos_embed_checkpoint", "=", "checkpoint_model", "[", "'pos_embed'", "]", "\n", "embedding_size", "=", "pos_embed_checkpoint", ".", "shape", "[", "-", "1", "]", "\n", "num_patches", "=", "model", ".", "patch_embed", ".", "num_patches", "\n", "if", "args", ".", "finetune", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "num_extra_tokens", "=", "1", "\n", "", "else", ":", "\n", "            ", "num_extra_tokens", "=", "model", ".", "pos_embed", ".", "shape", "[", "-", "2", "]", "-", "num_patches", "\n", "\n", "", "orig_size", "=", "int", "(", "(", "pos_embed_checkpoint", ".", "shape", "[", "-", "2", "]", "-", "num_extra_tokens", ")", "**", "0.5", ")", "\n", "\n", "new_size", "=", "int", "(", "num_patches", "**", "0.5", ")", "\n", "\n", "if", "args", ".", "finetune", ".", "startswith", "(", "'https'", ")", "and", "'MCTformer'", "in", "args", ".", "model", ":", "\n", "            ", "extra_tokens", "=", "pos_embed_checkpoint", "[", ":", ",", ":", "num_extra_tokens", "]", ".", "repeat", "(", "1", ",", "args", ".", "nb_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "extra_tokens", "=", "pos_embed_checkpoint", "[", ":", ",", ":", "num_extra_tokens", "]", "\n", "\n", "", "pos_tokens", "=", "pos_embed_checkpoint", "[", ":", ",", "num_extra_tokens", ":", "]", "\n", "pos_tokens", "=", "pos_tokens", ".", "reshape", "(", "-", "1", ",", "orig_size", ",", "orig_size", ",", "embedding_size", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos_tokens", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "pos_tokens", ",", "size", "=", "(", "new_size", ",", "new_size", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "pos_tokens", "=", "pos_tokens", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "flatten", "(", "1", ",", "2", ")", "\n", "new_pos_embed", "=", "torch", ".", "cat", "(", "(", "extra_tokens", ",", "pos_tokens", ")", ",", "dim", "=", "1", ")", "\n", "checkpoint_model", "[", "'pos_embed'", "]", "=", "new_pos_embed", "\n", "\n", "if", "args", ".", "finetune", ".", "startswith", "(", "'https'", ")", "and", "'MCTformer'", "in", "args", ".", "model", ":", "\n", "            ", "cls_token_checkpoint", "=", "checkpoint_model", "[", "'cls_token'", "]", "\n", "new_cls_token", "=", "cls_token_checkpoint", ".", "repeat", "(", "1", ",", "args", ".", "nb_classes", ",", "1", ")", "\n", "checkpoint_model", "[", "'cls_token'", "]", "=", "new_cls_token", "\n", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint_model", ",", "strict", "=", "False", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "\n", "linear_scaled_lr", "=", "args", ".", "lr", "*", "args", ".", "batch_size", "*", "utils", ".", "get_world_size", "(", ")", "/", "512.0", "\n", "args", ".", "lr", "=", "linear_scaled_lr", "\n", "optimizer", "=", "create_optimizer", "(", "args", ",", "model", ")", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "\n", "lr_scheduler", ",", "_", "=", "create_scheduler", "(", "args", ",", "optimizer", ")", "\n", "\n", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ")", "\n", "print", "(", "f\"mAP of the network on the {len(dataset_val)} test images: {test_stats['mAP']*100:.1f}%\"", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "gen_attention_maps", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "generate_attention_maps_ms", "(", "data_loader_train_", ",", "model", ",", "device", ",", "args", ")", "\n", "return", "\n", "\n", "", "print", "(", "f\"Start training for {args.epochs} epochs\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "max_accuracy", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "train_stats", "=", "train_one_epoch", "(", "\n", "model", ",", "data_loader_train", ",", "\n", "optimizer", ",", "device", ",", "epoch", ",", "loss_scaler", ",", "\n", "args", ".", "clip_grad", "\n", ")", "\n", "\n", "lr_scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ")", "\n", "print", "(", "f\"mAP of the network on the {len(dataset_val)} test images: {test_stats['mAP']*100:.1f}%\"", ")", "\n", "if", "test_stats", "[", "\"mAP\"", "]", ">", "max_accuracy", "and", "args", ".", "output_dir", ":", "\n", "            ", "checkpoint_paths", "=", "[", "output_dir", "/", "'checkpoint_best.pth'", "]", "\n", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "                ", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "", "", "max_accuracy", "=", "max", "(", "max_accuracy", ",", "test_stats", "[", "\"mAP\"", "]", ")", "\n", "print", "(", "f'Max mAP: {max_accuracy * 100:.2f}%'", ")", "\n", "\n", "\n", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "output_dir", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "torch", ".", "save", "(", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "output_dir", "/", "'checkpoint.pth'", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Mlp.__init__": [[55, 63], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Mlp.forward": [[64, 71], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Attention.__init__": [[74, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "num_classes", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Attention.forward": [[87, 104], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "# B x num_heads x N x N", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "weights", "=", "attn", "\n", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Block.__init__": [[108, 119], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "num_classes", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.Block.forward": [[120, 125], ["vision_transformer.Block.attn", "vision_transformer.Block.norm1", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", ",", "weights", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "o", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.PatchEmbed.__init__": [[130, 140], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.PatchEmbed.forward": [[141, 145], ["vision_transformer.PatchEmbed.proj().flatten().transpose", "vision_transformer.PatchEmbed.proj().flatten", "vision_transformer.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.__init__": [[148, 177], ["torch.Module.__init__", "vision_transformer.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "vision_transformer.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "range"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "mask_type", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mask_type", "=", "mask_type", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "num_classes", "=", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "# Classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer._init_weights": [[178, 186], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.interpolate_pos_encoding": [[188, 210], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", ":", "1", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "[", "0", "]", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.no_weight_decay": [[212, 215], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.get_classifier": [[216, 218], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.reset_classifier": [[219, 222], ["torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.forward_features": [[223, 242], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pos_drop", "enumerate", "vision_transformer.VisionTransformer.norm", "vision_transformer.VisionTransformer.interpolate_pos_encoding", "blk", "attn_weights.append", "len"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "forward_features", "(", "self", ",", "x", ",", "n", ")", ":", "\n", "# B = x.shape[0]", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "# x = x + self.pos_embed", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "attn_weights", "=", "[", "]", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", ",", "weights", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "attn_weights", ".", "append", "(", "weights", ")", "\n", "\n", "", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.forward": [[243, 251], ["vision_transformer.VisionTransformer.forward_features", "vision_transformer.VisionTransformer.head"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.VisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "n", "=", "12", ")", ":", "\n", "        ", "x", ",", "attn_weights", "=", "self", ".", "forward_features", "(", "x", ",", "n", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer._cfg": [[12, 20], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer._conv_filter": [[253, 261], ["state_dict.items", "v.reshape.reshape"], "function", ["None"], ["", "", "", "def", "_conv_filter", "(", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_tiny_patch16_224": [[262, 273], ["vision_transformer.VisionTransformer", "kwargs.setdefault", "timm.models.helpers.load_pretrained", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_tiny_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "# NOTE my scale was wrong for original weights, leaving this here until I have better ones for this model", "\n", "        ", "kwargs", ".", "setdefault", "(", "'qk_scale'", ",", "192", "**", "-", "0.5", ")", "\n", "", "model", "=", "VisionTransformer", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_tiny_patch16_224'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "\n", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ",", "filter_fn", "=", "_conv_filter", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_small_patch16_224": [[275, 286], ["vision_transformer.VisionTransformer", "kwargs.setdefault", "timm.models.helpers.load_pretrained", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_small_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "# NOTE my scale was wrong for original weights, leaving this here until I have better ones for this model", "\n", "        ", "kwargs", ".", "setdefault", "(", "'qk_scale'", ",", "768", "**", "-", "0.5", ")", "\n", "", "model", "=", "VisionTransformer", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "8", ",", "num_heads", "=", "8", ",", "mlp_ratio", "=", "3.", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_small_patch16_224'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "\n", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ",", "filter_fn", "=", "_conv_filter", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_base_patch16_224": [[288, 298], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_base_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_base_patch16_224'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "\n", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ",", "filter_fn", "=", "_conv_filter", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_base_patch16_384": [[300, 309], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_base_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_base_patch16_384'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_base_patch32_384": [[311, 320], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_base_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "32", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_base_patch32_384'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_large_patch16_224": [[322, 331], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_large_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_large_patch16_224'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_large_patch16_384": [[333, 342], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_large_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_large_patch16_384'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_large_patch32_384": [[344, 353], ["vision_transformer.VisionTransformer", "timm.models.helpers.load_pretrained", "functools.partial", "kwargs.get"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_large_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "32", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_large_patch32_384'", "]", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "num_classes", "=", "model", ".", "num_classes", ",", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_huge_patch16_224": [[355, 360], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_huge_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "1280", ",", "depth", "=", "32", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_huge_patch16_224'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.vision_transformer.vit_huge_patch32_384": [[362, 368], ["vision_transformer.VisionTransformer"], "function", ["None"], ["", "@", "register_model", "\n", "def", "vit_huge_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "32", ",", "embed_dim", "=", "1280", ",", "depth", "=", "32", ",", "num_heads", "=", "16", ",", "mlp_ratio", "=", "4", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'vit_huge_patch32_384'", "]", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.__init__": [[16, 23], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.update": [[24, 28], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.synchronize_between_processes": [[29, 41], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.median": [[42, 46], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.avg": [[47, 51], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.global_avg": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.max": [[56, 59], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.value": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.SmoothedValue.__str__": [[64, 71], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.__init__": [[74, 77], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update": [[78, 84], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.__getattr__": [[85, 92], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.__str__": [[93, 100], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.synchronize_between_processes": [[101, 104], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.add_meter": [[105, 107], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.log_every": [[108, 153], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.MetricLogger.delimiter.join", "str", "print", "utils.MetricLogger.append", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "'max mem: {memory:.0f}'", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils._load_checkpoint_for_ema": [[155, 163], ["io.BytesIO", "torch.save", "torch.save", "io.BytesIO.seek", "model_ema._load_checkpoint"], "function", ["None"], ["", "", "def", "_load_checkpoint_for_ema", "(", "model_ema", ",", "checkpoint", ")", ":", "\n", "    ", "\"\"\"\n    Workaround for ModelEma._load_checkpoint to accept an already-loaded object\n    \"\"\"", "\n", "mem_file", "=", "io", ".", "BytesIO", "(", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "mem_file", ")", "\n", "mem_file", ".", "seek", "(", "0", ")", "\n", "model_ema", ".", "_load_checkpoint", "(", "mem_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.setup_for_distributed": [[165, 178], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_dist_avail_and_initialized": [[180, 186], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_world_size": [[188, 192], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_world_size", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_rank": [[194, 198], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_rank", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_main_process": [[200, 202], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.save_on_master": [[204, 207], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.init_distributed_mode": [[209, 232], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.evaluation.do_python_eval": [[11, 92], ["range", "range", "range", "range", "numpy.mean", "numpy.mean", "numpy.mean", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "T_TP.append", "P_TP.append", "FP_ALL.append", "FN_ALL.append", "numpy.array", "numpy.array", "numpy.array", "range", "print", "print", "print", "print", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "numpy.array", "range", "os.path.join", "numpy.array", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print", "PIL.Image.open", "os.path.join", "numpy.load().item", "numpy.zeros", "np.load().item.keys", "numpy.argmax().astype", "numpy.load", "list", "numpy.argmax", "np.load().item.values"], "function", ["None"], ["def", "do_python_eval", "(", "predict_folder", ",", "gt_folder", ",", "name_list", ",", "num_cls", "=", "21", ",", "input_type", "=", "'png'", ",", "threshold", "=", "1.0", ",", "printlog", "=", "False", ")", ":", "\n", "    ", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ",", "input_type", ",", "threshold", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "name_list", ")", ",", "step", ")", ":", "\n", "            ", "name", "=", "name_list", "[", "idx", "]", "\n", "if", "input_type", "==", "'png'", ":", "\n", "                ", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "#cv2.imread(predict_file)", "\n", "if", "num_cls", "==", "81", ":", "\n", "                    ", "predict", "=", "predict", "-", "91", "\n", "", "", "elif", "input_type", "==", "'npy'", ":", "\n", "                ", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.npy'", "%", "name", ")", "\n", "predict_dict", "=", "np", ".", "load", "(", "predict_file", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "h", ",", "w", "=", "list", "(", "predict_dict", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "\n", "tensor", "=", "np", ".", "zeros", "(", "(", "num_cls", ",", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "for", "key", "in", "predict_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "tensor", "[", "key", "+", "1", "]", "=", "predict_dict", "[", "key", "]", "\n", "", "tensor", "[", "0", ",", ":", ",", ":", "]", "=", "threshold", "\n", "predict", "=", "np", ".", "argmax", "(", "tensor", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "                ", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ",", "input_type", ",", "threshold", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "T_TP", "=", "[", "]", "\n", "P_TP", "=", "[", "]", "\n", "FP_ALL", "=", "[", "]", "\n", "FN_ALL", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "T_TP", ".", "append", "(", "T", "[", "i", "]", ".", "value", "/", "(", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "P_TP", ".", "append", "(", "P", "[", "i", "]", ".", "value", "/", "(", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "FP_ALL", ".", "append", "(", "(", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", ")", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "FN_ALL", ".", "append", "(", "(", "T", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", ")", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "loglist", "[", "categories", "[", "i", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "fp", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "FP_ALL", ")", ")", "\n", "loglist", "[", "'FP'", "]", "=", "fp", "*", "100", "\n", "fn", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "FN_ALL", ")", ")", "\n", "loglist", "[", "'FN'", "]", "=", "fn", "*", "100", "\n", "if", "printlog", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "            ", "if", "i", "%", "2", "!=", "1", ":", "\n", "                ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "categories", "[", "i", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "categories", "[", "i", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "f'FP = {fp*100}, FN = {fn*100}'", ")", "\n", "", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.evaluation.writedict": [[93, 100], ["dictionary.keys", "file.write"], "function", ["None"], ["", "def", "writedict", "(", "file", ",", "dictionary", ")", ":", "\n", "    ", "s", "=", "''", "\n", "for", "key", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "        ", "sub", "=", "'%s:%s  '", "%", "(", "key", ",", "dictionary", "[", "key", "]", ")", "\n", "s", "+=", "sub", "\n", "", "s", "+=", "'\\n'", "\n", "file", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.evaluation.writelog": [[101, 110], ["open", "open.write", "open.write", "evaluation.writedict", "open.write", "open.close", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.evaluation.writedict"], ["", "def", "writelog", "(", "filepath", ",", "metric", ",", "comment", ")", ":", "\n", "    ", "filepath", "=", "filepath", "\n", "logfile", "=", "open", "(", "filepath", ",", "'a'", ")", "\n", "import", "time", "\n", "logfile", ".", "write", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logfile", ".", "write", "(", "'\\t%s\\n'", "%", "comment", ")", "\n", "writedict", "(", "logfile", ",", "metric", ")", "\n", "logfile", ".", "write", "(", "'=====================================\\n'", ")", "\n", "logfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDataset.__init__": [[35, 43], ["os.path.join", "datasets.load_img_name_list", "datasets.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_img_name_list", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "coco_root", ",", "label_file_path", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "gen_attn", "=", "False", ")", ":", "\n", "        ", "img_name_list_path", "=", "os", ".", "path", ".", "join", "(", "img_name_list_path", ",", "f'{\"train\" if train or gen_attn else \"val\"}_id.txt'", ")", "\n", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ",", "label_file_path", ")", "\n", "self", ".", "coco_root", "=", "coco_root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "gen_attn", "=", "gen_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDataset.__getitem__": [[44, 55], ["torch.from_numpy", "PIL.Image.open().convert", "PIL.Image.open().convert", "datasets.COCOClsDataset.transform", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "if", "self", ".", "train", "or", "self", ".", "gen_attn", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "coco_root", ",", "'train2014'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "coco_root", ",", "'val2014'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDatasetMS.__init__": [[60, 70], ["os.path.join", "datasets.load_img_name_list", "datasets.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_img_name_list", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "coco_root", ",", "label_file_path", ",", "scales", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "gen_attn", "=", "False", ",", "unit", "=", "1", ")", ":", "\n", "        ", "img_name_list_path", "=", "os", ".", "path", ".", "join", "(", "img_name_list_path", ",", "f'{\"train\" if train or gen_attn else \"val\"}_id.txt'", ")", "\n", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ",", "label_file_path", ")", "\n", "self", ".", "coco_root", "=", "coco_root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "unit", "=", "unit", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "gen_attn", "=", "gen_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDatasetMS.__getitem__": [[71, 99], ["torch.from_numpy", "range", "PIL.Image.open().convert", "PIL.Image.open().convert", "int", "int", "PIL.Image.open().convert.resize", "ms_img_list.append", "range", "len", "msf_img_list.append", "msf_img_list.append", "round", "round", "len", "datasets.COCOClsDatasetMS.transform", "torch.flip", "PIL.Image.open", "PIL.Image.open", "round", "round", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "if", "self", ".", "train", "or", "self", ".", "gen_attn", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "coco_root", ",", "'train2014'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "coco_root", ",", "'val2014'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "\n", "rounded_size", "=", "(", "int", "(", "round", "(", "img", ".", "size", "[", "0", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ",", "int", "(", "round", "(", "img", ".", "size", "[", "1", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ")", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "target_size", "=", "(", "round", "(", "rounded_size", "[", "0", "]", "*", "s", ")", ",", "\n", "round", "(", "rounded_size", "[", "1", "]", "*", "s", ")", ")", "\n", "s_img", "=", "img", ".", "resize", "(", "target_size", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "ms_img_list", ".", "append", "(", "s_img", ")", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "                ", "ms_img_list", "[", "i", "]", "=", "self", ".", "transform", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "", "", "msf_img_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "            ", "msf_img_list", ".", "append", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "# msf_img_list.append(np.flip(ms_img_list[i], -1).copy())", "\n", "msf_img_list", ".", "append", "(", "torch", ".", "flip", "(", "ms_img_list", "[", "i", "]", ",", "[", "-", "1", "]", ")", ")", "\n", "", "return", "msf_img_list", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.COCOClsDatasetMS.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12Dataset.__init__": [[105, 111], ["os.path.join", "datasets.load_img_name_list", "datasets.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_img_name_list", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "gen_attn", "=", "False", ")", ":", "\n", "        ", "img_name_list_path", "=", "os", ".", "path", ".", "join", "(", "img_name_list_path", ",", "f'{\"train_aug\" if train or gen_attn else \"val\"}_id.txt'", ")", "\n", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12Dataset.__getitem__": [[112, 120], ["PIL.Image.open().convert", "torch.from_numpy", "datasets.VOC12Dataset.transform", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "voc12_root", ",", "'JPEGImages'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12Dataset.__len__": [[121, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__init__": [[126, 134], ["os.path.join", "datasets.load_img_name_list", "datasets.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_img_name_list", "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "scales", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "gen_attn", "=", "False", ",", "unit", "=", "1", ")", ":", "\n", "        ", "img_name_list_path", "=", "os", ".", "path", ".", "join", "(", "img_name_list_path", ",", "f'{\"train_aug\" if train or gen_attn else \"val\"}_id.txt'", ")", "\n", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "unit", "=", "unit", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__getitem__": [[135, 160], ["PIL.Image.open().convert", "torch.from_numpy", "range", "int", "int", "PIL.Image.open().convert.resize", "ms_img_list.append", "range", "len", "msf_img_list.append", "msf_img_list.append", "PIL.Image.open", "round", "round", "len", "datasets.VOC12DatasetMS.transform", "torch.flip", "os.path.join", "round", "round"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "voc12_root", ",", "'JPEGImages'", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "\n", "rounded_size", "=", "(", "int", "(", "round", "(", "img", ".", "size", "[", "0", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ",", "int", "(", "round", "(", "img", ".", "size", "[", "1", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ")", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "target_size", "=", "(", "round", "(", "rounded_size", "[", "0", "]", "*", "s", ")", ",", "\n", "round", "(", "rounded_size", "[", "1", "]", "*", "s", ")", ")", "\n", "s_img", "=", "img", ".", "resize", "(", "target_size", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "ms_img_list", ".", "append", "(", "s_img", ")", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "                ", "ms_img_list", "[", "i", "]", "=", "self", ".", "transform", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "", "", "msf_img_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "            ", "msf_img_list", ".", "append", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "# msf_img_list.append(np.flip(ms_img_list[i], -1).copy())", "\n", "msf_img_list", ".", "append", "(", "torch", ".", "flip", "(", "ms_img_list", "[", "i", "]", ",", "[", "-", "1", "]", ")", ")", "\n", "", "return", "msf_img_list", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.VOC12DatasetMS.__len__": [[161, 163], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_img_name_list": [[13, 19], ["open().readlines", "img_gt_name.strip", "open"], "function", ["None"], ["def", "load_img_name_list", "(", "dataset_path", ")", ":", "\n", "\n", "    ", "img_gt_name_list", "=", "open", "(", "dataset_path", ")", ".", "readlines", "(", ")", "\n", "img_name_list", "=", "[", "img_gt_name", ".", "strip", "(", ")", "for", "img_gt_name", "in", "img_gt_name_list", "]", "\n", "\n", "return", "img_name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.load_image_label_list_from_npy": [[20, 32], ["numpy.load().item", "label_list.append", "numpy.load", "np.load().item.keys"], "function", ["None"], ["", "def", "load_image_label_list_from_npy", "(", "img_name_list", ",", "label_file_path", "=", "None", ")", ":", "\n", "    ", "if", "label_file_path", "is", "None", ":", "\n", "        ", "label_file_path", "=", "'voc12/cls_labels.npy'", "\n", "", "cls_labels_dict", "=", "np", ".", "load", "(", "label_file_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "label_list", "=", "[", "]", "\n", "for", "id", "in", "img_name_list", ":", "\n", "        ", "if", "id", "not", "in", "cls_labels_dict", ".", "keys", "(", ")", ":", "\n", "            ", "img_name", "=", "id", "+", "'.jpg'", "\n", "", "else", ":", "\n", "            ", "img_name", "=", "id", "\n", "", "label_list", ".", "append", "(", "cls_labels_dict", "[", "img_name", "]", ")", "\n", "", "return", "label_list", "\n", "# return [cls_labels_dict[img_name] for img_name in img_name_list ]", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_dataset": [[165, 188], ["datasets.build_transform", "datasets.VOC12Dataset", "datasets.VOC12DatasetMS", "datasets.COCOClsDataset", "tuple", "datasets.COCOClsDatasetMS", "tuple"], "function", ["home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_transform"], ["", "", "def", "build_dataset", "(", "is_train", ",", "args", ",", "gen_attn", "=", "False", ")", ":", "\n", "    ", "transform", "=", "build_transform", "(", "is_train", ",", "args", ")", "\n", "dataset", "=", "None", "\n", "nb_classes", "=", "None", "\n", "\n", "if", "args", ".", "data_set", "==", "'VOC12'", ":", "\n", "        ", "dataset", "=", "VOC12Dataset", "(", "img_name_list_path", "=", "args", ".", "img_list", ",", "voc12_root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "is_train", ",", "gen_attn", "=", "gen_attn", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "20", "\n", "", "elif", "args", ".", "data_set", "==", "'VOC12MS'", ":", "\n", "        ", "dataset", "=", "VOC12DatasetMS", "(", "img_name_list_path", "=", "args", ".", "img_list", ",", "voc12_root", "=", "args", ".", "data_path", ",", "scales", "=", "tuple", "(", "args", ".", "scales", ")", ",", "\n", "train", "=", "is_train", ",", "gen_attn", "=", "gen_attn", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "20", "\n", "", "elif", "args", ".", "data_set", "==", "'COCO'", ":", "\n", "        ", "dataset", "=", "COCOClsDataset", "(", "img_name_list_path", "=", "args", ".", "img_list", ",", "coco_root", "=", "args", ".", "data_path", ",", "label_file_path", "=", "args", ".", "label_file_path", ",", "\n", "train", "=", "is_train", ",", "gen_attn", "=", "gen_attn", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "80", "\n", "", "elif", "args", ".", "data_set", "==", "'COCOMS'", ":", "\n", "        ", "dataset", "=", "COCOClsDatasetMS", "(", "img_name_list_path", "=", "args", ".", "img_list", ",", "coco_root", "=", "args", ".", "data_path", ",", "scales", "=", "tuple", "(", "args", ".", "scales", ")", ",", "label_file_path", "=", "args", ".", "label_file_path", ",", "\n", "train", "=", "is_train", ",", "gen_attn", "=", "gen_attn", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "80", "\n", "\n", "", "return", "dataset", ",", "nb_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.xulianuwa_mctformer.None.datasets.build_transform": [[190, 222], ["t.append", "t.append", "torchvision.transforms.Compose", "timm.data.create_transform", "int", "t.append", "t.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["None"], ["", "def", "build_transform", "(", "is_train", ",", "args", ")", ":", "\n", "    ", "resize_im", "=", "args", ".", "input_size", ">", "32", "\n", "if", "is_train", ":", "\n", "# this should always dispatch to transforms_imagenet_train", "\n", "        ", "transform", "=", "create_transform", "(", "\n", "input_size", "=", "args", ".", "input_size", ",", "\n", "is_training", "=", "True", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "aa", ",", "\n", "interpolation", "=", "args", ".", "train_interpolation", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", ")", "\n", "if", "not", "resize_im", ":", "\n", "# replace RandomResizedCropAndInterpolation with", "\n", "# RandomCrop", "\n", "            ", "transform", ".", "transforms", "[", "0", "]", "=", "transforms", ".", "RandomCrop", "(", "\n", "args", ".", "input_size", ",", "padding", "=", "4", ")", "\n", "", "return", "transform", "\n", "\n", "", "t", "=", "[", "]", "\n", "if", "resize_im", "and", "not", "args", ".", "gen_attention_maps", ":", "\n", "        ", "size", "=", "int", "(", "(", "256", "/", "224", ")", "*", "args", ".", "input_size", ")", "\n", "t", ".", "append", "(", "\n", "transforms", ".", "Resize", "(", "size", ",", "interpolation", "=", "3", ")", ",", "# to maintain same ratio w.r.t. 224 images", "\n", ")", "\n", "t", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "args", ".", "input_size", ")", ")", "\n", "\n", "", "t", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "t", ".", "append", "(", "transforms", ".", "Normalize", "(", "IMAGENET_DEFAULT_MEAN", ",", "IMAGENET_DEFAULT_STD", ")", ")", "\n", "return", "transforms", ".", "Compose", "(", "t", ")", "\n", "", ""]]}