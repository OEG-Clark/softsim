{"home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.visualizer.Visualizer.__init__": [[10, 19], ["tensorboardX.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "exp_name", "=", "None", ")", ":", "\n", "        ", "if", "exp_name", "is", "None", ":", "\n", "            ", "exp_name", "=", "opt", ".", "exp_name", "\n", "", "if", "not", "opt", ".", "debug", ":", "\n", "            ", "log_dir", "=", "\"runs/%s\"", "%", "(", "exp_name", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", ")", "\n", "self", ".", "debug", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "debug", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.visualizer.Visualizer.plot_current_losses": [[20, 25], ["losses.items", "visualizer.Visualizer.writer.add_scalar"], "methods", ["None"], ["", "", "def", "plot_current_losses", "(", "self", ",", "iteration", ",", "losses", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "", "for", "name", ",", "value", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "name", ",", "value", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.visualizer.Visualizer.display_current_results": [[26, 31], ["visuals.items", "visualizer.Visualizer.writer.add_images"], "methods", ["None"], ["", "", "def", "display_current_results", "(", "self", ",", "iteration", ",", "visuals", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "", "for", "name", ",", "value", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_images", "(", "name", ",", "value", ",", "global_step", "=", "iteration", ",", "walltime", "=", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.visualizer.Visualizer.plot_items": [[32, 37], ["items.items", "visualizer.Visualizer.writer.add_scalar"], "methods", ["None"], ["", "", "def", "plot_items", "(", "self", ",", "iteration", ",", "items", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "\n", "            ", "return", "\n", "", "for", "name", ",", "value", "in", "items", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "name", ",", "value", ",", "iteration", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.ResNetFc.__init__": [[35, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "network.ResNetFc.bottleneck.apply", "network.ResNetFc.fc.apply", "network.ResNetFc.gvbg.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.fc.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.gvbg.apply"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "resnet_name", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "256", ",", "new_cls", "=", "False", ",", "class_num", "=", "1000", ")", ":", "\n", "    ", "super", "(", "ResNetFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_resnet", "=", "resnet_dict", "[", "resnet_name", "]", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "conv1", "=", "model_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "model_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "model_resnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "model_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "model_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "model_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "model_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "model_resnet", ".", "layer4", "\n", "self", ".", "avgpool", "=", "model_resnet", ".", "avgpool", "\n", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "avgpool", ")", "\n", "self", ".", "select_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "avgpool", ")", "\n", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "new_cls", "=", "new_cls", "\n", "if", "new_cls", ":", "\n", "        ", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "bottleneck_dim", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "self", ".", "gvbg", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "self", ".", "focal1", "=", "nn", ".", "Linear", "(", "class_num", ",", "class_num", ")", "\n", "self", ".", "focal2", "=", "nn", ".", "Linear", "(", "class_num", ",", "1", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "fc", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "gvbg", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "__in_features", "=", "bottleneck_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "gvbg", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "gvbg", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "model_resnet", ".", "fc", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.ResNetFc.forward": [[75, 85], ["network.ResNetFc.feature_layers", "network.ResNetFc.view", "network.ResNetFc.gvbg", "network.ResNetFc.fc", "network.ResNetFc.size", "network.ResNetFc.bottleneck"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "gvbg", "=", "True", ")", ":", "\n", "    ", "x", "=", "self", ".", "feature_layers", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "use_bottleneck", "and", "self", ".", "new_cls", ":", "\n", "        ", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "", "bridge", "=", "self", ".", "gvbg", "(", "x", ")", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "gvbg", ":", "\n", "        ", "y", "=", "y", "-", "bridge", "\n", "", "return", "x", ",", "y", ",", "bridge", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.ResNetFc.output_num": [[86, 88], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.ResNetFc.get_parameters": [[89, 102], ["network.ResNetFc.parameters", "network.ResNetFc.feature_layers.parameters", "network.ResNetFc.bottleneck.parameters", "network.ResNetFc.fc.parameters", "network.ResNetFc.feature_layers.parameters", "network.ResNetFc.fc.parameters", "network.ResNetFc.gvbg.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "new_cls", ":", "\n", "        ", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "self", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "else", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "self", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "gvbg", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", "else", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "return", "parameter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.AdversarialNetwork.__init__": [[105, 120], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "network.AdversarialNetwork.apply"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ",", "hidden_size", ",", "max_iter", "=", "10000.0", ")", ":", "\n", "    ", "super", "(", "AdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer3", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "self", ".", "gvbd", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.AdversarialNetwork.forward": [[121, 136], ["network.calc_coeff", "network.AdversarialNetwork.register_hook", "network.AdversarialNetwork.ad_layer1", "network.AdversarialNetwork.relu1", "network.AdversarialNetwork.dropout1", "network.AdversarialNetwork.ad_layer2", "network.AdversarialNetwork.relu2", "network.AdversarialNetwork.dropout2", "network.AdversarialNetwork.ad_layer3", "network.AdversarialNetwork.gvbd", "network.grl_hook"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.calc_coeff", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.grl_hook"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "        ", "self", ".", "iter_num", "+=", "1", "\n", "", "coeff", "=", "calc_coeff", "(", "self", ".", "iter_num", ",", "max_iter", "=", "self", ".", "max_iter", ")", "\n", "x", "=", "x", "*", "1.0", "\n", "x", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "y", "=", "self", ".", "ad_layer3", "(", "x", ")", "\n", "z", "=", "self", ".", "gvbd", "(", "x", ")", "\n", "return", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.AdversarialNetwork.output_num": [[137, 139], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.AdversarialNetwork.get_parameters": [[139, 141], ["network.AdversarialNetwork.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.calc_coeff": [[12, 14], ["numpy.float", "numpy.exp"], "function", ["None"], ["def", "calc_coeff", "(", "iter_num", ",", "high", "=", "1.0", ",", "low", "=", "0.0", ",", "alpha", "=", "10.0", ",", "max_iter", "=", "10000.0", ")", ":", "\n", "    ", "return", "np", ".", "float", "(", "2.0", "*", "(", "high", "-", "low", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "alpha", "*", "iter_num", "/", "max_iter", ")", ")", "-", "(", "high", "-", "low", ")", "+", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.init_weights": [[15, 26], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.network.grl_hook": [[29, 33], ["grad.clone"], "function", ["None"], ["def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.loss.Myloss.__init__": [[11, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Myloss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.loss.Myloss.forward": [[16, 19], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "label", ",", "weight", ")", ":", "\n", "        ", "entropy", "=", "-", "label", "*", "torch", ".", "log", "(", "input_", "+", "self", ".", "epsilon", ")", "-", "(", "1", "-", "label", ")", "*", "torch", ".", "log", "(", "1", "-", "input_", "+", "self", ".", "epsilon", ")", "\n", "return", "torch", ".", "sum", "(", "entropy", "*", "weight", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.loss.Entropy": [[21, 27], ["input_.size", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-5", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.loss.grl_hook": [[28, 32], ["grad.clone"], "function", ["None"], ["", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.loss.GVB": [[33, 61], ["loss.Myloss", "input_list[].reshape", "ad_net", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "loss.Entropy", "torch.exp.register_hook", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "softmax_output.size", "loss.grl_hook", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "myloss", "torch.Sigmoid", "torch.Sigmoid", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "weight.view", "softmax_output.size", "softmax_output.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.Entropy", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.grl_hook"], ["", "def", "GVB", "(", "input_list", ",", "ad_net", ",", "coeff", "=", "None", ",", "myloss", "=", "Myloss", "(", ")", ",", "GVBD", "=", "False", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "0", "]", "\n", "focals", "=", "input_list", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ad_out", ",", "fc_out", "=", "ad_net", "(", "softmax_output", ")", "\n", "if", "GVBD", "==", "1", ":", "\n", "        ", "ad_out", "=", "nn", ".", "Sigmoid", "(", ")", "(", "ad_out", "-", "fc_out", ")", "\n", "", "else", ":", "\n", "        ", "ad_out", "=", "nn", ".", "Sigmoid", "(", ")", "(", "ad_out", ")", "\n", "", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "x", "=", "softmax_output", "\n", "entropy", "=", "Entropy", "(", "x", ")", "\n", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n", "gvbg", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "focals", ")", ")", "\n", "gvbd", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "fc_out", ")", ")", "\n", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "softmax_output", ".", "size", "(", "0", ")", "//", "2", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "myloss", "(", "ad_out", ",", "dc_target", ",", "weight", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "mean_entropy", ",", "gvbg", ",", "gvbd", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.lr_schedule.inv_lr_scheduler": [[1, 11], ["None"], "function", ["None"], ["def", "inv_lr_scheduler", "(", "optimizer", ",", "iter_num", ",", "gamma", ",", "power", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "0.0005", ")", ":", "\n", "    ", "\"\"\"Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs.\"\"\"", "\n", "lr", "=", "lr", "*", "(", "1", "+", "gamma", "*", "iter_num", ")", "**", "(", "-", "power", ")", "\n", "i", "=", "0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "weight_decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageList.__init__": [[41, 59], ["data_list.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "mode", "=", "'RGB'", ",", "return_path", "=", "False", ",", "\n", "return_cdm", "=", "False", ",", "cdm_path", "=", "\"\"", ",", "cdm_transform", "=", "None", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "return_path", "=", "return_path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "cdm_transform", "=", "cdm_transform", "\n", "self", ".", "return_cdm", "=", "return_cdm", "\n", "self", ".", "cdm_path", "=", "cdm_path", "\n", "if", "mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "loader", "=", "rgb_loader", "\n", "", "elif", "mode", "==", "'L'", ":", "\n", "            ", "self", ".", "loader", "=", "l_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageList.__getitem__": [[60, 83], ["data_list.ImageList.loader", "data_list.ImageList.transform", "data_list.ImageList.target_transform", "dda_model.util.get_cdm_file_name", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_list.ImageList.loader", "data_list.ImageList.cdm_transform"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_cdm_file_name"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "if", "self", ".", "return_cdm", ":", "\n", "            ", "cdm_file_name", "=", "get_cdm_file_name", "(", "path", ")", "\n", "cdm_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cdm_path", ",", "cdm_file_name", ")", "\n", "cdm", "=", "self", ".", "loader", "(", "cdm_file_path", ")", "\n", "if", "self", ".", "cdm_transform", "is", "not", "None", ":", "\n", "                ", "cdm", "=", "self", ".", "cdm_transform", "(", "cdm", ")", "\n", "", "", "if", "self", ".", "return_path", ":", "\n", "            ", "if", "self", ".", "return_cdm", ":", "\n", "                ", "return", "img", ",", "target", ",", "path", ",", "cdm", "\n", "", "else", ":", "\n", "                ", "return", "img", ",", "target", ",", "path", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "return_cdm", ":", "\n", "                ", "return", "img", ",", "target", ",", "cdm", "\n", "", "else", ":", "\n", "                ", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageList.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ExpertImageList.__init__": [[88, 105], ["data_list.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "mode", "=", "'RGB'", ",", "return_path", "=", "False", ",", "cdm_path", "=", "\"\"", ",", "cdm_transform", "=", "None", ",", "n_experts", "=", "1", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "return_path", "=", "return_path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "cdm_transform", "=", "cdm_transform", "\n", "self", ".", "cdm_path", "=", "cdm_path", "\n", "self", ".", "n_experts", "=", "n_experts", "\n", "if", "mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "loader", "=", "rgb_loader", "\n", "", "elif", "mode", "==", "'L'", ":", "\n", "            ", "self", ".", "loader", "=", "l_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ExpertImageList.__getitem__": [[106, 128], ["data_list.ExpertImageList.loader", "torch.zeros().to", "range", "data_list.ExpertImageList.transform", "data_list.ExpertImageList.target_transform", "dda_model.util.get_expert_cdm_file_name", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_list.ExpertImageList.loader", "torch.zeros", "data_list.ExpertImageList.cdm_transform"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_expert_cdm_file_name"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "cdms", "=", "torch", ".", "zeros", "(", "self", ".", "n_experts", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "# cdms = cdms.unsqueeze(0).expand(self.n_experts, -1, -1, -1)", "\n", "for", "i", "in", "range", "(", "self", ".", "n_experts", ")", ":", "\n", "            ", "cdm_file_name", "=", "get_expert_cdm_file_name", "(", "path", ",", "i", ")", "\n", "cdm_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cdm_path", ",", "cdm_file_name", ")", "\n", "cdm", "=", "self", ".", "loader", "(", "cdm_file_path", ")", "\n", "if", "self", ".", "cdm_transform", "is", "not", "None", ":", "\n", "                ", "cdm", "=", "self", ".", "cdm_transform", "(", "cdm", ")", "\n", "", "cdms", "[", "i", "]", "=", "cdm", "\n", "\n", "", "if", "self", ".", "return_path", ":", "\n", "            ", "return", "img", ",", "target", ",", "path", ",", "cdms", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "target", ",", "cdms", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ExpertImageList.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.BundledImageList.__init__": [[134, 153], ["data_list.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "ori_transform", "=", "None", ",", "cdm_transform", "=", "None", ",", "mode", "=", "'RGB'", ",", "return_path", "=", "False", ",", "\n", "cdm_path", "=", "\"\"", ",", "bundled_transform", "=", "None", ",", "resized_crop_size", "=", "224", ",", "random_horizontal_flip", "=", "False", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "return_path", "=", "return_path", "\n", "self", ".", "ori_transform", "=", "ori_transform", "\n", "self", ".", "cdm_transform", "=", "cdm_transform", "\n", "self", ".", "bundled_transform", "=", "bundled_transform", "\n", "self", ".", "cdm_path", "=", "cdm_path", "\n", "self", ".", "resized_crop_size", "=", "resized_crop_size", "\n", "self", ".", "random_horizontal_flip", "=", "random_horizontal_flip", "\n", "if", "mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "loader", "=", "rgb_loader", "\n", "", "elif", "mode", "==", "'L'", ":", "\n", "            ", "self", ".", "loader", "=", "l_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.BundledImageList.__getitem__": [[154, 188], ["data_list.BundledImageList.loader", "dda_model.util.get_cdm_file_name", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_list.BundledImageList.loader", "data_list.BundledImageList.ori_transform", "data_list.BundledImageList.cdm_transform", "torchvision.transforms.RandomResizedCrop.get_params", "torchvision.resized_crop", "torchvision.resized_crop", "data_list.BundledImageList.bundled_transform", "data_list.BundledImageList.bundled_transform", "random.random", "random.random", "random.random", "random.random", "torchvision.hflip", "torchvision.hflip"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_cdm_file_name", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_params"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "ori_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "ori_transform", "(", "img", ")", "\n", "\n", "", "cdm_file_name", "=", "get_cdm_file_name", "(", "path", ")", "\n", "cdm_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cdm_path", ",", "cdm_file_name", ")", "\n", "cdm", "=", "self", ".", "loader", "(", "cdm_file_path", ")", "\n", "if", "self", ".", "cdm_transform", "is", "not", "None", ":", "\n", "            ", "cdm", "=", "self", ".", "cdm_transform", "(", "cdm", ")", "\n", "\n", "", "if", "self", ".", "random_horizontal_flip", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "img", "=", "F", ".", "hflip", "(", "img", ")", "\n", "cdm", "=", "F", ".", "hflip", "(", "cdm", ")", "\n", "\n", "", "", "if", "self", ".", "resized_crop_size", ">", "0", ":", "\n", "# Perform random resized crop", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "\n", "img", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", "\n", "size", "=", "(", "self", ".", "resized_crop_size", ",", "self", ".", "resized_crop_size", ")", "\n", "img", "=", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "size", ")", "\n", "cdm", "=", "F", ".", "resized_crop", "(", "cdm", ",", "i", ",", "j", ",", "h", ",", "w", ",", "size", ")", "\n", "\n", "", "if", "self", ".", "bundled_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "bundled_transform", "(", "img", ")", "\n", "cdm", "=", "self", ".", "bundled_transform", "(", "cdm", ")", "\n", "\n", "", "if", "self", ".", "return_path", ":", "\n", "            ", "return", "img", ",", "target", ",", "path", ",", "cdm", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "target", ",", "cdm", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.BundledImageList.__len__": [[189, 191], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageValueList.__init__": [[193, 205], ["data_list.make_dataset", "len", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "rgb_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "values", "=", "[", "1.0", "]", "*", "len", "(", "imgs", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageValueList.set_values": [[206, 208], ["None"], "methods", ["None"], ["", "def", "set_values", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageValueList.__getitem__": [[209, 217], ["data_list.ImageValueList.loader", "data_list.ImageValueList.transform", "data_list.ImageValueList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.ImageValueList.__len__": [[218, 220], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.make_dataset": [[18, 28], ["len", "len", "image_list[].strip", "range", "image_list[].split", "numpy.array", "int", "val.split", "val.split", "int", "val.split", "val.split"], "function", ["None"], ["def", "make_dataset", "(", "image_list", ",", "labels", ")", ":", "\n", "    ", "if", "labels", ":", "\n", "        ", "len_", "=", "len", "(", "image_list", ")", "\n", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "labels", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "image_list", "[", "0", "]", ".", "split", "(", ")", ")", ">", "2", ":", "\n", "            ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "np", ".", "array", "(", "[", "int", "(", "la", ")", "for", "la", "in", "val", ".", "split", "(", ")", "[", "1", ":", "]", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "else", ":", "\n", "            ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.rgb_loader": [[30, 34], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "def", "rgb_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.data_list.l_loader": [[35, 39], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "", "", "def", "l_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'L'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.ResizeImage.__init__": [[9, 14], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "      ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.ResizeImage.__call__": [[14, 17], ["img.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "      ", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "resize", "(", "(", "th", ",", "tw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.RandomSizedCrop.__init__": [[29, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.RandomSizedCrop.__call__": [[33, 38], ["random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "size", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "2", "]", "-", "self", ".", "size", ")", "\n", "img", "=", "img", "[", ":", ",", "h_off", ":", "h_off", "+", "self", ".", "size", ",", "w_off", ":", "w_off", "+", "self", ".", "size", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.Normalize.__init__": [[49, 55], ["numpy.load", "torch.from_numpy", "numpy.load.astype"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "meanfile", "=", "None", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "", "else", ":", "\n", "            ", "arr", "=", "np", ".", "load", "(", "meanfile", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "arr", ".", "astype", "(", "'float32'", ")", "/", "255.0", ")", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.Normalize.__call__": [[56, 67], ["zip", "t.sub_"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.PlaceCrop.__init__": [[78, 85], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "start_x", ",", "start_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "start_x", "=", "start_x", "\n", "self", ".", "start_y", "=", "start_y", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.PlaceCrop.__call__": [[86, 95], ["img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "crop", "(", "(", "self", ".", "start_x", ",", "self", ".", "start_y", ",", "self", ".", "start_x", "+", "tw", ",", "self", ".", "start_y", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.ForceFlip.__call__": [[100, 108], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.CenterCrop.__init__": [[117, 122], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.CenterCrop.__call__": [[123, 136], ["int", "int"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "w_off", "=", "int", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", "\n", "h_off", "=", "int", "(", "(", "h", "-", "th", ")", "/", "2.", ")", "\n", "img", "=", "img", "[", ":", ",", "h_off", ":", "h_off", "+", "th", ",", "w_off", ":", "w_off", "+", "tw", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.image_train": [[138, 147], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "image_train", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.image_target": [[149, 158], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_target", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "#TODO", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.image_test": [[160, 169], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_test", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.cdm_train": [[171, 178], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "cdm_train", "(", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.cdm_test": [[180, 186], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "cdm_test", "(", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.bt_image": [[188, 192], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["None"], ["", "def", "bt_image", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.None.pre_process.bt_bundle": [[194, 200], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "bt_bundle", "(", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.__init__": [[14, 63], ["os.path.join", "dda_model.backbone.ResNet", "dda_feature_model.DDAFeatureModel.init_networks", "cyclegan.feature_cycle_gan_model.FeatureCycleGANModel", "dda_feature_model.DDAFeatureModel.init_schedulers", "torch.MSELoss", "torch.MSELoss", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "dda_model.vae.VAE", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "dda_model.loss.NMTCritierion", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "dda_feature_model.DDAFeatureModel.backbone.parameters", "dda_feature_model.DDAFeatureModel.vae.parameters", "dda_feature_model.DDAFeatureModel.linear_y.parameters", "dda_feature_model.DDAFeatureModel.backbone.parameters", "list", "list", "dda_feature_model.DDAFeatureModel.linear_y.parameters", "dda_feature_model.DDAFeatureModel.linear_tilde_x.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.init_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.init_schedulers", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "# get device name: CPU ", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ")", "# save all the checkpoints to save_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "\n", "# Networks", "\n", "", "self", ".", "backbone", "=", "ResNet", "(", "opt", ".", "resnet_name", ",", "return_feature_map", "=", "True", ")", "\n", "self", ".", "x_dim", "=", "self", ".", "backbone", ".", "n_features", "\n", "self", ".", "z_dim", "=", "opt", ".", "z_dim", "\n", "self", ".", "num_classes", "=", "opt", ".", "num_classes", "\n", "self", ".", "n_experts", "=", "opt", ".", "n_experts", "\n", "if", "not", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "vae", "=", "VAE", "(", "self", ".", "x_dim", ",", "self", ".", "z_dim", ")", "\n", "self", ".", "linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", "+", "self", ".", "z_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "linear_tilde_x", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", "+", "self", ".", "z_dim", ",", "self", ".", "x_dim", ")", "\n", "self", ".", "model_names", "=", "[", "'vae'", ",", "'backbone'", ",", "'linear_y'", ",", "'linear_tilde_x'", "]", "\n", "self", ".", "loss_names", "=", "[", "\"vae\"", ",", "\"linear\"", ",", "\"causal\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", "=", "[", "'backbone'", ",", "'linear_y'", "]", "\n", "self", ".", "loss_names", "=", "[", "'y'", "]", "\n", "", "self", ".", "init_networks", "(", ")", "\n", "self", ".", "cyclegan", "=", "FeatureCycleGANModel", "(", "opt", ",", "self", ".", "x_dim", ")", "\n", "\n", "# Optimizers", "\n", "if", "not", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "backbone_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "backbone_lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.001", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "vae_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "vae", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "vae_lr", ",", "weight_decay", "=", "0.001", ")", "\n", "self", ".", "linear_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "self", ".", "linear_y", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "linear_tilde_x", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "linear_lr", ",", "momentum", "=", "opt", ".", "linear_momentum", ",", "weight_decay", "=", "opt", ".", "linear_weight_decay", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_names", "=", "[", "\"backbone\"", ",", "\"vae\"", ",", "\"linear\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "linear_y", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "linear_lr", ",", "\n", "momentum", "=", "opt", ".", "linear_momentum", ",", "weight_decay", "=", "opt", ".", "linear_weight_decay", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "backbone_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "backbone_lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.001", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_names", "=", "[", "\"backbone\"", ",", "\"linear\"", "]", "\n", "", "self", ".", "init_schedulers", "(", ")", "\n", "# Losses", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "if", "self", ".", "opt", ".", "label_smoothing", ":", "\n", "            ", "self", ".", "ce", "=", "NMTCritierion", "(", "0.1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.init_schedulers": [[64, 70], ["getattr", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "setattr"], "methods", ["None"], ["", "def", "init_schedulers", "(", "self", ")", ":", "\n", "        ", "lambda_lr", "=", "lambda", "iter", ":", "(", "1", "+", "0.001", "*", "iter", ")", "**", "(", "-", "0.75", ")", "\n", "for", "name", "in", "self", ".", "optimizer_names", ":", "\n", "            ", "optimizer", "=", "getattr", "(", "self", ",", "name", "+", "\"_opt\"", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_lr", ")", "\n", "setattr", "(", "self", ",", "name", "+", "\"_scheduler\"", ",", "scheduler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.step_schedulers": [[71, 75], ["getattr", "getattr.step"], "methods", ["None"], ["", "", "def", "step_schedulers", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "optimizer_names", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "self", ",", "name", "+", "\"_scheduler\"", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.init_networks": [[76, 83], ["isinstance", "dda_model.util.init_net", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["", "", "def", "init_networks", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "parallel", "=", "(", "name", "==", "\"backbone\"", ")", "\n", "init_weight", "=", "(", "name", "!=", "\"backbone\"", ")", "\n", "net", "=", "init_net", "(", "getattr", "(", "self", ",", "name", ")", ",", "self", ".", "opt", ".", "init_type", ",", "self", ".", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "parallel", ",", "init_weight", ")", "\n", "setattr", "(", "self", ",", "name", ",", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.train_mode": [[84, 88], ["getattr().train", "getattr"], "methods", ["None"], ["", "", "", "def", "train_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "=", "True", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.test_mode": [[89, 93], ["getattr().eval", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.eval"], ["", "", "def", "test_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "=", "False", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "getattr", "(", "self", ",", "name", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.set_input": [[94, 106], ["target_imgs.to", "source_imgs.to", "source_labels.to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "source_imgs", ",", "source_labels", ",", "target_imgs", ")", ":", "\n", "        ", "if", "source_imgs", "is", "not", "None", ":", "\n", "# During testing, there may be no source images", "\n", "            ", "self", ".", "source_imgs", "=", "source_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_imgs", "=", "None", "\n", "", "if", "source_labels", "is", "not", "None", ":", "\n", "# During testing, there may be no source labels", "\n", "            ", "self", ".", "source_labels", "=", "source_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_labels", "=", "None", "\n", "", "self", ".", "target_imgs", "=", "target_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.get_logits_during_train": [[107, 132], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_feature_model.DDAFeatureModel.linear_y", "dda_feature_model.DDAFeatureModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_feature_model.DDAFeatureModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_feature_model.DDAFeatureModel.get_running_mu", "dda_feature_model.DDAFeatureModel.get_running_mu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x_s2t.t", "x_t.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu"], ["", "def", "get_logits_during_train", "(", "self", ",", "x_s", ",", "x_t", ",", "x_s2t", ",", "x_t2s", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x_s2t", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "logits", "=", "self", ".", "linear_y", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                ", "mu_tildeX", "=", "self", ".", "get_running_mu", "(", "x_t2s", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "mu_tildeX", "=", "self", ".", "get_running_mu", "(", "x_s", ",", "False", ")", "\n", "", "mu_xs", "=", "mu_tildeX", "\n", "mu_xt", "=", "mu_tildeX", "\n", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "# nc * x_dim", "\n", "bs", "=", "x_s2t", ".", "shape", "[", "0", "]", "\n", "xs_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu_xs", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_s2t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "xt_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu_xt", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "xs_logits", ",", "xt_logits", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.get_running_mu": [[133, 150], ["x.mean().unsqueeze", "x.mean", "hasattr", "x.mean().unsqueeze.detach", "dda_feature_model.DDAFeatureModel.run_avg_mu.detach", "dda_feature_model.DDAFeatureModel.run_avg_mu.detach"], "methods", ["None"], ["", "def", "get_running_mu", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "mu", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "not", "self", ".", "opt", ".", "accurate_mu", ":", "\n", "            ", "return", "mu", "\n", "", "else", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"run_avg_mu\"", ")", ":", "\n", "                ", "if", "update", ":", "\n", "                    ", "self", ".", "run_avg_mu", "=", "mu", "\n", "return", "mu", "\n", "", "else", ":", "\n", "                    ", "return", "mu", ".", "detach", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "update", ":", "\n", "                    ", "self", ".", "run_avg_mu", "=", "(", "1.0", "/", "25.0", ")", "*", "mu", "+", "(", "24.0", "/", "25.0", ")", "*", "self", ".", "run_avg_mu", ".", "detach", "(", ")", "\n", "return", "self", ".", "run_avg_mu", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "run_avg_mu", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.get_t2s_mu": [[151, 161], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "float", "test_loader.next", "dda_feature_model.DDAFeatureModel.set_input", "dda_feature_model.DDAFeatureModel.backbone", "dda_feature_model.DDAFeatureModel.mean().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dda_feature_model.DDAFeatureModel.mean"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dataloader.DDALoader.next", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input"], ["", "", "", "", "def", "get_t2s_mu", "(", "self", ",", "test_loader", ")", ":", "\n", "        ", "n", "=", "test_loader", ".", "length", "\n", "mu", "=", "torch", ".", "zeros", "(", "self", ".", "x_dim", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "inputs", ",", "labels", ",", "test_t2s", "=", "test_loader", ".", "next", "(", ")", "\n", "self", ".", "set_input", "(", "None", ",", "None", ",", "None", ",", "inputs", ",", "test_t2s", ")", "\n", "x_t2s", "=", "self", ".", "backbone", "(", "self", ".", "t2s_mappings", ")", "\n", "mu", "+=", "x_t2s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "mu", "/=", "float", "(", "n", ")", "\n", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.optimize": [[162, 258], ["dda_feature_model.DDAFeatureModel.backbone", "dda_feature_model.DDAFeatureModel.backbone", "dda_feature_model.DDAFeatureModel.cyclegan.set_input", "dda_feature_model.DDAFeatureModel.cyclegan.optimize_parameters", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.step_schedulers", "dda_feature_model.DDAFeatureModel.linear_opt.zero_grad", "dda_feature_model.DDAFeatureModel.backbone_opt.zero_grad", "dda_feature_model.DDAFeatureModel.backbone_opt.zero_grad", "dda_feature_model.DDAFeatureModel.vae_opt.zero_grad", "dda_feature_model.DDAFeatureModel.linear_opt.zero_grad", "dda_feature_model.DDAFeatureModel.linear_y", "dda_feature_model.DDAFeatureModel.ce", "dda_feature_model.DDAFeatureModel.loss_y.backward", "dda_feature_model.DDAFeatureModel.linear_opt.step", "dda_feature_model.DDAFeatureModel.backbone_opt.step", "torch.max", "torch.max", "torch.max", "torch.max", "dda_feature_model.DDAFeatureModel.vae", "dda_feature_model.DDAFeatureModel.vae", "dda_feature_model.DDAFeatureModel.loss_vae.backward", "dda_feature_model.DDAFeatureModel.vae_opt.step", "dda_feature_model.DDAFeatureModel.linear_y", "dda_feature_model.DDAFeatureModel.linear_tilde_x", "dda_feature_model.DDAFeatureModel.loss_linear.backward", "dda_feature_model.DDAFeatureModel.linear_opt.step", "dda_feature_model.DDAFeatureModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_feature_model.DDAFeatureModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_feature_model.DDAFeatureModel.ce", "torch.max", "torch.max", "torch.max", "torch.max", "dda_feature_model.DDAFeatureModel.detach", "dda_feature_model.DDAFeatureModel.detach", "dda_feature_model.DDAFeatureModel.vae.vae_loss", "dda_feature_model.DDAFeatureModel.vae.vae_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_feature_model.DDAFeatureModel.ce", "dda_feature_model.DDAFeatureModel.mse", "dda_feature_model.DDAFeatureModel.get_running_mu", "dda_feature_model.DDAFeatureModel.get_running_mu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "dda_feature_model.DDAFeatureModel.backbone_opt.zero_grad", "dda_feature_model.DDAFeatureModel.loss_causal.backward", "dda_feature_model.DDAFeatureModel.backbone_opt.step", "dda_feature_model.DDAFeatureModel.detach", "dda_feature_model.DDAFeatureModel.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tildeX_target.detach", "z_s2t.detach", "z_s2t.detach", "dda_feature_model.DDAFeatureModel.detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "z_t.detach", "z_t.detach", "dda_feature_model.DDAFeatureModel.detach", "dda_feature_model.DDAFeatureModel.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.optimize_parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.step_schedulers", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.vae_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.vae_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "linear_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "backbone_opt", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "vae_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "linear_opt", ".", "zero_grad", "(", ")", "\n", "\n", "# find feature maps", "\n", "", "fm_s", "=", "self", ".", "backbone", "(", "self", ".", "source_imgs", ")", "\n", "fm_t", "=", "self", ".", "backbone", "(", "self", ".", "target_imgs", ")", "\n", "\n", "# optimize cyclegan", "\n", "self", ".", "cyclegan", ".", "set_input", "(", "fm_s", ",", "fm_t", ")", "\n", "self", ".", "cyclegan", ".", "optimize_parameters", "(", ")", "\n", "fm_s2t", "=", "self", ".", "cyclegan", ".", "fake_B", "\n", "fm_t2s", "=", "self", ".", "cyclegan", ".", "fake_A", "\n", "\n", "x_s2t", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_s2t", ")", "\n", "x_t2s", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_t2s", ")", "\n", "x_s", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_s", ")", "\n", "x_t", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_t", ")", "\n", "\n", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "y_logits", "=", "self", ".", "linear_y", "(", "x_s2t", ")", "\n", "self", ".", "loss_y", "=", "self", ".", "ce", "(", "y_logits", ",", "self", ".", "source_labels", ")", "\n", "self", ".", "loss_y", ".", "backward", "(", ")", "\n", "self", ".", "linear_opt", ".", "step", "(", ")", "\n", "self", ".", "backbone_opt", ".", "step", "(", ")", "\n", "_", ",", "prediction", "=", "torch", ".", "max", "(", "y_logits", ",", "1", ")", "\n", "accuracy", "=", "(", "prediction", "==", "self", ".", "source_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "# find Z", "\n", "            ", "xp_s2t", ",", "mu_s2t", ",", "log_sigma_s2t", ",", "z_s2t", "=", "self", ".", "vae", "(", "x_s2t", ".", "detach", "(", ")", ")", "\n", "xp_t", ",", "mu_t", ",", "log_sigma_t", ",", "z_t", "=", "self", ".", "vae", "(", "x_t", ".", "detach", "(", ")", ")", "\n", "beta", "=", "self", ".", "opt", ".", "beta_vae", "\n", "self", ".", "loss_vae", "=", "self", ".", "vae", ".", "vae_loss", "(", "x_s2t", ".", "detach", "(", ")", ",", "xp_s2t", ",", "mu_s2t", ",", "log_sigma_s2t", ",", "beta", "=", "beta", ")", "+", "self", ".", "vae", ".", "vae_loss", "(", "x_t", ".", "detach", "(", ")", ",", "xp_t", ",", "mu_t", ",", "log_sigma_t", ",", "beta", "=", "beta", ")", "\n", "\n", "# self.loss_vae = self.vae.vae_loss(x_t.detach(), xp_t, mu_t, log_sigma_t)", "\n", "self", ".", "loss_vae", ".", "backward", "(", ")", "\n", "self", ".", "vae_opt", ".", "step", "(", ")", "\n", "\n", "# learn linear models", "\n", "if", "self", ".", "opt", ".", "backward_linear_loss", ":", "\n", "                ", "inputs", "=", "torch", ".", "cat", "(", "(", "z_s2t", ".", "detach", "(", ")", ",", "x_s2t", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                    ", "tildeX_inputs", "=", "torch", ".", "cat", "(", "(", "z_t", ".", "detach", "(", ")", ",", "x_t", ")", ",", "dim", "=", "1", ")", "\n", "tildeX_target", "=", "x_t2s", "\n", "", "else", ":", "\n", "                    ", "tildeX_inputs", "=", "inputs", "\n", "tildeX_target", "=", "x_s", "\n", "", "", "else", ":", "\n", "                ", "inputs", "=", "torch", ".", "cat", "(", "(", "z_s2t", ".", "detach", "(", ")", ",", "x_s2t", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                    ", "tildeX_inputs", "=", "torch", ".", "cat", "(", "(", "z_t", ".", "detach", "(", ")", ",", "x_t", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "tildeX_target", "=", "x_t2s", "\n", "", "else", ":", "\n", "                    ", "tildeX_inputs", "=", "inputs", "\n", "tildeX_target", "=", "x_s", "\n", "", "", "y_linear_preds", "=", "self", ".", "linear_y", "(", "inputs", ")", "\n", "x_tilde_preds", "=", "self", ".", "linear_tilde_x", "(", "tildeX_inputs", ")", "\n", "self", ".", "loss_linear", "=", "self", ".", "ce", "(", "y_linear_preds", ",", "self", ".", "source_labels", ")", "+", "self", ".", "mse", "(", "x_tilde_preds", ",", "tildeX_target", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_linear", ".", "backward", "(", "retain_graph", "=", "self", ".", "opt", ".", "backward_linear_loss", ")", "\n", "self", ".", "linear_opt", ".", "step", "(", ")", "\n", "\n", "# compute causal effects", "\n", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                ", "mu", "=", "self", ".", "get_running_mu", "(", "x_t2s", ")", "\n", "", "else", ":", "\n", "                ", "mu", "=", "self", ".", "get_running_mu", "(", "x_s", ")", "\n", "\n", "", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "# nc * x_dim", "\n", "bs", "=", "x_s2t", ".", "shape", "[", "0", "]", "\n", "y_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_s2t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "self", ".", "loss_causal", "=", "self", ".", "ce", "(", "y_logits", ",", "self", ".", "source_labels", ")", "\n", "if", "not", "self", ".", "opt", ".", "backward_generator", ":", "\n", "                ", "self", ".", "backbone_opt", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "iteration", ">=", "self", ".", "opt", ".", "pretrain_iteration", ":", "\n", "                ", "self", ".", "loss_causal", ".", "backward", "(", ")", "\n", "self", ".", "backbone_opt", ".", "step", "(", ")", "\n", "", "_", ",", "prediction", "=", "torch", ".", "max", "(", "y_logits", ",", "1", ")", "\n", "accuracy", "=", "(", "prediction", "==", "self", ".", "source_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "self", ".", "step_schedulers", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.predict": [[259, 292], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dda_feature_model.DDAFeatureModel.backbone", "dda_feature_model.DDAFeatureModel.backbone", "dda_feature_model.DDAFeatureModel.cyclegan.set_input", "dda_feature_model.DDAFeatureModel.cyclegan.forward", "dda_feature_model.DDAFeatureModel.cyclegan.backward_G", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.backbone.module.pool", "dda_feature_model.DDAFeatureModel.linear_y", "dda_feature_model.DDAFeatureModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_feature_model.DDAFeatureModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_feature_model.DDAFeatureModel.mean().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "dda_feature_model.DDAFeatureModel.mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_feature_model.DDAFeatureModel.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fm_s", "=", "self", ".", "backbone", "(", "self", ".", "source_imgs", ")", "\n", "fm_t", "=", "self", ".", "backbone", "(", "self", ".", "target_imgs", ")", "\n", "\n", "# Generate feature maps", "\n", "self", ".", "cyclegan", ".", "set_input", "(", "fm_s", ",", "fm_t", ")", "\n", "self", ".", "cyclegan", ".", "forward", "(", ")", "\n", "self", ".", "cyclegan", ".", "backward_G", "(", "backward_loss", "=", "False", ")", "\n", "\n", "fm_t2s", "=", "self", ".", "cyclegan", ".", "fake_A", "\n", "x_t2s", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_t2s", ")", "\n", "x_t", "=", "self", ".", "backbone", ".", "module", ".", "pool", "(", "fm_t", ")", "\n", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "                ", "y_logits", "=", "self", ".", "linear_y", "(", "x_t", ")", "\n", "", "else", ":", "\n", "                ", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "# (A.T.dot(A)).inv() or (A.dot(A.T)).inv() for numerical stability", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "opt", ".", "accurate_mu", ":", "\n", "                    ", "mu", "=", "self", ".", "target_mu", "\n", "", "else", ":", "\n", "                    ", "mu", "=", "x_t2s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "\n", "bs", "=", "x_t", ".", "shape", "[", "0", "]", "\n", "y_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "", "", "return", "y_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.get_current_losses": [[293, 301], ["dda_feature_model.DDAFeatureModel.cyclegan.get_current_losses", "isinstance", "float", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_current_losses"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "# errors_ret = OrderedDict()", "\n", "errors_ret", "=", "self", ".", "cyclegan", ".", "get_current_losses", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.load_networks": [[302, 318], ["dda_feature_model.DDAFeatureModel.cyclegan.load_networks", "isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "torch.load", "torch.load", "torch.load", "hasattr", "getattr.load_state_dict", "str"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.load_networks"], ["", "def", "load_networks", "(", "self", ",", "load_suffix", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "load_suffix", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "", "self", ".", "cyclegan", ".", "load_networks", "(", "load_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.save_networks": [[319, 335], ["dda_feature_model.DDAFeatureModel.cyclegan.save_networks", "isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "getattr.cuda", "torch.save", "torch.save", "torch.save", "torch.save", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "getattr.cpu().state_dict", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.cpu", "getattr.module.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.save_networks"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "if", "name", "==", "\"backbone\"", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "", "", "self", ".", "cyclegan", ".", "save_networks", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.setup": [[336, 341], ["dda_feature_model.DDAFeatureModel.print_networks", "dda_feature_model.DDAFeatureModel.load_networks"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.load_networks"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "train", "or", "self", ".", "opt", ".", "dda_continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "self", ".", "opt", ".", "dda_load_iter", "if", "self", ".", "opt", ".", "dda_load_iter", ">", "0", "else", "self", ".", "opt", ".", "dda_epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "self", ".", "opt", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_feature_model.DDAFeatureModel.print_networks": [[342, 360], ["print", "print", "dda_feature_model.DDAFeatureModel.cyclegan.print_networks", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "self", ".", "cyclegan", ".", "print_networks", "(", "verbose", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.NMTCritierion.__init__": [[7, 17], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.KLDivLoss", "torch.KLDivLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["import", "pdb", "\n", "\n", "\n", "class", "Myloss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Myloss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "return", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_", ",", "label", ",", "weight", ")", ":", "\n", "        ", "entropy", "=", "-", "label", "*", "torch", ".", "log", "(", "input_", "+", "self", ".", "epsilon", ")", "-", "(", "1", "-", "label", ")", "*", "torch", ".", "log", "(", "1", "-", "input_", "+", "self", ".", "epsilon", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.NMTCritierion._smooth_label": [[18, 28], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn.fill_", "torch.randn.fill_"], "methods", ["None"], ["return", "torch", ".", "sum", "(", "entropy", "*", "weight", ")", "/", "2", "\n", "\n", "\n", "", "", "def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-5", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n", "", "def", "grl_hook", "(", "coeff", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.NMTCritierion._bottle": [[29, 31], ["v.view", "v.size"], "methods", ["None"], ["    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.NMTCritierion.forward": [[32, 48], ["loss.NMTCritierion.LogSoftmax", "loss.NMTCritierion.size", "labels.view", "one_hot.repeat.detach.detach", "loss.NMTCritierion._smooth_label", "one_hot.cuda.cuda.repeat", "one_hot.cuda.repeat.scatter_", "one_hot.cuda.repeat.detach", "loss.NMTCritierion.criterion", "float", "one_hot.cuda.cuda.cuda", "one_hot.repeat.detach.size", "tmp_.detach.detach.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.NMTCritierion._smooth_label"], ["\n", "", "def", "GVB", "(", "input_list", ",", "ad_net", ",", "coeff", "=", "None", ",", "myloss", "=", "Myloss", "(", ")", ",", "GVBD", "=", "False", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "0", "]", "\n", "focals", "=", "input_list", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ad_out", ",", "fc_out", "=", "ad_net", "(", "softmax_output", ")", "\n", "if", "GVBD", "==", "1", ":", "\n", "        ", "ad_out", "=", "nn", ".", "Sigmoid", "(", ")", "(", "ad_out", "-", "fc_out", ")", "\n", "", "else", ":", "\n", "        ", "ad_out", "=", "nn", ".", "Sigmoid", "(", ")", "(", "ad_out", ")", "\n", "", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "x", "=", "softmax_output", "\n", "entropy", "=", "Entropy", "(", "x", ")", "\n", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.AdversarialLoss.__init__": [[51, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "softmax_output", ".", "size", "(", "0", ")", "//", "2", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.AdversarialLoss.forward": [[56, 59], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["target_mask", "[", "0", ":", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.Entropy": [[60, 65], ["torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["return", "myloss", "(", "ad_out", ",", "dc_target", ",", "weight", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "mean_entropy", ",", "gvbg", ",", "gvbd", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.grl_hook": [[66, 70], ["grad.clone"], "function", ["None"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.get_alignment_loss": [[71, 101], ["ad_net", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "loss.Entropy", "torch.exp.register_hook", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.AdversarialLoss", "x.size", "loss.grl_hook", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "AdversarialLoss.", "torch.Sigmoid", "torch.Sigmoid", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "float", "weight.view", "x.size", "x.size", "torch.ones().to", "torch.ones().to", "torch.from_numpy", "torch.from_numpy", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.Entropy", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.grl_hook"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.calc_coeff": [[102, 104], ["numpy.float", "numpy.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.__init__": [[6, 49], ["torch.Module.__init__", "enc_layers.split.split.split", "range", "torch.Sequential", "torch.Sequential", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dec_layers.split.split.split", "range", "torch.Sequential", "torch.Sequential", "len", "int", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "int", "int", "encoder.append", "encoder.append", "encoder.append", "encoder.append", "encoder.append", "decoder.append", "decoder.append", "decoder.append", "decoder.append", "decoder.append", "decoder.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "len", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", "=", "2048", ",", "z_dim", "=", "100", ",", "enc_layers", "=", "'1200 600'", ",", "dec_layers", "=", "'600'", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x_dim", "=", "x_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "enc_layers", "=", "enc_layers", ".", "split", "(", ")", "\n", "encoder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "enc_layers", ")", ")", ":", "\n", "            ", "num_hidden", "=", "int", "(", "enc_layers", "[", "i", "]", ")", "\n", "pre_hidden", "=", "int", "(", "enc_layers", "[", "i", "-", "1", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "encoder", ".", "append", "(", "nn", ".", "Linear", "(", "x_dim", ",", "num_hidden", ")", ")", "\n", "encoder", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "encoder", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", ")", "\n", "encoder", ".", "append", "(", "nn", ".", "Linear", "(", "pre_hidden", ",", "num_hidden", ")", ")", "\n", "encoder", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "\n", "last_hidden", "=", "int", "(", "enc_layers", "[", "-", "1", "]", ")", "\n", "self", ".", "mu_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "last_hidden", ",", "z_dim", ")", "\n", ")", "\n", "\n", "self", ".", "sig_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "last_hidden", ",", "z_dim", ")", "\n", ")", "\n", "\n", "dec_layers", "=", "dec_layers", ".", "split", "(", ")", "\n", "decoder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dec_layers", ")", ")", ":", "\n", "            ", "num_hidden", "=", "int", "(", "dec_layers", "[", "i", "]", ")", "\n", "pre_hidden", "=", "int", "(", "dec_layers", "[", "i", "-", "1", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "decoder", ".", "append", "(", "nn", ".", "Linear", "(", "z_dim", ",", "num_hidden", ")", ")", "\n", "decoder", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "decoder", ".", "append", "(", "nn", ".", "Linear", "(", "pre_hidden", ",", "num_hidden", ")", ")", "\n", "decoder", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "if", "i", "==", "len", "(", "dec_layers", ")", "-", "1", ":", "\n", "                ", "decoder", ".", "append", "(", "nn", ".", "Linear", "(", "num_hidden", ",", "x_dim", ")", ")", "\n", "decoder", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.encode": [[50, 55], ["vae.VAE.encoder", "vae.VAE.mu_net", "vae.VAE.sig_net"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "X", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "encoder", "(", "X", ")", "\n", "mu", "=", "self", ".", "mu_net", "(", "hidden", ")", "\n", "log_sigma", "=", "self", ".", "sig_net", "(", "hidden", ")", "\n", "return", "mu", ",", "log_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.decode": [[56, 62], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "vae.VAE.decoder", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mu.size"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "mu", ",", "log_sigma", ")", ":", "\n", "        ", "eps", "=", "torch", ".", "rand", "(", "mu", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "Z", "=", "mu", "+", "torch", ".", "exp", "(", "log_sigma", "/", "2", ")", "*", "eps", "\n", "ZS", "=", "Z", "\n", "Xp", "=", "self", ".", "decoder", "(", "ZS", ")", "\n", "return", "Xp", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.forward": [[63, 73], ["vae.VAE.encoder", "vae.VAE.mu_net", "vae.VAE.sig_net", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "eps.cuda.cuda.cuda", "vae.VAE.decoder", "vae.VAE.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "encoder", "(", "X", ")", "\n", "mu", "=", "self", ".", "mu_net", "(", "hidden", ")", "\n", "log_sigma", "=", "self", ".", "sig_net", "(", "hidden", ")", "\n", "eps", "=", "torch", ".", "rand", "(", "mu", ".", "size", "(", ")", ")", "\n", "eps", "=", "eps", ".", "cuda", "(", ")", "\n", "Z", "=", "mu", "+", "torch", ".", "exp", "(", "log_sigma", "/", "2", ")", "*", "eps", "\n", "ZS", "=", "Z", "\n", "Xp", "=", "self", ".", "decoder", "(", "ZS", ")", "\n", "return", "Xp", ",", "mu", ",", "log_sigma", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.sample": [[74, 78], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "vae.VAE.decoder", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "rand", "(", "[", "self", ".", "z_dim", "]", ")", ".", "cuda", "(", ")", "\n", "ZS", "=", "Z", "\n", "return", "self", ".", "decoder", "(", "ZS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.vae_loss": [[79, 83], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "vae_loss", "(", "self", ",", "X", ",", "Xp", ",", "mu", ",", "log_sigma", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "reconstruct_loss", "=", "0.5", "*", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "X", "-", "Xp", ",", "2", ")", ",", "1", ")", "\n", "KL_divergence", "=", "0.5", "*", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "log_sigma", ")", "+", "torch", ".", "pow", "(", "mu", ",", "2", ")", "-", "1", "-", "log_sigma", ",", "1", ")", "\n", "return", "torch", ".", "mean", "(", "reconstruct_loss", "+", "beta", "*", "KL_divergence", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dataloader.DDALoader.__init__": [[7, 31], ["torch.utils.data.DataLoader", "len", "cyclegan.base_dataset.get_transform", "data_list.ExpertImageList", "data_list.ImageList", "open().readlines", "open().readlines", "open", "open"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_transform"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dset_file", ",", "batch_size", ",", "noflip", "=", "False", ",", "return_path", "=", "False", ",", "drop_last", "=", "True", ",", "transform", "=", "None", ",", "\n", "return_cdm", "=", "False", ",", "cdm_path", "=", "\"\"", ",", "cdm_transform", "=", "None", ",", "dset", "=", "None", ",", "center", "=", "False", ")", ":", "\n", "        ", "if", "return_cdm", ":", "\n", "            ", "assert", "cdm_path", "!=", "\"\"", "\n", "", "self", ".", "opt", "=", "opt", "\n", "if", "transform", "is", "None", "and", "dset", "is", "None", ":", "\n", "            ", "transform", "=", "get_transform", "(", "self", ".", "opt", ",", "grayscale", "=", "False", ",", "noflip", "=", "noflip", ",", "center", "=", "center", ")", "\n", "", "if", "dset", "is", "None", ":", "\n", "            ", "if", "opt", ".", "all_experts", "and", "return_cdm", ":", "\n", "                ", "self", ".", "dset", "=", "ExpertImageList", "(", "open", "(", "dset_file", ")", ".", "readlines", "(", ")", ",", "transform", "=", "transform", ",", "return_path", "=", "return_path", ",", "\n", "n_experts", "=", "opt", ".", "n_experts", ",", "cdm_path", "=", "cdm_path", ",", "cdm_transform", "=", "cdm_transform", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "dset", "=", "ImageList", "(", "open", "(", "dset_file", ")", ".", "readlines", "(", ")", ",", "transform", "=", "transform", ",", "return_path", "=", "return_path", ",", "\n", "return_cdm", "=", "return_cdm", ",", "cdm_path", "=", "cdm_path", ",", "cdm_transform", "=", "cdm_transform", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "dset", "=", "dset", "\n", "", "if", "opt", ".", "debug", ":", "\n", "            ", "num_workers", "=", "0", "\n", "", "else", ":", "\n", "            ", "num_workers", "=", "4", "\n", "", "self", ".", "loader", "=", "DataLoader", "(", "self", ".", "dset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "drop_last", "=", "drop_last", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "loader", ")", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dataloader.DDALoader.next": [[32, 37], ["dataloader.DDALoader.iterator.next", "iter"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dataloader.DDALoader.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "idx", "%", "self", ".", "length", "==", "0", ":", "\n", "            ", "self", ".", "iterator", "=", "iter", "(", "self", ".", "loader", ")", "\n", "", "self", ".", "idx", "+=", "1", "\n", "return", "self", ".", "iterator", ".", "next", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.init_weights": [[8, 41], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.init_net": [[42, 60], ["len", "torch.cuda.is_available", "torch.nn.DataParallel.to", "util.init_weights", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'kaiming'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "parallel", "=", "True", ",", "init_weight", "=", "True", ")", ":", "\n", "    ", "\"\"\"Initialize a network: 1. register CPU/GPU device (with multi-GPU support); 2. initialize the network weights\n    Parameters:\n        net (network)      -- the network to be initialized\n        init_type (str)    -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        gain (float)       -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Return an initialized network.\n    \"\"\"", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "if", "parallel", ":", "\n", "            ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "# multi-GPUs", "\n", "", "", "if", "init_weight", ":", "\n", "        ", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_cdm_path": [[61, 68], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_cdm_path", "(", "cdm_root", ",", "exp_name", ",", "dataset_name", ",", "self_name", ",", "other_domain_name", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "if", "visualize", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "cdm_root", ",", "\"visualize\"", ",", "exp_name", ",", "dataset_name", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "cdm_root", ",", "exp_name", ",", "dataset_name", ")", "\n", "", "cdm_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"%s2%s\"", "%", "(", "self_name", ",", "other_domain_name", ")", ")", "\n", "return", "cdm_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_cdm_file_name": [[69, 72], ["path.split"], "function", ["None"], ["", "def", "get_cdm_file_name", "(", "path", ")", ":", "\n", "    ", "class_name", ",", "img_name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "return", "\"%s_%s.png\"", "%", "(", "class_name", ",", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.get_expert_cdm_file_name": [[73, 76], ["path.split"], "function", ["None"], ["", "def", "get_expert_cdm_file_name", "(", "path", ",", "expert_idx", ")", ":", "\n", "    ", "class_name", ",", "img_name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "return", "\"%s_%s_%d.png\"", "%", "(", "class_name", ",", "img_name", ",", "expert_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.scale_to_tensor": [[77, 81], ["tensor.min", "tensor.max", "tensor.min"], "function", ["None"], ["", "def", "scale_to_tensor", "(", "tensor", ")", ":", "\n", "# scale to 0->1", "\n", "    ", "tensor", "=", "(", "tensor", "-", "tensor", ".", "min", "(", ")", ")", "/", "(", "tensor", ".", "max", "(", ")", "-", "tensor", ".", "min", "(", ")", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.util.setup_seed": [[82, 88], ["torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.__init__": [[12, 97], ["os.path.join", "dda_model.backbone.ResNet", "torch.Dropout", "torch.Dropout", "dda_model.DDAModel.init_networks", "dda_model.DDAModel.init_schedulers", "torch.MSELoss", "torch.MSELoss", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "dda_model.vae.VAE", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "dda_model.DDAModel.create_discriminator", "dda_model.DDAModel.create_discriminator", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "dda_model.DDAModel.linear_y.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "dda_model.DDAModel.optimizer_names.append", "dda_model.loss.NMTCritierion", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "dda_model.DDAModel.create_discriminator", "dda_model.DDAModel.create_discriminator", "dda_model.DDAModel.backbone.parameters", "dda_model.DDAModel.vae.parameters", "list", "list", "list", "list", "list", "list", "dda_model.DDAModel.backbone.parameters", "dda_model.DDAModel.linear_y.parameters", "dda_model.DDAModel.linear_tilde_x.parameters", "dda_model.DDAModel.t2s_linear_y.parameters", "dda_model.DDAModel.s2t_linear_y.parameters", "dda_model.DDAModel.t2s_linear_y.parameters", "dda_model.DDAModel.s2t_linear_y.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.init_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.init_schedulers", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.create_discriminator", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.create_discriminator", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.create_discriminator", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.create_discriminator", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "# get device name: CPU ", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dda_checkpoints_dir", ",", "opt", ".", "dda_exp_name", ")", "# save all the checkpoints to save_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "\n", "# Networks", "\n", "", "if", "opt", ".", "freeze_layer1", ":", "\n", "            ", "frozen", "=", "[", "\"layer1\"", "]", "\n", "", "else", ":", "\n", "            ", "frozen", "=", "[", "]", "\n", "", "self", ".", "backbone", "=", "ResNet", "(", "opt", ".", "resnet_name", ",", "use_max_pool", "=", "opt", ".", "use_maxpool", ",", "frozen", "=", "frozen", ")", "\n", "self", ".", "x_dim", "=", "self", ".", "backbone", ".", "n_features", "\n", "self", ".", "z_dim", "=", "opt", ".", "z_dim", "\n", "self", ".", "num_classes", "=", "opt", ".", "num_classes", "\n", "if", "not", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "vae", "=", "VAE", "(", "self", ".", "x_dim", ",", "self", ".", "z_dim", ")", "\n", "self", ".", "linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", "+", "self", ".", "z_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "linear_tilde_x", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", "+", "self", ".", "z_dim", ",", "self", ".", "x_dim", ")", "\n", "self", ".", "model_names", "=", "[", "'vae'", ",", "'backbone'", ",", "'linear_y'", ",", "'linear_tilde_x'", "]", "\n", "self", ".", "loss_names", "=", "[", "\"vae\"", ",", "\"linear\"", ",", "\"causal\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", "=", "[", "'backbone'", ",", "'linear_y'", "]", "\n", "self", ".", "loss_names", "=", "[", "'y'", "]", "\n", "\n", "", "self", ".", "discriminator_params", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "align_feature", ":", "\n", "            ", "self", ".", "create_discriminator", "(", "\"f_s2t\"", ",", "self", ".", "x_dim", ",", "self", ".", "opt", ".", "discriminator_hidden_dim", ")", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                ", "self", ".", "create_discriminator", "(", "\"f_t2s\"", ",", "self", ".", "x_dim", ",", "self", ".", "opt", ".", "discriminator_hidden_dim", ")", "\n", "", "", "if", "self", ".", "opt", ".", "align_logits", ":", "\n", "            ", "self", ".", "create_discriminator", "(", "\"l_s2t\"", ",", "self", ".", "num_classes", ",", "self", ".", "opt", ".", "discriminator_hidden_dim", ")", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                ", "self", ".", "create_discriminator", "(", "\"l_t2s\"", ",", "self", ".", "num_classes", ",", "self", ".", "opt", ".", "discriminator_hidden_dim", ")", "\n", "", "", "self", ".", "do_alignment", "=", "(", "len", "(", "self", ".", "discriminator_params", ")", ">", "0", ")", "\n", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "            ", "self", ".", "t2s_linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", "+=", "[", "\"t2s_linear_y\"", "]", "\n", "self", ".", "loss_names", "+=", "[", "\"linear_t2s\"", "]", "\n", "\n", "", "if", "self", ".", "opt", ".", "use_linear_logits", ":", "\n", "            ", "self", ".", "s2t_linear_y", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", "+=", "[", "\"s2t_linear_y\"", "]", "\n", "self", ".", "loss_names", "+=", "[", "\"linear_s2t\"", "]", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "init_networks", "(", ")", "\n", "# Optimizers", "\n", "if", "not", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "backbone_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "backbone_lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.001", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "vae_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "vae", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "vae_lr", ",", "weight_decay", "=", "0.001", ")", "\n", "linear_params", "=", "list", "(", "self", ".", "linear_y", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "linear_tilde_x", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                ", "linear_params", "+=", "list", "(", "self", ".", "t2s_linear_y", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "use_linear_logits", ":", "\n", "                ", "linear_params", "+=", "list", "(", "self", ".", "s2t_linear_y", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "linear_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_params", ",", "lr", "=", "opt", ".", "linear_lr", ",", "momentum", "=", "opt", ".", "linear_momentum", ",", "\n", "weight_decay", "=", "opt", ".", "linear_weight_decay", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_names", "=", "[", "\"backbone\"", ",", "\"vae\"", ",", "\"linear\"", "]", "\n", "", "else", ":", "\n", "            ", "linear_params", "=", "self", ".", "linear_y", ".", "parameters", "(", ")", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                ", "linear_params", "+=", "list", "(", "self", ".", "t2s_linear_y", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "use_linear_logits", ":", "\n", "                ", "linear_params", "+=", "list", "(", "self", ".", "s2t_linear_y", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "linear_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_params", ",", "lr", "=", "opt", ".", "linear_lr", ",", "\n", "momentum", "=", "opt", ".", "linear_momentum", ",", "weight_decay", "=", "opt", ".", "linear_weight_decay", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "backbone_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "backbone_lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.001", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_names", "=", "[", "\"backbone\"", ",", "\"linear\"", "]", "\n", "", "if", "self", ".", "do_alignment", ":", "\n", "            ", "self", ".", "discriminator_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "discriminator_params", ",", "\n", "lr", "=", "opt", ".", "discriminator_lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.001", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_names", ".", "append", "(", "\"discriminator\"", ")", "\n", "", "self", ".", "init_schedulers", "(", ")", "\n", "# Losses", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "if", "self", ".", "opt", ".", "label_smoothing", ":", "\n", "            ", "self", ".", "ce", "=", "NMTCritierion", "(", "0.1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.create_discriminator": [[98, 110], ["network.AdversarialNetwork", "torch.Linear", "torch.Linear", "setattr", "setattr", "dda_model.DDAModel.model_names.append", "dda_model.DDAModel.model_names.append", "dda_model.DDAModel.loss_names.append", "dda_model.DDAModel.loss_names.append", "dda_model.DDAModel.loss_names.append", "list", "list", "network.AdversarialNetwork.parameters", "torch.Linear.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "create_discriminator", "(", "self", ",", "name", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "discriminator", "=", "AdversarialNetwork", "(", "input_dim", ",", "hidden_dim", ")", "\n", "gvbg", "=", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "setattr", "(", "self", ",", "name", "+", "\"_discriminator\"", ",", "discriminator", ")", "\n", "setattr", "(", "self", ",", "name", "+", "\"_gvbg\"", ",", "gvbg", ")", "\n", "self", ".", "model_names", ".", "append", "(", "name", "+", "\"_discriminator\"", ")", "\n", "self", ".", "model_names", ".", "append", "(", "name", "+", "\"_gvbg\"", ")", "\n", "self", ".", "loss_names", ".", "append", "(", "\"%s_transfer\"", "%", "(", "name", ")", ")", "\n", "self", ".", "loss_names", ".", "append", "(", "\"%s_gvbg\"", "%", "(", "name", ")", ")", "\n", "self", ".", "loss_names", ".", "append", "(", "\"%s_gvbd\"", "%", "(", "name", ")", ")", "\n", "self", ".", "discriminator_params", "+=", "list", "(", "discriminator", ".", "parameters", "(", ")", ")", "\n", "self", ".", "discriminator_params", "+=", "list", "(", "gvbg", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss": [[111, 133], ["getattr", "getattr", "dda_model.loss.calc_coeff", "getattr.", "dda_model.loss.get_alignment_loss", "setattr", "setattr", "setattr", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.calc_coeff", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss"], ["", "def", "get_alignment_loss", "(", "self", ",", "name", ",", "logits", ",", "x", ",", "align_logits", ")", ":", "\n", "        ", "discriminator", "=", "getattr", "(", "self", ",", "name", "+", "\"_discriminator\"", ")", "\n", "gvbg", "=", "getattr", "(", "self", ",", "name", "+", "\"_gvbg\"", ")", "\n", "coeff", "=", "calc_coeff", "(", "self", ".", "iteration", ")", "\n", "bridge", "=", "gvbg", "(", "x", ")", "\n", "if", "self", ".", "opt", ".", "gvbg_weight", ">", "0", "and", "align_logits", ":", "\n", "            ", "logits", "=", "logits", "-", "bridge", "\n", "", "softmax_logits", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "logits", ")", "\n", "if", "align_logits", ":", "\n", "            ", "dis_input", "=", "softmax_logits", "\n", "", "else", ":", "\n", "            ", "dis_input", "=", "x", "\n", "", "loss_transfer", ",", "mean_entropy", ",", "loss_gvbd", ",", "loss_gvbg", "=", "get_alignment_loss", "(", "dis_input", ",", "bridge", ",", "discriminator", ",", "coeff", ",", "GVBD", "=", "self", ".", "opt", ".", "gvbd_weight", ",", "softmax_logits", "=", "softmax_logits", ",", "use_logits", "=", "align_logits", ",", "no_entropy", "=", "self", ".", "opt", ".", "no_entropy_weight", ")", "\n", "alignment_loss", "=", "self", ".", "opt", ".", "alignment_weight", "*", "loss_transfer", "+", "self", ".", "opt", ".", "gvbd_weight", "*", "loss_gvbd", "+", "self", ".", "opt", ".", "gvbg_weight", "*", "loss_gvbg", "\n", "setattr", "(", "self", ",", "\"loss_%s_transfer\"", "%", "(", "name", ")", ",", "loss_transfer", ")", "\n", "setattr", "(", "self", ",", "\"loss_%s_gvbg\"", "%", "(", "name", ")", ",", "loss_gvbg", ")", "\n", "setattr", "(", "self", ",", "\"loss_%s_gvbd\"", "%", "(", "name", ")", ",", "loss_gvbd", ")", "\n", "return", "alignment_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.init_schedulers": [[134, 140], ["getattr", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "setattr"], "methods", ["None"], ["", "def", "init_schedulers", "(", "self", ")", ":", "\n", "        ", "lambda_lr", "=", "lambda", "iter", ":", "(", "1", "+", "0.001", "*", "iter", ")", "**", "(", "-", "0.75", ")", "\n", "for", "name", "in", "self", ".", "optimizer_names", ":", "\n", "            ", "optimizer", "=", "getattr", "(", "self", ",", "name", "+", "\"_opt\"", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_lr", ")", "\n", "setattr", "(", "self", ",", "name", "+", "\"_scheduler\"", ",", "scheduler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.step_schedulers": [[141, 145], ["getattr", "getattr.step"], "methods", ["None"], ["", "", "def", "step_schedulers", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "optimizer_names", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "self", ",", "name", "+", "\"_scheduler\"", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.init_networks": [[146, 153], ["isinstance", "dda_model.util.init_net", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["", "", "def", "init_networks", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "parallel", "=", "(", "name", "==", "\"backbone\"", ")", "\n", "init_weight", "=", "(", "name", "!=", "\"backbone\"", ")", "\n", "net", "=", "init_net", "(", "getattr", "(", "self", ",", "name", ")", ",", "self", ".", "opt", ".", "dda_init_type", ",", "self", ".", "opt", ".", "dda_init_gain", ",", "self", ".", "gpu_ids", ",", "parallel", ",", "init_weight", ")", "\n", "setattr", "(", "self", ",", "name", ",", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.train_mode": [[154, 158], ["getattr().train", "getattr"], "methods", ["None"], ["", "", "", "def", "train_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "=", "True", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "getattr", "(", "self", ",", "name", ")", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.test_mode": [[159, 167], ["getattr().eval", "getattr().eval", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.eval"], ["", "", "def", "test_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "=", "False", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "name", "==", "\"backbone\"", ":", "\n", "                ", "if", "not", "self", ".", "opt", ".", "backbone_train_mode", ":", "\n", "                    ", "getattr", "(", "self", ",", "name", ")", ".", "eval", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "getattr", "(", "self", ",", "name", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.set_input": [[168, 186], ["target_imgs.to", "t2s_mappings.to", "source_imgs.to", "source_labels.to", "s2t_mappings.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "source_imgs", ",", "source_labels", ",", "s2t_mappings", ",", "target_imgs", ",", "t2s_mappings", ")", ":", "\n", "        ", "if", "source_imgs", "is", "not", "None", ":", "\n", "# During testing, there may be no source images", "\n", "            ", "self", ".", "source_imgs", "=", "source_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_imgs", "=", "None", "\n", "", "if", "source_labels", "is", "not", "None", ":", "\n", "# During testing, there may be no source labels", "\n", "            ", "self", ".", "source_labels", "=", "source_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_labels", "=", "None", "\n", "", "if", "s2t_mappings", "is", "not", "None", ":", "\n", "# During testing, there may be no source cross-domain mappings", "\n", "            ", "self", ".", "s2t_mappings", "=", "s2t_mappings", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "s2t_mappings", "=", "None", "\n", "", "self", ".", "target_imgs", "=", "target_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "t2s_mappings", "=", "t2s_mappings", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_logits": [[187, 203], ["dda_model.DDAModel.linear_y", "dda_model.DDAModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_model.DDAModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x_t.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "get_logits", "(", "self", ",", "x_t", ",", "mu_x_t2s", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "logits", "=", "self", ".", "linear_y", "(", "x_t", ")", "\n", "", "else", ":", "\n", "            ", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "\n", "bs", "=", "x_t", ".", "shape", "[", "0", "]", "\n", "logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu_x_t2s", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu": [[204, 221], ["x.mean().unsqueeze", "x.mean", "hasattr", "x.mean().unsqueeze.detach", "dda_model.DDAModel.run_avg_mu.detach", "dda_model.DDAModel.run_avg_mu.detach"], "methods", ["None"], ["", "def", "get_running_mu", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "mu", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "not", "self", ".", "opt", ".", "accurate_mu", ":", "\n", "            ", "return", "mu", "\n", "", "else", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"run_avg_mu\"", ")", ":", "\n", "                ", "if", "update", ":", "\n", "                    ", "self", ".", "run_avg_mu", "=", "mu", "\n", "return", "mu", "\n", "", "else", ":", "\n", "                    ", "return", "mu", ".", "detach", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "update", ":", "\n", "                    ", "self", ".", "run_avg_mu", "=", "(", "1.0", "/", "25.0", ")", "*", "mu", "+", "(", "24.0", "/", "25.0", ")", "*", "self", ".", "run_avg_mu", ".", "detach", "(", ")", "\n", "return", "self", ".", "run_avg_mu", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "run_avg_mu", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_t2s_mu": [[222, 232], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "float", "test_loader.next", "dda_model.DDAModel.set_input", "dda_model.DDAModel.backbone", "dda_model.DDAModel.mean().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dda_model.DDAModel.mean"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dataloader.DDALoader.next", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input"], ["", "", "", "", "def", "get_t2s_mu", "(", "self", ",", "test_loader", ")", ":", "\n", "        ", "n", "=", "test_loader", ".", "length", "\n", "mu", "=", "torch", ".", "zeros", "(", "self", ".", "x_dim", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "inputs", ",", "labels", ",", "test_t2s", "=", "test_loader", ".", "next", "(", ")", "\n", "self", ".", "set_input", "(", "None", ",", "None", ",", "None", ",", "inputs", ",", "test_t2s", ")", "\n", "x_t2s", "=", "self", ".", "backbone", "(", "self", ".", "t2s_mappings", ")", "\n", "mu", "+=", "x_t2s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "mu", "/=", "float", "(", "n", ")", "\n", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.optimize": [[233, 377], ["dda_model.DDAModel.backbone", "dda_model.DDAModel.backbone", "dda_model.DDAModel.backbone", "dda_model.DDAModel.backbone", "dda_model.DDAModel.mean().unsqueeze", "dda_model.DDAModel.mean().unsqueeze", "dda_model.DDAModel.step_schedulers", "dda_model.DDAModel.linear_opt.zero_grad", "dda_model.DDAModel.backbone_opt.zero_grad", "dda_model.DDAModel.backbone_opt.zero_grad", "dda_model.DDAModel.vae_opt.zero_grad", "dda_model.DDAModel.linear_opt.zero_grad", "dda_model.DDAModel.discriminator_opt.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "float", "alignment_loss.backward", "dda_model.DDAModel.discriminator_opt.step", "dda_model.DDAModel.t2s_linear_y", "dda_model.DDAModel.ce", "dda_model.DDAModel.backward", "dda_model.DDAModel.s2t_linear_y", "dda_model.DDAModel.ce", "dda_model.DDAModel.backward", "dda_model.DDAModel.linear_y", "dda_model.DDAModel.ce", "dda_model.DDAModel.loss_y.backward", "dda_model.DDAModel.linear_opt.step", "dda_model.DDAModel.backbone_opt.step", "torch.max", "torch.max", "torch.max", "torch.max", "dda_model.DDAModel.vae", "dda_model.DDAModel.vae", "dda_model.DDAModel.loss_vae.backward", "dda_model.DDAModel.vae_opt.step", "dda_model.DDAModel.linear_y", "dda_model.DDAModel.linear_tilde_x", "dda_model.DDAModel.loss_linear.backward", "dda_model.DDAModel.linear_opt.step", "dda_model.DDAModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_model.DDAModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_model.DDAModel.ce", "torch.max", "torch.max", "torch.max", "torch.max", "dda_model.DDAModel.mean", "dda_model.DDAModel.mean", "dda_model.DDAModel.get_logits", "dda_model.DDAModel.get_logits", "dda_model.DDAModel.s2t_linear_y", "dda_model.DDAModel.s2t_linear_y", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_model.DDAModel.t2s_linear_y", "dda_model.DDAModel.t2s_linear_y", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_model.DDAModel.get_alignment_loss", "dda_model.DDAModel.get_alignment_loss", "x_s2t.detach.detach.detach", "x_s2t.detach.detach.detach", "dda_model.DDAModel.detach", "dda_model.DDAModel.vae.vae_loss", "dda_model.DDAModel.vae.vae_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dda_model.DDAModel.dropout", "dda_model.DDAModel.ce", "dda_model.DDAModel.mse", "dda_model.DDAModel.get_running_mu", "dda_model.DDAModel.get_running_mu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "dda_model.DDAModel.loss_causal.backward", "dda_model.DDAModel.backbone_opt.step", "dda_model.DDAModel.get_alignment_loss", "dda_model.DDAModel.get_alignment_loss", "x_s2t.detach.detach.detach", "dda_model.DDAModel.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tildeX_target.detach", "z_s2t.detach", "z_s2t.detach", "x_s2t.detach.detach.detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "z_t.detach", "z_t.detach", "dda_model.DDAModel.detach", "x_s2t.detach.detach.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.step_schedulers", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_logits", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_logits", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.vae_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.vae.VAE.vae_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_running_mu", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "self", ".", "linear_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "backbone_opt", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "vae_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "linear_opt", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "do_alignment", ":", "\n", "            ", "self", ".", "discriminator_opt", ".", "zero_grad", "(", ")", "\n", "# find features", "\n", "", "x_s", "=", "self", ".", "backbone", "(", "self", ".", "source_imgs", ")", "\n", "x_t", "=", "self", ".", "backbone", "(", "self", ".", "target_imgs", ")", "\n", "x_s2t", "=", "self", ".", "backbone", "(", "self", ".", "s2t_mappings", ")", "\n", "x_t2s", "=", "self", ".", "backbone", "(", "self", ".", "t2s_mappings", ")", "\n", "if", "self", ".", "opt", ".", "no_mapping", ":", "\n", "            ", "x_s2t", "=", "x_s", "\n", "\n", "", "mu_xs", "=", "x_s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mu_xt2s", "=", "x_t2s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# feature alignment", "\n", "if", "self", ".", "do_alignment", ":", "\n", "            ", "alignment_loss", "=", "0", "\n", "\n", "# s2t and t", "\n", "x_a", "=", "torch", ".", "cat", "(", "(", "x_s2t", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "if", "not", "self", ".", "opt", ".", "use_linear_logits", ":", "\n", "                ", "s_logits_a", "=", "self", ".", "get_logits", "(", "x_s2t", ",", "mu_xs", ")", "\n", "t_logits_a", "=", "self", ".", "get_logits", "(", "x_t", ",", "mu_xt2s", ")", "\n", "", "else", ":", "\n", "                ", "s_logits_a", "=", "self", ".", "s2t_linear_y", "(", "x_s2t", ")", "\n", "t_logits_a", "=", "self", ".", "s2t_linear_y", "(", "x_t", ")", "\n", "", "l_a", "=", "torch", ".", "cat", "(", "(", "s_logits_a", ",", "t_logits_a", ")", ",", "dim", "=", "0", ")", "\n", "# t2s and s", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                ", "x_b", "=", "torch", ".", "cat", "(", "(", "x_t2s", ",", "x_s", ")", ",", "dim", "=", "0", ")", "\n", "s_logits_b", "=", "self", ".", "t2s_linear_y", "(", "x_s", ")", "\n", "t_logits_b", "=", "self", ".", "t2s_linear_y", "(", "x_t2s", ")", "\n", "l_b", "=", "torch", ".", "cat", "(", "(", "t_logits_b", ",", "s_logits_b", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "na", "=", "0", "\n", "if", "self", ".", "opt", ".", "align_feature", ":", "\n", "                ", "alignment_loss", "+=", "self", ".", "get_alignment_loss", "(", "\"f_s2t\"", ",", "l_a", ",", "x_a", ",", "align_logits", "=", "False", ")", "\n", "na", "+=", "1", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                    ", "alignment_loss", "+=", "self", ".", "get_alignment_loss", "(", "\"f_t2s\"", ",", "l_b", ",", "x_b", ",", "align_logits", "=", "False", ")", "\n", "na", "+=", "1", "\n", "", "", "if", "self", ".", "opt", ".", "align_logits", ":", "\n", "                ", "alignment_loss", "+=", "self", ".", "get_alignment_loss", "(", "\"l_s2t\"", ",", "l_a", ",", "x_a", ",", "align_logits", "=", "True", ")", "\n", "na", "+=", "1", "\n", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "                    ", "alignment_loss", "+=", "self", ".", "get_alignment_loss", "(", "\"l_t2s\"", ",", "l_b", ",", "x_b", ",", "align_logits", "=", "True", ")", "\n", "na", "+=", "1", "\n", "", "", "alignment_loss", "/=", "float", "(", "na", ")", "\n", "alignment_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "discriminator_opt", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "align_t2s", ":", "\n", "            ", "s_logits", "=", "self", ".", "t2s_linear_y", "(", "x_s", ")", "\n", "loss_y_s", "=", "self", ".", "ce", "(", "s_logits", ",", "self", ".", "source_labels", ")", "\n", "self", ".", "loss_linear_t2s", "=", "loss_y_s", "\n", "loss_y_s", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "use_linear_logits", ":", "\n", "            ", "s_logits", "=", "self", ".", "s2t_linear_y", "(", "x_s2t", ")", "\n", "loss_y_s", "=", "self", ".", "ce", "(", "s_logits", ",", "self", ".", "source_labels", ")", "\n", "self", ".", "loss_linear_s2t", "=", "loss_y_s", "\n", "loss_y_s", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "update_backbone", ":", "\n", "                ", "x_s2t", "=", "x_s2t", ".", "detach", "(", ")", "\n", "", "y_logits", "=", "self", ".", "linear_y", "(", "x_s2t", ")", "\n", "self", ".", "loss_y", "=", "self", ".", "ce", "(", "y_logits", ",", "self", ".", "source_labels", ")", "\n", "self", ".", "loss_y", ".", "backward", "(", ")", "\n", "self", ".", "linear_opt", ".", "step", "(", ")", "\n", "self", ".", "backbone_opt", ".", "step", "(", ")", "\n", "_", ",", "prediction", "=", "torch", ".", "max", "(", "y_logits", ",", "1", ")", "\n", "accuracy", "=", "(", "prediction", "==", "self", ".", "source_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "# find Z", "\n", "            ", "xp_s2t", ",", "mu_s2t", ",", "log_sigma_s2t", ",", "z_s2t", "=", "self", ".", "vae", "(", "x_s2t", ".", "detach", "(", ")", ")", "\n", "xp_t", ",", "mu_t", ",", "log_sigma_t", ",", "z_t", "=", "self", ".", "vae", "(", "x_t", ".", "detach", "(", ")", ")", "\n", "beta", "=", "self", ".", "opt", ".", "beta_vae", "\n", "self", ".", "loss_vae", "=", "self", ".", "vae", ".", "vae_loss", "(", "x_s2t", ".", "detach", "(", ")", ",", "xp_s2t", ",", "mu_s2t", ",", "log_sigma_s2t", ",", "beta", "=", "beta", ")", "+", "self", ".", "vae", ".", "vae_loss", "(", "x_t", ".", "detach", "(", ")", ",", "xp_t", ",", "mu_t", ",", "log_sigma_t", ",", "beta", "=", "beta", ")", "\n", "\n", "# self.loss_vae = self.vae.vae_loss(x_t.detach(), xp_t, mu_t, log_sigma_t)", "\n", "self", ".", "loss_vae", ".", "backward", "(", ")", "\n", "self", ".", "vae_opt", ".", "step", "(", ")", "\n", "\n", "# learn linear models", "\n", "if", "self", ".", "opt", ".", "backward_linear_loss", ":", "\n", "                ", "inputs", "=", "torch", ".", "cat", "(", "(", "z_s2t", ".", "detach", "(", ")", ",", "x_s2t", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                    ", "tildeX_inputs", "=", "torch", ".", "cat", "(", "(", "z_t", ".", "detach", "(", ")", ",", "x_t", ")", ",", "dim", "=", "1", ")", "\n", "tildeX_target", "=", "x_t2s", "\n", "", "else", ":", "\n", "                    ", "tildeX_inputs", "=", "inputs", "\n", "tildeX_target", "=", "x_s", "\n", "", "", "else", ":", "\n", "                ", "inputs", "=", "torch", ".", "cat", "(", "(", "z_s2t", ".", "detach", "(", ")", ",", "x_s2t", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                    ", "tildeX_inputs", "=", "torch", ".", "cat", "(", "(", "z_t", ".", "detach", "(", ")", ",", "x_t", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "tildeX_target", "=", "x_t2s", "\n", "", "else", ":", "\n", "                    ", "tildeX_inputs", "=", "inputs", "\n", "tildeX_target", "=", "x_s", "\n", "", "", "y_linear_preds", "=", "self", ".", "linear_y", "(", "inputs", ")", "\n", "if", "self", ".", "opt", ".", "use_dropout", ":", "\n", "                ", "tildeX_inputs", "=", "self", ".", "dropout", "(", "tildeX_inputs", ")", "\n", "", "x_tilde_preds", "=", "self", ".", "linear_tilde_x", "(", "tildeX_inputs", ")", "\n", "self", ".", "loss_linear", "=", "self", ".", "ce", "(", "y_linear_preds", ",", "self", ".", "source_labels", ")", "+", "self", ".", "mse", "(", "x_tilde_preds", ",", "tildeX_target", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_linear", ".", "backward", "(", "retain_graph", "=", "self", ".", "opt", ".", "backward_linear_loss", ")", "\n", "self", ".", "linear_opt", ".", "step", "(", ")", "\n", "\n", "# compute causal effects", "\n", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "opt", ".", "use_target_estimate", ":", "\n", "                ", "mu", "=", "self", ".", "get_running_mu", "(", "x_t2s", ")", "\n", "", "else", ":", "\n", "                ", "mu", "=", "self", ".", "get_running_mu", "(", "x_s", ")", "\n", "\n", "", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "# nc * x_dim", "\n", "bs", "=", "x_s2t", ".", "shape", "[", "0", "]", "\n", "y_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_s2t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "self", ".", "loss_causal", "=", "self", ".", "ce", "(", "y_logits", ",", "self", ".", "source_labels", ")", "\n", "if", "self", ".", "iteration", ">=", "self", ".", "opt", ".", "pretrain_iteration", ":", "\n", "                ", "self", ".", "loss_causal", ".", "backward", "(", ")", "\n", "self", ".", "backbone_opt", ".", "step", "(", ")", "\n", "", "_", ",", "prediction", "=", "torch", ".", "max", "(", "y_logits", ",", "1", ")", "\n", "accuracy", "=", "(", "prediction", "==", "self", ".", "source_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "self", ".", "step_schedulers", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.predict": [[378, 402], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dda_model.DDAModel.backbone", "dda_model.DDAModel.backbone", "dda_model.DDAModel.linear_y", "dda_model.DDAModel.linear_y.bias.data.unsqueeze", "torch.pinverse", "torch.pinverse", "torch.pinverse", "torch.pinverse", "dda_model.DDAModel.linear_tilde_x.bias.data.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_model.DDAModel.mean().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().t", "torch.mm().t", "torch.mm().t", "torch.mm().t", "dda_model.DDAModel.mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "dda_model.DDAModel.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_t", "=", "self", ".", "backbone", "(", "self", ".", "target_imgs", ")", "\n", "x_t2s", "=", "self", ".", "backbone", "(", "self", ".", "t2s_mappings", ")", "\n", "if", "self", ".", "opt", ".", "baseline", ":", "\n", "                ", "y_logits", "=", "self", ".", "linear_y", "(", "x_t", ")", "\n", "", "else", ":", "\n", "                ", "b0", "=", "self", ".", "linear_y", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w2", "=", "self", ".", "linear_y", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "w3", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "w3i", "=", "torch", ".", "pinverse", "(", "w3", ")", "# (A.T.dot(A)).inv() or (A.dot(A.T)).inv() for numerical stability", "\n", "w4", "=", "self", ".", "linear_tilde_x", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "b1", "=", "self", ".", "linear_tilde_x", ".", "bias", ".", "data", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "opt", ".", "accurate_mu", ":", "\n", "                    ", "mu", "=", "self", ".", "target_mu", "\n", "", "else", ":", "\n", "                    ", "mu", "=", "x_t2s", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "w1w3i", "=", "torch", ".", "mm", "(", "w1", ",", "w3i", ")", "\n", "w2w1w3w4", "=", "w2", "-", "torch", ".", "mm", "(", "w1w3i", ",", "w4", ")", "\n", "bs", "=", "x_t", ".", "shape", "[", "0", "]", "\n", "y_logits", "=", "(", "b0", "-", "torch", ".", "mm", "(", "w1w3i", ",", "b1", ")", "+", "torch", ".", "mm", "(", "w1w3i", ",", "mu", ")", ")", ".", "expand", "(", "-", "1", ",", "bs", ")", ".", "t", "(", ")", "+", "torch", ".", "mm", "(", "w2w1w3w4", ",", "x_t", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "", "", "return", "y_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_current_losses": [[403, 410], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.load_networks": [[411, 428], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "torch.load", "torch.load", "torch.load", "hasattr", "getattr.load_state_dict", "str"], "methods", ["None"], ["", "def", "load_networks", "(", "self", ",", "load_suffix", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "load_suffix", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.save_networks": [[429, 444], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "getattr.cuda", "torch.save", "torch.save", "torch.save", "torch.save", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "getattr.cpu().state_dict", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.cpu", "getattr.module.cpu", "getattr.cpu"], "methods", ["None"], ["", "", "", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "if", "name", "==", "\"backbone\"", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.setup": [[445, 450], ["dda_model.DDAModel.print_networks", "dda_model.DDAModel.load_networks"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.load_networks"], ["", "", "", "", "def", "setup", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "train", "or", "self", ".", "opt", ".", "dda_continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "self", ".", "opt", ".", "dda_load_iter", "if", "self", ".", "opt", ".", "dda_load_iter", ">", "0", "else", "self", ".", "opt", ".", "dda_epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "self", ".", "opt", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.print_networks": [[451, 468], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapDiscriminator.__init__": [[12, 51], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", "=", "2048", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "FeatureMapDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "3", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapDiscriminator.forward": [[52, 55], ["dda_networks.FeatureMapDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.ResnetBlock.__init__": [[60, 70], ["torch.Module.__init__", "dda_networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetBlock.build_conv_block"], ["def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Initialize the Resnet block\n\n        A resnet block is a conv block with skip connections\n        We construct a conv block with build_conv_block function,\n        and implement skip connections in <forward> function.\n        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf\n        \"\"\"", "\n", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.ResnetBlock.build_conv_block": [[71, 110], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Construct a convolutional block.\n\n        Parameters:\n            dim (int)           -- the number of channels in the conv layer.\n            padding_type (str)  -- the name of padding layer: reflect | replicate | zero\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n            use_bias (bool)     -- if the conv layer uses bias or not\n\n        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))\n        \"\"\"", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.ResnetBlock.forward": [[111, 115], ["dda_networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapGenerator.__init__": [[117, 167], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "range", "range", "range", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "dda_networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "512", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "FeatureMapGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "if", "n_blocks", "==", "0", ":", "\n", "            ", "model", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "//", "2", ",", "ngf", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "else", ":", "\n", "            ", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "n_downsampling", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "                ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "int", "(", "ngf", "/", "mult", ")", ",", "int", "(", "ngf", "/", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "/", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "                ", "model", "+=", "[", "ResnetBlock", "(", "int", "(", "ngf", "/", "mult", ")", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "                ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "int", "(", "ngf", "/", "mult", ")", ",", "int", "(", "ngf", "/", "mult", "*", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "/", "mult", "*", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapGenerator.forward": [[168, 171], ["dda_networks.FeatureMapGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapGeneratorPanel.__init__": [[174, 184], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "cyclegan.networks.get_norm_layer", "range", "dda_networks.FeatureMapGenerator", "cyclegan.networks.init_net", "torch.ModuleList.append"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_norm_layer", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "ngf", ",", "norm", ",", "use_dropout", ",", "n_experts", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ",", "n_blocks", "=", "1", ")", ":", "\n", "        ", "super", "(", "FeatureMapGeneratorPanel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "net_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_experts", ")", ":", "\n", "            ", "net", "=", "FeatureMapGenerator", "(", "nc", ",", "nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "n_blocks", ")", "\n", "net", "=", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "net_list", ".", "append", "(", "net", ")", "\n", "", "self", ".", "net_list", "=", "net_list", "\n", "self", ".", "n_experts", "=", "n_experts", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapGeneratorPanel.forward": [[185, 190], ["range", "outputs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "net_list", "[", "i", "]", "(", "input", "[", "i", "]", ")", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_networks.FeatureMapGeneratorPanel.get_expert": [[191, 193], ["None"], "methods", ["None"], ["", "def", "get_expert", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "net_list", "[", "idx", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.__init__": [[9, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "backbone.ResNet.layers.append", "backbone.ResNet.layers.append"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet_name", ",", "return_feature_map", "=", "False", ",", "frozen", "=", "[", "]", ",", "use_max_pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_resnet", "=", "resnet_dict", "[", "resnet_name", "]", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "conv1", "=", "model_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "model_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "model_resnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "model_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "model_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "model_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "model_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "model_resnet", ".", "layer4", "\n", "self", ".", "avgpool", "=", "model_resnet", ".", "avgpool", "\n", "self", ".", "return_feature_map", "=", "return_feature_map", "\n", "self", ".", "frozen", "=", "frozen", "\n", "self", ".", "use_max_pool", "=", "use_max_pool", "\n", "if", "return_feature_map", ":", "\n", "            ", "self", ".", "layers", "=", "[", "\"conv1\"", ",", "\"bn1\"", ",", "\"relu\"", ",", "\"maxpool\"", ",", "\"layer1\"", ",", "\"layer2\"", ",", "\"layer3\"", ",", "\"layer4\"", "]", "\n", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "\n", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", "=", "[", "\"conv1\"", ",", "\"bn1\"", ",", "\"relu\"", ",", "\"maxpool\"", ",", "\"layer1\"", ",", "\"layer2\"", ",", "\"layer3\"", ",", "\"layer4\"", "]", "\n", "if", "self", ".", "use_max_pool", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\"maxpool\"", ")", "\n", "pool", "=", "self", ".", "maxpool", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\"avgpool\"", ")", "\n", "pool", "=", "self", ".", "avgpool", "\n", "", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "\n", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "pool", ")", "\n", "", "self", ".", "n_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.forward": [[40, 58], ["len", "backbone.ResNet.feature_layers", "x.view.view.view", "module", "x.view.view.view", "x.view.view.size", "x.view.view.detach", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gvbg", "=", "True", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "frozen", ")", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "feature_layers", "(", "x", ")", "\n", "if", "self", ".", "return_feature_map", ":", "\n", "                ", "return", "x", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "", "else", ":", "\n", "            ", "for", "name", "in", "self", ".", "layers", ":", "\n", "                ", "module", "=", "self", ".", "_modules", "[", "name", "]", "\n", "x", "=", "module", "(", "x", ")", "\n", "x", "=", "x", ".", "detach", "(", ")", "if", "name", "in", "self", ".", "frozen", "else", "x", "\n", "", "if", "self", ".", "return_feature_map", ":", "\n", "                ", "return", "x", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.pool": [[59, 64], ["backbone.ResNet.maxpool().view", "backbone.ResNet.avgpool().view", "x.size", "x.size", "backbone.ResNet.maxpool", "backbone.ResNet.avgpool"], "methods", ["None"], ["", "", "", "def", "pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_max_pool", ":", "\n", "            ", "return", "self", ".", "maxpool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "avgpool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters": [[65, 67], ["backbone.ResNet.feature_layers.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "feature_layers", ".", "parameters", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.__init__": [[9, 21], ["dda_model.backbone.ResNet", "cycle_gan_discriminator.CycleGANDiscriminator.create_discriminators", "cycle_gan_discriminator.CycleGANDiscriminator.init_networks", "cycle_gan_discriminator.CycleGANDiscriminator.create_optimizer", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.create_discriminators", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.init_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.create_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "backbone", "=", "ResNet", "(", "opt", ".", "cg_resnet_name", ")", "\n", "self", ".", "x_dim", "=", "self", ".", "backbone", ".", "n_features", "\n", "self", ".", "num_classes", "=", "self", ".", "opt", ".", "cg_num_classes", "\n", "self", ".", "model_names", "=", "[", "\"backbone\"", "]", "\n", "self", ".", "create_discriminators", "(", ")", "\n", "self", ".", "init_networks", "(", ")", "\n", "self", ".", "create_optimizer", "(", ")", "\n", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.create_discriminators": [[22, 41], ["torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "network.AdversarialNetwork", "network.AdversarialNetwork", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "network.AdversarialNetwork", "network.AdversarialNetwork", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append", "cycle_gan_discriminator.CycleGANDiscriminator.model_names.append"], "methods", ["None"], ["", "def", "create_discriminators", "(", "self", ")", ":", "\n", "        ", "self", ".", "linearA_y", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "gvbgA", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"linearA_y\"", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"gvbgA\"", ")", "\n", "self", ".", "linearB_y", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "gvbgB", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "x_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"linearB_y\"", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"gvbgB\"", ")", "\n", "if", "self", ".", "opt", ".", "cg_align_feature", ":", "\n", "            ", "self", ".", "fA_discriminator", "=", "AdversarialNetwork", "(", "self", ".", "x_dim", ",", "1024", ",", "7", ")", "\n", "self", ".", "fB_discriminator", "=", "AdversarialNetwork", "(", "self", ".", "x_dim", ",", "1024", ",", "7", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"fA_discriminator\"", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"fB_discriminator\"", ")", "\n", "", "if", "self", ".", "opt", ".", "cg_align_logits", ":", "\n", "            ", "self", ".", "lA_discriminator", "=", "AdversarialNetwork", "(", "self", ".", "num_classes", ",", "1024", ",", "700.0", "*", "200", ")", "\n", "self", ".", "lB_discriminator", "=", "AdversarialNetwork", "(", "self", ".", "num_classes", ",", "1024", ",", "700.0", "*", "200", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"lA_discriminator\"", ")", "\n", "self", ".", "model_names", ".", "append", "(", "\"lB_discriminator\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.init_networks": [[42, 52], ["cycle_gan_discriminator.CycleGANDiscriminator.backbone.parameters", "isinstance", "dda_model.util.init_net", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["", "", "def", "init_networks", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "parallel", "=", "(", "name", "==", "\"backbone\"", ")", "\n", "init_weight", "=", "(", "name", "!=", "\"backbone\"", ")", "\n", "net", "=", "init_net", "(", "getattr", "(", "self", ",", "name", ")", ",", "\"kaiming\"", ",", "0.02", ",", "self", ".", "gpu_ids", ",", "parallel", ",", "init_weight", ")", "\n", "setattr", "(", "self", ",", "name", ",", "net", ")", "\n", "# Backbone not updating", "\n", "", "", "for", "param", "in", "self", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.create_optimizer": [[53, 56], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "list", "list", "cycle_gan_discriminator.CycleGANDiscriminator.fA_discriminator.parameters", "cycle_gan_discriminator.CycleGANDiscriminator.fB_discriminator.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "", "def", "create_optimizer", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "fA_discriminator", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fB_discriminator", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "0.0001", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.001", ",", "nesterov", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.set_input": [[57, 75], ["target_imgs.to", "t2s_mappings.to", "source_imgs.to", "source_labels.to", "s2t_mappings.to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "source_imgs", ",", "source_labels", ",", "s2t_mappings", ",", "target_imgs", ",", "t2s_mappings", ")", ":", "\n", "        ", "if", "source_imgs", "is", "not", "None", ":", "\n", "# During testing, there may be no source images", "\n", "            ", "self", ".", "source_imgs", "=", "source_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_imgs", "=", "None", "\n", "", "if", "source_labels", "is", "not", "None", ":", "\n", "# During testing, there may be no source labels", "\n", "            ", "self", ".", "source_labels", "=", "source_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "source_labels", "=", "None", "\n", "", "if", "s2t_mappings", "is", "not", "None", ":", "\n", "# During testing, there may be no source cross-domain mappings", "\n", "            ", "self", ".", "s2t_mappings", "=", "s2t_mappings", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "s2t_mappings", "=", "None", "\n", "", "self", ".", "target_imgs", "=", "target_imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "t2s_mappings", "=", "t2s_mappings", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.get_alignment_inputs": [[76, 84], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "linear_net", "bridge_net", "torch.Softmax", "torch.Softmax"], "methods", ["None"], ["", "def", "get_alignment_inputs", "(", "self", ",", "x_s", ",", "x_t", ",", "linear_net", ",", "bridge_net", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "logits", "=", "linear_net", "(", "x", ")", "\n", "bridge", "=", "bridge_net", "(", "x", ")", "\n", "if", "self", ".", "opt", ".", "cg_gvbg_weight", ">", "0", ":", "\n", "            ", "logits", "=", "logits", "-", "bridge", "\n", "", "softmax_logits", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "logits", ")", "\n", "return", "x", ",", "softmax_logits", ",", "bridge", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.optimize": [[85, 124], ["cycle_gan_discriminator.CycleGANDiscriminator.optimizer.zero_grad", "cycle_gan_discriminator.CycleGANDiscriminator.backbone", "cycle_gan_discriminator.CycleGANDiscriminator.backbone", "cycle_gan_discriminator.CycleGANDiscriminator.backbone", "cycle_gan_discriminator.CycleGANDiscriminator.backbone", "cycle_gan_discriminator.CycleGANDiscriminator.get_alignment_inputs", "cycle_gan_discriminator.CycleGANDiscriminator.get_alignment_inputs", "dda_model.loss.calc_coeff", "cycle_gan_discriminator.CycleGANDiscriminator.loss.backward", "cycle_gan_discriminator.CycleGANDiscriminator.optimizer.step", "dda_model.loss.get_alignment_loss", "dda_model.loss.get_alignment_loss"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.get_alignment_inputs", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.get_alignment_inputs", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.loss.calc_coeff", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.dda_model.DDAModel.get_alignment_loss"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "x_s", "=", "self", ".", "backbone", "(", "self", ".", "source_imgs", ")", "\n", "x_t", "=", "self", ".", "backbone", "(", "self", ".", "target_imgs", ")", "\n", "x_s2t", "=", "self", ".", "backbone", "(", "self", ".", "s2t_mappings", ")", "\n", "x_t2s", "=", "self", ".", "backbone", "(", "self", ".", "t2s_mappings", ")", "\n", "A_x", ",", "A_softmax_logits", ",", "A_bridge", "=", "self", ".", "get_alignment_inputs", "(", "x_s2t", ",", "x_t", ",", "self", ".", "linearA_y", ",", "self", ".", "gvbgA", ")", "\n", "B_x", ",", "B_softmax_logits", ",", "B_bridge", "=", "self", ".", "get_alignment_inputs", "(", "x_t2s", ",", "x_s", ",", "self", ".", "linearB_y", ",", "self", ".", "gvbgB", ")", "\n", "coeff", "=", "calc_coeff", "(", "self", ".", "iteration", ",", "max_iter", "=", "10000.0", ")", "\n", "\n", "loss_transfer", "=", "0", "\n", "loss_gvbg", "=", "0", "\n", "loss_gvbd", "=", "0", "\n", "if", "self", ".", "opt", ".", "cg_align_feature", ":", "\n", "            ", "Alt", ",", "Ame", ",", "Ald", ",", "Alg", "=", "get_alignment_loss", "(", "A_x", ",", "A_bridge", ",", "self", ".", "fA_discriminator", ",", "coeff", ",", "\n", "self", ".", "opt", ".", "cg_gvbd_weight", ",", "A_softmax_logits", ",", "use_logits", "=", "False", ",", "no_entropy", "=", "True", ")", "\n", "Blt", ",", "Bme", ",", "Bld", ",", "Blg", "=", "get_alignment_loss", "(", "B_x", ",", "B_bridge", ",", "self", ".", "fB_discriminator", ",", "coeff", ",", "\n", "self", ".", "opt", ".", "cg_gvbd_weight", ",", "B_softmax_logits", ",", "use_logits", "=", "False", ",", "no_entropy", "=", "True", ")", "\n", "loss_transfer", "+=", "(", "Alt", "+", "Blt", ")", "\n", "loss_gvbg", "+=", "0", "\n", "loss_gvbd", "+=", "(", "Ald", "+", "Bld", ")", "\n", "", "'''\n        # Have problems now: No labels\n        if self.opt.cg_align_logits:\n            Alt, Ame, Ald, Alg = get_alignment_loss(A_softmax_logits, A_bridge, self.lA_discriminator, coeff,\n                                                    self.opt.cg_gvbd_weight, A_softmax_logits, use_logits=True)\n            Blt, Bme, Bld, Blg = get_alignment_loss(B_softmax_logits, B_bridge, self.lB_discriminator, coeff,\n                                                    self.opt.cg_gvbd_weight, B_softmax_logits, use_logits=True)\n            loss_transfer += (Alt + Blt)\n            loss_gvbg += (Alg + Blg)\n            loss_gvbd += (Ald + Bld)\n        '''", "\n", "self", ".", "loss_transfer", "=", "loss_transfer", "\n", "self", ".", "loss_gvbg", "=", "loss_gvbg", "\n", "self", ".", "loss_gvbd", "=", "loss_gvbd", "\n", "self", ".", "loss", "=", "1.0", "*", "loss_transfer", "+", "self", ".", "opt", ".", "cg_gvbd_weight", "*", "loss_gvbd", "+", "self", ".", "opt", ".", "cg_gvbg_weight", "*", "loss_gvbg", "\n", "self", ".", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "iteration", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.Identity.forward": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.__init__": [[120, 143], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "networks.get_norm_layer", "range", "networks.init_net", "torch.ModuleList.append", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.UnetGenerator", "networks.UnetGenerator", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_norm_layer", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["    ", "def", "__init__", "(", "self", ",", "architecture", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", ",", "use_dropout", ",", "n_experts", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "GeneratorPanel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "net_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_experts", ")", ":", "\n", "            ", "if", "architecture", "==", "'resnet_9blocks'", ":", "\n", "                ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "architecture", "==", "'resnet_6blocks'", ":", "\n", "                ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "architecture", "==", "'resnet_3blocks'", ":", "\n", "                ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "3", ")", "\n", "", "elif", "architecture", "==", "'resnet_2blocks'", ":", "\n", "                ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "2", ")", "\n", "", "elif", "architecture", "==", "'unet_128'", ":", "\n", "                ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "architecture", "==", "'unet_256'", ":", "\n", "                ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "architecture", ")", "\n", "", "net", "=", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "net_list", ".", "append", "(", "net", ")", "\n", "", "self", ".", "net_list", "=", "net_list", "\n", "self", ".", "n_experts", "=", "n_experts", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.forward": [[144, 149], ["range", "outputs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "net_list", "[", "i", "]", "(", "input", "[", "i", "]", ")", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.get_expert": [[150, 152], ["None"], "methods", ["None"], ["", "def", "get_expert", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "net_list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GANLoss.__init__": [[256, 279], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "\"\"\" Initialize the GANLoss class.\n\n        Parameters:\n            gan_mode (str) - - the type of GAN objective. It currently supports vanilla, lsgan, and wgangp.\n            target_real_label (bool) - - label for a real image\n            target_fake_label (bool) - - label of a fake image\n\n        Note: Do not use sigmoid as the last layer of Discriminator.\n        LSGAN needs no sigmoid. vanilla GANs will handle it with BCEWithLogitsLoss.\n        \"\"\"", "\n", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GANLoss.get_target_tensor": [[280, 296], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "\"\"\"Create label tensors with the same size as the input.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            A label tensor filled with ground truth label, and with the size of the input\n        \"\"\"", "\n", "\n", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GANLoss.__call__": [[297, 316], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "\"\"\"Calculate loss given Discriminator's output and grount truth labels.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction output from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            the calculated loss.\n        \"\"\"", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "prediction", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "loss", "=", "-", "prediction", "\n", "", "else", ":", "\n", "                ", "loss", "=", "prediction", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetGenerator.__init__": [[361, 410], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a Resnet-based generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetGenerator.forward": [[411, 414], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetBlock.__init__": [[419, 429], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetBlock.build_conv_block"], ["def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Initialize the Resnet block\n\n        A resnet block is a conv block with skip connections\n        We construct a conv block with build_conv_block function,\n        and implement skip connections in <forward> function.\n        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf\n        \"\"\"", "\n", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetBlock.build_conv_block": [[430, 469], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Construct a convolutional block.\n\n        Parameters:\n            dim (int)           -- the number of channels in the conv layer.\n            padding_type (str)  -- the name of padding layer: reflect | replicate | zero\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n            use_bias (bool)     -- if the conv layer uses bias or not\n\n        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))\n        \"\"\"", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.ResnetBlock.forward": [[470, 474], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.UnetGenerator.__init__": [[479, 503], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a Unet generator\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            output_nc (int) -- the number of channels in output images\n            num_downs (int) -- the number of downsamplings in UNet. For example, # if |num_downs| == 7,\n                                image of size 128x128 will become of size 1x1 # at the bottleneck\n            ngf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n\n        We construct the U-Net from the innermost layer to the outermost layer.\n        It is a recursive process.\n        \"\"\"", "\n", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "# add the innermost layer", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "# add intermediate layers with ngf * 8 filters", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "# gradually reduce the number of filters from ngf * 8 to ngf", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "model", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "# add the outermost layer", "\n", "a", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.UnetGenerator.forward": [[504, 507], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.UnetSkipConnectionBlock.__init__": [[515, 571], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a Unet submodule with skip connections.\n\n        Parameters:\n            outer_nc (int) -- the number of filters in the outer conv layer\n            inner_nc (int) -- the number of filters in the inner conv layer\n            input_nc (int) -- the number of channels in input images/features\n            submodule (UnetSkipConnectionBlock) -- previously defined submodules\n            outermost (bool)    -- if this module is the outermost module\n            innermost (bool)    -- if this module is the innermost module\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n        \"\"\"", "\n", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.UnetSkipConnectionBlock.forward": [[572, 577], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "# add skip connections", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.NLayerDiscriminator.__init__": [[582, 621], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.NLayerDiscriminator.forward": [[622, 625], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.PixelDiscriminator.__init__": [[630, 653], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a 1x1 PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.PixelDiscriminator.forward": [[654, 657], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "net", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_norm_layer": [[18, 36], ["functools.partial", "functools.partial", "NotImplementedError", "networks.Identity"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "\"\"\"Return a normalization layer\n\n    Parameters:\n        norm_type (str) -- the name of the normalization layer: batch | instance | none\n\n    For BatchNorm, we use learnable affine parameters and track running statistics (mean/stddev).\n    For InstanceNorm, we do not use learnable affine parameters. We do not track running statistics.\n    \"\"\"", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "def", "norm_layer", "(", "x", ")", ":", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_scheduler": [[38, 65], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Return a learning rate scheduler\n\n    Parameters:\n        optimizer          -- the optimizer of the network\n        opt (option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\uff0e\u3000\n                              opt.lr_policy is the name of learning rate policy: linear | step | plateau | cosine\n\n    For 'linear', we keep the same learning rate for the first <opt.n_epochs> epochs\n    and linearly decay the rate to zero over the next <opt.n_epochs_decay> epochs.\n    For other schedulers (step, plateau, and cosine), we use the default PyTorch schedulers.\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "if", "opt", ".", "lr_policy", "==", "'linear'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "n_epochs", ")", "/", "float", "(", "opt", ".", "n_epochs_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "n_epochs", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_weights": [[67, 99], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net": [[101, 117], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Initialize a network: 1. register CPU/GPU device (with multi-GPU support); 2. initialize the network weights\n    Parameters:\n        net (network)      -- the network to be initialized\n        init_type (str)    -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        gain (float)       -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Return an initialized network.\n    \"\"\"", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "# multi-GPUs", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.define_G": [[153, 200], ["networks.GeneratorPanel"], "function", ["None"], ["", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "n_experts", "=", "1", ")", ":", "\n", "    ", "\"\"\"Create a generator\n\n    Parameters:\n        input_nc (int) -- the number of channels in input images\n        output_nc (int) -- the number of channels in output images\n        ngf (int) -- the number of filters in the last conv layer\n        netG (str) -- the architecture's name: resnet_9blocks | resnet_6blocks | unet_256 | unet_128\n        norm (str) -- the name of normalization layers used in the network: batch | instance | none\n        use_dropout (bool) -- if use dropout layers.\n        init_type (str)    -- the name of our initialization method.\n        init_gain (float)  -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n        n_experts -- number of experts used\n    Returns a generator\n\n    Our current implementation provides two types of generators:\n        U-Net: [unet_128] (for 128x128 input images) and [unet_256] (for 256x256 input images)\n        The original U-Net paper: https://arxiv.org/abs/1505.04597\n\n        Resnet-based generator: [resnet_6blocks] (with 6 Resnet blocks) and [resnet_9blocks] (with 9 Resnet blocks)\n        Resnet-based generator consists of several Resnet blocks between a few downsampling/upsampling operations.\n        We adapt Torch code from Justin Johnson's neural style transfer project (https://github.com/jcjohnson/fast-neural-style).\n\n\n    The generator has been initialized by <init_net>. It uses RELU for non-linearity.\n    \"\"\"", "\n", "'''\n    net_list = nn.ModuleList()\n    norm_layer = get_norm_layer(norm_type=norm)\n    \n    for i in range(0, n_experts):\n        if netG == 'resnet_9blocks':\n            net = ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9)\n        elif netG == 'resnet_6blocks':\n            net = ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=6)\n        elif netG == 'unet_128':\n            net = UnetGenerator(input_nc, output_nc, 7, ngf, norm_layer=norm_layer, use_dropout=use_dropout)\n        elif netG == 'unet_256':\n            net = UnetGenerator(input_nc, output_nc, 8, ngf, norm_layer=norm_layer, use_dropout=use_dropout)\n        else:\n            raise NotImplementedError('Generator model name [%s] is not recognized' % netG)\n        net_list.append(net)\n    return init_net(net_list, init_type, init_gain, gpu_ids)\n    '''", "\n", "net", "=", "GeneratorPanel", "(", "netG", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", ",", "use_dropout", ",", "n_experts", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.define_D": [[202, 244], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_norm_layer", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Create a discriminator\n\n    Parameters:\n        input_nc (int)     -- the number of channels in input images\n        ndf (int)          -- the number of filters in the first conv layer\n        netD (str)         -- the architecture's name: basic | n_layers | pixel\n        n_layers_D (int)   -- the number of conv layers in the discriminator; effective when netD=='n_layers'\n        norm (str)         -- the type of normalization layers used in the network.\n        init_type (str)    -- the name of the initialization method.\n        init_gain (float)  -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Returns a discriminator\n\n    Our current implementation provides three types of discriminators:\n        [basic]: 'PatchGAN' classifier described in the original pix2pix paper.\n        It can classify whether 70\u00d770 overlapping patches are real or fake.\n        Such a patch-level discriminator architecture has fewer parameters\n        than a full-image discriminator and can work on arbitrarily-sized images\n        in a fully convolutional fashion.\n\n        [n_layers]: With this mode, you can specify the number of conv layers in the discriminator\n        with the parameter <n_layers_D> (default=3 as used in [basic] (PatchGAN).)\n\n        [pixel]: 1x1 PixelGAN discriminator can classify whether a pixel is real or not.\n        It encourages greater color diversity but has no effect on spatial statistics.\n\n    The discriminator has been initialized by <init_net>. It uses Leakly RELU for non-linearity.\n    \"\"\"", "\n", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "# default PatchGAN classifier", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "# more options", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "# classify if each pixel is real or fake", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "netD", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.cal_gradient_penalty": [[318, 353], ["interpolatesv.requires_grad_", "netD", "torch.autograd.grad", "torch.autograd.grad", "gradients[].view", "real_data.size", "torch.ones().to", "torch.ones().to", "torch.rand", "torch.rand", "alpha.expand().contiguous().view.expand().contiguous().view", "NotImplementedError", "torch.ones", "torch.ones", "alpha.expand().contiguous().view.expand().contiguous", "netD.size", "alpha.expand().contiguous().view.expand", "real_data.nelement"], "function", ["None"], ["", "", "def", "cal_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "device", ",", "type", "=", "'mixed'", ",", "constant", "=", "1.0", ",", "lambda_gp", "=", "10.0", ")", ":", "\n", "    ", "\"\"\"Calculate the gradient penalty loss, used in WGAN-GP paper https://arxiv.org/abs/1704.00028\n\n    Arguments:\n        netD (network)              -- discriminator network\n        real_data (tensor array)    -- real images\n        fake_data (tensor array)    -- generated images from the generator\n        device (str)                -- GPU / CPU: from torch.device('cuda:{}'.format(self.gpu_ids[0])) if self.gpu_ids else torch.device('cpu')\n        type (str)                  -- if we mix real and fake data or not [real | fake | mixed].\n        constant (float)            -- the constant used in formula ( ||gradient||_2 - constant)^2\n        lambda_gp (float)           -- weight for this loss\n\n    Returns the gradient penalty loss\n    \"\"\"", "\n", "if", "lambda_gp", ">", "0.0", ":", "\n", "        ", "if", "type", "==", "'real'", ":", "# either use real images, fake images, or a linear interpolation of two.", "\n", "            ", "interpolatesv", "=", "real_data", "\n", "", "elif", "type", "==", "'fake'", ":", "\n", "            ", "interpolatesv", "=", "fake_data", "\n", "", "elif", "type", "==", "'mixed'", ":", "\n", "            ", "alpha", "=", "torch", ".", "rand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "1", ",", "device", "=", "device", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "real_data", ".", "nelement", "(", ")", "//", "real_data", ".", "shape", "[", "0", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "real_data", ".", "shape", ")", "\n", "interpolatesv", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} not implemented'", ".", "format", "(", "type", ")", ")", "\n", "", "interpolatesv", ".", "requires_grad_", "(", "True", ")", "\n", "disc_interpolates", "=", "netD", "(", "interpolatesv", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "\n", "gradients", "=", "gradients", "[", "0", "]", ".", "view", "(", "real_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flat the data", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "constant", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "lambda_gp", "# added eps", "\n", "return", "gradient_penalty", ",", "gradients", "\n", "", "else", ":", "\n", "        ", "return", "0.0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.modify_commandline_options": [[25, 52], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        For CycleGAN, in addition to GAN losses, we introduce lambda_A, lambda_B, and lambda_identity for the following losses.\n        A (source domain), B (target domain).\n        Generators: G_A: A -> B; G_B: B -> A.\n        Discriminators: D_A: G_A(A) vs. B; D_B: G_B(B) vs. A.\n        Forward cycle loss:  lambda_A * ||G_B(G_A(A)) - A|| (Eqn. (2) in the paper)\n        Backward cycle loss: lambda_B * ||G_A(G_B(B)) - B|| (Eqn. (2) in the paper)\n        Identity loss (optional): lambda_identity * (||G_A(B) - B|| * lambda_B + ||G_B(A) - A|| * lambda_A) (Sec 5.2 \"Photo generation from paintings\" in the paper)\n        Dropout is not used in the original CycleGAN paper.\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "# default CycleGAN did not use dropout", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.__init__": [[53, 103], ["base_model.BaseModel.__init__", "feature_cycle_gan_model.FeatureCycleGANModel.define_G", "feature_cycle_gan_model.FeatureCycleGANModel.define_G", "numpy.ones", "numpy.zeros", "feature_cycle_gan_model.FeatureCycleGANModel.define_D", "feature_cycle_gan_model.FeatureCycleGANModel.define_D", "cyclegan.util.ImagePool", "cyclegan.util.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "feature_cycle_gan_model.FeatureCycleGANModel.optimizers.append", "feature_cycle_gan_model.FeatureCycleGANModel.optimizers.append", "itertools.chain", "itertools.chain", "networks.GANLoss", "feature_cycle_gan_model.FeatureCycleGANModel.netG_A.parameters", "feature_cycle_gan_model.FeatureCycleGANModel.netG_B.parameters", "feature_cycle_gan_model.FeatureCycleGANModel.netD_A.parameters", "feature_cycle_gan_model.FeatureCycleGANModel.netD_B.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_D", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_D", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "nc", ")", ":", "\n", "        ", "\"\"\"Initialize the CycleGAN class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "nc", "=", "nc", "\n", "# specify the training losses you want to print out. The training/test scripts will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "'D_A'", ",", "'G_A'", ",", "'cycle_A'", ",", "'idt_A'", ",", "'D_B'", ",", "'G_B'", ",", "'cycle_B'", ",", "'idt_B'", ",", "'similar'", "]", "\n", "# specify the images you want to save/display. The training/test scripts will call <BaseModel.get_current_visuals>", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", ",", "'D_A'", ",", "'D_B'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", "]", "\n", "", "self", ".", "n_experts", "=", "opt", ".", "n_experts", "\n", "\n", "# define networks (both Generators and discriminators)", "\n", "# The naming is different from those used in the paper.", "\n", "# Code (vs. paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "self", ".", "netG_A", "=", "self", ".", "define_G", "(", ")", "\n", "self", ".", "netG_B", "=", "self", ".", "define_G", "(", ")", "\n", "\n", "self", ".", "backward_generator", "=", "opt", ".", "backward_generator", "\n", "\n", "self", ".", "panel_tracker", "=", "np", ".", "ones", "(", "self", ".", "n_experts", ")", "# Track total number of expert selection; Add 1 for numerical stability", "\n", "self", ".", "epoch_panel_tracker", "=", "np", ".", "zeros", "(", "self", ".", "n_experts", ")", "# Track epoch-wise expert selection", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "cdm_mode", "=", "False", "# Switch of CDM mode; if on, expert will not use random or classwise", "\n", "\n", "if", "self", ".", "isTrain", ":", "# define discriminators", "\n", "# if True:", "\n", "            ", "self", ".", "netD_A", "=", "self", ".", "define_D", "(", ")", "\n", "self", ".", "netD_B", "=", "self", ".", "define_D", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# if True:", "\n", "            ", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "# define GAN loss.", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterionSimilar", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "# initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "self", ".", "netD_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_G": [[104, 108], ["dda_model.dda_networks.FeatureMapGeneratorPanel"], "methods", ["None"], ["", "", "def", "define_G", "(", "self", ")", ":", "\n", "        ", "net", "=", "FeatureMapGeneratorPanel", "(", "self", ".", "nc", ",", "self", ".", "opt", ".", "ngf", ",", "self", ".", "opt", ".", "norm", ",", "not", "self", ".", "opt", ".", "no_dropout", ",", "self", ".", "n_experts", ",", "\n", "self", ".", "opt", ".", "init_type", ",", "self", ".", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "n_blocks", "=", "self", ".", "opt", ".", "n_blocks_G", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_D": [[109, 113], ["cyclegan.networks.get_norm_layer", "dda_model.dda_networks.FeatureMapDiscriminator", "cyclegan.networks.init_net"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_norm_layer", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.init_net"], ["", "def", "define_D", "(", "self", ")", ":", "\n", "        ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "self", ".", "opt", ".", "norm", ")", "\n", "net", "=", "FeatureMapDiscriminator", "(", "self", ".", "nc", ",", "self", ".", "opt", ".", "ndf", ",", "self", ".", "opt", ".", "n_layers_D", ",", "norm_layer", ")", "\n", "return", "init_net", "(", "net", ",", "self", ".", "opt", ".", "init_type", ",", "self", ".", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.end_epoch": [[114, 116], ["numpy.zeros"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch_panel_tracker", "=", "np", ".", "zeros", "(", "self", ".", "n_experts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.get_expert_selection_results": [[117, 124], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "get_expert_selection_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_experts", ")", ":", "\n", "            ", "name", "=", "\"expert_%d\"", "%", "i", "\n", "value", "=", "self", ".", "epoch_panel_tracker", "[", "i", "]", "\n", "results", "[", "name", "]", "=", "value", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.set_input": [[125, 136], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "a_maps", ",", "b_maps", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): include the data itself and its metadata information.\n\n        The option 'direction' can be used to swap domain A and domain B.\n        \"\"\"", "\n", "self", ".", "real_A", "=", "a_maps", "\n", "self", ".", "real_B", "=", "b_maps", "\n", "self", ".", "current_batch_size", "=", "self", ".", "real_A", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.forward": [[137, 143], ["feature_cycle_gan_model.FeatureCycleGANModel.netG_A", "feature_cycle_gan_model.FeatureCycleGANModel.netG_B", "feature_cycle_gan_model.FeatureCycleGANModel.netG_B", "feature_cycle_gan_model.FeatureCycleGANModel.netG_A", "feature_cycle_gan_model.FeatureCycleGANModel.real_A.unsqueeze().expand", "feature_cycle_gan_model.FeatureCycleGANModel.real_B.unsqueeze().expand", "feature_cycle_gan_model.FeatureCycleGANModel.real_A.unsqueeze", "feature_cycle_gan_model.FeatureCycleGANModel.real_B.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "fake_B_all", "=", "self", ".", "netG_A", "(", "self", ".", "real_A", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "n_experts", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# G_A(A)", "\n", "self", ".", "rec_A_all", "=", "self", ".", "netG_B", "(", "self", ".", "fake_B_all", ")", "# G_B(G_A(A))", "\n", "self", ".", "fake_A_all", "=", "self", ".", "netG_B", "(", "self", ".", "real_B", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "n_experts", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# G_B(B)", "\n", "self", ".", "rec_B_all", "=", "self", ".", "netG_A", "(", "self", ".", "fake_A_all", ")", "# G_A(G_B(B))", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_D_basic": [[144, 165], ["netD", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN", "netD", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["None"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\n\n        Parameters:\n            netD (network)      -- the discriminator D\n            real (tensor array) -- real images\n            fake (tensor array) -- images generated by a generator\n\n        Return the discriminator loss.\n        We also call loss_D.backward() to calculate the gradients.\n        \"\"\"", "\n", "# Real", "\n", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss and calculate gradients", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_D_real_basic": [[166, 173], ["netD", "loss_D_real.mean.mean.mean", "loss_D_real.mean.mean.backward", "real.detach", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN"], "methods", ["None"], ["", "def", "backward_D_real_basic", "(", "self", ",", "netD", ",", "real", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ".", "detach", "(", ")", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "*", "0.5", "\n", "loss_D_real", "=", "loss_D_real", ".", "mean", "(", ")", "\n", "loss_D_real", ".", "backward", "(", ")", "\n", "return", "loss_D_real", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_D_fake_basic": [[174, 180], ["netD", "loss_D_fake.mean.mean.mean", "loss_D_fake.mean.mean.backward", "fake.detach", "float", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN"], "methods", ["None"], ["", "def", "backward_D_fake_basic", "(", "self", ",", "netD", ",", "fake", ")", ":", "\n", "        ", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "*", "0.5", "/", "float", "(", "self", ".", "n_experts", ")", "\n", "loss_D_fake", "=", "loss_D_fake", ".", "mean", "(", ")", "\n", "loss_D_fake", ".", "backward", "(", ")", "\n", "return", "loss_D_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_D_A": [[181, 190], ["feature_cycle_gan_model.FeatureCycleGANModel.backward_D_real_basic", "range", "feature_cycle_gan_model.FeatureCycleGANModel.fake_B_pool.query", "feature_cycle_gan_model.FeatureCycleGANModel.backward_D_fake_basic"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_real_basic", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.query", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_fake_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_A\"\"\"", "\n", "#fake_B = self.fake_B_pool.query(self.fake_B)", "\n", "#self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)", "\n", "loss_D_A", "=", "self", ".", "backward_D_real_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B_all", "[", "i", "]", ")", "\n", "loss_D_A", "+=", "self", ".", "backward_D_fake_basic", "(", "self", ".", "netD_A", ",", "fake_B", ")", "\n", "", "self", ".", "loss_D_A", "=", "loss_D_A", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_D_B": [[191, 200], ["feature_cycle_gan_model.FeatureCycleGANModel.backward_D_real_basic", "range", "feature_cycle_gan_model.FeatureCycleGANModel.fake_A_pool.query", "feature_cycle_gan_model.FeatureCycleGANModel.backward_D_fake_basic"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_real_basic", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.query", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_fake_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_B\"\"\"", "\n", "#fake_A = self.fake_A_pool.query(self.fake_A)", "\n", "#self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)", "\n", "loss_D_B", "=", "self", ".", "backward_D_real_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A_all", "[", "i", "]", ")", "\n", "loss_D_B", "+=", "self", ".", "backward_D_fake_basic", "(", "self", ".", "netD_B", ",", "fake_A", ")", "\n", "", "self", ".", "loss_D_B", "=", "loss_D_B", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.backward_G": [[201, 284], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "feature_cycle_gan_model.FeatureCycleGANModel.get_expert_results", "range", "float", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_A.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_B.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_A.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_B.append", "feature_cycle_gan_model.FeatureCycleGANModel.get_expert_loss", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G.backward", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_B[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_B[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_B[].mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_A.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_B.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_A.append", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_B.append", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN", "feature_cycle_gan_model.FeatureCycleGANModel.criterionGAN", "float", "float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "feature_cycle_gan_model.FeatureCycleGANModel.netG_A.get_expert", "feature_cycle_gan_model.FeatureCycleGANModel.netG_B.get_expert", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "feature_cycle_gan_model.FeatureCycleGANModel.netD_A", "feature_cycle_gan_model.FeatureCycleGANModel.netD_B", "feature_cycle_gan_model.FeatureCycleGANModel.criterionCycle", "feature_cycle_gan_model.FeatureCycleGANModel.criterionCycle", "[].mean", "[].mean", "[].mean", "float", "[].mean", "float", "[].mean", "[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.criterionIdt", "feature_cycle_gan_model.FeatureCycleGANModel.criterionIdt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "feature_cycle_gan_model.FeatureCycleGANModel.panel_tracker.sum", "float", "[].mean", "[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.panel_tracker.sum", "float", "[].mean", "[].mean", "[].mean", "[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.criterionSimilar", "feature_cycle_gan_model.FeatureCycleGANModel.criterionSimilar", "[].mean", "[].mean"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_results", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.get_expert", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.get_expert"], ["", "def", "backward_G", "(", "self", ",", "backward_loss", "=", "True", ")", ":", "\n", "        ", "\"\"\"Calculate the loss for generators G_A and G_B\"\"\"", "\n", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "current_batch_size", "=", "self", ".", "real_A", ".", "shape", "[", "0", "]", "\n", "# Identity loss", "\n", "losses", "=", "torch", ".", "zeros", "(", "self", ".", "n_experts", ",", "current_batch_size", "*", "2", ")", ".", "to", "(", "self", ".", "device", ")", "# n * batch_size", "\n", "self", ".", "loss_G_A", "=", "[", "]", "\n", "self", ".", "loss_G_B", "=", "[", "]", "\n", "self", ".", "loss_cycle_A", "=", "[", "]", "\n", "self", ".", "loss_cycle_B", "=", "[", "]", "\n", "self", ".", "loss_idt_A", "=", "[", "]", "\n", "self", ".", "loss_idt_B", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed: ||G_A(B) - B||", "\n", "                ", "self", ".", "idt_A", "=", "self", ".", "netG_A", ".", "get_expert", "(", "i", ")", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", ".", "append", "(", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", ")", "\n", "# G_B should be identity if real_A is fed: ||G_B(A) - A||", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", ".", "get_expert", "(", "i", ")", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", ".", "append", "(", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_idt_A", ".", "append", "(", "torch", ".", "zeros", "(", "current_batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "loss_idt_B", ".", "append", "(", "torch", ".", "zeros", "(", "current_batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# GAN loss D_A(G_A(A))", "\n", "", "self", ".", "loss_G_A", ".", "append", "(", "self", ".", "criterionGAN", "(", "self", ".", "netD_A", "(", "self", ".", "fake_B_all", "[", "i", "]", ")", ",", "True", ")", ")", "\n", "# GAN loss D_B(G_B(B))", "\n", "self", ".", "loss_G_B", ".", "append", "(", "self", ".", "criterionGAN", "(", "self", ".", "netD_B", "(", "self", ".", "fake_A_all", "[", "i", "]", ")", ",", "True", ")", ")", "\n", "# Forward cycle loss || G_B(G_A(A)) - A||", "\n", "self", ".", "loss_cycle_A", ".", "append", "(", "self", ".", "criterionCycle", "(", "self", ".", "rec_A_all", "[", "i", "]", ",", "self", ".", "real_A", ")", "*", "lambda_A", ")", "\n", "# Backward cycle loss || G_A(G_B(B)) - B||", "\n", "self", ".", "loss_cycle_B", ".", "append", "(", "self", ".", "criterionCycle", "(", "self", ".", "rec_B_all", "[", "i", "]", ",", "self", ".", "real_B", ")", "*", "lambda_B", ")", "\n", "losses", "[", "i", "]", "=", "self", ".", "get_expert_loss", "(", "i", ")", "\n", "", "expert_idx", "=", "self", ".", "get_expert_results", "(", "losses", ")", "# 2batch_size", "\n", "self", ".", "loss_G", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "current_batch_size", ")", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_trick", ":", "\n", "                ", "a_expert_loss_scale", "=", "float", "(", "self", ".", "panel_tracker", ".", "sum", "(", ")", "/", "float", "(", "self", ".", "panel_tracker", "[", "expert_idx", "[", "i", "]", "]", ")", "/", "float", "(", "self", ".", "n_experts", ")", ")", "\n", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "/", "a_expert_loss_scale", "\n", "b_expert_loss_scale", "=", "float", "(", "self", ".", "panel_tracker", ".", "sum", "(", ")", "/", "float", "(", "self", ".", "panel_tracker", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", ")", "/", "float", "(", "self", ".", "n_experts", ")", ")", "\n", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "/", "b_expert_loss_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_G_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "\n", "# Calculate similarity loss", "\n", "", "if", "self", ".", "opt", ".", "lambda_similar", ">", "0", ":", "\n", "                ", "self", ".", "loss_similar", "=", "self", ".", "criterionSimilar", "(", "self", ".", "fake_B_all", "[", "expert_idx", "[", "i", "]", "]", ",", "self", ".", "real_A", "[", "i", "]", ")", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "criterionSimilar", "(", "self", ".", "fake_A_all", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", ",", "self", ".", "real_B", "[", "i", "]", ")", "[", "i", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_similar", "=", "0", "\n", "", "self", ".", "loss_G", "+=", "self", ".", "loss_similar", "*", "self", ".", "opt", ".", "lambda_similar", "\n", "", "self", ".", "loss_G", "/=", "float", "(", "current_batch_size", ")", "\n", "if", "backward_loss", ":", "\n", "            ", "self", ".", "loss_G", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# convert loss to mean", "\n", "", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "if", "backward_loss", ":", "\n", "# only track training samples", "\n", "                ", "self", ".", "panel_tracker", "[", "i", "]", "+=", "(", "expert_idx", "==", "i", ")", ".", "sum", "(", ")", "\n", "self", ".", "epoch_panel_tracker", "[", "i", "]", "+=", "(", "expert_idx", "==", "i", ")", ".", "sum", "(", ")", "\n", "", "self", ".", "loss_G_A", "[", "i", "]", "=", "self", ".", "loss_G_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_G_B", "[", "i", "]", "=", "self", ".", "loss_G_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_cycle_A", "[", "i", "]", "=", "self", ".", "loss_cycle_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_cycle_B", "[", "i", "]", "=", "self", ".", "loss_cycle_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_idt_A", "[", "i", "]", "=", "self", ".", "loss_idt_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_idt_B", "[", "i", "]", "=", "self", ".", "loss_idt_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "\n", "# select fake and reconstruct images", "\n", "", "fake_B", "=", "torch", ".", "zeros", "(", "self", ".", "fake_B_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rec_A", "=", "torch", ".", "zeros", "(", "self", ".", "rec_A_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_A", "=", "torch", ".", "zeros", "(", "self", ".", "fake_A_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rec_B", "=", "torch", ".", "zeros", "(", "self", ".", "rec_B_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "real_A", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "fake_B", "[", "i", "]", "=", "self", ".", "fake_B_all", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", "\n", "rec_A", "[", "i", "]", "=", "self", ".", "rec_A_all", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", "\n", "fake_A", "[", "i", "]", "=", "self", ".", "fake_A_all", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", "\n", "rec_B", "[", "i", "]", "=", "self", ".", "rec_B_all", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", "\n", "", "self", ".", "fake_B", "=", "fake_B", "\n", "self", ".", "rec_A", "=", "rec_A", "\n", "self", ".", "fake_A", "=", "fake_A", "\n", "self", ".", "rec_B", "=", "rec_B", "\n", "self", ".", "expert_idx", "=", "expert_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.optimize_parameters": [[285, 301], ["feature_cycle_gan_model.FeatureCycleGANModel.forward", "feature_cycle_gan_model.FeatureCycleGANModel.set_requires_grad", "feature_cycle_gan_model.FeatureCycleGANModel.optimizer_G.zero_grad", "feature_cycle_gan_model.FeatureCycleGANModel.backward_G", "feature_cycle_gan_model.FeatureCycleGANModel.optimizer_G.step", "feature_cycle_gan_model.FeatureCycleGANModel.set_requires_grad", "feature_cycle_gan_model.FeatureCycleGANModel.optimizer_D.zero_grad", "feature_cycle_gan_model.FeatureCycleGANModel.backward_D_A", "feature_cycle_gan_model.FeatureCycleGANModel.backward_D_B", "feature_cycle_gan_model.FeatureCycleGANModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_B"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# forward", "\n", "self", ".", "forward", "(", ")", "# compute fake images and reconstruction images.", "\n", "# G_A and G_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "False", ")", "# Ds require no gradients when optimizing Gs", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "# set G_A and G_B's gradients to zero", "\n", "self", ".", "backward_G", "(", ")", "# calculate gradients for G_A and G_B", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "# update G_A and G_B's weights", "\n", "# D_A and D_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "# set D_A and D_B's gradients to zero", "\n", "self", ".", "backward_D_A", "(", ")", "# calculate gradients for D_A", "\n", "self", ".", "backward_D_B", "(", ")", "# calculate graidents for D_B", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "# update D_A and D_B's weights", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.get_current_losses": [[302, 305], ["super().get_current_losses"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_current_losses"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "super", "(", "FeatureCycleGANModel", ",", "self", ")", ".", "get_current_losses", "(", ")", "\n", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.get_expert_loss": [[306, 315], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_G_B[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_cycle_B[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_A[].mean", "feature_cycle_gan_model.FeatureCycleGANModel.loss_idt_B[].mean"], "methods", ["None"], ["", "def", "get_expert_loss", "(", "self", ",", "idx", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "cat", "(", "(", "self", ".", "loss_G_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_G_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "# 2batchsize", "\n", "if", "'c'", "in", "self", ".", "opt", ".", "expert_criteria", "and", "self", ".", "iteration", ">", "self", ".", "opt", ".", "c_criteria_iterations", ":", "\n", "            ", "loss", "+=", "torch", ".", "cat", "(", "(", "self", ".", "loss_cycle_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_cycle_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "\n", "#print(\"using c\")", "\n", "", "if", "'i'", "in", "self", ".", "opt", ".", "expert_criteria", "and", "self", ".", "iteration", ">", "self", ".", "opt", ".", "i_criteria_iterations", ":", "\n", "            ", "loss", "+=", "torch", ".", "cat", "(", "(", "self", ".", "loss_idt_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_idt_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "\n", "#print(\"using i\")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.get_expert_results": [[316, 326], ["losses.min", "numpy.random.randint"], "methods", ["None"], ["", "def", "get_expert_results", "(", "self", ",", "losses", ")", ":", "\n", "        ", "_", ",", "expert_idx", "=", "losses", ".", "min", "(", "dim", "=", "0", ")", "# batch_size", "\n", "current_batch_size", "=", "expert_idx", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"none\"", "or", "self", ".", "iteration", ">", "self", ".", "opt", ".", "expert_warmup_iterations", "or", "self", ".", "cdm_mode", ":", "\n", "#print(\"expert using none\")", "\n", "            ", "return", "expert_idx", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"random\"", ":", "\n", "#print(\"expert using random\")", "\n", "                ", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_experts", ",", "size", "=", "current_batch_size", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.BaseDataset.__init__": [[23, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class; save the options in the class\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.BaseDataset.modify_commandline_options": [[31, 43], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.BaseDataset.__len__": [[44, 48], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.BaseDataset.__getitem__": [[49, 60], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It ususally contains the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_params": [[62, 78], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_transform": [[80, 116], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Grayscale", "torchvision.Resize", "transform_list.append", "transform_list.append", "torchvision.Lambda", "transform_list.append", "torchvision.ToTensor", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomHorizontalFlip", "transform_list.append", "torchvision.Normalize", "torchvision.Normalize", "torchvision.CenterCrop", "torchvision.RandomCrop", "base_dataset.__make_power_2", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__crop", "base_dataset.__flip"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__scale_width", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__crop", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__flip"], ["", "def", "get_transform", "(", "opt", ",", "params", "=", "None", ",", "grayscale", "=", "False", ",", "method", "=", "Image", ".", "BICUBIC", ",", "convert", "=", "True", ",", "noflip", "=", "False", ",", "center", "=", "False", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "grayscale", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Grayscale", "(", "1", ")", ")", "\n", "", "if", "'resize'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "opt", ".", "crop_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "if", "center", ":", "\n", "                ", "transform_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "preprocess", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", "=", "4", ",", "method", "=", "method", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "opt", ".", "no_flip", ")", "and", "(", "not", "noflip", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "elif", "params", "[", "'flip'", "]", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "", "if", "convert", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "grayscale", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", "\n", "", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__make_power_2": [[118, 127], ["int", "int", "base_dataset.__print_size_warning", "img.resize", "round", "round"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__print_size_warning"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "h", "==", "oh", "and", "w", "==", "ow", ":", "\n", "        ", "return", "img", "\n", "\n", "", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__scale_width": [[129, 136], ["int", "img.resize", "max"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_size", ",", "crop_size", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "ow", "==", "target_size", "and", "oh", ">=", "crop_size", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_size", "\n", "h", "=", "int", "(", "max", "(", "target_size", "*", "oh", "/", "ow", ",", "crop_size", ")", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__crop": [[138, 145], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "if", "(", "ow", ">", "tw", "or", "oh", ">", "th", ")", ":", "\n", "        ", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__flip": [[147, 151], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.__print_size_warning": [[153, 161], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "\"\"\"Print warning information about image size(only print once)\"\"\"", "\n", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.modify_commandline_options": [[23, 50], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        For CycleGAN, in addition to GAN losses, we introduce lambda_A, lambda_B, and lambda_identity for the following losses.\n        A (source domain), B (target domain).\n        Generators: G_A: A -> B; G_B: B -> A.\n        Discriminators: D_A: G_A(A) vs. B; D_B: G_B(B) vs. A.\n        Forward cycle loss:  lambda_A * ||G_B(G_A(A)) - A|| (Eqn. (2) in the paper)\n        Backward cycle loss: lambda_B * ||G_A(G_B(B)) - B|| (Eqn. (2) in the paper)\n        Identity loss (optional): lambda_identity * (||G_A(B) - B|| * lambda_B + ||G_B(A) - A|| * lambda_A) (Sec 5.2 \"Photo generation from paintings\" in the paper)\n        Dropout is not used in the original CycleGAN paper.\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "# default CycleGAN did not use dropout", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.__init__": [[51, 120], ["base_model.BaseModel.__init__", "networks.define_G", "networks.define_G", "numpy.ones", "numpy.zeros", "visual_names_A.append", "visual_names_B.append", "cyclegan.cycle_gan_discriminator.CycleGANDiscriminator", "networks.define_D", "networks.define_D", "cyclegan.util.ImagePool", "cyclegan.util.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "cycle_gan_model.CycleGANModel.optimizers.append", "cycle_gan_model.CycleGANModel.optimizers.append", "itertools.chain", "itertools.chain", "networks.GANLoss", "cycle_gan_model.CycleGANModel.netG_A.parameters", "cycle_gan_model.CycleGANModel.netG_B.parameters", "cycle_gan_model.CycleGANModel.netD_A.parameters", "cycle_gan_model.CycleGANModel.netD_B.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_D", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.feature_cycle_gan_model.FeatureCycleGANModel.define_D", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the CycleGAN class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "'D_A'", ",", "'G_A'", ",", "'cycle_A'", ",", "'idt_A'", ",", "'D_B'", ",", "'G_B'", ",", "'cycle_B'", ",", "'idt_B'", ",", "'diversity'", "]", "\n", "# specify the images you want to save/display. The training/test scripts will call <BaseModel.get_current_visuals>", "\n", "visual_names_A", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", "]", "\n", "visual_names_B", "=", "[", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "if", "self", ".", "isTrain", "and", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "# if identity loss is used, we also visualize idt_B=G_A(B) ad idt_A=G_A(B)", "\n", "            ", "visual_names_A", ".", "append", "(", "'idt_B'", ")", "\n", "visual_names_B", ".", "append", "(", "'idt_A'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_A", "+", "visual_names_B", "# combine visualizations for A and B", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>.", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", ",", "'D_A'", ",", "'D_B'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", "]", "\n", "\n", "# define networks (both Generators and discriminators)", "\n", "# The naming is different from those used in the paper.", "\n", "# Code (vs. paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "", "self", ".", "netG_A", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "opt", ".", "n_experts", ")", "\n", "self", ".", "netG_B", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "opt", ".", "n_experts", ")", "\n", "\n", "if", "self", ".", "opt", ".", "cg_align_feature", "or", "self", ".", "opt", ".", "cg_align_logits", ":", "\n", "            ", "self", ".", "discriminate_feature", "=", "True", "\n", "self", ".", "discriminator", "=", "CycleGANDiscriminator", "(", "self", ".", "opt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "discriminate_feature", "=", "False", "\n", "\n", "", "self", ".", "n_experts", "=", "opt", ".", "n_experts", "\n", "self", ".", "panel_tracker", "=", "np", ".", "ones", "(", "self", ".", "n_experts", ")", "# Track total number of expert selection; Add 1 for numerical stability", "\n", "self", ".", "epoch_panel_tracker", "=", "np", ".", "zeros", "(", "self", ".", "n_experts", ")", "# Track epoch-wise expert selection", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "cdm_mode", "=", "False", "# Switch of CDM mode; if on, expert will not use random or classwise", "\n", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"classwise\"", ":", "\n", "            ", "self", ".", "classwise_assignment", "=", "{", "}", "\n", "self", ".", "classwise_expert_idx", "=", "0", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "# define discriminators", "\n", "# if True:", "\n", "            ", "self", ".", "netD_A", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netD_B", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# if True:", "\n", "            ", "if", "opt", ".", "lambda_identity", ">", "0.0", ":", "# only works when input and output images have the same number of channels", "\n", "                ", "assert", "(", "opt", ".", "input_nc", "==", "opt", ".", "output_nc", ")", "\n", "", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "# define GAN loss.", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterionDiversity", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "self", ".", "netD_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.end_epoch": [[121, 123], ["numpy.zeros"], "methods", ["None"], ["", "", "def", "end_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch_panel_tracker", "=", "np", ".", "zeros", "(", "self", ".", "n_experts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_selection_results": [[124, 131], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "get_expert_selection_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_experts", ")", ":", "\n", "            ", "name", "=", "\"expert_%d\"", "%", "i", "\n", "value", "=", "self", ".", "epoch_panel_tracker", "[", "i", "]", "\n", "results", "[", "name", "]", "=", "value", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.set_input": [[132, 148], ["input[].to", "input[].to", "cycle_gan_model.CycleGANModel.update_input_classname"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.update_input_classname"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): include the data itself and its metadata information.\n\n        The option 'direction' can be used to swap domain A and domain B.\n        \"\"\"", "\n", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "current_batch_size", "=", "self", ".", "real_A", ".", "shape", "[", "0", "]", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "self", ".", "a_paths", "=", "input", "[", "'A_paths'", "]", "\n", "self", ".", "b_paths", "=", "input", "[", "'B_paths'", "]", "\n", "self", ".", "update_input_classname", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.update_input_classname": [[149, 155], ["range", "range", "cycle_gan_model.CycleGANModel.input_classnames.append", "cycle_gan_model.CycleGANModel.input_classnames.append", "cycle_gan_model.CycleGANModel.a_paths[].split", "cycle_gan_model.CycleGANModel.b_paths[].split"], "methods", ["None"], ["", "def", "update_input_classname", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_classnames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "current_batch_size", ")", ":", "\n", "            ", "self", ".", "input_classnames", ".", "append", "(", "self", ".", "a_paths", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "current_batch_size", ")", ":", "\n", "            ", "self", ".", "input_classnames", ".", "append", "(", "self", ".", "b_paths", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.forward": [[156, 162], ["cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.real_A.unsqueeze().expand", "cycle_gan_model.CycleGANModel.real_B.unsqueeze().expand", "cycle_gan_model.CycleGANModel.real_A.unsqueeze", "cycle_gan_model.CycleGANModel.real_B.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "fake_B_all", "=", "self", ".", "netG_A", "(", "self", ".", "real_A", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "n_experts", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# G_A(A)", "\n", "self", ".", "rec_A_all", "=", "self", ".", "netG_B", "(", "self", ".", "fake_B_all", ")", "# G_B(G_A(A))", "\n", "self", ".", "fake_A_all", "=", "self", ".", "netG_B", "(", "self", ".", "real_B", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "n_experts", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# G_B(B)", "\n", "self", ".", "rec_B_all", "=", "self", ".", "netG_A", "(", "self", ".", "fake_A_all", ")", "# G_A(G_B(B))", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_basic": [[163, 184], ["netD", "cycle_gan_model.CycleGANModel.criterionGAN", "netD", "cycle_gan_model.CycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["None"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\n\n        Parameters:\n            netD (network)      -- the discriminator D\n            real (tensor array) -- real images\n            fake (tensor array) -- images generated by a generator\n\n        Return the discriminator loss.\n        We also call loss_D.backward() to calculate the gradients.\n        \"\"\"", "\n", "# Real", "\n", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss and calculate gradients", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_real_basic": [[185, 192], ["netD", "loss_D_real.mean.mean.mean", "loss_D_real.mean.mean.backward", "cycle_gan_model.CycleGANModel.criterionGAN"], "methods", ["None"], ["", "def", "backward_D_real_basic", "(", "self", ",", "netD", ",", "real", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "*", "0.5", "\n", "loss_D_real", "=", "loss_D_real", ".", "mean", "(", ")", "\n", "loss_D_real", ".", "backward", "(", ")", "\n", "return", "loss_D_real", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_fake_basic": [[193, 199], ["netD", "loss_D_fake.mean.mean.mean", "loss_D_fake.mean.mean.backward", "fake.detach", "float", "cycle_gan_model.CycleGANModel.criterionGAN"], "methods", ["None"], ["", "def", "backward_D_fake_basic", "(", "self", ",", "netD", ",", "fake", ")", ":", "\n", "        ", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "*", "0.5", "/", "float", "(", "self", ".", "n_experts", ")", "\n", "loss_D_fake", "=", "loss_D_fake", ".", "mean", "(", ")", "\n", "loss_D_fake", ".", "backward", "(", ")", "\n", "return", "loss_D_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_A": [[200, 209], ["cycle_gan_model.CycleGANModel.backward_D_real_basic", "range", "cycle_gan_model.CycleGANModel.fake_B_pool.query", "cycle_gan_model.CycleGANModel.backward_D_fake_basic"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_real_basic", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.query", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_fake_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_A\"\"\"", "\n", "#fake_B = self.fake_B_pool.query(self.fake_B)", "\n", "#self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)", "\n", "loss_D_A", "=", "self", ".", "backward_D_real_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B_all", "[", "i", "]", ")", "\n", "loss_D_A", "+=", "self", ".", "backward_D_fake_basic", "(", "self", ".", "netD_A", ",", "fake_B", ")", "\n", "", "self", ".", "loss_D_A", "=", "loss_D_A", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_B": [[210, 219], ["cycle_gan_model.CycleGANModel.backward_D_real_basic", "range", "cycle_gan_model.CycleGANModel.fake_A_pool.query", "cycle_gan_model.CycleGANModel.backward_D_fake_basic"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_real_basic", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.query", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_fake_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_B\"\"\"", "\n", "#fake_A = self.fake_A_pool.query(self.fake_A)", "\n", "#self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)", "\n", "loss_D_B", "=", "self", ".", "backward_D_real_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A_all", "[", "i", "]", ")", "\n", "loss_D_B", "+=", "self", ".", "backward_D_fake_basic", "(", "self", ".", "netD_B", ",", "fake_A", ")", "\n", "", "self", ".", "loss_D_B", "=", "loss_D_B", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_G": [[220, 302], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "cycle_gan_model.CycleGANModel.get_expert_results", "range", "float", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "cycle_gan_model.CycleGANModel.loss_G_A.append", "cycle_gan_model.CycleGANModel.loss_G_B.append", "cycle_gan_model.CycleGANModel.loss_cycle_A.append", "cycle_gan_model.CycleGANModel.loss_cycle_B.append", "cycle_gan_model.CycleGANModel.get_expert_loss", "cycle_gan_model.CycleGANModel.loss_G_A[].mean", "cycle_gan_model.CycleGANModel.loss_G_B[].mean", "cycle_gan_model.CycleGANModel.loss_cycle_A[].mean", "cycle_gan_model.CycleGANModel.loss_cycle_B[].mean", "cycle_gan_model.CycleGANModel.loss_idt_A[].mean", "cycle_gan_model.CycleGANModel.loss_idt_B[].mean", "float", "cycle_gan_model.CycleGANModel.loss_G.backward", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cycle_gan_model.CycleGANModel.loss_idt_A.append", "cycle_gan_model.CycleGANModel.loss_idt_B.append", "cycle_gan_model.CycleGANModel.loss_idt_A.append", "cycle_gan_model.CycleGANModel.loss_idt_B.append", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.criterionGAN", "float", "float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cycle_gan_model.CycleGANModel.netG_A.get_expert", "cycle_gan_model.CycleGANModel.netG_B.get_expert", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cycle_gan_model.CycleGANModel.netD_A", "cycle_gan_model.CycleGANModel.netD_B", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionCycle", "[].mean", "cycle_gan_model.CycleGANModel.criterionDiversity", "cycle_gan_model.CycleGANModel.criterionDiversity", "float", "[].mean", "float", "[].mean", "[].mean", "cycle_gan_model.CycleGANModel.criterionIdt", "cycle_gan_model.CycleGANModel.criterionIdt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cycle_gan_model.CycleGANModel.panel_tracker.sum", "float", "[].mean", "[].mean", "cycle_gan_model.CycleGANModel.panel_tracker.sum", "float", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_results", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_loss", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.get_expert", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.GeneratorPanel.get_expert"], ["", "def", "backward_G", "(", "self", ",", "backward_loss", "=", "True", ")", ":", "\n", "        ", "\"\"\"Calculate the loss for generators G_A and G_B\"\"\"", "\n", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "current_batch_size", "=", "self", ".", "real_A", ".", "shape", "[", "0", "]", "\n", "# Identity loss", "\n", "losses", "=", "torch", ".", "zeros", "(", "self", ".", "n_experts", ",", "current_batch_size", "*", "2", ")", ".", "to", "(", "self", ".", "device", ")", "# n * batch_size", "\n", "self", ".", "loss_G_A", "=", "[", "]", "\n", "self", ".", "loss_G_B", "=", "[", "]", "\n", "self", ".", "loss_cycle_A", "=", "[", "]", "\n", "self", ".", "loss_cycle_B", "=", "[", "]", "\n", "self", ".", "loss_idt_A", "=", "[", "]", "\n", "self", ".", "loss_idt_B", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed: ||G_A(B) - B||", "\n", "                ", "self", ".", "idt_A", "=", "self", ".", "netG_A", ".", "get_expert", "(", "i", ")", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", ".", "append", "(", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", ")", "\n", "# G_B should be identity if real_A is fed: ||G_B(A) - A||", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", ".", "get_expert", "(", "i", ")", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", ".", "append", "(", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_idt_A", ".", "append", "(", "torch", ".", "zeros", "(", "current_batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "loss_idt_B", ".", "append", "(", "torch", ".", "zeros", "(", "current_batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# GAN loss D_A(G_A(A))", "\n", "", "self", ".", "loss_G_A", ".", "append", "(", "self", ".", "criterionGAN", "(", "self", ".", "netD_A", "(", "self", ".", "fake_B_all", "[", "i", "]", ")", ",", "True", ")", ")", "\n", "# GAN loss D_B(G_B(B))", "\n", "self", ".", "loss_G_B", ".", "append", "(", "self", ".", "criterionGAN", "(", "self", ".", "netD_B", "(", "self", ".", "fake_A_all", "[", "i", "]", ")", ",", "True", ")", ")", "\n", "# Forward cycle loss || G_B(G_A(A)) - A||", "\n", "self", ".", "loss_cycle_A", ".", "append", "(", "self", ".", "criterionCycle", "(", "self", ".", "rec_A_all", "[", "i", "]", ",", "self", ".", "real_A", ")", "*", "lambda_A", ")", "\n", "# Backward cycle loss || G_A(G_B(B)) - B||", "\n", "self", ".", "loss_cycle_B", ".", "append", "(", "self", ".", "criterionCycle", "(", "self", ".", "rec_B_all", "[", "i", "]", ",", "self", ".", "real_B", ")", "*", "lambda_B", ")", "\n", "losses", "[", "i", "]", "=", "self", ".", "get_expert_loss", "(", "i", ")", "\n", "", "expert_idx", "=", "self", ".", "get_expert_results", "(", "losses", ")", "# 2batch_size", "\n", "self", ".", "loss_G", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "current_batch_size", ")", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_trick", ":", "\n", "                ", "a_expert_loss_scale", "=", "float", "(", "self", ".", "panel_tracker", ".", "sum", "(", ")", "/", "float", "(", "self", ".", "panel_tracker", "[", "expert_idx", "[", "i", "]", "]", ")", "/", "float", "(", "self", ".", "n_experts", ")", ")", "\n", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "/", "a_expert_loss_scale", "\n", "b_expert_loss_scale", "=", "float", "(", "self", ".", "panel_tracker", ".", "sum", "(", ")", "/", "float", "(", "self", ".", "panel_tracker", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", ")", "/", "float", "(", "self", ".", "n_experts", ")", ")", "\n", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "/", "b_expert_loss_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_G", "+=", "(", "self", ".", "loss_G_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_G_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_cycle_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_A", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", ".", "mean", "(", ")", "+", "self", ".", "loss_idt_B", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "", "self", ".", "loss_G", "/=", "float", "(", "current_batch_size", ")", "\n", "\n", "# select fake and reconstruct images", "\n", "fake_B", "=", "torch", ".", "zeros", "(", "self", ".", "fake_B_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rec_A", "=", "torch", ".", "zeros", "(", "self", ".", "rec_A_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_A", "=", "torch", ".", "zeros", "(", "self", ".", "fake_A_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rec_B", "=", "torch", ".", "zeros", "(", "self", ".", "rec_B_all", "[", "0", "]", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "real_A", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "fake_B", "[", "i", "]", "=", "self", ".", "fake_B_all", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", "\n", "rec_A", "[", "i", "]", "=", "self", ".", "rec_A_all", "[", "expert_idx", "[", "i", "]", "]", "[", "i", "]", "\n", "fake_A", "[", "i", "]", "=", "self", ".", "fake_A_all", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", "\n", "rec_B", "[", "i", "]", "=", "self", ".", "rec_B_all", "[", "expert_idx", "[", "i", "+", "current_batch_size", "]", "]", "[", "i", "]", "\n", "\n", "# convert loss to mean", "\n", "", "loss_diversity", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "            ", "self", ".", "panel_tracker", "[", "i", "]", "+=", "(", "expert_idx", "==", "i", ")", ".", "sum", "(", ")", "\n", "self", ".", "epoch_panel_tracker", "[", "i", "]", "+=", "(", "expert_idx", "==", "i", ")", ".", "sum", "(", ")", "\n", "self", ".", "loss_G_A", "[", "i", "]", "=", "self", ".", "loss_G_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_G_B", "[", "i", "]", "=", "self", ".", "loss_G_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_cycle_A", "[", "i", "]", "=", "self", ".", "loss_cycle_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_cycle_B", "[", "i", "]", "=", "self", ".", "loss_cycle_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_idt_A", "[", "i", "]", "=", "self", ".", "loss_idt_A", "[", "i", "]", ".", "mean", "(", ")", "\n", "self", ".", "loss_idt_B", "[", "i", "]", "=", "self", ".", "loss_idt_B", "[", "i", "]", ".", "mean", "(", ")", "\n", "loss_diversity", "+=", "self", ".", "criterionDiversity", "(", "fake_B", ",", "self", ".", "fake_B_all", "[", "i", "]", ")", "*", "lambda_A", "+", "self", ".", "criterionDiversity", "(", "fake_A", ",", "self", ".", "fake_A_all", "[", "i", "]", ")", "*", "lambda_B", "\n", "", "loss_diversity", "/=", "-", "float", "(", "self", ".", "n_experts", ")", "\n", "self", ".", "loss_diversity", "=", "loss_diversity", "\n", "self", ".", "loss_G", "+=", "loss_diversity", "*", "self", ".", "opt", ".", "lambda_diversity", "\n", "if", "backward_loss", ":", "\n", "            ", "self", ".", "loss_G", ".", "backward", "(", "retain_graph", "=", "self", ".", "discriminate_feature", ")", "\n", "\n", "", "self", ".", "fake_B", "=", "fake_B", "\n", "self", ".", "rec_A", "=", "rec_A", "\n", "self", ".", "fake_A", "=", "fake_A", "\n", "self", ".", "rec_B", "=", "rec_B", "\n", "self", ".", "expert_idx", "=", "expert_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.optimize_parameters": [[303, 322], ["cycle_gan_model.CycleGANModel.forward", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_G.zero_grad", "cycle_gan_model.CycleGANModel.backward_G", "cycle_gan_model.CycleGANModel.optimizer_G.step", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_D.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_A", "cycle_gan_model.CycleGANModel.backward_D_B", "cycle_gan_model.CycleGANModel.optimizer_D.step", "cycle_gan_model.CycleGANModel.discriminator.set_input", "cycle_gan_model.CycleGANModel.discriminator.optimize"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_G", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.backward_D_B", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_discriminator.CycleGANDiscriminator.optimize"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# forward", "\n", "self", ".", "forward", "(", ")", "# compute fake images and reconstruction images.", "\n", "# G_A and G_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "False", ")", "# Ds require no gradients when optimizing Gs", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "# set G_A and G_B's gradients to zero", "\n", "self", ".", "backward_G", "(", ")", "# calculate gradients for G_A and G_B", "\n", "if", "self", ".", "discriminate_feature", ":", "\n", "            ", "self", ".", "discriminator", ".", "set_input", "(", "self", ".", "real_A", ",", "None", ",", "self", ".", "fake_B", ",", "self", ".", "real_B", ",", "self", ".", "fake_A", ")", "\n", "self", ".", "discriminator", ".", "optimize", "(", ")", "\n", "", "self", ".", "optimizer_G", ".", "step", "(", ")", "# update G_A and G_B's weights", "\n", "# D_A and D_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "# set D_A and D_B's gradients to zero", "\n", "self", ".", "backward_D_A", "(", ")", "# calculate gradients for D_A", "\n", "self", ".", "backward_D_B", "(", ")", "# calculate graidents for D_B", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "# update D_A and D_B's weights", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_current_losses": [[323, 330], ["super().get_current_losses"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_current_losses"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "super", "(", "CycleGANModel", ",", "self", ")", ".", "get_current_losses", "(", ")", "\n", "if", "self", ".", "discriminate_feature", ":", "\n", "            ", "errors_ret", "[", "\"loss_transfer\"", "]", "=", "self", ".", "discriminator", ".", "loss_transfer", "\n", "errors_ret", "[", "\"loss_gvbg\"", "]", "=", "self", ".", "discriminator", ".", "loss_gvbg", "\n", "errors_ret", "[", "\"loss_gvbd\"", "]", "=", "self", ".", "discriminator", ".", "loss_gvbd", "\n", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_loss": [[331, 340], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cycle_gan_model.CycleGANModel.loss_G_A[].mean", "cycle_gan_model.CycleGANModel.loss_G_B[].mean", "cycle_gan_model.CycleGANModel.loss_cycle_A[].mean", "cycle_gan_model.CycleGANModel.loss_cycle_B[].mean", "cycle_gan_model.CycleGANModel.loss_idt_A[].mean", "cycle_gan_model.CycleGANModel.loss_idt_B[].mean"], "methods", ["None"], ["", "def", "get_expert_loss", "(", "self", ",", "idx", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "cat", "(", "(", "self", ".", "loss_G_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_G_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "# 2batchsize", "\n", "if", "'c'", "in", "self", ".", "opt", ".", "expert_criteria", "and", "self", ".", "iteration", ">", "self", ".", "opt", ".", "c_criteria_iterations", ":", "\n", "            ", "loss", "+=", "torch", ".", "cat", "(", "(", "self", ".", "loss_cycle_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_cycle_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "\n", "#print(\"using c\")", "\n", "", "if", "'i'", "in", "self", ".", "opt", ".", "expert_criteria", "and", "self", ".", "iteration", ">", "self", ".", "opt", ".", "i_criteria_iterations", ":", "\n", "            ", "loss", "+=", "torch", ".", "cat", "(", "(", "self", ".", "loss_idt_A", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "self", ".", "loss_idt_B", "[", "idx", "]", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ",", "dim", "=", "0", ")", "\n", "#print(\"using i\")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.cycle_gan_model.CycleGANModel.get_expert_results": [[341, 362], ["losses.min", "numpy.random.randint", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "get_expert_results", "(", "self", ",", "losses", ")", ":", "\n", "        ", "_", ",", "expert_idx", "=", "losses", ".", "min", "(", "dim", "=", "0", ")", "# batch_size", "\n", "current_batch_size", "=", "expert_idx", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"none\"", "or", "self", ".", "iteration", ">", "self", ".", "opt", ".", "expert_warmup_iterations", "or", "self", ".", "cdm_mode", ":", "\n", "#print(\"expert using none\")", "\n", "            ", "return", "expert_idx", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"random\"", ":", "\n", "#print(\"expert using random\")", "\n", "                ", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_experts", ",", "size", "=", "current_batch_size", ")", "\n", "", "if", "self", ".", "opt", ".", "expert_warmup_mode", "==", "\"classwise\"", ":", "\n", "                ", "expert_idx", "=", "np", ".", "zeros", "(", "current_batch_size", ",", "dtype", "=", "\"uint8\"", ")", "\n", "for", "i", "in", "range", "(", "current_batch_size", ")", ":", "\n", "                    ", "classname", "=", "self", ".", "input_classnames", "[", "i", "]", "\n", "if", "classname", "in", "self", ".", "classwise_assignment", ":", "\n", "                        ", "expert_idx", "[", "i", "]", "=", "self", ".", "classwise_assignment", "[", "classname", "]", "\n", "", "else", ":", "\n", "                        ", "self", ".", "classwise_assignment", "[", "classname", "]", "=", "self", ".", "classwise_expert_idx", "\n", "self", ".", "classwise_expert_idx", "=", "(", "self", ".", "classwise_expert_idx", "+", "1", ")", "%", "self", ".", "n_experts", "\n", "expert_idx", "[", "i", "]", "=", "self", ".", "classwise_assignment", "[", "classname", "]", "\n", "", "", "return", "expert_idx", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.ImageFolder.__init__": [[43, 55], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.ImageFolder.__getitem__": [[56, 65], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.ImageFolder.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.is_image_file": [[19, 21], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset": [[23, 35], ["float", "os.path.isdir", "sorted", "os.walk", "sorted", "min", "os.walk", "len", "os.path.join", "image_folder.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ",", "max_dataset_size", "=", "float", "(", "\"inf\"", ")", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "classnames", ",", "_", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "classname", "in", "classnames", ":", "\n", "            ", "for", "_", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "classname", ")", ")", ")", ":", "\n", "                ", "for", "fname", "in", "fnames", ":", "\n", "                    ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "classname", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "", "", "", "", "return", "images", "[", ":", "min", "(", "max_dataset_size", ",", "len", "(", "images", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.default_loader": [[37, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.__init__": [[114, 124], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.ImagePool.query": [[125, 157], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "util.ImagePool.images.append", "torch.cat.append", "torch.cat.append", "random.uniform", "random.randint", "util.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.tensor2im": [[10, 29], ["np.tile.astype", "isinstance", "isinstance", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.diagnose_network": [[31, 48], ["net.parameters", "print", "print", "torch.mean", "torch.mean", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n", "", "def", "init_net", "(", "net", ",", "init_type", "=", "'kaiming'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "parallel", "=", "True", ",", "init_weight", "=", "True", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.save_image": [[50, 66], ["PIL.Image.fromarray", "image_pil.resize.save", "image_pil.resize.resize", "image_pil.resize.resize", "int", "int"], "function", ["None"], ["\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "if", "parallel", ":", "\n", "            ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "# multi-GPUs", "\n", "", "", "if", "init_weight", ":", "\n", "        ", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ")", "\n", "", "return", "net", "\n", "\n", "", "def", "get_cdm_path", "(", "cdm_root", ",", "exp_name", ",", "dataset_name", ",", "self_name", ",", "other_domain_name", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "if", "visualize", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "cdm_root", ",", "\"visualize\"", ",", "exp_name", ",", "dataset_name", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "cdm_root", ",", "exp_name", ",", "dataset_name", ")", "\n", "", "cdm_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"%s2%s\"", "%", "(", "self_name", ",", "other_domain_name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.print_numpy": [[68, 82], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["\n", "", "def", "get_cdm_file_name", "(", "path", ")", ":", "\n", "    ", "class_name", ",", "img_name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "return", "\"%s_%s.png\"", "%", "(", "class_name", ",", "img_name", ")", "\n", "\n", "", "def", "get_expert_cdm_file_name", "(", "path", ",", "expert_idx", ")", ":", "\n", "    ", "class_name", ",", "img_name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "return", "\"%s_%s_%d.png\"", "%", "(", "class_name", ",", "img_name", ",", "expert_idx", ")", "\n", "\n", "", "def", "scale_to_tensor", "(", "tensor", ")", ":", "\n", "# scale to 0->1", "\n", "    ", "tensor", "=", "(", "tensor", "-", "tensor", ".", "min", "(", ")", ")", "/", "(", "tensor", ".", "max", "(", ")", "-", "tensor", ".", "min", "(", ")", ")", "\n", "return", "tensor", "\n", "\n", "", "def", "setup_seed", "(", "seed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.mkdirs": [[84, 95], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.mkdir", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.mkdir"], ["torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.util.mkdir": [[97, 105], ["os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.__init__": [[18, 47], ["os.path.join", "torch.device", "torch.device", "os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the BaseModel class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        When creating your custom class, you need to implement your own initialization.\n        In this function, you should first call <BaseModel.__init__(self, opt)>\n        Then, you need to define four lists:\n            -- self.loss_names (str list):          specify the training losses that you want to plot and save.\n            -- self.model_names (str list):         define networks used in our training.\n            -- self.visual_names (str list):        specify the images that you want to display and save.\n            -- self.optimizers (optimizer list):    define and initialize optimizers. You can define one optimizer for each network. If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "# get device name: CPU or GPU", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "exp_name", ")", "# save all the checkpoints to save_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "", "if", "opt", ".", "preprocess", "!=", "'scale_width'", ":", "# with [scale_width], input images might have different sizes, which hurts the performance of cudnn.benchmark.", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "self", ".", "metric", "=", "0", "# used for learning rate policy 'plateau'", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.modify_commandline_options": [[48, 60], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new model-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_input": [[61, 69], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): includes the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.forward": [[70, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.optimize_parameters": [[75, 79], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.setup": [[80, 92], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Load and print networks; create schedulers\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.eval": [[93, 99], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.test": [[100, 109], ["torch.no_grad", "base_model.BaseModel.forward", "base_model.BaseModel.compute_visuals"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.compute_visuals"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time.\n\n        This function wraps <forward> function in no_grad() so we don't save intermediate steps for backprop\n        It also calls <compute_visuals> to produce additional visualization results\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "self", ".", "compute_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.compute_visuals": [[110, 113], ["None"], "methods", ["None"], ["", "", "def", "compute_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate additional output images for visdom and HTML visualization\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_image_paths": [[114, 117], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return image paths that are used to load current data\"\"\"", "\n", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.update_learning_rate": [[118, 129], ["print", "scheduler.step", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update learning rates for all the networks; called at the end of every epoch\"\"\"", "\n", "old_lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "                ", "scheduler", ".", "step", "(", "self", ".", "metric", ")", "\n", "", "else", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate %.7f -> %.7f'", "%", "(", "old_lr", ",", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_current_visuals": [[130, 139], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return visualization images. train.py will display these images with visdom, and save the images to a HTML\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "img", "=", "getattr", "(", "self", ",", "name", ")", "\n", "img", "=", "(", "img", "+", "1.0", ")", "/", "2.0", "\n", "visual_ret", "[", "name", "]", "=", "img", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.get_current_losses": [[140, 151], ["collections.OrderedDict", "isinstance", "float", "range", "getattr", "float", "getattr", "str"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "if", "'D'", "in", "name", "or", "'similar'", "in", "name", "or", "'diversity'", "in", "name", ":", "\n", "                    ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_experts", ")", ":", "\n", "                        ", "errors_ret", "[", "name", "+", "\"_\"", "+", "str", "(", "i", ")", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", "[", "i", "]", ")", "# float(...) works for both scalar tensor and float number", "\n", "", "", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.save_networks": [[152, 172], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "getattr.cuda", "torch.save", "len", "torch.save", "torch.save", "getattr.cpu().state_dict", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.cpu", "getattr.module.cpu", "getattr.cpu"], "methods", ["None"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Save all the networks to the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "if", "'D'", "in", "name", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.__patch_instance_norm_state_dict": [[173, 186], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "\"\"\"Fix InstanceNorm checkpoints incompatibility (prior to 0.4)\"\"\"", "\n", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.load_networks": [[187, 211], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Load all the networks from the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.print_networks": [[212, 229], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_model.BaseModel.set_requires_grad": [[230, 242], ["isinstance", "net.parameters"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.dda_model.backbone.ResNet.parameters"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__": [[19, 38], ["cyclegan.base_dataset.BaseDataset.__init__", "sorted", "sorted", "len", "len", "cyclegan.base_dataset.get_transform", "cyclegan.base_dataset.get_transform", "cyclegan.image_folder.make_dataset", "cyclegan.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__init__", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_transform", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.base_dataset.get_transform", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset", "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "dir_A", "=", "opt", ".", "a_root", "\n", "self", ".", "dir_B", "=", "opt", ".", "b_root", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainA'", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainB'", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "# get the size of dataset A", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "# get the size of dataset B", "\n", "btoA", "=", "self", ".", "opt", ".", "direction", "==", "'BtoA'", "\n", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "if", "btoA", "else", "self", ".", "opt", ".", "input_nc", "# get the number of channels of input image", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "if", "btoA", "else", "self", ".", "opt", ".", "output_nc", "# get the number of channels of output image", "\n", "self", ".", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "grayscale", "=", "(", "input_nc", "==", "1", ")", ")", "\n", "self", ".", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "grayscale", "=", "(", "output_nc", "==", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__getitem__": [[39, 64], ["PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform_A", "unaligned_dataset.UnalignedDataset.transform_B", "random.randint", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index (int)      -- a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor)       -- an image in the input domain\n            B (tensor)       -- its corresponding image in the target domain\n            A_paths (str)    -- image paths\n            B_paths (str)    -- image paths\n        \"\"\"", "\n", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "# make sure index is within then range", "\n", "if", "self", ".", "opt", ".", "serial_batches", ":", "# make sure index is within then range", "\n", "            ", "index_B", "=", "index", "%", "self", ".", "B_size", "\n", "", "else", ":", "# randomize the index for domain B to avoid fixed pairs.", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# apply image transformation", "\n", "A", "=", "self", ".", "transform_A", "(", "A_img", ")", "\n", "B", "=", "self", ".", "transform_B", "(", "B_img", ")", "\n", "\n", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.cyclegan.unaligned_dataset.UnalignedDataset.__len__": [[65, 72], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\n\n        As we have two datasets with potentially different number of images,\n        we take a maximum of\n        \"\"\"", "\n", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.dda_feature_options.DDAFeatureOptions.initialize": [[5, 76], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "initialize", "(", "parser", ")", ":", "\n", "# Train options", "\n", "# General", "\n", "        ", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Debug mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "\"debug\"", ",", "help", "=", "'Experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "\"/data2/xxxxx/Model/dda/dda_feature_models\"", ",", "help", "=", "'DDA checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'DDA print loss frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_interval'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'Test interval'", ")", "\n", "\n", "# Data loading", "\n", "parser", ".", "add_argument", "(", "'--s_name'", ",", "type", "=", "str", ",", "default", "=", "\"A\"", ",", "help", "=", "'source domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_name'", ",", "type", "=", "str", ",", "default", "=", "\"D\"", ",", "help", "=", "'target domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "\"office\"", ",", "help", "=", "'dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--s_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'source data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'target data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Train batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_scale_size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'scale the loaded image to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "\n", "# DDA Training", "\n", "parser", ".", "add_argument", "(", "\"--baseline\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use baseline for training dda (optimizing P(Y|X)).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "31", ",", "help", "=", "'Number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_iterations'", ",", "type", "=", "int", ",", "default", "=", "20000", ",", "help", "=", "'Number of training iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_name'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'ResNet name'", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Z dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'DDA backbone learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae_lr'", ",", "type", "=", "float", ",", "default", "=", "0.00001", ",", "help", "=", "'VAE learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_lr'", ",", "type", "=", "float", ",", "default", "=", "0.003", ",", "help", "=", "'DDA linear learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'DDA linear weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'DDA linear momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'kaiming'", ",", "help", "=", "'network initialization [normal | xavier | kaiming | orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--backward_linear_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, linear loss in dda will be backward for backbone update'", ")", "\n", "parser", ".", "add_argument", "(", "'--accurate_mu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, mu will be estimated using running average during training, and accurately calculated during testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_smoothing'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, use label smoothing instead of cross entropy.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta_vae\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Beta for beta-vae.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_iteration'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Pretraining epochs for encoder and linear in dda'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_target_estimate'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, use t2s and x_t to train tildeX linear and mu instead of x_s and x_s2t'", ")", "\n", "# DDA Testing", "\n", "parser", ".", "add_argument", "(", "'--test_interval'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'Test interval'", ")", "\n", "\n", "# CycleGAN", "\n", "parser", ".", "add_argument", "(", "'--n_experts'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of experts'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'# of gen filters in the last conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of discriminator conv layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_blocks_G'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of generator blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'batch'", ",", "help", "=", "'instance normalization or batch normalization [instance | batch | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--backward_generator'", ",", "action", "=", "'store_true'", ",", "help", "=", "'backward generator loss to backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "help", "=", "'the type of GAN objective. [vanilla| lsgan | wgangp]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_similar'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'the mapping must still be similar to itself'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_criteria\"", ",", "type", "=", "str", ",", "default", "=", "\"d\"", ",", "help", "=", "'d | dc | dci; discriminator only; d + cycle consistency; d + cycle + identity'", ")", "\n", "parser", ".", "add_argument", "(", "\"--c_criteria_iterations\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'if c in expert_criteria, after this many iterations, start using cycle consistency'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_criteria_iterations\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'if i in expert_criteria, after this many iterations, start using identity'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_warmup_mode\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "help", "=", "'none | random | classwise'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_warmup_iterations\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warm up iterations'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_trick\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if using lr trick'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.dda_feature_options.DDAFeatureOptions.process_opt_str": [[77, 120], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_opt_str", "(", "opt", ",", "opt_str", ")", ":", "\n", "        ", "opt_str", "+=", "opt", ".", "name", "\n", "\n", "opt_str", "+=", "\"-%s%s2%s\"", "%", "(", "opt", ".", "dataset_name", ",", "opt", ".", "s_name", ",", "opt", ".", "t_name", ")", "\n", "\n", "opt_str", "+=", "\"-%s\"", "%", "(", "opt", ".", "resnet_name", ")", "\n", "\n", "opt_str", "+=", "\"-z%d\"", "%", "(", "opt", ".", "z_dim", ")", "\n", "\n", "# opt_str += \"-b%.4fv%.4fl%.4f\" % (opt.backbone_lr, opt.vae_lr, opt.linear_lr)", "\n", "\n", "if", "opt", ".", "baseline", ":", "\n", "            ", "opt_str", "+=", "\"-baseline\"", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "backward_linear_loss", ":", "\n", "                ", "opt_str", "+=", "\"-bl\"", "\n", "", "if", "opt", ".", "pretrain_iteration", "!=", "0", ":", "\n", "                ", "opt_str", "+=", "\"-p%d\"", "%", "(", "opt", ".", "pretrain_iteration", ")", "\n", "\n", "", "", "if", "opt", ".", "accurate_mu", ":", "\n", "            ", "opt_str", "+=", "\"-mu\"", "\n", "", "if", "opt", ".", "beta_vae", "!=", "1.0", ":", "\n", "            ", "opt_str", "+=", "\"-beta%.1f\"", "%", "opt", ".", "beta_vae", "\n", "\n", "", "if", "opt", ".", "label_smoothing", ":", "\n", "            ", "opt_str", "+=", "\"-ls\"", "\n", "\n", "", "if", "opt", ".", "use_target_estimate", ":", "\n", "            ", "opt_str", "+=", "\"-te\"", "\n", "\n", "", "if", "opt", ".", "backward_generator", ":", "\n", "            ", "opt_str", "+=", "\"-backG\"", "\n", "\n", "# CycleGAN", "\n", "", "opt_str", "+=", "\"-g%dd%d-ngf%dndf%d-%s-%s\"", "%", "(", "opt", ".", "n_blocks_G", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "ngf", ",", "opt", ".", "ndf", ",", "opt", ".", "norm", ",", "opt", ".", "gan_mode", ")", "\n", "\n", "opt_str", "+=", "\"-n%d\"", "%", "opt", ".", "n_experts", "\n", "\n", "opt_str", "+=", "\"-lc%dli%.1fls%.1f\"", "%", "(", "opt", ".", "lambda_A", ",", "opt", ".", "lambda_identity", ",", "opt", ".", "lambda_similar", ")", "\n", "\n", "opt_str", "+=", "\"-E%s-%s%d-lr%d\"", "%", "(", "opt", ".", "expert_criteria", ",", "opt", ".", "expert_warmup_mode", ",", "opt", ".", "expert_warmup_iterations", ",", "opt", ".", "lr_trick", ")", "\n", "return", "opt_str", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.transformation_options.TransformationOptions.initialize": [[8, 100], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "initialize", "(", "parser", ")", ":", "\n", "############################ Base options #################################", "\n", "# basic parameters", "\n", "        ", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Debug mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--a_root'", ",", "required", "=", "True", ",", "help", "=", "'path to domain A'", ")", "\n", "parser", ".", "add_argument", "(", "'--b_root'", ",", "required", "=", "True", ",", "help", "=", "'path to domain B'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'auto_set'", ",", "help", "=", "'Will be automatically set'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'/data2/xxxx/Model/dda/cyclegan'", ",", "help", "=", "'models are saved here'", ")", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in the last conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'specify discriminator architecture [basic | n_layers | pixel]. The basic model is a 70x70 PatchGAN. n_layers allows you to specify the layers in the discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'specify generator architecture [resnet_9blocks | resnet_6blocks | resnet_3blocks | resnet_2blocks | unet_256 | unet_128]'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization [instance | batch | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal | xavier | kaiming | orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "# dataset parameters", "\n", "#parser.add_argument('--dataset_mode', type=str, default='unaligned', help='chooses how datasets are loaded. [unaligned | aligned | single | colorization]')", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "#parser.add_argument('--display_winsize', type=int, default=256, help='display window size for both visdom and HTML')", "\n", "# additional parameters", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{load_size}'", ")", "\n", "\n", "#################################### Train options ######################################", "\n", "# IM options", "\n", "parser", ".", "add_argument", "(", "'--n_experts'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of experts.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_criteria\"", ",", "type", "=", "str", ",", "default", "=", "\"d\"", ",", "help", "=", "'d | dc | dci; discriminator only; d + cycle consistency; d + cycle + identity'", ")", "\n", "parser", ".", "add_argument", "(", "\"--c_criteria_iterations\"", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'if c in expert_criteria, after this many iterations, start using cycle consistency'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_criteria_iterations\"", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'if i in expert_criteria, after this many iterations, start using identity'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_warmup_mode\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "help", "=", "'none | random | classwise'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expert_warmup_iterations\"", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "help", "=", "'warm up iterations'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_trick\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'if using lr trick'", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stop_active_expert\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'if n_active expert<n_experts-1, stop'", ")", "\n", "\n", "# Discriminator options", "\n", "parser", ".", "add_argument", "(", "'--cg_resnet_name'", ",", "type", "=", "str", ",", "default", "=", "\"ResNet50\"", ",", "help", "=", "'ResNet name'", ")", "\n", "parser", ".", "add_argument", "(", "'--cg_num_classes'", ",", "type", "=", "int", ",", "default", "=", "31", ",", "help", "=", "'Number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--cg_align_feature'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'Align feature for cyclegan'", ")", "\n", "parser", ".", "add_argument", "(", "'--cg_align_logits'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "'Align logits for cyclegan'", ")", "\n", "parser", ".", "add_argument", "(", "\"--cg_gvbd_weight\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"GVBD weight.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cg_gvbg_weight\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"GVBG weight.\"", ")", "\n", "\n", "# cyclegan options", "\n", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_diversity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for diversity loss'", ")", "\n", "# generic options", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "# network saving and loading parameters", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_by_iter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether saves model by iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of epochs with the initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epochs_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of epochs to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "help", "=", "'the type of GAN objective. [vanilla| lsgan | wgangp]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'linear'", ",", "help", "=", "'learning rate policy. [linear | step | plateau | cosine]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "##################################### Test Options ###################################", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "# Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.transformation_options.TransformationOptions.process_opt_str": [[101, 173], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_opt_str", "(", "opt", ",", "opt_str", ")", ":", "\n", "        ", "opt_str", "+=", "opt", ".", "name", "\n", "\n", "opt_str", "+=", "\"-ngf%dndf%d\"", "%", "(", "opt", ".", "ngf", ",", "opt", ".", "ndf", ")", "\n", "\n", "if", "opt", ".", "netD", "==", "\"basic\"", ":", "\n", "            ", "opt_str", "+=", "\"-netDb\"", "\n", "", "elif", "opt", ".", "netD", "==", "\"n_layers\"", ":", "\n", "            ", "opt_str", "+=", "\"-netDn%d\"", "%", "(", "opt", ".", "n_layers_D", ")", "\n", "", "elif", "opt", ".", "netD", "==", "\"pixel\"", ":", "\n", "            ", "opt_str", "+=", "\"-netDp\"", "\n", "\n", "", "if", "opt", ".", "netG", "==", "\"resnet_9blocks\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG9\"", "\n", "", "elif", "opt", ".", "netG", "==", "\"resnet_6blocks\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG6\"", "\n", "", "elif", "opt", ".", "netG", "==", "\"resnet_3blocks\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG3\"", "\n", "", "elif", "opt", ".", "netG", "==", "\"resnet_2blocks\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG2\"", "\n", "", "elif", "opt", ".", "netG", "==", "\"unet_256\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG256\"", "\n", "", "elif", "opt", ".", "netG", "==", "\"unet_128\"", ":", "\n", "            ", "opt_str", "+=", "\"-netG128\"", "\n", "\n", "", "opt_str", "+=", "\"-init%s%.2f\"", "%", "(", "opt", ".", "init_type", "[", ":", "1", "]", ",", "opt", ".", "init_gain", ")", "\n", "\n", "if", "opt", ".", "no_dropout", ":", "\n", "            ", "opt_str", "+=", "\"-nodrop\"", "\n", "\n", "", "if", "opt", ".", "no_flip", ":", "\n", "            ", "opt_str", "+=", "\"-noflip\"", "\n", "\n", "# n epochs with initial learning rate", "\n", "", "opt_str", "+=", "\"-epoch%d\"", "%", "(", "opt", ".", "n_epochs", ")", "\n", "\n", "# n epochs to decay learning rate", "\n", "if", "opt", ".", "n_epochs_decay", "!=", "100", ":", "\n", "            ", "opt_str", "+=", "\"-decay%d\"", "%", "(", "opt", ".", "n_epochs_decay", ")", "\n", "\n", "", "opt_str", "+=", "\"-batch%d\"", "%", "(", "opt", ".", "batch_size", ")", "\n", "\n", "opt_str", "+=", "\"-lrp%s\"", "%", "(", "opt", ".", "lr_policy", "[", ":", "1", "]", ")", "\n", "\n", "opt_str", "+=", "\"-lr%.4fb%.1f\"", "%", "(", "opt", ".", "lr", ",", "opt", ".", "beta1", ")", "\n", "\n", "opt_str", "+=", "\"-gan%s\"", "%", "(", "opt", ".", "gan_mode", "[", ":", "1", "]", ")", "\n", "\n", "opt_str", "+=", "\"-lA%.1flB%.1fli%.1f\"", "%", "(", "opt", ".", "lambda_A", ",", "opt", ".", "lambda_B", ",", "opt", ".", "lambda_identity", ")", "\n", "\n", "if", "opt", ".", "lambda_diversity", ">", "0", ":", "\n", "            ", "opt_str", "+=", "\"-lD%.2f\"", "%", "(", "opt", ".", "lambda_diversity", ")", "\n", "\n", "# IM options", "\n", "", "opt_str", "+=", "\"-n%d\"", "%", "(", "opt", ".", "n_experts", ")", "\n", "if", "opt", ".", "expert_criteria", "!=", "\"d\"", ":", "\n", "            ", "opt_str", "+=", "\"-%s_%d_%d\"", "%", "(", "opt", ".", "expert_criteria", ",", "opt", ".", "c_criteria_iterations", ",", "opt", ".", "i_criteria_iterations", ")", "\n", "\n", "", "if", "opt", ".", "expert_warmup_mode", "!=", "\"none\"", ":", "\n", "            ", "opt_str", "+=", "\"-%s%d\"", "%", "(", "opt", ".", "expert_warmup_mode", "[", "0", "]", ",", "opt", ".", "expert_warmup_iterations", ")", "\n", "\n", "", "if", "opt", ".", "lr_trick", "==", "0", ":", "\n", "            ", "opt_str", "+=", "\"-nolr\"", "\n", "\n", "", "if", "opt", ".", "cg_align_feature", "or", "opt", ".", "cg_align_logits", ":", "\n", "            ", "opt_str", "+=", "\"-f%dl%d_g%.1fd%.1f\"", "%", "(", "opt", ".", "cg_align_feature", ",", "opt", ".", "cg_align_logits", ",", "opt", ".", "cg_gvbg_weight", ",", "opt", ".", "cg_gvbd_weight", ")", "\n", "if", "\"50\"", "in", "opt", ".", "cg_resnet_name", ":", "\n", "                ", "opt_str", "+=", "\"_50\"", "\n", "", "else", ":", "\n", "                ", "opt_str", "+=", "\"_101\"", "\n", "", "", "return", "opt_str", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.dda_options.DDAOptions.initialize": [[5, 76], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "initialize", "(", "parser", ")", ":", "\n", "# Train options", "\n", "# General", "\n", "        ", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Debug mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "\"debug\"", ",", "help", "=", "'Experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "\"/data2/xxxxx/Model/dda/dda_models\"", ",", "help", "=", "'DDA checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'DDA print loss frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_interval'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'Test interval'", ")", "\n", "\n", "# Data loading", "\n", "parser", ".", "add_argument", "(", "\"--cdt_exp_name\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Cross domain transformation experiment name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--s_name'", ",", "type", "=", "str", ",", "default", "=", "\"A\"", ",", "help", "=", "'source domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_name'", ",", "type", "=", "str", ",", "default", "=", "\"D\"", ",", "help", "=", "'target domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "\"office\"", ",", "help", "=", "'dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--cdm_path'", ",", "type", "=", "str", ",", "default", "=", "\"/data2/xxxxx/Model/dda/cdm\"", ",", "help", "=", "'location of cross-domain mappings'", ")", "\n", "parser", ".", "add_argument", "(", "'--s_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'source data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'target data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_batch_size'", ",", "type", "=", "int", ",", "default", "=", "36", ",", "help", "=", "'Train batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "36", ",", "help", "=", "'Test batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_scale_size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'scale the loaded image to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "\n", "# DDA Training", "\n", "parser", ".", "add_argument", "(", "\"--baseline\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use baseline for training dda (optimizing P(Y|X)).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--update_backbone'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'when using baseline, whether to update backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_mapping'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'when using baseline, use source instead of s2t mapping'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_train_mode'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Always keep backbone at train mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "31", ",", "help", "=", "'Number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_iterations'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'Number of training iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_name'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'ResNet name'", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_maxpool\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use maxpooling in resnet last layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--freeze_layer1\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Freeze layer1 in backbone\"", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Z dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'DDA backbone learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae_lr'", ",", "type", "=", "float", ",", "default", "=", "0.00001", ",", "help", "=", "'VAE learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_lr'", ",", "type", "=", "float", ",", "default", "=", "0.003", ",", "help", "=", "'DDA linear learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'DDA linear weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'DDA linear momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_init_type'", ",", "type", "=", "str", ",", "default", "=", "'kaiming'", ",", "help", "=", "'network initialization [normal | xavier | kaiming | orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dda_init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--align_feature\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Add an alignment loss such that s2t resembles t features.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--align_logits\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Add an alignment loss on logits such that s2t resembles t features.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--align_t2s\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Additionally align t2s and s\"", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator_hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'Hidden dim for discriminator network'", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator_lr'", ",", "type", "=", "float", ",", "default", "=", "0.003", ",", "help", "=", "'Discriminator network lr'", ")", "\n", "parser", ".", "add_argument", "(", "\"--gvbd_weight\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"GVBD weight.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gvbg_weight\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"GVBG weight.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--alignment_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"If use align feature, the weight for alignment loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--backward_linear_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, linear loss in dda will be backward for backbone update'", ")", "\n", "parser", ".", "add_argument", "(", "'--accurate_mu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, mu will be estimated using running average during training, and accurately calculated during testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_entropy_weight'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, there will be no entropy reweighing when calculating loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_smoothing'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, use label smoothing instead of cross entropy.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta_vae\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Beta for beta-vae.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_iteration'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Pretraining epochs for encoder and linear in dda'", ")", "\n", "parser", ".", "add_argument", "(", "'--bundle_transform'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, original image and cdm will be transformed together'", ")", "\n", "parser", ".", "add_argument", "(", "'--bundle_resized_crop'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, use random resized crop on original image and cdm'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_target_estimate'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if enabled, use t2s and x_t to train tildeX linear and mu instead of x_s and x_s2t'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_linear_logits'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use linear layer to produce logits for alignment'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_dda2'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use DDA model2'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Dropout for tilde x'", ")", "\n", "parser", ".", "add_argument", "(", "'--all_experts'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use all experts\"", ")", "\n", "parser", ".", "add_argument", "(", "'--n_experts'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Pretraining epochs for encoder and linear in dda'", ")", "\n", "# DDA Testing", "\n", "parser", ".", "add_argument", "(", "'--test_interval'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'Test interval'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.dda_options.DDAOptions.process_opt_str": [[77, 146], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_opt_str", "(", "opt", ",", "opt_str", ")", ":", "\n", "        ", "opt_str", "+=", "opt", ".", "name", "\n", "\n", "opt_str", "+=", "\"-%s%s2%s\"", "%", "(", "opt", ".", "dataset_name", ",", "opt", ".", "s_name", ",", "opt", ".", "t_name", ")", "\n", "\n", "opt_str", "+=", "\"-%s\"", "%", "(", "opt", ".", "resnet_name", ")", "\n", "\n", "opt_str", "+=", "\"-z%d\"", "%", "(", "opt", ".", "z_dim", ")", "\n", "\n", "# opt_str += \"-b%.4fv%.4fl%.4f\" % (opt.backbone_lr, opt.vae_lr, opt.linear_lr)", "\n", "\n", "if", "opt", ".", "align_feature", ":", "\n", "            ", "opt_str", "+=", "\"-af\"", "\n", "", "if", "opt", ".", "align_logits", ":", "\n", "            ", "opt_str", "+=", "\"=al\"", "\n", "", "if", "opt", ".", "align_feature", "or", "opt", ".", "align_logits", ":", "\n", "            ", "opt_str", "+=", "\"-d%d\"", "%", "(", "opt", ".", "discriminator_hidden_dim", ")", "\n", "# opt_str += \"-dlr%.4f\" % (opt.discriminator_lr)", "\n", "opt_str", "+=", "\"-w%.1f\"", "%", "(", "opt", ".", "alignment_weight", ")", "\n", "opt_str", "+=", "\"-gvbd%.1f\"", "%", "(", "opt", ".", "gvbd_weight", ")", "\n", "opt_str", "+=", "\"-gvbg%.1f\"", "%", "(", "opt", ".", "gvbg_weight", ")", "\n", "\n", "", "if", "opt", ".", "baseline", ":", "\n", "            ", "opt_str", "+=", "\"-baseline%d%d%d\"", "%", "(", "opt", ".", "update_backbone", ",", "opt", ".", "no_mapping", ",", "opt", ".", "backbone_train_mode", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "backward_linear_loss", ":", "\n", "                ", "opt_str", "+=", "\"-bl\"", "\n", "", "if", "opt", ".", "pretrain_iteration", "!=", "0", ":", "\n", "                ", "opt_str", "+=", "\"-p%d\"", "%", "(", "opt", ".", "pretrain_iteration", ")", "\n", "\n", "", "", "if", "opt", ".", "accurate_mu", ":", "\n", "            ", "opt_str", "+=", "\"-mu\"", "\n", "", "if", "opt", ".", "beta_vae", "!=", "1.0", ":", "\n", "            ", "opt_str", "+=", "\"-beta%.1f\"", "%", "opt", ".", "beta_vae", "\n", "\n", "", "if", "opt", ".", "no_entropy_weight", ":", "\n", "            ", "opt_str", "+=", "\"-ne\"", "\n", "\n", "", "if", "opt", ".", "label_smoothing", ":", "\n", "            ", "opt_str", "+=", "\"-ls\"", "\n", "\n", "", "if", "opt", ".", "bundle_transform", ":", "\n", "            ", "if", "not", "opt", ".", "bundle_resized_crop", ":", "\n", "                ", "opt_str", "+=", "\"-bt\"", "\n", "", "else", ":", "\n", "                ", "opt_str", "+=", "\"-btr\"", "\n", "\n", "", "", "if", "opt", ".", "use_target_estimate", ":", "\n", "            ", "opt_str", "+=", "\"-te\"", "\n", "\n", "", "if", "opt", ".", "use_linear_logits", ":", "\n", "            ", "opt_str", "+=", "\"-ll\"", "\n", "\n", "", "if", "opt", ".", "use_maxpool", ":", "\n", "            ", "opt_str", "+=", "\"-max\"", "\n", "\n", "", "if", "opt", ".", "freeze_layer1", ":", "\n", "            ", "opt_str", "+=", "\"f1\"", "\n", "\n", "", "if", "opt", ".", "use_dda2", ":", "\n", "            ", "opt_str", "+=", "\"-2\"", "\n", "\n", "", "if", "opt", ".", "use_dropout", ":", "\n", "            ", "opt_str", "+=", "\"-dr\"", "\n", "\n", "", "if", "opt", ".", "all_experts", ":", "\n", "            ", "opt_str", "+=", "\"-ae%d\"", "%", "(", "opt", ".", "n_experts", ")", "\n", "", "return", "opt_str", "", "", "", ""]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.cdm_options.CDMOptions.initialize": [[5, 16], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "initialize", "(", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--s_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'source data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_dset'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'target data txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--s_name'", ",", "type", "=", "str", ",", "default", "=", "\"A\"", ",", "help", "=", "'source domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--t_name'", ",", "type", "=", "str", ",", "default", "=", "\"D\"", ",", "help", "=", "'target domain name'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "\"office\"", ",", "help", "=", "'dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--cdm_path'", ",", "type", "=", "str", ",", "default", "=", "\"/data2/xxxx/Model/dda/cdm\"", ",", "help", "=", "'location of cross-domain mappings'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Turn on visualization mode\"", ")", "\n", "parser", ".", "add_argument", "(", "'--all_experts'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use all experts\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yue-zhongqi_tcm.options.cdm_options.CDMOptions.process_opt_str": [[17, 20], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_opt_str", "(", "opt", ",", "opt_str", ")", ":", "\n", "        ", "return", "opt_str", "", "", "", ""]]}