{"home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.__init__": [[9, 46], ["EF_HC.EF_HC.EF_HC", "len", "range", "range", "range", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "avg_bandwidth", "=", "5000", "\n", "is_barplots", "=", "True", "\n", "\n", "# Simulation parameters", "\n", "self", ".", "model_name", "=", "\"SVM\"", "\n", "self", ".", "dataset_name", "=", "\"FMNIST\"", "\n", "self", ".", "num_epochs", "=", "2", "\n", "self", ".", "num_agents", "=", "10", "\n", "self", ".", "graph_connectivities", "=", "[", "2", "*", "i", "/", "10", "for", "i", "in", "range", "(", "1", ",", "6", ")", "]", "\n", "self", ".", "system_bandwidth_parameters", "=", "[", "i", "/", "10", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "# self.data_distributions = [\"iid\", \"non_iid\", \"labels_per_agent\"]", "\n", "self", ".", "data_distributions", "=", "[", "\"non_iid\"", ",", "\"labels_per_agent\"", "]", "\n", "self", ".", "labels_per_agents", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "self", ".", "r", "=", "self", ".", "avg_bandwidth", "*", "1e-2", "\n", "\n", "lpa", "=", "1", "if", "\"labels_per_agent\"", "in", "self", ".", "data_distributions", "else", "0", "\n", "self", ".", "simulation_count", "=", "len", "(", "self", ".", "labels_per_agents", ")", "*", "lpa", "\n", "self", ".", "simulation_count", "+=", "(", "len", "(", "self", ".", "graph_connectivities", ")", "+", "len", "(", "self", ".", "system_bandwidth_parameters", ")", ")", "*", "(", "len", "(", "self", ".", "data_distributions", ")", "-", "lpa", ")", "\n", "\n", "self", ".", "simulation_counter", "=", "1", "\n", "\n", "self", ".", "ef_hc", "=", "EF_HC", "(", "\n", "model_name", "=", "self", ".", "model_name", ",", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", "num_epochs", "=", "self", ".", "num_epochs", ",", "\n", "num_agents", "=", "self", ".", "num_agents", ",", "\n", "graph_connectivity", "=", "0.4", ",", "\n", "system_bandwidth", "=", "self", ".", "avg_bandwidth", "*", "self", ".", "num_agents", ",", "\n", "system_bandwidth_type", "=", "\"two_slice\"", ",", "\n", "system_bandwidth_parameter", "=", "0.8", ",", "\n", "data_distribution", "=", "\"non_iid\"", ",", "\n", "labels_per_agent", "=", "None", ",", "\n", "batch_size", "=", "1", ",", "\n", "learning_rate_type", "=", "\"iter_decay\"", ",", "\n", "r", "=", "self", ".", "r", ",", "\n", "is_barplots", "=", "is_barplots", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.save_results": [[49, 61], ["pandas.ExcelWriter", "results.items", "pandas.ExcelWriter", "results.items", "pandas.DataFrame", "pandas.DataFrame.to_excel", "pandas.DataFrame", "pandas.DataFrame.to_excel"], "methods", ["None"], ["", "def", "save_results", "(", "self", ",", "results", ",", "filepath1", ",", "filepath2", ")", ":", "\n", "\t\t", "with", "pd", ".", "ExcelWriter", "(", "filepath1", ")", "as", "writer", ":", "\n", "\t\t\t", "for", "threshold_type", ",", "log", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "log1", ",", "_", "=", "log", "\n", "df1", "=", "pd", ".", "DataFrame", "(", "log1", ")", "\n", "df1", ".", "to_excel", "(", "writer", ",", "sheet_name", "=", "threshold_type", ")", "\n", "\n", "", "", "with", "pd", ".", "ExcelWriter", "(", "filepath2", ")", "as", "writer", ":", "\n", "\t\t\t", "for", "threshold_type", ",", "log", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "_", ",", "log2", "=", "log", "\n", "df2", "=", "pd", ".", "DataFrame", "(", "log2", ")", "\n", "df2", ".", "to_excel", "(", "writer", ",", "sheet_name", "=", "threshold_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.run": [[63, 77], ["main.Simulations.simulate_and_save_results", "main.Simulations.simulate_and_save_results", "main.Simulations.simulate_and_save_results"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.simulate_and_save_results", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.simulate_and_save_results", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.simulate_and_save_results"], ["", "", "", "def", "run", "(", "self", ")", ":", "\n", "\t\t", "system_bandwidth", "=", "self", ".", "num_agents", "*", "self", ".", "avg_bandwidth", "\n", "\n", "for", "data_distribution", "in", "self", ".", "data_distributions", ":", "\n", "\t\t\t", "if", "data_distribution", "==", "\"labels_per_agent\"", ":", "\n", "\t\t\t\t", "for", "labels_per_agent", "in", "self", ".", "labels_per_agents", ":", "\n", "\t\t\t\t\t", "self", ".", "simulate_and_save_results", "(", "0.8", ",", "0.4", ",", "\"labels_per_agent\"", ",", "labels_per_agent", ",", "\"labels\"", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "for", "graph_connectivity", "in", "self", ".", "graph_connectivities", ":", "\n", "\t\t\t\t\t", "self", ".", "simulate_and_save_results", "(", "0.8", ",", "graph_connectivity", ",", "data_distribution", ",", "None", ",", "\"conns\"", ")", "\n", "\n", "", "for", "system_bandwidth_parameter", "in", "self", ".", "system_bandwidth_parameters", ":", "\n", "\t\t\t\t\t", "self", ".", "simulate_and_save_results", "(", "system_bandwidth_parameter", ",", "0.4", ",", "data_distribution", ",", "None", ",", "\"bws\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.file_info": [[79, 95], ["os.path.join", "os.path.join", "os.path.join", "os.getcwd", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "", "", "def", "file_info", "(", "self", ",", "system_bandwidth_parameter", ",", "graph_connectivity", ",", "data_distribution", ",", "labels_per_agent", ",", "name", ")", ":", "\n", "\t\t", "dirname", "=", "\"../results\"", "\n", "dirpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "dirname", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirpath", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "\n", "", "filename", "=", "f\"{self.model_name}_{self.dataset_name}_{self.num_epochs}epochs_{self.num_agents}m\"", "\n", "filename", "+=", "f\"_{graph_connectivity}conn_{system_bandwidth_parameter}weak_{data_distribution}\"", "\n", "filename", "+=", "f\"_{labels_per_agent}labels_{self.r}r_{name}\"", "\n", "\n", "filename1", "=", "filename", "+", "\"_iter.xlsx\"", "\n", "filename2", "=", "filename", "+", "\"_iter_sampled.xlsx\"", "\n", "filepath1", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename1", ")", "\n", "filepath2", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename2", ")", "\n", "\n", "return", "filename", ",", "filepath1", ",", "filepath2", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.simulate_and_save_results": [[97, 116], ["main.Simulations.file_info", "print", "main.Simulations.ef_hc.reset", "main.Simulations.ef_hc.run", "main.Simulations.save_results", "os.path.exists", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.file_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.reset", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.run", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.Simulations.save_results"], ["", "def", "simulate_and_save_results", "(", "self", ",", "system_bandwidth_parameter", ",", "graph_connectivity", ",", "\n", "data_distribution", ",", "labels_per_agent", ",", "name", ")", ":", "\n", "\t\t", "filename", ",", "filepath1", ",", "filepath2", "=", "self", ".", "file_info", "(", "system_bandwidth_parameter", ",", "graph_connectivity", ",", "\n", "data_distribution", ",", "labels_per_agent", ",", "name", ")", "\n", "\n", "print", "(", "f\"Simulation {self.simulation_counter}/{self.simulation_count}: {filename}\"", ")", "\n", "self", ".", "simulation_counter", "+=", "1", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath1", ")", "and", "os", ".", "path", ".", "exists", "(", "filepath2", ")", ":", "\n", "\t\t\t", "return", "\n", "\n", "", "self", ".", "ef_hc", ".", "reset", "(", "\n", "system_bandwidth_parameter", "=", "system_bandwidth_parameter", ",", "\n", "graph_connectivity", "=", "graph_connectivity", ",", "\n", "data_distribution", "=", "data_distribution", ",", "\n", "labels_per_agent", "=", "labels_per_agent", "\n", ")", "\n", "results", "=", "self", ".", "ef_hc", ".", "run", "(", ")", "\n", "\n", "self", ".", "save_results", "(", "results", ",", "filepath1", ",", "filepath2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.main.main": [[118, 121], ["main.Simulations", "main.Simulations.run"], "function", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.run"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "sims", "=", "Simulations", "(", ")", "\n", "sims", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.__init__": [[12, 51], ["utils.aux_info", "utils.dataset_info", "EF_HC.EF_HC.generate_graph", "EF_HC.EF_HC.generate_bandwidths", "EF_HC.EF_HC.generate_trainsets", "EF_HC.EF_HC.generate_models", "EF_HC.EF_HC.generate_agents"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.aux_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.dataset_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_graph", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_bandwidths", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_trainsets", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_models", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_agents"], ["def", "__init__", "(", "self", ",", "\n", "model_name", ",", "\n", "dataset_name", ",", "\n", "num_epochs", "=", "1", ",", "\n", "num_agents", "=", "10", ",", "\n", "graph_connectivity", "=", "0.2", ",", "\n", "system_bandwidth", "=", "10", "*", "5000", ",", "\n", "system_bandwidth_type", "=", "\"two_slice\"", ",", "\n", "system_bandwidth_parameter", "=", "0.8", ",", "\n", "data_distribution", "=", "\"iid\"", ",", "\n", "labels_per_agent", "=", "None", ",", "\n", "batch_size", "=", "1", ",", "\n", "learning_rate_type", "=", "\"iter_decay\"", ",", "\n", "r", "=", "1", "\n", ")", ":", "\n", "# Agent-level properties", "\n", "\t\t", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "num_classes", ",", "transform", "=", "utils", ".", "aux_info", "(", "dataset_name", ",", "model_name", ")", "\n", "self", ".", "trainset", ",", "testset", ",", "self", ".", "input_dim", "=", "utils", ".", "dataset_info", "(", "dataset_name", ",", "transform", ")", "\n", "# model, criterion, self.model_dim = utils.model_info(model_name, self.input_dim, self.num_classes)", "\n", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "\n", "# System-level properties", "\n", "self", ".", "num_agents", "=", "num_agents", "\n", "self", ".", "graph_connectivity", "=", "graph_connectivity", "\n", "self", ".", "system_bandwidth", "=", "system_bandwidth", "\n", "self", ".", "system_bandwidth_type", "=", "system_bandwidth_type", "\n", "self", ".", "system_bandwidth_parameter", "=", "system_bandwidth_parameter", "\n", "self", ".", "data_distribution", "=", "data_distribution", "\n", "self", ".", "labels_per_agent", "=", "labels_per_agent", "\n", "\n", "graph", "=", "self", ".", "generate_graph", "(", "graph_connectivity", ")", "\n", "bandwidths", "=", "self", ".", "generate_bandwidths", "(", "system_bandwidth_parameter", ")", "\n", "trainsets", "=", "self", ".", "generate_trainsets", "(", "data_distribution", ",", "labels_per_agent", ")", "\n", "models", ",", "criterion", ",", "self", ".", "model_dim", "=", "self", ".", "generate_models", "(", "model_name", ")", "\n", "\n", "self", ".", "agents", "=", "self", ".", "generate_agents", "(", "graph", ",", "bandwidths", ",", "models", ",", "criterion", ",", "trainsets", ",", "\n", "testset", ",", "batch_size", ",", "learning_rate_type", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_graph": [[53, 60], ["networkx.random_geometric_graph", "networkx.is_k_edge_connected"], "methods", ["None"], ["", "def", "generate_graph", "(", "self", ",", "graph_connectivity", ")", ":", "\n", "\t\t", "while", "True", ":", "\n", "\t\t    ", "graph", "=", "nx", ".", "random_geometric_graph", "(", "self", ".", "num_agents", ",", "graph_connectivity", ")", "\n", "if", "nx", ".", "is_k_edge_connected", "(", "graph", ",", "1", ")", "==", "True", ":", "\n", "\t\t        ", "break", "\n", "\n", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_bandwidths": [[62, 72], ["EF_HC.EF_HC.device_data_random", "EF_HC.EF_HC.device_data_two_slice"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.device_data_random", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.device_data_two_slice"], ["", "def", "generate_bandwidths", "(", "self", ",", "system_bandwidth_parameter", ")", ":", "\n", "# system_bandwidth_parameter is \"k\" if system_bandwidth_type is \"random\"", "\n", "# system_bandwidth_parameter is \"weak_ratio\" if system_bandwidth_type is \"two_slice\"", "\n", "\n", "\t\t", "if", "self", ".", "system_bandwidth_type", "==", "\"random\"", ":", "\n", "\t\t\t", "bandwidths", "=", "self", ".", "device_data_random", "(", "system_bandwidth_parameter", ")", "\n", "", "if", "self", ".", "system_bandwidth_type", "==", "\"two_slice\"", ":", "\n", "\t\t\t", "bandwidths", "=", "self", ".", "device_data_two_slice", "(", "system_bandwidth_parameter", ")", "\n", "\n", "", "return", "bandwidths", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_trainsets": [[74, 85], ["random.sample", "EF_HC.EF_HC.separate_data_iid", "EF_HC.EF_HC.separate_data_non_iid", "EF_HC.EF_HC.separate_data", "len"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data_iid", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data_non_iid", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data"], ["", "def", "generate_trainsets", "(", "self", ",", "data_distribution", ",", "labels_per_agent", "=", "None", ")", ":", "\n", "\t\t", "shuffled", "=", "sample", "(", "self", ".", "trainset", ",", "k", "=", "len", "(", "self", ".", "trainset", ")", ")", "\n", "\n", "if", "data_distribution", "==", "\"iid\"", ":", "\n", "\t\t\t", "trainsets", "=", "self", ".", "separate_data_iid", "(", "shuffled", ")", "\n", "", "if", "data_distribution", "==", "\"non_iid\"", ":", "\n", "\t\t\t", "trainsets", "=", "self", ".", "separate_data_non_iid", "(", "shuffled", ")", "\n", "", "if", "data_distribution", "==", "\"labels_per_agent\"", ":", "\n", "\t\t\t", "trainsets", "=", "self", ".", "separate_data", "(", "shuffled", ",", "labels_per_agent", ")", "\n", "\n", "", "return", "trainsets", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_models": [[87, 93], ["range", "utils.model_info", "models.append"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.model_info"], ["", "def", "generate_models", "(", "self", ",", "model_name", ")", ":", "\n", "\t\t", "models", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "model", ",", "criterion", ",", "model_dim", "=", "utils", ".", "model_info", "(", "model_name", ",", "self", ".", "input_dim", ",", "self", ".", "num_classes", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "return", "models", ",", "criterion", ",", "model_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_agents": [[95, 120], ["range", "range", "Agent.Agent.Agent", "agents.append", "list", "agents[].add_neighbor"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.add_neighbor"], ["", "def", "generate_agents", "(", "self", ",", "graph", ",", "bandwidths", ",", "models", ",", "criterion", ",", "trainsets", ",", "\n", "testset", ",", "batch_size", ",", "learning_rate_type", ",", "r", ")", ":", "\n", "\t\t", "agents", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "agent_i", "=", "Agent", "(", "\n", "ID", "=", "i", ",", "\n", "bandwidth", "=", "bandwidths", "[", "i", "]", ",", "\n", "model", "=", "models", "[", "i", "]", ",", "\n", "criterion", "=", "criterion", ",", "\n", "trainset", "=", "trainsets", "[", "i", "]", ",", "\n", "testset", "=", "testset", ",", "\n", "model_dim", "=", "self", ".", "model_dim", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "learning_rate_type", "=", "learning_rate_type", ",", "\n", "r", "=", "r", ",", "\n", "threshold_type", "=", "None", ",", "\n", "randomized_gossip_probability", "=", "None", "\n", ")", "\n", "agents", ".", "append", "(", "agent_i", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "for", "j", "in", "list", "(", "graph", ".", "adj", "[", "i", "]", ")", ":", "\n", "\t\t\t\t", "agents", "[", "i", "]", ".", "add_neighbor", "(", "agents", "[", "j", "]", ")", "\n", "\n", "", "", "return", "agents", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.device_data_random": [[122, 132], ["random.randint", "range"], "methods", ["None"], ["", "def", "device_data_random", "(", "self", ",", "k", ")", ":", "\n", "# Assuming k >= 1", "\n", "# Variance ~ (1 - 1/k)^2", "\n", "\n", "\t\t", "medium_bandwidth", "=", "self", ".", "system_bandwidth", "/", "self", ".", "num_agents", "\n", "weak_bandwidth", "=", "medium_bandwidth", "//", "k", "\n", "powerful_bandwidth", "=", "medium_bandwidth", "*", "(", "2", "*", "k", "-", "1", ")", "//", "k", "\n", "\n", "bandwidths", "=", "[", "randint", "(", "weak_bandwidth", ",", "powerful_bandwidth", ")", "for", "_", "in", "range", "(", "self", ".", "num_agents", ")", "]", "\n", "return", "bandwidths", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.device_data_two_slice": [[134, 150], ["int", "bandwidths.extend", "range", "range"], "methods", ["None"], ["", "def", "device_data_two_slice", "(", "self", ",", "weak_ratio", ")", ":", "\n", "\t\t", "weak_count", "=", "int", "(", "weak_ratio", "*", "self", ".", "num_agents", ")", "\n", "powerful_count", "=", "self", ".", "num_agents", "-", "weak_count", "\n", "\n", "if", "weak_count", "!=", "self", ".", "num_agents", ":", "\n", "\t\t\t", "weak_bandwidth", "=", "1000", "\n", "", "else", ":", "\n", "\t\t\t", "weak_bandwidth", "=", "self", ".", "system_bandwidth", "//", "weak_count", "\n", "", "if", "powerful_count", "!=", "0", ":", "\n", "\t\t\t", "powerful_bandwidth", "=", "(", "self", ".", "system_bandwidth", "-", "weak_count", "*", "weak_bandwidth", ")", "//", "powerful_count", "\n", "", "else", ":", "\n", "\t\t\t", "powerful_bandwidth", "=", "0", "\n", "\n", "", "bandwidths", "=", "[", "weak_bandwidth", "for", "_", "in", "range", "(", "weak_count", ")", "]", "\n", "bandwidths", ".", "extend", "(", "[", "powerful_bandwidth", "for", "_", "in", "range", "(", "powerful_count", ")", "]", ")", "\n", "return", "bandwidths", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data_iid": [[152, 159], ["separated.append", "len", "range", "len"], "methods", ["None"], ["", "def", "separate_data_iid", "(", "self", ",", "shuffled", ")", ":", "\n", "# return self.separate_data(shuffled, self.num_classes)", "\n", "\n", "\t\t", "div", "=", "len", "(", "shuffled", ")", "//", "self", ".", "num_agents", "\n", "separated", "=", "[", "shuffled", "[", "i", "*", "div", ":", "(", "i", "+", "1", ")", "*", "div", "]", "for", "i", "in", "range", "(", "self", ".", "num_agents", "-", "1", ")", "]", "\n", "separated", ".", "append", "(", "shuffled", "[", "(", "self", ".", "num_agents", "-", "1", ")", "*", "div", ":", "len", "(", "shuffled", ")", "]", ")", "\n", "return", "separated", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data_non_iid": [[161, 176], ["each_class_div.append", "range", "random.sample", "separated.extend", "separated.append", "range", "range", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "separate_data_non_iid", "(", "self", ",", "shuffled", ")", ":", "\n", "# return self.separate_data(shuffled, 1)", "\n", "\n", "\t\t", "separated_by_output", "=", "[", "[", "data", "for", "data", "in", "shuffled", "if", "data", "[", "1", "]", "==", "j", "]", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "\n", "each_class_div", "=", "[", "self", ".", "num_agents", "//", "self", ".", "num_classes", "for", "_", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "]", "\n", "each_class_div", ".", "append", "(", "self", ".", "num_agents", "-", "self", ".", "num_agents", "//", "self", ".", "num_classes", "*", "(", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "separated", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "div", "=", "len", "(", "separated_by_output", "[", "j", "]", ")", "//", "(", "each_class_div", "[", "j", "]", ")", "\n", "separated", ".", "extend", "(", "[", "separated_by_output", "[", "j", "]", "[", "i", "*", "div", ":", "(", "i", "+", "1", ")", "*", "div", "]", "for", "i", "in", "range", "(", "each_class_div", "[", "j", "]", "-", "1", ")", "]", ")", "\n", "separated", ".", "append", "(", "separated_by_output", "[", "j", "]", "[", "(", "each_class_div", "[", "j", "]", "-", "1", ")", "*", "div", ":", "len", "(", "separated_by_output", "[", "j", "]", ")", "]", ")", "\n", "\n", "", "separated_shuffled", "=", "sample", "(", "separated", ",", "k", "=", "len", "(", "separated", ")", ")", "\n", "return", "separated_shuffled", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.separate_data": [[178, 208], ["each_class_div.append", "range", "range", "data_splits[].extend", "data_splits[].append", "copy.deepcopy", "range", "random.sample", "range", "range", "range", "range", "len", "range", "chosen_splits.extend", "separated[].extend", "range", "random.choices", "len", "len", "range", "len", "list", "copy.deepcopy.keys", "list", "copy.deepcopy.values"], "methods", ["None"], ["", "def", "separate_data", "(", "self", ",", "shuffled", ",", "labels_per_agent", ")", ":", "\n", "\t\t", "separated_by_output", "=", "{", "j", ":", "[", "data", "for", "data", "in", "shuffled", "if", "data", "[", "1", "]", "==", "j", "]", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "\n", "total_data_splits_count", "=", "self", ".", "num_agents", "*", "labels_per_agent", "\n", "data_splits_per_class", "=", "total_data_splits_count", "//", "self", ".", "num_classes", "\n", "each_class_div", "=", "[", "data_splits_per_class", "for", "_", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "]", "\n", "each_class_div", ".", "append", "(", "total_data_splits_count", "-", "data_splits_per_class", "*", "(", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "available_splits", "=", "{", "j", ":", "each_class_div", "[", "j", "]", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "\n", "data_splits", "=", "{", "j", ":", "[", "]", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "div", "=", "len", "(", "separated_by_output", "[", "j", "]", ")", "//", "(", "each_class_div", "[", "j", "]", ")", "\n", "data_splits", "[", "j", "]", ".", "extend", "(", "[", "separated_by_output", "[", "j", "]", "[", "i", "*", "div", ":", "(", "i", "+", "1", ")", "*", "div", "]", "for", "i", "in", "range", "(", "each_class_div", "[", "j", "]", "-", "1", ")", "]", ")", "\n", "data_splits", "[", "j", "]", ".", "append", "(", "separated_by_output", "[", "j", "]", "[", "(", "each_class_div", "[", "j", "]", "-", "1", ")", "*", "div", ":", "len", "(", "separated_by_output", "[", "j", "]", ")", "]", ")", "\n", "\n", "", "separated", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_agents", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "available_splits_temp", "=", "deepcopy", "(", "available_splits", ")", "\n", "chosen_splits", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "labels_per_agent", ")", ":", "\n", "\t\t\t\t", "chosen_splits", ".", "extend", "(", "choices", "(", "list", "(", "available_splits_temp", ".", "keys", "(", ")", ")", ",", "\n", "weights", "=", "list", "(", "available_splits_temp", ".", "values", "(", ")", ")", ",", "k", "=", "1", ")", ")", "\n", "del", "available_splits_temp", "[", "chosen_splits", "[", "-", "1", "]", "]", "\n", "\n", "", "for", "j", "in", "chosen_splits", ":", "\n", "\t\t\t\t", "separated", "[", "i", "]", ".", "extend", "(", "data_splits", "[", "j", "]", "[", "0", "]", ")", "\n", "available_splits", "[", "j", "]", "-=", "1", "\n", "\n", "", "", "separated_shuffled", "=", "[", "sample", "(", "separated", "[", "i", "]", ",", "k", "=", "len", "(", "separated", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "separated", ")", ")", "]", "\n", "return", "separated_shuffled", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.run": [[210, 230], ["len", "range", "EF_HC.EF_HC.simulate", "utils.model_info", "EF_HC.EF_HC.agents[].reset", "EF_HC.EF_HC.agents[].reset"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.simulate", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.model_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.reset", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.reset"], ["", "def", "run", "(", "self", ")", ":", "\n", "# num_iters = 2\t\t# comment this line (this was used for testing)", "\n", "\t\t", "num_iters", "=", "len", "(", "self", ".", "trainset", ")", "//", "self", ".", "num_agents", "\n", "threshold_types", "=", "[", "\"heterogeneous\"", ",", "\"constant\"", ",", "\"randomized_gossip\"", ",", "\"zero\"", "]", "\n", "results", "=", "{", "}", "\n", "\n", "for", "threshold_type", "in", "threshold_types", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t", "model", ",", "_", ",", "_", "=", "utils", ".", "model_info", "(", "self", ".", "model_name", ",", "self", ".", "input_dim", ",", "self", ".", "num_classes", ")", "\n", "\n", "if", "threshold_type", "==", "\"randomized_gossip\"", ":", "\n", "\t\t\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "reset", "(", "model", ",", "threshold_type", "=", "threshold_type", ",", "\n", "randomized_gossip_probability", "=", "1", "/", "self", ".", "num_agents", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "reset", "(", "model", ",", "threshold_type", "=", "threshold_type", ")", "\n", "\n", "", "", "log", "=", "self", ".", "simulate", "(", "num_iters", ")", "\n", "results", "[", "threshold_type", "]", "=", "log", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.simulate": [[232, 345], ["range", "print", "range", "range", "range", "range", "range", "iters.append", "losses.append", "cpu_utilizations.append", "bandwidth_utilizations.append", "transmission_time_utilizations.append", "bandwidth_useds.append", "transmission_time_useds.append", "range", "threading.Thread", "threads[].start", "threads[].join", "float", "EF_HC.EF_HC.agents[].cpu_used", "EF_HC.EF_HC.agents[].max_cpu_usable", "EF_HC.EF_HC.agents[].bandwidth_used", "EF_HC.EF_HC.agents[].max_bandwidth_usable", "EF_HC.EF_HC.agents[].transmission_time_used", "EF_HC.EF_HC.agents[].max_transmission_time_usable", "threading.Thread", "threads[].start", "bandwidth_useds_cumsum.append", "transmission_time_useds_cumsum.append", "bandwidth_useds_cumsum.append", "transmission_time_useds_cumsum.append", "threads[].join", "range", "range", "accuracies.append", "iters_sampled.append", "EF_HC.EF_HC.agents[].get_loss", "threading.Thread", "threads[].start", "threads[].join", "EF_HC.EF_HC.agents[].get_accuracy", "EF_HC.EF_HC.agents[].run", "EF_HC.EF_HC.agents[].post_run_update", "EF_HC.EF_HC.agents[].calculate_accuracy"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.cpu_used", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_cpu_usable", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.bandwidth_used", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_bandwidth_usable", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.transmission_time_used", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_transmission_time_usable", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_loss", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_accuracy", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.run", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.post_run_update", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_accuracy"], ["", "def", "simulate", "(", "self", ",", "num_iters", ")", ":", "\n", "\t\t", "iters", ",", "iters_sampled", "=", "[", "]", ",", "[", "]", "\n", "losses", ",", "accuracies", "=", "[", "]", ",", "[", "]", "\n", "cpu_utilizations", "=", "[", "]", "\n", "bandwidth_useds", ",", "bandwidth_useds_cumsum", ",", "bandwidth_utilizations", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "transmission_time_useds", ",", "transmission_time_useds_cumsum", ",", "transmission_time_utilizations", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "threads", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "num_agents", ")", "]", "\n", "\n", "total_iter", "=", "0", "\n", "tx_iter", "=", "0", "\n", "tx_sample", "=", "self", ".", "model_dim", "/", "(", "self", ".", "system_bandwidth", "//", "self", ".", "num_agents", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "num_epochs", ")", ":", "\n", "\t\t\t", "print", "(", "f\"epoch: {k}\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_iters", ")", ":", "\n", "\t\t\t\t", "total_iter", "=", "k", "*", "num_iters", "+", "i", "\n", "# print(f\"epoch: {k}, iter: {i}, total_iter={total_iter}\")", "\n", "\n", "loss", "=", "0", "\n", "cpu_used", ",", "max_cpu_usable", "=", "0", ",", "0", "\n", "bandwidth_used", ",", "max_bandwidth_usable", "=", "0", ",", "0", "\n", "transmission_time_used", ",", "max_transmission_time_usable", "=", "0", ",", "0", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t", "threads", "[", "j", "]", "=", "Thread", "(", "target", "=", "self", ".", "agents", "[", "j", "]", ".", "run", "(", ")", ")", "\n", "threads", "[", "j", "]", ".", "start", "(", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t", "threads", "[", "j", "]", ".", "join", "(", ")", "\n", "\n", "loss", "+=", "float", "(", "self", ".", "agents", "[", "j", "]", ".", "get_loss", "(", ")", ")", "\n", "cpu_used", "+=", "self", ".", "agents", "[", "j", "]", ".", "cpu_used", "(", ")", "\n", "max_cpu_usable", "+=", "self", ".", "agents", "[", "j", "]", ".", "max_cpu_usable", "(", ")", "\n", "bandwidth_used", "+=", "self", ".", "agents", "[", "j", "]", ".", "bandwidth_used", "(", ")", "\n", "max_bandwidth_usable", "+=", "self", ".", "agents", "[", "j", "]", ".", "max_bandwidth_usable", "(", ")", "\n", "transmission_time_used", "+=", "self", ".", "agents", "[", "j", "]", ".", "transmission_time_used", "(", ")", "\n", "max_transmission_time_usable", "+=", "self", ".", "agents", "[", "j", "]", ".", "max_transmission_time_usable", "(", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t", "threads", "[", "j", "]", "=", "Thread", "(", "target", "=", "self", ".", "agents", "[", "j", "]", ".", "post_run_update", "(", ")", ")", "\n", "threads", "[", "j", "]", ".", "start", "(", ")", "\n", "\n", "", "iters", ".", "append", "(", "total_iter", ")", "\n", "losses", ".", "append", "(", "loss", "/", "self", ".", "num_agents", ")", "\n", "cpu_utilizations", ".", "append", "(", "cpu_used", "/", "max_cpu_usable", ")", "\n", "bandwidth_utilizations", ".", "append", "(", "bandwidth_used", "/", "max_bandwidth_usable", ")", "\n", "transmission_time_utilizations", ".", "append", "(", "transmission_time_used", "/", "max_transmission_time_usable", ")", "\n", "bandwidth_useds", ".", "append", "(", "bandwidth_used", "/", "self", ".", "num_agents", ")", "\n", "transmission_time_useds", ".", "append", "(", "transmission_time_used", "/", "self", ".", "num_agents", ")", "\n", "if", "total_iter", "==", "0", ":", "\n", "\t\t\t\t\t", "bandwidth_useds_cumsum", ".", "append", "(", "bandwidth_useds", "[", "-", "1", "]", ")", "\n", "transmission_time_useds_cumsum", ".", "append", "(", "transmission_time_useds", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "bandwidth_useds_cumsum", ".", "append", "(", "bandwidth_useds_cumsum", "[", "-", "1", "]", "+", "bandwidth_useds", "[", "-", "1", "]", ")", "\n", "transmission_time_useds_cumsum", ".", "append", "(", "transmission_time_useds_cumsum", "[", "-", "1", "]", "+", "transmission_time_useds", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t", "threads", "[", "j", "]", ".", "join", "(", ")", "\n", "\n", "######################## (a) For the Line plots ########################", "\n", "# cond1 = total_iter % 10**(1 + (len(str(total_iter)) - 1)//3) == 0", "\n", "# cond2 = transmission_time_useds_cumsum[-1] > tx_sample*tx_iter", "\n", "# if cond1 or cond2:", "\n", "# \taccuracy = 0", "\n", "\n", "# \tfor j in range(self.num_agents):", "\n", "# \t\tthreads[j] = Thread(target=self.agents[j].calculate_accuracy())", "\n", "# \t\tthreads[j].start()", "\n", "# \tfor j in range(self.num_agents):", "\n", "# \t\tthreads[j].join()", "\n", "# \t\taccuracy += self.agents[j].get_accuracy()", "\n", "\n", "# \taccuracies.append(accuracy / self.num_agents)", "\n", "# \titers_sampled.append(total_iter)", "\n", "\n", "# if cond2:", "\n", "# \ttx_iter += 10**(1 + (len(str(tx_iter)) - 1)//3)", "\n", "########################################################################", "\n", "\n", "########################### (b) For the Bar plots ##########################", "\n", "", "cond3", "=", "transmission_time_useds_cumsum", "[", "-", "1", "]", ">", "1e2", "*", "2", "*", "tx_sample", "\n", "if", "cond3", ":", "\n", "\t\t\t\t\t", "accuracy", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t\t", "threads", "[", "j", "]", "=", "Thread", "(", "target", "=", "self", ".", "agents", "[", "j", "]", ".", "calculate_accuracy", "(", ")", ")", "\n", "threads", "[", "j", "]", ".", "start", "(", ")", "\n", "", "for", "j", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t\t\t\t", "threads", "[", "j", "]", ".", "join", "(", ")", "\n", "accuracy", "+=", "self", ".", "agents", "[", "j", "]", ".", "get_accuracy", "(", ")", "\n", "\n", "", "accuracies", ".", "append", "(", "accuracy", "/", "self", ".", "num_agents", ")", "\n", "iters_sampled", ".", "append", "(", "total_iter", ")", "\n", "break", "\n", "", "", "if", "cond3", ":", "\n", "\t\t\t\t", "break", "\n", "#############################################################################", "\n", "\n", "", "", "log1", "=", "{", "\"iters\"", ":", "iters", ",", "\n", "\"losses\"", ":", "losses", ",", "\n", "\"cpu_utilizations\"", ":", "cpu_utilizations", ",", "\n", "\"bandwidth_useds\"", ":", "bandwidth_useds", ",", "\n", "\"bandwidth_useds_cumsum\"", ":", "bandwidth_useds_cumsum", ",", "\n", "\"bandwidth_utilizations\"", ":", "bandwidth_utilizations", ",", "\n", "\"transmission_time_useds\"", ":", "transmission_time_useds", ",", "\n", "\"transmission_time_useds_cumsum\"", ":", "transmission_time_useds_cumsum", ",", "\n", "\"transmission_time_utilizations\"", ":", "transmission_time_utilizations", "}", "\n", "\n", "log2", "=", "{", "\"iters_sampled\"", ":", "iters_sampled", ",", "\n", "\"accuracies\"", ":", "accuracies", "}", "\n", "return", "[", "log1", ",", "log2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset": [[347, 357], ["EF_HC.EF_HC.reset_bandwidths", "EF_HC.EF_HC.reset_graph", "EF_HC.EF_HC.reset_trainsets"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_bandwidths", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_graph", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_trainsets"], ["", "def", "reset", "(", "self", ",", "system_bandwidth_parameter", "=", "0.8", ",", "\n", "graph_connectivity", "=", "0.4", ",", "\n", "data_distribution", "=", "\"iid\"", ",", "\n", "labels_per_agent", "=", "None", ")", ":", "\n", "\t\t", "if", "system_bandwidth_parameter", "!=", "self", ".", "system_bandwidth_parameter", ":", "\n", "\t\t\t", "self", ".", "reset_bandwidths", "(", "system_bandwidth_parameter", ")", "\n", "", "if", "graph_connectivity", "!=", "self", ".", "graph_connectivity", ":", "\n", "\t\t\t", "self", ".", "reset_graph", "(", "graph_connectivity", ")", "\n", "", "if", "data_distribution", "!=", "self", ".", "data_distribution", "or", "labels_per_agent", "!=", "self", ".", "labels_per_agent", ":", "\n", "\t\t\t", "self", ".", "reset_trainsets", "(", "data_distribution", ",", "labels_per_agent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_bandwidths": [[359, 363], ["EF_HC.EF_HC.generate_bandwidths", "range", "EF_HC.EF_HC.agents[].set_bandwidth"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_bandwidths", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.set_bandwidth"], ["", "", "def", "reset_bandwidths", "(", "self", ",", "system_bandwidth_parameter", ")", ":", "\n", "\t\t", "bandwidths", "=", "self", ".", "generate_bandwidths", "(", "system_bandwidth_parameter", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "set_bandwidth", "(", "bandwidths", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_graph": [[365, 371], ["EF_HC.EF_HC.generate_graph", "range", "EF_HC.EF_HC.agents[].clear_neighbors", "list", "EF_HC.EF_HC.agents[].add_neighbor"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_graph", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.clear_neighbors", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.add_neighbor"], ["", "", "def", "reset_graph", "(", "self", ",", "graph_connectivity", ")", ":", "\n", "\t\t", "graph", "=", "self", ".", "generate_graph", "(", "graph_connectivity", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "clear_neighbors", "(", ")", "\n", "for", "j", "in", "list", "(", "graph", ".", "adj", "[", "i", "]", ")", ":", "\n", "\t\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "add_neighbor", "(", "self", ".", "agents", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.reset_trainsets": [[373, 377], ["EF_HC.EF_HC.generate_trainsets", "range", "EF_HC.EF_HC.agents[].set_trainset"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.EF_HC.EF_HC.generate_trainsets", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.set_trainset"], ["", "", "", "def", "reset_trainsets", "(", "self", ",", "data_distribution", ",", "labels_per_agent", ")", ":", "\n", "\t\t", "trainsets", "=", "self", ".", "generate_trainsets", "(", "data_distribution", ",", "labels_per_agent", "=", "labels_per_agent", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\t\t\t", "self", ".", "agents", "[", "i", "]", ".", "set_trainset", "(", "trainsets", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Central.Central.__init__": [[9, 27], ["torch.device", "torch.device", "torch.device", "torch.device", "utils.aux_info", "utils.dataset_info", "utils.model_info", "Central.Central.model.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.aux_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.dataset_info", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.model_info"], ["def", "__init__", "(", "self", ",", "\n", "model_name", "=", "\"SVM\"", ",", "\n", "dataset_name", "=", "\"MNIST\"", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_epochs", "=", "1", ",", "\n", "learning_rate_type", "=", "\"iter_decay\"", "\n", ")", ":", "\n", "\t\t", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "num_classes", ",", "transform", "=", "utils", ".", "aux_info", "(", "dataset_name", ",", "model_name", ")", "\n", "self", ".", "trainset", ",", "self", ".", "testset", ",", "input_dim", "=", "utils", ".", "dataset_info", "(", "dataset_name", ",", "transform", ")", "\n", "self", ".", "model", ",", "self", ".", "criterion", ",", "_", "=", "utils", ".", "model_info", "(", "model_name", ",", "input_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "learning_rate_type", "=", "learning_rate_type", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Central.Central.run": [[29, 55], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "iter", "utils.calculate_accuracy", "accuracy_per_epoch.append", "range", "utils.calculate_learning_rate", "Central.Central.gradient_descent", "loss_per_iter.append", "iters.append", "float"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_accuracy", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_learning_rate", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.gradient_descent"], ["", "def", "run", "(", "self", ")", ":", "\n", "\t\t", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "trainset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "iters", ",", "loss_per_iter", ",", "accuracy_per_epoch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "epochs", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_epochs", ")", "]", "\n", "iteration", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epochs", ")", ":", "\n", "\t\t\t", "for", "dataX", ",", "dataY", "in", "iter", "(", "train_loader", ")", ":", "\n", "\t\t\t\t", "lr", "=", "utils", ".", "calculate_learning_rate", "(", "self", ".", "learning_rate_type", ",", "iteration", ",", "epoch", ",", "self", ".", "batch_size", ")", "\n", "loss", "=", "self", ".", "gradient_descent", "(", "dataX", ",", "dataY", ",", "lr", ")", "\n", "loss_per_iter", ".", "append", "(", "float", "(", "loss", ")", ")", "\n", "\n", "iters", ".", "append", "(", "iteration", ")", "\n", "iteration", "+=", "1", "\n", "\n", "", "accuracy", "=", "utils", ".", "calculate_accuracy", "(", "self", ".", "model", ",", "self", ".", "testset", ")", "\n", "accuracy_per_epoch", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "{", "\"iters\"", ":", "iters", ",", "\n", "\"epochs\"", ":", "epochs", ",", "\n", "\"loss_per_iter\"", ":", "loss_per_iter", ",", "\n", "\"accuracy_per_epoch\"", ":", "accuracy_per_epoch", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Central.Central.gradient_descent": [[57, 69], ["Central.Central.model.train", "torch.SGD", "torch.SGD", "torch.SGD.zero_grad", "Central.Central.model", "Central.Central.criterion", "Central.Central.backward", "torch.SGD.step", "dataX.to", "dataY.to", "Central.Central.model.parameters"], "methods", ["None"], ["", "def", "gradient_descent", "(", "self", ",", "dataX", ",", "dataY", ",", "learning_rate", ")", ":", "\n", "\t\t", "self", ".", "model", ".", "train", "(", ")", "\n", "dataX", ",", "dataY", "=", "dataX", ".", "to", "(", "self", ".", "device", ")", ",", "dataY", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "dataX", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "dataY", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.LeNet5.LeNet5.__init__": [[8, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "LeNet5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "120", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "120", ",", "out_features", "=", "84", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "84", ",", "out_features", "=", "n_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.LeNet5.LeNet5.forward": [[29, 35], ["LeNet5.LeNet5.feature_extractor", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "LeNet5.LeNet5.classifier", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "logits", "\n", "# return logits, probs", ""]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.__init__": [[12, 67], ["torch.device", "torch.device", "torch.device", "torch.device", "copy.deepcopy().to", "copy.deepcopy().to", "len", "Agent.Agent.calculate_rho", "list", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "copy.deepcopy", "copy.deepcopy", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_rho"], ["def", "__init__", "(", "self", ",", "\n", "ID", ",", "\n", "bandwidth", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "trainset", ",", "\n", "testset", ",", "\n", "model_dim", ",", "\n", "batch_size", "=", "1", ",", "\n", "learning_rate_type", "=", "\"iter_decay\"", ",", "\n", "r", "=", "1e1", ",", "\n", "threshold_type", "=", "\"heterogeneous\"", ",", "\n", "randomized_gossip_probability", "=", "None", ",", "\n", "rho_estimate", "=", "5000", "\n", ")", ":", "\n", "\t\t", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Agent-based properties", "\n", "self", ".", "ID", "=", "ID", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "\n", "# Learning-based parameters", "\n", "self", ".", "initial_model", "=", "model", "\n", "self", ".", "w", "=", "deepcopy", "(", "self", ".", "initial_model", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "what", "=", "deepcopy", "(", "self", ".", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "len_params", "=", "len", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "trainset", "=", "trainset", "\n", "self", ".", "testset", "=", "testset", "\n", "self", ".", "model_dim", "=", "model_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "learning_rate_type", "=", "learning_rate_type", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "gradient_step", "=", "None", "\n", "self", ".", "accuracy", "=", "0", "\n", "\n", "# Aggregation-based parameters", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "rho", "=", "self", ".", "calculate_rho", "(", ")", "\n", "self", ".", "threshold_type", "=", "threshold_type", "\n", "self", ".", "rho_estimate", "=", "rho_estimate", "\n", "\n", "self", ".", "neighbors", "=", "[", "]", "\n", "self", ".", "aggregation_neighbors", "=", "[", "]", "\n", "self", ".", "v", "=", "0", "\n", "self", ".", "aggregation_step", "=", "None", "\n", "\n", "# In case agent runs randomized gossip algorithm", "\n", "self", ".", "randomized_gossip_probability", "=", "randomized_gossip_probability", "\n", "\n", "# Counters", "\n", "self", ".", "data_processed", "=", "0", "\n", "self", ".", "aggregation_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_rho": [[69, 71], ["None"], "methods", ["None"], ["", "def", "calculate_rho", "(", "self", ")", ":", "\n", "\t\t", "return", "1", "/", "self", ".", "bandwidth", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.run": [[73, 90], ["Agent.Agent.event_new_data", "len", "Agent.Agent.event_update_received", "range", "range", "Agent.Agent.aggregation_neighbors.append", "neighbor.get_v"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.event_new_data", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.event_update_received", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_v"], ["", "def", "run", "(", "self", ")", ":", "\n", "# Event 4: new data", "\n", "\t\t", "self", ".", "gradient_step", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "len_params", ")", "]", "\n", "\n", "# self.gradient_step = self.event_new_data(choices(self.trainset, k=self.batch_size))", "\n", "start", "=", "self", ".", "data_processed", "%", "len", "(", "self", ".", "trainset", ")", "\n", "self", ".", "gradient_step", "=", "self", ".", "event_new_data", "(", "self", ".", "trainset", "[", "start", ":", "start", "+", "self", ".", "batch_size", "]", ")", "\n", "\n", "# Event 3: receive updates from neighbors", "\n", "self", ".", "aggregation_step", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "len_params", ")", "]", "\n", "self", ".", "aggregation_neighbors", "=", "[", "]", "\n", "\n", "for", "neighbor", "in", "self", ".", "neighbors", ":", "\n", "\t\t\t", "if", "neighbor", ".", "get_v", "(", ")", "==", "1", "or", "self", ".", "v", "==", "1", ":", "\n", "\t\t\t\t", "self", ".", "aggregation_neighbors", ".", "append", "(", "neighbor", ")", "\n", "", "", "if", "self", ".", "aggregation_neighbors", ":", "\n", "\t\t\t", "self", ".", "aggregation_step", "=", "self", ".", "event_update_received", "(", "self", ".", "aggregation_neighbors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.post_run_update": [[92, 117], ["copy.deepcopy().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Agent.Agent.w.parameters", "Agent.Agent.calculate_threshold", "zip", "random.random.random", "Agent.Agent.w.parameters", "Agent.Agent.what.parameters", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "copy.deepcopy", "torch.linalg.vector_norm", "torch.linalg.vector_norm", "torch.linalg.vector_norm", "torch.linalg.vector_norm"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_threshold"], ["", "", "def", "post_run_update", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "v", "==", "1", ":", "\n", "\t\t\t", "self", ".", "what", "=", "deepcopy", "(", "self", ".", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "param_idx", "=", "0", "\n", "for", "param", "in", "self", ".", "w", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t", "param", ".", "data", "+=", "self", ".", "aggregation_step", "[", "param_idx", "]", "-", "self", ".", "gradient_step", "[", "param_idx", "]", "\n", "param_idx", "+=", "1", "\n", "\n", "# Event 2: threshold passed", "\n", "", "", "self", ".", "v", "=", "0", "\n", "\n", "if", "self", ".", "threshold_type", "==", "\"randomized_gossip\"", ":", "\n", "\t\t\t", "if", "random", "(", ")", "<", "self", ".", "randomized_gossip_probability", ":", "\n", "\t\t\t\t", "self", ".", "v", "=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t", "threshold_w", "=", "self", ".", "calculate_threshold", "(", ")", "\n", "norm_e", "=", "0", "\n", "p", "=", "2", "\n", "for", "param", ",", "paramhat", "in", "zip", "(", "self", ".", "w", ".", "parameters", "(", ")", ",", "self", ".", "what", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t\t", "norm_e", "+=", "torch", ".", "pow", "(", "torch", ".", "linalg", ".", "vector_norm", "(", "param", ".", "data", "-", "paramhat", ".", "data", ",", "ord", "=", "p", ")", ",", "p", ")", "\n", "\n", "", "if", "torch", ".", "pow", "(", "norm_e", "/", "self", ".", "model_dim", ",", "1", "/", "p", ")", ">=", "threshold_w", ":", "\n", "\t\t\t\t", "self", ".", "v", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.event_new_data": [[119, 122], ["Agent.Agent.gradient_descent"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.gradient_descent"], ["", "", "", "def", "event_new_data", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "self", ".", "data_processed", "+=", "self", ".", "batch_size", "\n", "return", "self", ".", "gradient_descent", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.event_update_received": [[124, 137], ["len", "Agent.Agent.calculate_aggregation_weight", "zip", "range", "Agent.Agent.w.parameters", "neighbor.get_w().parameters", "neighbor.get_w"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_aggregation_weight", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_w"], ["", "def", "event_update_received", "(", "self", ",", "neighbors", ")", ":", "\n", "\t\t", "aggregation_step", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "len_params", ")", "]", "\n", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "\t\t\t", "aggregation_weight", "=", "self", ".", "calculate_aggregation_weight", "(", "neighbor", ")", "\n", "\n", "param_idx", "=", "0", "\n", "for", "param", ",", "param_neighbor", "in", "zip", "(", "self", ".", "w", ".", "parameters", "(", ")", ",", "neighbor", ".", "get_w", "(", ")", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t\t", "aggregation_step", "[", "param_idx", "]", "+=", "aggregation_weight", "*", "(", "param_neighbor", ".", "data", "-", "param", ".", "data", ")", "\n", "param_idx", "+=", "1", "\n", "\n", "", "", "self", ".", "aggregation_count", "+=", "len", "(", "neighbors", ")", "\n", "return", "aggregation_step", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.gradient_descent": [[139, 170], ["copy.deepcopy().to", "copy.deepcopy().to.train", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "Agent.Agent.calculate_learning_rate", "torch.SGD", "torch.SGD", "torch.SGD.zero_grad", "copy.deepcopy().to.", "Agent.Agent.criterion", "Agent.Agent.backward", "torch.SGD.step", "zip", "iter", "dataX.to", "dataY.to", "copy.deepcopy().to.parameters", "Agent.Agent.w.parameters", "copy.deepcopy().to.parameters", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_learning_rate"], ["", "def", "gradient_descent", "(", "self", ",", "data", ")", ":", "\n", "# We do the the update on a temporary model, so that we can do the learning ...", "\n", "# and the aggregation at the same iteration.", "\n", "\t\t", "w2", "=", "deepcopy", "(", "self", ".", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "w2", ".", "train", "(", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "dataX", ",", "dataY", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "\n", "dataX", ",", "dataY", "=", "dataX", ".", "to", "(", "self", ".", "device", ")", ",", "dataY", ".", "to", "(", "self", ".", "device", ")", "\n", "learning_rate", "=", "self", ".", "calculate_learning_rate", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "w2", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "w2", "(", "dataX", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "dataY", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "gradient_step", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "len_params", ")", "]", "\n", "\n", "param_idx", "=", "0", "\n", "for", "param", ",", "param2", "in", "zip", "(", "self", ".", "w", ".", "parameters", "(", ")", ",", "w2", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t", "gradient_step", "[", "param_idx", "]", "=", "param", ".", "data", "-", "param2", ".", "data", "\n", "param_idx", "+=", "1", "\n", "\n", "", "self", ".", "loss", "=", "loss", "\n", "return", "gradient_step", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_learning_rate": [[172, 176], ["utils.calculate_learning_rate", "len"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_learning_rate"], ["", "def", "calculate_learning_rate", "(", "self", ")", ":", "\n", "\t\t", "iteration", "=", "self", ".", "data_processed", "//", "self", ".", "batch_size", "\n", "epoch", "=", "self", ".", "data_processed", "//", "len", "(", "self", ".", "trainset", ")", "\n", "return", "utils", ".", "calculate_learning_rate", "(", "self", ".", "learning_rate_type", ",", "iteration", ",", "epoch", ",", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_aggregation_weight": [[178, 180], ["max", "Agent.Agent.get_degree", "neighbor.get_degree"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree"], ["", "def", "calculate_aggregation_weight", "(", "self", ",", "neighbor", ")", ":", "\n", "\t\t", "return", "1", "/", "(", "1", "+", "max", "(", "self", ".", "get_degree", "(", ")", ",", "neighbor", ".", "get_degree", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_threshold": [[182, 191], ["Agent.Agent.heterogeneous_coef", "Agent.Agent.calculate_gamma", "Agent.Agent.constant_coef", "Agent.Agent.zero_coef"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.heterogeneous_coef", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_gamma", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.constant_coef", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.zero_coef"], ["", "def", "calculate_threshold", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "threshold_type", "==", "\"heterogeneous\"", ":", "\n", "\t\t\t", "coef", "=", "self", ".", "heterogeneous_coef", "(", ")", "\n", "", "elif", "self", ".", "threshold_type", "==", "\"constant\"", ":", "\n", "\t\t\t", "coef", "=", "self", ".", "constant_coef", "(", ")", "\n", "", "elif", "self", ".", "threshold_type", "==", "\"zero\"", ":", "\n", "\t\t\t", "coef", "=", "self", ".", "zero_coef", "(", ")", "\n", "\n", "", "return", "coef", "*", "self", ".", "calculate_gamma", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_gamma": [[193, 195], ["Agent.Agent.calculate_learning_rate"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_learning_rate"], ["", "def", "calculate_gamma", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "calculate_learning_rate", "(", ")", "**", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.heterogeneous_coef": [[197, 199], ["None"], "methods", ["None"], ["", "def", "heterogeneous_coef", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "r", "*", "self", ".", "rho", "\n", "", "def", "constant_coef", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.constant_coef": [[199, 201], ["None"], "methods", ["None"], ["", "def", "constant_coef", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "r", "*", "self", ".", "rho_estimate", "\n", "", "def", "zero_coef", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.zero_coef": [[201, 203], ["None"], "methods", ["None"], ["", "def", "zero_coef", "(", "self", ")", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.calculate_accuracy": [[205, 207], ["utils.calculate_accuracy"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_accuracy"], ["", "def", "calculate_accuracy", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "accuracy", "=", "utils", ".", "calculate_accuracy", "(", "self", ".", "w", ",", "self", ".", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.reset": [[209, 227], ["copy.deepcopy().to", "copy.deepcopy().to", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "model", ",", "threshold_type", ",", "randomized_gossip_probability", "=", "None", ")", ":", "\n", "# Agent-based properties", "\n", "\t\t", "if", "randomized_gossip_probability", ":", "\n", "\t\t\t", "self", ".", "randomized_gossip_probability", "=", "randomized_gossip_probability", "\n", "\n", "# Learning-based parameters", "\n", "# self.w = model.to(self.device)\t# generate new random weights", "\n", "", "self", ".", "w", "=", "deepcopy", "(", "self", ".", "initial_model", ")", ".", "to", "(", "self", ".", "device", ")", "# reuse initial model every time", "\n", "self", ".", "what", "=", "deepcopy", "(", "self", ".", "w", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss", "=", "0", "\n", "\n", "# Aggregation-based parameters", "\n", "self", ".", "v", "=", "0", "\n", "self", ".", "threshold_type", "=", "threshold_type", "\n", "\n", "# Counters", "\n", "self", ".", "data_processed", "=", "0", "\n", "self", ".", "aggregation_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.cpu_used": [[229, 231], ["len"], "methods", ["None"], ["", "def", "cpu_used", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "aggregation_neighbors", ")", "\n", "", "def", "max_cpu_usable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_cpu_usable": [[231, 233], ["Agent.Agent.get_degree"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree"], ["", "def", "max_cpu_usable", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "get_degree", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.bandwidth_used": [[235, 237], ["len"], "methods", ["None"], ["", "def", "bandwidth_used", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "aggregation_neighbors", ")", "*", "self", ".", "model_dim", "\n", "", "def", "max_bandwidth_usable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_bandwidth_usable": [[237, 239], ["Agent.Agent.get_degree"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree"], ["", "def", "max_bandwidth_usable", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "get_degree", "(", ")", "*", "self", ".", "model_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.transmission_time_used": [[241, 243], ["Agent.Agent.get_degree", "Agent.Agent.bandwidth_used"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.bandwidth_used"], ["", "def", "transmission_time_used", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "self", ".", "bandwidth_used", "(", ")", "/", "self", ".", "bandwidth", ")", "/", "self", ".", "get_degree", "(", ")", "\n", "# return (self.bandwidth_used() / self.bandwidth) / len(self.aggregation_neighbors)", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_transmission_time_usable": [[244, 246], ["Agent.Agent.get_degree", "Agent.Agent.max_bandwidth_usable"], "methods", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.max_bandwidth_usable"], ["", "def", "max_transmission_time_usable", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "self", ".", "max_bandwidth_usable", "(", ")", "/", "self", ".", "bandwidth", ")", "/", "self", ".", "get_degree", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.add_neighbor": [[248, 250], ["Agent.Agent.neighbors.append"], "methods", ["None"], ["", "def", "add_neighbor", "(", "self", ",", "neighbor", ")", ":", "\n", "\t\t", "self", ".", "neighbors", ".", "append", "(", "neighbor", ")", "\n", "", "def", "remove_neighbor", "(", "self", ",", "neighbor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.remove_neighbor": [[250, 252], ["Agent.Agent.neighbors.remove"], "methods", ["None"], ["", "def", "remove_neighbor", "(", "self", ",", "neighbor", ")", ":", "\n", "\t\t", "self", ".", "neighbors", ".", "remove", "(", "neighbor", ")", "\n", "", "def", "clear_neighbors", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.clear_neighbors": [[252, 254], ["None"], "methods", ["None"], ["", "def", "clear_neighbors", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "neighbors", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.set_trainset": [[256, 258], ["None"], "methods", ["None"], ["", "def", "set_trainset", "(", "self", ",", "trainset", ")", ":", "\n", "\t\t", "self", ".", "trainset", "=", "trainset", "\n", "", "def", "set_bandwidth", "(", "self", ",", "bandwidth", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.set_bandwidth": [[258, 260], ["None"], "methods", ["None"], ["", "def", "set_bandwidth", "(", "self", ",", "bandwidth", ")", ":", "\n", "\t\t", "self", ".", "bandwidth", "=", "bandwidth", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_degree": [[262, 264], ["len"], "methods", ["None"], ["", "def", "get_degree", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "neighbors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_w": [[266, 268], ["None"], "methods", ["None"], ["", "def", "get_w", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "w", "\n", "", "def", "get_v", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_v": [[268, 270], ["None"], "methods", ["None"], ["", "def", "get_v", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "v", "\n", "", "def", "get_loss", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_loss": [[270, 272], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "loss", "\n", "", "def", "get_aggregation_count", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_aggregation_count": [[272, 274], ["None"], "methods", ["None"], ["", "def", "get_aggregation_count", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "aggregation_count", "\n", "", "def", "get_accuracy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.Agent.Agent.get_accuracy": [[274, 276], ["None"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "accuracy", "", "", "", ""]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.aux_info": [[10, 28], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Lambda", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torch.flatten"], "function", ["None"], ["def", "aux_info", "(", "dataset_name", ",", "model_name", ")", ":", "\n", "\t", "if", "dataset_name", "in", "[", "\"MNIST\"", ",", "\"FMNIST\"", "]", ":", "\n", "\t\t", "num_classes", "=", "10", "\n", "\n", "", "if", "model_name", "==", "\"SVM\"", ":", "\n", "\t\t", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "torch", ".", "flatten", "(", "x", ")", ")", "\n", "]", ")", "\n", "", "if", "model_name", "==", "\"LeNet5\"", ":", "\n", "\t\t", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "32", ",", "32", ")", ")", "\n", "]", ")", "\n", "\n", "", "return", "num_classes", ",", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.dataset_info": [[30, 41], ["utils.calculate_input_dim", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "list", "list"], "function", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_input_dim"], ["", "def", "dataset_info", "(", "dataset_name", ",", "transform", ")", ":", "\n", "\t", "if", "dataset_name", "==", "\"MNIST\"", ":", "\n", "\t\t", "trainset", "=", "datasets", ".", "MNIST", "(", "'../data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "testset", "=", "datasets", ".", "MNIST", "(", "'../data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "", "if", "dataset_name", "==", "\"FMNIST\"", ":", "\n", "\t\t", "trainset", "=", "datasets", ".", "FashionMNIST", "(", "'../data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "testset", "=", "datasets", ".", "FashionMNIST", "(", "'../data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "", "input_dim", "=", "calculate_input_dim", "(", "trainset", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "return", "list", "(", "trainset", ")", ",", "list", "(", "testset", ")", ",", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.model_info": [[43, 54], ["utils.calculate_model_dim", "torch.nn.Linear", "torch.nn.MultiMarginLoss", "LeNet5.LeNet5", "torch.nn.CrossEntropyLoss", "LeNet5.LeNet5.parameters"], "function", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_model_dim"], ["", "def", "model_info", "(", "model_name", ",", "input_dim", ",", "num_classes", ")", ":", "\n", "\t", "if", "model_name", "==", "\"SVM\"", ":", "\n", "\t\t", "model", "=", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "num_classes", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "MultiMarginLoss", "(", ")", "\n", "\n", "", "if", "model_name", "==", "\"LeNet5\"", ":", "\n", "\t\t", "model", "=", "LeNet5", "(", "num_classes", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "model_dim", "=", "calculate_model_dim", "(", "model", ".", "parameters", "(", ")", ")", "\n", "return", "model", ",", "criterion", ",", "model_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_input_dim": [[56, 61], ["None"], "function", ["None"], ["", "def", "calculate_input_dim", "(", "shape", ")", ":", "\n", "\t", "dim", "=", "1", "\n", "for", "ax", "in", "shape", ":", "\n", "\t\t", "dim", "*=", "ax", "\n", "", "return", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_model_dim": [[63, 68], ["len", "param.flatten"], "function", ["None"], ["", "def", "calculate_model_dim", "(", "model_params", ")", ":", "\n", "\t", "model_dim", "=", "0", "\n", "for", "param", "in", "model_params", ":", "\n", "\t\t", "model_dim", "+=", "len", "(", "param", ".", "flatten", "(", ")", ")", "\n", "", "return", "model_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_learning_rate": [[70, 81], ["numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "calculate_learning_rate", "(", "learning_rate_type", ",", "iteration", ",", "epoch", ",", "batch_size", ")", ":", "\n", "\t", "if", "learning_rate_type", "==", "\"constant\"", ":", "\n", "\t\t", "lr", "=", "0.01", "\n", "", "if", "learning_rate_type", "==", "\"iter_decay\"", ":", "\n", "\t\t", "lr", "=", "1", "/", "np", ".", "sqrt", "(", "1", "+", "iteration", ")", "\n", "", "if", "learning_rate_type", "==", "\"epoch_decay\"", ":", "\n", "\t\t", "lr", "=", "0.01", "/", "(", "1", "+", "epoch", ")", "\n", "", "if", "learning_rate_type", "==", "\"data_decay\"", ":", "\n", "\t\t", "lr", "=", "1", "/", "np", ".", "sqrt", "(", "1", "+", "iteration", "*", "batch_size", ")", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.calculate_accuracy": [[83, 101], ["torch.device", "model.eval", "torch.utils.data.DataLoader", "iter", "model", "model.argmax", "len", "torch.cuda.is_available", "dataX.to", "dataY.to"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "model", ",", "testset", ")", ":", "\n", "\t", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testset", ",", "\n", "batch_size", "=", "32", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "correct", "=", "0", "\n", "for", "dataX", ",", "dataY", "in", "iter", "(", "test_loader", ")", ":", "\n", "\t\t", "dataX", ",", "dataY", "=", "dataX", ".", "to", "(", "device", ")", ",", "dataY", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "dataX", ")", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "+=", "(", "pred", "==", "dataY", ")", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "correct", "/", "len", "(", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.moving_average": [[103, 118], ["range", "range", "len", "len", "output_y.append"], "function", ["None"], ["", "def", "moving_average", "(", "x", ",", "y", ",", "window", "=", "32", ")", ":", "\n", "\t", "if", "len", "(", "x", ")", "<=", "window", ":", "\n", "\t\t", "return", "x", ",", "y", "\n", "\n", "", "output_x", "=", "x", "[", "window", "-", "1", ":", "]", "\n", "\n", "val", "=", "0", "\n", "for", "i", "in", "range", "(", "window", ")", ":", "\n", "\t\t", "val", "+=", "y", "[", "i", "]", "/", "window", "\n", "", "output_y", "=", "[", "val", "]", "\n", "for", "i", "in", "range", "(", "window", ",", "len", "(", "y", ")", ")", ":", "\n", "\t\t", "val", "+=", "(", "y", "[", "i", "]", "-", "y", "[", "i", "-", "window", "]", ")", "/", "window", "\n", "output_y", ".", "append", "(", "val", ")", "\n", "\n", "", "return", "output_x", ",", "output_y", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.moving_average_df": [[120, 135], ["dfs_dict.items", "pandas.DataFrame", "utils.moving_average", "utils.moving_average"], "function", ["home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.moving_average", "home.repos.pwc.inspect_result.ShahryarBQ_EF_HC.src.utils.moving_average"], ["", "def", "moving_average_df", "(", "dfs_dict", ",", "index", "=", "\"iters\"", ",", "window", "=", "32", ")", ":", "\n", "\t", "dfs_dict_ret", "=", "{", "}", "\n", "\n", "for", "threshold_type", ",", "df", "in", "dfs_dict", ".", "items", "(", ")", ":", "\n", "\t\t", "dfs_dict_ret", "[", "threshold_type", "]", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "for", "column_name", "in", "df", ":", "\n", "\t\t\t", "if", "column_name", "==", "index", ":", "\n", "\t\t\t\t", "x", ",", "_", "=", "moving_average", "(", "df", "[", "index", "]", ",", "df", "[", "index", "]", ",", "window", ")", "\n", "dfs_dict_ret", "[", "threshold_type", "]", "[", "index", "]", "=", "x", "\n", "\n", "", "_", ",", "y", "=", "moving_average", "(", "df", "[", "index", "]", ",", "df", "[", "column_name", "]", ",", "window", ")", "\n", "dfs_dict_ret", "[", "threshold_type", "]", "[", "column_name", "]", "=", "y", "\n", "\n", "", "", "return", "dfs_dict_ret", "", "", ""]]}