{"home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.main.adjust_learning_rate": [[23, 26], ["None"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "alpha_plan", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "alpha_plan", "[", "epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.main.accuracy": [[28, 43], ["torch.softmax", "max", "target.size", "F.softmax.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.reshape", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "logit", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.main.train": [[45, 75], ["enumerate", "indexes.cpu().numpy().transpose", "len", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "main.accuracy", "torch.cross_entropy", "optimizer.zero_grad", "F.cross_entropy.backward", "optimizer.step", "float", "float", "print", "indexes.cpu().numpy", "torch.autograd.Variable", "torch.autograd.Variable", "indexes.cpu", "len"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.main.accuracy"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "train_total", "=", "0", "\n", "train_correct", "=", "0", "\n", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "ind", "=", "indexes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", "\n", "batch_size", "=", "len", "(", "ind", ")", "\n", "\n", "images", "=", "Variable", "(", "images", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "Variable", "(", "labels", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward + Backward + Optimize", "\n", "logits", "=", "model", "(", "images", ")", "\n", "\n", "prec", ",", "_", "=", "accuracy", "(", "logits", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "# prec = 0.0", "\n", "train_total", "+=", "1", "\n", "train_correct", "+=", "prec", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduce", "=", "True", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch [%d/%d], Iter [%d/%d] Training Accuracy: %.4F, Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "args", ".", "n_epoch", ",", "i", "+", "1", ",", "len", "(", "train_dataset", ")", "//", "batch_size", ",", "prec", ",", "loss", ".", "data", ")", ")", "\n", "\n", "\n", "", "", "train_acc", "=", "float", "(", "train_correct", ")", "/", "float", "(", "train_total", ")", "\n", "return", "train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.main.evaluate": [[77, 92], ["model.eval", "print", "torch.autograd.Variable().cuda", "model", "torch.softmax", "torch.max", "torch.max", "labels.size", "float", "float", "torch.autograd.Variable", "pred.cpu"], "function", ["None"], ["", "def", "evaluate", "(", "test_loader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "# Change model to 'eval' mode.", "\n", "print", "(", "'previous_best'", ",", "best_acc_", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "images", ",", "labels", ",", "_", "in", "test_loader", ":", "\n", "        ", "images", "=", "Variable", "(", "images", ")", ".", "cuda", "(", ")", "\n", "logits", "=", "model", "(", "images", ")", "\n", "outputs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "pred", ".", "cpu", "(", ")", "==", "labels", ")", ".", "sum", "(", ")", "\n", "", "acc", "=", "100", "*", "float", "(", "correct", ")", "/", "float", "(", "total", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.None.loss.loss_cross_entropy": [[11, 18], ["torch.cross_entropy", "F.cross_entropy.data.cpu().numpy", "len", "torch.sum", "torch.sum", "torch.sum", "F.cross_entropy.data.cpu"], "function", ["None"], ["def", "loss_cross_entropy", "(", "epoch", ",", "y", ",", "t", ",", "class_list", ",", "ind", ",", "noise_or_not", ",", "loss_all", ",", "loss_div_all", ")", ":", "\n", "## Record loss and loss_div for further analysis", "\n", "    ", "loss", "=", "F", ".", "cross_entropy", "(", "y", ",", "t", ",", "reduce", "=", "False", ")", "\n", "loss_numpy", "=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "num_batch", "=", "len", "(", "loss_numpy", ")", "\n", "loss_all", "[", "ind", ",", "epoch", "]", "=", "loss_numpy", "\n", "return", "torch", ".", "sum", "(", "loss", ")", "/", "num_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.BasicBlock.__init__": [[21, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.BasicBlock.forward": [[35, 41], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.PreActBlock.__init__": [[47, 58], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.conv3x3", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.PreActBlock.forward": [[60, 67], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.shortcut", "resnet.PreActBlock.conv1", "resnet.PreActBlock.conv2", "resnet.PreActBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.Bottleneck.__init__": [[72, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.Bottleneck.forward": [[88, 95], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.PreActBottleneck.__init__": [[101, 114], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.PreActBottleneck.forward": [[116, 124], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.shortcut", "resnet.PreActBottleneck.conv1", "resnet.PreActBottleneck.conv2", "resnet.PreActBottleneck.conv3", "resnet.PreActBottleneck.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.bn2", "resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet.__init__": [[126, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet._make_layer": [[138, 145], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet.forward": [[146, 156], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.conv3x3": [[14, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.PreResNet18": [[157, 159], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "PreResNet18", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet18": [[160, 162], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet34": [[163, 165], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet50": [[166, 168], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet101": [[169, 171], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet152": [[172, 174], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.test": [[176, 180], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__init__": [[48, 133], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "cifar.CIFAR10.download", "numpy.concatenate", "cifar.CIFAR10.train_data.reshape", "cifar.CIFAR10.train_data.transpose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open.close", "cifar.CIFAR10.test_data.reshape", "cifar.CIFAR10.test_data.transpose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "cifar.CIFAR10.train_data.append", "open.close", "cifar.CIFAR10.load_label", "utils.multiclass_noisify.tolist", "print", "range", "print", "print", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "numpy.zeros", "range", "print", "utils.multiclass_noisify", "utils.multiclass_noisify.tolist", "numpy.zeros", "range", "print", "len", "idx_each_class_noisy[].append", "len", "numpy.array", "sum", "numpy.transpose", "numpy.transpose", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.load_label", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.multiclass_noisify"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "\n", "noise_type", "=", "None", ",", "noise_path", "=", "None", ",", "is_human", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "dataset", "=", "'cifar10'", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "nb_classes", "=", "10", "\n", "self", ".", "noise_path", "=", "noise_path", "\n", "idx_each_class_noisy", "=", "[", "[", "]", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "if", "download", ":", "\n", "           ", "self", ".", "download", "(", ")", "\n", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "for", "fentry", "in", "self", ".", "train_list", ":", "\n", "                ", "f", "=", "fentry", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "train_data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'fine_labels'", "]", "\n", "", "fo", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "train_data", "=", "np", ".", "concatenate", "(", "self", ".", "train_data", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "#if noise_type is not None:", "\n", "if", "noise_type", "!=", "'clean'", ":", "\n", "# Load human noisy labels", "\n", "                ", "train_noisy_labels", "=", "self", ".", "load_label", "(", ")", "\n", "self", ".", "train_noisy_labels", "=", "train_noisy_labels", ".", "tolist", "(", ")", "\n", "print", "(", "f'noisy labels loaded from {self.noise_path}'", ")", "\n", "\n", "if", "not", "is_human", ":", "\n", "                    ", "T", "=", "np", ".", "zeros", "(", "(", "self", ".", "nb_classes", ",", "self", ".", "nb_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_noisy_labels", ")", ")", ":", "\n", "                        ", "T", "[", "self", ".", "train_labels", "[", "i", "]", "]", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", "+=", "1", "\n", "", "T", "=", "T", "/", "np", ".", "sum", "(", "T", ",", "axis", "=", "1", ")", "\n", "print", "(", "f'Noise transition matrix is \\n{T}'", ")", "\n", "train_noisy_labels", "=", "multiclass_noisify", "(", "y", "=", "np", ".", "array", "(", "self", ".", "train_labels", ")", ",", "P", "=", "T", ",", "\n", "random_state", "=", "0", ")", "#np.random.randint(1,10086)", "\n", "self", ".", "train_noisy_labels", "=", "train_noisy_labels", ".", "tolist", "(", ")", "\n", "T", "=", "np", ".", "zeros", "(", "(", "self", ".", "nb_classes", ",", "self", ".", "nb_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_noisy_labels", ")", ")", ":", "\n", "                        ", "T", "[", "self", ".", "train_labels", "[", "i", "]", "]", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", "+=", "1", "\n", "", "T", "=", "T", "/", "np", ".", "sum", "(", "T", ",", "axis", "=", "1", ")", "\n", "print", "(", "f'New synthetic noise transition matrix is \\n{T}'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_noisy_labels", ")", ")", ":", "\n", "                    ", "idx_each_class_noisy", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "", "class_size_noisy", "=", "[", "len", "(", "idx_each_class_noisy", "[", "i", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "self", ".", "noise_prior", "=", "np", ".", "array", "(", "class_size_noisy", ")", "/", "sum", "(", "class_size_noisy", ")", "\n", "print", "(", "f'The noisy data ratio in each class is {self.noise_prior}'", ")", "\n", "self", ".", "noise_or_not", "=", "np", ".", "transpose", "(", "self", ".", "train_noisy_labels", ")", "!=", "np", ".", "transpose", "(", "self", ".", "train_labels", ")", "\n", "self", ".", "actual_noise_rate", "=", "np", ".", "sum", "(", "self", ".", "noise_or_not", ")", "/", "50000", "\n", "print", "(", "'over all noise rate is '", ",", "self", ".", "actual_noise_rate", ")", "\n", "", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "test_data", "=", "entry", "[", "'data'", "]", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'fine_labels'", "]", "\n", "", "fo", ".", "close", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.load_label": [[134, 146], ["torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "noise_label[].reshape", "Exception", "torch.load.keys", "torch.load.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "print", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.mean", "torch.tensor.numpy", "torch.tensor.numpy"], "methods", ["None"], ["", "", "def", "load_label", "(", "self", ")", ":", "\n", "#NOTE only load manual training label", "\n", "        ", "noise_label", "=", "torch", ".", "load", "(", "self", ".", "noise_path", ")", "\n", "if", "isinstance", "(", "noise_label", ",", "dict", ")", ":", "\n", "            ", "if", "\"clean_label\"", "in", "noise_label", ".", "keys", "(", ")", ":", "\n", "                ", "clean_label", "=", "torch", ".", "tensor", "(", "noise_label", "[", "'clean_label'", "]", ")", "\n", "assert", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "self", ".", "train_labels", ")", "-", "clean_label", ")", "==", "0", "\n", "print", "(", "f'Loaded {self.noise_type} from {self.noise_path}.'", ")", "\n", "print", "(", "f'The overall noise rate is {1-np.mean(clean_label.numpy() == noise_label[self.noise_type])}'", ")", "\n", "", "return", "noise_label", "[", "self", ".", "noise_type", "]", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Input Error'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__getitem__": [[147, 174], ["PIL.Image.fromarray", "cifar.CIFAR10.transform", "cifar.CIFAR10.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "if", "self", ".", "noise_type", "!=", "'clean'", ":", "\n", "                ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_noisy_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "                ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__len__": [[175, 180], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10._check_integrity": [[181, 189], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.check_integrity"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.check_integrity"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.download": [[190, 207], ["cifar.CIFAR10._check_integrity", "utils.download_url", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.download_url"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "root", "=", "self", ".", "root", "\n", "download_url", "(", "self", ".", "url", ",", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__repr__": [[208, 219], ["cifar.CIFAR10.__len__", "cifar.CIFAR10.transform.__repr__().replace", "cifar.CIFAR10.target_transform.__repr__().replace", "cifar.CIFAR10.transform.__repr__", "cifar.CIFAR10.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__len__", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__repr__", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'train'", "if", "self", ".", "train", "is", "True", "else", "'test'", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR100.__init__": [[252, 338], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "cifar.CIFAR100.download", "cifar.CIFAR100._check_integrity", "RuntimeError", "numpy.concatenate", "cifar.CIFAR100.train_data.reshape", "cifar.CIFAR100.train_data.transpose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open.close", "cifar.CIFAR100.test_data.reshape", "cifar.CIFAR100.test_data.transpose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "cifar.CIFAR100.train_data.append", "open.close", "cifar.CIFAR100.load_label", "utils.multiclass_noisify.tolist", "print", "range", "print", "print", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "numpy.zeros", "range", "print", "utils.multiclass_noisify", "utils.multiclass_noisify.tolist", "numpy.zeros", "range", "print", "len", "idx_each_class_noisy[].append", "len", "numpy.array", "sum", "numpy.transpose", "numpy.transpose", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.cifar.CIFAR10.load_label", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.multiclass_noisify"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "\n", "noise_type", "=", "None", ",", "noise_rate", "=", "0.2", ",", "random_state", "=", "0", ",", "noise_path", "=", "None", ",", "is_human", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "dataset", "=", "'cifar100'", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "nb_classes", "=", "100", "\n", "self", ".", "noise_path", "=", "noise_path", "\n", "idx_each_class_noisy", "=", "[", "[", "]", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "for", "fentry", "in", "self", ".", "train_list", ":", "\n", "                ", "f", "=", "fentry", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "train_data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "train_labels", "+=", "entry", "[", "'fine_labels'", "]", "\n", "", "fo", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "train_data", "=", "np", ".", "concatenate", "(", "self", ".", "train_data", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "if", "noise_type", "!=", "'clean'", ":", "\n", "# load noise label", "\n", "                ", "train_noisy_labels", "=", "self", ".", "load_label", "(", ")", "\n", "self", ".", "train_noisy_labels", "=", "train_noisy_labels", ".", "tolist", "(", ")", "\n", "print", "(", "f'noisy labels loaded from {self.noise_type}'", ")", "\n", "if", "not", "is_human", ":", "\n", "                    ", "T", "=", "np", ".", "zeros", "(", "(", "self", ".", "nb_classes", ",", "self", ".", "nb_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_noisy_labels", ")", ")", ":", "\n", "                        ", "T", "[", "self", ".", "train_labels", "[", "i", "]", "]", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", "+=", "1", "\n", "", "T", "=", "T", "/", "np", ".", "sum", "(", "T", ",", "axis", "=", "1", ")", "\n", "print", "(", "f'Noise transition matrix is \\n{T}'", ")", "\n", "train_noisy_labels", "=", "multiclass_noisify", "(", "y", "=", "np", ".", "array", "(", "self", ".", "train_labels", ")", ",", "P", "=", "T", ",", "\n", "random_state", "=", "0", ")", "#np.random.randint(1,10086)", "\n", "self", ".", "train_noisy_labels", "=", "train_noisy_labels", ".", "tolist", "(", ")", "\n", "T", "=", "np", ".", "zeros", "(", "(", "self", ".", "nb_classes", ",", "self", ".", "nb_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_noisy_labels", ")", ")", ":", "\n", "                        ", "T", "[", "self", ".", "train_labels", "[", "i", "]", "]", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", "+=", "1", "\n", "", "T", "=", "T", "/", "np", ".", "sum", "(", "T", ",", "axis", "=", "1", ")", "\n", "print", "(", "f'New synthetic noise transition matrix is \\n{T}'", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_labels", ")", ")", ":", "\n", "                    ", "idx_each_class_noisy", "[", "self", ".", "train_noisy_labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "", "class_size_noisy", "=", "[", "len", "(", "idx_each_class_noisy", "[", "i", "]", ")", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "self", ".", "noise_prior", "=", "np", ".", "array", "(", "class_size_noisy", ")", "/", "sum", "(", "class_size_noisy", ")", "\n", "print", "(", "f'The noisy data ratio in each class is {self.noise_prior}'", ")", "\n", "self", ".", "noise_or_not", "=", "np", ".", "transpose", "(", "self", ".", "train_noisy_labels", ")", "!=", "np", ".", "transpose", "(", "self", ".", "train_labels", ")", "\n", "self", ".", "actual_noise_rate", "=", "np", ".", "sum", "(", "self", ".", "noise_or_not", ")", "/", "50000", "\n", "print", "(", "'over all noise rate is '", ",", "self", ".", "actual_noise_rate", ")", "\n", "", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "else", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "test_data", "=", "entry", "[", "'data'", "]", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_labels", "=", "entry", "[", "'fine_labels'", "]", "\n", "", "fo", ".", "close", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.check_integrity": [[11, 23], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["None"], ["def", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.download_url": [[25, 52], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "url.replace.replace", "print", "urllib.request.urlretrieve"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.check_integrity"], ["", "def", "download_url", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", ":", "\n", "    ", "from", "six", ".", "moves", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "# downloads file", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ")", "\n", "", "except", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.list_dir": [[54, 74], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "", "def", "list_dir", "(", "root", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all directories at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the directories found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "directories", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "directories", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "directories", "]", "\n", "\n", "", "return", "directories", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.list_files": [[76, 98], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "list_files", "(", "root", ",", "suffix", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all files ending with a suffix at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').\n            It uses the Python \"str.endswith\" method and is passed directly\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the files found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "and", "p", ".", "endswith", "(", "suffix", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "files", "]", "\n", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.multiclass_noisify": [[100, 125], ["numpy.testing.assert_array_almost_equal", "y.copy", "numpy.random.RandomState", "print", "numpy.arange", "numpy.max", "P.sum", "numpy.ones", "np.random.RandomState.multinomial", "numpy.where"], "function", ["None"], ["", "def", "multiclass_noisify", "(", "y", ",", "P", ",", "random_state", "=", "0", ")", ":", "\n", "    ", "\"\"\" Flip classes according to transition probability matrix T.\n    It expects a number between 0 and the number of classes - 1.\n    \"\"\"", "\n", "#print np.max(y), P.shape[0]", "\n", "assert", "P", ".", "shape", "[", "0", "]", "==", "P", ".", "shape", "[", "1", "]", "\n", "assert", "np", ".", "max", "(", "y", ")", "<", "P", ".", "shape", "[", "0", "]", "\n", "\n", "# row stochastic matrix", "\n", "assert_array_almost_equal", "(", "P", ".", "sum", "(", "axis", "=", "1", ")", ",", "np", ".", "ones", "(", "P", ".", "shape", "[", "1", "]", ")", ")", "\n", "assert", "(", "P", ">=", "0.0", ")", ".", "all", "(", ")", "\n", "\n", "m", "=", "y", ".", "shape", "[", "0", "]", "\n", "#print m", "\n", "new_y", "=", "y", ".", "copy", "(", ")", "\n", "flipper", "=", "np", ".", "random", ".", "RandomState", "(", "random_state", ")", "\n", "print", "(", "f'flip with random seed {random_state}'", ")", "\n", "\n", "for", "idx", "in", "np", ".", "arange", "(", "m", ")", ":", "\n", "        ", "i", "=", "y", "[", "idx", "]", "\n", "# draw a vector with only an 1", "\n", "flipped", "=", "flipper", ".", "multinomial", "(", "1", ",", "P", "[", "i", ",", ":", "]", ",", "1", ")", "[", "0", "]", "\n", "new_y", "[", "idx", "]", "=", "np", ".", "where", "(", "flipped", "==", "1", ")", "[", "0", "]", "\n", "\n", "", "return", "new_y", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify_pairflip": [[128, 151], ["numpy.eye", "range", "utils.multiclass_noisify", "print"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.multiclass_noisify"], ["", "def", "noisify_pairflip", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ",", "nb_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        flip in the pair\n    \"\"\"", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "n", "=", "noise", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# 0 -> 1", "\n", "        ", "P", "[", "0", ",", "0", "]", ",", "P", "[", "0", ",", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "for", "i", "in", "range", "(", "1", ",", "nb_classes", "-", "1", ")", ":", "\n", "            ", "P", "[", "i", ",", "i", "]", ",", "P", "[", "i", ",", "i", "+", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "", "P", "[", "nb_classes", "-", "1", ",", "nb_classes", "-", "1", "]", ",", "P", "[", "nb_classes", "-", "1", ",", "0", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "\n", "random_state", "=", "random_state", ")", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "y_train", "=", "y_train_noisy", "\n", "#print P", "\n", "\n", "", "return", "y_train", ",", "actual_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify_multiclass_symmetric": [[152, 176], ["numpy.ones", "range", "utils.multiclass_noisify", "print"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.multiclass_noisify"], ["", "def", "noisify_multiclass_symmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ",", "nb_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        flip in the symmetric way\n    \"\"\"", "\n", "P", "=", "np", ".", "ones", "(", "(", "nb_classes", ",", "nb_classes", ")", ")", "\n", "n", "=", "noise", "\n", "P", "=", "(", "n", "/", "(", "nb_classes", "-", "1", ")", ")", "*", "P", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# 0 -> 1", "\n", "        ", "P", "[", "0", ",", "0", "]", "=", "1.", "-", "n", "\n", "for", "i", "in", "range", "(", "1", ",", "nb_classes", "-", "1", ")", ":", "\n", "            ", "P", "[", "i", ",", "i", "]", "=", "1.", "-", "n", "\n", "", "P", "[", "nb_classes", "-", "1", ",", "nb_classes", "-", "1", "]", "=", "1.", "-", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "\n", "random_state", "=", "random_state", ")", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "y_train", "=", "y_train_noisy", "\n", "#print P", "\n", "\n", "", "return", "y_train", ",", "actual_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify": [[177, 183], ["utils.noisify_pairflip", "utils.noisify_multiclass_symmetric"], "function", ["home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify_pairflip", "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify_multiclass_symmetric"], ["", "def", "noisify", "(", "dataset", "=", "'mnist'", ",", "nb_classes", "=", "10", ",", "train_labels", "=", "None", ",", "noise_type", "=", "None", ",", "noise_rate", "=", "0", ",", "random_state", "=", "0", ")", ":", "\n", "    ", "if", "noise_type", "==", "'pairflip'", ":", "\n", "        ", "train_noisy_labels", ",", "actual_noise_rate", "=", "noisify_pairflip", "(", "train_labels", ",", "noise_rate", ",", "random_state", "=", "0", ",", "nb_classes", "=", "nb_classes", ")", "\n", "", "if", "noise_type", "==", "'symmetric'", ":", "\n", "        ", "train_noisy_labels", ",", "actual_noise_rate", "=", "noisify_multiclass_symmetric", "(", "train_labels", ",", "noise_rate", ",", "random_state", "=", "0", ",", "nb_classes", "=", "nb_classes", ")", "\n", "", "return", "train_noisy_labels", ",", "actual_noise_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.utils.noisify_instance": [[184, 211], ["numpy.random.seed", "numpy.random.normal", "numpy.random.normal", "enumerate", "max", "sample.flatten.flatten", "numpy.matmul", "noisy_labels.append", "q.append", "len", "torch.softmax().numpy", "numpy.random.choice", "float", "numpy.arange", "torch.tensor().eq().sum", "torch.tensor().eq().sum", "torch.softmax", "torch.tensor", "torch.tensor", "sum", "torch.tensor().eq", "torch.tensor().eq", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "noisify_instance", "(", "train_data", ",", "train_labels", ",", "noise_rate", ")", ":", "\n", "    ", "if", "max", "(", "train_labels", ")", ">", "10", ":", "\n", "        ", "num_class", "=", "100", "\n", "", "else", ":", "\n", "        ", "num_class", "=", "10", "\n", "", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "q_", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "noise_rate", ",", "scale", "=", "0.1", ",", "size", "=", "1000000", ")", "\n", "q", "=", "[", "]", "\n", "for", "pro", "in", "q_", ":", "\n", "        ", "if", "0", "<", "pro", "<", "1", ":", "\n", "            ", "q", ".", "append", "(", "pro", ")", "\n", "", "if", "len", "(", "q", ")", "==", "50000", ":", "\n", "            ", "break", "\n", "\n", "", "", "w", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "1", ",", "size", "=", "(", "32", "*", "32", "*", "3", ",", "num_class", ")", ")", "\n", "\n", "noisy_labels", "=", "[", "]", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "train_data", ")", ":", "\n", "        ", "sample", "=", "sample", ".", "flatten", "(", ")", "\n", "p_all", "=", "np", ".", "matmul", "(", "sample", ",", "w", ")", "\n", "p_all", "[", "train_labels", "[", "i", "]", "]", "=", "-", "1000000", "\n", "p_all", "=", "q", "[", "i", "]", "*", "F", ".", "softmax", "(", "torch", ".", "tensor", "(", "p_all", ")", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "p_all", "[", "train_labels", "[", "i", "]", "]", "=", "1", "-", "q", "[", "i", "]", "\n", "noisy_labels", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "num_class", ")", ",", "p", "=", "p_all", "/", "sum", "(", "p_all", ")", ")", ")", "\n", "", "over_all_noise_rate", "=", "1", "-", "float", "(", "torch", ".", "tensor", "(", "train_labels", ")", ".", "eq", "(", "torch", ".", "tensor", "(", "noisy_labels", ")", ")", ".", "sum", "(", ")", ")", "/", "50000", "\n", "return", "noisy_labels", ",", "over_all_noise_rate", "\n", ""]], "home.repos.pwc.inspect_result.ucsc-real_cifar-10-100n.data.datasets.input_dataset": [[30, 64], ["cifar.CIFAR10", "cifar.CIFAR10", "cifar.CIFAR100", "cifar.CIFAR100"], "function", ["None"], ["def", "input_dataset", "(", "dataset", ",", "noise_type", ",", "noise_path", ",", "is_human", ")", ":", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "CIFAR10", "(", "root", "=", "'~/data/'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_cifar10_transform", ",", "\n", "noise_type", "=", "noise_type", ",", "\n", "noise_path", "=", "noise_path", ",", "is_human", "=", "is_human", "\n", ")", "\n", "test_dataset", "=", "CIFAR10", "(", "root", "=", "'~/data/'", ",", "\n", "download", "=", "False", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_cifar10_transform", ",", "\n", "noise_type", "=", "noise_type", "\n", ")", "\n", "num_classes", "=", "10", "\n", "num_training_samples", "=", "50000", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_dataset", "=", "CIFAR100", "(", "root", "=", "'~/data/'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_cifar100_transform", ",", "\n", "noise_type", "=", "noise_type", ",", "\n", "noise_path", "=", "noise_path", ",", "is_human", "=", "is_human", "\n", ")", "\n", "test_dataset", "=", "CIFAR100", "(", "root", "=", "'~/data/'", ",", "\n", "download", "=", "False", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_cifar100_transform", ",", "\n", "noise_type", "=", "noise_type", "\n", ")", "\n", "num_classes", "=", "100", "\n", "num_training_samples", "=", "50000", "\n", "", "return", "train_dataset", ",", "test_dataset", ",", "num_classes", ",", "num_training_samples", "\n", "\n"]]}