{"home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.parse_args": [[24, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.None.test_imagenet.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"data\"", ",", "metavar", "=", "\"DIR\"", ",", "help", "=", "\"path to dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_prefix\"", ",", "\n", "default", "=", "\"std_adv\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"prefix used to define output path\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-c\"", ",", "\n", "\"--config\"", ",", "\n", "default", "=", "\"configs.yml\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"Path\"", ",", "\n", "help", "=", "\"path to the config file (default: configs.yml)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to pretrained weight (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nrepeat\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"overwrite the #adversarial-repeat in configs.yml\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_step\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"after how many iters, decrease lr by lr_factor\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_factor\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--adv_step\"", ",", "default", "=", "None", ",", "type", "=", "float", ",", "help", "=", "\"fgsm step size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eps\"", ",", "default", "=", "None", ",", "type", "=", "float", ",", "help", "=", "\"adversarial step: projection radias\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--cut\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.main": [[86, 105], ["utils.utils.parse_config_file", "utils.utils.initiate_logger", "utils.utils.initiate_logger.info", "utils.utils.parse_config_file.items", "utils.utils.initiate_logger.info", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.spawn", "train_imagenet.parse_args", "os.path.isdir", "os.makedirs", "utils.utils.pad_str", "utils.utils.initiate_logger.info", "utils.utils.pad_str", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.parse_config_file", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.initiate_logger", "home.repos.pwc.inspect_result.azshue_AdvBN.None.test_imagenet.parse_args", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.pad_str", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.pad_str"], ["def", "main", "(", ")", ":", "\n", "# Parase config file and initiate logging", "\n", "    ", "configs", "=", "parse_config_file", "(", "parse_args", "(", ")", ")", "\n", "logger", "=", "initiate_logger", "(", "configs", ".", "output_name", ")", "\n", "# print = logger.info", "\n", "\n", "# Create output folder", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "\"trained_models\"", ",", "configs", ".", "output_name", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "\"trained_models\"", ",", "configs", ".", "output_name", ")", ")", "\n", "# Log the config details", "\n", "", "logger", ".", "info", "(", "pad_str", "(", "\" ARGUMENTS \"", ")", ")", "\n", "for", "k", ",", "v", "in", "configs", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{}: {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "logger", ".", "info", "(", "pad_str", "(", "\"\"", ")", ")", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "world_size", "=", "1", "\n", "configs", ".", "world_size", "=", "ngpus_per_node", "*", "world_size", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "configs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.main_worker": [[107, 290], ["torch.init_process_group", "getattr.", "torch.nn.parallel.DistributedDataParallel.state_dict().items", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.CrossEntropyLoss().cuda", "os.path.join", "os.path.join", "transform_list.extend", "torchvision.ImageFolder", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "str", "print", "getattr", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "os.path.isfile", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.isfile", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "print", "torchvision.Compose", "print", "torchvision.ImageFolder", "torch.utils.data.distributed.DistributedSampler.set_epoch", "utils.utils.adjust_learning_rate", "train_imagenet.train", "utils.validation.validate", "max", "getattr", "torch.nn.parallel.DistributedDataParallel.state_dict", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.CrossEntropyLoss", "torch.nn.parallel.DistributedDataParallel.module.head.parameters", "print", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "torchvision.Compose", "utils.utils.save_checkpoint", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "isinstance", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_prec1.to.to", "os.path.join", "int", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "k.replace", "time.time", "torch.load.items", "torch.load.items"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.train", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.validate", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.save_checkpoint"], ["", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "configs", ")", ":", "\n", "# Scale and initialize the parameters", "\n", "    ", "global", "best_prec1", "\n", "configs", ".", "gpu", "=", "gpu", "\n", "if", "configs", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "configs", ".", "gpu", ")", ")", "\n", "", "configs", ".", "rank", "=", "0", "\n", "configs", ".", "ngpus_per_node", "=", "ngpus_per_node", "\n", "configs", ".", "rank", "=", "configs", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "dist_url", "=", "\"tcp://localhost:\"", "+", "str", "(", "\n", "8000", "+", "(", "int", "(", "time", ".", "time", "(", ")", "%", "1000", ")", ")", "//", "10", "\n", ")", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "dist_url", ",", "\n", "world_size", "=", "configs", ".", "world_size", ",", "\n", "rank", "=", "configs", ".", "rank", ",", "\n", ")", "\n", "\n", "# Create the model", "\n", "if", "configs", ".", "gpu", "==", "0", ":", "\n", "        ", "print", "(", "\"=> using model architecture '{}'\"", ".", "format", "(", "configs", ".", "TRAIN", ".", "arch", ")", ")", "\n", "", "if", "\"resnet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "        ", "import", "models", ".", "resnet", "as", "resnet", "\n", "create_model", "=", "getattr", "(", "resnet", ",", "configs", ".", "TRAIN", ".", "arch", ")", "\n", "", "elif", "\"densenet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "        ", "import", "models", ".", "densenet", "as", "densenet", "\n", "create_model", "=", "getattr", "(", "densenet", ",", "configs", ".", "TRAIN", ".", "arch", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "model", "=", "create_model", "(", "pretrained", "=", "True", ",", "num_classes", "=", "1000", ",", "cut", "=", "configs", ".", "TRAIN", ".", "cut", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "torch", ".", "isnan", "(", "v", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "'{} has nan'", ".", "format", "(", "k", ")", ")", "\n", "# Use weights other than the pytorch ones for initialization", "\n", "", "", "if", "configs", ".", "load", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "configs", ".", "load", ")", ":", "\n", "            ", "print", "(", "\"=> loading pretrained weight '{}'\"", ".", "format", "(", "configs", ".", "load", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "load", ")", "\n", "if", "\"state_dict\"", "in", "checkpoint", ":", "\n", "                ", "checkpoint", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "", "if", "not", "isinstance", "(", "model", ",", "(", "DataParallel", ",", "DistributedDataParallel", ")", ")", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "\n", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "}", "\n", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "\n", "{", "\n", "k", "if", "\"module.\"", "in", "k", "else", "\"module.\"", "+", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "\n", "}", "\n", ")", "\n", "\n", "", "", "", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "# Wrap the model into DDP", "\n", "if", "configs", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "configs", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "configs", ".", "DATA", ".", "batch_size", "=", "int", "(", "configs", ".", "DATA", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "configs", ".", "DATA", ".", "workers", "=", "int", "(", "(", "configs", ".", "DATA", ".", "workers", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "configs", ".", "gpu", "]", ",", "\n", "find_unused_parameters", "=", "False", ",", "\n", "broadcast_buffers", "=", "True", ",", "\n", ")", "\n", "\n", "# Criterion:", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "\n", "# Optimizer:", "\n", "if", "configs", ".", "TRAIN", ".", "optim", "==", "\"SGD\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "module", ".", "head", ".", "parameters", "(", ")", ",", "\n", "configs", ".", "TRAIN", ".", "lr", ",", "\n", "momentum", "=", "configs", ".", "TRAIN", ".", "momentum", ",", "\n", "weight_decay", "=", "configs", ".", "TRAIN", ".", "weight_decay", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Resume if a valid checkpoint path is provided", "\n", "", "if", "configs", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "configs", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "configs", ".", "resume", ")", ")", "\n", "if", "configs", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "resume", ")", "\n", "", "else", ":", "\n", "                ", "loc", "=", "\"cuda:{}\"", ".", "format", "(", "configs", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "configs", ".", "TRAIN", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "best_prec1", "=", "checkpoint", "[", "\"best_prec1\"", "]", "\n", "if", "configs", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "best_prec1", "=", "best_prec1", ".", "to", "(", "configs", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "print", "(", "\n", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "\n", "configs", ".", "resume", ",", "checkpoint", "[", "\"epoch\"", "]", "\n", ")", "\n", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "configs", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Initiate data loaders", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "data", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "data", ",", "\"val\"", ")", "\n", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "preprocess", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "configs", ".", "TRAIN", ".", "mean", ",", "configs", ".", "TRAIN", ".", "std", ")", ",", "\n", "]", "\n", "\n", "transform_list", ".", "extend", "(", "preprocess", ")", "\n", "if", "configs", ".", "gpu", "==", "0", ":", "\n", "        ", "print", "(", "\"=> start loading training data \"", ")", "\n", "\n", "", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "traindir", ",", "transforms", ".", "Compose", "(", "transform_list", ")", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", ")", "\n", "if", "configs", ".", "gpu", "==", "0", ":", "\n", "        ", "print", "(", "\"=> finished loading training data \"", ")", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "configs", ".", "DATA", ".", "img_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "configs", ".", "TRAIN", ".", "mean", ",", "configs", ".", "TRAIN", ".", "std", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "configs", ".", "TRAIN", ".", "start_epoch", ",", "configs", ".", "TRAIN", ".", "epochs", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "adjust_learning_rate", "(", "\n", "configs", ".", "TRAIN", ".", "lr", ",", "optimizer", ",", "epoch", ",", "configs", ".", "lr_step", ",", "configs", ".", "lr_factor", "\n", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "configs", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "configs", ",", "epoch", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "if", "configs", ".", "rank", "%", "ngpus_per_node", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "configs", ".", "TRAIN", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_prec1\"", ":", "best_prec1", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "os", ".", "path", ".", "join", "(", "\"trained_models\"", ",", "configs", ".", "output_name", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.train": [[293, 373], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "model.train", "model.module.feature_x.modules", "enumerate", "isinstance", "time.time", "target.cuda.cuda", "utils.utils.AverageMeter.update", "model.parameters", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "model.detach().clone().requires_grad_", "train_imagenet.perturb", "model", "criterion", "model", "criterion", "utils.utils.accuracy", "utils.utils.accuracy", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.utils.AverageMeter.update", "time.time", "m.eval", "input.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "loss.item", "input.cuda.size", "criterion.item", "input.cuda.size", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "sys.stdout.flush", "time.time", "model.detach().clone", "time.time", "len", "model.detach"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.train", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.perturb", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.accuracy", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.accuracy", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "configs", ")", ":", "\n", "# Initialize the meters", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "losses_a", "=", "AverageMeter", "(", ")", "\n", "losses_c", "=", "AverageMeter", "(", ")", "\n", "top1_clean", "=", "AverageMeter", "(", ")", "\n", "top5_clean", "=", "AverageMeter", "(", ")", "\n", "top1_adv", "=", "AverageMeter", "(", ")", "\n", "top5_adv", "=", "AverageMeter", "(", ")", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "for", "m", "in", "model", ".", "module", ".", "feature_x", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "SyncBatchNorm", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "configs", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "configs", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "configs", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "grad", "=", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feature", "=", "model", "(", "input", ",", "\"feature_x\"", ")", "\n", "\n", "", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "clean_feature", "=", "feature", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "adv_feature", "=", "perturb", "(", "model", ",", "feature", ",", "target", ",", "criterion", ",", "configs", ")", "\n", "adv_output", "=", "model", "(", "adv_feature", ",", "\"head\"", ",", "\"adv\"", ")", "\n", "loss_a", "=", "criterion", "(", "adv_output", ",", "target", ")", "\n", "clean_output", "=", "model", "(", "clean_feature", ",", "\"head\"", ",", "\"clean\"", ")", "\n", "loss_c", "=", "criterion", "(", "clean_output", ",", "target", ")", "\n", "\n", "loss", "=", "loss_c", "+", "loss_a", "\n", "clean_prec1", ",", "clean_prec5", "=", "accuracy", "(", "clean_output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "adv_prec1", ",", "adv_prec5", "=", "accuracy", "(", "adv_output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "losses_a", ".", "update", "(", "loss_a", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "losses_c", ".", "update", "(", "loss_c", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1_clean", ".", "update", "(", "clean_prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5_clean", ".", "update", "(", "clean_prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1_adv", ".", "update", "(", "adv_prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5_adv", ".", "update", "(", "adv_prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "\n", "configs", ".", "rank", "%", "configs", ".", "ngpus_per_node", "==", "0", "\n", "and", "i", "%", "configs", ".", "TRAIN", ".", "print_freq", "==", "0", "\n", ")", ":", "\n", "            ", "print", "(", "\n", "\"Train Iter: [{0}/{1}][{2}/{3}]\\t\"", "\n", "\"Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t\"", "\n", "\"Data {data_time.val:.3f} ({data_time.avg:.3f})\\t\"", "\n", "\"Loss {cls_loss.val:.4f} ({cls_loss.avg:.4f})\\t\"", "\n", "\"clean_Prec@1 {top1_c.val:.3f} ({top1_c.avg:.3f})\\t\"", "\n", "\"clean_Prec@5 {top5_c.val:.3f} ({top5_c.avg:.3f})\\t\"", "\n", "\"adv_Prec@1 {top1_a.val:.3f} ({top1_a.avg:.3f})\\t\"", "\n", "\"adv_Prec@5 {top5_a.val:.3f} ({top5_a.avg:.3f})\"", ".", "format", "(", "\n", "epoch", ",", "\n", "configs", ".", "TRAIN", ".", "epochs", ",", "\n", "i", ",", "\n", "len", "(", "train_loader", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "\n", "top1_c", "=", "top1_clean", ",", "\n", "top5_c", "=", "top5_clean", ",", "\n", "top1_a", "=", "top1_adv", ",", "\n", "top5_a", "=", "top5_adv", ",", "\n", "cls_loss", "=", "losses", ",", "\n", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.perturb": [[375, 447], ["feature.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "utils.utils.calc_mean_std", "ori_mean.cuda.cuda", "ori_std.cuda.cuda", "normalized_feature.detach_", "model.eval", "model.train", "model.module.feature_x.modules", "torch.clamp.detach", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "model", "criterion", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "adv_feature.detach_", "torch.clamp.detach_", "torch.clamp.detach_", "m.eval", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.calc_mean_std", "home.repos.pwc.inspect_result.azshue_AdvBN.None.train_imagenet.train"], ["", "", "", "def", "perturb", "(", "model", ",", "feature", ",", "target", ",", "criterion", ",", "configs", ")", ":", "\n", "    ", "size", "=", "feature", ".", "size", "(", ")", "\n", "noise_size", "=", "[", "1", ",", "size", "[", "1", "]", ",", "1", ",", "1", "]", "\n", "noise_batch_mean", "=", "Variable", "(", "torch", ".", "ones", "(", "noise_size", ")", ")", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "noise_batch_std", "=", "Variable", "(", "torch", ".", "ones", "(", "noise_size", ")", ")", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "\n", "ori_mean", ",", "ori_std", "=", "calc_mean_std", "(", "feature", ")", "\n", "ori_mean", "=", "ori_mean", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "ori_std", "=", "ori_std", ".", "cuda", "(", "configs", ".", "gpu", ")", "\n", "normalized_feature", "=", "feature", "-", "ori_mean", "\n", "normalized_feature", ".", "detach_", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "for", "_iter", "in", "range", "(", "configs", ".", "ADV", ".", "n_repeats", ")", ":", "\n", "            ", "noise_batch_mean", ".", "requires_grad_", "(", "True", ")", "\n", "noise_batch_std", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "new_mean", "=", "ori_mean", "*", "noise_batch_mean", "\n", "new_std", "=", "noise_batch_std", "\n", "adv_feature", "=", "normalized_feature", "*", "new_std", "+", "new_mean", "\n", "\n", "if", "\"densenet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "                ", "input_feature", "=", "adv_feature", "\n", "", "else", ":", "\n", "# relu layer in resnet", "\n", "                ", "input_feature", "=", "torch", ".", "clamp", "(", "adv_feature", ",", "min", "=", "0.0", ")", "\n", "\n", "", "output", "=", "model", "(", "input_feature", ",", "\"head\"", ",", "\"adv\"", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "grads_mean", ",", "grads_std", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "loss", ",", "\n", "[", "noise_batch_mean", ",", "noise_batch_std", "]", ",", "\n", "grad_outputs", "=", "None", ",", "\n", "only_inputs", "=", "True", ",", "\n", "allow_unused", "=", "True", ",", "\n", ")", "[", ":", "2", "]", "\n", "\n", "# adversarial step", "\n", "noise_batch_mean", ".", "data", "+=", "configs", ".", "ADV", ".", "fgsm_step", "*", "torch", ".", "sign", "(", "grads_mean", ".", "data", ")", "\n", "noise_batch_std", ".", "data", "+=", "configs", ".", "ADV", ".", "fgsm_step", "*", "torch", ".", "sign", "(", "grads_std", ".", "data", ")", "\n", "\n", "# projection", "\n", "noise_batch_mean", "=", "torch", ".", "clamp", "(", "\n", "noise_batch_mean", ",", "\n", "min", "=", "1", "-", "configs", ".", "ADV", ".", "scale_eps", ",", "\n", "max", "=", "1", "+", "configs", ".", "ADV", ".", "scale_eps", ",", "\n", ")", "\n", "noise_batch_std", "=", "torch", ".", "clamp", "(", "\n", "noise_batch_std", ",", "\n", "min", "=", "1", "-", "configs", ".", "ADV", ".", "scale_eps", ",", "\n", "max", "=", "1", "+", "configs", ".", "ADV", ".", "scale_eps", ",", "\n", ")", "\n", "\n", "adv_feature", ".", "detach_", "(", ")", "\n", "noise_batch_mean", ".", "detach_", "(", ")", "\n", "noise_batch_std", ".", "detach_", "(", ")", "\n", "\n", "", "", "new_mean", "=", "ori_mean", "*", "noise_batch_mean", "\n", "new_std", "=", "noise_batch_std", "\n", "\n", "adv_feature", "=", "normalized_feature", "*", "new_std", "+", "new_mean", "\n", "if", "\"densenet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "        ", "out_feature", "=", "adv_feature", "\n", "", "else", ":", "\n", "        ", "out_feature", "=", "torch", ".", "clamp", "(", "adv_feature", ",", "min", "=", "0.0", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "for", "m", "in", "model", ".", "module", ".", "feature_x", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "SyncBatchNorm", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "", "return", "out_feature", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.test_imagenet.parse_args": [[16, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.None.test_imagenet.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_prefix\"", ",", "\n", "default", "=", "\"test\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"prefix used to define output path\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-c\"", ",", "\n", "\"--config\"", ",", "\n", "default", "=", "\"./configs/base_configs.yml\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"Path\"", ",", "\n", "help", "=", "\"path to the config file (default: configs.yml)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--statedict\"", ",", "default", "=", "\" \"", ",", "type", "=", "str", ",", "help", "=", "\"pre-trained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cleanmodel\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use model not adversarially trained\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--cleantest\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "None", ",", "help", "=", "\"use clean BatchNorms\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cut\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"architexture cut\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--set\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"select which set to test on (default: all, I(magenet)/ S(tylized)/ C(orrupted)/ (inst)T(a)/ (a)D(vbn))\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--pathI\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to imagenet\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pathS\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to stylized imagenet\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pathK\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to imagenet-sketch\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--pathC\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to imagenet-C\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pathT\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to imagenet-instagram\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pathD\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"path to imagenet-AdvBN\"", "\n", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.None.test_imagenet.main": [[75, 396], ["logger.info", "torch.nn.DataParallel().cuda.eval", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow", "getattr", "getattr.cuda", "print", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "getattr", "getattr.", "torch.load", "torch.load", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.load_state_dict", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.validation.test_c", "print", "csv.writer.writerow", "csv.writer.writerow", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.validation.test_c", "print", "csv.writer.writerow", "csv.writer.writerow", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.validation.test_c", "print", "csv.writer.writerow", "csv.writer.writerow", "enumerate", "print", "csv.writer.writerow", "csv.writer.writerow", "print", "csv.writer.writerow", "csv.writer.writerow", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.validation.test_c", "print", "csv.writer.writerow", "csv.writer.writerow", "str", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "os.path.join", "print", "csv.writer.writerow", "len", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.validation.test_c", "csv.writer.writerow", "len", "len", "torchvision.ImageFolder", "getattr.", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torchvision.Compose", "str", "str", "torchvision.Compose", "str", "str", "torchvision.Compose", "str", "str", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.validation.test_c", "csv.writer.writerow", "print", "str", "os.scandir", "f.is_dir", "torchvision.ImageFolder", "open.avg.item", "top5.avg.item", "str", "str", "torchvision.Compose", "str", "str", "torchvision.ImageFolder", "open.avg.item", "str", "torchvision.Compose", "str", "str", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item", "torchvision.Compose", "str", "str", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "open.avg.item", "top5.avg.item"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "configs", ".", "set", "==", "\"\"", ":", "\n", "        ", "configs", ".", "set", "=", "\"ISKCTD\"", "\n", "\n", "", "logger", ".", "info", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "configs", ".", "TRAIN", ".", "arch", ")", ")", "\n", "\n", "if", "configs", ".", "cleanmodel", ":", "\n", "        ", "modelclass", "=", "getattr", "(", "pmodels", ",", "configs", ".", "TRAIN", ".", "arch", ")", "\n", "model", "=", "modelclass", "(", "pretrained", "=", "True", ")", ".", "cuda", "(", ")", "\n", "print", "(", "\"Use pretrained model from torchvison model_zoo\"", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "if", "\"densenet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "            ", "import", "models", ".", "densenet", "as", "models", "\n", "", "elif", "\"resnet\"", "in", "configs", ".", "TRAIN", ".", "arch", ":", "\n", "            ", "import", "models", ".", "resnet", "as", "models", "\n", "", "create_model", "=", "getattr", "(", "models", ",", "configs", ".", "TRAIN", ".", "arch", ")", "\n", "model", "=", "create_model", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "cut", "=", "configs", ".", "TRAIN", ".", "cut", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "configs", ".", "statedict", ")", "\n", "state_dict", "=", "state_dict", "[", "\"state_dict\"", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "test_log", "=", "configs", ".", "statedict", "[", ":", "-", "8", "]", "+", "str", "(", "configs", ".", "set", ")", "+", "\".csv\"", "\n", "result", "=", "open", "(", "test_log", ",", "\"wt\"", ",", "newline", "=", "\"\"", ")", "\n", "cw", "=", "csv", ".", "writer", "(", "result", ")", "\n", "cw", ".", "writerow", "(", "[", "test_log", "]", ")", "\n", "cw", ".", "writerow", "(", "[", "\"test\"", ",", "\"error top1\"", ",", "\"error top5\"", ",", "\"normalized error\"", "]", ")", "\n", "\n", "if", "\"I\"", "in", "configs", ".", "set", ":", "\n", "####################### clean imagenet #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "True", "\n", "", "testdir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "pathI", ",", "\"val\"", ")", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "testdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "configs", ".", "DATA", ".", "img_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "print", "(", "\" Clean Prec@1 {result.avg:.3f}\\n\"", ".", "format", "(", "result", "=", "result", ")", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t cleantest \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "\n", "[", "\n", "\"cleantest\"", ",", "\n", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "\"--\"", ",", "\n", "]", "\n", ")", "\n", "\n", "", "if", "\"S\"", "in", "configs", ".", "set", ":", "\n", "####################### stylized imagenet #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "False", "\n", "", "testdir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "pathS", ",", "\"val\"", ")", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "testdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "print", "(", "\" stylized-imagenet: Prec@1 {result.avg:.3f}\\n\"", ".", "format", "(", "result", "=", "result", ")", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t stylized imagenet \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "\n", "[", "\n", "\"stylized imagenet\"", ",", "\n", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "\"--\"", ",", "\n", "]", "\n", ")", "\n", "\n", "", "if", "\"K\"", "in", "configs", ".", "set", ":", "\n", "####################### stylized imagenet #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "False", "\n", "", "print", "(", "\"======> preparing data\"", ")", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "configs", ".", "pathK", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "configs", ".", "DATA", ".", "img_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "print", "(", "\"======> finished loading data\"", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "print", "(", "\" Sketch-imagenet: Prec@1 {result.avg:.3f}\\n\"", ".", "format", "(", "result", "=", "result", ")", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t Sketch imagenet \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "\n", "[", "\n", "\"Sketch imagenet\"", ",", "\n", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "\"--\"", ",", "\n", "]", "\n", ")", "\n", "\n", "", "if", "\"C\"", "in", "configs", ".", "set", ":", "\n", "####################### imagenet C #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "True", "\n", "", "severity", "=", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", "]", "\n", "types", "=", "[", "\n", "\"digital/contrast\"", ",", "\n", "\"digital/elastic_transform\"", ",", "\n", "\"digital/jpeg_compression\"", ",", "\n", "\"digital/pixelate\"", ",", "\n", "\"blur/defocus_blur\"", ",", "\n", "\"blur/glass_blur\"", ",", "\n", "\"blur/motion_blur\"", ",", "\n", "\"blur/zoom_blur\"", ",", "\n", "\"noise/gaussian_noise\"", ",", "\n", "\"noise/impulse_noise\"", ",", "\n", "\"noise/shot_noise\"", ",", "\n", "\"weather/brightness\"", ",", "\n", "\"weather/fog\"", ",", "\n", "\"weather/frost\"", ",", "\n", "\"weather/snow\"", ",", "\n", "]", "\n", "normalizer", "=", "[", "\n", "0.853204", ",", "\n", "0.646056", ",", "\n", "0.606500", ",", "\n", "0.717840", ",", "\n", "0.819880", ",", "\n", "0.826268", ",", "\n", "0.785948", ",", "\n", "0.798360", ",", "\n", "0.886428", ",", "\n", "0.922640", ",", "\n", "0.894468", ",", "\n", "0.564592", ",", "\n", "0.819324", ",", "\n", "0.826572", ",", "\n", "0.866816", ",", "\n", "]", "\n", "total_err", "=", "0", "\n", "for", "i", ",", "corruption", "in", "enumerate", "(", "types", ")", ":", "\n", "            ", "typedir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "pathC", ",", "corruption", ")", "\n", "type_err", "=", "0", "\n", "for", "degree", "in", "severity", ":", "\n", "                ", "testdir", "=", "os", ".", "path", ".", "join", "(", "typedir", ",", "degree", ")", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "testdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "# print(' {:s}/{:s}: Final Error@1 {.3f}'.format(corruption, degree, result=result))", "\n", "test_type", "=", "corruption", "+", "\"/\"", "+", "degree", "\n", "cw", ".", "writerow", "(", "\n", "[", "\n", "test_type", ",", "\n", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "\"--\"", ",", "\n", "]", "\n", ")", "\n", "type_err", "+=", "100.0", "-", "result", ".", "avg", ".", "item", "(", ")", "\n", "print", "(", "\n", "\" {:s}/{:s}: Final Error@1 {:.3f}\"", ".", "format", "(", "\n", "corruption", ",", "degree", ",", "type_err", "\n", ")", "\n", ")", "\n", "", "type_err", "/=", "5", "*", "normalizer", "[", "i", "]", "\n", "print", "(", "\"{:s}: normalized error: {:.3f}\"", ".", "format", "(", "corruption", ",", "type_err", ")", ")", "\n", "cw", ".", "writerow", "(", "[", "corruption", ",", "\"--\"", ",", "\"--\"", ",", "str", "(", "type_err", ")", "]", ")", "\n", "total_err", "+=", "type_err", "\n", "", "total_err", "=", "total_err", "/", "(", "len", "(", "types", ")", ")", "\n", "print", "(", "\n", "\"mean normalised Corruption Error over 15 types: {:.3f}\"", ".", "format", "(", "total_err", ")", "\n", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t imagenet-C \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "[", "\"mCE\"", ",", "\"--\"", ",", "\"--\"", ",", "str", "(", "total_err", ")", "]", ")", "\n", "\n", "", "if", "\"T\"", "in", "configs", ".", "set", ":", "\n", "####################### insta imagenet #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "True", "\n", "", "testdir", "=", "configs", ".", "pathT", "\n", "filters", "=", "[", "f", ".", "path", "for", "f", "in", "os", ".", "scandir", "(", "testdir", ")", "if", "f", ".", "is_dir", "(", ")", "]", "\n", "total_err_1", "=", "0", "\n", "total_err_5", "=", "0", "\n", "for", "filter", "in", "filters", ":", "\n", "            ", "subdir", "=", "os", ".", "path", ".", "join", "(", "testdir", ",", "filter", ")", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "subdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "configs", ".", "DATA", ".", "img_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "cw", ".", "writerow", "(", "\n", "[", "filter", ",", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\"--\"", "]", "\n", ")", "\n", "total_err_1", "+=", "100.0", "-", "result", ".", "avg", ".", "item", "(", ")", "\n", "total_err_5", "+=", "100.0", "-", "top5", ".", "avg", ".", "item", "(", ")", "\n", "", "total_err_1", "=", "total_err_1", "/", "(", "len", "(", "filters", ")", ")", "\n", "total_err_5", "=", "total_err_5", "/", "(", "len", "(", "filters", ")", ")", "\n", "print", "(", "\n", "\"mean Error over 20 filter types: @1 {:.3f}/ @5 {:.3f}\"", ".", "format", "(", "\n", "total_err_1", ",", "total_err_5", "\n", ")", "\n", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t insta-imagenet \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "[", "\"mCE\"", ",", "\"--\"", ",", "\"--\"", ",", "str", "(", "total_err_1", ")", ",", "\"/\"", ",", "str", "(", "total_err_5", ")", "]", ")", "\n", "\n", "", "if", "\"D\"", "in", "configs", ".", "set", ":", "\n", "#######################  Adversarial Domain #######################", "\n", "        ", "if", "configs", ".", "cleantest", "is", "not", "None", ":", "\n", "            ", "cleantest", "=", "configs", ".", "cleantest", "\n", "", "else", ":", "\n", "            ", "cleantest", "=", "False", "\n", "", "testdir", "=", "configs", ".", "pathD", "\n", "test_iter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "testdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "# transforms.Resize(configs.DATA.img_size),", "\n", "transforms", ".", "CenterCrop", "(", "configs", ".", "DATA", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "configs", ".", "DATA", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "DATA", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "result", ",", "top5", "=", "test_c", "(", "test_iter", ",", "model", ",", "cleantest", ")", "\n", "print", "(", "\" adversarial domain: Prec@1 {result.avg:.3f}\\n\"", ".", "format", "(", "result", "=", "result", ")", ")", "\n", "cw", ".", "writerow", "(", "[", "\"\\t\\t\\t  adversarial domain \\t\\t\\t\"", "]", ")", "\n", "cw", ".", "writerow", "(", "\n", "[", "\n", "\"Adversarial Domain imagenet\"", ",", "\n", "str", "(", "100", "-", "result", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "str", "(", "100", "-", "top5", ".", "avg", ".", "item", "(", ")", ")", ",", "\n", "\"--\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.__init__": [[23, 25], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.reset": [[26, 31], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update": [[32, 37], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.adjust_learning_rate": [[39, 44], ["int"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "initial_lr", ",", "optimizer", ",", "epoch", ",", "lr_step", ",", "lr_factor", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "initial_lr", "*", "(", "lr_factor", "**", "(", "epoch", "//", "int", "(", "lr_step", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.fgsm": [[46, 48], ["torch.sign"], "function", ["None"], ["", "", "def", "fgsm", "(", "gradz", ",", "step_size", ")", ":", "\n", "    ", "return", "step_size", "*", "torch", ".", "sign", "(", "gradz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.accuracy": [[50, 65], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.reshape", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.initiate_logger": [[67, 82], ["logging.basicConfig", "logging.getLogger", "logging.getLogger.addHandler", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "os.path.isdir", "os.makedirs", "logging.FileHandler", "utils.pad_str", "os.path.join", "os.path.join", "os.path.join", "datetime.datetime.now().strftime", "os.getenv", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.pad_str"], ["", "", "def", "initiate_logger", "(", "output_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "\"output\"", ",", "output_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "\"output\"", ",", "output_path", ")", ")", "\n", "", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "addHandler", "(", "\n", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "\"output\"", ",", "output_path", ",", "\"log.txt\"", ")", ",", "\"w\"", ")", "\n", ")", "\n", "logger", ".", "info", "(", "pad_str", "(", "\" LOGISTICS \"", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Experiment Date: {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M\"", ")", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"Output Name: {}\"", ".", "format", "(", "output_path", ")", ")", "\n", "logger", ".", "info", "(", "\"User: {}\"", ".", "format", "(", "os", ".", "getenv", "(", "\"USER\"", ")", ")", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.pad_str": [[90, 93], ["len", "int", "int"], "function", ["None"], ["", "def", "pad_str", "(", "msg", ",", "total_len", "=", "70", ")", ":", "\n", "    ", "rem_len", "=", "total_len", "-", "len", "(", "msg", ")", "\n", "return", "\"*\"", "*", "int", "(", "rem_len", "/", "2", ")", "+", "msg", "+", "\"*\"", "*", "int", "(", "rem_len", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.parse_config_file": [[95, 136], ["vars().items", "hasattr", "hasattr", "hasattr", "hasattr", "open", "easydict.EasyDict", "yaml.load", "vars", "float", "float", "int", "float", "str", "float", "float", "float", "float"], "function", ["None"], ["", "def", "parse_config_file", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "EasyDict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "# Add args parameters to the dict", "\n", "", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "config", "[", "k", "]", "=", "v", "\n", "", "if", "hasattr", "(", "config", ",", "\"nrepeat\"", ")", ":", "\n", "        ", "if", "config", ".", "nrepeat", "is", "not", "None", ":", "\n", "            ", "config", ".", "ADV", ".", "n_repeats", "=", "config", ".", "nrepeat", "\n", "", "", "if", "hasattr", "(", "config", ",", "\"adv_step\"", ")", ":", "\n", "        ", "if", "config", ".", "adv_step", "is", "not", "None", ":", "\n", "            ", "config", ".", "ADV", ".", "fgsm_step", "=", "config", ".", "adv_step", "\n", "", "", "if", "hasattr", "(", "config", ",", "\"eps\"", ")", ":", "\n", "        ", "if", "config", ".", "eps", "is", "not", "None", ":", "\n", "            ", "config", ".", "ADV", ".", "scale_eps", "=", "config", ".", "eps", "\n", "", "", "if", "hasattr", "(", "config", ",", "\"cut\"", ")", ":", "\n", "        ", "config", ".", "TRAIN", ".", "cut", "=", "config", ".", "cut", "\n", "\n", "# Add the output path", "\n", "", "if", "\"autoencoder\"", "in", "args", ".", "output_prefix", ":", "\n", "        ", "config", ".", "output_name", "=", "\"{:s}_lr{:e}tv_{:e}_bs{:d}\"", ".", "format", "(", "\n", "args", ".", "output_prefix", ",", "\n", "float", "(", "args", ".", "lr", ")", ",", "\n", "float", "(", "args", ".", "tv_weight", ")", ",", "\n", "int", "(", "args", ".", "batch_size", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "config", ".", "output_name", "=", "\"{:s}_lr{:.3f}_optim{:s}_wd{:.4f}_mom{:.3f}_repeat{:d}_step{:.3f}_eps{:.3f}\"", ".", "format", "(", "\n", "args", ".", "output_prefix", ",", "\n", "float", "(", "config", ".", "TRAIN", ".", "lr", ")", ",", "\n", "str", "(", "config", ".", "TRAIN", ".", "optim", ")", ",", "\n", "float", "(", "config", ".", "TRAIN", ".", "weight_decay", ")", ",", "\n", "float", "(", "config", ".", "TRAIN", ".", "momentum", ")", ",", "\n", "config", ".", "ADV", ".", "n_repeats", ",", "\n", "float", "(", "config", ".", "ADV", ".", "fgsm_step", ")", ",", "\n", "float", "(", "config", ".", "ADV", ".", "scale_eps", ")", ",", "\n", ")", "\n", "", "config", ".", "feat_channels", "=", "feat_channel_dict", "[", "config", ".", "TRAIN", ".", "arch", "]", "[", "config", ".", "TRAIN", ".", "cut", "]", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.save_checkpoint": [[138, 150], ["os.path.join", "torch.save", "os.path.join", "torch.save", "shutil.copyfile", "int", "os.path.join", "int"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "\"checkpoint.pth.tar\"", ")", "\n", "# Save model", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "int", "(", "state", "[", "\"epoch\"", "]", ")", "%", "10", "==", "0", ":", "\n", "        ", "filename2", "=", "os", ".", "path", ".", "join", "(", "\n", "filepath", ",", "\"checkpoint_{:d}.pth.tar\"", ".", "format", "(", "int", "(", "state", "[", "\"epoch\"", "]", ")", ")", "\n", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename2", ")", "\n", "# Save best model", "\n", "", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "\"model_best.pth.tar\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.calc_mean_std": [[152, 163], ["feat.size", "feat.permute().reshape().mean().view", "feat_var.sqrt().view", "len", "feat.permute().reshape().var", "feat.permute().reshape().mean", "feat_var.sqrt", "feat.permute().reshape", "feat.permute().reshape", "feat.permute", "feat.permute"], "function", ["None"], ["", "", "def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "len", "(", "size", ")", "==", "4", "\n", "C", "=", "size", "[", "1", "]", "\n", "\n", "feat_mean", "=", "feat", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_var", "=", "feat", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "C", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "1", ")", "+", "eps", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "return", "feat_mean", ",", "feat_std", "\n", "", ""]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.convert_weight.convert_ckpt": [[7, 54], ["model.state_dict", "kv.items", "collections.OrderedDict", "kv_keys.append", "values.append", "isinstance", "k.replace", "adv_key.replace", "getattr", "torch.BoolTensor", "adv_key.replace", "torch.BoolTensor", "k.split"], "function", ["None"], ["def", "convert_ckpt", "(", "model", ",", "weight", ",", "adv_key", "=", "\"adv_bn\"", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        model (torch.nn.Module): a model with additional adv_bn layers\n        weight (state_dict): the statedict without adv_bn layers\n        adv_key (str): the keyword for adv_bn layers in the model\n    \"\"\"", "\n", "sd", "=", "model", ".", "state_dict", "(", ")", "\n", "kv", "=", "weight", "\n", "\n", "values", "=", "[", "]", "\n", "kv_keys", "=", "[", "]", "\n", "for", "k", ",", "value", "in", "kv", ".", "items", "(", ")", ":", "\n", "        ", "kv_keys", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "\n", "", "nkv", "=", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "for", "k", "in", "sd", ":", "\n", "        ", "if", "adv_key", "in", "k", ":", "\n", "# initialize the adv_bn layer using statistcs from its clean counterparts", "\n", "            ", "nkv", "[", "k", "]", "=", "nkv", "[", "k", ".", "replace", "(", "adv_key", ",", "adv_key", ".", "replace", "(", "\"adv\"", ",", "\"clean\"", ")", ")", "]", "\n", "", "elif", "adv_key", ".", "replace", "(", "\"adv\"", ",", "\"clean\"", ")", "in", "k", "or", "'feature_x.1'", "in", "k", "or", "isinstance", "(", "getattr", "(", "model", ",", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", ")", ",", "BatchNorm2d", ")", ":", "\n", "# in case bn stats are stored in different order (wt/bias, mean/var vs. mean/var, wt/bias) ", "\n", "            ", "if", "(", "'weight'", "in", "k", "and", "'weight'", "not", "in", "kv_keys", "[", "index", "]", ")", "or", "(", "'bias'", "in", "k", "and", "'bias'", "not", "in", "kv_keys", "[", "index", "]", ")", ":", "\n", "                ", "nkv", "[", "k", "]", "=", "values", "[", "index", "+", "2", "]", "\n", "index", "+=", "1", "\n", "", "elif", "(", "'mean'", "in", "k", "and", "'mean'", "not", "in", "kv_keys", "[", "index", "]", ")", "or", "(", "'var'", "in", "k", "and", "'var'", "not", "in", "kv_keys", "[", "index", "]", ")", ":", "\n", "                ", "nkv", "[", "k", "]", "=", "values", "[", "index", "-", "2", "]", "\n", "index", "+=", "1", "\n", "", "elif", "\"num_batches_tracked\"", "in", "k", "and", "\"num_batched_tracked\"", "not", "in", "kv_keys", "[", "index", "]", ":", "\n", "# for converting models weights from older pytorch version", "\n", "                ", "nkv", "[", "k", "]", "=", "torch", ".", "BoolTensor", "(", "[", "True", "]", ")", "\n", "", "else", ":", "\n", "                ", "nkv", "[", "k", "]", "=", "values", "[", "index", "]", "\n", "index", "+=", "1", "\n", "", "", "elif", "\"num_batches_tracked\"", "in", "k", "and", "\"num_batched_tracked\"", "not", "in", "kv_keys", "[", "index", "]", ":", "\n", "# for converting models weights from older pytorch version", "\n", "            ", "nkv", "[", "k", "]", "=", "torch", ".", "BoolTensor", "(", "[", "True", "]", ")", "\n", "", "else", ":", "\n", "            ", "nkv", "[", "k", "]", "=", "values", "[", "index", "]", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "nkv", "\n", "", ""]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.validate": [[10, 72], ["torch.Tensor", "mean.expand().cuda.expand().cuda", "torch.Tensor", "std.expand().cuda.expand().cuda", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "time.time", "enumerate", "print", "numpy.array", "mean.expand().cuda.expand", "numpy.array", "std.expand().cuda.expand", "torch.no_grad", "hasattr", "target.cuda.cuda", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "sys.stdout.flush", "input.cuda.cuda", "time.time", "hasattr", "hasattr", "len"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.accuracy", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update"], ["def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "configs", ",", "epoch", ")", ":", "\n", "# Mean/Std for normalization", "\n", "    ", "mean", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "configs", ".", "TRAIN", ".", "mean", ")", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "mean", "=", "mean", ".", "expand", "(", "3", ",", "configs", ".", "DATA", ".", "crop_size", ",", "configs", ".", "DATA", ".", "crop_size", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "configs", ".", "TRAIN", ".", "std", ")", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "std", "=", "std", ".", "expand", "(", "3", ",", "configs", ".", "DATA", ".", "crop_size", ",", "configs", ".", "DATA", ".", "crop_size", ")", ".", "cuda", "(", ")", "\n", "\n", "# Initiate the meters", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "configs", ",", "\"gpu\"", ")", ":", "\n", "                ", "if", "configs", ".", "gpu", "is", "not", "None", ":", "\n", "                    ", "input", "=", "input", ".", "cuda", "(", "configs", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ",", "\"full\"", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "configs", ".", "TRAIN", ".", "print_freq", "==", "0", ":", "\n", "                ", "if", "hasattr", "(", "configs", ",", "\"rank\"", ")", "and", "hasattr", "(", "configs", ",", "\"ngpus_per_node\"", ")", ":", "\n", "                    ", "if", "not", "configs", ".", "rank", "%", "configs", ".", "ngpus_per_node", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "", "print", "(", "\n", "\"Test: [{0}/{1}]\\t\"", "\n", "\"Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t\"", "\n", "\"Prec@5 {top5.val:.3f} ({top5.avg:.3f})\"", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "val_loader", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "\n", "top5", "=", "top5", ",", "\n", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "print", "(", "\n", "\" Final Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}\"", ".", "format", "(", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", "\n", ")", "\n", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.utils.validation.test_c": [[74, 91], ["utils.AverageMeter", "utils.AverageMeter", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.no_grad", "input.cuda.size", "input.cuda.size", "model", "model"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.accuracy", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.azshue_AdvBN.utils.utils.AverageMeter.update"], ["", "def", "test_c", "(", "dataloader", ",", "model", ",", "cleantest", ")", ":", "\n", "    ", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "cleantest", ":", "\n", "                ", "output", "=", "model", "(", "input", ",", "\"full\"", ",", "\"clean\"", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "input", ",", "\"full\"", ",", "\"adv\"", ")", "\n", "\n", "", "", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "", "return", "top1", ",", "top5", "\n", "", ""]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.BasicBlock.__init__": [[39, 58], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv3x3", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "clean_bn1", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "adv_bn1", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "clean_bn2", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "adv_bn2", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.BasicBlock.forward": [[59, 86], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.clean_bn1", "resnet.BasicBlock.adv_bn1", "resnet.BasicBlock.clean_bn2", "resnet.BasicBlock.adv_bn2", "resnet.BasicBlock.downsample.conv", "resnet.BasicBlock.downsample.clean_bn", "resnet.BasicBlock.downsample.adv_bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "            ", "out", "=", "self", ".", "clean_bn1", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "adv_bn1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "            ", "out", "=", "self", ".", "clean_bn2", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "adv_bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", ".", "conv", "(", "x", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", ".", "clean_bn", "(", "identity", ")", "\n", "", "else", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", ".", "adv_bn", "(", "identity", ")", "\n", "\n", "", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.Bottleneck.__init__": [[92, 111], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "norm_layer", "resnet.conv3x3", "norm_layer", "norm_layer", "resnet.conv1x1", "norm_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv1x1", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv3x3", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "clean_bn1", "=", "norm_layer", "(", "width", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "adv_bn1", "=", "norm_layer", "(", "width", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "clean_bn2", "=", "norm_layer", "(", "width", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "adv_bn2", "=", "norm_layer", "(", "width", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "clean_bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "adv_bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.Bottleneck.forward": [[112, 146], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.relu", "resnet.Bottleneck.clean_bn1", "resnet.Bottleneck.adv_bn1", "resnet.Bottleneck.clean_bn2", "resnet.Bottleneck.adv_bn2", "resnet.Bottleneck.clean_bn3", "resnet.Bottleneck.adv_bn3", "resnet.Bottleneck.downsample.conv", "resnet.Bottleneck.downsample.clean_bn", "resnet.Bottleneck.downsample.adv_bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "            ", "out", "=", "self", ".", "clean_bn1", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "adv_bn1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "            ", "out", "=", "self", ".", "clean_bn2", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "adv_bn2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "            ", "out", "=", "self", ".", "clean_bn3", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "adv_bn3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", ".", "conv", "(", "x", ")", "\n", "if", "tag", "==", "'clean'", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", ".", "clean_bn", "(", "identity", ")", "\n", "", "else", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", ".", "adv_bn", "(", "identity", ")", "\n", "\n", "", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.Head.__init__": [[149, 162], ["torch.Module.__init__", "enumerate", "len", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "block_num.append", "enumerate", "len", "setattr", "str", "str", "int"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "cut", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block_num", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "block_num", ".", "append", "(", "len", "(", "layer", ")", ")", "\n", "for", "j", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer{}_{}'", ".", "format", "(", "str", "(", "int", "(", "cut", ")", "+", "i", "+", "1", ")", ",", "str", "(", "j", ")", ")", ",", "block", ")", "\n", "", "", "self", ".", "layer_num", "=", "len", "(", "layers", ")", "\n", "self", ".", "block_num", "=", "block_num", "\n", "self", ".", "cut", "=", "cut", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "flatten", "=", "nn", ".", "Flatten", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.Head.forward": [[163, 172], ["range", "resnet.Head.avgpool", "resnet.Head.flatten", "resnet.Head.fc", "range", "getattr", "getattr.", "str", "str", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "block_num", "[", "i", "]", ")", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "'layer{}_{}'", ".", "format", "(", "str", "(", "int", "(", "self", ".", "cut", ")", "+", "i", "+", "1", ")", ",", "str", "(", "j", ")", ")", ")", "\n", "x", "=", "m", "(", "x", ",", "tag", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet.__init__": [[181, 259], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layer_list.append", "layer_list.append", "layer_list.append", "layer_list.append", "feature_x.append", "feature_x.append", "feature_x.append", "range", "torch.Sequential", "torch.Sequential", "resnet.Head", "resnet.ResNet.modules", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "feature_x.append", "feature_x.append", "getattr().parameters", "resnet.ResNet.feature_x.modules", "range", "isinstance", "resnet.ResNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "isinstance", "head.append", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "getattr", "m.eval", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "train_all", "=", "False", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "norm_layer", "=", "None", ",", "cut", "=", "2", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "if", "num_classes", "==", "1000", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "", "elif", "num_classes", "==", "10", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "layer_list", "=", "[", "]", "\n", "layer_list", ".", "append", "(", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", ")", "\n", "layer_list", ".", "append", "(", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", ")", "\n", "layer_list", ".", "append", "(", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", ")", "\n", "layer_list", ".", "append", "(", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", ")", "\n", "self", ".", "cut", "=", "cut", "\n", "\n", "# first few layers (g^{1, l}) for extracting features", "\n", "feature_x", "=", "[", "]", "\n", "feature_x", ".", "append", "(", "conv1", ")", "\n", "feature_x", ".", "append", "(", "bn1", ")", "\n", "feature_x", ".", "append", "(", "relu", ")", "\n", "if", "num_classes", "==", "1000", ":", "\n", "            ", "feature_x", ".", "append", "(", "maxpool", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "cut", ")", ":", "\n", "            ", "layer", "=", "layer_list", "[", "i", "]", "\n", "feature_x", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layer", ")", ")", "\n", "", "self", ".", "feature_x", "=", "nn", ".", "Sequential", "(", "*", "feature_x", ")", "\n", "\n", "# fix the g^{1, l} when training with advbn", "\n", "if", "not", "train_all", ":", "\n", "            ", "for", "params", "in", "getattr", "(", "self", ",", "'feature_x'", ")", ".", "parameters", "(", ")", ":", "\n", "               ", "params", ".", "requires_grad", "=", "False", "\n", "", "for", "m", "in", "self", ".", "feature_x", ".", "modules", "(", ")", ":", "\n", "               ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                   ", "m", ".", "eval", "(", ")", "\n", "\n", "# downstream layers for deeper feature extraction and classification", "\n", "", "", "", "head", "=", "[", "]", "\n", "if", "self", ".", "cut", "+", "1", "<=", "4", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "cut", ",", "4", ")", ":", "\n", "                ", "layer", "=", "layer_list", "[", "i", "]", "\n", "head", ".", "append", "(", "layer", ")", "\n", "", "", "self", ".", "head", "=", "Head", "(", "head", ",", "cut", ",", "num_classes", ")", "\n", "\n", "# parameter initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._make_layer": [[260, 284], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "collections.OrderedDict", "block", "resnet.conv1x1", "norm_layer", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ")", ",", "\n", "(", "'clean_bn'", ",", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", ",", "\n", "(", "'adv_bn'", ",", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet._forward_impl": [[285, 294], ["resnet.ResNet.feature_x", "resnet.ResNet.head", "resnet.ResNet.feature_x", "resnet.ResNet.head"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ",", "stage", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "if", "stage", "==", "'feature_x'", ":", "\n", "            ", "x", "=", "self", ".", "feature_x", "(", "x", ")", "\n", "", "elif", "stage", "==", "'head'", ":", "\n", "            ", "x", "=", "self", ".", "head", "(", "x", ",", "tag", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "feature_x", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ",", "tag", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.ResNet.forward": [[295, 297], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ",", "stage", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ",", "stage", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.conv1x1": [[30, 33], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet": [[299, 306], ["resnet.ResNet", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "utils.convert_weight.convert_ckpt", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.convert_weight.convert_ckpt"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "kv", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ")", "\n", "nkv", "=", "convert_ckpt", "(", "model", ",", "kv", ",", "'adv_bn'", ")", "\n", "model", ".", "load_state_dict", "(", "nkv", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.resnet18": [[308, 318], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.resnet34": [[320, 330], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.resnet50": [[332, 342], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.resnet101": [[344, 354], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet.resnet152": [[356, 366], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.__init__": [[21, 39], ["torch.Module.__init__", "float", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "memory_efficient", "=", "False", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "first_layer", ":", "\n", "            ", "self", ".", "add_module", "(", "'clean_norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'adv_norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'clean_norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'adv_norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "float", "(", "drop_rate", ")", "\n", "self", ".", "memory_efficient", "=", "memory_efficient", "\n", "self", ".", "first_layer", "=", "first_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.bn_function": [[40, 51], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet._DenseLayer.conv1", "densenet._DenseLayer.relu1", "densenet._DenseLayer.clean_norm1", "densenet._DenseLayer.adv_norm1"], "methods", ["None"], ["", "def", "bn_function", "(", "self", ",", "inputs", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "concated_features", "=", "torch", ".", "cat", "(", "inputs", ",", "1", ")", "\n", "if", "self", ".", "first_layer", ":", "\n", "            ", "input_feature", "=", "concated_features", "\n", "", "else", ":", "\n", "            ", "if", "tag", "==", "'clean'", ":", "\n", "                ", "input_feature", "=", "self", ".", "clean_norm1", "(", "concated_features", ")", "\n", "", "else", ":", "\n", "                ", "input_feature", "=", "self", ".", "adv_norm1", "(", "concated_features", ")", "\n", "", "", "bottleneck_output", "=", "self", ".", "conv1", "(", "self", ".", "relu1", "(", "input_feature", ")", ")", "# noqa: T484", "\n", "return", "bottleneck_output", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.any_requires_grad": [[53, 59], ["None"], "methods", ["None"], ["", "def", "any_requires_grad", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> bool", "\n", "        ", "for", "tensor", "in", "input", ":", "\n", "            ", "if", "tensor", ".", "requires_grad", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.call_checkpoint_bottleneck": [[60, 67], ["torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "densenet._DenseLayer.bn_function"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.bn_function"], ["", "@", "torch", ".", "jit", ".", "unused", "# noqa: T484", "\n", "def", "call_checkpoint_bottleneck", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> Tensor", "\n", "        ", "def", "closure", "(", "*", "inputs", ")", ":", "\n", "            ", "return", "self", ".", "bn_function", "(", "inputs", ")", "\n", "\n", "", "return", "cp", ".", "checkpoint", "(", "closure", ",", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.forward": [[80, 104], ["isinstance", "densenet._DenseLayer.conv2", "densenet._DenseLayer.any_requires_grad", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "densenet._DenseLayer.call_checkpoint_bottleneck", "densenet._DenseLayer.bn_function", "densenet._DenseLayer.clean_norm2", "densenet._DenseLayer.adv_norm2", "densenet._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "Exception"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.any_requires_grad", "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.call_checkpoint_bottleneck", "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseLayer.bn_function"], ["", "def", "forward", "(", "self", ",", "input", ",", "tag", "=", "'clean'", ")", ":", "# noqa: F811", "\n", "        ", "if", "isinstance", "(", "input", ",", "Tensor", ")", ":", "\n", "            ", "prev_features", "=", "[", "input", "]", "\n", "", "else", ":", "\n", "            ", "prev_features", "=", "input", "\n", "\n", "", "if", "self", ".", "memory_efficient", "and", "self", ".", "any_requires_grad", "(", "prev_features", ")", ":", "\n", "            ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Memory Efficient not supported in JIT\"", ")", "\n", "\n", "", "bottleneck_output", "=", "self", ".", "call_checkpoint_bottleneck", "(", "prev_features", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck_output", "=", "self", ".", "bn_function", "(", "prev_features", ",", "tag", ")", "\n", "\n", "", "if", "tag", "==", "'clean'", ":", "\n", "            ", "input_feature", "=", "self", ".", "clean_norm2", "(", "bottleneck_output", ")", "\n", "", "else", ":", "\n", "            ", "input_feature", "=", "self", ".", "adv_norm2", "(", "bottleneck_output", ")", "\n", "\n", "", "new_features", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "input_feature", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseBlock.__init__": [[109, 122], ["torch.Module.__init__", "range", "densenet._DenseLayer", "setattr"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "memory_efficient", "=", "False", ",", "first_block", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "\n", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", "first_layer", "=", "(", "first_block", "and", "i", "==", "0", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._DenseBlock.forward": [[123, 130], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "getattr.", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "init_features", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "features", "=", "[", "init_features", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "new_features", "=", "m", "(", "features", ",", "tag", ")", "\n", "features", ".", "append", "(", "new_features", ")", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._Transition.__init__": [[133, 141], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "clean_norm", "=", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", "\n", "self", ".", "adv_norm", "=", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._Transition.forward": [[142, 151], ["densenet._Transition.relu", "densenet._Transition.conv", "densenet._Transition.pool", "densenet._Transition.clean_norm", "densenet._Transition.adv_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "if", "tag", "==", "'clean'", ":", "\n", "            ", "x", "=", "self", ".", "clean_norm", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "adv_norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.Head.__init__": [[153, 178], ["torch.Module.__init__", "enumerate", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "densenet._DenseBlock", "setattr", "densenet._Transition", "setattr", "len"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "growth_rate", ",", "block_config", ",", "\n", "bn_size", ",", "drop_rate", ",", "num_classes", ",", "memory_efficient", ")", ":", "\n", "        ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_features", "=", "num_features", "\n", "self", ".", "block_config", "=", "block_config", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", "first_block", "=", "(", "i", "==", "0", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "setattr", "(", "self", ",", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "", "", "self", ".", "clean_norm5", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "self", ".", "adv_norm5", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.Head.forward": [[180, 196], ["range", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "densenet.Head.classifier", "len", "getattr", "getattr.", "densenet.Head.clean_norm5", "densenet.Head.adv_norm5", "getattr", "getattr.", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "block_config", ")", ")", ":", "\n", "            ", "m1", "=", "getattr", "(", "self", ",", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "x", "=", "m1", "(", "x", ",", "tag", ")", "\n", "if", "i", "!=", "len", "(", "self", ".", "block_config", ")", "-", "1", ":", "\n", "                ", "m2", "=", "getattr", "(", "self", ",", "'transition%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "x", "=", "m2", "(", "x", ",", "tag", ")", "\n", "", "", "if", "tag", "==", "'clean'", ":", "\n", "            ", "x", "=", "self", ".", "clean_norm5", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "adv_norm5", "(", "x", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.FeatureX.__init__": [[198, 223], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "enumerate", "densenet._DenseBlock", "setattr", "densenet._Transition", "setattr"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "growth_rate", ",", "block_config", ",", "\n", "bn_size", ",", "drop_rate", ",", "num_classes", ",", "memory_efficient", ")", ":", "\n", "        ", "super", "(", "FeatureX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_init_features", "=", "num_features", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm0", "=", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "block_config", "=", "block_config", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", "\n", ")", "\n", "setattr", "(", "self", ",", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "setattr", "(", "self", ",", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.FeatureX.forward": [[224, 235], ["densenet.FeatureX.conv0", "densenet.FeatureX.norm0", "densenet.FeatureX.relu0", "densenet.FeatureX.pool0", "range", "len", "getattr", "getattr.", "getattr", "getattr."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "norm0", "(", "x", ")", "\n", "x", "=", "self", ".", "relu0", "(", "x", ")", "\n", "x", "=", "self", ".", "pool0", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "block_config", ")", ")", ":", "\n", "            ", "m1", "=", "getattr", "(", "self", ",", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "x", "=", "m1", "(", "x", ")", "\n", "m2", "=", "getattr", "(", "self", ",", "'transition%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "x", "=", "m2", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.DenseNet.__init__": [[252, 284], ["torch.Module.__init__", "densenet.FeatureX", "enumerate", "densenet.Head", "densenet.DenseNet.modules", "getattr().parameters", "densenet.DenseNet.feature_x.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "int", "getattr", "m.eval", "int", "int", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "num_init_features", "=", "64", ",", "\n", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ",", "memory_efficient", "=", "False", ",", "\n", "cut", "=", "1", ",", "train_all", "=", "False", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "self", ".", "feature_x", "=", "FeatureX", "(", "num_features", ",", "growth_rate", ",", "block_config", "[", ":", "int", "(", "cut", ")", "]", ",", "\n", "bn_size", ",", "drop_rate", ",", "num_classes", ",", "memory_efficient", ")", "\n", "# fix the g^{1, l} when training with advbn", "\n", "if", "not", "train_all", ":", "\n", "            ", "for", "params", "in", "getattr", "(", "self", ",", "'feature_x'", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "params", ".", "requires_grad", "=", "False", "\n", "", "for", "m", "in", "self", ".", "feature_x", ".", "modules", "(", ")", ":", "\n", "                   ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                       ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", "[", ":", "int", "(", "cut", ")", "]", ")", ":", "\n", "            ", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "", "self", ".", "head", "=", "Head", "(", "num_features", ",", "growth_rate", ",", "block_config", "[", "int", "(", "cut", ")", ":", "]", ",", "\n", "bn_size", ",", "drop_rate", ",", "num_classes", ",", "memory_efficient", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.DenseNet._forward_impl": [[285, 294], ["densenet.DenseNet.feature_x", "densenet.DenseNet.head", "densenet.DenseNet.feature_x", "densenet.DenseNet.head"], "methods", ["None"], ["", "", "", "def", "_forward_impl", "(", "self", ",", "x", ",", "stage", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "if", "stage", "==", "'feature_x'", ":", "\n", "            ", "x", "=", "self", ".", "feature_x", "(", "x", ")", "\n", "", "elif", "stage", "==", "'head'", ":", "\n", "            ", "x", "=", "self", ".", "head", "(", "x", ",", "tag", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "feature_x", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ",", "tag", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.DenseNet.forward": [[295, 297], ["densenet.DenseNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ",", "stage", ",", "tag", "=", "'clean'", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ",", "stage", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._load_state_dict": [[299, 303], ["torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "utils.convert_weight.convert_ckpt", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.utils.convert_weight.convert_ckpt"], ["", "", "def", "_load_state_dict", "(", "model", ",", "model_url", ")", ":", "\n", "    ", "kv", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "model_url", ")", "\n", "nkv", "=", "convert_ckpt", "(", "model", ",", "kv", ",", "'adv_norm'", ")", "\n", "model", ".", "load_state_dict", "(", "nkv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._densenet": [[305, 311], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._load_state_dict"], ["", "def", "_densenet", "(", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "arch", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.densenet121": [[313, 325], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.densenet161": [[327, 339], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.densenet169": [[341, 353], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet.densenet201": [[355, 367], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.densenet._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__": [[97, 114], ["torch.Module.__init__", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "vgg.children", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg", ",", "decoder", ",", "tv_weight", "=", "1e-8", ",", "pretrain", "=", "False", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_layers", "=", "list", "(", "vgg", ".", "children", "(", ")", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", ":", "4", "]", ")", "# input -> relu1_1", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "4", ":", "11", "]", ")", "# relu1_1 -> relu2_1", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "11", ":", "18", "]", ")", "# relu2_1 -> relu3_1", "\n", "self", ".", "enc_4", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "18", ":", "31", "]", ")", "# relu3_1 -> relu4_1", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "vgg", "=", "vgg", "\n", "self", ".", "tv_weight", "=", "tv_weight", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "cls_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# fix the encoder", "\n", "for", "name", "in", "[", "\"enc_1\"", ",", "\"enc_2\"", ",", "\"enc_3\"", ",", "\"enc_4\"", "]", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.encode": [[116, 120], ["range", "getattr"], "methods", ["None"], ["", "", "", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "input", "=", "getattr", "(", "self", ",", "\"enc_{:d}\"", ".", "format", "(", "i", "+", "1", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.decode": [[121, 124], ["autoencoder.Net.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "feature", ")", ":", "\n", "        ", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.pretrain": [[125, 133], ["autoencoder.Net.encode", "autoencoder.Net.decoder", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "autoencoder.Net.mse_loss", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.encode"], ["", "def", "pretrain", "(", "self", ",", "input", ")", ":", "\n", "        ", "feat", "=", "self", ".", "encode", "(", "input", ")", "\n", "output", "=", "self", ".", "decoder", "(", "feat", ")", "\n", "diff_i", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "output", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "output", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", "\n", "diff_j", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "output", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "output", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "loss_tv", "=", "diff_i", "+", "diff_j", "\n", "loss", "=", "self", ".", "mse_loss", "(", "output", ",", "input", ")", "\n", "return", "loss", "+", "self", ".", "tv_weight", "*", "loss_tv", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net._forward_impl": [[134, 141], ["autoencoder.Net.encode", "autoencoder.Net.decode", "print"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.encode", "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.decode"], ["", "def", "_forward_impl", "(", "self", ",", "x", ",", "stage", ")", ":", "\n", "        ", "if", "stage", "==", "\"encode\"", ":", "\n", "            ", "return", "self", ".", "encode", "(", "x", ")", "\n", "", "elif", "stage", "==", "\"decode\"", ":", "\n", "            ", "return", "self", ".", "decode", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"no such stage: {:s}\"", ".", "format", "(", "stage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net.forward": [[142, 144], ["autoencoder.Net._forward_impl"], "methods", ["home.repos.pwc.inspect_result.azshue_AdvBN.models.autoencoder.Net._forward_impl"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "stage", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ",", "stage", ")", "\n", "", "", ""]]}