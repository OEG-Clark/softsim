{"home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.one_hot": [[19, 35], ["torch.zeros().cuda", "torch.zeros().cuda", "indices.view", "encoded_indicies.scatter_.scatter_", "torch.zeros", "torch.zeros", "indices.size", "torch.Size", "torch.Size", "indices.size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["def", "one_hot", "(", "indices", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Returns a one-hot tensor.\n    This is a PyTorch equivalent of Tensorflow's tf.one_hot.\n        \n    Parameters:\n      indices:  a (n_batch, m) Tensor or (m) Tensor.\n      depth: a scalar. Represents the depth of the one hot dimension.\n    Returns: a (n_batch, m, depth) Tensor or (m, depth) Tensor.\n    \"\"\"", "\n", "\n", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", ".", "cuda", "(", ")", "\n", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicies", "=", "encoded_indicies", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "\n", "return", "encoded_indicies", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model": [[36, 74], ["models.meta_part_inference_mini.ProtoComNet().cuda", "models.resnet12_2.resnet12().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "models.PredTrainHead.LinearClassifier().cuda", "ClassificationHead().cuda", "models.meta_part_inference_mini.ProtoComNet", "models.PredTrainHead.LinearRotateHead().cuda", "print", "ClassificationHead().cuda", "print", "models.resnet12_2.resnet12", "models.PredTrainHead.LinearClassifier", "ClassificationHead", "models.PredTrainHead.LinearRotateHead", "ClassificationHead"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.resnet12"], ["", "def", "get_model", "(", "options", ")", ":", "\n", "# Choose the embedding network", "\n", "    ", "if", "options", ".", "network", "==", "'ResNet'", ":", "\n", "        ", "network", "=", "resnet12", "(", ")", ".", "cuda", "(", ")", "\n", "network", "=", "torch", ".", "nn", ".", "DataParallel", "(", "network", ")", "\n", "fea_dim", "=", "512", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Cannot recognize the network type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "", "propa_head", "=", "ProtoComNet", "(", "opt", "=", "options", ",", "in_dim", "=", "fea_dim", ")", ".", "cuda", "(", ")", "\n", "# Choose the classification head", "\n", "if", "opt", ".", "use_trainval", "==", "'True'", ":", "\n", "        ", "n_classes", "=", "80", "\n", "", "else", ":", "\n", "        ", "n_classes", "=", "64", "\n", "", "if", "options", ".", "pre_head", "==", "'LinearNet'", ":", "\n", "        ", "pre_head", "=", "LinearClassifier", "(", "in_dim", "=", "fea_dim", ",", "n_classes", "=", "n_classes", ")", ".", "cuda", "(", ")", "\n", "", "elif", "options", ".", "pre_head", "==", "'LinearRotateNet'", ":", "\n", "        ", "pre_head", "=", "LinearRotateHead", "(", "in_dim", "=", "fea_dim", ",", "n_classes", "=", "n_classes", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Cannot recognize the dataset type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "", "if", "options", ".", "phase", "==", "'pretrain'", ":", "\n", "        ", "from", "models", ".", "classification_heads_orgin", "import", "ClassificationHead", "\n", "", "else", ":", "\n", "        ", "from", "models", ".", "classification_heads", "import", "ClassificationHead", "\n", "# Choose the classification head", "\n", "", "if", "options", ".", "head", "==", "'CosineNet'", ":", "\n", "        ", "cls_head", "=", "ClassificationHead", "(", "base_learner", "=", "'CosineNet'", ")", ".", "cuda", "(", ")", "\n", "", "elif", "options", ".", "head", "==", "'FuseCosNet'", ":", "\n", "        ", "cls_head", "=", "ClassificationHead", "(", "base_learner", "=", "'FuseCos'", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Cannot recognize the dataset type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "", "return", "(", "network", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_dataset": [[75, 94], ["MiniImageNet", "MiniImageNet", "print", "MiniImageNet", "MiniImageNetPC", "MiniImageNet"], "function", ["None"], ["", "def", "get_dataset", "(", "options", ")", ":", "\n", "# Choose the embedding network", "\n", "    ", "if", "options", ".", "dataset", "==", "'miniImageNet'", ":", "\n", "        ", "from", "data", ".", "mini_imagenet", "import", "MiniImageNet", ",", "FewShotDataloader", ",", "MiniImageNetPC", "\n", "# dataset_trainval = MiniImageNet(phase='trainval')", "\n", "if", "options", ".", "phase", "==", "'savepart'", ":", "\n", "            ", "dataset_train", "=", "MiniImageNet", "(", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "True", ")", "\n", "", "elif", "options", ".", "phase", "==", "'metainfer'", ":", "\n", "            ", "dataset_train", "=", "MiniImageNetPC", "(", "phase", "=", "'train'", ",", "shot", "=", "options", ".", "train_shot", ")", "\n", "", "else", ":", "\n", "            ", "dataset_train", "=", "MiniImageNet", "(", "phase", "=", "'train'", ")", "\n", "", "dataset_val", "=", "MiniImageNet", "(", "phase", "=", "'val'", ")", "\n", "dataset_test", "=", "MiniImageNet", "(", "phase", "=", "'test'", ")", "\n", "data_loader", "=", "FewShotDataloader", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Cannot recognize the dataset type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "", "return", "(", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.seed_torch": [[95, 104], ["str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "seed_torch", "(", "seed", "=", "21", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.pre_train": [[106, 288], ["data_loader", "utils.set_gpu", "utils.check_dir", "utils.check_dir", "os.path.join", "utils.log", "main.get_model", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utils.Timer", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "range", "data_loader_pre", "data_loader_pre", "str", "list", "torch.optim.lr_scheduler.LambdaLR.step", "utils.log", "enumerate", "enumerate", "numpy.mean", "numpy.mean", "torch.save", "torch.save", "vars", "dict().keys", "x.train", "tqdm.tqdm", "train_accuracies.append", "train_losses.append", "torch.optim.SGD.zero_grad", "loss.mean.backward", "torch.optim.SGD.step", "x.eval", "tqdm.tqdm", "embedding_net", "emb_support.reshape.reshape", "embedding_net", "emb_query.reshape.reshape", "cls_head", "torch.nn.CrossEntropyLoss.", "utils.count_accuracy", "val_accuracies.append", "val_losses.append", "numpy.array", "numpy.sqrt", "numpy.array", "torch.save", "torch.save", "utils.log", "utils.log", "os.path.join", "torch.save", "torch.save", "embedding_net.parameters", "pre_head.parameters", "x.cuda", "embedding_net", "pre_head", "main.one_hot", "torch.log_softmax", "loss.mean.mean", "utils.count_accuracy", "utils.count_accuracy.item", "loss.mean.item", "numpy.mean", "utils.log", "data_loader.", "x.cuda", "data_support.reshape", "data_query.reshape", "cls_head.reshape", "labels_query.reshape", "cls_head.reshape", "labels_query.reshape", "utils.count_accuracy.item", "loss.mean.item", "numpy.std", "os.path.join", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "os.path.join", "dict", "labels.reshape", "pre_head.reshape", "pre_head.reshape", "labels.reshape", "range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "embedding_net", "pre_head", "pre_head", "main.one_hot", "torch.log_softmax", "loss.mean.mean", "torch.cross_entropy", "utils.count_accuracy", "print", "numpy.array", "numpy.array", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "propa_head.named_parameters", "data[].transpose().flip", "data[].transpose().flip.transpose().flip", "x90.transpose().flip.transpose().flip", "Variable().cuda.reshape", "pre_head.reshape", "pre_head.reshape", "Variable().cuda.reshape", "loss.mean.item", "list", "list", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "data[].transpose", "data[].transpose().flip.transpose", "x90.transpose().flip.transpose", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy"], ["", "def", "pre_train", "(", "opt", ",", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", ":", "\n", "    ", "data_loader_pre", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "\n", "# Dataloader of Gidaris & Komodakis (CVPR 2018)", "\n", "\n", "if", "opt", ".", "use_trainval", "==", "'True'", ":", "\n", "        ", "train_way", "=", "80", "\n", "dloader_train", "=", "data_loader_pre", "(", "\n", "dataset", "=", "dataset_trainval", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_way", "=", "64", "\n", "dloader_train", "=", "data_loader_pre", "(", "\n", "dataset", "=", "dataset_train", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", "\n", ")", "\n", "", "dloader_val", "=", "data_loader", "(", "\n", "dataset", "=", "dataset_val", ",", "\n", "nKnovel", "=", "opt", ".", "test_way", ",", "\n", "nKbase", "=", "0", ",", "\n", "nExemplars", "=", "opt", ".", "val_shot", ",", "# num training examples per novel category", "\n", "nTestNovel", "=", "opt", ".", "val_query", "*", "opt", ".", "test_way", ",", "# num test examples for all the novel categories", "\n", "nTestBase", "=", "0", ",", "# num test examples for all the base categories", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "\n", "epoch_size", "=", "1", "*", "opt", ".", "val_episode", ",", "# num of batches per epoch", "\n", ")", "\n", "\n", "set_gpu", "(", "opt", ".", "gpu", ")", "\n", "check_dir", "(", "'./experiments/'", ")", "\n", "check_dir", "(", "opt", ".", "save_path", ")", "\n", "\n", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"train_log.txt\"", ")", "\n", "log", "(", "log_file_path", ",", "str", "(", "vars", "(", "opt", ")", ")", ")", "\n", "\n", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "=", "get_model", "(", "opt", ")", "\n", "\n", "print", "(", "list", "(", "dict", "(", "propa_head", ".", "named_parameters", "(", ")", ")", ".", "keys", "(", ")", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "embedding_net", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "pre_head", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ",", "nesterov", "=", "True", ")", "\n", "\n", "lambda_epoch", "=", "lambda", "e", ":", "1.0", "if", "e", "<", "60", "else", "(", "0.1", "if", "e", "<", "80", "else", "0.01", "if", "e", "<", "90", "else", "(", "0.001", ")", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_epoch", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "max_val_acc", "=", "0.0", "\n", "max_test_acc", "=", "0.0", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "x_entropy", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "opt", ".", "num_epoch", "+", "1", ")", ":", "\n", "# Train on the training split", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# Fetch the current epoch's learning rate", "\n", "epoch_learning_rate", "=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "epoch_learning_rate", "=", "param_group", "[", "'lr'", "]", "\n", "\n", "", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tLearning Rate: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "epoch_learning_rate", ")", ")", "\n", "\n", "_", ",", "_", ",", "_", ",", "_", "=", "[", "x", ".", "train", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "]", "\n", "\n", "train_accuracies", "=", "[", "]", "\n", "train_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_train", ")", ",", "1", ")", ":", "\n", "            ", "data", ",", "labels", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "if", "opt", ".", "pre_head", "==", "'LinearNet'", "or", "opt", ".", "pre_head", "==", "'CosineNet'", ":", "\n", "                ", "emb", "=", "embedding_net", "(", "data", ")", "\n", "logit", "=", "pre_head", "(", "emb", ")", "\n", "smoothed_one_hot", "=", "one_hot", "(", "labels", ".", "reshape", "(", "-", "1", ")", ",", "train_way", ")", "\n", "smoothed_one_hot", "=", "smoothed_one_hot", "*", "(", "1", "-", "opt", ".", "eps", ")", "+", "(", "1", "-", "smoothed_one_hot", ")", "*", "opt", ".", "eps", "/", "(", "train_way", "-", "1", ")", "\n", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "logit", ".", "reshape", "(", "-", "1", ",", "train_way", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "(", "smoothed_one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "acc", "=", "count_accuracy", "(", "logit", ".", "reshape", "(", "-", "1", ",", "train_way", ")", ",", "labels", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "elif", "opt", ".", "pre_head", "==", "'LinearRotateNet'", "or", "opt", ".", "pre_head", "==", "'DistRotateNet'", ":", "\n", "                ", "x_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "x90", "=", "data", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x_", "+=", "[", "data", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "y_", "+=", "[", "labels", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "x_", "=", "Variable", "(", "torch", ".", "stack", "(", "x_", ",", "0", ")", ")", ".", "cuda", "(", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "stack", "(", "y_", ",", "0", ")", ")", ".", "cuda", "(", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", ".", "cuda", "(", ")", "\n", "emb", "=", "embedding_net", "(", "x_", ")", "\n", "# print(emb.shape)", "\n", "logit", "=", "pre_head", "(", "emb", ",", "use_cls", "=", "True", ")", "\n", "logit_rotate", "=", "pre_head", "(", "emb", ",", "use_cls", "=", "False", ")", "\n", "smoothed_one_hot", "=", "one_hot", "(", "y_", ".", "reshape", "(", "-", "1", ")", ",", "train_way", ")", "\n", "smoothed_one_hot", "=", "smoothed_one_hot", "*", "(", "1", "-", "opt", ".", "eps", ")", "+", "(", "1", "-", "smoothed_one_hot", ")", "*", "opt", ".", "eps", "/", "(", "train_way", "-", "1", ")", "\n", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "logit", ".", "reshape", "(", "-", "1", ",", "train_way", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "(", "smoothed_one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "rloss", "=", "F", ".", "cross_entropy", "(", "input", "=", "logit_rotate", ",", "target", "=", "a_", ")", "\n", "loss", "=", "0.5", "*", "loss", "+", "0.5", "*", "rloss", "\n", "acc", "=", "count_accuracy", "(", "logit", ".", "reshape", "(", "-", "1", ",", "train_way", ")", ",", "y_", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Cannot recognize the pre_head type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "\n", "", "train_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "%", "100", "==", "0", ")", ":", "\n", "                ", "train_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "train_accuracies", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tBatch: [{}]\\tLoss: {}\\tAccuracy: {} % ({} %)'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "loss", ".", "item", "(", ")", ",", "train_acc_avg", ",", "acc", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Evaluate on the validation split", "\n", "", "_", ",", "_", ",", "_", ",", "_", "=", "[", "x", ".", "eval", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "]", "\n", "\n", "val_accuracies", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_val", "(", "opt", ".", "seed", ")", ")", ",", "1", ")", ":", "\n", "            ", "data_support", ",", "labels_support", ",", "data_query", ",", "labels_query", ",", "_", ",", "_", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "test_n_support", "=", "opt", ".", "test_way", "*", "opt", ".", "val_shot", "\n", "test_n_query", "=", "opt", ".", "test_way", "*", "opt", ".", "val_query", "\n", "\n", "emb_support", "=", "embedding_net", "(", "data_support", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_support", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_support", "=", "emb_support", ".", "reshape", "(", "1", ",", "test_n_support", ",", "-", "1", ")", "\n", "\n", "emb_query", "=", "embedding_net", "(", "data_query", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_query", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_query", "=", "emb_query", ".", "reshape", "(", "1", ",", "test_n_query", ",", "-", "1", ")", "\n", "\n", "logit_query", "=", "cls_head", "(", "emb_query", ",", "emb_support", ",", "labels_support", ",", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ")", "\n", "\n", "loss", "=", "x_entropy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "count_accuracy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "val_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "val_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "val_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "\n", "val_acc_ci95", "=", "1.96", "*", "np", ".", "std", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "/", "np", ".", "sqrt", "(", "opt", ".", "val_episode", ")", "\n", "\n", "val_loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_losses", ")", ")", "\n", "\n", "if", "val_acc_avg", ">", "max_val_acc", ":", "\n", "            ", "max_val_acc", "=", "val_acc_avg", "\n", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_pretrain_model.pth'", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} % (Best)'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} %'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'last_pretrain_epoch.pth'", ")", ")", "\n", "\n", "if", "epoch", "%", "opt", ".", "save_epoch", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'epoch_{}_pretrain.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.part_prototype": [[289, 355], ["data_loader_pre", "utils.set_gpu", "utils.check_dir", "utils.check_dir", "os.path.join", "utils.log", "main.get_model", "torch.load", "torch.load", "embedding_net.load_state_dict", "embedding_net.eval", "enumerate", "torch.cat", "torch.cat", "part_prior[].keys", "part_prior[].keys", "str", "os.path.join", "tqdm.tqdm", "torch.cat.append", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.dump", "vars", "x.cuda", "torch.no_grad", "torch.no_grad", "embedding_net", "list", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.std().unsqueeze", "torch.std().unsqueeze", "os.path.join", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.std().unsqueeze", "torch.std().unsqueeze", "os.path.join", "set", "attr_im_id.extend", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.std", "torch.std"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model"], ["", "", "", "def", "part_prototype", "(", "opt", ",", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", ":", "\n", "    ", "data_loader_pre", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "\n", "# Dataloader of Gidaris & Komodakis (CVPR 2018)", "\n", "dloader_train", "=", "data_loader_pre", "(", "\n", "dataset", "=", "dataset_train", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "0", "\n", ")", "\n", "\n", "set_gpu", "(", "opt", ".", "gpu", ")", "\n", "check_dir", "(", "'./experiments/'", ")", "\n", "check_dir", "(", "opt", ".", "save_path", ")", "\n", "\n", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"train_log.txt\"", ")", "\n", "log", "(", "log_file_path", ",", "str", "(", "vars", "(", "opt", ")", ")", ")", "\n", "\n", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "=", "get_model", "(", "opt", ")", "\n", "\n", "# Load saved model checkpoints", "\n", "saved_models", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_pretrain_model.pth'", ")", ")", "\n", "embedding_net", ".", "load_state_dict", "(", "saved_models", "[", "'embedding'", "]", ")", "\n", "embedding_net", ".", "eval", "(", ")", "\n", "\n", "embs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_train", ")", ",", "1", ")", ":", "\n", "        ", "data", ",", "labels", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "emb", "=", "embedding_net", "(", "data", ")", "\n", "", "embs", ".", "append", "(", "emb", ")", "\n", "", "embs", "=", "torch", ".", "cat", "(", "embs", ",", "dim", "=", "0", ")", "\n", "\n", "with", "open", "(", "'./data/mini_imagenet_part_prior_train.pickle'", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "part_prior", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "train_class_name_file", "=", "'./data/mini_imagenet_catname2label_train.pickle'", "\n", "with", "open", "(", "train_class_name_file", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "catname2label_train", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "a", "=", "1", "\n", "attr_feature", "=", "{", "}", "\n", "for", "attr_id", "in", "part_prior", "[", "'attribute_id_class_dict'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "attr_id", "not", "in", "[", "part_prior", "[", "'wnids2id'", "]", "[", "wnid", "]", "for", "wnid", "in", "part_prior", "[", "'all_wnids'", "]", "]", ":", "\n", "            ", "attr_im_id", "=", "[", "]", "\n", "for", "sel_class_id", "in", "list", "(", "set", "(", "part_prior", "[", "'attribute_id_class_dict'", "]", "[", "attr_id", "]", ")", ")", ":", "\n", "                ", "if", "sel_class_id", "in", "[", "part_prior", "[", "'wnids2id'", "]", "[", "wnid", "]", "for", "wnid", "in", "part_prior", "[", "'wnids_train'", "]", "]", ":", "\n", "                    ", "sel_class", "=", "catname2label_train", "[", "part_prior", "[", "'id2wnids'", "]", "[", "sel_class_id", "]", "]", "\n", "attr_im_id", ".", "extend", "(", "dataset_train", ".", "label2ind", "[", "sel_class", "]", ")", "\n", "", "", "attr_im", "=", "embs", "[", "attr_im_id", ",", ":", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "attr_im", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "std", "=", "torch", ".", "std", "(", "attr_im", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "attr_feature", "[", "attr_id", "]", "=", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", "}", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_metapart_feature.pickle\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "attr_feature", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "class_feature", "=", "{", "}", "\n", "for", "class_id", "in", "part_prior", "[", "'class_attribute_id_dict'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "class_id", "in", "[", "part_prior", "[", "'wnids2id'", "]", "[", "wnid", "]", "for", "wnid", "in", "part_prior", "[", "'wnids_train'", "]", "]", ":", "\n", "            ", "sel_class", "=", "catname2label_train", "[", "part_prior", "[", "'id2wnids'", "]", "[", "class_id", "]", "]", "\n", "class_im", "=", "embs", "[", "dataset_train", ".", "label2ind", "[", "sel_class", "]", ",", ":", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "class_im", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "std", "=", "torch", ".", "std", "(", "class_im", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "class_feature", "[", "sel_class", "]", "=", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", "}", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_class_feature.pickle\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "class_feature", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.meta_inference": [[356, 491], ["data_loader_pre", "data_loader", "utils.set_gpu", "utils.check_dir", "utils.check_dir", "os.path.join", "utils.log", "main.get_model", "torch.load", "torch.load", "embedding_net.load_state_dict", "embedding_net.eval", "cls_head.eval", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "range", "str", "os.path.join", "torch.optim.lr_scheduler.LambdaLR.step", "utils.log", "propa_head.train", "enumerate", "enumerate", "numpy.mean", "numpy.mean", "torch.save", "torch.save", "vars", "tqdm.tqdm", "propa_head", "torch.mse_loss", "torch.optim.SGD.zero_grad", "x_entropy.backward", "torch.optim.SGD.step", "train_losses.append", "x.eval", "tqdm.tqdm", "torch.nn.CrossEntropyLoss.", "utils.count_accuracy", "val_accuracies.append", "val_losses.append", "numpy.array", "numpy.sqrt", "numpy.array", "torch.save", "torch.save", "utils.log", "utils.log", "os.path.join", "torch.save", "torch.save", "propa_head.parameters", "x.cuda", "torch.no_grad", "torch.no_grad", "data.reshape.reshape", "embedding_net", "emb.mean.reshape", "emb.mean.mean", "x_entropy.item", "numpy.mean", "utils.log", "data_loader.", "x.cuda", "torch.no_grad", "torch.no_grad", "embedding_net", "emb_support.reshape.reshape", "embedding_net", "emb_query.reshape.reshape", "cls_head", "cls_head.reshape", "labels_query.reshape", "cls_head.reshape", "labels_query.reshape", "utils.count_accuracy.item", "x_entropy.item", "numpy.std", "os.path.join", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "os.path.join", "numpy.array", "data_support.reshape", "data_query.reshape", "numpy.array", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "x_entropy.item", "list", "list"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log"], ["", "", "def", "meta_inference", "(", "opt", ",", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", ":", "\n", "    ", "data_loader_pre", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "\n", "# Dataloader of Gidaris & Komodakis (CVPR 2018)", "\n", "dloader_train", "=", "data_loader_pre", "(", "\n", "dataset", "=", "dataset_train", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", "\n", ")", "\n", "\n", "dloader_val", "=", "data_loader", "(", "\n", "dataset", "=", "dataset_val", ",", "\n", "nKnovel", "=", "opt", ".", "test_way", ",", "\n", "nKbase", "=", "0", ",", "\n", "nExemplars", "=", "opt", ".", "val_shot", ",", "# num training examples per novel category", "\n", "nTestNovel", "=", "opt", ".", "val_query", "*", "opt", ".", "test_way", ",", "# num test examples for all the novel categories", "\n", "nTestBase", "=", "0", ",", "# num test examples for all the base categories", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "\n", "epoch_size", "=", "1", "*", "opt", ".", "val_episode", ",", "# num of batches per epoch", "\n", ")", "\n", "\n", "set_gpu", "(", "opt", ".", "gpu", ")", "\n", "check_dir", "(", "'./experiments/'", ")", "\n", "check_dir", "(", "opt", ".", "save_path", ")", "\n", "\n", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"train_log.txt\"", ")", "\n", "log", "(", "log_file_path", ",", "str", "(", "vars", "(", "opt", ")", ")", ")", "\n", "\n", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "=", "get_model", "(", "opt", ")", "\n", "\n", "# Load saved model checkpoints", "\n", "saved_models", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_pretrain_model.pth'", ")", ")", "\n", "embedding_net", ".", "load_state_dict", "(", "saved_models", "[", "'embedding'", "]", ")", "\n", "embedding_net", ".", "eval", "(", ")", "\n", "cls_head", ".", "eval", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "propa_head", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ",", "nesterov", "=", "True", ")", "\n", "\n", "lambda_epoch", "=", "lambda", "e", ":", "1.0", "if", "e", "<", "15", "else", "(", "0.1", "if", "e", "<", "40", "else", "0.01", "if", "e", "<", "80", "else", "(", "0.001", ")", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_epoch", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "train_losses", "=", "[", "]", "\n", "x_entropy", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "max_loss", "=", "10e16", "\n", "max_val_acc", "=", "0", "\n", "max_test_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "0", ",", "opt", ".", "num_epoch", "+", "1", ")", ":", "\n", "# Train on the training split", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# Fetch the current epoch's learning rate", "\n", "epoch_learning_rate", "=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "epoch_learning_rate", "=", "param_group", "[", "'lr'", "]", "\n", "\n", "", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tLearning Rate: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "epoch_learning_rate", ")", ")", "\n", "\n", "propa_head", ".", "train", "(", ")", "\n", "train_accuracies", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_train", ")", ",", "1", ")", ":", "\n", "            ", "data", ",", "labels", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "nb", ",", "ns", ",", "nc", ",", "nw", ",", "nh", "=", "data", ".", "shape", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data", "=", "data", ".", "reshape", "(", "nb", "*", "ns", ",", "nc", ",", "nw", ",", "nh", ")", "\n", "emb", "=", "embedding_net", "(", "data", ")", "\n", "emb", "=", "emb", ".", "reshape", "(", "nb", ",", "ns", ",", "-", "1", ")", "\n", "emb", "=", "emb", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "proto", ",", "proto_true", "=", "propa_head", "(", "emb", ",", "labels", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "proto", ",", "proto_true", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "(", "i", "%", "10", "==", "0", ")", ":", "\n", "                ", "train_loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tBatch: [{}]\\tLoss: {}({})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "loss", ".", "item", "(", ")", ",", "train_loss_avg", ")", ")", "\n", "\n", "# Evaluate on the validation split", "\n", "", "", "_", ",", "_", ",", "_", ",", "_", "=", "[", "x", ".", "eval", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "]", "\n", "\n", "val_accuracies", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_val", "(", "opt", ".", "seed", ")", ")", ",", "1", ")", ":", "\n", "            ", "data_support", ",", "labels_support", ",", "data_query", ",", "labels_query", ",", "k_all", ",", "_", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "test_n_support", "=", "opt", ".", "test_way", "*", "opt", ".", "val_shot", "\n", "test_n_query", "=", "opt", ".", "test_way", "*", "opt", ".", "val_query", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "emb_support", "=", "embedding_net", "(", "data_support", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_support", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_support", "=", "emb_support", ".", "reshape", "(", "1", ",", "test_n_support", ",", "-", "1", ")", "\n", "\n", "emb_query", "=", "embedding_net", "(", "data_query", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_query", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_query", "=", "emb_query", ".", "reshape", "(", "1", ",", "test_n_query", ",", "-", "1", ")", "\n", "\n", "logit_query", "=", "cls_head", "(", "k_all", ",", "propa_head", ",", "emb_query", ",", "emb_support", ",", "labels_support", ",", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "is_scale", "=", "True", ")", "\n", "\n", "", "loss", "=", "x_entropy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "count_accuracy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "val_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "val_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "val_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "\n", "val_acc_ci95", "=", "1.96", "*", "np", ".", "std", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "/", "np", ".", "sqrt", "(", "opt", ".", "val_episode", ")", "\n", "\n", "val_loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_losses", ")", ")", "\n", "\n", "if", "val_acc_avg", ">", "max_val_acc", ":", "\n", "            ", "max_val_acc", "=", "val_acc_avg", "\n", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_pretrain_model_meta_infer_val_{}w_{}s_{}.pth'", ".", "format", "(", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "opt", ".", "head", ")", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} % (Best)'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} %'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'last_pretrain_epoch_meta_infer.pth'", ")", ")", "\n", "\n", "if", "epoch", "%", "opt", ".", "save_epoch", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'epoch_{}_pretrain_meta_infer.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.meta_train": [[492, 647], ["data_loader", "data_loader", "utils.set_gpu", "utils.check_dir", "utils.check_dir", "os.path.join", "utils.log", "main.get_model", "torch.load", "torch.load", "embedding_net.load_state_dict", "embedding_net.eval", "propa_head.load_state_dict", "propa_head.eval", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utils.Timer", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "range", "str", "os.path.join", "enumerate", "numpy.mean", "numpy.mean", "vars", "torch.optim.lr_scheduler.LambdaLR.step", "utils.log", "enumerate", "x.eval", "tqdm.tqdm", "torch.nn.CrossEntropyLoss.", "utils.count_accuracy", "val_accuracies.append", "val_losses.append", "numpy.array", "numpy.sqrt", "numpy.array", "torch.save", "torch.save", "utils.log", "utils.log", "embedding_net.parameters", "propa_head.parameters", "cls_head.parameters", "x.train", "tqdm.tqdm", "embedding_net", "emb_support.reshape.reshape", "embedding_net", "emb_query.reshape.reshape", "cls_head", "main.one_hot", "torch.log_softmax", "loss.mean.mean", "utils.count_accuracy", "train_accuracies.append", "train_losses.append", "torch.optim.SGD.zero_grad", "loss.mean.backward", "torch.optim.SGD.step", "data_loader.", "x.cuda", "torch.no_grad", "torch.no_grad", "embedding_net", "emb_support.reshape.reshape", "embedding_net", "emb_query.reshape.reshape", "cls_head", "cls_head.reshape", "labels_query.reshape", "cls_head.reshape", "labels_query.reshape", "utils.count_accuracy.item", "loss.mean.item", "numpy.std", "os.path.join", "data_loader.", "x.cuda", "data_support.reshape", "data_query.reshape", "labels_query.reshape", "cls_head.reshape", "cls_head.reshape", "labels_query.reshape", "utils.count_accuracy.item", "loss.mean.item", "numpy.mean", "utils.log", "data_support.reshape", "data_query.reshape", "numpy.array", "embedding_net.state_dict", "propa_head.state_dict", "pre_head.state_dict", "cls_head.state_dict", "numpy.array", "list", "list", "loss.mean.item", "list", "list"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log"], ["", "", "", "def", "meta_train", "(", "opt", ",", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", ":", "\n", "# Dataloader of Gidaris & Komodakis (CVPR 2018)", "\n", "    ", "dloader_train", "=", "data_loader", "(", "\n", "dataset", "=", "dataset_train", ",", "\n", "nKnovel", "=", "opt", ".", "train_way", ",", "\n", "nKbase", "=", "0", ",", "\n", "nExemplars", "=", "opt", ".", "train_shot", ",", "# num training examples per novel category", "\n", "nTestNovel", "=", "opt", ".", "train_way", "*", "opt", ".", "train_query", ",", "# num test examples for all the novel categories", "\n", "nTestBase", "=", "0", ",", "# num test examples for all the base categories", "\n", "batch_size", "=", "opt", ".", "episodes_per_batch", ",", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "opt", ".", "episodes_per_batch", "*", "100", ",", "# num of batches per epoch", "\n", ")", "\n", "\n", "dloader_val", "=", "data_loader", "(", "\n", "dataset", "=", "dataset_val", ",", "\n", "nKnovel", "=", "opt", ".", "test_way", ",", "\n", "nKbase", "=", "0", ",", "\n", "nExemplars", "=", "opt", ".", "val_shot", ",", "# num training examples per novel category", "\n", "nTestNovel", "=", "opt", ".", "val_query", "*", "opt", ".", "test_way", ",", "# num test examples for all the novel categories", "\n", "nTestBase", "=", "0", ",", "# num test examples for all the base categories", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "\n", "epoch_size", "=", "1", "*", "opt", ".", "val_episode", ",", "# num of batches per epoch", "\n", ")", "\n", "\n", "set_gpu", "(", "opt", ".", "gpu", ")", "\n", "check_dir", "(", "'./experiments/'", ")", "\n", "check_dir", "(", "opt", ".", "save_path", ")", "\n", "\n", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"train_log.txt\"", ")", "\n", "log", "(", "log_file_path", ",", "str", "(", "vars", "(", "opt", ")", ")", ")", "\n", "\n", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "=", "get_model", "(", "opt", ")", "\n", "\n", "# Load saved model checkpoints", "\n", "saved_models", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_pretrain_model_meta_infer_val_{}w_{}s_{}.pth'", ".", "format", "(", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "opt", ".", "head", ")", ")", ")", "\n", "embedding_net", ".", "load_state_dict", "(", "saved_models", "[", "'embedding'", "]", ")", "\n", "embedding_net", ".", "eval", "(", ")", "\n", "propa_head", ".", "load_state_dict", "(", "saved_models", "[", "'propa_head'", "]", ")", "\n", "propa_head", ".", "eval", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "embedding_net", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "propa_head", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "cls_head", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "0.0001", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ",", "nesterov", "=", "True", ")", "\n", "\n", "lambda_epoch", "=", "lambda", "e", ":", "1.0", "if", "e", "<", "15", "else", "(", "0.1", "if", "e", "<", "25", "else", "0.01", "if", "e", "<", "30", "else", "(", "0.001", ")", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_epoch", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "max_val_acc", "=", "0.0", "\n", "max_test_acc", "=", "0.0", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "x_entropy", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "0", ",", "opt", ".", "num_epoch", "+", "1", ")", ":", "\n", "        ", "if", "epoch", "!=", "0", ":", "\n", "# Train on the training split", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# Fetch the current epoch's learning rate", "\n", "epoch_learning_rate", "=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "epoch_learning_rate", "=", "param_group", "[", "'lr'", "]", "\n", "\n", "", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tLearning Rate: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "epoch_learning_rate", ")", ")", "\n", "\n", "_", ",", "_", ",", "_", "=", "[", "x", ".", "train", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "cls_head", ")", "]", "\n", "\n", "train_accuracies", "=", "[", "]", "\n", "train_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_train", "(", "epoch", ")", ")", ",", "1", ")", ":", "\n", "                ", "data_support", ",", "labels_support", ",", "data_query", ",", "labels_query", ",", "k_all", ",", "_", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "train_n_support", "=", "opt", ".", "train_way", "*", "opt", ".", "train_shot", "\n", "train_n_query", "=", "opt", ".", "train_way", "*", "opt", ".", "train_query", "\n", "\n", "emb_support", "=", "embedding_net", "(", "data_support", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_support", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_support", "=", "emb_support", ".", "reshape", "(", "opt", ".", "episodes_per_batch", ",", "train_n_support", ",", "-", "1", ")", "\n", "\n", "emb_query", "=", "embedding_net", "(", "data_query", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_query", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_query", "=", "emb_query", ".", "reshape", "(", "opt", ".", "episodes_per_batch", ",", "train_n_query", ",", "-", "1", ")", "\n", "\n", "logit_query", "=", "cls_head", "(", "k_all", ",", "propa_head", ",", "emb_query", ",", "emb_support", ",", "labels_support", ",", "opt", ".", "train_way", ",", "opt", ".", "train_shot", ",", "is_scale", "=", "False", ")", "\n", "\n", "smoothed_one_hot", "=", "one_hot", "(", "labels_query", ".", "reshape", "(", "-", "1", ")", ",", "opt", ".", "train_way", ")", "\n", "smoothed_one_hot", "=", "smoothed_one_hot", "*", "(", "1", "-", "opt", ".", "eps", ")", "+", "(", "1", "-", "smoothed_one_hot", ")", "*", "opt", ".", "eps", "/", "(", "opt", ".", "train_way", "-", "1", ")", "\n", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "train_way", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "(", "smoothed_one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "acc", "=", "count_accuracy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "train_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "train_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "i", "%", "10", "==", "0", ")", ":", "\n", "                    ", "train_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "train_accuracies", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Train Epoch: {}\\tBatch: [{}]\\tLoss: {}\\tAccuracy: {} % ({} %)'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "loss", ".", "item", "(", ")", ",", "train_acc_avg", ",", "acc", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Evaluate on the validation split", "\n", "", "", "_", ",", "_", ",", "_", "=", "[", "x", ".", "eval", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "cls_head", ")", "]", "\n", "\n", "val_accuracies", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_val", "(", "opt", ".", "seed", ")", ")", ",", "1", ")", ":", "\n", "            ", "data_support", ",", "labels_support", ",", "data_query", ",", "labels_query", ",", "k_all", ",", "_", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "test_n_support", "=", "opt", ".", "test_way", "*", "opt", ".", "val_shot", "\n", "test_n_query", "=", "opt", ".", "test_way", "*", "opt", ".", "val_query", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "emb_support", "=", "embedding_net", "(", "data_support", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_support", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_support", "=", "emb_support", ".", "reshape", "(", "1", ",", "test_n_support", ",", "-", "1", ")", "\n", "\n", "emb_query", "=", "embedding_net", "(", "data_query", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_query", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_query", "=", "emb_query", ".", "reshape", "(", "1", ",", "test_n_query", ",", "-", "1", ")", "\n", "\n", "logit_query", "=", "cls_head", "(", "k_all", ",", "propa_head", ",", "emb_query", ",", "emb_support", ",", "labels_support", ",", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "is_scale", "=", "True", ")", "\n", "\n", "", "loss", "=", "x_entropy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "count_accuracy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "val_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "val_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "val_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "\n", "val_acc_ci95", "=", "1.96", "*", "np", ".", "std", "(", "np", ".", "array", "(", "val_accuracies", ")", ")", "/", "np", ".", "sqrt", "(", "opt", ".", "val_episode", ")", "\n", "\n", "val_loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_losses", ")", ")", "\n", "\n", "if", "val_acc_avg", ">", "max_val_acc", ":", "\n", "            ", "max_val_acc", "=", "val_acc_avg", "\n", "torch", ".", "save", "(", "{", "'embedding'", ":", "embedding_net", ".", "state_dict", "(", ")", ",", "'propa_head'", ":", "propa_head", ".", "state_dict", "(", ")", ",", "\n", "'pre_head'", ":", "pre_head", ".", "state_dict", "(", ")", ",", "'cls_head'", ":", "cls_head", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_model_meta_val_{}w_{}s_{}.pth'", ".", "format", "(", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "opt", ".", "head", ")", ")", ")", "\n", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} % (Best)'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "(", "log_file_path", ",", "'Validation Epoch: {}\\t\\t\\tLoss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} %'", ".", "format", "(", "epoch", ",", "val_loss_avg", ",", "val_acc_avg", ",", "val_acc_ci95", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.meta_test": [[649, 720], ["data_loader", "utils.set_gpu", "utils.check_dir", "utils.check_dir", "os.path.join", "utils.log", "main.get_model", "torch.load", "torch.load", "embedding_net.load_state_dict", "embedding_net.eval", "propa_head.load_state_dict", "propa_head.eval", "utils.Timer", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "enumerate", "numpy.mean", "numpy.mean", "utils.log", "str", "os.path.join", "x.eval", "tqdm.tqdm", "torch.nn.CrossEntropyLoss.", "utils.count_accuracy", "test_accuracies.append", "test_losses.append", "numpy.array", "numpy.sqrt", "numpy.array", "vars", "data_loader.", "x.cuda", "torch.no_grad", "torch.no_grad", "embedding_net", "emb_support.reshape.reshape", "embedding_net", "emb_query.reshape.reshape", "cls_head", "cls_head.reshape", "labels_query.reshape", "cls_head.reshape", "labels_query.reshape", "utils.count_accuracy.item", "x_entropy.item", "numpy.std", "data_support.reshape", "data_query.reshape", "numpy.array", "list", "list"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.main.get_model", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy"], ["", "", "", "def", "meta_test", "(", "opt", ",", "dataset_train", ",", "dataset_val", ",", "dataset_test", ",", "data_loader", ")", ":", "\n", "# Dataloader of Gidaris & Komodakis (CVPR 2018)", "\n", "    ", "dloader_test", "=", "data_loader", "(", "\n", "dataset", "=", "dataset_test", ",", "\n", "nKnovel", "=", "opt", ".", "test_way", ",", "\n", "nKbase", "=", "0", ",", "\n", "nExemplars", "=", "opt", ".", "val_shot", ",", "# num training examples per novel category", "\n", "nTestNovel", "=", "opt", ".", "val_query", "*", "opt", ".", "test_way", ",", "# num test examples for all the novel categories", "\n", "nTestBase", "=", "0", ",", "# num test examples for all the base categories", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "\n", "epoch_size", "=", "1", "*", "opt", ".", "val_episode", ",", "# num of batches per epoch", "\n", ")", "\n", "\n", "set_gpu", "(", "opt", ".", "gpu", ")", "\n", "check_dir", "(", "'./experiments/'", ")", "\n", "check_dir", "(", "opt", ".", "save_path", ")", "\n", "\n", "log_file_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"train_log.txt\"", ")", "\n", "log", "(", "log_file_path", ",", "str", "(", "vars", "(", "opt", ")", ")", ")", "\n", "\n", "(", "embedding_net", ",", "propa_head", ",", "pre_head", ",", "cls_head", ")", "=", "get_model", "(", "opt", ")", "\n", "\n", "# Load saved model checkpoints", "\n", "saved_models", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "'best_model_meta_val_{}w_{}s_{}.pth'", ".", "format", "(", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "opt", ".", "head", ")", ")", ")", "\n", "embedding_net", ".", "load_state_dict", "(", "saved_models", "[", "'embedding'", "]", ")", "\n", "embedding_net", ".", "eval", "(", ")", "\n", "propa_head", ".", "load_state_dict", "(", "saved_models", "[", "'propa_head'", "]", ")", "\n", "propa_head", ".", "eval", "(", ")", "\n", "\n", "max_val_acc", "=", "0.0", "\n", "max_test_acc", "=", "0.0", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "x_entropy", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# Evaluate on the validation split", "\n", "_", ",", "_", ",", "_", "=", "[", "x", ".", "eval", "(", ")", "for", "x", "in", "(", "embedding_net", ",", "propa_head", ",", "cls_head", ")", "]", "\n", "test_accuracies", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader_test", "(", "opt", ".", "seed", ")", ")", ",", "1", ")", ":", "\n", "        ", "data_support", ",", "labels_support", ",", "data_query", ",", "labels_query", ",", "k_all", ",", "_", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "batch", "]", "\n", "\n", "test_n_support", "=", "opt", ".", "test_way", "*", "opt", ".", "val_shot", "\n", "test_n_query", "=", "opt", ".", "test_way", "*", "opt", ".", "val_query", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "emb_support", "=", "embedding_net", "(", "data_support", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_support", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_support", "=", "emb_support", ".", "reshape", "(", "1", ",", "test_n_support", ",", "-", "1", ")", "\n", "\n", "emb_query", "=", "embedding_net", "(", "data_query", ".", "reshape", "(", "[", "-", "1", "]", "+", "list", "(", "data_query", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "emb_query", "=", "emb_query", ".", "reshape", "(", "1", ",", "test_n_query", ",", "-", "1", ")", "\n", "\n", "logit_query", "=", "cls_head", "(", "k_all", ",", "propa_head", ",", "emb_query", ",", "emb_support", ",", "labels_support", ",", "opt", ".", "test_way", ",", "opt", ".", "val_shot", ",", "is_scale", "=", "True", ")", "\n", "\n", "", "loss", "=", "x_entropy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "count_accuracy", "(", "logit_query", ".", "reshape", "(", "-", "1", ",", "opt", ".", "test_way", ")", ",", "labels_query", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "test_accuracies", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "test_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "test_acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "test_accuracies", ")", ")", "\n", "test_acc_ci95", "=", "1.96", "*", "np", ".", "std", "(", "np", ".", "array", "(", "test_accuracies", ")", ")", "/", "np", ".", "sqrt", "(", "opt", ".", "val_episode", ")", "\n", "\n", "test_loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "test_losses", ")", ")", "\n", "\n", "log", "(", "log_file_path", ",", "'Test Loss: {:.4f}\\tAccuracy: {:.2f} \u00b1 {:.2f} % (Best)'", ".", "format", "(", "test_loss_avg", ",", "test_acc_avg", ",", "test_acc_ci95", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.Timer.__init__": [[27, 29], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "o", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.Timer.measure": [[30, 38], ["int", "float", "time.time", "round"], "methods", ["None"], ["", "def", "measure", "(", "self", ",", "p", "=", "1", ")", ":", "\n", "        ", "x", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "o", ")", "/", "float", "(", "p", ")", "\n", "x", "=", "int", "(", "x", ")", "\n", "if", "x", ">=", "3600", ":", "\n", "            ", "return", "'{:.1f}h'", ".", "format", "(", "x", "/", "3600", ")", "\n", "", "if", "x", ">=", "60", ":", "\n", "            ", "return", "'{}m'", ".", "format", "(", "round", "(", "x", "/", "60", ")", ")", "\n", "", "return", "'{}s'", ".", "format", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.set_gpu": [[8, 11], ["print"], "function", ["None"], ["def", "set_gpu", "(", "x", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "x", "\n", "print", "(", "'using gpu:'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.check_dir": [[12, 19], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "check_dir", "(", "path", ")", ":", "\n", "    ", "'''\n    Create directory if it does not exist.\n        path:           Path of directory.\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.count_accuracy": [[20, 25], ["torch.argmax().view", "label.view.view", "torch.argmax().view.eq().float().mean", "torch.argmax", "torch.argmax().view.eq().float", "torch.argmax().view.eq"], "function", ["None"], ["", "", "def", "count_accuracy", "(", "logits", ",", "label", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "accuracy", "=", "100", "*", "pred", ".", "eq", "(", "label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.log": [[39, 49], ["print", "open", "f.write", "f.flush"], "function", ["None"], ["", "", "def", "log", "(", "log_file_path", ",", "string", ")", ":", "\n", "    ", "'''\n    Write one line of log into screen and file.\n        log_file_path: Path of log file.\n        string:        String to write in log file.\n    '''", "\n", "with", "open", "(", "log_file_path", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "string", "+", "'\\n'", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.pick_vectors": [[50, 66], ["next", "len", "iter", "dic.get", "ret.append", "torch.FloatTensor", "torch.stack", "dic.values", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["", "def", "pick_vectors", "(", "dic", ",", "wnids", ",", "is_tensor", "=", "False", ")", ":", "\n", "    ", "o", "=", "next", "(", "iter", "(", "dic", ".", "values", "(", ")", ")", ")", "\n", "dim", "=", "len", "(", "o", ")", "\n", "ret", "=", "[", "]", "\n", "for", "wnid", "in", "wnids", ":", "\n", "        ", "v", "=", "dic", ".", "get", "(", "wnid", ")", "\n", "if", "v", "is", "None", ":", "\n", "            ", "if", "not", "is_tensor", ":", "\n", "                ", "v", "=", "[", "0", "]", "*", "dim", "\n", "", "else", ":", "\n", "                ", "v", "=", "torch", ".", "zeros", "(", "dim", ")", "\n", "", "", "ret", ".", "append", "(", "v", ")", "\n", "", "if", "not", "is_tensor", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "ret", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.l2_loss": [[68, 70], ["len"], "function", ["None"], ["", "", "def", "l2_loss", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "(", "(", "a", "-", "b", ")", "**", "2", ")", ".", "sum", "(", ")", "/", "(", "len", "(", "a", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.normt_spm": [[72, 89], ["mx.dot().transpose().dot.transpose", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "numpy.array", "numpy.power().flatten", "scipy.diags", "mx.dot().transpose().dot.dot().transpose().dot", "mx.dot().transpose().dot.sum", "mx.dot().transpose().dot.sum", "numpy.power", "numpy.isinf", "numpy.power", "numpy.isinf", "mx.dot().transpose().dot.dot().transpose", "mx.dot().transpose().dot.dot"], "function", ["None"], ["", "def", "normt_spm", "(", "mx", ",", "method", "=", "'in'", ")", ":", "\n", "    ", "if", "method", "==", "'in'", ":", "\n", "        ", "mx", "=", "mx", ".", "transpose", "(", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n", "", "if", "method", "==", "'sym'", ":", "\n", "        ", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "mx", ".", "dot", "(", "r_mat_inv", ")", ".", "transpose", "(", ")", ".", "dot", "(", "r_mat_inv", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.None.utils.spm_to_tensor": [[91, 98], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy().long", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "sparse_mx.tocoo().astype.tocoo", "torch.from_numpy", "numpy.vstack"], "function", ["None"], ["", "", "def", "spm_to_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "\n", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ")", ".", "long", "(", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.__init__": [[6, 17], ["dict", "open", "f.readlines", "line.rstrip().split", "strs[].lower", "torch.FloatTensor", "list", "len", "line.rstrip", "map"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "dimension", "=", "None", "\n", "self", ".", "embedding", "=", "dict", "(", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "strs", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "word", "=", "strs", "[", "0", "]", ".", "lower", "(", ")", "\n", "vector", "=", "torch", ".", "FloatTensor", "(", "list", "(", "map", "(", "float", ",", "strs", "[", "1", ":", "]", ")", ")", ")", "\n", "self", ".", "embedding", "[", "word", "]", "=", "vector", "\n", "if", "self", ".", "dimension", "is", "None", ":", "\n", "                    ", "self", ".", "dimension", "=", "len", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe._fix_word": [[18, 39], ["word.replace().split", "glove.GloVe.zeros", "glove.GloVe.embedding.get", "word.replace", "term.split", "glove.GloVe.zeros", "glove.GloVe.embedding.get"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["", "", "", "", "def", "_fix_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "terms", "=", "word", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "split", "(", "' '", ")", "\n", "ret", "=", "self", ".", "zeros", "(", ")", "\n", "cnt", "=", "0", "\n", "for", "term", "in", "terms", ":", "\n", "            ", "v", "=", "self", ".", "embedding", ".", "get", "(", "term", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "subterms", "=", "term", ".", "split", "(", "'-'", ")", "\n", "subterm_sum", "=", "self", ".", "zeros", "(", ")", "\n", "subterm_cnt", "=", "0", "\n", "for", "subterm", "in", "subterms", ":", "\n", "                    ", "subv", "=", "self", ".", "embedding", ".", "get", "(", "subterm", ")", "\n", "if", "subv", "is", "not", "None", ":", "\n", "                        ", "subterm_sum", "+=", "subv", "\n", "subterm_cnt", "+=", "1", "\n", "", "", "if", "subterm_cnt", ">", "0", ":", "\n", "                    ", "v", "=", "subterm_sum", "/", "subterm_cnt", "\n", "", "", "if", "v", "is", "not", "None", ":", "\n", "                ", "ret", "+=", "v", "\n", "cnt", "+=", "1", "\n", "", "", "return", "ret", "/", "cnt", "if", "cnt", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.__getitem__": [[40, 58], ["glove.GloVe.zeros", "type", "word.lower.lower.lower", "glove.GloVe.embedding.get", "glove.GloVe.zeros", "glove.GloVe._fix_word"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe._fix_word"], ["", "def", "__getitem__", "(", "self", ",", "words", ")", ":", "\n", "        ", "if", "type", "(", "words", ")", "is", "str", ":", "\n", "            ", "words", "=", "[", "words", "]", "\n", "", "ret", "=", "self", ".", "zeros", "(", ")", "\n", "cnt", "=", "0", "\n", "for", "word", "in", "words", ":", "\n", "            ", "word", "=", "word", ".", "lower", "(", ")", "\n", "# print(word)", "\n", "v", "=", "self", ".", "embedding", ".", "get", "(", "word", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "v", "=", "self", ".", "_fix_word", "(", "word", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "                ", "ret", "+=", "v", "\n", "cnt", "+=", "1", "\n", "", "", "if", "cnt", ">", "0", ":", "\n", "            ", "return", "ret", "/", "cnt", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "zeros", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros": [[59, 61], ["torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["", "", "def", "zeros", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "self", ".", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.make_miniimagenet_primitive_knowledge.getnode": [[12, 14], ["nltk.corpus.wordnet.synset_from_pos_and_offset", "int"], "function", ["None"], ["def", "getnode", "(", "x", ")", ":", "\n", "    ", "return", "wn", ".", "synset_from_pos_and_offset", "(", "'n'", ",", "int", "(", "x", "[", "1", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.make_miniimagenet_primitive_knowledge.getwnid": [[16, 19], ["str", "u.offset", "len"], "function", ["None"], ["", "def", "getwnid", "(", "u", ")", ":", "\n", "    ", "s", "=", "str", "(", "u", ".", "offset", "(", ")", ")", "\n", "return", "'n'", "+", "(", "8", "-", "len", "(", "s", ")", ")", "*", "'0'", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.make_miniimagenet_primitive_knowledge.constructedges": [[21, 27], ["s.items", "edges.append"], "function", ["None"], ["", "def", "constructedges", "(", "s", ",", "syns2id", ")", ":", "\n", "    ", "edges", "=", "[", "]", "\n", "for", "k", ",", "vs", "in", "s", ".", "items", "(", ")", ":", "\n", "        ", "for", "v", "in", "vs", ":", "\n", "            ", "edges", ".", "append", "(", "(", "syns2id", "[", "k", "]", ",", "syns2id", "[", "v", "]", ")", ")", "\n", "", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.make_miniimagenet_primitive_knowledge.make_attribute_node": [[28, 107], ["len", "range", "range", "len", "range", "range", "list", "range", "list", "range", "list", "range", "list", "syns[].hypernym_paths", "syns_paths.extend", "print", "list.append", "syns[].hypernym_paths", "list", "set", "len", "list.extend", "set", "len", "list.extend", "set", "len", "list.extend", "set", "list", "print", "print", "print", "print", "set", "train_attribute_rm.append", "val_attribute_rm.append", "test_attribute_rm.append", "set", "print", "sys.part_meronyms", "list.extend", "syns_attrbute[].extend", "len", "len", "set", "list", "set"], "function", ["None"], ["", "def", "make_attribute_node", "(", "syns", ",", "train_nodes", ",", "val_nodes", ",", "test_nodes", ")", ":", "\n", "    ", "syns_paths", "=", "[", "]", "\n", "syns_len", "=", "len", "(", "syns", ")", "\n", "for", "i", "in", "range", "(", "syns_len", ")", ":", "\n", "        ", "if", "i", "==", "96", ":", "\n", "            ", "print", "(", "'stop'", ")", "\n", "", "paths", "=", "syns", "[", "i", "]", ".", "hypernym_paths", "(", ")", "\n", "syns_paths", ".", "extend", "(", "paths", ")", "\n", "print", "(", "'number {}: {}'", ".", "format", "(", "i", ",", "[", "path", "[", "4", "]", ".", "lemma_names", "for", "path", "in", "paths", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "syns_i", "=", "[", "path", "[", "i", "]", "for", "path", "in", "syns_paths", "]", "\n", "print", "(", "'number {}: {}'", ".", "format", "(", "i", ",", "len", "(", "set", "(", "syns_i", ")", ")", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'number {}: {}'", ".", "format", "(", "i", ",", "0", ")", ")", "\n", "\n", "", "", "attrbute", "=", "[", "]", "\n", "syns_attrbute", "=", "{", "}", "\n", "syns_len", "=", "len", "(", "syns", ")", "\n", "for", "i", "in", "range", "(", "syns_len", ")", ":", "\n", "        ", "attrbute", ".", "append", "(", "syns", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "syns_len", ")", ":", "\n", "        ", "syns_attrbute", "[", "syns", "[", "i", "]", "]", "=", "[", "]", "\n", "have_attri", "=", "False", "\n", "for", "paths", "in", "syns", "[", "i", "]", ".", "hypernym_paths", "(", ")", ":", "\n", "            ", "for", "sys", "in", "paths", ":", "\n", "                ", "parts", "=", "sys", ".", "part_meronyms", "(", ")", "\n", "# parts = sys.substance_meronyms()", "\n", "attrbute", ".", "extend", "(", "parts", ")", "\n", "syns_attrbute", "[", "syns", "[", "i", "]", "]", ".", "extend", "(", "parts", ")", "\n", "if", "len", "(", "parts", ")", "!=", "0", ":", "\n", "                    ", "have_attri", "=", "True", "\n", "", "", "", "if", "have_attri", ":", "\n", "            ", "print", "(", "'number {}: {}'", ".", "format", "(", "i", ",", "'attribute'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'number {}: {}'", ".", "format", "(", "i", ",", "'no attribute'", ")", ")", "\n", "", "syns_attrbute", "[", "syns", "[", "i", "]", "]", "=", "list", "(", "set", "(", "syns_attrbute", "[", "syns", "[", "i", "]", "]", ")", ")", "\n", "", "attrbute", "=", "list", "(", "set", "(", "attrbute", ")", ")", "\n", "\n", "# \u83b7\u5f97\u6bcf\u4e2a\u6570\u636e\u96c6\u4e0b\u7684\u5c5e\u6027", "\n", "train_attribute", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_nodes", ")", ")", ":", "\n", "        ", "train_attribute", ".", "extend", "(", "syns_attrbute", "[", "train_nodes", "[", "i", "]", "]", ")", "\n", "", "train_attribute", "=", "list", "(", "set", "(", "train_attribute", ")", ")", "\n", "\n", "val_attribute", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "val_nodes", ")", ")", ":", "\n", "        ", "val_attribute", ".", "extend", "(", "syns_attrbute", "[", "val_nodes", "[", "i", "]", "]", ")", "\n", "", "val_attribute", "=", "list", "(", "set", "(", "val_attribute", ")", ")", "\n", "\n", "test_attribute", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_nodes", ")", ")", ":", "\n", "        ", "test_attribute", ".", "extend", "(", "syns_attrbute", "[", "test_nodes", "[", "i", "]", "]", ")", "\n", "", "test_attribute", "=", "list", "(", "set", "(", "test_attribute", ")", ")", "\n", "\n", "attrbute_rm", "=", "[", "]", "\n", "syns_attrbute_rm", "=", "{", "}", "\n", "train_attribute_rm", "=", "[", "]", "\n", "val_attribute_rm", "=", "[", "]", "\n", "test_attribute_rm", "=", "[", "]", "\n", "\n", "for", "attr", "in", "train_attribute", ":", "\n", "        ", "if", "attr", "in", "val_attribute", "or", "attr", "in", "test_attribute", ":", "\n", "            ", "train_attribute_rm", ".", "append", "(", "attr", ")", "\n", "\n", "", "", "for", "attr", "in", "val_attribute", ":", "\n", "        ", "if", "attr", "in", "train_attribute", ":", "\n", "            ", "val_attribute_rm", ".", "append", "(", "attr", ")", "\n", "\n", "", "", "for", "attr", "in", "test_attribute", ":", "\n", "        ", "if", "attr", "in", "train_attribute", ":", "\n", "            ", "test_attribute_rm", ".", "append", "(", "attr", ")", "\n", "\n", "", "", "attrbute_rm", "=", "syns", "+", "list", "(", "set", "(", "train_attribute_rm", "+", "val_attribute_rm", "+", "test_attribute_rm", ")", ")", "\n", "for", "syn", "in", "syns", ":", "\n", "        ", "attrs", "=", "syns_attrbute", "[", "syn", "]", "\n", "syns_attrbute_rm", "[", "syn", "]", "=", "[", "attr", "for", "attr", "in", "attrs", "if", "attr", "in", "list", "(", "set", "(", "train_attribute_rm", "+", "val_attribute_rm", "+", "test_attribute_rm", ")", ")", "]", "+", "[", "syn", ",", "]", "\n", "\n", "", "return", "attrbute_rm", ",", "syns_attrbute_rm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads_orgin.ClassificationHead.__init__": [[79, 90], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_learner", "=", "'MetaOptNet'", ",", "enable_scale", "=", "True", ")", ":", "\n", "        ", "super", "(", "ClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "'Cosine'", "in", "base_learner", ")", ":", "\n", "            ", "self", ".", "head", "=", "CosineNetHead", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Cannot recognize the base learner type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "# Add a learnable scale", "\n", "", "self", ".", "enable_scale", "=", "enable_scale", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads_orgin.ClassificationHead.forward": [[91, 96], ["classification_heads_orgin.ClassificationHead.head", "classification_heads_orgin.ClassificationHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "enable_scale", ":", "\n", "            ", "return", "self", ".", "scale", "*", "self", ".", "head", "(", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", "(", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads_orgin.one_hot": [[8, 24], ["torch.zeros().cuda", "torch.zeros().cuda", "indices.view", "encoded_indicies.scatter_.scatter_", "torch.zeros", "torch.zeros", "indices.size", "torch.Size", "torch.Size", "indices.size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["def", "one_hot", "(", "indices", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Returns a one-hot tensor.\n    This is a PyTorch equivalent of Tensorflow's tf.one_hot.\n        \n    Parameters:\n      indices:  a (n_batch, m) Tensor or (m) Tensor.\n      depth: a scalar. Represents the depth of the one hot dimension.\n    Returns: a (n_batch, m, depth) Tensor or (m, depth) Tensor.\n    \"\"\"", "\n", "\n", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", ".", "cuda", "(", ")", "\n", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicies", "=", "encoded_indicies", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "\n", "return", "encoded_indicies", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads_orgin.CosineNetHead": [[25, 77], ["query.size", "support.size", "query.size", "query.size", "classification_heads_orgin.one_hot", "support_labels_one_hot.view.view", "support_labels_one_hot.view.transpose", "torch.bmm", "torch.bmm", "prototypes.div.div", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "query.dim", "support.dim", "support_labels.view", "support_labels_one_hot.transpose.sum().expand_as", "query.unsqueeze().expand", "prototypes.div.unsqueeze().expand", "query.size", "support.size", "query.size", "support.size", "support_labels_one_hot.transpose.sum", "query.unsqueeze", "prototypes.div.unsqueeze"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot"], ["", "def", "CosineNetHead", "(", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Constructs the prototype representation of each class(=mean of support vectors of each class) and\n    returns the classification score (=L2 distance to each class prototype) on the query set.\n\n    This model is the classification head described in:\n    Prototypical Networks for Few-shot Learning\n    (Snell et al., NIPS 2017).\n\n    Parameters:\n      query:  a (tasks_per_batch, n_query, d) Tensor.\n      support:  a (tasks_per_batch, n_support, d) Tensor.\n      support_labels: a (tasks_per_batch, n_support) Tensor.\n      n_way: a scalar. Represents the number of classes in a few-shot classification task.\n      n_shot: a scalar. Represents the number of support examples given per class.\n      normalize: a boolean. Represents whether if we want to normalize the distances by the embedding dimension.\n    Returns: a (tasks_per_batch, n_query, n_way) Tensor.\n    \"\"\"", "\n", "\n", "tasks_per_batch", "=", "query", ".", "size", "(", "0", ")", "\n", "n_support", "=", "support", ".", "size", "(", "1", ")", "\n", "n_query", "=", "query", ".", "size", "(", "1", ")", "\n", "d", "=", "query", ".", "size", "(", "2", ")", "\n", "\n", "assert", "(", "query", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "support", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "query", ".", "size", "(", "0", ")", "==", "support", ".", "size", "(", "0", ")", "and", "query", ".", "size", "(", "2", ")", "==", "support", ".", "size", "(", "2", ")", ")", "\n", "assert", "(", "n_support", "==", "n_way", "*", "n_shot", ")", "# n_support must equal to n_way * n_shot", "\n", "\n", "support_labels_one_hot", "=", "one_hot", "(", "support_labels", ".", "view", "(", "tasks_per_batch", "*", "n_support", ")", ",", "n_way", ")", "\n", "support_labels_one_hot", "=", "support_labels_one_hot", ".", "view", "(", "tasks_per_batch", ",", "n_support", ",", "n_way", ")", "\n", "\n", "# From:", "\n", "# https://github.com/gidariss/FewShotWithoutForgetting/blob/master/architectures/PrototypicalNetworksHead.py", "\n", "# ************************* Compute Prototypes **************************", "\n", "labels_train_transposed", "=", "support_labels_one_hot", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# Batch matrix multiplication:", "\n", "#   prototypes = labels_train_transposed * features_train ==>", "\n", "#   [batch_size x nKnovel x num_channels] =", "\n", "#       [batch_size x nKnovel x num_train_examples] * [batch_size * num_train_examples * num_channels]", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "support", ")", "\n", "# Divide with the number of examples per novel category.", "\n", "prototypes", "=", "prototypes", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "prototypes", ")", "\n", ")", "\n", "\n", "# Distance Matrix Vectorization Trick", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "query", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "prototypes", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "prototypes", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "query", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.Block.__init__": [[17, 33], ["torch.Module.__init__", "torch.LeakyReLU", "resnet12_2.conv3x3", "resnet12_2.norm_layer", "resnet12_2.conv3x3", "resnet12_2.norm_layer", "resnet12_2.conv3x3", "resnet12_2.norm_layer", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv3x3", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.norm_layer", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv3x3", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.norm_layer", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv3x3", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "downsample", ",", "use_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_relu", "=", "use_relu", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.Block.forward": [[34, 55], ["resnet12_2.Block.conv1", "resnet12_2.Block.bn1", "resnet12_2.Block.relu", "resnet12_2.Block.conv2", "resnet12_2.Block.bn2", "resnet12_2.Block.relu", "resnet12_2.Block.conv3", "resnet12_2.Block.bn3", "resnet12_2.Block.downsample", "resnet12_2.Block.maxpool", "resnet12_2.Block.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "out", "+=", "identity", "\n", "if", "self", ".", "use_relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12.__init__": [[59, 78], ["torch.Module.__init__", "resnet12_2.ResNet12._make_layer", "resnet12_2.ResNet12._make_layer", "resnet12_2.ResNet12._make_layer", "resnet12_2.ResNet12._make_layer", "resnet12_2.ResNet12.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12._make_layer", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12._make_layer", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12._make_layer", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "3", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "channels", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "channels", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "channels", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "channels", "[", "3", "]", ",", "use_relu", "=", "False", ")", "\n", "\n", "self", ".", "out_dim", "=", "channels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12._make_layer": [[79, 87], ["torch.Sequential", "resnet12_2.Block", "resnet12_2.conv1x1", "resnet12_2.norm_layer"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv1x1", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.norm_layer"], ["", "", "", "def", "_make_layer", "(", "self", ",", "planes", ",", "use_relu", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", ")", ",", "\n", "norm_layer", "(", "planes", ")", ",", "\n", ")", "\n", "block", "=", "Block", "(", "self", ".", "inplanes", ",", "planes", ",", "downsample", ",", "use_relu", "=", "use_relu", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.ResNet12.forward": [[88, 96], ["resnet12_2.ResNet12.layer1", "resnet12_2.ResNet12.layer2", "resnet12_2.ResNet12.layer3", "resnet12_2.ResNet12.layer4", "x.view().mean.view().mean.view().mean", "x.view().mean.view().mean.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "use_pool", "=", "True", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "use_pool", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv3x3": [[3, 5], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.conv1x1": [[7, 9], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.norm_layer": [[11, 13], ["torch.BatchNorm2d"], "function", ["None"], ["", "def", "norm_layer", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.resnet12": [[97, 99], ["resnet12_2.ResNet12"], "function", ["None"], ["", "", "def", "resnet12", "(", ")", ":", "\n", "    ", "return", "ResNet12", "(", "[", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.resnet12_2.resnet12_wide": [[100, 102], ["resnet12_2.ResNet12"], "function", ["None"], ["", "def", "resnet12_wide", "(", ")", ":", "\n", "    ", "return", "ResNet12", "(", "[", "64", ",", "160", ",", "320", ",", "640", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.ClassificationHead.__init__": [[162, 175], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "print"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_learner", "=", "'MetaOptNet'", ",", "enable_scale", "=", "True", ")", ":", "\n", "        ", "super", "(", "ClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "'Cosine'", "in", "base_learner", ")", ":", "\n", "            ", "self", ".", "head", "=", "CosineNetHead", "\n", "", "elif", "(", "'FuseCos'", "in", "base_learner", ")", ":", "\n", "            ", "self", ".", "head", "=", "FuseCosineNetHead", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Cannot recognize the base learner type\"", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "# Add a learnable scale", "\n", "", "self", ".", "enable_scale", "=", "enable_scale", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.ClassificationHead.forward": [[176, 181], ["classification_heads.ClassificationHead.head", "classification_heads.ClassificationHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "k_all", ",", "meta_part_infer", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "enable_scale", ":", "\n", "            ", "return", "self", ".", "scale", "*", "self", ".", "head", "(", "k_all", ",", "meta_part_infer", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", "(", "k_all", ",", "meta_part_infer", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "**", "kwargs", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot": [[10, 26], ["torch.zeros().cuda", "torch.zeros().cuda", "indices.view", "encoded_indicies.scatter_.scatter_", "torch.zeros", "torch.zeros", "indices.size", "torch.Size", "torch.Size", "indices.size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["def", "one_hot", "(", "indices", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Returns a one-hot tensor.\n    This is a PyTorch equivalent of Tensorflow's tf.one_hot.\n        \n    Parameters:\n      indices:  a (n_batch, m) Tensor or (m) Tensor.\n      depth: a scalar. Represents the depth of the one hot dimension.\n    Returns: a (n_batch, m, depth) Tensor or (m, depth) Tensor.\n    \"\"\"", "\n", "\n", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", ".", "cuda", "(", ")", "\n", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicies", "=", "encoded_indicies", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "\n", "return", "encoded_indicies", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.CosineNetHead": [[27, 78], ["query.size", "support.size", "query.size", "query.size", "classification_heads.one_hot", "support_labels_one_hot.view.view", "support_labels_one_hot.view.transpose", "torch.bmm", "torch.bmm", "prototypes.div.div", "meta_part_infer", "boost_prototypes.reshape.reshape", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "query.dim", "support.dim", "support_labels.view", "support_labels_one_hot.transpose.sum().expand_as", "prototypes.div.reshape", "k_all.reshape", "query.unsqueeze().expand", "prototypes.div.unsqueeze().expand", "query.size", "support.size", "query.size", "support.size", "support_labels_one_hot.transpose.sum", "query.unsqueeze", "prototypes.div.unsqueeze"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot"], ["", "def", "CosineNetHead", "(", "k_all", ",", "meta_part_infer", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "is_scale", "=", "False", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Constructs the prototype representation of each class(=mean of support vectors of each class) and\n    returns the classification score (=L2 distance to each class prototype) on the query set.\n\n    This model is the classification head described in:\n    Prototypical Networks for Few-shot Learning\n    (Snell et al., NIPS 2017).\n\n    Parameters:\n      query:  a (tasks_per_batch, n_query, d) Tensor.\n      support:  a (tasks_per_batch, n_support, d) Tensor.\n      support_labels: a (tasks_per_batch, n_support) Tensor.\n      n_way: a scalar. Represents the number of classes in a few-shot classification task.\n      n_shot: a scalar. Represents the number of support examples given per class.\n      normalize: a boolean. Represents whether if we want to normalize the distances by the embedding dimension.\n    Returns: a (tasks_per_batch, n_query, n_way) Tensor.\n    \"\"\"", "\n", "\n", "tasks_per_batch", "=", "query", ".", "size", "(", "0", ")", "\n", "n_support", "=", "support", ".", "size", "(", "1", ")", "\n", "n_query", "=", "query", ".", "size", "(", "1", ")", "\n", "d", "=", "query", ".", "size", "(", "2", ")", "\n", "\n", "assert", "(", "query", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "support", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "query", ".", "size", "(", "0", ")", "==", "support", ".", "size", "(", "0", ")", "and", "query", ".", "size", "(", "2", ")", "==", "support", ".", "size", "(", "2", ")", ")", "\n", "assert", "(", "n_support", "==", "n_way", "*", "n_shot", ")", "# n_support must equal to n_way * n_shot", "\n", "\n", "support_labels_one_hot", "=", "one_hot", "(", "support_labels", ".", "view", "(", "tasks_per_batch", "*", "n_support", ")", ",", "n_way", ")", "\n", "support_labels_one_hot", "=", "support_labels_one_hot", ".", "view", "(", "tasks_per_batch", ",", "n_support", ",", "n_way", ")", "\n", "\n", "# From:", "\n", "# https://github.com/gidariss/FewShotWithoutForgetting/blob/master/architectures/PrototypicalNetworksHead.py", "\n", "# ************************* Compute Prototypes **************************", "\n", "labels_train_transposed", "=", "support_labels_one_hot", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "support", ")", "\n", "# Divide with the number of examples per novel category.", "\n", "prototypes", "=", "prototypes", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "prototypes", ")", "\n", ")", "\n", "\n", "boost_prototypes", ",", "_", "=", "meta_part_infer", "(", "prototypes", ".", "reshape", "(", "-", "1", ",", "d", ")", ",", "k_all", ".", "reshape", "(", "-", "1", ")", ",", "is_infer", "=", "is_scale", ")", "\n", "boost_prototypes", "=", "boost_prototypes", ".", "reshape", "(", "tasks_per_batch", ",", "n_way", ",", "d", ")", "\n", "prototypes", "=", "prototypes", "*", "0.5", "+", "boost_prototypes", "*", "0.5", "\n", "# Distance Matrix Vectorization Trick", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "query", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "prototypes", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "prototypes", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "query", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.FuseCosineNetHead": [[80, 160], ["query.size", "support.size", "query.size", "query.size", "classification_heads.one_hot", "support_labels_one_hot.view.view", "support_labels_one_hot.view.transpose", "torch.bmm", "torch.bmm", "prototypes.div.div", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "torch.nn.functional.softmax", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "mean_1.div.div", "torch.pow", "torch.pow", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "torch.nn.functional.softmax", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "mean_2.div.div", "torch.pow", "torch.pow", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "query.dim", "support.dim", "support_labels.view", "support_labels_one_hot.transpose.sum().expand_as", "meta_part_infer", "boost_prototypes[].reshape.reshape", "meta_part_infer", "boost_prototypes[].reshape", "query.unsqueeze().expand", "prototypes.div.unsqueeze().expand", "assign_1.transpose.sum().expand_as", "assign_1.transpose.unsqueeze().expand_as().sum", "query.unsqueeze().expand", "boost_prototypes[].reshape.unsqueeze().expand", "assign_2.transpose.sum().expand_as", "assign_2.transpose.unsqueeze().expand_as().sum", "query.unsqueeze().expand", "prototypes.div.unsqueeze().expand", "query.size", "support.size", "query.size", "support.size", "prototypes.div.reshape", "k_all.reshape", "prototypes.div.reshape", "k_all.reshape", "torch.cat.unsqueeze().expand", "mean_1.div.unsqueeze().expand", "torch.cat.unsqueeze().expand", "mean_2.div.unsqueeze().expand", "support_labels_one_hot.transpose.sum", "query.unsqueeze", "prototypes.div.unsqueeze", "assign_1.transpose.sum", "assign_1.transpose.unsqueeze().expand_as", "query.unsqueeze", "boost_prototypes[].reshape.unsqueeze", "assign_2.transpose.sum", "assign_2.transpose.unsqueeze().expand_as", "query.unsqueeze", "prototypes.div.unsqueeze", "torch.cat.unsqueeze", "mean_1.div.unsqueeze", "assign_1.transpose.unsqueeze().expand_as", "torch.cat.unsqueeze", "mean_2.div.unsqueeze", "assign_2.transpose.unsqueeze().expand_as", "assign_1.transpose.unsqueeze", "assign_2.transpose.unsqueeze", "assign_1.transpose.unsqueeze", "assign_2.transpose.unsqueeze"], "function", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.classification_heads.one_hot"], ["", "def", "FuseCosineNetHead", "(", "k_all", ",", "meta_part_infer", ",", "query", ",", "support", ",", "support_labels", ",", "n_way", ",", "n_shot", ",", "is_scale", "=", "False", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Constructs the prototype representation of each class(=mean of support vectors of each class) and\n    returns the classification score (=L2 distance to each class prototype) on the query set.\n\n    This model is the classification head described in:\n    Prototypical Networks for Few-shot Learning\n    (Snell et al., NIPS 2017).\n\n    Parameters:\n      query:  a (tasks_per_batch, n_query, d) Tensor.\n      support:  a (tasks_per_batch, n_support, d) Tensor.\n      support_labels: a (tasks_per_batch, n_support) Tensor.\n      n_way: a scalar. Represents the number of classes in a few-shot classification task.\n      n_shot: a scalar. Represents the number of support examples given per class.\n      normalize: a boolean. Represents whether if we want to normalize the distances by the embedding dimension.\n    Returns: a (tasks_per_batch, n_query, n_way) Tensor.\n    \"\"\"", "\n", "scale", "=", "10", "\n", "tasks_per_batch", "=", "query", ".", "size", "(", "0", ")", "\n", "n_support", "=", "support", ".", "size", "(", "1", ")", "\n", "n_query", "=", "query", ".", "size", "(", "1", ")", "\n", "d", "=", "query", ".", "size", "(", "2", ")", "\n", "\n", "assert", "(", "query", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "support", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "query", ".", "size", "(", "0", ")", "==", "support", ".", "size", "(", "0", ")", "and", "query", ".", "size", "(", "2", ")", "==", "support", ".", "size", "(", "2", ")", ")", "\n", "assert", "(", "n_support", "==", "n_way", "*", "n_shot", ")", "# n_support must equal to n_way * n_shot", "\n", "\n", "support_labels_one_hot", "=", "one_hot", "(", "support_labels", ".", "view", "(", "tasks_per_batch", "*", "n_support", ")", ",", "n_way", ")", "\n", "support_labels_one_hot", "=", "support_labels_one_hot", ".", "view", "(", "tasks_per_batch", ",", "n_support", ",", "n_way", ")", "\n", "\n", "# From:", "\n", "# https://github.com/gidariss/FewShotWithoutForgetting/blob/master/architectures/PrototypicalNetworksHead.py", "\n", "# ************************* Compute Prototypes **************************", "\n", "labels_train_transposed", "=", "support_labels_one_hot", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "support", ")", "\n", "# Divide with the number of examples per novel category.", "\n", "prototypes", "=", "prototypes", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "prototypes", ")", "\n", ")", "\n", "if", "is_scale", ":", "\n", "        ", "boost_prototypes", ",", "_", "=", "meta_part_infer", "(", "prototypes", ".", "reshape", "(", "-", "1", ",", "d", ")", ",", "k_all", ".", "reshape", "(", "-", "1", ")", ",", "use_scale", "=", "is_scale", ",", "is_infer", "=", "is_scale", ")", "\n", "boost_prototypes", "=", "boost_prototypes", ".", "reshape", "(", "tasks_per_batch", ",", "n_way", ",", "d", ")", "\n", "", "else", ":", "\n", "        ", "boost_prototypes", "=", "meta_part_infer", "(", "prototypes", ".", "reshape", "(", "-", "1", ",", "d", ")", ",", "k_all", ".", "reshape", "(", "-", "1", ")", ",", "use_scale", "=", "is_scale", ",", "is_infer", "=", "is_scale", ")", "\n", "boost_prototypes", "=", "boost_prototypes", "[", "0", "]", ".", "reshape", "(", "tasks_per_batch", ",", "n_way", ",", "d", ")", "\n", "\n", "", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "query", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "prototypes", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "prototypes", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "query", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "assign_1", "=", "F", ".", "softmax", "(", "logits", "*", "scale", ",", "dim", "=", "-", "1", ")", "\n", "assign_1", "=", "torch", ".", "cat", "(", "[", "support_labels_one_hot", ",", "assign_1", "]", ",", "dim", "=", "1", ")", "\n", "assign_1_transposed", "=", "assign_1", ".", "transpose", "(", "1", ",", "2", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "support", ",", "query", "]", ",", "dim", "=", "1", ")", "\n", "mean_1", "=", "torch", ".", "bmm", "(", "assign_1_transposed", ",", "emb", ")", "\n", "mean_1", "=", "mean_1", ".", "div", "(", "\n", "assign_1_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "mean_1", ")", "\n", ")", "\n", "diff", "=", "torch", ".", "pow", "(", "emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n_way", ",", "-", "1", ",", "-", "1", ")", "-", "mean_1", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "emb", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "2", ")", "\n", "std_1", "=", "(", "assign_1_transposed", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "diff", ")", "*", "diff", ")", ".", "sum", "(", "dim", "=", "2", ")", "/", "assign_1_transposed", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "diff", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "query", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "boost_prototypes", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "boost_prototypes", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "query", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "assign_2", "=", "F", ".", "softmax", "(", "logits", "*", "scale", ",", "dim", "=", "-", "1", ")", "\n", "assign_2", "=", "torch", ".", "cat", "(", "[", "support_labels_one_hot", ",", "assign_2", "]", ",", "dim", "=", "1", ")", "\n", "assign_2_transposed", "=", "assign_2", ".", "transpose", "(", "1", ",", "2", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "support", ",", "query", "]", ",", "dim", "=", "1", ")", "\n", "mean_2", "=", "torch", ".", "bmm", "(", "assign_2_transposed", ",", "emb", ")", "\n", "mean_2", "=", "mean_2", ".", "div", "(", "\n", "assign_2_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "mean_2", ")", "\n", ")", "\n", "diff", "=", "torch", ".", "pow", "(", "emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n_way", ",", "-", "1", ",", "-", "1", ")", "-", "mean_2", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "emb", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "2", ")", "\n", "std_2", "=", "(", "assign_2_transposed", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "diff", ")", "*", "diff", ")", ".", "sum", "(", "dim", "=", "2", ")", "/", "assign_2_transposed", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "diff", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "prototypes", "=", "(", "mean_1", "*", "std_2", "+", "mean_2", "*", "std_1", ")", "/", "(", "std_2", "+", "std_1", ")", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "query", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "prototypes", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "prototypes", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "query", ".", "shape", "[", "1", "]", ",", "-", "1", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "# Distance Matrix Vectorization Trick", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.meta_part_inference_mini.ProtoComNet.__init__": [[12, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.array", "len", "scipy.coo_matrix", "meta_part_inference_mini.ProtoComNet.adj.todense", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "dict", "dict", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.unsqueeze().expand", "torch.normalize.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "numpy.ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "meta_part_inference_mini.ProtoComNet.catname2label.items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.normalize.unsqueeze", "torch.normalize.unsqueeze", "open", "pickle.load", "open", "pickle.load", "print", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "in_dim", "=", "1600", ")", ":", "\n", "        ", "super", "(", "ProtoComNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", ",", "out_features", "=", "in_dim", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", "//", "2", ",", "out_features", "=", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "in_dim", ")", "\n", ")", "\n", "self", ".", "aggregator", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "600", "+", "512", ",", "out_features", "=", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "300", ",", "out_features", "=", "1", ")", "\n", ")", "\n", "with", "open", "(", "'./data/mini_imagenet_part_prior.pickle'", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "part_prior", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "self", ".", "part_prior", "=", "part_prior", "\n", "edges", "=", "np", ".", "array", "(", "part_prior", "[", "'edges'", "]", ")", "\n", "n", "=", "len", "(", "part_prior", "[", "'wnids'", "]", ")", "\n", "self", ".", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "edges", ")", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "n", ",", "n", ")", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "adj", "=", "self", ".", "adj", ".", "todense", "(", ")", "\n", "self", ".", "adj", "=", "torch", ".", "from_numpy", "(", "self", ".", "adj", ")", ".", "cuda", "(", ")", "\n", "\n", "train_class_name_file", "=", "'./data/mini_imagenet_catname2label_train.pickle'", "\n", "val_class_name_file", "=", "'./data/mini_imagenet_catname2label_val.pickle'", "\n", "test_class_name_file", "=", "'./data/mini_imagenet_catname2label_test.pickle'", "\n", "with", "open", "(", "train_class_name_file", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "catname2label_train", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "with", "open", "(", "val_class_name_file", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "catname2label_val", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "with", "open", "(", "test_class_name_file", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "catname2label_test", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "self", ".", "catname2label", "=", "dict", "(", "catname2label_train", ",", "**", "catname2label_val", ")", "\n", "self", ".", "catname2label", "=", "dict", "(", "self", ".", "catname2label", ",", "**", "catname2label_test", ")", "\n", "self", ".", "label2catname", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "catname2label", ".", "items", "(", ")", "}", "\n", "word_vectors", "=", "torch", ".", "tensor", "(", "part_prior", "[", "'vectors'", "]", ")", ".", "cuda", "(", ")", "\n", "word_vectors", "=", "F", ".", "normalize", "(", "word_vectors", ")", "\n", "semantic_feature_0", "=", "word_vectors", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "-", "1", ")", "\n", "semantic_feature_1", "=", "word_vectors", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "n", ",", "-", "1", ",", "-", "1", ")", "\n", "self", ".", "semantic_feature", "=", "torch", ".", "cat", "(", "[", "semantic_feature_0", ",", "semantic_feature_1", "]", ",", "dim", "=", "-", "1", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_metapart_feature.pickle\"", ")", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "self", ".", "metapart_feature", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_class_feature.pickle\"", ")", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "self", ".", "class_feature", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'no found '", "+", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_metapart_feature.pickle\"", ")", "\n", "+", "' '", "+", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "\"mini_imagenet_class_feature.pickle\"", ")", ")", "\n", "", "self", ".", "n", "=", "n", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.meta_part_inference_mini.ProtoComNet.forward": [[67, 134], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "meta_part_inference_mini.ProtoComNet.metapart_feature.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_part_inference_mini.ProtoComNet.aggregator().squeeze", "meta_part_inference_mini.ProtoComNet.encoder", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "meta_part_inference_mini.ProtoComNet.decoder", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "meta_part_inference_mini.ProtoComNet.metapart_feature.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_part_inference_mini.ProtoComNet.aggregator().squeeze", "meta_part_inference_mini.ProtoComNet.encoder", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "meta_part_inference_mini.ProtoComNet.decoder", "torch.cat.append", "torch.cat.append", "torch.cat.append", "meta_part_inference_mini.ProtoComNet.reparameterize", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x[].unsqueeze().expand", "meta_part_inference_mini.ProtoComNet.aggregator", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x[].unsqueeze().expand", "meta_part_inference_mini.ProtoComNet.aggregator", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "x[].unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "y[].item", "x[].unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item", "y[].item"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.meta_part_inference_mini.ProtoComNet.reparameterize", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.prior.glove.GloVe.zeros"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "use_scale", "=", "False", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "if", "is_infer", "==", "False", ":", "\n", "            ", "nb", "=", "x", ".", "shape", "[", "0", "]", "\n", "outputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "                ", "input_feature", "=", "torch", ".", "zeros", "(", "self", ".", "n", ",", "self", ".", "in_dim", ")", ".", "cuda", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "metapart_feature", ".", "items", "(", ")", ":", "\n", "                    ", "input_feature", "[", "k", ":", "k", "+", "1", ",", ":", "]", "=", "self", ".", "reparameterize", "(", "v", "[", "'mean'", "]", ",", "v", "[", "'std'", "]", ")", "\n", "", "input_feature", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "=", "x", "[", "i", ":", "i", "+", "1", ",", ":", "]", "\n", "\n", "semantic_feature", "=", "self", ".", "semantic_feature", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", ",", ":", "]", "\n", "\n", "semantic_feature", "=", "torch", ".", "cat", "(", "[", "semantic_feature", ",", "x", "[", "i", ":", "i", "+", "1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "n", ",", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_adj", "=", "self", ".", "aggregator", "(", "semantic_feature", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "fuse_adj", "=", "self", ".", "adj", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "*", "fuse_adj", "\n", "\n", "eye", "=", "1", "-", "torch", ".", "eye", "(", "self", ".", "adj", ".", "shape", "[", "0", "]", ")", ".", "type_as", "(", "fuse_adj", ")", "\n", "adj", "=", "fuse_adj", "*", "eye", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "+", "torch", ".", "eye", "(", "\n", "self", ".", "adj", ".", "shape", "[", "0", "]", ")", ".", "type_as", "(", "fuse_adj", ")", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "\n", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "\n", "\n", "z", "=", "self", ".", "encoder", "(", "input_feature", ")", "\n", "g", "=", "torch", ".", "mm", "(", "adj", ",", "z", ")", "\n", "out", "=", "self", ".", "decoder", "(", "g", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "targets", ".", "append", "(", "self", ".", "class_feature", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "[", "'mean'", "]", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "targets", ",", "dim", "=", "0", ")", "\n", "return", "outputs", ",", "targets", "\n", "", "else", ":", "\n", "            ", "nb", "=", "x", ".", "shape", "[", "0", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "                ", "input_feature", "=", "torch", ".", "zeros", "(", "self", ".", "n", ",", "self", ".", "in_dim", ")", ".", "cuda", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "metapart_feature", ".", "items", "(", ")", ":", "\n", "                    ", "input_feature", "[", "k", ":", "k", "+", "1", ",", ":", "]", "=", "v", "[", "'mean'", "]", "\n", "", "input_feature", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "=", "x", "[", "i", ":", "i", "+", "1", ",", ":", "]", "\n", "\n", "semantic_feature", "=", "self", ".", "semantic_feature", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "\n", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", ",", ":", "]", "\n", "semantic_feature", "=", "torch", ".", "cat", "(", "[", "semantic_feature", ",", "x", "[", "i", ":", "i", "+", "1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "n", ",", "-", "1", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "fuse_adj", "=", "self", ".", "aggregator", "(", "semantic_feature", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "fuse_adj", "=", "self", ".", "adj", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "*", "fuse_adj", "\n", "eye", "=", "1", "-", "torch", ".", "eye", "(", "self", ".", "adj", ".", "shape", "[", "0", "]", ")", ".", "type_as", "(", "fuse_adj", ")", "\n", "adj", "=", "fuse_adj", "*", "eye", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "+", "torch", ".", "eye", "(", "\n", "self", ".", "adj", ".", "shape", "[", "0", "]", ")", ".", "type_as", "(", "fuse_adj", ")", "[", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", ":", "\n", "self", ".", "part_prior", "[", "'wnids2id'", "]", "[", "\n", "self", ".", "label2catname", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", "]", "+", "1", ",", ":", "]", "\n", "z", "=", "self", ".", "encoder", "(", "input_feature", ")", "\n", "out", "=", "torch", ".", "mm", "(", "adj", ",", "z", ")", "\n", "out", "=", "self", ".", "decoder", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "\n", "return", "outputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.meta_part_inference_mini.ProtoComNet.reparameterize": [[135, 139], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "", "def", "reparameterize", "(", "self", ",", "mu", ",", "var", ")", ":", "\n", "        ", "std", "=", "var", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.PredTrainHead.LinearClassifier.__init__": [[11, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# self.dropout = nn.Dropout(p=0.2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_dim", ",", "n_classes", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.PredTrainHead.LinearClassifier.forward": [[16, 19], ["PredTrainHead.LinearClassifier.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = self.dropout(x)", "\n", "        ", "return", "self", ".", "linear", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.PredTrainHead.LinearRotateHead.__init__": [[21, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "512", ",", "n_classes", "=", "100", ")", ":", "\n", "        ", "super", "(", "LinearRotateHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rotate_classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "4", ")", "\n", ")", "\n", "self", ".", "cls_classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "n_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.models.PredTrainHead.LinearRotateHead.forward": [[32, 38], ["PredTrainHead.LinearRotateHead.cls_classifier", "PredTrainHead.LinearRotateHead.rotate_classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "use_cls", "=", "True", ")", ":", "\n", "        ", "if", "use_cls", ":", "\n", "            ", "out", "=", "self", ".", "cls_classifier", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "rotate_classifier", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNet.__init__": [[55, 148], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "mini_imagenet.load_data", "mini_imagenet.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MiniImageNet.label2ind.keys", "mini_imagenet.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "data_train[].items", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "numpy.concatenate", "mini_imagenet.MiniImageNet.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "data_novel[].items", "mini_imagenet.buildLabelIndex", "mini_imagenet.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ",", "use_base", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "base_folder", "=", "'miniImagenet'", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'MiniImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading mini ImageNet dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_val.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_test.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "self", ".", "label2catname", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "data_train", "[", "'catname2label'", "]", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "", "if", "use_base", ":", "\n", "                ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "data_novel", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_novel", "[", "'labels'", "]", "\n", "", "self", ".", "label2catname", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "data_novel", "[", "'catname2label'", "]", ".", "items", "(", ")", "}", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNet.__getitem__": [[150, 158], ["PIL.Image.fromarray", "mini_imagenet.MiniImageNet.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNet.__len__": [[159, 161], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNetPC.__init__": [[164, 255], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "mini_imagenet.load_data", "mini_imagenet.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MiniImageNetPC.label2ind.keys", "mini_imagenet.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "numpy.concatenate", "mini_imagenet.MiniImageNetPC.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "mini_imagenet.buildLabelIndex", "mini_imagenet.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "shot", "=", "1", ",", "do_not_use_random_transf", "=", "False", ",", "use_base", "=", "True", ")", ":", "\n", "        ", "self", ".", "shot", "=", "shot", "\n", "self", ".", "base_folder", "=", "'miniImagenet'", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'MiniImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading mini ImageNet dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_val.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_test.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "", "if", "use_base", ":", "\n", "                ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "data_novel", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_novel", "[", "'labels'", "]", "\n", "\n", "", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNetPC.__getitem__": [[257, 277], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "sel_index.remove", "range", "PIL.Image.fromarray", "torch.stack.append", "torch.stack.append", "imgs.append", "mini_imagenet.MiniImageNetPC.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "imgs", "=", "[", "img", ",", "]", "\n", "# labels = [label, ]", "\n", "if", "self", ".", "shot", ">", "1", ":", "\n", "            ", "sel_index", "=", "self", ".", "label2ind", "[", "label", "]", "[", ":", "]", "\n", "sel_index", ".", "remove", "(", "index", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "shot", "-", "1", ")", ":", "\n", "                ", "imgs", ".", "append", "(", "self", ".", "data", "[", "sel_index", "[", "i", "]", "]", ")", "\n", "# labels.append(label)", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "", "trs_imgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "trs_imgs", ".", "append", "(", "img", ")", "\n", "", "trs_imgs", "=", "torch", ".", "stack", "(", "trs_imgs", ",", "dim", "=", "0", ")", "\n", "return", "trs_imgs", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.MiniImageNetPC.__len__": [[278, 280], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__init__": [[282, 317], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom": [[318, 335], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleCategories": [[336, 361], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories": [[362, 397], ["sorted", "sorted", "mini_imagenet.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "mini_imagenet.FewShotDataloader.sampleCategories", "mini_imagenet.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories": [[398, 430], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "mini_imagenet.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[431, 479], ["len", "int", "range", "random.shuffle", "len", "len", "mini_imagenet.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "int", "(", "nTestNovel", "/", "nKnovel", ")", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_episode": [[480, 499], ["mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.createExamplesTensorData": [[500, 523], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.get_iterator": [[524, 546], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "mini_imagenet.FewShotDataloader.sample_episode", "mini_imagenet.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "mini_imagenet.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__call__": [[547, 549], ["mini_imagenet.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.FewShotDataloader.__len__": [[550, 552], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.buildLabelIndex": [[32, 40], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangbq-research_Prototype_Completion_for_FSL.data.mini_imagenet.load_data": [[42, 53], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]]}