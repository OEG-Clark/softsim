{"home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_classifier.hotEncoder": [[67, 73], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "hotEncoder", "(", "v", ")", ":", "\n", "\t", "ret_vec", "=", "torch", ".", "zeros", "(", "v", ".", "shape", "[", "0", "]", ",", "config", ".", "class_numbers", ")", ".", "to", "(", "device", ")", "\n", "for", "s", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "ret_vec", "[", "s", "]", "[", "v", "[", "s", "]", "]", "=", "1", "\n", "\n", "", "return", "ret_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_classifier.cross_entropy_one_hot": [[77, 81], ["target.max", "torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "cross_entropy_one_hot", "(", "input", ",", "target", ")", ":", "\n", "\t", "_", ",", "labels", "=", "target", ".", "max", "(", "dim", "=", "1", ")", "\n", "ls", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "input", ",", "labels", ")", "\n", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_classifier.train_classifier": [[85, 178], ["open", "utils.utils.EarlyStopping", "print", "print", "print", "print", "print", "range", "print", "print", "classifier.train", "classifier.eval", "scheduler.step", "print", "print", "print", "utils.utils.EarlyStopping.", "print", "print", "optimizer.zero_grad", "x.float().to.float().to", "val_label.to().unsqueeze.to().unsqueeze", "train_classifier.hotEncoder", "pretrained_model", "torch.normalize", "classifier", "train_classifier.cross_entropy_one_hot", "cross_entropy_one_hot.backward", "train_loss.append", "optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "print", "cross_entropy_one_hot.item", "val_x.float().to.float().to", "val_label.to().unsqueeze", "train_classifier.hotEncoder", "pretrained_model", "torch.normalize", "classifier", "train_classifier.cross_entropy_one_hot", "val_loss.append", "numpy.mean", "numpy.mean", "x.float().to.float", "val_label.to().unsqueeze.to", "cross_entropy_one_hot.item", "val_x.float().to.float", "val_label.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot"], ["", "def", "train_classifier", "(", ")", ":", "\n", "\t", "num_epochs", "=", "800", "\n", "\n", "with", "open", "(", "main_path", "+", "'/classifier_results.txt'", ",", "'w'", ",", "1", ")", "as", "output_file", ":", "\n", "\t\t", "classifier_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "True", ",", "log_path", "=", "classifier_path", ",", "output_file", "=", "output_file", ")", "\n", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'classifier after sup_contrastive'", ",", "file", "=", "output_file", ")", "\n", "\n", "if", "config", ".", "ESC_10", ":", "\n", "\t\t\t", "print", "(", "'ESC_10'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "ESC_50", ":", "\n", "\t\t\t", "print", "(", "'ESC_10'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "US8K", ":", "\n", "\t\t\t", "print", "(", "'US8K'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "us8k_train_folds", ",", "config", ".", "us8k_test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "\n", "", "print", "(", "'number of freq masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "freq_masks", ",", "config", ".", "freq_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'number of time masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "time_masks", ",", "config", ".", "time_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "\t\t\t", "classifier", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "\n", "train_corrects", "=", "0", "\n", "train_samples_count", "=", "0", "\n", "\n", "for", "_", ",", "x", ",", "label", "in", "train_loader", ":", "\n", "\t\t\t\t", "loss", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", "=", "x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "y_rep", "=", "pretrained_model", "(", "x", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "out", "=", "classifier", "(", "y_rep", ")", "\n", "loss", "=", "cross_entropy_one_hot", "(", "out", ",", "label_vec", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_corrects", "+=", "(", "torch", ".", "argmax", "(", "out", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_samples_count", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "", "val_loss", "=", "[", "]", "\n", "val_acc", "=", "[", "]", "\n", "val_corrects", "=", "0", "\n", "val_samples_count", "=", "0", "\n", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "_", ",", "val_x", ",", "val_label", "in", "val_loader", ":", "\n", "\t\t\t\t\t", "val_x", "=", "val_x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "val_label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "y_rep", "=", "pretrained_model", "(", "val_x", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "out", "=", "classifier", "(", "y_rep", ")", "\n", "temp", "=", "cross_entropy_one_hot", "(", "out", ",", "label_vec", ")", "\n", "val_loss", ".", "append", "(", "temp", ".", "item", "(", ")", ")", "\n", "\n", "val_corrects", "+=", "(", "torch", ".", "argmax", "(", "out", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_samples_count", "+=", "val_x", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "train_acc", "=", "train_corrects", "/", "train_samples_count", "\n", "val_acc", "=", "val_corrects", "/", "val_samples_count", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "print", "(", "'\\n'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "\"Epoch: {}/{}...\"", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ")", ",", "\n", "\"Loss: {:.4f}...\"", ".", "format", "(", "np", ".", "mean", "(", "train_loss", ")", ")", ",", "\n", "\"Val Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "val_loss", ")", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train_acc is {:.4f} and val_acc is {:.4f}'", ".", "format", "(", "train_acc", ",", "val_acc", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "classifier_stopping", "(", "-", "val_acc", ",", "classifier", ",", "epoch", "+", "1", ")", "\n", "if", "classifier_stopping", ".", "early_stop", ":", "\n", "\t\t\t\t", "print", "(", "\"Early stopping\"", ",", "file", "=", "output_file", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_contrastiveLoss.hotEncoder": [[64, 69], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "hotEncoder", "(", "v", ")", ":", "\n", "\t", "ret_vec", "=", "torch", ".", "zeros", "(", "v", ".", "shape", "[", "0", "]", ",", "config", ".", "class_numbers", ")", ".", "to", "(", "device", ")", "\n", "for", "s", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "ret_vec", "[", "s", "]", "[", "v", "[", "s", "]", "]", "=", "1", "\n", "", "return", "ret_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_contrastiveLoss.train_contrastive": [[72, 157], ["open", "utils.utils.EarlyStopping", "print", "print", "print", "print", "print", "print", "range", "print", "print", "model.train", "projection_head.train", "model.eval", "projection_head.eval", "scheduler.step", "print", "utils.utils.EarlyStopping.", "print", "print", "optimizer.zero_grad", "x.to.to", "val_label.to().unsqueeze.to().unsqueeze", "train_contrastiveLoss.hotEncoder", "model", "torch.normalize", "projection_head", "torch.normalize", "loss_fn", "loss_fn.backward", "train_loss.append", "optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "print", "print", "print", "x.to.float", "F.normalize.unsqueeze", "val_label.to().unsqueeze.squeeze", "loss_fn.item", "val_x.to.to", "val_label.to().unsqueeze", "train_contrastiveLoss.hotEncoder", "model", "torch.normalize", "projection_head", "torch.normalize", "loss_fn", "val_loss.append", "numpy.mean", "numpy.mean", "val_label.to().unsqueeze.to", "val_x.to.float", "F.normalize.unsqueeze", "val_label.to().unsqueeze.squeeze", "loss_fn.item", "val_label.to"], "function", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder"], ["", "def", "train_contrastive", "(", ")", ":", "\n", "\t", "num_epochs", "=", "800", "\n", "with", "open", "(", "main_path", "+", "'/results.txt'", ",", "'w'", ",", "1", ")", "as", "output_file", ":", "\n", "\t\t", "mainModel_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "True", ",", "log_path", "=", "main_path", ",", "output_file", "=", "output_file", ")", "\n", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'Supervised Contrastive Loss'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'temperature for the contrastive loss is {}'", ".", "format", "(", "config", ".", "temperature", ")", ",", "file", "=", "output_file", ")", "\n", "if", "config", ".", "ESC_10", ":", "\n", "\t\t\t", "print", "(", "'ESC_10'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "ESC_50", ":", "\n", "\t\t\t", "print", "(", "'ESC_50'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "US8K", ":", "\n", "\t\t\t", "print", "(", "'US8K'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "", "print", "(", "'number of freq masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "freq_masks", ",", "config", ".", "freq_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'number of time masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "time_masks", ",", "config", ".", "time_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\t\t\t", "model", ".", "train", "(", ")", "\n", "projection_head", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "\n", "for", "_", ",", "x", ",", "label", "in", "train_loader", ":", "\n", "\t\t\t\t", "batch_loss", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "y_rep", "=", "model", "(", "x", ".", "float", "(", ")", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_proj", "=", "projection_head", "(", "y_rep", ")", "\n", "y_proj", "=", "F", ".", "normalize", "(", "y_proj", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "batch_loss", "=", "loss_fn", "(", "y_proj", ".", "unsqueeze", "(", "1", ")", ",", "label", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "train_loss", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "", "val_loss", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "projection_head", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "_", ",", "val_x", ",", "val_label", "in", "val_loader", ":", "\n", "\t\t\t\t\t", "val_x", "=", "val_x", ".", "to", "(", "device", ")", "\n", "label", "=", "val_label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "\n", "y_rep", "=", "model", "(", "val_x", ".", "float", "(", ")", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_proj", "=", "projection_head", "(", "y_rep", ")", "\n", "y_proj", "=", "F", ".", "normalize", "(", "y_proj", ",", "dim", "=", "0", ")", "\n", "\n", "temp", "=", "loss_fn", "(", "y_proj", ".", "unsqueeze", "(", "1", ")", ",", "label", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "val_loss", ".", "append", "(", "temp", ".", "item", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "\n", "print", "(", "\"Epoch: {}/{}...\"", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ")", ",", "\n", "\"Loss: {:.4f}...\"", ".", "format", "(", "np", ".", "mean", "(", "train_loss", ")", ")", ",", "\n", "\"Val Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "val_loss", ")", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "mainModel_stopping", "(", "np", ".", "mean", "(", "val_loss", ")", ",", "model", ",", "epoch", "+", "1", ")", "\n", "if", "mainModel_stopping", ".", "early_stop", ":", "\n", "\t\t\t\t", "print", "(", "\"Early stopping\"", ",", "file", "=", "output_file", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC50.MyDataset.__init__": [[27, 61], ["os.listdir", "os.listdir.sort", "range", "range", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "int", "dataset_ESC50.MyDataset.file_names.append", "int", "dataset_ESC50.MyDataset.file_names.append", "utils.transforms.ToTensor1D", "utils.transforms.RandomScale", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "utils.transforms.FrequencyMask", "utils.transforms.TimeMask", "utils.transforms.ToTensor1D", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "temp[].split", "temp[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "'./data/ESC50/ESC-50-master/audio/'", "\n", "self", ".", "train", "=", "train", "\n", "\n", "#getting name of all files inside the all of the train_folds", "\n", "temp", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "temp", ".", "sort", "(", ")", "\n", "self", ".", "file_names", "=", "[", "]", "\n", "if", "train", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "                ", "if", "int", "(", "temp", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "in", "config", ".", "train_folds", ":", "\n", "                    ", "self", ".", "file_names", ".", "append", "(", "temp", "[", "i", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "                ", "if", "int", "(", "temp", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "in", "config", ".", "test_fold", ":", "\n", "                    ", "self", ".", "file_names", ".", "append", "(", "temp", "[", "i", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomScale", "(", "max_scale", "=", "1.25", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "220500", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "220500", ")", "]", ")", "\n", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "FrequencyMask", "(", "max_width", "=", "config", ".", "freq_masks_width", ",", "numbers", "=", "config", ".", "freq_masks", ")", ",", "\n", "transforms", ".", "TimeMask", "(", "max_width", "=", "config", ".", "time_masks_width", ",", "numbers", "=", "config", ".", "time_masks", ")", "]", ")", "\n", "\n", "", "else", ":", "#for test", "\n", "            ", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "220500", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "220500", ")", "]", ")", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC50.MyDataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC50.MyDataset.__getitem__": [[68, 105], ["librosa.load", "int", "[].min", "[].max", "numpy.copy", "dataset_ESC50.MyDataset.wave_transforms", "dataset_ESC50.MyDataset.squeeze_", "librosa.feature.melspectrogram", "librosa.power_to_db", "dataset_ESC50.MyDataset.spec_transforms", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "file_name.split", "numpy.abs", "utils.transforms.scale", "dataset_ESC50.MyDataset.numpy", "temp.split", "utils.transforms.scale.max", "utils.transforms.scale.min", "utils.transforms.scale.max", "utils.transforms.scale.nonzero", "utils.transforms.scale.nonzero"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.scale"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "file_names", "[", "index", "]", "\n", "path", "=", "self", ".", "root", "+", "file_name", "\n", "wave", ",", "rate", "=", "librosa", ".", "load", "(", "path", ",", "sr", "=", "44100", ")", "\n", "\n", "#identifying the label of the sample from its name", "\n", "temp", "=", "file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "class_id", "=", "int", "(", "temp", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "\n", "if", "wave", ".", "ndim", "==", "1", ":", "\n", "            ", "wave", "=", "wave", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# normalizing waves to [-1, 1]", "\n", "", "if", "np", ".", "abs", "(", "wave", ".", "max", "(", ")", ")", ">", "1.0", ":", "\n", "            ", "wave", "=", "transforms", ".", "scale", "(", "wave", ",", "wave", ".", "min", "(", ")", ",", "wave", ".", "max", "(", ")", ",", "-", "1.0", ",", "1.0", ")", "\n", "", "wave", "=", "wave", ".", "T", "*", "32768.0", "\n", "\n", "# Remove silent sections", "\n", "start", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "min", "(", ")", "\n", "end", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "max", "(", ")", "\n", "wave", "=", "wave", "[", ":", ",", "start", ":", "end", "+", "1", "]", "\n", "\n", "wave_copy", "=", "np", ".", "copy", "(", "wave", ")", "\n", "wave_copy", "=", "self", ".", "wave_transforms", "(", "wave_copy", ")", "\n", "wave_copy", ".", "squeeze_", "(", "0", ")", "\n", "\n", "s", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "wave_copy", ".", "numpy", "(", ")", ",", "sr", "=", "44100", ",", "n_mels", "=", "128", ",", "n_fft", "=", "1024", ",", "hop_length", "=", "512", ")", "\n", "log_s", "=", "librosa", ".", "power_to_db", "(", "s", ",", "ref", "=", "np", ".", "max", ")", "\n", "\n", "# masking the spectrograms", "\n", "log_s", "=", "self", ".", "spec_transforms", "(", "log_s", ")", "\n", "\n", "\n", "#creating 3 channels by copying log_s1 3 times ", "\n", "spec", "=", "torch", ".", "cat", "(", "(", "log_s", ",", "log_s", ",", "log_s", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "file_name", ",", "spec", ",", "class_id", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC50.create_generators": [[112, 121], ["dataset_ESC50.MyDataset", "dataset_ESC50.MyDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "create_generators", "(", ")", ":", "\n", "    ", "train_dataset", "=", "MyDataset", "(", "train", "=", "True", ")", "\n", "test_dataset", "=", "MyDataset", "(", "train", "=", "False", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "10", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "10", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC10.MyDataset.__init__": [[27, 62], ["open().read().split", "open().read().split.sort", "range", "range", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "open().read", "len", "len", "int", "dataset_ESC10.MyDataset.file_names.append", "int", "dataset_ESC10.MyDataset.file_names.append", "utils.transforms.ToTensor1D", "utils.transforms.RandomScale", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "utils.transforms.FrequencyMask", "utils.transforms.TimeMask", "utils.transforms.ToTensor1D", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "open", "temp[].split", "temp[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "'./data/ESC50/ESC-50-master/audio/'", "\n", "self", ".", "train", "=", "train", "\n", "\n", "#getting name of all files inside the all of the train_folds", "\n", "temp", "=", "open", "(", "'./data/ESC50/ESC10_file_names.txt'", ",", "'r'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "temp", ".", "sort", "(", ")", "\n", "self", ".", "file_names", "=", "[", "]", "\n", "if", "train", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "                ", "if", "int", "(", "temp", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "in", "config", ".", "train_folds", ":", "\n", "                    ", "self", ".", "file_names", ".", "append", "(", "temp", "[", "i", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "                ", "if", "int", "(", "temp", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "in", "config", ".", "test_fold", ":", "\n", "                    ", "self", ".", "file_names", ".", "append", "(", "temp", "[", "i", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomScale", "(", "max_scale", "=", "1.25", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "220500", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "220500", ")", "]", ")", "\n", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "FrequencyMask", "(", "max_width", "=", "config", ".", "freq_masks_width", ",", "numbers", "=", "config", ".", "freq_masks", ")", ",", "\n", "transforms", ".", "TimeMask", "(", "max_width", "=", "config", ".", "time_masks_width", ",", "numbers", "=", "config", ".", "time_masks", ")", "]", ")", "\n", "\n", "\n", "", "else", ":", "#for test", "\n", "            ", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "220500", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "220500", ")", "]", ")", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC10.MyDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC10.MyDataset.__getitem__": [[69, 106], ["librosa.load", "int", "config.ESC10_classIds.index", "[].min", "[].max", "numpy.copy", "dataset_ESC10.MyDataset.wave_transforms", "dataset_ESC10.MyDataset.squeeze_", "librosa.feature.melspectrogram", "librosa.power_to_db", "dataset_ESC10.MyDataset.spec_transforms", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "file_name.split", "numpy.abs", "utils.transforms.scale", "dataset_ESC10.MyDataset.numpy", "temp.split", "utils.transforms.scale.max", "utils.transforms.scale.min", "utils.transforms.scale.max", "utils.transforms.scale.nonzero", "utils.transforms.scale.nonzero"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.scale"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "file_names", "[", "index", "]", "\n", "path", "=", "self", ".", "root", "+", "file_name", "\n", "wave", ",", "rate", "=", "librosa", ".", "load", "(", "path", ",", "sr", "=", "44100", ")", "\n", "\n", "#identifying the label of the sample from its name", "\n", "temp", "=", "file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "class_id", "=", "int", "(", "temp", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "class_id", "=", "config", ".", "ESC10_classIds", ".", "index", "(", "class_id", ")", "\n", "\n", "if", "wave", ".", "ndim", "==", "1", ":", "\n", "            ", "wave", "=", "wave", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# normalization of wave to [-1, 1]", "\n", "", "if", "np", ".", "abs", "(", "wave", ".", "max", "(", ")", ")", ">", "1.0", ":", "\n", "            ", "wave", "=", "transforms", ".", "scale", "(", "wave", ",", "wave", ".", "min", "(", ")", ",", "wave", ".", "max", "(", ")", ",", "-", "1.0", ",", "1.0", ")", "\n", "", "wave", "=", "wave", ".", "T", "*", "32768.0", "\n", "\n", "# Remove silent sections", "\n", "start", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "min", "(", ")", "\n", "end", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "max", "(", ")", "\n", "wave", "=", "wave", "[", ":", ",", "start", ":", "end", "+", "1", "]", "\n", "\n", "wave_copy", "=", "np", ".", "copy", "(", "wave", ")", "\n", "wave_copy", "=", "self", ".", "wave_transforms", "(", "wave_copy", ")", "\n", "wave_copy", ".", "squeeze_", "(", "0", ")", "\n", "\n", "s", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "wave_copy", ".", "numpy", "(", ")", ",", "sr", "=", "44100", ",", "n_mels", "=", "128", ",", "n_fft", "=", "1024", ",", "hop_length", "=", "512", ")", "\n", "log_s", "=", "librosa", ".", "power_to_db", "(", "s", ",", "ref", "=", "np", ".", "max", ")", "\n", "\n", "# random-masking the spectrograms", "\n", "log_s", "=", "self", ".", "spec_transforms", "(", "log_s", ")", "\n", "\n", "# making the input spectrogram to have 3 identical channels", "\n", "spec", "=", "torch", ".", "cat", "(", "(", "log_s", ",", "log_s", ",", "log_s", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "file_name", ",", "spec", ",", "class_id", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_ESC10.create_generators": [[111, 121], ["dataset_ESC10.MyDataset", "dataset_ESC10.MyDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "create_generators", "(", ")", ":", "\n", "\n", "    ", "train_dataset", "=", "MyDataset", "(", "train", "=", "True", ")", "\n", "test_dataset", "=", "MyDataset", "(", "train", "=", "False", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_hybridLoss.hotEncoder": [[69, 74], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "hotEncoder", "(", "v", ")", ":", "\n", "\t", "ret_vec", "=", "torch", ".", "zeros", "(", "v", ".", "shape", "[", "0", "]", ",", "config", ".", "class_numbers", ")", ".", "to", "(", "device", ")", "\n", "for", "s", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "ret_vec", "[", "s", "]", "[", "v", "[", "s", "]", "]", "=", "1", "\n", "", "return", "ret_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_hybridLoss.train_hybrid": [[80, 206], ["open", "utils.utils.EarlyStopping", "utils.utils.EarlyStopping", "print", "print", "print", "print", "print", "print", "range", "print", "print", "print", "model.train", "projection_layer.train", "classifier.train", "model.eval", "projection_layer.eval", "classifier.eval", "scheduler.step", "print", "print", "print", "print", "utils.utils.EarlyStopping.", "utils.utils.EarlyStopping.", "print", "print", "optimizer.zero_grad", "x.float().to.float().to", "val_label.to().unsqueeze.to().unsqueeze", "train_hybridLoss.hotEncoder", "model", "torch.normalize", "projection_layer", "torch.normalize", "classifier", "loss_fn", "torch.autograd.backward", "torch.autograd.backward", "torch.autograd.backward", "train_loss.append", "train_loss1.append", "train_loss2.append", "optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "print", "str", "loss.item", "loss1.item", "loss2.item", "val_x.float().to.float().to", "val_label.to().unsqueeze", "train_hybridLoss.hotEncoder", "model", "torch.normalize", "projection_layer", "torch.normalize", "classifier", "loss_fn", "val_loss.append", "val_loss1.append", "val_loss2.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "x.float().to.float", "val_label.to().unsqueeze.to", "loss.item", "loss1.item", "loss2.item", "val_x.float().to.float", "val_label.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder"], ["", "def", "train_hybrid", "(", ")", ":", "\n", "\t", "num_epochs", "=", "800", "\n", "\n", "with", "open", "(", "main_path", "+", "'/results.txt'", ",", "'w'", ",", "1", ")", "as", "output_file", ":", "\n", "\t\t", "mainModel_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "True", ",", "log_path", "=", "main_path", ",", "output_file", "=", "output_file", ")", "\n", "classifier_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "False", ",", "log_path", "=", "classifier_path", ",", "output_file", "=", "output_file", ")", "\n", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'HYBRID'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'alpha is {}'", ".", "format", "(", "config", ".", "alpha", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'temperature of contrastive loss is {}'", ".", "format", "(", "config", ".", "temperature", ")", ",", "file", "=", "output_file", ")", "\n", "if", "config", ".", "ESC_10", ":", "\n", "\t\t\t", "print", "(", "'ESC_10'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "ESC_50", ":", "\n", "\t\t\t", "print", "(", "'ESC_50'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "US8K", ":", "\n", "\t\t\t", "print", "(", "'US8K'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "", "print", "(", "'Freq mask number {} and length {}, and time mask number {} and length is{}'", ".", "format", "(", "config", ".", "freq_masks", ",", "config", ".", "freq_masks_width", ",", "config", ".", "time_masks", ",", "config", ".", "time_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\t\t\t", "print", "(", "'\\n'", "+", "str", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "projection_layer", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "train_loss1", "=", "[", "]", "\n", "train_loss2", "=", "[", "]", "\n", "train_corrects", "=", "0", "\n", "train_samples_count", "=", "0", "\n", "for", "_", ",", "x", ",", "label", "in", "train_loader", ":", "\n", "\t\t\t\t", "loss", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", "=", "x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "\n", "y_rep", "=", "model", "(", "x", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_proj", "=", "projection_layer", "(", "y_rep", ")", "\n", "y_proj", "=", "F", ".", "normalize", "(", "y_proj", ",", "dim", "=", "0", ")", "\n", "\n", "y_pred", "=", "classifier", "(", "y_rep", ")", "\n", "\n", "\n", "loss1", ",", "loss2", "=", "loss_fn", "(", "y_proj", ",", "y_pred", ",", "label", ",", "label_vec", ")", "\n", "\n", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "torch", ".", "autograd", ".", "backward", "(", "[", "loss1", ",", "loss2", "]", ")", "\n", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_loss1", ".", "append", "(", "loss1", ".", "item", "(", ")", ")", "\n", "train_loss2", ".", "append", "(", "loss2", ".", "item", "(", ")", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_corrects", "+=", "(", "torch", ".", "argmax", "(", "y_pred", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_samples_count", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "\n", "\n", "", "val_loss", "=", "[", "]", "\n", "val_loss1", "=", "[", "]", "\n", "val_loss2", "=", "[", "]", "\n", "val_corrects", "=", "0", "\n", "val_samples_count", "=", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "projection_layer", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "_", ",", "val_x", ",", "val_label", "in", "val_loader", ":", "\n", "\t\t\t\t\t", "val_x", "=", "val_x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "val_label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "y_rep", "=", "model", "(", "val_x", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_proj", "=", "projection_layer", "(", "y_rep", ")", "\n", "y_proj", "=", "F", ".", "normalize", "(", "y_proj", ",", "dim", "=", "0", ")", "\n", "\n", "y_pred", "=", "classifier", "(", "y_rep", ")", "\n", "\n", "loss1", ",", "loss2", "=", "loss_fn", "(", "y_proj", ",", "y_pred", ",", "label", ",", "label_vec", ")", "\n", "\n", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n", "val_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "val_loss1", ".", "append", "(", "loss1", ".", "item", "(", ")", ")", "\n", "val_loss2", ".", "append", "(", "loss2", ".", "item", "(", ")", ")", "\n", "\n", "val_corrects", "+=", "(", "torch", ".", "argmax", "(", "y_pred", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_samples_count", "+=", "val_x", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "train_acc", "=", "train_corrects", "/", "train_samples_count", "\n", "val_acc", "=", "val_corrects", "/", "val_samples_count", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "\n", "print", "(", "\"\\nEpoch: {}/{}...\"", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ")", ",", "\"Loss: {:.4f}...\"", ".", "format", "(", "np", ".", "mean", "(", "train_loss", ")", ")", ",", "\"Val Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "val_loss", ")", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train_loss1 is {:.4f} and train_loss2 is {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "train_loss1", ")", ",", "np", ".", "mean", "(", "train_loss2", ")", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'val_loss1 is {:.4f} and val_loss2 is {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "val_loss1", ")", ",", "np", ".", "mean", "(", "val_loss2", ")", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train_acc is {:.4f} and val_acc is {:.4f}'", ".", "format", "(", "train_acc", ",", "val_acc", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "# add validation checkpoint for early stopping here", "\n", "mainModel_stopping", "(", "-", "val_acc", ",", "model", ",", "epoch", "+", "1", ")", "\n", "#proj_stopping(-val_acc, projection_layer, epoch+1)", "\n", "classifier_stopping", "(", "-", "val_acc", ",", "classifier", ",", "epoch", "+", "1", ")", "\n", "if", "mainModel_stopping", ".", "early_stop", ":", "\n", "\t\t\t\t", "print", "(", "\"Early stopping\"", ",", "file", "=", "output_file", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder": [[59, 64], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "hotEncoder", "(", "v", ")", ":", "\n", "\t", "ret_vec", "=", "torch", ".", "zeros", "(", "v", ".", "shape", "[", "0", "]", ",", "config", ".", "class_numbers", ")", ".", "to", "(", "device", ")", "\n", "for", "s", "in", "range", "(", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "ret_vec", "[", "s", "]", "[", "v", "[", "s", "]", "]", "=", "1", "\n", "", "return", "ret_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.cross_entropy_one_hot": [[68, 71], ["target.max", "torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "cross_entropy_one_hot", "(", "input", ",", "target", ")", ":", "\n", "\t", "_", ",", "labels", "=", "target", ".", "max", "(", "dim", "=", "1", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "class_weights", ")", "(", "input", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.train_crossEntropy": [[75, 169], ["open", "utils.utils.EarlyStopping", "utils.utils.EarlyStopping", "print", "print", "print", "print", "print", "print", "range", "print", "print", "model.train", "classifier.train", "model.eval", "classifier.eval", "scheduler.step", "print", "print", "print", "utils.utils.EarlyStopping.", "utils.utils.EarlyStopping.", "print", "print", "optimizer.zero_grad", "x.float().to", "val_label.to.to().unsqueeze", "train_crossEntropyLoss.hotEncoder", "model", "torch.normalize", "classifier", "train_crossEntropyLoss.cross_entropy_one_hot", "loss.backward", "train_loss.append", "optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "print", "loss.item", "val_x.float().to", "val_label.to", "train_crossEntropyLoss.hotEncoder", "model", "torch.normalize", "classifier", "train_crossEntropyLoss.cross_entropy_one_hot", "val_loss.append", "numpy.mean", "numpy.mean", "x.float", "val_label.to.to", "cross_entropy_one_hot.item", "val_x.float", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.train_crossEntropyLoss.hotEncoder", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot"], ["", "def", "train_crossEntropy", "(", ")", ":", "\n", "\t", "num_epochs", "=", "800", "\n", "with", "open", "(", "main_path", "+", "'/results.txt'", ",", "'w'", ",", "1", ")", "as", "output_file", ":", "\n", "\t\t", "mainModel_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "True", ",", "log_path", "=", "main_path", ",", "output_file", "=", "output_file", ")", "\n", "classifier_stopping", "=", "EarlyStopping", "(", "patience", "=", "300", ",", "verbose", "=", "False", ",", "log_path", "=", "classifier_path", ",", "output_file", "=", "output_file", ")", "\n", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'BASELINE'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'transfer - augmentation on both waves and specs - 3 channels'", ",", "file", "=", "output_file", ")", "\n", "if", "config", ".", "ESC_10", ":", "\n", "\t\t\t", "print", "(", "'ESC_10'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "ESC_50", ":", "\n", "\t\t\t", "print", "(", "'ESC_50'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "train_folds", ",", "config", ".", "test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "", "elif", "config", ".", "US8K", ":", "\n", "\t\t\t", "print", "(", "'US8K'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train folds are {} and test fold is {}'", ".", "format", "(", "config", ".", "us8k_train_folds", ",", "config", ".", "us8k_test_fold", ")", ",", "file", "=", "output_file", ")", "\n", "\n", "\n", "", "print", "(", "'number of freq masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "freq_masks", ",", "config", ".", "freq_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'number of time masks are {} and their max length is {}'", ".", "format", "(", "config", ".", "time_masks", ",", "config", ".", "time_masks_width", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'*****'", ",", "file", "=", "output_file", ")", "\n", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\t\t\t", "model", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "train_corrects", "=", "0", "\n", "train_samples_count", "=", "0", "\n", "\n", "for", "_", ",", "x", ",", "label", "in", "train_loader", ":", "\n", "\t\t\t\t", "loss", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "inp", "=", "x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "y_rep", "=", "model", "(", "inp", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_pred", "=", "classifier", "(", "y_rep", ")", "\n", "\n", "loss", "+=", "cross_entropy_one_hot", "(", "y_pred", ",", "label_vec", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_corrects", "+=", "(", "torch", ".", "argmax", "(", "y_pred", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_samples_count", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "", "val_loss", "=", "[", "]", "\n", "val_corrects", "=", "0", "\n", "val_samples_count", "=", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "_", ",", "val_x", ",", "val_label", "in", "val_loader", ":", "\n", "\t\t\t\t\t", "inp", "=", "val_x", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "val_label", ".", "to", "(", "device", ")", "\n", "label_vec", "=", "hotEncoder", "(", "label", ")", "\n", "\n", "y_rep", "=", "model", "(", "inp", ")", "\n", "y_rep", "=", "F", ".", "normalize", "(", "y_rep", ",", "dim", "=", "0", ")", "\n", "\n", "y_pred", "=", "classifier", "(", "y_rep", ")", "\n", "\n", "temp", "=", "cross_entropy_one_hot", "(", "y_pred", ",", "label_vec", ")", "\n", "val_loss", ".", "append", "(", "temp", ".", "item", "(", ")", ")", "\n", "\n", "val_corrects", "+=", "(", "torch", ".", "argmax", "(", "y_pred", ",", "dim", "=", "1", ")", "==", "torch", ".", "argmax", "(", "label_vec", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_samples_count", "+=", "val_x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "train_acc", "=", "train_corrects", "/", "train_samples_count", "\n", "val_acc", "=", "val_corrects", "/", "val_samples_count", "\n", "print", "(", "'\\n'", ",", "file", "=", "output_file", ")", "\n", "print", "(", "\"Epoch: {}/{}...\"", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ")", ",", "\"Loss: {:.4f}...\"", ".", "format", "(", "np", ".", "mean", "(", "train_loss", ")", ")", ",", "\n", "\"Val Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "val_loss", ")", ")", ",", "file", "=", "output_file", ")", "\n", "print", "(", "'train_acc is {:.4f} and val_acc is {:.4f}'", ".", "format", "(", "train_acc", ",", "val_acc", ")", ",", "file", "=", "output_file", ")", "\n", "mainModel_stopping", "(", "-", "val_acc", ",", "main_model", ",", "epoch", "+", "1", ")", "\n", "classifier_stopping", "(", "-", "val_acc", ",", "classifier", ",", "epoch", "+", "1", ")", "\n", "if", "mainModel_stopping", ".", "early_stop", ":", "\n", "\t\t\t\t", "print", "(", "\"Early stopping\"", ",", "file", "=", "output_file", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_US8K.MyDataset.__init__": [[28, 65], ["os.listdir", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.listdir", "dataset_US8K.MyDataset.file_paths.append", "utils.transforms.ToTensor1D", "utils.transforms.RandomScale", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "utils.transforms.FrequencyMask", "utils.transforms.TimeMask", "utils.transforms.ToTensor1D", "utils.transforms.RandomPadding", "utils.transforms.RandomCrop", "torchvision.transforms.ToTensor", "dataset_US8K.MyDataset.file_paths.append", "str", "name.split", "str", "name.split", "str", "str"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "train", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "root", "=", "'./data/US8K/audio/'", "\n", "self", ".", "train", "=", "train", "\n", "\n", "self", ".", "file_paths", "=", "[", "]", "#only includes the name of the fold and name of the file, like: 'fold2/4201-3-0-0.wav'", "\n", "\n", "if", "train", ":", "\n", "\t\t\t", "for", "f", "in", "config", ".", "train_folds", ":", "\n", "\t\t\t\t", "file_names", "=", "os", ".", "listdir", "(", "self", ".", "root", "+", "'fold'", "+", "str", "(", "f", ")", "+", "'/'", ")", "\n", "\n", "for", "name", "in", "file_names", ":", "\n", "\t\t\t\t\t", "if", "name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'wav'", ":", "\n", "\t\t\t\t\t\t", "self", ".", "file_paths", ".", "append", "(", "'fold'", "+", "str", "(", "f", ")", "+", "'/'", "+", "name", ")", "\n", "", "", "", "", "else", ":", "\n", "\t\t\t", "file_names", "=", "os", ".", "listdir", "(", "self", ".", "root", "+", "'fold'", "+", "str", "(", "config", ".", "test_fold", "[", "0", "]", ")", "+", "'/'", ")", "\n", "for", "name", "in", "file_names", ":", "\n", "\t\t\t\t", "if", "name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'wav'", ":", "\n", "\t\t\t\t\t", "self", ".", "file_paths", ".", "append", "(", "'fold'", "+", "str", "(", "config", ".", "test_fold", "[", "0", "]", ")", "+", "'/'", "+", "name", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "train", ":", "\n", "\t\t\t", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomScale", "(", "max_scale", "=", "1.25", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "176400", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "176400", ")", "]", ")", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "FrequencyMask", "(", "max_width", "=", "config", ".", "freq_masks_width", ",", "numbers", "=", "config", ".", "freq_masks", ")", ",", "\n", "transforms", ".", "TimeMask", "(", "max_width", "=", "config", ".", "time_masks_width", ",", "numbers", "=", "config", ".", "time_masks", ")", "]", ")", "\n", "\n", "\n", "", "else", ":", "#for test", "\n", "\t\t\t", "self", ".", "wave_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor1D", "(", ")", ",", "\n", "transforms", ".", "RandomPadding", "(", "out_len", "=", "176400", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_len", "=", "176400", ")", "]", ")", "\n", "\n", "self", ".", "spec_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_US8K.MyDataset.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_US8K.MyDataset.__getitem__": [[72, 110], ["librosa.load", "int", "[].min", "[].max", "dataset_US8K.MyDataset.wave_transforms", "utils.transforms.scale.squeeze_", "librosa.feature.melspectrogram", "librosa.power_to_db", "dataset_US8K.MyDataset.spec_transforms", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.abs", "utils.transforms.scale", "utils.transforms.scale.numpy", "file_path.split", "utils.transforms.scale.max", "utils.transforms.scale.min", "utils.transforms.scale.max", "utils.transforms.scale.nonzero", "utils.transforms.scale.nonzero"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.scale"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "file_path", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "path", "=", "self", ".", "root", "+", "file_path", "\n", "\n", "wave", ",", "rate", "=", "librosa", ".", "load", "(", "path", ",", "sr", "=", "44100", ")", "\n", "\n", "if", "wave", ".", "ndim", ">", "1", ":", "\n", "\t\t\t", "wave", "=", "(", "wave", "[", "0", ",", ":", "]", "+", "wave", "[", "1", ",", ":", "]", ")", "/", "2", "\n", "\n", "", "class_id", "=", "int", "(", "file_path", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "\n", "\n", "if", "wave", ".", "ndim", "==", "1", ":", "\n", "\t\t\t", "wave", "=", "wave", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# normalizing waves to [-1, 1]", "\n", "", "if", "np", ".", "abs", "(", "wave", ".", "max", "(", ")", ")", ">", "1.0", ":", "\n", "\t\t\t", "wave", "=", "transforms", ".", "scale", "(", "wave", ",", "wave", ".", "min", "(", ")", ",", "wave", ".", "max", "(", ")", ",", "-", "1.0", ",", "1.0", ")", "\n", "", "wave", "=", "wave", ".", "T", "*", "32768.0", "\n", "\n", "#Remove silent sections", "\n", "start", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "min", "(", ")", "\n", "end", "=", "wave", ".", "nonzero", "(", ")", "[", "1", "]", ".", "max", "(", ")", "\n", "wave", "=", "wave", "[", ":", ",", "start", ":", "end", "+", "1", "]", "\n", "\n", "wave", "=", "self", ".", "wave_transforms", "(", "wave", ")", "\n", "wave", ".", "squeeze_", "(", "0", ")", "\n", "\n", "s", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "wave", ".", "numpy", "(", ")", ",", "sr", "=", "rate", ",", "n_mels", "=", "128", ",", "n_fft", "=", "1024", ",", "hop_length", "=", "512", ")", "\n", "\n", "log_s", "=", "librosa", ".", "power_to_db", "(", "s", ",", "ref", "=", "np", ".", "max", ")", "\n", "\n", "log_s", "=", "self", ".", "spec_transforms", "(", "log_s", ")", "\n", "\n", "#creating 3 channels by copying log_s1 3 times ", "\n", "spec", "=", "torch", ".", "cat", "(", "(", "log_s", ",", "log_s", ",", "log_s", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "file_path", ",", "spec", ",", "class_id", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.None.dataset_US8K.create_generators": [[114, 124], ["dataset_US8K.MyDataset", "dataset_US8K.MyDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "create_generators", "(", ")", ":", "\n", "\n", "\t", "train_dataset", "=", "MyDataset", "(", "train", "=", "True", ")", "\n", "test_dataset", "=", "MyDataset", "(", "train", "=", "False", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "10", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "10", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.ToTensor1D.__call__": [[21, 25], ["super().__call__", "super().__call__.squeeze_"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.__call__"], ["    ", "def", "__call__", "(", "self", ",", "tensor", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "tensor_2d", "=", "super", "(", "ToTensor1D", ",", "self", ")", ".", "__call__", "(", "tensor", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "return", "tensor_2d", ".", "squeeze_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomNoise.__init__": [[27, 32], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_noise", "=", "0.0", ",", "max_noise", "=", "0.05", ")", ":", "#0.002, 0.01", "\n", "        ", "super", "(", "RandomNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "min_noise", "=", "min_noise", "\n", "self", ".", "max_noise", "=", "max_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomNoise.addNoise": [[33, 39], ["random.uniform", "torch.from_numpy", "numpy.random.normal"], "methods", ["None"], ["", "def", "addNoise", "(", "self", ",", "wave", ")", ":", "\n", "        ", "noise_val", "=", "random", ".", "uniform", "(", "self", ".", "min_noise", ",", "self", ".", "max_noise", ")", "\n", "noise", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_val", ",", "wave", ".", "shape", "[", "0", "]", ")", ")", "\n", "noisy_wave", "=", "wave", "+", "noise", "\n", "\n", "return", "noisy_wave", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomNoise.__call__": [[40, 42], ["transforms.RandomNoise.addNoise"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomNoise.addNoise"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "addNoise", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomScale.__init__": [[47, 51], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_scale", ":", "float", "=", "1.25", ")", ":", "\n", "        ", "super", "(", "RandomScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomScale.random_scale": [[52, 68], ["numpy.power", "int", "torch.arange().div_", "torch.arange().div_.clone().type", "torch.min", "numpy.random.uniform", "torch.full_like", "torch.arange().div_.clone().type.type", "torch.arange", "torch.arange().div_.clone", "torch.arange().div_.type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_scale", "(", "max_scale", ":", "float", ",", "signal", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "scaling", "=", "np", ".", "power", "(", "max_scale", ",", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", ")", "#between 1.25**(-1) and 1.25**(1)", "\n", "output_size", "=", "int", "(", "signal", ".", "shape", "[", "-", "1", "]", "*", "scaling", ")", "\n", "ref", "=", "torch", ".", "arange", "(", "output_size", ",", "device", "=", "signal", ".", "device", ",", "dtype", "=", "signal", ".", "dtype", ")", ".", "div_", "(", "scaling", ")", "\n", "\n", "# ref1 is of size output_size", "\n", "ref1", "=", "ref", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "int64", ")", "\n", "ref2", "=", "torch", ".", "min", "(", "ref1", "+", "1", ",", "torch", ".", "full_like", "(", "ref1", ",", "signal", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "\n", "r", "=", "ref", "-", "ref1", ".", "type", "(", "ref", ".", "type", "(", ")", ")", "\n", "\n", "scaled_signal", "=", "signal", "[", "...", ",", "ref1", "]", "*", "(", "1", "-", "r", ")", "+", "signal", "[", "...", ",", "ref2", "]", "*", "r", "\n", "\n", "\n", "return", "scaled_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomScale.__call__": [[69, 71], ["transforms.RandomScale.random_scale"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomScale.random_scale"], ["", "def", "__call__", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "random_scale", "(", "self", ".", "max_scale", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomCrop.__init__": [[77, 82], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_len", ":", "int", "=", "44100", ",", "train", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "RandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_len", "=", "out_len", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomCrop.random_crop": [[83, 101], ["output.float().std", "output.float().std", "numpy.random.randint", "int", "signal.float().std", "round", "output.float", "output.float", "signal.float"], "methods", ["None"], ["", "def", "random_crop", "(", "self", ",", "signal", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "signal", ".", "shape", "[", "-", "1", "]", "-", "self", ".", "out_len", ")", "\n", "", "else", ":", "\n", "            ", "left", "=", "int", "(", "round", "(", "0.5", "*", "(", "signal", ".", "shape", "[", "-", "1", "]", "-", "self", ".", "out_len", ")", ")", ")", "\n", "\n", "", "orig_std", "=", "signal", ".", "float", "(", ")", ".", "std", "(", ")", "*", "0.5", "\n", "output", "=", "signal", "[", "...", ",", "left", ":", "left", "+", "self", ".", "out_len", "]", "\n", "\n", "out_std", "=", "output", ".", "float", "(", ")", ".", "std", "(", ")", "\n", "if", "out_std", "<", "orig_std", ":", "\n", "            ", "output", "=", "signal", "[", "...", ",", ":", "self", ".", "out_len", "]", "\n", "\n", "", "new_out_std", "=", "output", ".", "float", "(", ")", ".", "std", "(", ")", "\n", "if", "orig_std", ">", "new_out_std", ">", "out_std", ":", "\n", "            ", "output", "=", "signal", "[", "...", ",", "-", "self", ".", "out_len", ":", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomCrop.__call__": [[102, 104], ["transforms.RandomCrop.random_crop"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomCrop.random_crop"], ["", "def", "__call__", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "random_crop", "(", "x", ")", "if", "x", ".", "shape", "[", "-", "1", "]", ">", "self", ".", "out_len", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomPadding.__init__": [[108, 113], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_len", ":", "int", "=", "88200", ",", "train", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "RandomPadding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_len", "=", "out_len", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomPadding.random_pad": [[114, 132], ["signal[].float().mean().to", "signal[].float().mean().to", "torch.cat", "numpy.random.randint", "int", "round", "signal[].float().mean", "signal[].float().mean", "torch.zeros().fill_", "torch.zeros().fill_", "signal[].float", "signal[].float", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "random_pad", "(", "self", ",", "signal", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "out_len", "-", "signal", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "left", "=", "int", "(", "round", "(", "0.5", "*", "(", "self", ".", "out_len", "-", "signal", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "", "right", "=", "self", ".", "out_len", "-", "(", "left", "+", "signal", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "pad_value_left", "=", "signal", "[", "...", ",", "0", "]", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "to", "(", "signal", ".", "dtype", ")", "\n", "pad_value_right", "=", "signal", "[", "...", ",", "-", "1", "]", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "to", "(", "signal", ".", "dtype", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "\n", "torch", ".", "zeros", "(", "signal", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "left", ",", ")", ",", "dtype", "=", "signal", ".", "dtype", ",", "device", "=", "signal", ".", "device", ")", ".", "fill_", "(", "pad_value_left", ")", ",", "\n", "signal", ",", "\n", "torch", ".", "zeros", "(", "signal", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "right", ",", ")", ",", "dtype", "=", "signal", ".", "dtype", ",", "device", "=", "signal", ".", "device", ")", ".", "fill_", "(", "pad_value_right", ")", "\n", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomPadding.__call__": [[133, 135], ["transforms.RandomPadding.random_pad"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.RandomPadding.random_pad"], ["", "def", "__call__", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "random_pad", "(", "x", ")", "if", "x", ".", "shape", "[", "-", "1", "]", "<", "self", ".", "out_len", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.FrequencyMask.__init__": [[140, 145], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_width", ",", "numbers", ")", ":", "\n", "        ", "super", "(", "FrequencyMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_width", "=", "max_width", "\n", "self", ".", "numbers", "=", "numbers", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.FrequencyMask.addFreqMask": [[146, 156], ["range", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "addFreqMask", "(", "self", ",", "wave", ")", ":", "\n", "#print(wave.shape)", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "numbers", ")", ":", "\n", "#choose the length of mask", "\n", "            ", "mask_len", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_width", ")", "\n", "start", "=", "random", ".", "randint", "(", "0", ",", "wave", ".", "shape", "[", "1", "]", "-", "mask_len", ")", "#start of the mask", "\n", "end", "=", "start", "+", "mask_len", "\n", "wave", "[", ":", ",", "start", ":", "end", ",", ":", "]", "=", "0", "\n", "\n", "", "return", "wave", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.FrequencyMask.__call__": [[157, 159], ["transforms.FrequencyMask.addFreqMask"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.FrequencyMask.addFreqMask"], ["", "def", "__call__", "(", "self", ",", "wave", ")", ":", "\n", "        ", "return", "self", ".", "addFreqMask", "(", "wave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.TimeMask.__init__": [[163, 168], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_width", ",", "numbers", ")", ":", "\n", "        ", "super", "(", "TimeMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_width", "=", "max_width", "\n", "self", ".", "numbers", "=", "numbers", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.TimeMask.addTimeMask": [[170, 180], ["range", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "addTimeMask", "(", "self", ",", "wave", ")", ":", "\n", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "numbers", ")", ":", "\n", "#choose the length of mask", "\n", "            ", "mask_len", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_width", ")", "\n", "start", "=", "random", ".", "randint", "(", "0", ",", "wave", ".", "shape", "[", "2", "]", "-", "mask_len", ")", "#start of the mask", "\n", "end", "=", "start", "+", "mask_len", "\n", "wave", "[", ":", ",", ":", ",", "start", ":", "end", "]", "=", "0", "\n", "\n", "", "return", "wave", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.TimeMask.__call__": [[181, 183], ["transforms.TimeMask.addTimeMask"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.TimeMask.addTimeMask"], ["", "def", "__call__", "(", "self", ",", "wave", ")", ":", "\n", "        ", "return", "self", ".", "addTimeMask", "(", "wave", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.transforms.scale": [[11, 17], ["None"], "function", ["None"], ["def", "scale", "(", "old_value", ",", "old_min", ",", "old_max", ",", "new_min", ",", "new_max", ")", ":", "\n", "    ", "old_range", "=", "(", "old_max", "-", "old_min", ")", "\n", "new_range", "=", "(", "new_max", "-", "new_min", ")", "\n", "new_value", "=", "(", "(", "(", "old_value", "-", "old_min", ")", "*", "new_range", ")", "/", "old_range", ")", "+", "new_min", "\n", "\n", "return", "new_value", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.__init__": [[7, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "log_path", "=", "''", ",", "output_file", "=", "'./results.txt'", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\tpatience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n\t\tverbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n\t\tdelta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n\t\t\"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "output_file", "=", "output_file", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.__call__": [[28, 43], ["utils.EarlyStopping.save_checkpoint", "print", "utils.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ",", "epoch", ")", ":", "\n", "\n", "\t\t", "score", "=", "-", "val_loss", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "\t\t\t", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "epoch", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "-", "self", ".", "delta", ":", "\n", "\t\t\t", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ",", "file", "=", "self", ".", "output_file", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "\t\t\t\t", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "epoch", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.EarlyStopping.save_checkpoint": [[44, 51], ["torch.save", "print", "model.state_dict", "os.path.join"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ",", "epoch", ")", ":", "\n", "\t\t", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ",", "file", "=", "self", ".", "output_file", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "'checkpoint.pt'", ")", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.WarmUpStepLR.__init__": [[57, 65], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["\t", "def", "__init__", "(", "self", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "cold_epochs", ":", "int", ",", "warm_epochs", ":", "int", ",", "step_size", ":", "int", ",", "\n", "gamma", ":", "float", "=", "0.1", ",", "last_epoch", ":", "int", "=", "-", "1", ")", ":", "\n", "\n", "\t\t", "super", "(", "WarmUpStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ",", "last_epoch", "=", "last_epoch", ")", "\n", "self", ".", "cold_epochs", "=", "cold_epochs", "\n", "self", ".", "warm_epochs", "=", "warm_epochs", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.WarmUpStepLR.get_lr": [[68, 80], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "last_epoch", "<", "self", ".", "cold_epochs", ":", "\n", "\t\t\t", "return", "[", "base_lr", "*", "0.1", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "elif", "self", ".", "last_epoch", "<", "self", ".", "cold_epochs", "+", "self", ".", "warm_epochs", ":", "\n", "\t\t\t", "return", "[", "\n", "base_lr", "*", "0.1", "+", "(", "1", "+", "self", ".", "last_epoch", "-", "self", ".", "cold_epochs", ")", "*", "0.9", "*", "base_lr", "/", "self", ".", "warm_epochs", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "[", "\n", "base_lr", "*", "self", ".", "gamma", "**", "(", "(", "self", ".", "last_epoch", "-", "self", ".", "cold_epochs", "-", "self", ".", "warm_epochs", ")", "//", "self", ".", "step_size", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.WarmUpExponentialLR.__init__": [[85, 94], ["utils.WarmUpStepLR.__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["\t", "def", "__init__", "(", "self", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "cold_epochs", ":", "int", ",", "warm_epochs", ":", "int", ",", "\n", "gamma", ":", "float", "=", "0.1", ",", "last_epoch", ":", "int", "=", "-", "1", ")", ":", "\n", "\n", "\t\t", "self", ".", "cold_epochs", "=", "cold_epochs", "\n", "self", ".", "warm_epochs", "=", "warm_epochs", "\n", "self", ".", "step_size", "=", "1", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "super", "(", "WarmUpStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.utils.utils.calculateClassInfo": [[98, 155], ["torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "range", "plt.figure", "plt.figure.add_subplot", "plt.title", "plt.imshow", "plt.colorbar", "plt.figure.add_subplot", "plt.title", "plt.bar", "plt.figure.add_subplot", "plt.title", "plt.imshow", "plt.colorbar", "plt.figure.add_subplot", "plt.title", "plt.bar", "plt.savefig", "plt.clf", "plt.close", "torch.mean", "torch.mean", "range", "torch.std", "torch.norm", "torch.std", "torch.norm", "torch.zeros.numpy", "range", "torch.zeros.numpy", "torch.zeros.numpy", "range", "torch.zeros.numpy", "torch.dist", "torch.dist", "float", "float", "float", "float", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "str"], "function", ["None"], ["", "", "def", "calculateClassInfo", "(", "class_to_representations", ",", "class_to_projections", ",", "epoch", ")", ":", "\n", "\t", "class_to_repMeans", "=", "{", "}", "# key is the class_id and values are mean vector for each class", "\n", "class_to_projMeans", "=", "{", "}", "\n", "\n", "for", "class_id", "in", "class_to_representations", ":", "\n", "\t\t", "class_to_repMeans", "[", "class_id", "]", "=", "torch", ".", "mean", "(", "class_to_representations", "[", "class_id", "]", ",", "dim", "=", "0", ")", "\n", "class_to_projMeans", "[", "class_id", "]", "=", "torch", ".", "mean", "(", "class_to_projections", "[", "class_id", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "rep_distances", "=", "torch", ".", "zeros", "(", "50", ",", "50", ")", "\n", "proj_distances", "=", "torch", ".", "zeros", "(", "50", ",", "50", ")", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "50", ")", ":", "\n", "\t\t\t", "rep_distances", "[", "i", "]", "[", "j", "]", "=", "torch", ".", "dist", "(", "class_to_repMeans", "[", "i", "]", ",", "class_to_repMeans", "[", "j", "]", ")", "\n", "proj_distances", "[", "i", "]", "[", "j", "]", "=", "torch", ".", "dist", "(", "class_to_projMeans", "[", "i", "]", ",", "class_to_projMeans", "[", "j", "]", ")", "\n", "\n", "\n", "#calculating std for each class", "\n", "", "", "rep_std", "=", "torch", ".", "zeros", "(", "50", ")", "\n", "proj_std", "=", "torch", ".", "zeros", "(", "50", ")", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "\t\t", "rep_std_vec", "=", "torch", ".", "std", "(", "class_to_representations", "[", "i", "]", ",", "dim", "=", "0", ")", "\n", "rep_std", "[", "i", "]", "=", "torch", ".", "norm", "(", "rep_std_vec", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "\n", "proj_std_vec", "=", "torch", ".", "std", "(", "class_to_projections", "[", "i", "]", ",", "dim", "=", "0", ")", "\n", "proj_std", "[", "i", "]", "=", "torch", ".", "norm", "(", "proj_std_vec", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "\n", "fig", ".", "add_subplot", "(", "221", ")", "\n", "plt", ".", "title", "(", "'distance between means of {} features in representation space with average of {:.4f}'", ".", "format", "(", "\n", "class_to_representations", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "float", "(", "rep_distances", ".", "mean", "(", ")", ")", ")", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "imshow", "(", "rep_distances", ".", "numpy", "(", ")", ",", "cmap", "=", "'Blues'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "fig", ".", "add_subplot", "(", "222", ")", "\n", "plt", ".", "title", "(", "'std of {} features in representation space with average of {:.4f}'", ".", "format", "(", "\n", "class_to_representations", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "float", "(", "rep_std", ".", "mean", "(", ")", ")", ")", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "bar", "(", "range", "(", "50", ")", ",", "rep_std", ".", "numpy", "(", ")", ",", "0.5", ")", "\n", "\n", "\n", "fig", ".", "add_subplot", "(", "223", ")", "\n", "plt", ".", "title", "(", "'distance between means of {} features in projection space with average of {:.4f}'", ".", "format", "(", "\n", "class_to_projections", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "float", "(", "proj_distances", ".", "mean", "(", ")", ")", ")", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "imshow", "(", "proj_distances", ".", "numpy", "(", ")", ",", "cmap", "=", "'Blues'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "fig", ".", "add_subplot", "(", "224", ")", "\n", "plt", ".", "title", "(", "'std of {} features in projection spacewith average of {:.4f}'", ".", "format", "(", "\n", "class_to_projections", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "float", "(", "proj_std", ".", "mean", "(", ")", ")", ")", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "bar", "(", "range", "(", "50", ")", ",", "proj_std", ".", "numpy", "(", ")", ",", "0.5", ")", "\n", "\n", "\n", "plt", ".", "savefig", "(", "fig_path", "+", "'epoch_'", "+", "str", "(", "epoch", ")", "+", "'.png'", ",", "dpi", "=", "175", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.__init__": [[8, 12], ["torch.Module.__init__", "loss_fn.contrastive_loss.SupConLoss"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["\t", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "temperature", "=", "0.07", ")", ":", "\n", "\t\t", "super", "(", "HybridLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "contrastive_loss", "=", "contrastive_loss", ".", "SupConLoss", "(", "temperature", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot": [[13, 16], ["target.max", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "cross_entropy_one_hot", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\t\t", "_", ",", "labels", "=", "target", ".", "max", "(", "dim", "=", "1", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "input", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.forward": [[18, 24], ["hybrid_loss.HybridLoss.contrastive_loss", "hybrid_loss.HybridLoss.cross_entropy_one_hot", "y_proj.unsqueeze", "label.squeeze"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.hybrid_loss.HybridLoss.cross_entropy_one_hot"], ["", "def", "forward", "(", "self", ",", "y_proj", ",", "y_pred", ",", "label", ",", "label_vec", ")", ":", "\n", "\n", "\t\t", "contrastiveLoss", "=", "self", ".", "contrastive_loss", "(", "y_proj", ".", "unsqueeze", "(", "1", ")", ",", "label", ".", "squeeze", "(", "1", ")", ")", "\n", "entropyLoss", "=", "self", ".", "cross_entropy_one_hot", "(", "y_pred", ",", "label_vec", ")", "\n", "\n", "return", "contrastiveLoss", "*", "self", ".", "alpha", ",", "entropyLoss", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.contrastive_loss.SupConLoss.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["def", "__init__", "(", "self", ",", "temperature", "=", "0.07", ")", ":", "\n", "\t\t", "super", "(", "SupConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.loss_fn.contrastive_loss.SupConLoss.forward": [[19, 100], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.float().to.float().to.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "loss.view().mean.view().mean.view().mean", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "ValueError", "len", "features.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "mask.float().to.float().to.sum", "loss.view().mean.view().mean.view", "labels.contiguous().view.contiguous().view.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "exp_logits.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "labels.contiguous().view.contiguous().view.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Compute loss for model. If both `labels` and `mask` are None,\n\t\tit degenerates to SimCLR unsupervised loss:\n\t\thttps://arxiv.org/pdf/2002.05709.pdf\n\t\tArgs:\n\t\tfeatures: hidden vector of shape [bsz, n_views, ...].\n\t\tlabels: ground truth of shape [bsz].\n\t\tmask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j\n\t\thas the same class as sample i. Can be asymmetric.\n\t\tReturns:\n\t\tA loss scalar.\n\t\t\"\"\"", "\n", "device", "=", "(", "torch", ".", "device", "(", "'cuda'", ")", "\n", "if", "features", ".", "is_cuda", "\n", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "3", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_views, ...], at least 3 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "3", ":", "\n", "\t\t\t", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "\t\t\t", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "\t\t\t", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "\n", "#here mask is of shape [bsz, bsz] and is one for one for [i,j] where label[i]=label[j]", "\n", "", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "T", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "contrast_count", "=", "features", ".", "shape", "[", "1", "]", "#number of positives per sample", "\n", "\n", "#contrast_features separates the features of different views of the samples and puts them in rows, so features of", "\n", "# shape of [50, 2, 128] becomes [100, 128]. we do this to be to calculate dot-product between each two views", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "\n", "# compute logits - calculates the dot product of every two vectors divided by temperature", "\n", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "torch", ".", "matmul", "(", "anchor_feature", ",", "contrast_feature", ".", "T", ")", ",", "self", ".", "temperature", ")", "\n", "\n", "# for numerical stability  (some kind of normalization!)", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "anchor_dot_contrast", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "logits", "=", "anchor_dot_contrast", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "\n", "\n", "# tile mask as much as number of positives per sample", "\n", "mask", "=", "mask", ".", "repeat", "(", "anchor_count", ",", "contrast_count", ")", "\n", "# mask-out self-contrast cases", "\n", "logits_mask", "=", "torch", ".", "scatter", "(", "torch", ".", "ones_like", "(", "mask", ")", ",", "1", ",", "\n", "torch", ".", "arange", "(", "batch_size", "*", "anchor_count", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ",", "0", ")", "\n", "\n", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# compute log_prob", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "\n", "eps", "=", "1e-30", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "1", ")", "/", "(", "mask", ".", "sum", "(", "1", ")", "+", "eps", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "mean_log_prob_pos", "\n", "\n", "\n", "loss", "=", "loss", ".", "view", "(", "anchor_count", ",", "batch_size", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_classifier.Classifier.__init__": [[10, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "config", ".", "class_numbers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_classifier.Classifier.forward": [[17, 21], ["model_classifier.Classifier.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__": [[10, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alireza-nasiri_SoundCLR.models.model_projection.ProjectionModel.forward": [[15, 19], ["model_projection.ProjectionModel.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]]}