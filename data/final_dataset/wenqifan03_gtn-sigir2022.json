{"home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.world.cprint": [[91, 93], ["print"], "function", ["None"], ["def", "cprint", "(", "words", ":", "str", ")", ":", "\n", "    ", "print", "(", "f\"\\033[0;30;43m{words}\\033[0m\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.__init__": [[49, 80], ["torch_geometric.nn.conv.MessagePassing.__init__"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__init__"], ["def", "__init__", "(", "self", ",", "K", ":", "int", ",", "alpha", ":", "float", ",", "dropout", ":", "float", "=", "0.", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "\n", "add_self_loops_l1", ":", "bool", "=", "True", ",", "\n", "normalize", ":", "bool", "=", "True", ",", "\n", "mode", ":", "str", "=", "None", ",", "\n", "node_num", ":", "int", "=", "None", ",", "\n", "num_classes", ":", "int", "=", "None", ",", "\n", "args", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "GeneralPropagation", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "dropout", "=", "args", ".", "prop_dropout", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "add_self_loops_l1", "=", "add_self_loops_l1", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "self", ".", "_cached_inc", "=", "None", "\n", "\n", "self", ".", "node_num", "=", "node_num", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "max_value", "=", "None", "\n", "self", ".", "debug", "=", "self", ".", "args", ".", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.reset_parameters": [[81, 85], ["None"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "self", ".", "_cached_inc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.get_incident_matrix": [[86, 100], ["edge_index.storage.row", "edge_index.storage.col", "edge_index.storage.row.numel", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch_sparse.SparseTensor", "edge_index.sizes", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_incident_matrix", "(", "self", ",", "edge_index", ":", "Adj", ")", ":", "\n", "        ", "size", "=", "edge_index", ".", "sizes", "(", ")", "[", "1", "]", "\n", "row_index", "=", "edge_index", ".", "storage", ".", "row", "(", ")", "\n", "col_index", "=", "edge_index", ".", "storage", ".", "col", "(", ")", "\n", "mask", "=", "row_index", ">=", "col_index", "\n", "row_index", "=", "row_index", "[", "mask", "]", "\n", "col_index", "=", "col_index", "[", "mask", "]", "\n", "edge_num", "=", "row_index", ".", "numel", "(", ")", "\n", "row", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "edge_num", ")", ",", "torch", ".", "arange", "(", "edge_num", ")", "]", ")", ".", "cuda", "(", ")", "\n", "col", "=", "torch", ".", "cat", "(", "[", "row_index", ",", "col_index", "]", ")", "\n", "value", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "edge_num", ")", ",", "-", "1", "*", "torch", ".", "ones", "(", "edge_num", ")", "]", ")", ".", "cuda", "(", ")", "\n", "inc", "=", "SparseTensor", "(", "row", "=", "row", ",", "rowptr", "=", "None", ",", "col", "=", "col", ",", "value", "=", "value", ",", "\n", "sparse_sizes", "=", "(", "edge_num", ",", "size", ")", ")", "\n", "return", "inc", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.inc_norm": [[101, 111], ["torch_sparse.sum", "torch_sparse.sum.pow", "torch_sparse.sum.pow.masked_fill_", "torch_sparse.mul", "torch_sparse.fill_diag", "torch_sparse.remove_diag", "torch_sparse.sum.pow.view", "float"], "methods", ["None"], ["", "def", "inc_norm", "(", "self", ",", "inc", ",", "edge_index", ",", "add_self_loops", ",", "normalize_para", "=", "-", "0.5", ")", ":", "\n", "        ", "if", "add_self_loops", ":", "\n", "            ", "edge_index", "=", "fill_diag", "(", "edge_index", ",", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "edge_index", "=", "remove_diag", "(", "edge_index", ")", "\n", "", "deg", "=", "sum", "(", "edge_index", ",", "dim", "=", "1", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0.", ")", "\n", "inc", "=", "mul", "(", "inc", ",", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", ")", "## col-wise", "\n", "return", "inc", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.check_inc": [[112, 128], ["edge_index.nnz", "inc.cpu.cpu.cpu", "edge_index.cpu().to_dense", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch_sparse.sum().cpu", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "edge_index.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "edge_index.sizes", "torch_sparse.sum", "inc.cpu.cpu.t"], "methods", ["None"], ["", "def", "check_inc", "(", "self", ",", "edge_index", ",", "inc", ",", "normalize", "=", "False", ")", ":", "\n", "# return None  ## not checking it", "\n", "        ", "nnz", "=", "edge_index", ".", "nnz", "(", ")", "\n", "if", "normalize", ":", "\n", "            ", "deg", "=", "torch", ".", "eye", "(", "edge_index", ".", "sizes", "(", ")", "[", "0", "]", ")", "# .cuda()", "\n", "", "else", ":", "\n", "            ", "deg", "=", "sum", "(", "edge_index", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "deg", "=", "torch", ".", "diag", "(", "deg", ")", "\n", "", "inc", "=", "inc", ".", "cpu", "(", ")", "\n", "lap", "=", "(", "inc", ".", "t", "(", ")", "@", "inc", ")", ".", "to_dense", "(", ")", "\n", "adj", "=", "edge_index", ".", "cpu", "(", ")", ".", "to_dense", "(", ")", "\n", "\n", "lap2", "=", "deg", "-", "adj", "\n", "diff", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "lap2", "-", "lap", ")", ")", "/", "nnz", "\n", "# import ipdb; ipdb.set_trace()", "\n", "assert", "diff", "<", "0.000001", ",", "f'error: {diff} need to make sure L=B^TB'", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.forward": [[129, 195], ["time.time", "gtn_propagation.GeneralPropagation.gtn_forward", "isinstance", "ValueError", "isinstance", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "x.size", "gtn_propagation.GeneralPropagation.get_incident_matrix", "gtn_propagation.GeneralPropagation.inc_norm", "gtn_propagation.GeneralPropagation.check_inc", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "gtn_propagation.GeneralPropagation.check_inc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "gtn_propagation.GeneralPropagation.doubly_stochastic_norm", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "x.size", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gtn_propagation.GeneralPropagation.sizes", "x.size"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.gtn_forward", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.get_incident_matrix", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.inc_norm", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.check_inc", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.check_inc"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Adj", ",", "x_idx", ":", "Tensor", "=", "None", ",", "\n", "edge_weight", ":", "OptTensor", "=", "None", ",", "mode", "=", "None", ",", "niter", "=", "None", ",", "\n", "data", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "edge_index2", "=", "edge_index", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Only support SparseTensor now'", ")", "\n", "cache", "=", "self", ".", "_cached_edge_index", "\n", "if", "cache", "is", "None", ":", "\n", "                    ", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "False", ",", "\n", "self", ".", "add_self_loops", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "self", ".", "cached", ":", "\n", "                        ", "self", ".", "_cached_edge_index", "=", "(", "edge_index", ",", "edge_weight", ")", "\n", "", "", "else", ":", "\n", "                    ", "edge_index", ",", "edge_weight", "=", "cache", "[", "0", "]", ",", "cache", "[", "1", "]", "\n", "\n", "", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "## first cache incident_matrix (before normalizing edge_index)", "\n", "                ", "cache", "=", "self", ".", "_cached_inc", "\n", "if", "cache", "is", "None", ":", "\n", "                    ", "incident_matrix", "=", "self", ".", "get_incident_matrix", "(", "edge_index", "=", "edge_index", ")", "\n", "if", "not", "self", ".", "args", ".", "ogb", ":", "\n", "                        ", "self", ".", "check_inc", "(", "edge_index", "=", "edge_index", ",", "inc", "=", "incident_matrix", ",", "normalize", "=", "False", ")", "\n", "", "incident_matrix", "=", "self", ".", "inc_norm", "(", "inc", "=", "incident_matrix", ",", "edge_index", "=", "edge_index", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops_l1", ",", "\n", "normalize_para", "=", "self", ".", "args", ".", "incnorm_para", ")", "\n", "if", "not", "self", ".", "args", ".", "ogb", ":", "\n", "                        ", "edge_index_C", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "False", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops_l1", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "self", ".", "check_inc", "(", "edge_index", "=", "edge_index_C", ",", "inc", "=", "incident_matrix", ",", "normalize", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "                        ", "self", ".", "_cached_inc", "=", "incident_matrix", "\n", "self", ".", "init_z", "=", "torch", ".", "zeros", "(", "(", "incident_matrix", ".", "sizes", "(", ")", "[", "0", "]", ",", "x", ".", "size", "(", ")", "[", "-", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "incident_matrix", "=", "self", ".", "_cached_inc", "\n", "\n", "", "cache", "=", "self", ".", "_cached_adj_t", "\n", "if", "cache", "is", "None", ":", "\n", "# if True:", "\n", "                    ", "if", "False", ":", "\n", "                        ", "edge_index", "=", "self", ".", "doubly_stochastic_norm", "(", "edge_index", ",", "x", ",", "self", ".", "add_self_loops", ")", "##", "\n", "", "else", ":", "\n", "                        ", "edge_index", "=", "gcn_norm", "(", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "False", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "                        ", "self", ".", "_cached_adj_t", "=", "edge_index", "\n", "", "", "else", ":", "\n", "                    ", "edge_index", "=", "cache", "\n", "\n", "", "", "", "K_", "=", "self", ".", "K", "if", "niter", "is", "None", "else", "niter", "\n", "if", "mode", "==", "None", ":", "mode", "=", "self", ".", "mode", "\n", "assert", "edge_weight", "is", "None", "\n", "if", "K_", "<=", "0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "hh", "=", "x", "\n", "\n", "x", ",", "xs", "=", "self", ".", "gtn_forward", "(", "x", "=", "x", ",", "hh", "=", "hh", ",", "incident_matrix", "=", "incident_matrix", ",", "K", "=", "K_", ")", "\n", "return", "x", ",", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.gtn_forward": [[196, 229], ["range", "gtn_propagation.GeneralPropagation.init_z.detach", "gtn_propagation.GeneralPropagation.proximal_l1_conjugate", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "incident_matrix.t", "incident_matrix.t"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.proximal_l1_conjugate"], ["", "def", "gtn_forward", "(", "self", ",", "x", ",", "hh", ",", "K", ",", "incident_matrix", ")", ":", "\n", "        ", "lambda2", "=", "self", ".", "args", ".", "lambda2", "\n", "beta", "=", "self", ".", "args", ".", "beta", "\n", "gamma", "=", "None", "\n", "\n", "############################# parameter setting ##########################", "\n", "if", "gamma", "is", "None", ":", "\n", "            ", "gamma", "=", "1", "\n", "\n", "", "if", "beta", "is", "None", ":", "\n", "            ", "beta", "=", "1", "/", "2", "\n", "\n", "", "if", "lambda2", ">", "0", ":", "z", "=", "self", ".", "init_z", ".", "detach", "(", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "grad", "=", "x", "-", "hh", "\n", "smoo", "=", "x", "-", "gamma", "*", "grad", "\n", "temp", "=", "z", "+", "beta", "/", "gamma", "*", "(", "incident_matrix", "@", "(", "smoo", "-", "gamma", "*", "(", "incident_matrix", ".", "t", "(", ")", "@", "z", ")", ")", ")", "\n", "\n", "z", "=", "self", ".", "proximal_l1_conjugate", "(", "x", "=", "temp", ",", "lambda2", "=", "lambda2", ",", "beta", "=", "beta", ",", "gamma", "=", "gamma", ",", "m", "=", "\"L1\"", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "ctz", "=", "incident_matrix", ".", "t", "(", ")", "@", "z", "\n", "\n", "x", "=", "smoo", "-", "gamma", "*", "ctz", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# print(\"wihtout average\")", "\n", "", "light_out", "=", "x", "\n", "\n", "return", "light_out", ",", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.proximal_l1_conjugate": [[230, 246], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "ValueError", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "proximal_l1_conjugate", "(", "self", ",", "x", ":", "Tensor", ",", "lambda2", ",", "beta", ",", "gamma", ",", "m", ")", ":", "\n", "        ", "if", "m", "==", "'L1'", ":", "\n", "            ", "x_pre", "=", "x", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "-", "lambda2", ",", "max", "=", "lambda2", ")", "\n", "# print('diff after proximal: ', (x-x_pre).norm())", "\n", "\n", "", "elif", "m", "==", "'L1_original'", ":", "## through conjugate", "\n", "            ", "rr", "=", "gamma", "/", "beta", "\n", "yy", "=", "rr", "*", "x", "\n", "x_pre", "=", "x", "\n", "temp", "=", "torch", ".", "sign", "(", "yy", ")", "*", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "yy", ")", "-", "rr", "*", "lambda2", ",", "min", "=", "0", ")", "\n", "x", "=", "x", "-", "temp", "/", "rr", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'wrong prox'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.message": [[247, 249], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_weight", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.message_and_aggregate": [[250, 252], ["torch_sparse.matmul"], "methods", ["None"], ["", "def", "message_and_aggregate", "(", "self", ",", "adj_t", ":", "SparseTensor", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "matmul", "(", "adj_t", ",", "x", ",", "reduce", "=", "self", ".", "aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.gtn_propagation.GeneralPropagation.__repr__": [[253, 256], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(K={}, alpha={}, mode={}, dropout={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "K", ",", "\n", "self", ".", "alpha", ",", "self", ".", "mode", ",", "self", ".", "dropout", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.Procedure.BPR_train_original": [[35, 71], ["Recmodel.train", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "users.to.to", "posItems.to.to", "negItems.to.to", "utils.shuffle", "enumerate", "utils.timer.dict", "utils.timer.zero", "utils.timer", "utils.UniformSample_original", "utils.minibatch", "bpr.stageOne", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "w.add_scalar", "int", "len"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.shuffle", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.dict", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.zero", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.UniformSample_original", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.minibatch", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.BPRLoss.stageOne"], ["def", "BPR_train_original", "(", "dataset", ",", "recommend_model", ",", "loss_class", ",", "epoch", ",", "neg_k", "=", "1", ",", "w", "=", "None", ")", ":", "\n", "    ", "Recmodel", "=", "recommend_model", "\n", "Recmodel", ".", "train", "(", ")", "\n", "bpr", ":", "utils", ".", "BPRLoss", "=", "loss_class", "\n", "\n", "with", "timer", "(", "name", "=", "\"Sample\"", ")", ":", "\n", "        ", "S", "=", "utils", ".", "UniformSample_original", "(", "dataset", ")", "\n", "", "users", "=", "torch", ".", "Tensor", "(", "S", "[", ":", ",", "0", "]", ")", ".", "long", "(", ")", "# 41830", "\n", "posItems", "=", "torch", ".", "Tensor", "(", "S", "[", ":", ",", "1", "]", ")", ".", "long", "(", ")", "\n", "negItems", "=", "torch", ".", "Tensor", "(", "S", "[", ":", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "\n", "users", "=", "users", ".", "to", "(", "world", ".", "device", ")", "\n", "posItems", "=", "posItems", ".", "to", "(", "world", ".", "device", ")", "\n", "negItems", "=", "negItems", ".", "to", "(", "world", ".", "device", ")", "\n", "users", ",", "posItems", ",", "negItems", "=", "utils", ".", "shuffle", "(", "users", ",", "posItems", ",", "negItems", ")", "\n", "total_batch", "=", "len", "(", "users", ")", "//", "world", ".", "config", "[", "'bpr_batch_size'", "]", "+", "1", "# 21", "\n", "aver_loss", "=", "0.", "\n", "aver_mf_loss", "=", "0.0", "\n", "aver_reg_loss", "=", "0.0", "\n", "for", "(", "batch_i", ",", "\n", "(", "batch_users", ",", "batch_pos", ",", "batch_neg", ")", ")", "in", "enumerate", "(", "utils", ".", "minibatch", "(", "users", ",", "\n", "posItems", ",", "\n", "negItems", ",", "\n", "batch_size", "=", "world", ".", "config", "[", "'bpr_batch_size'", "]", ")", ")", ":", "\n", "        ", "cri", ",", "mf_loss", ",", "reg_loss", "=", "bpr", ".", "stageOne", "(", "batch_users", ",", "batch_pos", ",", "batch_neg", ")", "\n", "aver_loss", "+=", "cri", "\n", "aver_mf_loss", "+=", "mf_loss", "\n", "aver_reg_loss", "+=", "reg_loss", "\n", "if", "world", ".", "tensorboard", ":", "\n", "            ", "w", ".", "add_scalar", "(", "f'BPRLoss/BPR'", ",", "cri", ",", "epoch", "*", "int", "(", "len", "(", "users", ")", "/", "world", ".", "config", "[", "'bpr_batch_size'", "]", ")", "+", "batch_i", ")", "\n", "", "", "aver_loss", "=", "aver_loss", "/", "total_batch", "\n", "aver_mf_loss", "=", "aver_mf_loss", "/", "total_batch", "\n", "aver_reg_loss", "=", "aver_reg_loss", "/", "total_batch", "\n", "time_info", "=", "timer", ".", "dict", "(", ")", "\n", "timer", ".", "zero", "(", ")", "\n", "return", "f\"loss {aver_loss:.4f}  {aver_mf_loss:.4f}  {aver_reg_loss:.4f} - {time_info}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.Procedure.test_one_batch": [[73, 86], ["X[].numpy", "utils.getLabel", "utils.RecallPrecision_ATk", "pre.append", "recall.append", "ndcg.append", "numpy.array", "numpy.array", "numpy.array", "utils.NDCGatK_r"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.getLabel", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.RecallPrecision_ATk", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.NDCGatK_r"], ["", "def", "test_one_batch", "(", "X", ")", ":", "\n", "    ", "sorted_items", "=", "X", "[", "0", "]", ".", "numpy", "(", ")", "\n", "groundTrue", "=", "X", "[", "1", "]", "\n", "r", "=", "utils", ".", "getLabel", "(", "groundTrue", ",", "sorted_items", ")", "\n", "pre", ",", "recall", ",", "ndcg", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "world", ".", "topks", ":", "\n", "        ", "ret", "=", "utils", ".", "RecallPrecision_ATk", "(", "groundTrue", ",", "r", ",", "k", ")", "\n", "pre", ".", "append", "(", "ret", "[", "'precision'", "]", ")", "\n", "recall", ".", "append", "(", "ret", "[", "'recall'", "]", ")", "\n", "ndcg", ".", "append", "(", "utils", ".", "NDCGatK_r", "(", "groundTrue", ",", "r", ",", "k", ")", ")", "\n", "", "return", "{", "'recall'", ":", "np", ".", "array", "(", "recall", ")", ",", "\n", "'precision'", ":", "np", ".", "array", "(", "pre", ")", ",", "\n", "'ndcg'", ":", "np", ".", "array", "(", "ndcg", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.Procedure.Test": [[88, 165], ["Recmodel.eval.eval", "max", "multiprocessing.Pool", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.no_grad", "list", "utils.minibatch", "zip", "float", "float", "float", "float", "len", "len", "len", "testDict.keys", "dataset.getUserPosItems", "torch.Tensor().long", "batch_users_gpu.to.to", "Recmodel.eval.getUsersRating", "enumerate", "torch.topk", "rating.cpu().numpy.cpu().numpy", "users_list.append", "rating_list.append", "groundTrue_list.append", "len", "multiprocessing.Pool.map", "len", "len", "len", "w.add_scalars", "w.add_scalars", "w.add_scalars", "multiprocessing.Pool.close", "print", "len", "exclude_index.extend", "exclude_items.extend", "rating_K.cpu", "pool.map.append", "len", "len", "torch.Tensor", "rating.cpu().numpy.cpu", "Procedure.test_one_batch", "str", "str", "str", "len", "range", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.minibatch", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getUserPosItems", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.getUsersRating", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.Procedure.test_one_batch"], ["", "def", "Test", "(", "dataset", ",", "Recmodel", ",", "epoch", ",", "w", "=", "None", ",", "multicore", "=", "1", ",", "val", "=", "False", ")", ":", "\n", "    ", "u_batch_size", "=", "world", ".", "config", "[", "'test_u_batch_size'", "]", "\n", "dataset", ":", "utils", ".", "BasicDataset", "\n", "testDict", ":", "dict", "=", "dataset", ".", "testDict", "\n", "# valDict: dict = dataset.valDict", "\n", "\n", "Recmodel", ":", "model", ".", "GTN", "\n", "Recmodel", "=", "Recmodel", ".", "eval", "(", ")", "\n", "max_K", "=", "max", "(", "world", ".", "topks", ")", "\n", "if", "multicore", "==", "1", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", "CORES", ")", "\n", "", "results", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "world", ".", "topks", ")", ")", ",", "\n", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "world", ".", "topks", ")", ")", ",", "\n", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "world", ".", "topks", ")", ")", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "users", "=", "list", "(", "testDict", ".", "keys", "(", ")", ")", "\n", "try", ":", "\n", "            ", "assert", "u_batch_size", "<=", "len", "(", "users", ")", "/", "10", "\n", "", "except", "AssertionError", ":", "\n", "            ", "print", "(", "f\"test_u_batch_size is too big for this dataset, try a small one {len(users) // 10}\"", ")", "\n", "", "users_list", "=", "[", "]", "\n", "rating_list", "=", "[", "]", "\n", "groundTrue_list", "=", "[", "]", "\n", "# auc_record = []", "\n", "# ratings = []", "\n", "total_batch", "=", "len", "(", "users", ")", "//", "u_batch_size", "+", "1", "\n", "for", "batch_users", "in", "utils", ".", "minibatch", "(", "users", ",", "batch_size", "=", "u_batch_size", ")", ":", "\n", "            ", "allPos", "=", "dataset", ".", "getUserPosItems", "(", "batch_users", ")", "# can speed up: self._allPos", "\n", "groundTrue", "=", "[", "testDict", "[", "u", "]", "for", "u", "in", "batch_users", "]", "\n", "batch_users_gpu", "=", "torch", ".", "Tensor", "(", "batch_users", ")", ".", "long", "(", ")", "\n", "batch_users_gpu", "=", "batch_users_gpu", ".", "to", "(", "world", ".", "device", ")", "\n", "\n", "rating", "=", "Recmodel", ".", "getUsersRating", "(", "batch_users_gpu", ")", "\n", "# rating = rating.cpu()", "\n", "exclude_index", "=", "[", "]", "\n", "exclude_items", "=", "[", "]", "\n", "# posivite instances", "\n", "for", "range_i", ",", "items", "in", "enumerate", "(", "allPos", ")", ":", "\n", "                ", "exclude_index", ".", "extend", "(", "[", "range_i", "]", "*", "len", "(", "items", ")", ")", "\n", "exclude_items", ".", "extend", "(", "items", ")", "\n", "\n", "", "rating", "[", "exclude_index", ",", "exclude_items", "]", "=", "-", "(", "1", "<<", "10", ")", "\n", "\n", "_", ",", "rating_K", "=", "torch", ".", "topk", "(", "rating", ",", "k", "=", "max_K", ")", "\n", "rating", "=", "rating", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "del", "rating", "\n", "users_list", ".", "append", "(", "batch_users", ")", "\n", "rating_list", ".", "append", "(", "rating_K", ".", "cpu", "(", ")", ")", "\n", "groundTrue_list", ".", "append", "(", "groundTrue", ")", "\n", "", "assert", "total_batch", "==", "len", "(", "users_list", ")", "\n", "X", "=", "zip", "(", "rating_list", ",", "groundTrue_list", ")", "\n", "if", "multicore", "==", "1", ":", "\n", "            ", "pre_results", "=", "pool", ".", "map", "(", "test_one_batch", ",", "X", ")", "\n", "", "else", ":", "\n", "            ", "pre_results", "=", "[", "]", "\n", "for", "x", "in", "X", ":", "\n", "                ", "pre_results", ".", "append", "(", "test_one_batch", "(", "x", ")", ")", "\n", "", "", "scale", "=", "float", "(", "u_batch_size", "/", "len", "(", "users", ")", ")", "\n", "for", "result", "in", "pre_results", ":", "\n", "            ", "results", "[", "'recall'", "]", "+=", "result", "[", "'recall'", "]", "\n", "results", "[", "'precision'", "]", "+=", "result", "[", "'precision'", "]", "\n", "results", "[", "'ndcg'", "]", "+=", "result", "[", "'ndcg'", "]", "\n", "", "results", "[", "'recall'", "]", "/=", "float", "(", "len", "(", "users", ")", ")", "\n", "results", "[", "'precision'", "]", "/=", "float", "(", "len", "(", "users", ")", ")", "\n", "results", "[", "'ndcg'", "]", "/=", "float", "(", "len", "(", "users", ")", ")", "\n", "# results['auc'] = np.mean(auc_record)", "\n", "if", "world", ".", "tensorboard", ":", "\n", "            ", "w", ".", "add_scalars", "(", "f'Test/Recall@{world.topks}'", ",", "\n", "{", "str", "(", "world", ".", "topks", "[", "i", "]", ")", ":", "results", "[", "'recall'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "world", ".", "topks", ")", ")", "}", ",", "epoch", ")", "\n", "w", ".", "add_scalars", "(", "f'Test/Precision@{world.topks}'", ",", "\n", "{", "str", "(", "world", ".", "topks", "[", "i", "]", ")", ":", "results", "[", "'precision'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "world", ".", "topks", ")", ")", "}", ",", "epoch", ")", "\n", "w", ".", "add_scalars", "(", "f'Test/NDCG@{world.topks}'", ",", "\n", "{", "str", "(", "world", ".", "topks", "[", "i", "]", ")", ":", "results", "[", "'ndcg'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "world", ".", "topks", ")", ")", "}", ",", "epoch", ")", "\n", "", "if", "multicore", "==", "1", ":", "\n", "            ", "pool", ".", "close", "(", ")", "\n", "\n", "", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.parse.parse_args": [[31, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.parse.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Go GTN\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bpr_batch'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "\n", "help", "=", "\"the batch size for bpr loss training procedure\"", ")", "# 512 1024 2048 4096", "\n", "parser", ".", "add_argument", "(", "'--layer'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "\"the layer num of lightGCN\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "# 1000, ...", "\n", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "\"the weight decay for l2 normalizaton\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"using the dropout or not\"", ")", "\n", "parser", ".", "add_argument", "(", "'--keepprob'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "\n", "help", "=", "\"the batch size for bpr loss training procedure\"", ")", "\n", "parser", ".", "add_argument", "(", "'--a_fold'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"the fold num used to split large adj matrix, like gowalla\"", ")", "\n", "parser", ".", "add_argument", "(", "'--testbatch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"the batch size of users for testing, 100\"", ")", "\n", "parser", ".", "add_argument", "(", "'--path'", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoints\"", ",", "\n", "help", "=", "\"path to save weights\"", ")", "\n", "parser", ".", "add_argument", "(", "'--topks'", ",", "nargs", "=", "'?'", ",", "default", "=", "\"[20]\"", ",", "\n", "help", "=", "\"@k test list\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"enable tensorboard\"", ")", "\n", "parser", ".", "add_argument", "(", "'--comment'", ",", "type", "=", "str", ",", "default", "=", "\"gtn\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--multicore'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'whether we use multiprocessing or not in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'whether we use pretrained weight or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2020", ",", "help", "=", "'random seed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--prop_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--ogb'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--incnorm_para'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--K'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--alpha1'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha2'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda2'", ",", "type", "=", "float", ",", "default", "=", "4.0", ")", "#2, 3, 4,...", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "\"the learning rate:0.001\"", ")", "# 0.001", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'gowalla'", ",", "\n", "help", "=", "\"available datasets: [gowalla,  last-fm, yelp2018, amazon-book]\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'gtn'", ",", "help", "=", "'rec-model, support [gnt, lgn]'", ")", "\n", "parser", ".", "add_argument", "(", "'--avg'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--recdim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"the embedding size of GTN: 128, 256\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_model'", ",", "type", "=", "str", ",", "\n", "default", "=", "'GTN'", ",", "help", "=", "'GTN'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.BasicModel.__init__": [[44, 46], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BasicModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.BasicModel.getUsersRating": [[47, 49], ["None"], "methods", ["None"], ["", "def", "getUsersRating", "(", "self", ",", "users", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.PairWiseModel.__init__": [[52, 54], ["model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PairWiseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.PairWiseModel.bpr_loss": [[55, 65], ["None"], "methods", ["None"], ["", "def", "bpr_loss", "(", "self", ",", "users", ",", "pos", ",", "neg", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n            users: users list \n            pos: positive items for corresponding users\n            neg: negative items for corresponding users\n        Return:\n            (log-loss, l2-loss)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__init__": [[68, 76], ["model.BasicModel.__init__", "model.GTN.__init_weight", "gtn_propagation.GeneralPropagation"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__init__", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__init_weight"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "dict", ",", "dataset", ":", "BasicDataset", ",", "args", ")", ":", "\n", "        ", "super", "(", "GTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dataset", ":", "dataloader", ".", "BasicDataset", "=", "dataset", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "__init_weight", "(", ")", "\n", "\n", "self", ".", "gp", "=", "GeneralPropagation", "(", "args", ".", "K", ",", "args", ".", "alpha", ",", "cached", "=", "True", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__init_weight": [[77, 100], ["torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Sigmoid", "model.GTN.dataset.getSparseGraph", "print", "torch.nn.init.normal_", "torch.nn.init.normal_", "world.cprint", "model.GTN.embedding_user.weight.data.copy_", "model.GTN.embedding_item.weight.data.copy_", "print", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getSparseGraph", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.world.cprint"], ["", "def", "__init_weight", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_users", "=", "self", ".", "dataset", ".", "n_users", "\n", "self", ".", "num_items", "=", "self", ".", "dataset", ".", "m_items", "\n", "self", ".", "latent_dim", "=", "self", ".", "config", "[", "'latent_dim_rec'", "]", "\n", "self", ".", "n_layers", "=", "self", ".", "args", ".", "K", "\n", "self", ".", "keep_prob", "=", "self", ".", "config", "[", "'keep_prob'", "]", "\n", "self", ".", "A_split", "=", "self", ".", "config", "[", "'A_split'", "]", "\n", "self", ".", "embedding_user", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "self", ".", "num_users", ",", "embedding_dim", "=", "self", ".", "latent_dim", ")", "\n", "self", ".", "embedding_item", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "self", ".", "num_items", ",", "embedding_dim", "=", "self", ".", "latent_dim", ")", "\n", "if", "self", ".", "config", "[", "'pretrain'", "]", "==", "0", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embedding_user", ".", "weight", ",", "std", "=", "0.1", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embedding_item", ".", "weight", ",", "std", "=", "0.1", ")", "\n", "world", ".", "cprint", "(", "'use NORMAL distribution initilizer'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding_user", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "self", ".", "config", "[", "'user_emb'", "]", ")", ")", "\n", "self", ".", "embedding_item", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "self", ".", "config", "[", "'item_emb'", "]", ")", ")", "\n", "print", "(", "'use pretarined data'", ")", "\n", "", "self", ".", "f", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "Graph", "=", "self", ".", "dataset", ".", "getSparseGraph", "(", ")", "\n", "\n", "print", "(", "f\"lgn is already to go(dropout:{self.config['dropout']})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__dropout_x": [[101, 111], ["x.size", "x.indices().t", "x.values", "random_index.int().bool.int().bool.int().bool", "torch.sparse.FloatTensor", "torch.rand", "x.indices().t.t", "x.indices", "len", "random_index.int().bool.int().bool.int"], "methods", ["None"], ["", "def", "__dropout_x", "(", "self", ",", "x", ",", "keep_prob", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "\n", "index", "=", "x", ".", "indices", "(", ")", ".", "t", "(", ")", "\n", "values", "=", "x", ".", "values", "(", ")", "\n", "random_index", "=", "torch", ".", "rand", "(", "len", "(", "values", ")", ")", "+", "keep_prob", "\n", "random_index", "=", "random_index", ".", "int", "(", ")", ".", "bool", "(", ")", "\n", "index", "=", "index", "[", "random_index", "]", "\n", "values", "=", "values", "[", "random_index", "]", "/", "keep_prob", "\n", "g", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ".", "t", "(", ")", ",", "values", ",", "size", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__dropout": [[112, 120], ["model.GTN.__dropout_x", "model.GTN.append", "model.GTN.__dropout_x"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__dropout_x", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__dropout_x"], ["", "def", "__dropout", "(", "self", ",", "keep_prob", ")", ":", "\n", "        ", "if", "self", ".", "A_split", ":", "\n", "            ", "graph", "=", "[", "]", "\n", "for", "g", "in", "self", ".", "Graph", ":", "\n", "                ", "graph", ".", "append", "(", "self", ".", "__dropout_x", "(", "g", ",", "keep_prob", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "graph", "=", "self", ".", "__dropout_x", "(", "self", ".", "Graph", ",", "keep_prob", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.computer": [[121, 154], ["torch.cat", "model.GTN.indices", "torch_sparse.SparseTensor", "model.GTN.gp.forward", "torch.split", "model.GTN.__dropout", "model.GTN.values"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.forward", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.__dropout"], ["", "def", "computer", "(", "self", ",", "corrupted_graph", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        propagate methods for lightGCN\n        \"\"\"", "\n", "users_emb", "=", "self", ".", "embedding_user", ".", "weight", "\n", "items_emb", "=", "self", ".", "embedding_item", ".", "weight", "\n", "all_emb", "=", "torch", ".", "cat", "(", "[", "users_emb", ",", "items_emb", "]", ")", "\n", "if", "self", ".", "config", "[", "'dropout'", "]", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "g_droped", "=", "self", ".", "__dropout", "(", "self", ".", "keep_prob", ")", "\n", "", "else", ":", "\n", "                ", "if", "corrupted_graph", "==", "None", ":", "\n", "                    ", "g_droped", "=", "self", ".", "Graph", "\n", "", "else", ":", "\n", "                    ", "g_droped", "=", "corrupted_graph", "\n", "", "", "", "else", ":", "\n", "            ", "if", "corrupted_graph", "==", "None", ":", "\n", "                ", "g_droped", "=", "self", ".", "Graph", "\n", "", "else", ":", "\n", "                ", "g_droped", "=", "corrupted_graph", "\n", "\n", "# our GCNs", "\n", "", "", "x", "=", "all_emb", "\n", "rc", "=", "g_droped", ".", "indices", "(", ")", "\n", "r", "=", "rc", "[", "0", "]", "\n", "c", "=", "rc", "[", "1", "]", "\n", "num_nodes", "=", "g_droped", ".", "shape", "[", "0", "]", "\n", "edge_index", "=", "SparseTensor", "(", "row", "=", "r", ",", "col", "=", "c", ",", "value", "=", "g_droped", ".", "values", "(", ")", ",", "sparse_sizes", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "emb", ",", "embs", "=", "self", ".", "gp", ".", "forward", "(", "x", ",", "edge_index", ",", "mode", "=", "self", ".", "args", ".", "gcn_model", ")", "\n", "light_out", "=", "emb", "\n", "\n", "users", ",", "items", "=", "torch", ".", "split", "(", "light_out", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ")", "\n", "return", "users", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.getUsersRating": [[155, 161], ["model.GTN.computer", "model.GTN.f", "torch.matmul", "users.long", "items_emb.t"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.computer"], ["", "def", "getUsersRating", "(", "self", ",", "users", ")", ":", "\n", "        ", "all_users", ",", "all_items", "=", "self", ".", "computer", "(", ")", "\n", "users_emb", "=", "all_users", "[", "users", ".", "long", "(", ")", "]", "\n", "items_emb", "=", "all_items", "\n", "rating", "=", "self", ".", "f", "(", "torch", ".", "matmul", "(", "users_emb", ",", "items_emb", ".", "t", "(", ")", ")", ")", "\n", "return", "rating", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.getEmbedding": [[162, 171], ["model.GTN.computer", "model.GTN.embedding_user", "model.GTN.embedding_item", "model.GTN.embedding_item"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.computer"], ["", "def", "getEmbedding", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "all_users", ",", "all_items", "=", "self", ".", "computer", "(", ")", "\n", "users_emb", "=", "all_users", "[", "users", "]", "\n", "pos_emb", "=", "all_items", "[", "pos_items", "]", "\n", "neg_emb", "=", "all_items", "[", "neg_items", "]", "\n", "users_emb_ego", "=", "self", ".", "embedding_user", "(", "users", ")", "\n", "pos_emb_ego", "=", "self", ".", "embedding_item", "(", "pos_items", ")", "\n", "neg_emb_ego", "=", "self", ".", "embedding_item", "(", "neg_items", ")", "\n", "return", "users_emb", ",", "pos_emb", ",", "neg_emb", ",", "users_emb_ego", ",", "pos_emb_ego", ",", "neg_emb_ego", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.bpr_loss": [[172, 186], ["model.GTN.getEmbedding", "torch.mul", "torch.sum", "torch.mul", "torch.sum", "torch.mean", "users.long", "pos.long", "neg.long", "float", "torch.nn.functional.softplus", "len", "negEmb0.norm().pow", "userEmb0.norm().pow", "posEmb0.norm().pow", "negEmb0.norm", "userEmb0.norm", "posEmb0.norm"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.getEmbedding"], ["", "def", "bpr_loss", "(", "self", ",", "users", ",", "pos", ",", "neg", ")", ":", "\n", "        ", "(", "users_emb", ",", "pos_emb", ",", "neg_emb", ",", "\n", "userEmb0", ",", "posEmb0", ",", "negEmb0", ")", "=", "self", ".", "getEmbedding", "(", "users", ".", "long", "(", ")", ",", "pos", ".", "long", "(", ")", ",", "neg", ".", "long", "(", ")", ")", "\n", "reg_loss", "=", "(", "1", "/", "2", ")", "*", "(", "userEmb0", ".", "norm", "(", "2", ")", ".", "pow", "(", "2", ")", "+", "\n", "posEmb0", ".", "norm", "(", "2", ")", ".", "pow", "(", "2", ")", "+", "\n", "negEmb0", ".", "norm", "(", "2", ")", ".", "pow", "(", "2", ")", ")", "/", "float", "(", "len", "(", "users", ")", ")", "\n", "pos_scores", "=", "torch", ".", "mul", "(", "users_emb", ",", "pos_emb", ")", "\n", "pos_scores", "=", "torch", ".", "sum", "(", "pos_scores", ",", "dim", "=", "1", ")", "\n", "neg_scores", "=", "torch", ".", "mul", "(", "users_emb", ",", "neg_emb", ")", "\n", "neg_scores", "=", "torch", ".", "sum", "(", "neg_scores", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "neg_scores", "-", "pos_scores", ")", ")", "\n", "\n", "return", "loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.forward": [[187, 195], ["model.GTN.computer", "torch.mul", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.computer"], ["", "def", "forward", "(", "self", ",", "users", ",", "items", ")", ":", "\n", "# compute embedding", "\n", "        ", "all_users", ",", "all_items", "=", "self", ".", "computer", "(", ")", "\n", "users_emb", "=", "all_users", "[", "users", "]", "\n", "items_emb", "=", "all_items", "[", "items", "]", "\n", "inner_pro", "=", "torch", ".", "mul", "(", "users_emb", ",", "items_emb", ")", "\n", "gamma", "=", "torch", ".", "sum", "(", "inner_pro", ",", "dim", "=", "1", ")", "\n", "return", "gamma", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.__init__": [[42, 44], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"init dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.n_users": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_users", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.m_items": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "m_items", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.trainDataSize": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainDataSize", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.testDict": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "testDict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.allPos": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allPos", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.getUserItemFeedback": [[65, 67], ["None"], "methods", ["None"], ["", "def", "getUserItemFeedback", "(", "self", ",", "users", ",", "items", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.getUserPosItems": [[68, 70], ["None"], "methods", ["None"], ["", "def", "getUserPosItems", "(", "self", ",", "users", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.getUserNegItems": [[71, 77], ["None"], "methods", ["None"], ["", "def", "getUserNegItems", "(", "self", ",", "users", ")", ":", "\n", "        ", "\"\"\"\n        not necessary for large dataset\n        it's stupid to return all neg items in super large dataset\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.BasicDataset.getSparseGraph": [[78, 87], ["None"], "methods", ["None"], ["", "def", "getSparseGraph", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        build a graph in torch.sparse.IntTensor.\n        Details in NGCF's matrix form\n        A = \n            |I,   R|\n            |R^T, I|\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.__init__": [[96, 184], ["world.cprint", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "scipy.sparse.csr_matrix", "numpy.array().squeeze", "numpy.array().squeeze", "numpy.array().squeeze", "numpy.array().squeeze", "dataloader.Loader.getUserPosItems", "dataloader.Loader.__build_test", "dataloader.Loader.__build_val", "print", "open", "f.readlines", "open", "f.readlines", "list", "numpy.ones", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "len", "l.strip().split.strip().split.strip().split", "int", "trainUniqueUsers.append", "trainUser.extend", "trainItem.extend", "max", "max", "len", "len", "l.strip().split.strip().split.strip().split", "int", "testUniqueUsers.append", "testUser.extend", "testItem.extend", "max", "max", "len", "len", "dataloader.Loader.UserItemNet.sum", "dataloader.Loader.UserItemNet.sum", "int", "max", "max", "l.strip().split.strip().split.strip", "len", "l.strip().split.strip().split.strip", "int", "len"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.world.cprint", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getUserPosItems", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.__build_test", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.__build_val"], ["def", "__init__", "(", "self", ",", "config", "=", "world", ".", "config", ",", "path", "=", "\"../data/gowalla\"", ",", "flag_test", "=", "0", ")", ":", "\n", "# train or test", "\n", "        ", "cprint", "(", "f'loading [{path}]'", ")", "\n", "self", ".", "split", "=", "config", "[", "'A_split'", "]", "\n", "self", ".", "folds", "=", "config", "[", "'A_n_fold'", "]", "\n", "# self.pre_norm = config['pre_norm']", "\n", "self", ".", "mode_dict", "=", "{", "'train'", ":", "0", ",", "\"test\"", ":", "1", "}", "\n", "self", ".", "mode", "=", "self", ".", "mode_dict", "[", "'train'", "]", "\n", "self", ".", "n_user", "=", "0", "\n", "self", ".", "m_item", "=", "0", "\n", "train_file", "=", "path", "+", "'/train.txt'", "\n", "test_file", "=", "path", "+", "'/test.txt'", "\n", "self", ".", "path", "=", "path", "\n", "trainUniqueUsers", ",", "trainItem", ",", "trainUser", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "testUniqueUsers", ",", "testItem", ",", "testUser", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "traindataSize", "=", "0", "\n", "self", ".", "testDataSize", "=", "0", "\n", "self", ".", "args", "=", "config", "[", "'args'", "]", "\n", "\n", "with", "open", "(", "train_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "trainUniqueUsers", ".", "append", "(", "uid", ")", "\n", "trainUser", ".", "extend", "(", "[", "uid", "]", "*", "len", "(", "items", ")", ")", "\n", "trainItem", ".", "extend", "(", "items", ")", "\n", "self", ".", "m_item", "=", "max", "(", "self", ".", "m_item", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_user", "=", "max", "(", "self", ".", "n_user", ",", "uid", ")", "\n", "self", ".", "traindataSize", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "self", ".", "trainUniqueUsers", "=", "np", ".", "array", "(", "trainUniqueUsers", ")", "\n", "self", ".", "trainUser", "=", "np", ".", "array", "(", "trainUser", ")", "\n", "self", ".", "trainItem", "=", "np", ".", "array", "(", "trainItem", ")", "\n", "with", "open", "(", "test_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "# items = [int(i) for i in l[1:]]", "\n", "", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "testUniqueUsers", ".", "append", "(", "uid", ")", "\n", "testUser", ".", "extend", "(", "[", "uid", "]", "*", "len", "(", "items", ")", ")", "\n", "testItem", ".", "extend", "(", "items", ")", "\n", "self", ".", "m_item", "=", "max", "(", "self", ".", "m_item", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_user", "=", "max", "(", "self", ".", "n_user", ",", "uid", ")", "\n", "self", ".", "testDataSize", "+=", "len", "(", "items", ")", "\n", "", "", "", "self", ".", "m_item", "+=", "1", "\n", "self", ".", "n_user", "+=", "1", "\n", "\n", "# original setting", "\n", "testUser", "=", "testUser", "\n", "testItem", "=", "testItem", "\n", "valUser", "=", "testUser", "\n", "valItem", "=", "testItem", "\n", "\n", "self", ".", "testUniqueUsers", "=", "np", ".", "array", "(", "testUniqueUsers", ")", "\n", "self", ".", "testUser", "=", "np", ".", "array", "(", "testUser", ")", "\n", "self", ".", "testItem", "=", "np", ".", "array", "(", "testItem", ")", "\n", "\n", "self", ".", "valUser", "=", "np", ".", "array", "(", "valUser", ")", "\n", "self", ".", "valItem", "=", "np", ".", "array", "(", "valItem", ")", "\n", "\n", "self", ".", "Graph", "=", "None", "\n", "print", "(", "f\"{self.trainDataSize} interactions for training\"", ")", "\n", "print", "(", "f\"{self.testDataSize} interactions for testing\"", ")", "\n", "print", "(", "f\"{world.dataset} Sparsity : {(self.trainDataSize + self.testDataSize) / self.n_users / self.m_items}\"", ")", "\n", "\n", "# (users,items), bipartite graph", "\n", "# R ", "\n", "self", ".", "UserItemNet", "=", "csr_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "self", ".", "trainUser", ")", ")", ",", "(", "self", ".", "trainUser", ",", "self", ".", "trainItem", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_user", ",", "self", ".", "m_item", ")", ")", "\n", "\n", "self", ".", "users_D", "=", "np", ".", "array", "(", "self", ".", "UserItemNet", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "users_D", "[", "self", ".", "users_D", "==", "0.", "]", "=", "1", "\n", "self", ".", "items_D", "=", "np", ".", "array", "(", "self", ".", "UserItemNet", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "items_D", "[", "self", ".", "items_D", "==", "0.", "]", "=", "1.", "\n", "# pre-calculate", "\n", "self", ".", "_allPos", "=", "self", ".", "getUserPosItems", "(", "list", "(", "range", "(", "self", ".", "n_user", ")", ")", ")", "\n", "self", ".", "__testDict", "=", "self", ".", "__build_test", "(", ")", "\n", "self", ".", "__valDict", "=", "self", ".", "__build_val", "(", ")", "\n", "print", "(", "f\"{world.dataset} is ready to go\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.random_sample_edges": [[185, 188], ["dataloader.Loader.sample_forever", "next", "range"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.sample_forever"], ["", "def", "random_sample_edges", "(", "self", ",", "adj", ",", "n", ",", "exclude", ")", ":", "\n", "        ", "itr", "=", "self", ".", "sample_forever", "(", "adj", ",", "exclude", "=", "exclude", ")", "\n", "return", "[", "next", "(", "itr", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.sample_forever": [[189, 201], ["tuple", "numpy.random.choice", "numpy.random.choice", "exclude.add", "exclude.add"], "methods", ["None"], ["", "def", "sample_forever", "(", "self", ",", "adj", ",", "exclude", ")", ":", "\n", "        ", "\"\"\"Randomly random sample edges from adjacency matrix, `exclude` is a set\n        which contains the edges we do not want to sample and the ones already sampled\n        \"\"\"", "\n", "while", "True", ":", "\n", "# t = tuple(np.random.randint(0, adj.shape[0], 2))", "\n", "# t = tuple(random.sample(range(0, adj.shape[0]), 2))", "\n", "            ", "t", "=", "tuple", "(", "np", ".", "random", ".", "choice", "(", "adj", ".", "shape", "[", "0", "]", ",", "2", ",", "replace", "=", "False", ")", ")", "\n", "if", "t", "not", "in", "exclude", ":", "\n", "                ", "yield", "t", "\n", "exclude", ".", "add", "(", "t", ")", "\n", "exclude", ".", "add", "(", "(", "t", "[", "1", "]", ",", "t", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.n_users": [[202, 205], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "n_users", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_user", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.m_items": [[206, 209], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "m_items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "m_item", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.trainDataSize": [[210, 213], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainDataSize", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "traindataSize", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.testDict": [[214, 217], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "testDict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__testDict", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.valDict": [[218, 221], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "valDict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__valDict", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.allPos": [[222, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allPos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_allPos", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader._split_A_hat": [[226, 237], ["range", "A_fold.append", "dataloader.Loader._convert_sp_mat_to_sp_tensor().coalesce().to", "dataloader.Loader._convert_sp_mat_to_sp_tensor().coalesce", "dataloader.Loader._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "A", ")", ":", "\n", "        ", "A_fold", "=", "[", "]", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "m_items", ")", "//", "self", ".", "folds", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "folds", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "folds", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "m_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "", "A_fold", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "A", "[", "start", ":", "end", "]", ")", ".", "coalesce", "(", ")", ".", "to", "(", "world", ".", "device", ")", ")", "\n", "", "return", "A_fold", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader._convert_sp_mat_to_sp_tensor": [[238, 245], ["X.tocoo().astype", "torch.Tensor().long", "torch.Tensor().long", "torch.stack", "torch.FloatTensor", "torch.sparse.FloatTensor", "torch.Size", "X.tocoo", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "row", "=", "torch", ".", "Tensor", "(", "coo", ".", "row", ")", ".", "long", "(", ")", "\n", "col", "=", "torch", ".", "Tensor", "(", "coo", ".", "col", ")", ".", "long", "(", ")", "\n", "index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ")", "\n", "data", "=", "torch", ".", "FloatTensor", "(", "coo", ".", "data", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "data", ",", "torch", ".", "Size", "(", "coo", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getSparseGraph": [[246, 268], ["print", "print", "time.time.time", "scipy.dok_matrix", "adj_mat.todok.todok.tolil", "dataloader.Loader.UserItemNet.tolil", "adj_mat.todok.todok.todok", "adj_mat.todok.todok.tocsr", "time.time.time", "print", "dataloader.Loader._convert_sp_mat_to_sp_tensor", "dataloader.Loader.Graph.coalesce().to", "dataloader.Loader.Graph.coalesce"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader._convert_sp_mat_to_sp_tensor"], ["", "def", "getSparseGraph", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"loading adjacency matrix\"", ")", "\n", "if", "self", ".", "Graph", "is", "None", ":", "\n", "            ", "print", "(", "\"generating adjacency matrix\"", ")", "\n", "s", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", "+", "self", ".", "m_items", ",", "self", ".", "n_users", "+", "self", ".", "m_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n", "# if self.flag_test == 0:", "\n", "R", "=", "self", ".", "UserItemNet", ".", "tolil", "(", ")", "\n", "\n", "adj_mat", "[", ":", "self", ".", "n_users", ",", "self", ".", "n_users", ":", "]", "=", "R", "\n", "adj_mat", "[", "self", ".", "n_users", ":", ",", ":", "self", ".", "n_users", "]", "=", "R", ".", "T", "\n", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "\n", "norm_adj", "=", "adj_mat", ".", "tocsr", "(", ")", "\n", "end", "=", "time", "(", ")", "\n", "print", "(", "f\"costing {end - s}s, saved mat...\"", ")", "\n", "\n", "self", ".", "Graph", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "norm_adj", ")", "\n", "self", ".", "Graph", "=", "self", ".", "Graph", ".", "coalesce", "(", ")", ".", "to", "(", "world", ".", "device", ")", "\n", "self", ".", "norm_adj", "=", "norm_adj", "\n", "", "return", "self", ".", "Graph", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.__build_test": [[269, 282], ["enumerate", "test_data.get", "test_data[].append"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get"], ["", "def", "__build_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return:\n            dict: {user: [items]}\n        \"\"\"", "\n", "test_data", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "testItem", ")", ":", "\n", "            ", "user", "=", "self", ".", "testUser", "[", "i", "]", "\n", "if", "test_data", ".", "get", "(", "user", ")", ":", "\n", "                ", "test_data", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "test_data", "[", "user", "]", "=", "[", "item", "]", "\n", "", "", "return", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.__build_val": [[283, 296], ["enumerate", "val_data.get", "val_data[].append"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get"], ["", "def", "__build_val", "(", "self", ")", ":", "\n", "        ", "\"\"\" validation\n        return:\n            dict: {user: [items]}\n        \"\"\"", "\n", "val_data", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "valItem", ")", ":", "\n", "            ", "user", "=", "self", ".", "valUser", "[", "i", "]", "\n", "if", "val_data", ".", "get", "(", "user", ")", ":", "\n", "                ", "val_data", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "val_data", "[", "user", "]", "=", "[", "item", "]", "\n", "", "", "return", "val_data", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getUserItemFeedback": [[297, 308], ["numpy.array().astype().reshape", "numpy.array().astype().reshape", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "getUserItemFeedback", "(", "self", ",", "users", ",", "items", ")", ":", "\n", "        ", "\"\"\"\n        users:\n            shape [-1]\n        items:\n            shape [-1]\n        return:\n            feedback [-1]\n        \"\"\"", "\n", "# print(self.UserItemNet[users, items])", "\n", "return", "np", ".", "array", "(", "self", ".", "UserItemNet", "[", "users", ",", "items", "]", ")", ".", "astype", "(", "'uint8'", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.dataloader.Loader.getUserPosItems": [[309, 314], ["posItems.append", "dataloader.Loader.UserItemNet[].nonzero"], "methods", ["None"], ["", "def", "getUserPosItems", "(", "self", ",", "users", ")", ":", "\n", "        ", "posItems", "=", "[", "]", "\n", "for", "user", "in", "users", ":", "\n", "            ", "posItems", ".", "append", "(", "self", ".", "UserItemNet", "[", "user", "]", ".", "nonzero", "(", ")", "[", "1", "]", ")", "\n", "", "return", "posItems", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.BPRLoss.__init__": [[42, 49], ["torch.optim.Adam", "recmodel.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "recmodel", ":", "PairWiseModel", ",", "\n", "config", ":", "dict", ")", ":", "\n", "        ", "self", ".", "model", "=", "recmodel", "\n", "self", ".", "weight_decay", "=", "config", "[", "'decay'", "]", "\n", "self", ".", "lr", "=", "config", "[", "'lr'", "]", "\n", "self", ".", "opt", "=", "optim", ".", "Adam", "(", "recmodel", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "# weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.BPRLoss.stageOne": [[50, 60], ["utils.BPRLoss.model.bpr_loss", "utils.BPRLoss.opt.zero_grad", "loss.backward", "utils.BPRLoss.opt.step", "loss.cpu().item", "mf_loss.cpu().item", "reg_loss.cpu().item", "loss.cpu", "mf_loss.cpu", "reg_loss.cpu"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.model.GTN.bpr_loss"], ["", "def", "stageOne", "(", "self", ",", "users", ",", "pos", ",", "neg", ")", ":", "\n", "        ", "mf_loss", ",", "reg_loss", "=", "self", ".", "model", ".", "bpr_loss", "(", "users", ",", "pos", ",", "neg", ")", "\n", "reg_loss", "=", "reg_loss", "*", "self", ".", "weight_decay", "\n", "loss", "=", "mf_loss", "+", "reg_loss", "\n", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "mf_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "reg_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get": [[170, 176], ["len", "timer.TAPE.pop"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", ")", ":", "\n", "        ", "if", "len", "(", "timer", ".", "TAPE", ")", ">", "1", ":", "\n", "            ", "return", "timer", ".", "TAPE", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.dict": [[177, 188], ["timer.NAMED_TAPE.items"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "dict", "(", "select_keys", "=", "None", ")", ":", "\n", "        ", "hint", "=", "\"|\"", "\n", "if", "select_keys", "is", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "timer", ".", "NAMED_TAPE", ".", "items", "(", ")", ":", "\n", "                ", "hint", "=", "hint", "+", "f\"{key}:{value:.2f}|\"", "\n", "", "", "else", ":", "\n", "            ", "for", "key", "in", "select_keys", ":", "\n", "                ", "value", "=", "timer", ".", "NAMED_TAPE", "[", "key", "]", "\n", "hint", "=", "hint", "+", "f\"{key}:{value:.2f}|\"", "\n", "", "", "return", "hint", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.zero": [[189, 197], ["timer.NAMED_TAPE.items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "zero", "(", "select_keys", "=", "None", ")", ":", "\n", "        ", "if", "select_keys", "is", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "timer", ".", "NAMED_TAPE", ".", "items", "(", ")", ":", "\n", "                ", "timer", ".", "NAMED_TAPE", "[", "key", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "for", "key", "in", "select_keys", ":", "\n", "                ", "timer", ".", "NAMED_TAPE", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__init__": [[198, 209], ["kwargs.get", "kwargs.get", "timer.NAMED_TAPE.get"], "methods", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get"], ["", "", "", "def", "__init__", "(", "self", ",", "tape", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "'name'", ")", ":", "\n", "            ", "timer", ".", "NAMED_TAPE", "[", "kwargs", "[", "'name'", "]", "]", "=", "timer", ".", "NAMED_TAPE", "[", "\n", "kwargs", "[", "'name'", "]", "]", "if", "timer", ".", "NAMED_TAPE", ".", "get", "(", "kwargs", "[", "'name'", "]", ")", "else", "0.", "\n", "self", ".", "named", "=", "kwargs", "[", "'name'", "]", "\n", "if", "kwargs", ".", "get", "(", "\"group\"", ")", ":", "\n", "# TODO: add group function", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "named", "=", "False", "\n", "self", ".", "tape", "=", "tape", "or", "timer", ".", "TAPE", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__enter__": [[210, 213], ["timer.time"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "timer", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.__exit__": [[214, 219], ["utils.timer.tape.append", "timer.time", "timer.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "if", "self", ".", "named", ":", "\n", "            ", "timer", ".", "NAMED_TAPE", "[", "self", ".", "named", "]", "+=", "timer", ".", "time", "(", ")", "-", "self", ".", "start", "\n", "", "else", ":", "\n", "            ", "self", ".", "tape", ".", "append", "(", "timer", ".", "time", "(", ")", "-", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.UniformSample_original": [[62, 72], ["time.time", "sampling.sample_negative", "utils.UniformSample_original_python"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.UniformSample_original_python"], ["", "", "def", "UniformSample_original", "(", "dataset", ",", "neg_ratio", "=", "1", ")", ":", "\n", "    ", "dataset", ":", "BasicDataset", "\n", "allPos", "=", "dataset", ".", "allPos", "\n", "start", "=", "time", "(", ")", "\n", "if", "sample_ext", ":", "\n", "        ", "S", "=", "sampling", ".", "sample_negative", "(", "dataset", ".", "n_users", ",", "dataset", ".", "m_items", ",", "\n", "dataset", ".", "trainDataSize", ",", "allPos", ",", "neg_ratio", ")", "\n", "", "else", ":", "\n", "        ", "S", "=", "UniformSample_original_python", "(", "dataset", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.UniformSample_original_python": [[74, 107], ["time.time", "numpy.random.randint", "enumerate", "numpy.array", "time.time", "numpy.random.randint", "S.append", "time.time", "time.time", "len", "time.time", "len", "numpy.random.randint"], "function", ["None"], ["", "def", "UniformSample_original_python", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    the original impliment of BPR Sampling in LightGCN\n    :return:\n        np.array\n    \"\"\"", "\n", "total_start", "=", "time", "(", ")", "\n", "dataset", ":", "BasicDataset", "\n", "user_num", "=", "dataset", ".", "trainDataSize", "\n", "users", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dataset", ".", "n_users", ",", "user_num", ")", "\n", "allPos", "=", "dataset", ".", "allPos", "\n", "S", "=", "[", "]", "\n", "sample_time1", "=", "0.", "\n", "sample_time2", "=", "0.", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "        ", "start", "=", "time", "(", ")", "\n", "posForUser", "=", "allPos", "[", "user", "]", "\n", "if", "len", "(", "posForUser", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "sample_time2", "+=", "time", "(", ")", "-", "start", "\n", "posindex", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "posForUser", ")", ")", "\n", "positem", "=", "posForUser", "[", "posindex", "]", "\n", "while", "True", ":", "\n", "            ", "negitem", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dataset", ".", "m_items", ")", "\n", "if", "negitem", "in", "posForUser", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "S", ".", "append", "(", "[", "user", ",", "positem", ",", "negitem", "]", ")", "\n", "end", "=", "time", "(", ")", "\n", "sample_time1", "+=", "end", "-", "start", "\n", "", "total", "=", "time", "(", ")", "-", "total_start", "\n", "return", "np", ".", "array", "(", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.set_seed": [[112, 118], ["numpy.random.seed", "torch.cuda.is_available", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.getFileName": [[120, 124], ["os.path.join"], "function", ["None"], ["", "def", "getFileName", "(", ")", ":", "\n", "    ", "file", "=", "f\"{world.args.gcn_model}-{world.dataset}.pth.tar\"", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "world", ".", "FILE_PATH", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.minibatch": [[126, 136], ["kwargs.get", "len", "range", "range", "len", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get"], ["", "def", "minibatch", "(", "*", "tensors", ",", "**", "kwargs", ")", ":", "\n", "    ", "batch_size", "=", "kwargs", ".", "get", "(", "'batch_size'", ",", "world", ".", "config", "[", "'bpr_batch_size'", "]", ")", "\n", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "tensor", "=", "tensors", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tensor", ")", ",", "batch_size", ")", ":", "\n", "            ", "yield", "tensor", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tensors", "[", "0", "]", ")", ",", "batch_size", ")", ":", "\n", "            ", "yield", "tuple", "(", "x", "[", "i", ":", "i", "+", "batch_size", "]", "for", "x", "in", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.shuffle": [[138, 157], ["kwargs.get", "numpy.arange", "numpy.random.shuffle", "len", "ValueError", "len", "len", "tuple", "set", "len"], "function", ["home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.timer.get", "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.shuffle"], ["", "", "", "def", "shuffle", "(", "*", "arrays", ",", "**", "kwargs", ")", ":", "\n", "    ", "require_indices", "=", "kwargs", ".", "get", "(", "'indices'", ",", "False", ")", "\n", "\n", "if", "len", "(", "set", "(", "len", "(", "x", ")", "for", "x", "in", "arrays", ")", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'All inputs to shuffle must have '", "\n", "'the same length.'", ")", "\n", "\n", "", "shuffle_indices", "=", "np", ".", "arange", "(", "len", "(", "arrays", "[", "0", "]", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffle_indices", ")", "\n", "\n", "if", "len", "(", "arrays", ")", "==", "1", ":", "\n", "        ", "result", "=", "arrays", "[", "0", "]", "[", "shuffle_indices", "]", "\n", "", "else", ":", "\n", "        ", "result", "=", "tuple", "(", "x", "[", "shuffle_indices", "]", "for", "x", "in", "arrays", ")", "\n", "\n", "", "if", "require_indices", ":", "\n", "        ", "return", "result", ",", "shuffle_indices", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.RecallPrecision_ATk": [[223, 235], ["r[].sum", "numpy.array", "numpy.sum", "numpy.sum", "len", "range", "len"], "function", ["None"], ["", "", "", "def", "RecallPrecision_ATk", "(", "test_data", ",", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    test_data should be a list? cause users may have different amount of pos items. shape (test_batch, k)\n    pred_data : shape (test_batch, k) NOTE: pred_data should be pre-sorted\n    k : top-k\n    \"\"\"", "\n", "right_pred", "=", "r", "[", ":", ",", ":", "k", "]", ".", "sum", "(", "1", ")", "\n", "precis_n", "=", "k", "\n", "recall_n", "=", "np", ".", "array", "(", "[", "len", "(", "test_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "test_data", ")", ")", "]", ")", "\n", "recall", "=", "np", ".", "sum", "(", "right_pred", "/", "recall_n", ")", "\n", "precis", "=", "np", ".", "sum", "(", "right_pred", ")", "/", "precis_n", "\n", "return", "{", "'recall'", ":", "recall", ",", "'precision'", ":", "precis", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.MRRatK_r": [[237, 246], ["numpy.log2", "pred_data.sum.sum", "numpy.sum", "numpy.arange"], "function", ["None"], ["", "def", "MRRatK_r", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Mean Reciprocal Rank\n    \"\"\"", "\n", "pred_data", "=", "r", "[", ":", ",", ":", "k", "]", "\n", "scores", "=", "np", ".", "log2", "(", "1.", "/", "np", ".", "arange", "(", "1", ",", "k", "+", "1", ")", ")", "\n", "pred_data", "=", "pred_data", "/", "scores", "\n", "pred_data", "=", "pred_data", ".", "sum", "(", "1", ")", "\n", "return", "np", ".", "sum", "(", "pred_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.NDCGatK_r": [[248, 268], ["numpy.zeros", "enumerate", "numpy.sum", "numpy.sum", "numpy.sum", "len", "len", "len", "len", "numpy.log2", "numpy.log2", "numpy.isnan", "len", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "NDCGatK_r", "(", "test_data", ",", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Normalized Discounted Cumulative Gain\n    rel_i = 1 or 0, so 2^{rel_i} - 1 = 1 or 0\n    \"\"\"", "\n", "assert", "len", "(", "r", ")", "==", "len", "(", "test_data", ")", "\n", "pred_data", "=", "r", "[", ":", ",", ":", "k", "]", "\n", "\n", "test_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "pred_data", ")", ",", "k", ")", ")", "\n", "for", "i", ",", "items", "in", "enumerate", "(", "test_data", ")", ":", "\n", "        ", "length", "=", "k", "if", "k", "<=", "len", "(", "items", ")", "else", "len", "(", "items", ")", "\n", "test_matrix", "[", "i", ",", ":", "length", "]", "=", "1", "\n", "", "max_r", "=", "test_matrix", "\n", "idcg", "=", "np", ".", "sum", "(", "max_r", "*", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", ",", "axis", "=", "1", ")", "\n", "dcg", "=", "pred_data", "*", "(", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", ")", "\n", "dcg", "=", "np", ".", "sum", "(", "dcg", ",", "axis", "=", "1", ")", "\n", "idcg", "[", "idcg", "==", "0.", "]", "=", "1.", "\n", "ndcg", "=", "dcg", "/", "idcg", "\n", "ndcg", "[", "np", ".", "isnan", "(", "ndcg", ")", "]", "=", "0.", "\n", "return", "np", ".", "sum", "(", "ndcg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.AUC": [[270, 280], ["numpy.zeros", "sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "AUC", "(", "all_item_scores", ",", "dataset", ",", "test_data", ")", ":", "\n", "    ", "\"\"\"\n        design for a single user\n    \"\"\"", "\n", "dataset", ":", "BasicDataset", "\n", "r_all", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "m_items", ",", ")", ")", "\n", "r_all", "[", "test_data", "]", "=", "1", "\n", "r", "=", "r_all", "[", "all_item_scores", ">=", "0", "]", "\n", "test_item_scores", "=", "all_item_scores", "[", "all_item_scores", ">=", "0", "]", "\n", "return", "roc_auc_score", "(", "r", ",", "test_item_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wenqifan03_gtn-sigir2022.code.utils.getLabel": [[282, 291], ["range", "numpy.array().astype", "len", "list", "numpy.array().astype", "r.append", "map", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "getLabel", "(", "test_data", ",", "pred_data", ")", ":", "\n", "    ", "r", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_data", ")", ")", ":", "\n", "        ", "groundTrue", "=", "test_data", "[", "i", "]", "\n", "predictTopK", "=", "pred_data", "[", "i", "]", "\n", "pred", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "in", "groundTrue", ",", "predictTopK", ")", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ")", ".", "astype", "(", "\"float\"", ")", "\n", "r", ".", "append", "(", "pred", ")", "\n", "", "return", "np", ".", "array", "(", "r", ")", ".", "astype", "(", "'float'", ")", "\n", "\n"]]}