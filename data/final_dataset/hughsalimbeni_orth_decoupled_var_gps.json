{"home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.GaussianBasis.__init__": [[35, 37], ["gpflow.params.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "Parameterized", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.GaussianBasis.conditional_with_KL": [[38, 46], ["None"], "methods", ["None"], ["", "def", "conditional_with_KL", "(", "self", ",", "X", ",", "full_cov", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The predictive mean and variance, and KL to the prior, returned as a tuple (mean, cov, KL)\n        :param X: the input locations (N, Dx)\n        :param full_cov: bool, whether to compute the full covariance or just the diagonals\n        :return: mean, var, KL\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.OrthogonallyDecoupledBasis.__init__": [[59, 91], ["gaussian_bases.GaussianBasis.__init__", "len", "len", "gpflow.features.InducingPoints", "gpflow.features.InducingPoints", "gpflow.params.Parameter", "gpflow.params.Parameter", "gpflow.params.Parameter", "numpy.zeros", "numpy.zeros", "numpy.tile", "gpflow.params.dataholders.Minibatch", "gpflow.transforms.LowerTriangular", "numpy.arange", "numpy.eye", "len"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "num_latent", ",", "gamma", ",", "beta", ",", "\n", "a_gamma", "=", "None", ",", "a_beta", "=", "None", ",", "L", "=", "None", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "GaussianBasis", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "num_latent", "=", "num_latent", "\n", "\n", "self", ".", "M_beta", "=", "len", "(", "beta", ")", "\n", "self", ".", "M_gamma", "=", "len", "(", "gamma", ")", "\n", "\n", "self", ".", "gamma", "=", "InducingPoints", "(", "gamma", ")", "\n", "self", ".", "beta", "=", "InducingPoints", "(", "beta", ")", "\n", "\n", "if", "a_gamma", "is", "None", ":", "\n", "            ", "a_gamma", "=", "np", ".", "zeros", "(", "(", "self", ".", "M_gamma", ",", "self", ".", "num_latent", ")", ")", "\n", "\n", "", "if", "a_beta", "is", "None", ":", "\n", "            ", "a_beta", "=", "np", ".", "zeros", "(", "(", "self", ".", "M_beta", ",", "self", ".", "num_latent", ")", ")", "\n", "\n", "", "if", "L", "is", "None", ":", "\n", "            ", "L", "=", "np", ".", "tile", "(", "np", ".", "eye", "(", "self", ".", "M_beta", ")", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "self", ".", "a_gamma", "=", "Parameter", "(", "a_gamma", ")", "\n", "self", ".", "a_beta", "=", "Parameter", "(", "a_beta", ")", "\n", "self", ".", "L", "=", "Parameter", "(", "L", ",", "transform", "=", "LowerTriangular", "(", "self", ".", "M_beta", ",", "self", ".", "num_latent", ")", ")", "\n", "\n", "if", "minibatch_size", ":", "\n", "# This so we can take minibatches for the KL term, otherwise we have to compute a (M_gamma, M_gamma) matrix", "\n", "# NB we assume the data has seed 0, so the two minibatching objects are independent", "\n", "            ", "self", ".", "gamma_indices", "=", "Minibatch", "(", "np", ".", "arange", "(", "len", "(", "gamma", ")", ")", ",", "batch_size", "=", "minibatch_size", ",", "seed", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma_indices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.OrthogonallyDecoupledBasis._build_kernels_matrices": [[93, 153], ["gaussian_bases.OrthogonallyDecoupledBasis.beta.Kuu", "tensorflow.cholesky", "gaussian_bases.OrthogonallyDecoupledBasis.beta.Kuf", "gaussian_bases.OrthogonallyDecoupledBasis.gamma.Kuf", "gaussian_bases.OrthogonallyDecoupledBasis.gamma.Kuu", "gaussian_bases.OrthogonallyDecoupledBasis.gamma.Kuf", "tensorflow.cholesky_solve", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.concat", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "add_jitter", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "kernel.K", "kernel.Kdiag", "tensorflow.transpose", "kernel.Kdiag", "tensorflow.gather", "kernel.K", "kernel.K", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat", "tensorflow.eye", "tensorflow.transpose"], "methods", ["None"], ["", "", "@", "params_as_tensors", "\n", "def", "_build_kernels_matrices", "(", "self", ",", "kernel", ",", "X", ",", "full_cov", ")", ":", "\n", "# either (num_X, ) or (num_X, num_X)", "\n", "        ", "self", ".", "K_X", "=", "kernel", ".", "K", "(", "X", ")", "if", "full_cov", "else", "kernel", ".", "Kdiag", "(", "X", ")", "\n", "\n", "self", ".", "K_beta", "=", "self", ".", "beta", ".", "Kuu", "(", "kernel", ",", "jitter", "=", "settings", ".", "jitter", ")", "\n", "self", ".", "L_beta", "=", "tf", ".", "cholesky", "(", "self", ".", "K_beta", ")", "\n", "self", ".", "K_beta_X", "=", "self", ".", "beta", ".", "Kuf", "(", "kernel", ",", "X", ")", "\n", "self", ".", "K_gamma_beta", "=", "self", ".", "gamma", ".", "Kuf", "(", "kernel", ",", "self", ".", "beta", ".", "Z", ")", "\n", "self", ".", "K_gamma", "=", "self", ".", "gamma", ".", "Kuu", "(", "kernel", ",", "jitter", "=", "settings", ".", "jitter", ")", "\n", "self", ".", "K_gamma_X", "=", "self", ".", "gamma", ".", "Kuf", "(", "kernel", ",", "X", ")", "\n", "\n", "# (M_beta, M_gamma)", "\n", "self", ".", "inv_K_beta_K_beta_gamma", "=", "tf", ".", "cholesky_solve", "(", "self", ".", "L_beta", ",", "tf", ".", "transpose", "(", "self", ".", "K_gamma_beta", ")", ")", "\n", "\n", "K_gb_K_b_inv_K_bg_diag", "=", "tf", ".", "reduce_sum", "(", "self", ".", "K_gamma_beta", "*", "tf", ".", "transpose", "(", "self", ".", "inv_K_beta_K_beta_gamma", ")", ",", "1", ")", "\n", "D", "=", "kernel", ".", "Kdiag", "(", "self", ".", "gamma", ".", "Z", ")", "-", "K_gb_K_b_inv_K_bg_diag", "\n", "# (M_gamma, 1)", "\n", "self", ".", "D", "=", "D", "[", ":", ",", "None", "]", "\n", "\n", "if", "self", ".", "gamma_indices", "is", "None", ":", "\n", "# (M_gamma, M_gamma)", "\n", "            ", "K_gamma_minibatch", "=", "self", ".", "K_gamma", "\n", "\n", "# (M_gamma, M_beta)", "\n", "K_gamma_beta_minibatch", "=", "self", ".", "K_gamma_beta", "\n", "\n", "# (M_gamma, Dy)", "\n", "self", ".", "a_gamma2", "=", "self", ".", "a_gamma", "\n", "\n", "", "else", ":", "\n", "# (minibatch_gamma, Dx)", "\n", "            ", "gamma2", "=", "tf", ".", "gather", "(", "self", ".", "gamma", ".", "Z", ",", "self", ".", "gamma_indices", ")", "\n", "\n", "# (minibatch_gamma, M_gamma)", "\n", "K_gamma_minibatch", "=", "kernel", ".", "K", "(", "gamma2", ",", "self", ".", "gamma", ".", "Z", ")", "\n", "\n", "# (minibatch_gamma, M_beta)", "\n", "K_gamma_beta_minibatch", "=", "kernel", ".", "K", "(", "gamma2", ",", "self", ".", "beta", ".", "Z", ")", "\n", "\n", "\n", "", "self", ".", "K_alpha", "=", "tf", ".", "concat", "(", "[", "tf", ".", "concat", "(", "[", "K_gamma_minibatch", ",", "K_gamma_beta_minibatch", "]", ",", "1", ")", ",", "\n", "tf", ".", "concat", "(", "[", "tf", ".", "transpose", "(", "self", ".", "K_gamma_beta", ")", ",", "self", ".", "K_beta", "]", ",", "1", ")", "]", ",", "\n", "0", ")", "\n", "\n", "self", ".", "K_alpha_X", "=", "tf", ".", "concat", "(", "[", "self", ".", "K_gamma_X", ",", "self", ".", "K_beta_X", "]", ",", "0", ")", "\n", "\n", "# this is the full K_gamma - K_gamma_beta K_beta_inv K_beta_gamma. This is expensive and potentially unstable", "\n", "chol_A", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "L_beta", ",", "tf", ".", "transpose", "(", "self", ".", "K_gamma_beta", ")", ")", "\n", "A", "=", "tf", ".", "matmul", "(", "chol_A", ",", "chol_A", ",", "transpose_a", "=", "True", ")", "\n", "self", ".", "pred_beta_to_gamma", "=", "add_jitter", "(", "self", ".", "K_gamma", "-", "A", ")", "\n", "\n", "self", ".", "K_beta_tiled", "=", "tf", ".", "tile", "(", "self", ".", "K_beta", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "L_beta_tiled", "=", "tf", ".", "tile", "(", "self", ".", "L_beta", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "K_beta_X_tiled", "=", "tf", ".", "tile", "(", "self", ".", "K_beta_X", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "K_gamma_beta_tiled", "=", "tf", ".", "tile", "(", "self", ".", "K_gamma_beta", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "K_gamma_tiled", "=", "tf", ".", "tile", "(", "self", ".", "K_gamma", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "K_alpha_tiled", "=", "tf", ".", "tile", "(", "self", ".", "K_alpha", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "I", "=", "tf", ".", "tile", "(", "tf", ".", "eye", "(", "self", ".", "M_beta", ",", "dtype", "=", "tf", ".", "float64", ")", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.OrthogonallyDecoupledBasis._build_a": [[154, 160], ["tensorflow.cholesky_solve", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_build_a", "(", "self", ")", ":", "\n", "# this is separated out to distinguish TrulyDecoupled from Decoupled, and for preconditioning gamma", "\n", "        ", "a_gamma", "=", "self", ".", "a_gamma", "/", "self", ".", "D", "# preconditioning", "\n", "a_beta", "=", "tf", ".", "cholesky_solve", "(", "self", ".", "L_beta", ",", "self", ".", "a_beta", ")", "-", "tf", ".", "matmul", "(", "self", ".", "inv_K_beta_K_beta_gamma", ",", "a_gamma", ")", "\n", "# a_beta = self.a_beta - tf.matmul(self.inv_K_beta_K_beta_gamma, a_gamma)", "\n", "return", "a_gamma", ",", "a_beta", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.OrthogonallyDecoupledBasis.conditional_with_KL": [[161, 209], ["gaussian_bases.OrthogonallyDecoupledBasis._build_kernels_matrices", "gaussian_bases.OrthogonallyDecoupledBasis._build_a", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matrix_triangular_solve", "tensorflow.matrix_triangular_solve", "tensorflow.tile", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.concat", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.shape", "tensorflow.cast", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.matrix_diag_part", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.gather", "tensorflow.matrix_diag_part"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.OrthogonallyDecoupledBasis._build_kernels_matrices", "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.HybridDecoupledBasis._build_a"], ["", "@", "params_as_tensors", "\n", "def", "conditional_with_KL", "(", "self", ",", "kernel", ",", "X", ",", "full_cov", "=", "False", ")", ":", "\n", "        ", "self", ".", "_build_kernels_matrices", "(", "kernel", ",", "X", ",", "full_cov", ")", "\n", "\n", "a_gamma", ",", "a_beta", "=", "self", ".", "_build_a", "(", ")", "\n", "a", "=", "tf", ".", "concat", "(", "[", "a_gamma", ",", "a_beta", "]", ",", "0", ")", "\n", "if", "self", ".", "gamma_indices", "is", "None", ":", "\n", "            ", "a2", "=", "a", "\n", "", "else", ":", "\n", "            ", "N_batch", "=", "tf", ".", "shape", "(", "self", ".", "gamma_indices", ")", "[", "0", "]", "\n", "scale", "=", "self", ".", "M_gamma", "/", "tf", ".", "cast", "(", "N_batch", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "a2", "=", "tf", ".", "concat", "(", "[", "scale", "*", "tf", ".", "gather", "(", "a_gamma", ",", "self", ".", "gamma_indices", ")", ",", "a_beta", "]", ",", "0", ")", "\n", "\n", "\n", "", "KL", "=", "-", "0.5", "*", "tf", ".", "cast", "(", "self", ".", "M_beta", "*", "self", ".", "num_latent", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "KL", "-=", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "matrix_diag_part", "(", "self", ".", "L", ")", "**", "2", ")", ")", "\n", "KL", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "matrix_diag_part", "(", "self", ".", "L_beta", ")", ")", ")", "*", "self", ".", "num_latent", "\n", "KL", "+=", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "L_beta_tiled", ",", "self", ".", "L", ",", "lower", "=", "True", ")", ")", ")", "\n", "KL", "+=", "0.5", "*", "tf", ".", "reduce_sum", "(", "a2", "*", "tf", ".", "matmul", "(", "self", ".", "K_alpha", ",", "a", ")", ")", "\n", "\n", "####### mean", "\n", "# (M_alpha, num_X)^T * (M_alpha, num_latent) -> (num_X, num_latent)", "\n", "mean", "=", "tf", ".", "matmul", "(", "self", ".", "K_alpha_X", ",", "a", ",", "transpose_a", "=", "True", ")", "\n", "\n", "####### cov", "\n", "# delta_cov = K_X_beta ( K_beta^-1 S K_beta^-1 - K_beta^-1 ) K_beta_X", "\n", "# call the sqrts of the two terms C and A, so delta_cov = C^T C - A^T A", "\n", "A", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "L_beta", ",", "self", ".", "K_beta_X", ",", "lower", "=", "True", ")", "\n", "B", "=", "tf", ".", "matrix_triangular_solve", "(", "tf", ".", "transpose", "(", "self", ".", "L_beta", ")", ",", "A", ",", "lower", "=", "False", ")", "\n", "# C = tf.matmul(self.L, tf.tile(B[None, :, :], [self.num_latent, 1, 1]), transpose_a=True)", "\n", "SK", "=", "tf", ".", "matmul", "(", "self", ".", "L", ",", "self", ".", "L", ",", "transpose_b", "=", "True", ")", "-", "self", ".", "K_beta_tiled", "\n", "B_tiled", "=", "tf", ".", "tile", "(", "B", "[", "None", ",", ":", ",", ":", "]", ",", "[", "self", ".", "num_latent", ",", "1", ",", "1", "]", ")", "\n", "D", "=", "tf", ".", "matmul", "(", "SK", ",", "B_tiled", ")", "# might be more stable this way", "\n", "\n", "if", "full_cov", ":", "\n", "# (num_latent, num_X, num_X)", "\n", "# delta_cov = tf.matmul(C, C, transpose_a=True) - tf.matmul(A, A, transpose_a=True)[None, :, :]", "\n", "            ", "delta_cov", "=", "tf", ".", "matmul", "(", "B_tiled", ",", "D", ",", "transpose_a", "=", "True", ")", "# more stable", "\n", "", "else", ":", "\n", "# (num_latent, num_X)", "\n", "# delta_cov = tf.reduce_sum(tf.square(C), 1) - tf.reduce_sum(tf.square(A), 0)[None, :]", "\n", "            ", "delta_cov", "=", "tf", ".", "reduce_sum", "(", "B_tiled", "*", "D", ",", "1", ")", "\n", "\n", "# either (1, num_X) + (num_latent, num_X) or (1, num_X, num_X) + (num_latent, num_X, num_X)", "\n", "", "var", "=", "tf", ".", "expand_dims", "(", "self", ".", "K_X", ",", "0", ")", "+", "delta_cov", "\n", "var", "=", "tf", ".", "transpose", "(", "var", ")", "\n", "\n", "return", "mean", ",", "var", ",", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.__init__": [[223, 250], ["gaussian_bases.GaussianBasis.__init__", "gpflow.features.InducingPoints", "gpflow.features.InducingPoints", "len", "len", "gpflow.params.Parameter", "gpflow.params.Parameter", "gpflow.params.dataholders.Minibatch", "numpy.random.normal", "numpy.random.normal", "numpy.tile", "numpy.arange", "gpflow.transforms.LowerTriangular", "len", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "D", ",", "alpha", ",", "beta", ",", "\n", "a", "=", "None", ",", "chol_B", "=", "None", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "GaussianBasis", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "num_latent", "=", "D", "\n", "\n", "self", ".", "alpha", "=", "InducingPoints", "(", "alpha", ")", "\n", "self", ".", "beta", "=", "InducingPoints", "(", "beta", ")", "\n", "\n", "if", "minibatch_size", ":", "\n", "            ", "self", ".", "alpha_indices", "=", "Minibatch", "(", "np", ".", "arange", "(", "len", "(", "alpha", ")", ")", ",", "batch_size", "=", "minibatch_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "alpha_indices", "=", "None", "\n", "\n", "", "M_alpha", "=", "len", "(", "alpha", ")", "\n", "M_beta", "=", "len", "(", "beta", ")", "\n", "\n", "if", "a", "is", "None", ":", "\n", "            ", "a", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "M_alpha", ",", "D", ")", ",", "scale", "=", "1e-6", "/", "np", ".", "sqrt", "(", "M_alpha", ")", ")", "\n", "\n", "", "if", "chol_B", "is", "None", ":", "\n", "            ", "chol_B", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "M_beta", ",", "M_beta", ")", ",", "scale", "=", "1e-6", "/", "M_beta", ")", "\n", "chol_B", "=", "np", ".", "tile", "(", "chol_B", "[", "None", ",", ":", ",", ":", "]", ",", "[", "D", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "self", ".", "a", "=", "Parameter", "(", "a", ")", "\n", "self", ".", "chol_B", "=", "Parameter", "(", "chol_B", ",", "transform", "=", "LowerTriangular", "(", "M_beta", ",", "D", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL": [[251, 304], ["gaussian_bases.DecoupledBasis.beta.Kuu", "tensorflow.transpose", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.matmul", "tensorflow.cholesky", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.transpose", "gaussian_bases.DecoupledBasis.alpha.Kuf", "tensorflow.matmul", "tensorflow.reduce_sum", "gaussian_bases.DecoupledBasis.beta.Kuf", "tensorflow.gather", "tensorflow.gather", "tensorflow.cast", "tensorflow.cast", "tensorflow.transpose", "gaussian_bases.DecoupledBasis.alpha.Kuu", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.matrix_solve", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.reduce_sum", "gaussian_bases.DecoupledBasis.alpha.Kuf", "tensorflow.shape", "tensorflow.shape", "tensorflow.eye", "tensorflow.transpose", "tensorflow.matmul", "kernel.K", "kernel.Kdiag", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.matrix_diag_part", "tensorflow.shape", "tensorflow.shape", "tensorflow.matmul"], "methods", ["None"], ["", "@", "params_as_tensors", "\n", "def", "conditional_with_KL", "(", "self", ",", "kernel", ",", "X", ",", "full_cov", "=", "False", ")", ":", "\n", "        ", "K_beta", "=", "self", ".", "beta", ".", "Kuu", "(", "kernel", ",", "jitter", "=", "settings", ".", "jitter", ")", "\n", "K_X_beta", "=", "tf", ".", "transpose", "(", "self", ".", "beta", ".", "Kuf", "(", "kernel", ",", "X", ")", ")", "\n", "\n", "a1", "=", "self", ".", "a", "\n", "\n", "if", "self", ".", "alpha_indices", "is", "not", "None", ":", "\n", "            ", "a2", "=", "tf", ".", "gather", "(", "self", ".", "a", ",", "self", ".", "alpha_indices", ")", "\n", "alpha2", "=", "tf", ".", "gather", "(", "self", ".", "alpha", ".", "Z", ",", "self", ".", "alpha_indices", ")", "\n", "scale_a2", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "self", ".", "a", ")", "[", "0", "]", ",", "dtype", "=", "settings", ".", "float_type", ")", "\n", "scale_a2", "/=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "self", ".", "alpha_indices", ")", "[", "0", "]", ",", "dtype", "=", "settings", ".", "float_type", ")", "\n", "K_alpha", "=", "tf", ".", "transpose", "(", "self", ".", "alpha", ".", "Kuf", "(", "kernel", ",", "alpha2", ")", ")", "\n", "", "else", ":", "\n", "            ", "a2", "=", "self", ".", "a", "\n", "scale_a2", "=", "1.", "\n", "K_alpha", "=", "self", ".", "alpha", ".", "Kuu", "(", "kernel", ")", "\n", "\n", "", "Dy", ",", "M_beta", "=", "tf", ".", "shape", "(", "self", ".", "a", ")", "[", "1", "]", ",", "tf", ".", "shape", "(", "K_beta", ")", "[", "0", "]", "\n", "K_beta_tiled", "=", "tf", ".", "tile", "(", "K_beta", "[", "None", ",", ":", ",", ":", "]", ",", "[", "Dy", ",", "1", ",", "1", "]", ")", "\n", "K_X_beta_tiled", "=", "tf", ".", "tile", "(", "K_X_beta", "[", "None", ",", ":", ",", ":", "]", ",", "[", "Dy", ",", "1", ",", "1", "]", ")", "\n", "\n", "H", "=", "tf", ".", "tile", "(", "tf", ".", "eye", "(", "M_beta", ",", "dtype", "=", "settings", ".", "float_type", ")", "[", "None", ",", ":", ",", ":", "]", ",", "[", "Dy", ",", "1", ",", "1", "]", ")", "\n", "H", "+=", "tf", ".", "matmul", "(", "self", ".", "chol_B", ",", "tf", ".", "matmul", "(", "K_beta_tiled", ",", "self", ".", "chol_B", ")", ",", "transpose_a", "=", "True", ")", "\n", "\n", "chol_H", "=", "tf", ".", "cholesky", "(", "H", ")", "\n", "chol_H_inv_LT", "=", "tf", ".", "matrix_triangular_solve", "(", "chol_H", ",", "tf", ".", "transpose", "(", "self", ".", "chol_B", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "# LHinvLT = tf.matmul(chol_H_inv_LT, chol_H_inv_LT, transpose_a=True)", "\n", "\n", "LHinvLT", "=", "tf", ".", "matmul", "(", "self", ".", "chol_B", ",", "tf", ".", "matrix_solve", "(", "H", ",", "tf", ".", "transpose", "(", "self", ".", "chol_B", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", ")", "# Dy,M,M", "\n", "\n", "if", "full_cov", ":", "\n", "            ", "KBK", "=", "tf", ".", "matmul", "(", "K_X_beta_tiled", ",", "tf", ".", "matmul", "(", "LHinvLT", ",", "K_X_beta_tiled", ",", "transpose_b", "=", "True", ")", ")", "\n", "Knn", "=", "kernel", ".", "K", "(", "X", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "\n", "", "else", ":", "\n", "            ", "Knn", "=", "kernel", ".", "Kdiag", "(", "X", ")", "[", "None", ",", ":", "]", "# 1N", "\n", "A", "=", "tf", ".", "matmul", "(", "LHinvLT", ",", "K_X_beta_tiled", ",", "transpose_b", "=", "True", ")", "# Dy,M,N", "\n", "KBK", "=", "tf", ".", "transpose", "(", "K_X_beta_tiled", ",", "[", "0", ",", "2", ",", "1", "]", ")", "*", "A", "# Dy,M,N", "\n", "KBK", "=", "tf", ".", "reduce_sum", "(", "KBK", ",", "1", ")", "# Dy,N", "\n", "\n", "", "var", "=", "Knn", "-", "KBK", "# either Dy,N,N or Dy,N", "\n", "\n", "var", "=", "tf", ".", "transpose", "(", "var", ")", "\n", "\n", "K_alpha_X", "=", "self", ".", "alpha", ".", "Kuf", "(", "kernel", ",", "X", ")", "\n", "mean", "=", "tf", ".", "matmul", "(", "K_alpha_X", ",", "a1", ",", "transpose_a", "=", "True", ")", "\n", "\n", "KL", "=", "0.5", "*", "tf", ".", "reduce_sum", "(", "a2", "*", "tf", ".", "matmul", "(", "K_alpha", ",", "a1", ")", ")", "*", "scale_a2", "\n", "KL", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "matrix_diag_part", "(", "chol_H", ")", ")", ")", "\n", "KL", "-=", "0.5", "*", "tf", ".", "reduce_sum", "(", "K_beta_tiled", "*", "LHinvLT", ")", "\n", "\n", "return", "mean", ",", "var", ",", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.HybridDecoupledBasis._build_a": [[318, 320], ["tensorflow.cholesky_solve"], "methods", ["None"], ["def", "_build_a", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "a_gamma", ",", "tf", ".", "cholesky_solve", "(", "self", ".", "L_beta", ",", "self", ".", "a_beta", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.Variational_GP.__init__": [[28, 42], ["gpflow.models.GPModel.__init__", "gpflow.params.dataholders.DataHolder", "gpflow.params.dataholders.DataHolder", "gpflow.params.dataholders.Minibatch", "gpflow.params.dataholders.Minibatch"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "basis", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "mean_function", "=", "None", ",", "**", "kw", ")", ":", "\n", "        ", "if", "minibatch_size", "is", "None", "or", "minibatch_size", ">=", "X", ".", "shape", "[", "0", "]", ":", "\n", "            ", "X", "=", "DataHolder", "(", "X", ")", "\n", "Y", "=", "DataHolder", "(", "Y", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "Minibatch", "(", "X", ",", "batch_size", "=", "minibatch_size", ",", "seed", "=", "0", ")", "\n", "Y", "=", "Minibatch", "(", "Y", ",", "batch_size", "=", "minibatch_size", ",", "seed", "=", "0", ")", "\n", "\n", "", "GPModel", ".", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "mean_function", ",", "basis", ".", "num_latent", ",", "**", "kw", ")", "\n", "\n", "self", ".", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "basis", "=", "basis", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.Variational_GP._build_likelihood": [[43, 52], ["odvgp.Variational_GP.basis.conditional_with_KL", "odvgp.Variational_GP.likelihood.variational_expectations", "tensorflow.cast", "tensorflow.cast", "tensorflow.shape", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL"], ["", "@", "params_as_tensors", "\n", "def", "_build_likelihood", "(", "self", ")", ":", "\n", "        ", "fmean", ",", "fvar", ",", "KL", "=", "self", ".", "basis", ".", "conditional_with_KL", "(", "self", ".", "kern", ",", "self", ".", "X", ",", "full_cov", "=", "False", ")", "\n", "\n", "var_exp", "=", "self", ".", "likelihood", ".", "variational_expectations", "(", "fmean", ",", "fvar", ",", "self", ".", "Y", ")", "\n", "\n", "scale", "=", "tf", ".", "cast", "(", "self", ".", "num_data", ",", "settings", ".", "float_type", ")", "\n", "scale", "/=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "self", ".", "X", ")", "[", "0", "]", ",", "settings", ".", "float_type", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "var_exp", ")", "*", "scale", "-", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.Variational_GP._build_predict": [[53, 57], ["odvgp.Variational_GP.basis.conditional_with_KL", "odvgp.Variational_GP.mean_function"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL"], ["", "@", "params_as_tensors", "\n", "def", "_build_predict", "(", "self", ",", "Xnew", ",", "full_cov", "=", "False", ")", ":", "\n", "        ", "mu", ",", "var", ",", "_", "=", "self", ".", "basis", ".", "conditional_with_KL", "(", "self", ".", "kern", ",", "Xnew", ",", "full_cov", "=", "full_cov", ")", "\n", "return", "mu", "+", "self", ".", "mean_function", "(", "Xnew", ")", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.ODVGP.__init__": [[74, 87], ["gaussian_bases.OrthogonallyDecoupledBasis", "odvgp.Variational_GP.__init__"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "alpha", ",", "beta", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "mean_function", "=", "None", ",", "\n", "gamma_minibatch_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "num_latent", "=", "kwargs", "[", "'num_latent'", "]", "if", "'num_latent'", "in", "kwargs", "else", "Y", ".", "shape", "[", "1", "]", "\n", "\n", "basis", "=", "OrthogonallyDecoupledBasis", "(", "num_latent", ",", "alpha", ",", "beta", ",", "minibatch_size", "=", "gamma_minibatch_size", ")", "\n", "\n", "Variational_GP", ".", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "basis", ",", "\n", "minibatch_size", "=", "minibatch_size", ",", "\n", "mean_function", "=", "mean_function", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.DVGP.__init__": [[100, 113], ["gaussian_bases.DecoupledBasis", "odvgp.Variational_GP.__init__"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "alpha", ",", "beta", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "mean_function", "=", "None", ",", "\n", "gamma_minibatch_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "num_latent", "=", "kwargs", "[", "'num_latent'", "]", "if", "'num_latent'", "in", "kwargs", "else", "Y", ".", "shape", "[", "1", "]", "\n", "\n", "basis", "=", "DecoupledBasis", "(", "num_latent", ",", "alpha", ",", "beta", ",", "minibatch_size", "=", "gamma_minibatch_size", ")", "\n", "\n", "Variational_GP", ".", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "basis", ",", "\n", "minibatch_size", "=", "minibatch_size", ",", "\n", "mean_function", "=", "mean_function", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.odvgp.HDVGP.__init__": [[126, 139], ["gaussian_bases.HybridDecoupledBasis", "odvgp.Variational_GP.__init__"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__"], ["def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "alpha", ",", "beta", ",", "\n", "minibatch_size", "=", "None", ",", "\n", "mean_function", "=", "None", ",", "\n", "gamma_minibatch_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "num_latent", "=", "kwargs", "[", "'num_latent'", "]", "if", "'num_latent'", "in", "kwargs", "else", "Y", ".", "shape", "[", "1", "]", "\n", "\n", "basis", "=", "HybridDecoupledBasis", "(", "num_latent", ",", "alpha", ",", "beta", ",", "minibatch_size", "=", "gamma_minibatch_size", ")", "\n", "\n", "Variational_GP", ".", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "basis", ",", "\n", "minibatch_size", "=", "minibatch_size", ",", "\n", "mean_function", "=", "mean_function", ",", "\n", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_minibatch.test_minibatch": [[22, 64], ["pytest.mark.parametrize", "numpy.random.seed", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "gpflow.kernels.RBF", "gpflow.likelihoods.Gaussian", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "Model", "Model", "Model.compute_log_likelihood", "print", "numpy.average", "Model.compute_log_likelihood", "numpy.std", "range"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'Model'", ",", "[", "ODVGP", ",", "DVGP", ",", "HDVGP", "]", ")", "\n", "def", "test_minibatch", "(", "Model", ")", ":", "\n", "\n", "    ", "batch_size", "=", "9", "\n", "N", "=", "10", "\n", "Dx", ",", "Dy", "=", "3", ",", "2", "\n", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "Dx", ")", "\n", "Y", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "Dy", ")", "\n", "M_gamma", ",", "M_beta", "=", "3", ",", "2", "\n", "\n", "gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dx", ")", "\n", "beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dx", ")", "\n", "\n", "kern", "=", "RBF", "(", "Dx", ")", "\n", "lik", "=", "Gaussian", "(", ")", "\n", "lik", ".", "variance", "=", "0.1", "\n", "\n", "a_gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dy", ")", "\n", "a_beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dy", ")", "\n", "L", "=", "np", ".", "random", ".", "randn", "(", "Dy", ",", "M_beta", ",", "M_beta", ")", "\n", "\n", "model_batch", "=", "Model", "(", "X", ",", "Y", ",", "kern", ",", "lik", ",", "gamma", ",", "beta", ",", "\n", "minibatch_size", "=", "batch_size", ",", "gamma_minibatch_size", "=", "batch_size", ")", "\n", "model_full", "=", "Model", "(", "X", ",", "Y", ",", "kern", ",", "lik", ",", "gamma", ",", "beta", ")", "\n", "\n", "for", "model", "in", "[", "model_batch", ",", "model_full", "]", ":", "\n", "        ", "model", ".", "basis", ".", "a_beta", "=", "a_beta", "\n", "model", ".", "basis", ".", "a_gamma", "=", "a_gamma", "\n", "model", ".", "basis", ".", "L", "=", "L", "\n", "\n", "", "S", "=", "1000", "\n", "L_batch", "=", "[", "model_batch", ".", "compute_log_likelihood", "(", ")", "for", "_", "in", "range", "(", "S", ")", "]", "\n", "L_full", "=", "model_full", ".", "compute_log_likelihood", "(", ")", "\n", "print", "(", "L_batch", ")", "\n", "mean", "=", "np", ".", "average", "(", "L_batch", ")", "\n", "std_err", "=", "np", ".", "std", "(", "L_batch", ")", "/", "S", "**", "0.5", "\n", "\n", "# check within 2 std, which is about a 95% CI", "\n", "assert", "L_full", "<", "mean", "+", "std_err", "*", "2", "\n", "assert", "L_full", ">", "mean", "-", "std_err", "*", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_decoupled_KL": [[29, 40], ["numpy.linalg.inv", "numpy.eye", "numpy.sum", "numpy.sum", "numpy.linalg.slogdet", "numpy.linalg.inv"], "function", ["None"], ["def", "ref_decoupled_KL", "(", "a", ",", "B", ",", "K_alpha", ",", "K_beta", ")", ":", "\n", "    ", "\"\"\"\n    eq 9 of Cheng and Boots 2017\n    \"\"\"", "\n", "B_inv", "=", "np", ".", "linalg", ".", "inv", "(", "B", ")", "\n", "I", "=", "np", ".", "eye", "(", "K_beta", ".", "shape", "[", "0", "]", ")", "\n", "\n", "KL", "=", "0.5", "*", "np", ".", "sum", "(", "a", "*", "(", "K_alpha", "@", "a", ")", ")", "\n", "KL", "+=", "0.5", "*", "np", ".", "linalg", ".", "slogdet", "(", "I", "+", "K_beta", "@", "B", ")", "[", "1", "]", "\n", "KL", "-=", "0.5", "*", "np", ".", "sum", "(", "K_beta", "*", "np", ".", "linalg", ".", "inv", "(", "B_inv", "+", "K_beta", ")", ")", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_orthogonally_decoupled_KL": [[41, 56], ["numpy.linalg.inv", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.slogdet", "numpy.linalg.slogdet"], "function", ["None"], ["", "def", "ref_orthogonally_decoupled_KL", "(", "a_gamma", ",", "a_beta", ",", "S", ",", "K_gamma", ",", "K_gamma_beta", ",", "K_beta", ")", ":", "\n", "# appendix A1", "\n", "    ", "KL", "=", "-", "0.5", "*", "K_beta", ".", "shape", "[", "0", "]", "\n", "\n", "K_beta_inv", "=", "np", ".", "linalg", ".", "inv", "(", "K_beta", ")", "\n", "KL", "+=", "0.5", "*", "np", ".", "sum", "(", "a_gamma", "*", "(", "K_gamma", "@", "a_gamma", ")", ")", "\n", "KL", "+=", "0.5", "*", "np", ".", "sum", "(", "a_beta", "*", "(", "K_beta", "@", "a_beta", ")", ")", "\n", "KL", "-=", "0.5", "*", "np", ".", "sum", "(", "a_gamma", "*", "(", "K_gamma_beta", "@", "K_beta_inv", "@", "K_gamma_beta", ".", "T", "@", "a_gamma", ")", ")", "\n", "\n", "KL", "+=", "0.5", "*", "np", ".", "linalg", ".", "slogdet", "(", "K_beta", ")", "[", "1", "]", "\n", "KL", "-=", "0.5", "*", "np", ".", "linalg", ".", "slogdet", "(", "S", ")", "[", "1", "]", "\n", "\n", "KL", "+=", "0.5", "*", "np", ".", "sum", "(", "S", "*", "K_beta_inv", ")", "\n", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_hybrid_KL": [[57, 72], ["numpy.linalg.inv", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.slogdet"], "function", ["None"], ["", "def", "ref_hybrid_KL", "(", "a", ",", "m", ",", "S", ",", "K_alpha", ",", "K_alpha_tilde", ",", "K_tilde", ")", ":", "\n", "    ", "\"\"\"\n    eq 14 of Cheng and Boots 2017\n    \"\"\"", "\n", "K_inv", "=", "np", ".", "linalg", ".", "inv", "(", "K_tilde", ")", "\n", "KL", "=", "0.5", "*", "np", ".", "sum", "(", "m", "*", "(", "K_inv", "@", "m", ")", ")", "\n", "KL", "+=", "np", ".", "sum", "(", "m", "*", "(", "K_inv", "@", "K_alpha_tilde", ".", "T", "@", "a", ")", ")", "\n", "KL", "+=", "0.5", "*", "np", ".", "sum", "(", "a", "*", "(", "K_alpha", "@", "a", ")", ")", "\n", "\n", "KL", "-=", "0.5", "*", "np", ".", "linalg", ".", "slogdet", "(", "K_inv", "@", "S", ")", "[", "1", "]", "# in eq 14 the factor of 0.5 is missing", "\n", "\n", "KL", "+=", "0.5", "*", "np", ".", "sum", "(", "S", "*", "K_inv", ")", "\n", "\n", "KL", "-=", "0.5", "*", "K_tilde", ".", "shape", "[", "0", "]", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.test_decoupled_kl": [[74, 99], ["numpy.random.randn", "numpy.random.randn", "gpflow.kernels.Matern52", "gpflow.kernels.Matern52.compute_K_symm", "gpflow.kernels.Matern52.compute_K_symm", "numpy.random.randn", "numpy.random.randn", "numpy.linalg.cholesky", "sum", "odvgp.gaussian_bases.DecoupledBasis", "odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL", "gpflow.test_util.session_tf.run", "numpy.testing.assert_allclose", "numpy.einsum", "numpy.empty", "test_kl.ref_decoupled_KL", "numpy.eye", "zip"], "function", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL", "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_decoupled_KL"], ["", "def", "test_decoupled_kl", "(", "session_tf", ")", ":", "\n", "    ", "Dx", "=", "2", "\n", "Dy", "=", "3", "\n", "M_alpha", "=", "10", "\n", "M_beta", "=", "11", "\n", "\n", "alpha", "=", "np", ".", "random", ".", "randn", "(", "M_alpha", ",", "Dx", ")", "\n", "beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dx", ")", "\n", "\n", "kernel", "=", "Matern52", "(", "Dx", ")", "\n", "K_alpha", "=", "kernel", ".", "compute_K_symm", "(", "alpha", ")", "\n", "K_beta", "=", "kernel", ".", "compute_K_symm", "(", "beta", ")", "\n", "\n", "a", "=", "np", ".", "random", ".", "randn", "(", "M_alpha", ",", "Dy", ")", "\n", "U", "=", "np", ".", "random", ".", "randn", "(", "Dy", ",", "M_beta", ",", "M_beta", ")", "\n", "B", "=", "np", ".", "einsum", "(", "'dnN,dmN->dnm'", ",", "U", ",", "U", ")", "+", "1e-6", "*", "np", ".", "eye", "(", "M_beta", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "chol_B", "=", "np", ".", "linalg", ".", "cholesky", "(", "B", ")", "\n", "\n", "KL_ref", "=", "sum", "(", "[", "ref_decoupled_KL", "(", "_a", ",", "_B", ",", "K_alpha", ",", "K_beta", ")", "for", "_a", ",", "_B", "in", "zip", "(", "a", ".", "T", ",", "B", ")", "]", ")", "\n", "\n", "basis", "=", "DecoupledBasis", "(", "Dy", ",", "alpha", ",", "beta", ",", "a", "=", "a", ",", "chol_B", "=", "chol_B", ")", "\n", "_", ",", "_", ",", "kl", "=", "basis", ".", "conditional_with_KL", "(", "kernel", ",", "np", ".", "empty", "(", "(", "1", ",", "Dx", ")", ")", ")", "\n", "KL", "=", "session_tf", ".", "run", "(", "kl", ")", "\n", "\n", "assert_allclose", "(", "KL", ",", "KL_ref", ",", "rtol", "=", "1e-6", ",", "atol", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.test_orthogonally_decoupled_kl": [[100, 134], ["numpy.random.randn", "numpy.random.randn", "gpflow.kernels.Matern52", "gpflow.kernels.Matern52.compute_K_symm", "gpflow.kernels.Matern52.compute_K", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.linalg.cholesky", "sum", "odvgp.gaussian_bases.OrthogonallyDecoupledBasis", "odvgp.gaussian_bases.OrthogonallyDecoupledBasis.conditional_with_KL", "gpflow.test_util.session_tf.run", "print", "numpy.testing.assert_allclose", "gpflow.kernels.Matern52.compute_K_symm", "numpy.einsum", "gpflow.kernels.Matern52.compute_Kdiag", "numpy.sum", "numpy.empty", "numpy.eye", "test_kl.ref_orthogonally_decoupled_KL", "numpy.eye", "zip", "numpy.linalg.solve"], "function", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL", "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_orthogonally_decoupled_KL"], ["", "def", "test_orthogonally_decoupled_kl", "(", "session_tf", ")", ":", "\n", "    ", "Dx", "=", "2", "\n", "Dy", "=", "3", "\n", "M_gamma", "=", "4", "\n", "M_beta", "=", "5", "\n", "\n", "gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dx", ")", "\n", "beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dx", ")", "\n", "\n", "kernel", "=", "Matern52", "(", "Dx", ")", "\n", "\n", "K_gamma", "=", "kernel", ".", "compute_K_symm", "(", "gamma", ")", "\n", "K_beta", "=", "kernel", ".", "compute_K_symm", "(", "beta", ")", "+", "np", ".", "eye", "(", "M_beta", ")", "*", "settings", ".", "jitter", "\n", "K_gamma_beta", "=", "kernel", ".", "compute_K", "(", "gamma", ",", "beta", ")", "\n", "\n", "a_gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dy", ")", "\n", "a_beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dy", ")", "\n", "U", "=", "np", ".", "random", ".", "randn", "(", "Dy", ",", "M_beta", ",", "M_beta", ")", "\n", "S", "=", "np", ".", "einsum", "(", "'dnN,dmN->dnm'", ",", "U", ",", "U", ")", "+", "settings", ".", "jitter", "*", "np", ".", "eye", "(", "M_beta", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "chol_S", "=", "np", ".", "linalg", ".", "cholesky", "(", "S", ")", "\n", "\n", "KL_ref", "=", "sum", "(", "[", "ref_orthogonally_decoupled_KL", "(", "_a_gamma", ",", "_a_beta", ",", "_S", ",", "K_gamma", ",", "K_gamma_beta", ",", "K_beta", ")", "\n", "for", "_a_gamma", ",", "_a_beta", ",", "_S", "in", "zip", "(", "a_gamma", ".", "T", ",", "a_beta", ".", "T", ",", "S", ")", "]", ")", "\n", "\n", "# undo the pre-conditioning", "\n", "D", "=", "kernel", ".", "compute_Kdiag", "(", "gamma", ")", "-", "np", ".", "sum", "(", "K_gamma_beta", ".", "T", "*", "np", ".", "linalg", ".", "solve", "(", "K_beta", ",", "K_gamma_beta", ".", "T", ")", ",", "0", ")", "\n", "\n", "basis", "=", "OrthogonallyDecoupledBasis", "(", "Dy", ",", "gamma", ",", "beta", ",", "\n", "a_gamma", "=", "a_gamma", "*", "D", "[", ":", ",", "None", "]", ",", "a_beta", "=", "K_beta", "@", "a_beta", ",", "L", "=", "chol_S", ")", "\n", "\n", "_", ",", "_", ",", "kl", "=", "basis", ".", "conditional_with_KL", "(", "kernel", ",", "np", ".", "empty", "(", "(", "1", ",", "Dx", ")", ")", ")", "\n", "KL", "=", "session_tf", ".", "run", "(", "kl", ")", "\n", "print", "(", "KL", "-", "KL_ref", ")", "\n", "assert_allclose", "(", "KL", ",", "KL_ref", ",", "rtol", "=", "1e-6", ",", "atol", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.test_hybrid_kl": [[135, 165], ["numpy.random.randn", "numpy.random.randn", "gpflow.kernels.Matern52", "gpflow.kernels.Matern52.compute_K_symm", "gpflow.kernels.Matern52.compute_K", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.linalg.cholesky", "sum", "odvgp.gaussian_bases.HybridDecoupledBasis", "odvgp.gaussian_bases.HybridDecoupledBasis.conditional_with_KL", "gpflow.test_util.session_tf.run", "numpy.testing.assert_allclose", "gpflow.kernels.Matern52.compute_K_symm", "numpy.einsum", "numpy.empty", "numpy.eye", "test_kl.ref_hybrid_KL", "numpy.eye", "zip"], "function", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.odvgp.gaussian_bases.DecoupledBasis.conditional_with_KL", "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.tests.test_kl.ref_hybrid_KL"], ["", "def", "test_hybrid_kl", "(", "session_tf", ")", ":", "\n", "    ", "Dx", "=", "2", "\n", "Dy", "=", "3", "\n", "M_gamma", "=", "4", "\n", "M_beta", "=", "5", "\n", "\n", "gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dx", ")", "\n", "beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dx", ")", "\n", "\n", "kernel", "=", "Matern52", "(", "Dx", ")", "\n", "\n", "K_gamma", "=", "kernel", ".", "compute_K_symm", "(", "gamma", ")", "\n", "K_beta", "=", "kernel", ".", "compute_K_symm", "(", "beta", ")", "+", "np", ".", "eye", "(", "M_beta", ")", "*", "1e-6", "\n", "K_gamma_beta", "=", "kernel", ".", "compute_K", "(", "gamma", ",", "beta", ")", "\n", "\n", "a_gamma", "=", "np", ".", "random", ".", "randn", "(", "M_gamma", ",", "Dy", ")", "\n", "a_beta", "=", "np", ".", "random", ".", "randn", "(", "M_beta", ",", "Dy", ")", "\n", "U", "=", "np", ".", "random", ".", "randn", "(", "Dy", ",", "M_beta", ",", "M_beta", ")", "\n", "S", "=", "np", ".", "einsum", "(", "'dnN,dmN->dnm'", ",", "U", ",", "U", ")", "+", "1e-6", "*", "np", ".", "eye", "(", "M_beta", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "chol_S", "=", "np", ".", "linalg", ".", "cholesky", "(", "S", ")", "\n", "\n", "KL_ref", "=", "sum", "(", "[", "ref_hybrid_KL", "(", "_a_gamma", ",", "_a_beta", ",", "_S", ",", "K_gamma", ",", "K_gamma_beta", ",", "K_beta", ")", "\n", "for", "_a_gamma", ",", "_a_beta", ",", "_S", "in", "zip", "(", "a_gamma", ".", "T", ",", "a_beta", ".", "T", ",", "S", ")", "]", ")", "\n", "\n", "basis", "=", "HybridDecoupledBasis", "(", "Dy", ",", "gamma", ",", "beta", ",", "\n", "a_gamma", "=", "a_gamma", ",", "a_beta", "=", "a_beta", ",", "L", "=", "chol_S", ")", "\n", "\n", "_", ",", "_", ",", "kl", "=", "basis", ".", "conditional_with_KL", "(", "kernel", ",", "np", ".", "empty", "(", "(", "1", ",", "Dx", ")", ")", ")", "\n", "KL", "=", "session_tf", ".", "run", "(", "kl", ")", "\n", "assert_allclose", "(", "KL", ",", "KL_ref", ",", "rtol", "=", "1e-6", ",", "atol", "=", "1e-6", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.regression.Model_ODVGP.__init__": [[60, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "M_gamma", ",", "M_beta", ")", ":", "\n", "        ", "self", ".", "M_gamma", "=", "M_gamma", "\n", "self", ".", "M_beta", "=", "M_beta", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.regression.Model_ODVGP.init_model": [[65, 80], ["gpflow.kernels.Matern52", "gpflow.likelihoods.Gaussian", "Model", "regression.Model_ODVGP.model.enquire_session", "numpy.empty", "scipy.cluster.vq.kmeans2", "scipy.cluster.vq.kmeans2"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "Model", ",", "X", ",", "Y", ")", ":", "\n", "        ", "Dx", "=", "X", ".", "shape", "[", "1", "]", "\n", "kern", "=", "Matern52", "(", "Dx", ",", "lengthscales", "=", "SETTINGS", ".", "lengthscales", "*", "Dx", "**", "0.5", ")", "\n", "lik", "=", "Gaussian", "(", ")", "\n", "lik", ".", "variance", "=", "SETTINGS", ".", "likelihood_variance", "\n", "\n", "gamma", "=", "kmeans2", "(", "X", ",", "self", ".", "M_gamma", ",", "minit", "=", "'points'", ")", "[", "0", "]", "if", "self", ".", "M_gamma", ">", "0", "else", "np", ".", "empty", "(", "(", "0", ",", "Dx", ")", ")", "\n", "beta", "=", "kmeans2", "(", "X", ",", "self", ".", "M_beta", ",", "minit", "=", "'points'", ")", "[", "0", "]", "\n", "\n", "gamma_minibatch_size", "=", "SETTINGS", ".", "gamma_minibatch_size", "if", "self", ".", "M_gamma", ">", "0", "else", "None", "\n", "\n", "self", ".", "model", "=", "Model", "(", "X", ",", "Y", ",", "kern", ",", "lik", ",", "gamma", ",", "beta", ",", "\n", "minibatch_size", "=", "SETTINGS", ".", "minibatch_size", ",", "\n", "gamma_minibatch_size", "=", "gamma_minibatch_size", ")", "\n", "self", ".", "sess", "=", "self", ".", "model", ".", "enquire_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.regression.Model_ODVGP.fit": [[81, 98], ["regression.Model_ODVGP.model.basis.a_beta.set_trainable", "gpflow.training.NatGradOptimizer().make_optimize_tensor", "gpflow.training.AdamOptimizer().make_optimize_tensor", "range", "regression.Model_ODVGP.model.anchor", "regression.Model_ODVGP.init_model", "regression.Model_ODVGP.sess.run", "regression.Model_ODVGP.sess.run", "gpflow.training.NatGradOptimizer", "gpflow.training.AdamOptimizer", "print", "regression.Model_ODVGP.sess.run"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.init_model"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "init_model", "(", "ODVGP", ",", "X", ",", "Y", ")", "\n", "\n", "", "var_list", "=", "[", "[", "self", ".", "model", ".", "basis", ".", "a_beta", ",", "self", ".", "model", ".", "basis", ".", "L", "]", "]", "\n", "self", ".", "model", ".", "basis", ".", "a_beta", ".", "set_trainable", "(", "False", ")", "\n", "\n", "op_ng", "=", "NatGradOptimizer", "(", "SETTINGS", ".", "ng_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ",", "var_list", "=", "var_list", ")", "\n", "op_adam", "=", "AdamOptimizer", "(", "SETTINGS", ".", "adam_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ")", "\n", "for", "it", "in", "range", "(", "SETTINGS", ".", "iterations", ")", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "op_ng", ")", "\n", "self", ".", "sess", ".", "run", "(", "op_adam", ")", "\n", "\n", "if", "it", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'{} {:.4f}'", ".", "format", "(", "it", ",", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "likelihood_tensor", ")", ")", ")", "\n", "\n", "", "", "self", ".", "model", ".", "anchor", "(", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.regression.Model_ODVGP.predict": [[99, 101], ["regression.Model_ODVGP.model.predict_y"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "Xs", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict_y", "(", "Xs", ",", "session", "=", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.regression.Model_DVGP.fit": [[117, 129], ["gpflow.training.AdamOptimizer().make_optimize_tensor", "range", "regression.Model_DVGP.model.anchor", "regression.Model_DVGP.init_model", "regression.Model_DVGP.sess.run", "gpflow.training.AdamOptimizer", "print", "regression.Model_DVGP.sess.run"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.init_model"], ["def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "init_model", "(", "DVGP", ",", "X", ",", "Y", ")", "\n", "\n", "", "op_adam", "=", "AdamOptimizer", "(", "SETTINGS", ".", "adam_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ")", "\n", "for", "it", "in", "range", "(", "SETTINGS", ".", "iterations", ")", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "op_adam", ")", "\n", "\n", "if", "it", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'{} {:.4f}'", ".", "format", "(", "it", ",", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "likelihood_tensor", ")", ")", ")", "\n", "\n", "", "", "self", ".", "model", ".", "anchor", "(", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.__init__": [[65, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "M_gamma", ",", "M_beta", ")", ":", "\n", "        ", "self", ".", "M_gamma", "=", "M_gamma", "\n", "self", ".", "M_beta", "=", "M_beta", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.init_model": [[70, 88], ["gpflow.kernels.Matern52", "len", "Model", "classification.Model_ODVGP.model.enquire_session", "list", "gpflow.likelihoods.Bernoulli", "gpflow.likelihoods.MultiClass", "numpy.empty", "scipy.cluster.vq.kmeans2", "set", "scipy.cluster.vq.kmeans2", "Y.flatten().astype", "Y.flatten"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "Model", ",", "X", ",", "Y", ")", ":", "\n", "        ", "Dx", "=", "X", ".", "shape", "[", "1", "]", "\n", "kern", "=", "Matern52", "(", "Dx", ",", "lengthscales", "=", "SETTINGS", ".", "lengthscales", "*", "Dx", "**", "0.5", ")", "\n", "self", ".", "K", "=", "len", "(", "list", "(", "set", "(", "Y", ".", "flatten", "(", ")", ".", "astype", "(", "int", ")", ")", ")", ")", "\n", "if", "self", ".", "K", "==", "2", ":", "\n", "            ", "lik", "=", "Bernoulli", "(", ")", "\n", "", "else", ":", "\n", "            ", "lik", "=", "MultiClass", "(", "self", ".", "K", ")", "\n", "\n", "", "gamma", "=", "kmeans2", "(", "X", ",", "self", ".", "M_gamma", ",", "minit", "=", "'points'", ")", "[", "0", "]", "if", "self", ".", "M_gamma", ">", "0", "else", "np", ".", "empty", "(", "(", "0", ",", "Dx", ")", ")", "\n", "beta", "=", "kmeans2", "(", "X", ",", "self", ".", "M_beta", ",", "minit", "=", "'points'", ")", "[", "0", "]", "\n", "\n", "gamma_minibatch_size", "=", "SETTINGS", ".", "gamma_minibatch_size", "if", "self", ".", "M_gamma", ">", "0", "else", "None", "\n", "\n", "self", ".", "model", "=", "Model", "(", "X", ",", "Y", ",", "kern", ",", "lik", ",", "gamma", ",", "beta", ",", "\n", "minibatch_size", "=", "SETTINGS", ".", "minibatch_size", ",", "\n", "gamma_minibatch_size", "=", "gamma_minibatch_size", ")", "\n", "self", ".", "sess", "=", "self", ".", "model", ".", "enquire_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.fit": [[89, 123], ["classification.Model_ODVGP.model.basis.a_beta.set_trainable", "tensorflow.Variable", "tensorflow.where", "tensorflow.assign", "tensorflow.assign", "classification.Model_ODVGP.sess.run", "gpflow.training.NatGradOptimizer().make_optimize_tensor", "gpflow.training.AdamOptimizer().make_optimize_tensor", "range", "classification.Model_ODVGP.model.anchor", "classification.Model_ODVGP.init_model", "tensorflow.less", "tensorflow.variables_initializer", "classification.Model_ODVGP.sess.run", "gpflow.training.NatGradOptimizer", "gpflow.training.AdamOptimizer", "classification.Model_ODVGP.sess.run", "classification.Model_ODVGP.sess.run", "print", "print", "classification.Model_ODVGP.sess.run", "s.format", "classification.Model_ODVGP.sess.run"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.init_model"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "init_model", "(", "ODVGP", ",", "X", ",", "Y", ")", "\n", "\n", "", "var_list", "=", "[", "[", "self", ".", "model", ".", "basis", ".", "a_beta", ",", "self", ".", "model", ".", "basis", ".", "L", "]", "]", "\n", "self", ".", "model", ".", "basis", ".", "a_beta", ".", "set_trainable", "(", "False", ")", "\n", "\n", "ng_stepsize", "=", "tf", ".", "Variable", "(", "SETTINGS", ".", "init_ng_stepsize", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "ng_stepsize_incremented", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "ng_stepsize", ",", "SETTINGS", ".", "final_ng_stepsize", ")", ",", "\n", "ng_stepsize", "+", "SETTINGS", ".", "increment_ng_stepsize", ",", "SETTINGS", ".", "final_ng_stepsize", ")", "\n", "\n", "op_increment_ng_stepsize", "=", "tf", ".", "assign", "(", "ng_stepsize", ",", "ng_stepsize_incremented", ")", "\n", "\n", "op_fallback_ng_stepsize", "=", "tf", ".", "assign", "(", "ng_stepsize", ",", "ng_stepsize", "*", "SETTINGS", ".", "fallback_ng_stepsize_factor", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "variables_initializer", "(", "[", "ng_stepsize", "]", ")", ")", "\n", "\n", "\n", "op_ng", "=", "NatGradOptimizer", "(", "ng_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ",", "var_list", "=", "var_list", ")", "\n", "op_adam", "=", "AdamOptimizer", "(", "SETTINGS", ".", "adam_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ")", "\n", "for", "it", "in", "range", "(", "SETTINGS", ".", "iterations", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "sess", ".", "run", "(", "op_ng", ")", "\n", "self", ".", "sess", ".", "run", "(", "op_increment_ng_stepsize", ")", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "                ", "s", "=", "'gamma = {} on iteration {} is too big! Falling back to {}'", "\n", "print", "(", "s", ".", "format", "(", "it", ",", "g", ",", "g", "*", "SETTINGS", ".", "fallback_ng_stepsize_factor", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "op_fallback_ng_stepsize", ")", "\n", "", "self", ".", "sess", ".", "run", "(", "op_adam", ")", "\n", "\n", "if", "it", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'{} {:.4f}'", ".", "format", "(", "it", ",", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "likelihood_tensor", ")", ")", ")", "\n", "\n", "", "", "self", ".", "model", ".", "anchor", "(", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.predict": [[124, 131], ["classification.Model_ODVGP.model.predict_y", "numpy.concatenate"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "Xs", ")", ":", "\n", "        ", "p", "=", "self", ".", "model", ".", "predict_y", "(", "Xs", ",", "session", "=", "self", ".", "sess", ")", "[", "0", "]", "\n", "if", "self", ".", "K", "==", "2", ":", "\n", "# convert Bernoulli to onehot", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "1", "-", "p", ",", "p", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_DVGP.fit": [[148, 160], ["gpflow.training.AdamOptimizer().make_optimize_tensor", "range", "classification.Model_DVGP.model.anchor", "classification.Model_DVGP.init_model", "classification.Model_DVGP.sess.run", "gpflow.training.AdamOptimizer", "print", "classification.Model_DVGP.sess.run"], "methods", ["home.repos.pwc.inspect_result.hughsalimbeni_orth_decoupled_var_gps.demos.classification.Model_ODVGP.init_model"], ["def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "init_model", "(", "DVGP", ",", "X", ",", "Y", ")", "\n", "\n", "", "op_adam", "=", "AdamOptimizer", "(", "SETTINGS", ".", "adam_stepsize", ")", ".", "make_optimize_tensor", "(", "self", ".", "model", ")", "\n", "for", "it", "in", "range", "(", "SETTINGS", ".", "iterations", ")", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "op_adam", ")", "\n", "\n", "if", "it", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'{} {:.4f}'", ".", "format", "(", "it", ",", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "likelihood_tensor", ")", ")", ")", "\n", "\n", "", "", "self", ".", "model", ".", "anchor", "(", "self", ".", "sess", ")", "\n", "\n"]]}