{"home.repos.pwc.inspect_result.mcg-nju_mmn.None.test_net.main": [[12, 75], ["torch.multiprocessing.set_sharing_strategy", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mmn.config.cfg.merge_from_file", "mmn.config.cfg.merge_from_list", "mmn.config.cfg.freeze", "mmn.utils.logger.setup_logger", "mmn.utils.logger.setup_logger.info", "mmn.utils.logger.setup_logger.info", "mmn.modeling.build_model", "mmn.modeling.build_model.to", "mmn.modeling.build_model.eval", "mmn.utils.checkpoint.MmnCheckpointer", "mmn.utils.checkpoint.MmnCheckpointer.load", "mmn.engine.inference.inference", "mmn.utils.comm.synchronize", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "mmn.utils.comm.synchronize", "mmn.utils.comm.get_rank", "mmn.data.make_data_loader"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.logger.setup_logger", "home.repos.pwc.inspect_result.mcg-nju_mmn.modeling.__init__.build_model", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.inference", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_loader"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "multiprocessing", ".", "set_sharing_strategy", "(", "'file_system'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Mutual Matching Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"configs/pool_128x128_k5l8_tacos.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ckpt\"", ",", "\n", "help", "=", "\"The path to the checkpoint for test, default is the latest checkpoint.\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "save_dir", "=", "\"\"", "\n", "logger", "=", "setup_logger", "(", "\"mmn\"", ",", "save_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "MmnCheckpointer", "(", "cfg", ",", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "ckpt", "=", "cfg", ".", "MODEL", ".", "WEIGHT", "if", "args", ".", "ckpt", "is", "None", "else", "args", ".", "ckpt", "\n", "_", "=", "checkpointer", ".", "load", "(", "ckpt", ",", "use_latest", "=", "args", ".", "ckpt", "is", "None", ")", "\n", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "[", "0", "]", "\n", "_", "=", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loaders_val", ",", "\n", "dataset_name", "=", "dataset_names", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.train": [[22, 90], ["mmn.modeling.build_model", "torch.device", "torch.device", "torch.nn.parallel.DistributedDataParallel.to", "mmn.data.make_data_loader", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.optim.AdamW", "torch.optim.lr_scheduler.MultiStepLR", "mmn.utils.checkpoint.MmnCheckpointer", "mmn.engine.trainer.do_train", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "mmn.utils.comm.get_rank", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "range", "mmn.data.make_data_loader", "bert_params.append", "base_params.append", "torch.load.pop", "optim.lr_scheduler.MultiStepLR.step", "torch.device", "torch.device", "NotImplementedError", "mmn.config.cfg"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.modeling.__init__.build_model", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.trainer.do_train", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_loader"], ["def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "model", "=", "build_model", "(", "cfg", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "# this should be removed if we update BatchNorm stats", "\n", "broadcast_buffers", "=", "False", ",", "find_unused_parameters", "=", "True", "\n", ")", "\n", "", "learning_rate", "=", "cfg", ".", "SOLVER", ".", "LR", "*", "1.0", "\n", "data_loader", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "distributed", ")", "\n", "\n", "bert_params", "=", "[", "]", "\n", "base_params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"bert\"", "in", "name", ":", "\n", "            ", "bert_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "base_params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "param_dict", "=", "{", "'bert'", ":", "bert_params", ",", "'base'", ":", "base_params", "}", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "[", "{", "'params'", ":", "base_params", "}", ",", "\n", "{", "'params'", ":", "bert_params", ",", "'lr'", ":", "learning_rate", "*", "0.1", "}", "]", ",", "lr", "=", "learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "cfg", ".", "SOLVER", ".", "MILESTONES", ",", "gamma", "=", "0.1", ")", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "checkpointer", "=", "MmnCheckpointer", "(", "cfg", ",", "model", ",", "optimizer", ",", "scheduler", ",", "output_dir", ",", "save_to_disk", ")", "\n", "arguments", "=", "{", "\"epoch\"", ":", "1", "}", "\n", "\n", "if", "cfg", ".", "SOLVER", ".", "RESUME", ":", "\n", "        ", "arguments", "=", "{", "\"epoch\"", ":", "cfg", ".", "SOLVER", ".", "RESUME_EPOCH", "}", "\n", "if", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"activitynet\"", ":", "\n", "            ", "weight_path", "=", "'./outputs/%s_activitynet_64x64_k9l4/%s_model_%de.pth'", "%", "(", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "SOLVER", ".", "RESUME_EPOCH", "-", "1", ")", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"tacos\"", ":", "\n", "            ", "weight_path", "=", "'./outputs/%s_tacos_128x128_k5l8/%s_model_%de.pth'", "%", "(", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "SOLVER", ".", "RESUME_EPOCH", "-", "1", ")", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"charades\"", ":", "\n", "            ", "weight_path", "=", "'./outputs/%s_charades_16x16_k5l8/%s_model_%de.pth'", "%", "(", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ",", "cfg", ".", "SOLVER", ".", "RESUME_EPOCH", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'No checkpoints for such %s dataset'", "%", "cfg", ".", "DATASETS", ".", "NAME", ")", "\n", "", "weight_file", "=", "torch", ".", "load", "(", "weight_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "model", ".", "load_state_dict", "(", "weight_file", ".", "pop", "(", "\"model\"", ")", ")", "\n", "for", "_", "in", "range", "(", "1", ",", "cfg", ".", "SOLVER", ".", "RESUME_EPOCH", ")", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "test_period", "=", "cfg", ".", "SOLVER", ".", "TEST_PERIOD", "\n", "if", "test_period", ">", "0", ":", "\n", "        ", "data_loader_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ",", "is_for_period", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "data_loader_val", "=", "None", "\n", "\n", "", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "\n", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loader", ",", "\n", "data_loader_val", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "test_period", ",", "\n", "arguments", ",", "\n", "param_dict", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.run_test": [[92, 108], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "mmn.data.make_data_loader", "zip", "mmn.engine.inference.inference", "mmn.utils.comm.synchronize", "mmn.config.cfg"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.inference", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize"], ["", "def", "run_test", "(", "cfg", ",", "model", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "for", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "        ", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.main": [[110, 177], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "mmn.config.cfg.merge_from_file", "mmn.config.cfg.merge_from_list", "mmn.config.cfg.freeze", "mmn.utils.logger.setup_logger", "mmn.utils.logger.setup_logger.info", "mmn.utils.logger.setup_logger.info", "mmn.utils.logger.setup_logger.info", "mmn.utils.logger.setup_logger.info", "os.path.join", "mmn.utils.logger.setup_logger.info", "mmn.utils.miscellaneous.save_config", "train_net.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "mmn.utils.comm.synchronize", "mmn.utils.miscellaneous.mkdir", "mmn.utils.comm.get_rank", "open", "mmn.utils.logger.setup_logger.info", "train_net.run_test", "cf.read"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.logger.setup_logger", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.train", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank", "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.run_test"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Mutual Matching Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"configs/pool_128x128_k5l8_tacos.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "seed", "=", "25285", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"mmn\"", ",", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "'config.yml'", ")", "\n", "logger", ".", "info", "(", "\"Saving config into: {}\"", ".", "format", "(", "output_config_path", ")", ")", "\n", "# save overloaded model config in the output directory", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "run_test", "(", "cfg", ",", "model", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.mmn.MMN.__init__": [[13, 24], ["torch.nn.Module.__init__", "featpool.build_featpool", "feat2d.build_feat2d", "loss.build_contrastive_loss", "loss.build_bce_loss", "text_encoder.build_text_encoder", "proposal_conv.build_proposal_conv"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.featpool.build_featpool", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.build_feat2d", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.build_contrastive_loss", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.build_bce_loss", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.text_encoder.build_text_encoder", "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.build_proposal_conv"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "MMN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "only_iou_loss_epoch", "=", "cfg", ".", "SOLVER", ".", "ONLY_IOU", "\n", "self", ".", "featpool", "=", "build_featpool", "(", "cfg", ")", "\n", "self", ".", "feat2d", "=", "build_feat2d", "(", "cfg", ")", "\n", "self", ".", "contrastive_loss", "=", "build_contrastive_loss", "(", "cfg", ",", "self", ".", "feat2d", ".", "mask2d", ")", "\n", "self", ".", "iou_score_loss", "=", "build_bce_loss", "(", "cfg", ",", "self", ".", "feat2d", ".", "mask2d", ")", "\n", "self", ".", "text_encoder", "=", "build_text_encoder", "(", "cfg", ")", "\n", "self", ".", "proposal_conv", "=", "build_proposal_conv", "(", "cfg", ",", "self", ".", "feat2d", ".", "mask2d", ")", "\n", "self", ".", "joint_space_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "JOINT_SPACE_SIZE", "\n", "self", ".", "encoder_name", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "TEXT_ENCODER", ".", "NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.mmn.MMN.forward": [[25, 70], ["enumerate", "mmn.MMN.featpool", "mmn.MMN.feat2d", "mmn.MMN.proposal_conv", "mmn.MMN.text_encoder", "map2d[].size", "enumerate", "len", "batches.feats.size", "zip", "torch.functional.F.normalize", "torch.functional.F.normalize", "torch.mm().reshape", "iou_scores.append", "mmn.MMN.iou_score_loss", "mmn.MMN.contrastive_loss", "enumerate", "iou.size", "sent.size", "iou.size", "torch.cat", "torch.cat", "torch.functional.F.normalize", "torch.functional.F.normalize", "vid_feat.size", "contrastive_scores.append", "torch.mm", "torch.mm().reshape", "torch.functional.F.normalize.reshape", "torch.functional.F.normalize.size", "torch.mm", "torch.functional.F.normalize.reshape", "vid_feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batches", ",", "cur_epoch", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batches.all_iou2d: list(B) num_sent x T x T\n            feat2ds: B x C x T x T\n            sent_feats: list(B) num_sent x C\n        \"\"\"", "\n", "# backbone", "\n", "ious2d", "=", "batches", ".", "all_iou2d", "\n", "assert", "len", "(", "ious2d", ")", "==", "batches", ".", "feats", ".", "size", "(", "0", ")", "\n", "for", "idx", ",", "(", "iou", ",", "sent", ")", "in", "enumerate", "(", "zip", "(", "ious2d", ",", "batches", ".", "queries", ")", ")", ":", "\n", "            ", "assert", "iou", ".", "size", "(", "0", ")", "==", "sent", ".", "size", "(", "0", ")", "\n", "assert", "iou", ".", "size", "(", "0", ")", "==", "batches", ".", "num_sentence", "[", "idx", "]", "\n", "", "feats", "=", "self", ".", "featpool", "(", "batches", ".", "feats", ")", "# from pre_num_clip to num_clip with overlapped average pooling, e.g., 256 -> 128", "\n", "map2d", "=", "self", ".", "feat2d", "(", "feats", ")", "# use MaxPool1d to generate 2d proposal-level feature map from 1d temporal features", "\n", "map2d", ",", "map2d_iou", "=", "self", ".", "proposal_conv", "(", "map2d", ")", "\n", "sent_feat", ",", "sent_feat_iou", "=", "self", ".", "text_encoder", "(", "batches", ".", "queries", ",", "batches", ".", "wordlens", ")", "\n", "\n", "# inference", "\n", "contrastive_scores", "=", "[", "]", "\n", "iou_scores", "=", "[", "]", "\n", "_", ",", "T", ",", "_", "=", "map2d", "[", "0", "]", ".", "size", "(", ")", "\n", "for", "i", ",", "sf_iou", "in", "enumerate", "(", "sent_feat_iou", ")", ":", "# sent_feat_iou: [num_sent x C] (len=B)", "\n", "# iou part", "\n", "            ", "vid_feat_iou", "=", "map2d_iou", "[", "i", "]", "# C x T x T", "\n", "vid_feat_iou_norm", "=", "F", ".", "normalize", "(", "vid_feat_iou", ",", "dim", "=", "0", ")", "\n", "sf_iou_norm", "=", "F", ".", "normalize", "(", "sf_iou", ",", "dim", "=", "1", ")", "\n", "iou_score", "=", "torch", ".", "mm", "(", "sf_iou_norm", ",", "vid_feat_iou_norm", ".", "reshape", "(", "vid_feat_iou_norm", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "T", ",", "T", ")", "# num_sent x T x T", "\n", "iou_scores", ".", "append", "(", "(", "iou_score", "*", "10", ")", ".", "sigmoid", "(", ")", "*", "self", ".", "feat2d", ".", "mask2d", ")", "\n", "\n", "# loss", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss_iou", "=", "self", ".", "iou_score_loss", "(", "torch", ".", "cat", "(", "iou_scores", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "ious2d", ",", "dim", "=", "0", ")", ",", "cur_epoch", ")", "\n", "loss_vid", ",", "loss_sent", "=", "self", ".", "contrastive_loss", "(", "map2d", ",", "sent_feat", ",", "ious2d", ",", "batches", ".", "moments", ")", "\n", "return", "loss_vid", ",", "loss_sent", ",", "loss_iou", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "sf", "in", "enumerate", "(", "sent_feat", ")", ":", "\n", "# contrastive part", "\n", "                ", "vid_feat", "=", "map2d", "[", "i", ",", "...", "]", "# C x T x T", "\n", "vid_feat_norm", "=", "F", ".", "normalize", "(", "vid_feat", ",", "dim", "=", "0", ")", "\n", "sf_norm", "=", "F", ".", "normalize", "(", "sf", ",", "dim", "=", "1", ")", "# num_sent x C", "\n", "_", ",", "T", ",", "_", "=", "vid_feat", ".", "size", "(", ")", "\n", "contrastive_score", "=", "torch", ".", "mm", "(", "sf_norm", ",", "vid_feat_norm", ".", "reshape", "(", "vid_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "T", ",", "T", ")", "*", "self", ".", "feat2d", ".", "mask2d", "# num_sent x T x T", "\n", "contrastive_scores", ".", "append", "(", "contrastive_score", ")", "\n", "", "return", "map2d_iou", ",", "sent_feat_iou", ",", "contrastive_scores", ",", "iou_scores", "# first two maps for visualization", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.text_encoder.DistilBert.__init__": [[7, 15], ["torch.nn.Module.__init__", "transformers.DistilBertModel.from_pretrained", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "joint_space_size", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert", "=", "DistilBertModel", ".", "from_pretrained", "(", "'distilbert-base-uncased'", ")", "\n", "self", ".", "fc_out1", "=", "nn", ".", "Linear", "(", "768", ",", "joint_space_size", ")", "\n", "self", ".", "fc_out2", "=", "nn", ".", "Linear", "(", "768", ",", "joint_space_size", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "layernorm", "=", "nn", ".", "LayerNorm", "(", "768", ")", "\n", "self", ".", "aggregation", "=", "\"avg\"", "# cls, avg", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.text_encoder.DistilBert.forward": [[16, 52], ["zip", "torch.zeros", "range", "sent_feat.append", "sent_feat_iou.append", "text_encoder.DistilBert.size", "text_encoder.DistilBert.size", "text_encoder.DistilBert.bert", "text_encoder.DistilBert.layernorm", "text_encoder.DistilBert.fc_out1", "text_encoder.DistilBert.fc_out2", "torch.zeros", "range", "bert_encoding.sum().t", "text_encoder.DistilBert.layernorm", "text_encoder.DistilBert.fc_out1", "text_encoder.DistilBert.fc_out2", "word_len.unsqueeze", "bert_encoding.permute", "bert_encoding.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "'''\n        Average pooling over bert outputs among words to be sentence feature\n        :param queries:\n        :param wordlens:\n        :param vid_avg_feat: B x C\n        :return: list of [num_sent, C], len=Batch_size\n        '''", "\n", "sent_feat", "=", "[", "]", "\n", "sent_feat_iou", "=", "[", "]", "\n", "for", "query", ",", "word_len", "in", "zip", "(", "queries", ",", "wordlens", ")", ":", "# each sample (several sentences) in a batch (of videos)", "\n", "            ", "N", ",", "word_length", "=", "query", ".", "size", "(", "0", ")", ",", "query", ".", "size", "(", "1", ")", "\n", "attn_mask", "=", "torch", ".", "zeros", "(", "N", ",", "word_length", ",", "device", "=", "query", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "attn_mask", "[", "i", ",", ":", "word_len", "[", "i", "]", "]", "=", "1", "# including [CLS] (first token) and [SEP] (last token)", "\n", "", "bert_encoding", "=", "self", ".", "bert", "(", "query", ",", "attention_mask", "=", "attn_mask", ")", "[", "0", "]", "# [N, max_word_length, C]  .permute(2, 0, 1)", "\n", "if", "self", ".", "aggregation", "==", "\"cls\"", ":", "\n", "                ", "query", "=", "bert_encoding", "[", ":", ",", "0", ",", ":", "]", "# [N, C], use [CLS] (first token) as the whole sentence feature", "\n", "query", "=", "self", ".", "layernorm", "(", "query", ")", "\n", "out_iou", "=", "self", ".", "fc_out1", "(", "query", ")", "\n", "out", "=", "self", ".", "fc_out2", "(", "query", ")", "\n", "", "elif", "self", ".", "aggregation", "==", "\"avg\"", ":", "\n", "                ", "avg_mask", "=", "torch", ".", "zeros", "(", "N", ",", "word_length", ",", "device", "=", "query", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                    ", "avg_mask", "[", "i", ",", ":", "word_len", "[", "i", "]", "]", "=", "1", "# including [CLS] (first token) and [SEP] (last token)", "\n", "", "avg_mask", "=", "avg_mask", "/", "(", "word_len", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "bert_encoding", "=", "bert_encoding", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "*", "avg_mask", "# use avg_pool as the whole sentence feature", "\n", "query", "=", "bert_encoding", ".", "sum", "(", "-", "1", ")", ".", "t", "(", ")", "# [N, C]", "\n", "query", "=", "self", ".", "layernorm", "(", "query", ")", "\n", "out_iou", "=", "self", ".", "fc_out1", "(", "query", ")", "\n", "out", "=", "self", ".", "fc_out2", "(", "query", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "sent_feat", ".", "append", "(", "out", ")", "\n", "sent_feat_iou", ".", "append", "(", "out_iou", ")", "\n", "", "return", "sent_feat", ",", "sent_feat_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.text_encoder.build_text_encoder": [[54, 58], ["text_encoder.DistilBert"], "function", ["None"], ["", "", "def", "build_text_encoder", "(", "cfg", ")", ":", "\n", "    ", "joint_space_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "JOINT_SPACE_SIZE", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "NAME", "\n", "return", "DistilBert", "(", "joint_space_size", ",", "dataset_name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.BceLoss.__init__": [[7, 12], ["torch.nn.BCELoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_iou", ",", "max_iou", ",", "mask2d", ")", ":", "\n", "        ", "self", ".", "min_iou", ",", "self", ".", "max_iou", "=", "min_iou", ",", "max_iou", "\n", "self", ".", "mask2d", "=", "mask2d", "\n", "self", ".", "bceloss", "=", "torch", ".", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "hinge_loss", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.BceLoss.linear_scale": [[13, 15], ["None"], "methods", ["None"], ["", "def", "linear_scale", "(", "self", ",", "iou", ")", ":", "\n", "        ", "return", "(", "iou", "-", "self", ".", "min_iou", ")", "/", "(", "self", ".", "max_iou", "-", "self", ".", "min_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.BceLoss.__call__": [[16, 23], ["ious2d.masked_select", "scores2d.masked_select", "loss.BceLoss.linear_scale().clamp", "loss.BceLoss.bceloss().mean", "loss.BceLoss.linear_scale", "loss.BceLoss.bceloss"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.BceLoss.linear_scale"], ["", "def", "__call__", "(", "self", ",", "scores2d", ",", "ious2d", ",", "epoch", ")", ":", "\n", "        ", "iou1d", "=", "ious2d", ".", "masked_select", "(", "self", ".", "mask2d", ")", "\n", "scores1d", "=", "scores2d", ".", "masked_select", "(", "self", ".", "mask2d", ")", "\n", "loss", "=", "0", "\n", "iou1d", "=", "self", ".", "linear_scale", "(", "iou1d", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "loss", "+=", "self", ".", "bceloss", "(", "scores1d", ",", "iou1d", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.ContrastiveLoss.__init__": [[32, 43], ["torch.nn.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mask2d", ")", ":", "\n", "        ", "self", ".", "mask2d", "=", "mask2d", "\n", "self", ".", "T_v", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "TAU_VIDEO", "\n", "self", ".", "T_s", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "TAU_SENT", "\n", "self", ".", "cri", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "neg_iou", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "NEGATIVE_VIDEO_IOU", "\n", "self", ".", "top_k", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "NUM_POSTIVE_VIDEO_PROPOSAL", "\n", "self", ".", "sent_removal_iou", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "SENT_REMOVAL_IOU", "\n", "self", ".", "margin", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "MARGIN", "\n", "self", ".", "eps", "=", "1e-6", "\n", "self", ".", "dataset", "=", "cfg", ".", "DATASETS", ".", "NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.ContrastiveLoss.__call__": [[44, 116], ["feat2ds.size", "feat2ds.masked_select().reshape", "torch.functional.F.normalize", "torch.cat", "torch.cat.size", "torch.functional.F.normalize", "torch.ones", "range", "enumerate", "torch.diag().float", "enumerate", "torch.cat().permute", "torch.diag().float", "torch.exp", "len", "sent_feats[].size", "all_num_sent.append", "mmn.data.datasets.utils.box_iou", "iou_mask.float", "torch.diag", "zip", "torch.functional.F.normalize.size", "torch.functional.F.normalize", "iou2d.masked_select().reshape", "feat1d.index_select().reshape", "selected_feat.permute.permute.permute", "torch.mm().reshape", "vid_pos_list.append", "vid_neg_list.append", "sent_pos_list.append", "torch.mm", "torch.functional.F.normalize.index_select", "feat1d_other_video.transpose().reshape.transpose().reshape.transpose().reshape", "torch.mm", "sent_neg_list.append", "torch.cat().transpose", "torch.exp", "torch.ones.clamp", "torch.cat", "torch.cat", "feat2ds.masked_select", "torch.diag", "torch.ones", "torch.functional.F.normalize.size", "torch.topk", "torch.bmm().reshape", "vid_pos.clone", "vid_pos.clone().unsqueeze", "torch.mm.unsqueeze().repeat", "torch.mm.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.diag", "torch.ones", "iou2d.masked_select", "feat1d.index_select", "torch.mm", "feat1d_other_video.transpose().reshape.transpose().reshape.transpose", "torch.cat", "torch.ones", "torch.bmm", "selected_feat.permute.permute.view", "torch.functional.F.normalize.t", "torch.arange", "vid_pos.clone", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.log", "torch.log", "topk_index.reshape", "torch.functional.F.normalize.unsqueeze", "vid_neg_exp.sum", "torch.arange", "torch.exp.sum"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.box_iou"], ["", "def", "__call__", "(", "self", ",", "feat2ds", ",", "sent_feats", ",", "iou2ds", ",", "gt_proposals", ")", ":", "\n", "        ", "\"\"\"\n            feat2ds: B x C x T x T\n            sent_feats: list(B) num_sent x C\n            iou2ds: list(B) num_sent x T x T\n            gt_proposals: list(B) num_sent x 2, with format [start, end], unit being seconds (frame/fps)\n        \"\"\"", "\n", "# prepare tensors", "\n", "B", ",", "C", ",", "_", ",", "_", "=", "feat2ds", ".", "size", "(", ")", "\n", "feat1ds", "=", "feat2ds", ".", "masked_select", "(", "self", ".", "mask2d", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", "\n", "feat1ds_norm", "=", "F", ".", "normalize", "(", "feat1ds", ",", "dim", "=", "1", ")", "# B x C x num_sparse_selected_proposal", "\n", "sent_feat_cat", "=", "torch", ".", "cat", "(", "sent_feats", ",", "0", ")", "# sum(num_sent) x C, whole batch", "\n", "sum_num_sent", "=", "sent_feat_cat", ".", "size", "(", "0", ")", "\n", "sent_feat_cat_norm", "=", "F", ".", "normalize", "(", "sent_feat_cat", ",", "dim", "=", "1", ")", "# sum(num_sent) x C, whole batch", "\n", "sent_mask", "=", "torch", ".", "ones", "(", "sum_num_sent", ",", "sum_num_sent", ",", "device", "=", "feat2ds", ".", "device", ")", "\n", "\n", "all_num_sent", "=", "[", "0", "]", "\n", "curr_num_sent", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_feats", ")", ")", ":", "\n", "            ", "curr_num_sent", "+=", "sent_feats", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "all_num_sent", ".", "append", "(", "curr_num_sent", ")", "\n", "", "for", "i", ",", "gt_per_video", "in", "enumerate", "(", "gt_proposals", ")", ":", "\n", "            ", "iou_map_per_video", "=", "box_iou", "(", "gt_per_video", ",", "gt_per_video", ")", "\n", "iou_mask", "=", "iou_map_per_video", "<", "self", ".", "sent_removal_iou", "# remove high iou sentence, keep low iou sentence", "\n", "sent_mask", "[", "all_num_sent", "[", "i", "]", ":", "all_num_sent", "[", "i", "+", "1", "]", ",", "all_num_sent", "[", "i", "]", ":", "all_num_sent", "[", "i", "+", "1", "]", "]", "=", "iou_mask", ".", "float", "(", ")", "\n", "", "sent_mask", "+=", "torch", ".", "diag", "(", "torch", ".", "ones", "(", "sum_num_sent", ",", "device", "=", "feat2ds", ".", "device", ")", ")", ".", "float", "(", ")", "# add the sentence itself to the denominator in the loss", "\n", "margin_mask", "=", "torch", ".", "diag", "(", "torch", ".", "ones", "(", "sum_num_sent", ",", "device", "=", "feat2ds", ".", "device", ")", ")", "*", "self", ".", "margin", "\n", "vid_pos_list", "=", "[", "]", "\n", "vid_neg_list", "=", "[", "]", "\n", "sent_pos_list", "=", "[", "]", "\n", "sent_neg_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "sent_feat", ",", "iou2d", ")", "in", "enumerate", "(", "zip", "(", "sent_feats", ",", "iou2ds", ")", ")", ":", "# each video in the batch", "\n", "# select positive samples", "\n", "            ", "num_sent_this_batch", "=", "sent_feat", ".", "size", "(", "0", ")", "\n", "feat1d", "=", "feat1ds_norm", "[", "i", ",", ":", ",", ":", "]", "# C x num_sparse_selected_proposal", "\n", "sent_feat", "=", "F", ".", "normalize", "(", "sent_feat", ",", "dim", "=", "1", ")", "# num_sent x C", "\n", "iou1d", "=", "iou2d", ".", "masked_select", "(", "self", ".", "mask2d", ")", ".", "reshape", "(", "sent_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# num_sent x num_sparse_selected_proposal", "\n", "topk_index", "=", "torch", ".", "topk", "(", "iou1d", ",", "self", ".", "top_k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# num_sent x top_k", "\n", "selected_feat", "=", "feat1d", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "topk_index", ".", "reshape", "(", "-", "1", ")", ")", ".", "reshape", "(", "C", ",", "-", "1", ",", "self", ".", "top_k", ")", "# C x num_sent x top_k", "\n", "selected_feat", "=", "selected_feat", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "# num_sent x top_k x C", "\n", "# positive video proposal with pos/neg sentence samples", "\n", "vid_pos", "=", "torch", ".", "bmm", "(", "selected_feat", ",", "\n", "sent_feat", ".", "unsqueeze", "(", "2", ")", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "top_k", ")", "-", "self", ".", "margin", "# num_sent x top_k, bmm of (num_sent x top_k x C) and (num_sent x C x 1)", "\n", "vid_neg", "=", "torch", ".", "mm", "(", "selected_feat", ".", "view", "(", "-", "1", ",", "C", ")", ",", "\n", "sent_feat_cat_norm", ".", "t", "(", ")", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "top_k", ",", "sum_num_sent", ")", "# num_sent x topk x sum(num_sent), mm of (num_sent*top_k x C) and (C x sum(num_sent))", "\n", "vid_pos_list", ".", "append", "(", "vid_pos", ")", "\n", "vid_neg_list", ".", "append", "(", "vid_neg", ")", "\n", "# positive sentence with pos/neg video proposals", "\n", "sent_pos_list", ".", "append", "(", "vid_pos", ".", "clone", "(", ")", ")", "\n", "sent_neg_same_video", "=", "torch", ".", "mm", "(", "sent_feat", ",", "feat1d", ")", "# num_sent x num_sparse_selected_proposal", "\n", "iou_neg_mask", "=", "(", "iou1d", "<", "self", ".", "neg_iou", ")", ".", "float", "(", ")", "# only keep the low iou proposals as negative samples in the same video", "\n", "sent_neg_same_video", "=", "iou_neg_mask", "*", "sent_neg_same_video", "# num_sent x num_sparse_selected_proposal", "\n", "feat1d_other_video", "=", "feat1ds_norm", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "torch", ".", "arange", "(", "\n", "B", ",", "device", "=", "feat2ds", ".", "device", ")", "[", "torch", ".", "arange", "(", "B", ",", "device", "=", "feat2ds", ".", "device", ")", "!=", "i", "]", ")", "# (B-1) x C x num_sparse_selected_proposal", "\n", "feat1d_other_video", "=", "feat1d_other_video", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "C", ",", "-", "1", ")", "# C x ((B-1) x num_sparse_selected_proposal)", "\n", "sent_neg_other_video", "=", "torch", ".", "mm", "(", "sent_feat", ",", "feat1d_other_video", ")", "# num_sent x ((B-1) x num_sparse_selected_proposal)", "\n", "sent_neg_all", "=", "[", "vid_pos", ".", "clone", "(", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "sent_neg_same_video", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "top_k", ",", "1", ")", ",", "\n", "sent_neg_other_video", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "top_k", ",", "1", ")", "]", "\n", "sent_neg_list", ".", "append", "(", "torch", ".", "cat", "(", "sent_neg_all", ",", "dim", "=", "2", ")", ")", "# num_sent x topk x (1 + num_same + num_other)", "\n", "", "vid_pos", "=", "(", "torch", ".", "cat", "(", "vid_pos_list", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "self", ".", "T_v", "# top_k x num_sent", "\n", "vid_neg", "=", "torch", ".", "cat", "(", "vid_neg_list", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# top_k x this_cat_to_be_sum(num_sent) x sum(num_sent)", "\n", "vid_neg", "=", "(", "vid_neg", "-", "margin_mask", ")", "/", "self", ".", "T_v", "# top_k x this_cat_to_be_sum(num_sent) (positive) x sum(num_sent) (negative)", "\n", "sent_mask", "+=", "torch", ".", "diag", "(", "torch", ".", "ones", "(", "sum_num_sent", ",", "device", "=", "feat2ds", ".", "device", ")", ")", ".", "float", "(", ")", "\n", "vid_neg_exp", "=", "torch", ".", "exp", "(", "vid_neg", ")", "*", "sent_mask", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "loss_vid", "=", "-", "(", "vid_pos", "-", "torch", ".", "log", "(", "vid_neg_exp", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", ")", ")", ".", "mean", "(", ")", "\n", "sent_pos", "=", "torch", ".", "cat", "(", "sent_pos_list", ",", "dim", "=", "0", ")", "/", "self", ".", "T_s", "\n", "sent_neg", "=", "torch", ".", "cat", "(", "sent_neg_list", ",", "dim", "=", "0", ")", "/", "self", ".", "T_s", "\n", "sent_neg_exp", "=", "torch", ".", "exp", "(", "sent_neg", ")", "\n", "loss_sent", "=", "-", "(", "sent_pos", "-", "torch", ".", "log", "(", "sent_neg_exp", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "+", "self", ".", "eps", ")", ")", ".", "mean", "(", ")", "\n", "return", "loss_vid", ",", "loss_sent", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.build_bce_loss": [[25, 29], ["loss.BceLoss"], "function", ["None"], ["", "", "def", "build_bce_loss", "(", "cfg", ",", "mask2d", ")", ":", "\n", "    ", "min_iou", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "MIN_IOU", "\n", "max_iou", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "MAX_IOU", "\n", "return", "BceLoss", "(", "min_iou", ",", "max_iou", ",", "mask2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.loss.build_contrastive_loss": [[118, 120], ["loss.ContrastiveLoss"], "function", ["None"], ["", "", "def", "build_contrastive_loss", "(", "cfg", ",", "mask2d", ")", ":", "\n", "    ", "return", "ContrastiveLoss", "(", "cfg", ",", "mask2d", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.SparseMaxPool.__init__": [[6, 32], ["torch.nn.Module.__init__", "torch.zeros", "torch.zeros.to", "range", "torch.nn.MaxPool1d", "poolers.extend", "maskij.append", "range", "range", "range", "range", "range", "torch.nn.MaxPool1d", "torch.nn.MaxPool1d", "range"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to"], ["    ", "def", "__init__", "(", "self", ",", "pooling_counts", ",", "N", ")", ":", "\n", "        ", "super", "(", "SparseMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mask2d", "=", "torch", ".", "zeros", "(", "N", ",", "N", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask2d", "[", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "1", "\n", "\n", "stride", ",", "offset", "=", "1", ",", "0", "\n", "maskij", "=", "[", "]", "\n", "for", "c", "in", "pooling_counts", ":", "\n", "# fill all diagonal lines", "\n", "            ", "for", "_", "in", "range", "(", "c", ")", ":", "\n", "# fill a diagonal line", "\n", "                ", "offset", "+=", "stride", "\n", "i", ",", "j", "=", "range", "(", "0", ",", "N", "-", "offset", ",", "stride", ")", ",", "range", "(", "offset", ",", "N", ",", "stride", ")", "\n", "mask2d", "[", "i", ",", "j", "]", "=", "1", "\n", "maskij", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "stride", "*=", "2", "\n", "\n", "", "poolers", "=", "[", "nn", ".", "MaxPool1d", "(", "2", ",", "1", ")", "for", "_", "in", "range", "(", "pooling_counts", "[", "0", "]", ")", "]", "\n", "for", "c", "in", "pooling_counts", "[", "1", ":", "]", ":", "\n", "            ", "poolers", ".", "extend", "(", "\n", "[", "nn", ".", "MaxPool1d", "(", "3", ",", "2", ")", "]", "+", "[", "nn", ".", "MaxPool1d", "(", "2", ",", "1", ")", "for", "_", "in", "range", "(", "c", "-", "1", ")", "]", "\n", ")", "\n", "\n", "", "self", ".", "mask2d", "=", "mask2d", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "maskij", "=", "maskij", "\n", "self", ".", "poolers", "=", "poolers", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.SparseMaxPool.forward": [[33, 41], ["pooler.new_zeros", "zip", "pooler", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "map2d", "=", "x", ".", "new_zeros", "(", "B", ",", "D", ",", "N", ",", "N", ")", "\n", "map2d", "[", ":", ",", ":", ",", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "x", "# fill a diagonal line", "\n", "for", "pooler", ",", "(", "i", ",", "j", ")", "in", "zip", "(", "self", ".", "poolers", ",", "self", ".", "maskij", ")", ":", "\n", "            ", "x", "=", "pooler", "(", "x", ")", "\n", "map2d", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "x", "\n", "", "return", "map2d", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.SparseConv.__init__": [[44, 70], ["torch.nn.Module.__init__", "torch.zeros", "torch.nn.ModuleList", "feat2d.SparseConv.convs.extend", "torch.zeros.to", "range", "feat2d.SparseConv.convs.extend", "maskij.append", "torch.nn.Conv1d", "range", "range", "range", "range", "range", "torch.nn.Conv1d", "torch.nn.Conv1d", "range"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to"], ["    ", "def", "__init__", "(", "self", ",", "pooling_counts", ",", "N", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "SparseConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mask2d", "=", "torch", ".", "zeros", "(", "N", ",", "N", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask2d", "[", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "1", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "stride", ",", "offset", "=", "1", ",", "0", "\n", "maskij", "=", "[", "]", "\n", "for", "c", "in", "pooling_counts", ":", "\n", "# fill all diagonal lines", "\n", "            ", "for", "_", "in", "range", "(", "c", ")", ":", "\n", "# fill a diagonal line", "\n", "                ", "offset", "+=", "stride", "\n", "i", ",", "j", "=", "range", "(", "0", ",", "N", "-", "offset", ",", "stride", ")", ",", "range", "(", "offset", ",", "N", ",", "stride", ")", "\n", "mask2d", "[", "i", ",", "j", "]", "=", "1", "\n", "maskij", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "stride", "*=", "2", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "extend", "(", "[", "nn", ".", "Conv1d", "(", "hidden_size", ",", "hidden_size", ",", "2", ",", "1", ")", "for", "_", "in", "range", "(", "pooling_counts", "[", "0", "]", ")", "]", ")", "\n", "for", "c", "in", "pooling_counts", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "convs", ".", "extend", "(", "\n", "[", "nn", ".", "Conv1d", "(", "hidden_size", ",", "hidden_size", ",", "3", ",", "2", ")", "]", "+", "[", "nn", ".", "Conv1d", "(", "hidden_size", ",", "hidden_size", ",", "2", ",", "1", ")", "for", "_", "in", "range", "(", "c", "-", "1", ")", "]", "\n", ")", "\n", "\n", "", "self", ".", "mask2d", "=", "mask2d", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "maskij", "=", "maskij", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.SparseConv.forward": [[71, 79], ["conv.new_zeros", "zip", "conv", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "map2d", "=", "x", ".", "new_zeros", "(", "B", ",", "D", ",", "N", ",", "N", ")", "\n", "map2d", "[", ":", ",", ":", ",", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "x", "# fill a diagonal line", "\n", "for", "conv", ",", "(", "i", ",", "j", ")", "in", "zip", "(", "self", ".", "convs", ",", "self", ".", "maskij", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "map2d", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "x", "\n", "", "return", "map2d", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.feat2d.build_feat2d": [[81, 91], ["feat2d.SparseConv", "feat2d.SparseMaxPool", "NotImplementedError"], "function", ["None"], ["", "", "def", "build_feat2d", "(", "cfg", ")", ":", "\n", "    ", "pooling_counts", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "POOLING_COUNTS", "# [15,8,8] anet, [15] charades", "\n", "num_clips", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "NUM_CLIPS", "# 64 anet, 16 charades", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "# 512", "\n", "if", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", "==", "\"conv\"", ":", "\n", "        ", "return", "SparseConv", "(", "pooling_counts", ",", "num_clips", ",", "hidden_size", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", "==", "\"pool\"", ":", "\n", "        ", "return", "SparseMaxPool", "(", "pooling_counts", ",", "num_clips", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No such feature 2d method as %s\"", "%", "cfg", ".", "MODEL", ".", "MMN", ".", "FEAT2D", ".", "NAME", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.featpool.FeatAvgPool.__init__": [[6, 10], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "FeatAvgPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", ",", "hidden_size", ",", "1", ",", "1", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool1d", "(", "kernel_size", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.featpool.FeatAvgPool.forward": [[11, 14], ["x.transpose.transpose.transpose", "featpool.FeatAvgPool.pool", "featpool.FeatAvgPool.conv().relu", "featpool.FeatAvgPool.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "# B, C, T", "\n", "return", "self", ".", "pool", "(", "self", ".", "conv", "(", "x", ")", ".", "relu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.featpool.build_featpool": [[15, 21], ["featpool.FeatAvgPool"], "function", ["None"], ["", "", "def", "build_featpool", "(", "cfg", ")", ":", "\n", "    ", "input_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEATPOOL", ".", "INPUT_SIZE", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "kernel_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEATPOOL", ".", "KERNEL_SIZE", "# 4 for anet, 2 for tacos, 16 for charades", "\n", "stride", "=", "cfg", ".", "INPUT", ".", "NUM_PRE_CLIPS", "//", "cfg", ".", "MODEL", ".", "MMN", ".", "NUM_CLIPS", "\n", "return", "FeatAvgPool", "(", "input_size", ",", "hidden_size", ",", "kernel_size", ",", "stride", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.ProposalConv.__init__": [[21, 37], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "proposal_conv.ProposalConv.convs.append", "proposal_conv.ProposalConv.bn.append", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "k", ",", "num_stack_layers", ",", "output_size", ",", "mask2d", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "ProposalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_stack_layers", "=", "num_stack_layers", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "mask2d", "=", "mask2d", "[", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "# Padding to ensure the dimension of the output map2d", "\n", "first_padding", "=", "(", "k", "-", "1", ")", "*", "num_stack_layers", "//", "2", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", "]", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "input_size", ",", "hidden_size", ",", "k", ",", "padding", "=", "first_padding", ")", "]", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_stack_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "k", ")", ")", "\n", "self", ".", "bn", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", ")", "\n", "", "self", ".", "conv1x1_iou", "=", "nn", ".", "Conv2d", "(", "hidden_size", ",", "output_size", ",", "1", ")", "\n", "self", ".", "conv1x1_contrastive", "=", "nn", ".", "Conv2d", "(", "hidden_size", ",", "output_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.ProposalConv.forward": [[38, 47], ["range", "proposal_conv.ProposalConv.conv1x1_contrastive", "proposal_conv.ProposalConv.conv1x1_iou", "proposal_conv.get_padded_mask_and_weight"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.get_padded_mask_and_weight"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "padded_mask", "=", "self", ".", "mask2d", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stack_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "bn", "[", "i", "]", "(", "self", ".", "convs", "[", "i", "]", "(", "x", ")", ")", ".", "relu", "(", ")", "\n", "padded_mask", ",", "masked_weight", "=", "get_padded_mask_and_weight", "(", "padded_mask", ",", "self", ".", "convs", "[", "i", "]", ")", "\n", "x", "=", "x", "*", "masked_weight", "\n", "", "out1", "=", "self", ".", "conv1x1_contrastive", "(", "x", ")", "\n", "out2", "=", "self", ".", "conv1x1_iou", "(", "x", ")", "\n", "return", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.mask2weight": [[5, 11], ["torch.conv2d", "mask2d[].float"], "function", ["None"], ["def", "mask2weight", "(", "mask2d", ",", "mask_kernel", ",", "padding", "=", "0", ")", ":", "\n", "# from the feat2d.py,we can know the mask2d is 4-d: B, D, N, N", "\n", "    ", "weight", "=", "F", ".", "conv2d", "(", "mask2d", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "mask_kernel", ",", "padding", "=", "padding", ")", "[", "0", ",", "0", "]", "\n", "weight", "[", "weight", ">", "0", "]", "=", "1", "/", "weight", "[", "weight", ">", "0", "]", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.get_padded_mask_and_weight": [[13, 18], ["torch.round", "torch.round", "torch.conv2d", "mask.clone().float", "torch.ones().cuda", "torch.ones().cuda", "mask.clone", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "get_padded_mask_and_weight", "(", "mask", ",", "conv", ")", ":", "\n", "    ", "masked_weight", "=", "torch", ".", "round", "(", "F", ".", "conv2d", "(", "mask", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "conv", ".", "kernel_size", ")", ".", "cuda", "(", ")", ",", "stride", "=", "conv", ".", "stride", ",", "padding", "=", "conv", ".", "padding", ",", "dilation", "=", "conv", ".", "dilation", ")", ")", "\n", "masked_weight", "[", "masked_weight", ">", "0", "]", "=", "1", "/", "masked_weight", "[", "masked_weight", ">", "0", "]", "#conv.kernel_size[0] * conv.kernel_size[1]", "\n", "padded_mask", "=", "masked_weight", ">", "0", "\n", "return", "padded_mask", ",", "masked_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.mmn.proposal_conv.build_proposal_conv": [[49, 57], ["proposal_conv.ProposalConv"], "function", ["None"], ["", "", "def", "build_proposal_conv", "(", "cfg", ",", "mask2d", ")", ":", "\n", "    ", "input_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "PREDICTOR", ".", "HIDDEN_SIZE", "\n", "kernel_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "PREDICTOR", ".", "KERNEL_SIZE", "\n", "num_stack_layers", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "PREDICTOR", ".", "NUM_STACK_LAYERS", "\n", "output_size", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "JOINT_SPACE_SIZE", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "NAME", "\n", "return", "ProposalConv", "(", "input_size", ",", "hidden_size", ",", "kernel_size", ",", "num_stack_layers", ",", "output_size", ",", "mask2d", ",", "dataset_name", ")", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.align_and_update_state_dicts": [[10, 57], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["None"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.strip_prefix_if_present": [[61, 69], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict": [[71, 81], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.miscellaneous.mkdir": [[9, 15], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.miscellaneous.save_labels": [[17, 34], ["comm.is_main_process", "logging.getLogger", "hasattr", "os.path.join", "logging.getLogger.info", "ids_to_labels.update", "logging.getLogger.warning", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.is_main_process", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update"], ["", "", "", "def", "save_labels", "(", "dataset_list", ",", "output_dir", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "ids_to_labels", "=", "{", "}", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "'categories'", ")", ":", "\n", "                ", "ids_to_labels", ".", "update", "(", "dataset", ".", "categories", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Dataset [{}] has no categories attribute, labels.json file won't be created\"", ".", "format", "(", "\n", "dataset", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "", "if", "ids_to_labels", ":", "\n", "            ", "labels_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'labels.json'", ")", "\n", "logger", ".", "info", "(", "\"Saving labels mapping into {}\"", ".", "format", "(", "labels_file", ")", ")", "\n", "with", "open", "(", "labels_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ids_to_labels", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.miscellaneous.save_config": [[36, 40], ["comm.is_main_process", "open", "f.write", "cfg.dump"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.is_main_process"], ["", "", "", "", "def", "save_config", "(", "cfg", ",", "path", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "cfg", ".", "dump", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size": [[12, 18], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank": [[20, 26], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.is_main_process": [[28, 30], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize": [[32, 45], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.all_gather": [[47, 86], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.all_gather", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.all_gather", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.reduce_dict": [[88, 115], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.__init__": [[9, 11], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.average_time": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "average_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_time", "/", "self", ".", "calls", "if", "self", ".", "calls", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.tic": [[16, 20], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.toc": [[21, 27], ["timer.Timer.add", "time.time"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.add"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "add", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.add": [[28, 32], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "time_diff", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time_diff", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.0", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.0", "\n", "self", ".", "diff", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.avg_time_str": [[39, 42], ["str", "datetime.timedelta"], "methods", ["None"], ["", "def", "avg_time_str", "(", "self", ")", ":", "\n", "        ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "self", ".", "average_time", ")", ")", "\n", "return", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.get_time_str": [[44, 47], ["str", "datetime.timedelta"], "function", ["None"], ["", "", "def", "get_time_str", "(", "time_diff", ")", ":", "\n", "    ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time_diff", ")", ")", "\n", "return", "time_str", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.imports.import_file": [[8, 15], ["importlib.util.spec_from_file_location", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], ["def", "import_file", "(", "module_name", ",", "file_path", ",", "make_importable", "=", "False", ")", ":", "\n", "    ", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "module_name", ",", "file_path", ")", "\n", "module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "module", ")", "\n", "if", "make_importable", ":", "\n", "        ", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "", "return", "module", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.logger.setup_logger": [[5, 24], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.registry._register_generic", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "10", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "#self.series = []", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "#self.series.append(value)", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.last": [[30, 34], ["torch.tensor", "torch.tensor.item", "list"], "methods", ["None"], ["", "@", "property", "\n", "def", "last", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", "[", "-", "1", "]", ")", "\n", "return", "d", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.avg": [[35, 39], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.SmoothedValue.global_avg": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.__init__": [[46, 49], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update": [[50, 56], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.__getattr__": [[57, 64], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.__str__": [[65, 70], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\"{}: {:.2f} \"", ".", "format", "(", "name", ",", "meter", ".", "avg", ")", ")", "# ({:.2f}) meter.median,", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.__init__": [[11, 28], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.save": [[29, 49], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.save"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "#self.tag_last_checkpoint(save_file)", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load": [[50, 69], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.MmnCheckpointer._load_file", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict"], ["", "def", "load", "(", "self", ",", "f", "=", "None", ",", "use_latest", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "has_checkpoint", "(", ")", "and", "use_latest", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", ")", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "# return any further checkpoint data", "\n", "", "return", "self", ".", "model", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.has_checkpoint": [[70, 73], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "has_checkpoint", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.get_checkpoint_file": [[74, 85], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["None"], ["", "def", "get_checkpoint_file", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", "\n", "last_saved", "=", "last_saved", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[86, 90], ["os.path.join", "open", "f.write"], "methods", ["None"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer._load_file": [[91, 93], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer._load_model": [[94, 96], ["mmn.utils.model_serialization.load_state_dict", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.model_serialization.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "load_state_dict", "(", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.MmnCheckpointer.__init__": [[99, 113], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MmnCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.MmnCheckpointer._load_file": [[114, 119], ["checkpoint.Checkpointer._load_file", "dict"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.MmnCheckpointer._load_file"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "loaded", "=", "super", "(", "MmnCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.modeling.__init__.build_model": [[4, 6], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to": [[15, 24], ["tlg_batch.TLGBatch.feats.to", "query.to", "word_len.to", "iou2d.to", "moment.to"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to"], ["def", "to", "(", "self", ",", "device", ")", ":", "\n", "# self.frames = [f.to(device) for f in self.frames]", "\n", "        ", "self", ".", "feats", "=", "self", ".", "feats", ".", "to", "(", "device", ")", "\n", "self", ".", "queries", "=", "[", "query", ".", "to", "(", "device", ")", "for", "query", "in", "self", ".", "queries", "]", "\n", "self", ".", "wordlens", "=", "[", "word_len", ".", "to", "(", "device", ")", "for", "word_len", "in", "self", ".", "wordlens", "]", "\n", "self", ".", "all_iou2d", "=", "[", "iou2d", ".", "to", "(", "device", ")", "for", "iou2d", "in", "self", ".", "all_iou2d", "]", "\n", "self", ".", "moments", "=", "[", "moment", ".", "to", "(", "device", ")", "for", "moment", "in", "self", ".", "moments", "]", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.config.paths_catalog.DatasetCatalog.get": [[50, 75], ["dict", "RuntimeError", "dict", "os.path.join", "os.path.join", "dict", "dict"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "#root=os.path.join(data_dir, attrs[\"video_dir\"]),", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"ann_file\"", "]", ")", ",", "\n", "feat_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"feat_file\"", "]", ")", ",", "\n", ")", "\n", "if", "\"tacos\"", "in", "name", ":", "\n", "            ", "return", "dict", "(", "\n", "factory", "=", "\"TACoSDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"activitynet\"", "in", "name", ":", "\n", "            ", "return", "dict", "(", "\n", "factory", "=", "\"ActivityNetDataset\"", ",", "\n", "args", "=", "args", "\n", ")", "\n", "", "elif", "\"charades\"", "in", "name", ":", "\n", "            ", "return", "dict", "(", "\n", "factory", "=", "\"CharadesDataset\"", ",", "\n", "args", "=", "args", "\n", ")", "\n", "", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.compute_on_dataset": [[10, 29], ["model.eval", "torch.device", "results_dict.update", "torch.no_grad", "model", "timer.tic", "batches.to", "timer.toc", "torch.cuda.synchronize", "o.to", "o.to", "zip"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to"], ["def", "compute_on_dataset", "(", "model", ",", "data_loader", ",", "device", ",", "timer", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results_dict", "=", "{", "}", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "for", "batch", "in", "data_loader", ":", "# use tqdm(data_loader) for showing progress bar", "\n", "        ", "batches", ",", "idxs", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "timer", ":", "\n", "                ", "timer", ".", "tic", "(", ")", "\n", "", "_", ",", "_", ",", "contrastive_output", ",", "iou_output", "=", "model", "(", "batches", ".", "to", "(", "device", ")", ")", "\n", "if", "timer", ":", "\n", "                ", "if", "not", "device", ".", "type", "==", "'cpu'", ":", "\n", "                    ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "timer", ".", "toc", "(", ")", "\n", "", "contrastive_output", ",", "iou_output", "=", "[", "o", ".", "to", "(", "cpu_device", ")", "for", "o", "in", "contrastive_output", "]", ",", "[", "o", ".", "to", "(", "cpu_device", ")", "for", "o", "in", "iou_output", "]", "\n", "", "results_dict", ".", "update", "(", "\n", "{", "video_id", ":", "{", "'contrastive'", ":", "result1", ",", "'iou'", ":", "result2", "}", "for", "video_id", ",", "result1", ",", "result2", "in", "zip", "(", "idxs", ",", "contrastive_output", ",", "iou_output", ")", "}", "\n", ")", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference._accumulate_predictions_from_multiple_gpus": [[31, 51], ["utils.comm.all_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "len", "logging.getLogger", "logging.getLogger.warning", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.all_gather", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.is_main_process", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update"], ["", "def", "_accumulate_predictions_from_multiple_gpus", "(", "predictions_per_gpu", ")", ":", "\n", "    ", "all_predictions", "=", "all_gather", "(", "predictions_per_gpu", ")", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "# merge the list of dicts", "\n", "", "predictions", "=", "{", "}", "\n", "for", "p", "in", "all_predictions", ":", "\n", "        ", "predictions", ".", "update", "(", "p", ")", "\n", "# convert a dict where the key is the index in a list", "\n", "", "idxs", "=", "list", "(", "sorted", "(", "predictions", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "idxs", ")", "!=", "idxs", "[", "-", "1", "]", "+", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.inference\"", ")", "\n", "logger", ".", "warning", "(", "\n", "\"Number of samples that were gathered from multiple processes is not \"", "\n", "\"a contiguous set. Some samples might be missing from the evaluation\"", "\n", ")", "\n", "\n", "# convert to a list", "\n", "", "predictions", "=", "[", "predictions", "[", "i", "]", "for", "i", "in", "idxs", "]", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.inference": [[52, 85], ["torch.device", "utils.comm.get_world_size", "logging.getLogger", "logging.getLogger.info", "utils.timer.Timer", "inference.compute_on_dataset", "utils.comm.synchronize", "utils.timer.get_time_str", "logging.getLogger.info", "inference._accumulate_predictions_from_multiple_gpus", "mmn.data.datasets.evaluation.evaluate", "len", "len"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.compute_on_dataset", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.timer.get_time_str", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.evaluation.evaluate"], ["", "def", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loader", ",", "\n", "dataset_name", ",", "\n", "nms_thresh", ",", "\n", "device", "=", "\"cuda\"", ",", "\n", ")", ":", "\n", "# convert to a torch.device for efficiency", "\n", "    ", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "num_devices", "=", "get_world_size", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.inference\"", ")", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "logger", ".", "info", "(", "\"Start evaluation on {} dataset (Size: {}).\"", ".", "format", "(", "dataset_name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "inference_timer", "=", "Timer", "(", ")", "\n", "predictions", "=", "compute_on_dataset", "(", "model", ",", "data_loader", ",", "device", ",", "inference_timer", ")", "\n", "# wait for all processes to complete before measuring the time", "\n", "synchronize", "(", ")", "\n", "total_infer_time", "=", "get_time_str", "(", "inference_timer", ".", "total_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"Model inference time: {} ({:.03f} s / inference per device, on {} devices)\"", ".", "format", "(", "\n", "total_infer_time", ",", "\n", "inference_timer", ".", "total_time", "*", "num_devices", "/", "len", "(", "dataset", ")", ",", "\n", "num_devices", ",", "\n", ")", "\n", ")", "\n", "\n", "predictions", "=", "_accumulate_predictions_from_multiple_gpus", "(", "predictions", ")", "\n", "'''\n    if not is_main_process():\n        return\n    '''", "\n", "return", "evaluate", "(", "cfg", ",", "dataset", "=", "dataset", ",", "predictions", "=", "predictions", ",", "nms_thresh", "=", "nms_thresh", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.trainer.reduce_loss": [[16, 28], ["mmn.utils.comm.get_world_size", "loss.item.item", "torch.no_grad", "torch.no_grad", "torch.reduce", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_rank"], ["def", "reduce_loss", "(", "loss", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "reduce", "(", "loss", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "loss", "/=", "world_size", "\n", "", "", "loss", "=", "loss", ".", "item", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.trainer.do_train": [[30, 143], ["logging.getLogger", "logging.getLogger.info", "mmn.utils.metric_logger.MetricLogger", "model.train", "time.time", "time.time", "len", "range", "str", "logging.getLogger.info", "data_loader.batch_sampler.sampler.set_epoch", "logging.getLogger.info", "enumerate", "scheduler.step", "time.time", "datetime.timedelta", "logging.getLogger.info", "logging.getLogger.info", "batches.to.to", "optimizer.zero_grad", "model", "mmn.utils.metric_logger.MetricLogger.update", "loss.backward", "optimizer.step", "time.time", "mmn.utils.metric_logger.MetricLogger.update", "str", "gc.collect", "checkpointer.save", "mmn.utils.comm.synchronize", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "mmn.engine.inference.inference", "mmn.utils.comm.synchronize", "model.train", "param.requires_grad_", "param.requires_grad_", "str", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "time.time", "datetime.timedelta", "logging.getLogger.info", "loss_vid.detach", "loss_sent.detach", "loss_iou.detach", "model.parameters", "mmn.utils.metric_logger.MetricLogger.delimiter.join().format", "int", "mmn.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.train", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.samplers.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.mcg-nju_mmn.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.engine.inference.inference", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.synchronize", "home.repos.pwc.inspect_result.mcg-nju_mmn.None.train_net.train"], ["", "def", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loader", ",", "\n", "data_loader_val", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "test_period", ",", "\n", "arguments", ",", "\n", "param_dict", ",", "\n", "max_norm", "=", "5", "\n", ")", ":", "\n", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "max_epoch", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCH", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "max_iteration", "=", "len", "(", "data_loader", ")", "\n", "writer_count", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "arguments", "[", "\"epoch\"", "]", ",", "max_epoch", "+", "1", ")", ":", "\n", "        ", "rest_epoch_iteration", "=", "(", "max_epoch", "-", "epoch", ")", "*", "max_iteration", "\n", "arguments", "[", "\"epoch\"", "]", "=", "epoch", "\n", "data_loader", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "epoch", "<=", "cfg", ".", "SOLVER", ".", "FREEZE_BERT", ":", "\n", "            ", "for", "param", "in", "param_dict", "[", "'bert'", "]", ":", "\n", "                ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "param", "in", "param_dict", "[", "'bert'", "]", ":", "\n", "                ", "param", ".", "requires_grad_", "(", "True", ")", "\n", "", "", "logger", ".", "info", "(", "\"Start epoch {}. base_lr={:.1e}, bert_lr={:.1e}, bert.requires_grad={}\"", ".", "format", "(", "epoch", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "optimizer", ".", "param_groups", "[", "1", "]", "[", "\"lr\"", "]", ",", "str", "(", "param_dict", "[", "'bert'", "]", "[", "0", "]", ".", "requires_grad", ")", ")", ")", "\n", "if", "epoch", "<=", "cfg", ".", "SOLVER", ".", "ONLY_IOU", ":", "\n", "            ", "logger", ".", "info", "(", "\"Using all losses\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Using only bce loss\"", ")", "\n", "", "for", "iteration", ",", "(", "batches", ",", "idx", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "writer_count", "+=", "1", "\n", "iteration", "+=", "1", "\n", "batches", "=", "batches", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "contr_weight", "=", "cfg", ".", "MODEL", ".", "MMN", ".", "LOSS", ".", "CONTRASTIVE_WEIGHT", "\n", "loss_vid", ",", "loss_sent", ",", "loss_iou", "=", "model", "(", "batches", ",", "cur_epoch", "=", "epoch", ")", "\n", "loss_vid", ",", "loss_sent", "=", "loss_vid", "*", "contr_weight", ",", "loss_sent", "*", "contr_weight", "\n", "meters", ".", "update", "(", "loss_vid", "=", "loss_vid", ".", "detach", "(", ")", ",", "loss_sent", "=", "loss_sent", ".", "detach", "(", ")", ",", "loss_iou", "=", "loss_iou", ".", "detach", "(", ")", ")", "\n", "loss", "=", "0", "\n", "if", "epoch", "<=", "cfg", ".", "SOLVER", ".", "ONLY_IOU", ":", "\n", "                ", "loss", "+=", "loss_iou", "\n", "loss", "+=", "loss_sent", "+", "loss_vid", "\n", "", "else", ":", "\n", "                ", "loss", "+=", "loss_iou", "\n", "loss", "+=", "(", "loss_sent", "+", "loss_vid", ")", "*", "0.01", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "max_norm", ">", "0", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ")", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iteration", "-", "iteration", "+", "rest_epoch_iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "10", "==", "0", "or", "iteration", "==", "max_iteration", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"epoch: {epoch}/{max_epoch}\"", ",", "\n", "\"iteration: {iteration}/{max_iteration}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "epoch", "=", "epoch", ",", "\n", "max_epoch", "=", "max_epoch", ",", "\n", "iteration", "=", "iteration", ",", "\n", "max_iteration", "=", "max_iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "if", "checkpoint_period", "!=", "-", "1", "and", "epoch", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "checkpointer", ".", "save", "(", "f\"{cfg.MODEL.MMN.FEAT2D.NAME}_model_{epoch}e\"", ",", "**", "arguments", ")", "\n", "\n", "", "if", "data_loader_val", "is", "not", "None", "and", "test_period", ">", "0", "and", "epoch", "%", "test_period", "==", "0", "and", "epoch", ">=", "cfg", ".", "SOLVER", ".", "SKIP_TEST", ":", "\n", "            ", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "result_dict", "=", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iteration", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.samplers.DistributedSampler.__init__": [[5, 8], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.samplers.DistributedSampler.__iter__": [[9, 27], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.samplers.DistributedSampler.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.samplers.DistributedSampler.set_epoch": [[31, 33], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.collate_batch.BatchCollator.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.collate_batch.BatchCollator.__call__": [[14, 27], ["list", "zip", "mmn.structures.TLGBatch", "torch.stack().float", "torch.stack"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "# [xxx, xxx, xxx], [xxx, xxx, xxx] ......", "\n", "feats", ",", "queries", ",", "wordlens", ",", "ious2d", ",", "moments", ",", "num_sentence", ",", "idxs", "=", "transposed_batch", "\n", "\n", "return", "TLGBatch", "(", "\n", "feats", "=", "torch", ".", "stack", "(", "feats", ")", ".", "float", "(", ")", ",", "\n", "queries", "=", "queries", ",", "\n", "wordlens", "=", "wordlens", ",", "\n", "all_iou2d", "=", "ious2d", ",", "\n", "moments", "=", "moments", ",", "\n", "num_sentence", "=", "num_sentence", ",", "\n", ")", ",", "idxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.build_dataset": [[9, 36], ["isinstance", "RuntimeError", "dataset_catalog.get", "getattr", "getattr.", "datasets.append", "len", "datasets.ConcatDataset"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.config.paths_catalog.DatasetCatalog.get"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_sampler": [[37, 45], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_train_data_sampler": [[46, 52], ["torch.utils.data.sampler.BatchSampler"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_test_data_sampler": [[53, 58], ["torch.utils.data.sampler.BatchSampler"], "function", ["None"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_loader": [[59, 108], ["mmn.utils.comm.get_world_size", "mmn.utils.imports.import_file", "__init__.build_dataset", "logging.getLogger", "__init__.make_data_sampler", "torch.utils.data.DataLoader", "data_loaders.append", "__init__.make_train_data_sampler", "__init__.make_test_data_sampler", "len", "collate_batch.BatchCollator"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.get_world_size", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.imports.import_file", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.build_dataset", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_data_sampler", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_train_data_sampler", "home.repos.pwc.inspect_result.mcg-nju_mmn.data.__init__.make_test_data_sampler"], []], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.__init__": [[9, 50], ["super().__init__", "transformers.DistilBertTokenizer.from_pretrained", "logging.getLogger", "logging.getLogger.info", "json.load.items", "open", "json.load", "zip", "torch.stack", "torch.stack", "utils.bert_embedding", "activitynet.ActivityNetDataset.annos.append", "torch.stack.size", "torch.stack.size", "torch.stack.size", "queries.size", "torch.stack.size", "word_lens.size", "torch.Tensor", "torch.stack.append", "utils.moment_to_iou2d", "torch.stack.append", "sentences.append", "max", "min"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.bert_embedding", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.moment_to_iou2d"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "feat_file", ",", "num_pre_clips", ",", "num_clips", ")", ":", "\n", "        ", "super", "(", "ActivityNetDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_file", "=", "feat_file", "\n", "self", ".", "num_pre_clips", "=", "num_pre_clips", "\n", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "annos", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "annos", "=", "[", "]", "\n", "tokenizer", "=", "DistilBertTokenizer", ".", "from_pretrained", "(", "'distilbert-base-uncased'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Preparing data, please wait...\"", ")", "\n", "\n", "for", "vid", ",", "anno", "in", "annos", ".", "items", "(", ")", ":", "\n", "            ", "duration", "=", "anno", "[", "'duration'", "]", "\n", "# Produce annotations", "\n", "moments", "=", "[", "]", "\n", "all_iou2d", "=", "[", "]", "\n", "sentences", "=", "[", "]", "\n", "for", "timestamp", ",", "sentence", "in", "zip", "(", "anno", "[", "'timestamps'", "]", ",", "anno", "[", "'sentences'", "]", ")", ":", "\n", "                ", "if", "timestamp", "[", "0", "]", "<", "timestamp", "[", "1", "]", ":", "\n", "                    ", "moment", "=", "torch", ".", "Tensor", "(", "[", "max", "(", "timestamp", "[", "0", "]", ",", "0", ")", ",", "min", "(", "timestamp", "[", "1", "]", ",", "duration", ")", "]", ")", "\n", "moments", ".", "append", "(", "moment", ")", "\n", "iou2d", "=", "moment_to_iou2d", "(", "moment", ",", "num_clips", ",", "duration", ")", "\n", "all_iou2d", ".", "append", "(", "iou2d", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "\n", "", "", "moments", "=", "torch", ".", "stack", "(", "moments", ")", "\n", "all_iou2d", "=", "torch", ".", "stack", "(", "all_iou2d", ")", "\n", "queries", ",", "word_lens", "=", "bert_embedding", "(", "sentences", ",", "tokenizer", ")", "# padded query of N*word_len, tensor of size = N", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "all_iou2d", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "queries", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "word_lens", ".", "size", "(", "0", ")", "\n", "self", ".", "annos", ".", "append", "(", "\n", "{", "\n", "'vid'", ":", "vid", ",", "\n", "'moment'", ":", "moments", ",", "\n", "'iou2d'", ":", "all_iou2d", ",", "\n", "'sentence'", ":", "sentences", ",", "\n", "'query'", ":", "queries", ",", "\n", "'wordlen'", ":", "word_lens", ",", "\n", "'duration'", ":", "duration", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.__getitem__": [[54, 58], ["utils.get_vid_feat", "len"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_vid_feat"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#feat = self.feats[self.annos[idx]['vid']]", "\n", "        ", "feat", "=", "get_vid_feat", "(", "self", ".", "feat_file", ",", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", ",", "self", ".", "num_pre_clips", ",", "dataset_name", "=", "\"activitynet\"", ")", "\n", "return", "feat", ",", "self", ".", "annos", "[", "idx", "]", "[", "'query'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'wordlen'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'iou2d'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", ",", "len", "(", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.get_duration": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_duration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.get_sentence": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_sentence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.get_moment": [[68, 70], ["None"], "methods", ["None"], ["", "def", "get_moment", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.activitynet.ActivityNetDataset.get_vid": [[71, 73], ["None"], "methods", ["None"], ["", "def", "get_vid", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.__init__": [[10, 51], ["super().__init__", "transformers.DistilBertTokenizer.from_pretrained", "logging.getLogger", "logging.getLogger.info", "json.load.items", "open", "json.load", "zip", "torch.stack", "torch.stack", "utils.bert_embedding", "charades.CharadesDataset.annos.append", "torch.stack.size", "torch.stack.size", "torch.stack.size", "queries.size", "torch.stack.size", "word_lens.size", "torch.Tensor", "torch.stack.append", "utils.moment_to_iou2d", "torch.stack.append", "sentences.append", "max", "min"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.bert_embedding", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.moment_to_iou2d"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "feat_file", ",", "num_pre_clips", ",", "num_clips", ")", ":", "\n", "        ", "super", "(", "CharadesDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_file", "=", "feat_file", "\n", "self", ".", "num_pre_clips", "=", "num_pre_clips", "\n", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "annos", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "annos", "=", "[", "]", "\n", "tokenizer", "=", "DistilBertTokenizer", ".", "from_pretrained", "(", "\"distilbert-base-uncased\"", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Preparing data, please wait...\"", ")", "\n", "\n", "for", "vid", ",", "anno", "in", "annos", ".", "items", "(", ")", ":", "\n", "            ", "duration", "=", "anno", "[", "'duration'", "]", "\n", "# Produce annotations", "\n", "moments", "=", "[", "]", "\n", "all_iou2d", "=", "[", "]", "\n", "sentences", "=", "[", "]", "\n", "for", "timestamp", ",", "sentence", "in", "zip", "(", "anno", "[", "'timestamps'", "]", ",", "anno", "[", "'sentences'", "]", ")", ":", "\n", "                ", "if", "timestamp", "[", "0", "]", "<", "timestamp", "[", "1", "]", ":", "\n", "                    ", "moment", "=", "torch", ".", "Tensor", "(", "[", "max", "(", "timestamp", "[", "0", "]", ",", "0", ")", ",", "min", "(", "timestamp", "[", "1", "]", ",", "duration", ")", "]", ")", "\n", "moments", ".", "append", "(", "moment", ")", "\n", "iou2d", "=", "moment_to_iou2d", "(", "moment", ",", "num_clips", ",", "duration", ")", "\n", "all_iou2d", ".", "append", "(", "iou2d", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "", "", "moments", "=", "torch", ".", "stack", "(", "moments", ")", "\n", "all_iou2d", "=", "torch", ".", "stack", "(", "all_iou2d", ")", "\n", "queries", ",", "word_lens", "=", "bert_embedding", "(", "sentences", ",", "tokenizer", ")", "# padded query of N*word_len, tensor of size = N", "\n", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "all_iou2d", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "queries", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "word_lens", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "annos", ".", "append", "(", "\n", "{", "\n", "'vid'", ":", "vid", ",", "\n", "'moment'", ":", "moments", ",", "\n", "'iou2d'", ":", "all_iou2d", ",", "\n", "'sentence'", ":", "sentences", ",", "\n", "'query'", ":", "queries", ",", "\n", "'wordlen'", ":", "word_lens", ",", "\n", "'duration'", ":", "duration", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.__getitem__": [[55, 59], ["utils.get_vid_feat", "len"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_vid_feat"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#feat = self.feats[self.annos[idx]['vid']]", "\n", "        ", "feat", "=", "get_vid_feat", "(", "self", ".", "feat_file", ",", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", ",", "self", ".", "num_pre_clips", ",", "dataset_name", "=", "\"charades\"", ")", "\n", "return", "feat", ",", "self", ".", "annos", "[", "idx", "]", "[", "'query'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'wordlen'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'iou2d'", "]", ",", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", ",", "len", "(", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.get_duration": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_duration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.get_sentence": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_sentence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.get_moment": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_moment", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.charades.CharadesDataset.get_vid": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_vid", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.concat_dataset.ConcatDataset.__init__": [[12, 14], ["torch.utils.data.dataset.ConcatDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.concat_dataset.ConcatDataset.get_idxs": [[15, 22], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_idxs", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "dataset_idx", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.concat_dataset.ConcatDataset.get_img_info": [[23, 26], ["concat_dataset.ConcatDataset.get_idxs", "concat_dataset.ConcatDataset.datasets[].get_img_info"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.concat_dataset.ConcatDataset.get_idxs", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.concat_dataset.ConcatDataset.get_img_info"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "sample_idx", "=", "self", ".", "get_idxs", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "get_img_info", "(", "sample_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__": [[10, 52], ["super().__init__", "logging.getLogger", "logging.getLogger.info", "transformers.DistilBertTokenizer.from_pretrained", "json.load.items", "open", "json.load", "zip", "torch.stack", "torch.stack", "utils.bert_embedding", "tacos.TACoSDataset.annos.append", "torch.stack.size", "torch.stack.size", "torch.stack.size", "queries.size", "torch.stack.size", "word_lens.size", "torch.Tensor", "torch.stack.append", "utils.moment_to_iou2d", "torch.stack.append", "sentences.append", "max", "min"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__init__", "home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.bert_embedding", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.moment_to_iou2d"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "feat_file", ",", "num_pre_clips", ",", "num_clips", ")", ":", "\n", "        ", "super", "(", "TACoSDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_file", "=", "feat_file", "\n", "self", ".", "num_pre_clips", "=", "num_pre_clips", "\n", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "annos", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "annos", "=", "[", "]", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Preparing data, please wait...\"", ")", "\n", "tokenizer", "=", "DistilBertTokenizer", ".", "from_pretrained", "(", "'distilbert-base-uncased'", ")", "\n", "\n", "for", "vid", ",", "anno", "in", "annos", ".", "items", "(", ")", ":", "\n", "            ", "duration", "=", "anno", "[", "'num_frames'", "]", "/", "anno", "[", "'fps'", "]", "# duration of the video", "\n", "# Produce annotations", "\n", "moments", "=", "[", "]", "\n", "all_iou2d", "=", "[", "]", "\n", "sentences", "=", "[", "]", "\n", "for", "timestamp", ",", "sentence", "in", "zip", "(", "anno", "[", "'timestamps'", "]", ",", "anno", "[", "'sentences'", "]", ")", ":", "\n", "                ", "if", "timestamp", "[", "0", "]", "<", "timestamp", "[", "1", "]", ":", "\n", "                    ", "moment", "=", "torch", ".", "Tensor", "(", "[", "max", "(", "timestamp", "[", "0", "]", "/", "anno", "[", "'fps'", "]", ",", "0", ")", ",", "min", "(", "timestamp", "[", "1", "]", "/", "anno", "[", "'fps'", "]", ",", "duration", ")", "]", ")", "\n", "moments", ".", "append", "(", "moment", ")", "\n", "iou2d", "=", "moment_to_iou2d", "(", "moment", ",", "num_clips", ",", "duration", ")", "\n", "all_iou2d", ".", "append", "(", "iou2d", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "\n", "", "", "moments", "=", "torch", ".", "stack", "(", "moments", ")", "\n", "all_iou2d", "=", "torch", ".", "stack", "(", "all_iou2d", ")", "\n", "queries", ",", "word_lens", "=", "bert_embedding", "(", "sentences", ",", "tokenizer", ")", "# padded query of N*word_len, tensor of size = N", "\n", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "all_iou2d", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "queries", ".", "size", "(", "0", ")", "\n", "assert", "moments", ".", "size", "(", "0", ")", "==", "word_lens", ".", "size", "(", "0", ")", "\n", "self", ".", "annos", ".", "append", "(", "\n", "{", "\n", "'vid'", ":", "vid", ",", "\n", "'moment'", ":", "moments", ",", "# N * 2", "\n", "'iou2d'", ":", "all_iou2d", ",", "# N * 128*128", "\n", "'sentence'", ":", "sentences", ",", "# list, len=N", "\n", "'query'", ":", "queries", ",", "# padded query, N*word_len*C for LSTM and N*word_len for BERT", "\n", "'wordlen'", ":", "word_lens", ",", "# size = N", "\n", "'duration'", ":", "duration", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__getitem__": [[57, 65], ["utils.get_vid_feat", "len"], "methods", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_vid_feat"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# feat = self.feats[self.annos[idx]['vid']]", "\n", "        ", "feat", "=", "get_vid_feat", "(", "self", ".", "feat_file", ",", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", ",", "self", ".", "num_pre_clips", ",", "dataset_name", "=", "\"tacos\"", ")", "\n", "query", "=", "self", ".", "annos", "[", "idx", "]", "[", "'query'", "]", "\n", "wordlen", "=", "self", ".", "annos", "[", "idx", "]", "[", "'wordlen'", "]", "\n", "iou2d", "=", "self", ".", "annos", "[", "idx", "]", "[", "'iou2d'", "]", "\n", "moment", "=", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", "\n", "return", "feat", ",", "query", ",", "wordlen", ",", "iou2d", ",", "moment", ",", "len", "(", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_duration": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_duration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_sentence": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_sentence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_moment": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_moment", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_vid": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_vid", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'vid'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.iou": [[11, 18], ["gt[].float", "gt[].float", "end.min", "start.max", "end.max", "start.min", "inter.clamp"], "function", ["None"], ["def", "iou", "(", "candidates", ",", "gt", ")", ":", "\n", "    ", "start", ",", "end", "=", "candidates", "[", ":", ",", "0", "]", ",", "candidates", "[", ":", ",", "1", "]", "\n", "s", ",", "e", "=", "gt", "[", "0", "]", ".", "float", "(", ")", ",", "gt", "[", "1", "]", ".", "float", "(", ")", "\n", "# print(s.dtype, start.dtype)", "\n", "inter", "=", "end", ".", "min", "(", "e", ")", "-", "start", ".", "max", "(", "s", ")", "\n", "union", "=", "end", ".", "max", "(", "e", ")", "-", "start", ".", "min", "(", "s", ")", "\n", "return", "inter", ".", "clamp", "(", "min", "=", "0", ")", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.box_iou": [[19, 28], ["utils.box_length", "utils.box_length", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.box_length", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.box_length"], ["", "def", "box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "area1", "=", "box_length", "(", "boxes1", ")", "\n", "area2", "=", "box_length", "(", "boxes2", ")", "\n", "max_start", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "None", ",", "0", "]", ",", "boxes2", "[", ":", ",", "0", "]", ")", "# [N,M]", "\n", "min_end", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", "1", "]", ",", "boxes2", "[", ":", ",", "1", "]", ")", "# [N,M]", "\n", "inter", "=", "(", "min_end", "-", "max_start", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M]", "\n", "union", "=", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", "\n", "iou", "=", "inter", "/", "union", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.box_length": [[30, 32], ["None"], "function", ["None"], ["", "def", "box_length", "(", "boxes", ")", ":", "\n", "    ", "return", "boxes", "[", ":", ",", "1", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.score2d_to_moments_scores": [[34, 40], ["score2d.nonzero"], "function", ["None"], ["", "def", "score2d_to_moments_scores", "(", "score2d", ",", "num_clips", ",", "duration", ")", ":", "\n", "    ", "grids", "=", "score2d", ".", "nonzero", "(", ")", "\n", "scores", "=", "score2d", "[", "grids", "[", ":", ",", "0", "]", ",", "grids", "[", ":", ",", "1", "]", "]", "\n", "grids", "[", ":", ",", "1", "]", "+=", "1", "\n", "moments", "=", "grids", "*", "duration", "/", "num_clips", "\n", "return", "moments", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.moment_to_iou2d": [[42, 47], ["torch.ones", "utils.score2d_to_moments_scores", "iou().reshape", "utils.iou"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.score2d_to_moments_scores", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.iou"], ["", "def", "moment_to_iou2d", "(", "moment", ",", "num_clips", ",", "duration", ")", ":", "\n", "    ", "iou2d", "=", "torch", ".", "ones", "(", "num_clips", ",", "num_clips", ")", "\n", "candidates", ",", "_", "=", "score2d_to_moments_scores", "(", "iou2d", ",", "num_clips", ",", "duration", ")", "\n", "iou2d", "=", "iou", "(", "candidates", ",", "moment", ")", ".", "reshape", "(", "num_clips", ",", "num_clips", ")", "\n", "return", "iou2d", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.avgfeats": [[49, 64], ["feats.size", "idxs.round().long().clamp.round().long().clamp", "range", "torch.stack", "torch.arange", "idxs.round().long().clamp.round().long", "meanfeats.append", "meanfeats.append", "feats[].mean", "idxs.round().long().clamp.round"], "function", ["None"], ["", "def", "avgfeats", "(", "feats", ",", "num_pre_clips", ")", ":", "\n", "# Produce the feature of per video into fixed shape (e.g. 256*4096)", "\n", "# Input Example: feats (torch.tensor, ?x4096); num_pre_clips (256)", "\n", "    ", "num_src_clips", "=", "feats", ".", "size", "(", "0", ")", "\n", "idxs", "=", "torch", ".", "arange", "(", "0", ",", "num_pre_clips", "+", "1", ",", "1.0", ")", "/", "num_pre_clips", "*", "num_src_clips", "\n", "idxs", "=", "idxs", ".", "round", "(", ")", ".", "long", "(", ")", ".", "clamp", "(", "max", "=", "num_src_clips", "-", "1", ")", "\n", "# To prevent a empty selection, check the idxs", "\n", "meanfeats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_pre_clips", ")", ":", "\n", "        ", "s", ",", "e", "=", "idxs", "[", "i", "]", ",", "idxs", "[", "i", "+", "1", "]", "\n", "if", "s", "<", "e", ":", "\n", "            ", "meanfeats", ".", "append", "(", "feats", "[", "s", ":", "e", "]", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "meanfeats", ".", "append", "(", "feats", "[", "s", "]", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "meanfeats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.maxfeats": [[65, 80], ["feats.size", "idxs.round().long().clamp.round().long().clamp", "range", "torch.stack", "torch.arange", "idxs.round().long().clamp.round().long", "maxfeats.append", "maxfeats.append", "idxs.round().long().clamp.round", "feats[].max"], "function", ["None"], ["", "def", "maxfeats", "(", "feats", ",", "num_pre_clips", ")", ":", "\n", "# Produce the feature of per video into fixed shape (e.g. 256*4096)", "\n", "# Input Example: feats (torch.tensor, ?x4096); num_pre_clips (256)", "\n", "    ", "num_src_clips", "=", "feats", ".", "size", "(", "0", ")", "\n", "idxs", "=", "torch", ".", "arange", "(", "0", ",", "num_pre_clips", "+", "1", ",", "1.0", ")", "/", "num_pre_clips", "*", "num_src_clips", "\n", "idxs", "=", "idxs", ".", "round", "(", ")", ".", "long", "(", ")", ".", "clamp", "(", "max", "=", "num_src_clips", "-", "1", ")", "\n", "# To prevent a empty selection, check the idxs", "\n", "maxfeats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_pre_clips", ")", ":", "\n", "        ", "s", ",", "e", "=", "idxs", "[", "i", "]", ",", "idxs", "[", "i", "+", "1", "]", "\n", "if", "s", "<", "e", ":", "\n", "            ", "maxfeats", ".", "append", "(", "feats", "[", "s", ":", "e", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "maxfeats", ".", "append", "(", "feats", "[", "s", "]", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "maxfeats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.video2feats": [[81, 93], ["os.path.exists", "h5py.File", "torch.functional.F.normalize", "utils.avgfeats", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.avgfeats"], ["", "def", "video2feats", "(", "feat_file", ",", "vids", ",", "num_pre_clips", ",", "dataset_name", ")", ":", "\n", "    ", "assert", "exists", "(", "feat_file", ")", "\n", "vid_feats", "=", "{", "}", "\n", "with", "h5py", ".", "File", "(", "feat_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "vid", "in", "vids", ":", "\n", "            ", "if", "dataset_name", "==", "\"activitynet\"", ":", "\n", "                ", "feat", "=", "f", "[", "vid", "]", "[", "'c3d_features'", "]", "[", ":", "]", "\n", "", "else", ":", "\n", "                ", "feat", "=", "f", "[", "vid", "]", "[", ":", "]", "\n", "", "feat", "=", "F", ".", "normalize", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "dim", "=", "1", ")", "\n", "vid_feats", "[", "vid", "]", "=", "avgfeats", "(", "feat", ",", "num_pre_clips", ")", "\n", "", "", "return", "vid_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_vid_feat": [[94, 108], ["os.path.exists", "utils.avgfeats", "h5py.File", "torch.functional.F.normalize", "torch.from_numpy", "torch.functional.F.normalize", "torch.functional.F.normalize", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.avgfeats"], ["", "def", "get_vid_feat", "(", "feat_file", ",", "vid", ",", "num_pre_clips", ",", "dataset_name", ")", ":", "\n", "    ", "assert", "exists", "(", "feat_file", ")", "\n", "with", "h5py", ".", "File", "(", "feat_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "if", "dataset_name", "==", "\"activitynet\"", ":", "\n", "            ", "feat", "=", "f", "[", "vid", "]", "[", "'c3d_features'", "]", "[", ":", "]", "\n", "feat", "=", "F", ".", "normalize", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "dataset_name", "==", "\"charades\"", ":", "\n", "            ", "feat", "=", "f", "[", "vid", "]", "[", ":", "]", "\n", "feat", "=", "F", ".", "normalize", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "feat", "=", "f", "[", "vid", "]", "[", ":", "]", "\n", "feat", "=", "F", ".", "normalize", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "avgfeats", "(", "feat", ",", "num_pre_clips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_feat_didemo": [[109, 114], ["os.path.exists", "torch.from_numpy", "h5py.File"], "function", ["None"], ["", "def", "get_feat_didemo", "(", "feat_file", ",", "vid", ")", ":", "\n", "    ", "assert", "exists", "(", "feat_file", ")", "\n", "with", "h5py", ".", "File", "(", "feat_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "feat", "=", "f", "[", "vid", "]", "[", ":", "]", "\n", "", "return", "torch", ".", "from_numpy", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.get_c3d_charades": [[115, 120], ["os.path.exists", "torch.load", "utils.maxfeats"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.maxfeats"], ["", "def", "get_c3d_charades", "(", "feat_file", ",", "num_pre_clips", ")", ":", "\n", "    ", "assert", "exists", "(", "feat_file", ")", "\n", "feat", "=", "torch", ".", "load", "(", "feat_file", ")", "\n", "#feat = F.normalize(feat, dim=1)", "\n", "return", "maxfeats", "(", "feat", ",", "num_pre_clips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.bert_embedding": [[121, 126], ["tokenizer", "query_token[].sum"], "function", ["None"], ["", "def", "bert_embedding", "(", "sentence", ",", "tokenizer", ")", ":", "\n", "    ", "query_token", "=", "tokenizer", "(", "sentence", ",", "return_tensors", "=", "\"pt\"", ",", "padding", "=", "True", ")", "\n", "word_lens", "=", "query_token", "[", "'attention_mask'", "]", ".", "sum", "(", "dim", "=", "1", ")", "\n", "queries", "=", "query_token", "[", "'input_ids'", "]", "\n", "return", "queries", ",", "word_lens", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.glove_embedding": [[128, 143], ["torch.tensor", "torch.nn.Embedding.from_pretrained.", "len", "vocab.itos.extend", "torch.cat", "vocabs.append", "len", "torch.nn.Embedding.from_pretrained", "embedders.append", "vocab.stoi.get", "torch.zeros", "w.lower", "sentence.split"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.config.paths_catalog.DatasetCatalog.get"], ["", "def", "glove_embedding", "(", "sentence", ",", "vocabs", "=", "[", "]", ",", "embedders", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "vocabs", ")", "==", "0", ":", "\n", "        ", "vocab", "=", "torchtext", ".", "vocab", ".", "pretrained_aliases", "[", "\"glove.840B.300d\"", "]", "(", ")", "\n", "vocab", ".", "itos", ".", "extend", "(", "[", "'<unk>'", "]", ")", "\n", "vocab", ".", "stoi", "[", "'<unk>'", "]", "=", "vocab", ".", "vectors", ".", "shape", "[", "0", "]", "\n", "vocab", ".", "vectors", "=", "torch", ".", "cat", "(", "[", "vocab", ".", "vectors", ",", "torch", ".", "zeros", "(", "1", ",", "vocab", ".", "dim", ")", "]", ",", "dim", "=", "0", ")", "\n", "vocabs", ".", "append", "(", "vocab", ")", "\n", "\n", "", "if", "len", "(", "embedders", ")", "==", "0", ":", "\n", "        ", "embedder", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "vocab", ".", "vectors", ")", "\n", "embedders", ".", "append", "(", "embedder", ")", "\n", "\n", "", "vocab", ",", "embedder", "=", "vocabs", "[", "0", "]", ",", "embedders", "[", "0", "]", "\n", "word_idxs", "=", "torch", ".", "tensor", "(", "[", "vocab", ".", "stoi", ".", "get", "(", "w", ".", "lower", "(", ")", ",", "400000", ")", "for", "w", "in", "sentence", ".", "split", "(", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "embedder", "(", "word_idxs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.evaluation.nms": [[9, 20], ["scores.sort", "ranks.zero_().bool", "ranks.zero_().bool.numel", "range", "ranks.zero_", "mmn.data.datasets.utils.iou"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.iou"], ["def", "nms", "(", "moments", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "scores", ",", "ranks", "=", "scores", ".", "sort", "(", "descending", "=", "True", ")", "\n", "moments", "=", "moments", "[", "ranks", "]", "\n", "suppressed", "=", "ranks", ".", "zero_", "(", ")", ".", "bool", "(", ")", "\n", "numel", "=", "suppressed", ".", "numel", "(", ")", "\n", "for", "i", "in", "range", "(", "numel", "-", "1", ")", ":", "\n", "        ", "if", "suppressed", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "", "mask", "=", "iou", "(", "moments", "[", "i", "+", "1", ":", "]", ",", "moments", "[", "i", "]", ")", ">", "thresh", "\n", "suppressed", "[", "i", "+", "1", ":", "]", "[", "mask", "]", "=", "True", "\n", "", "return", "moments", "[", "~", "suppressed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.evaluation.evaluate": [[22, 74], ["logging.getLogger", "logging.getLogger.info", "torch.tensor", "torch.tensor", "torch.zeros", "tqdm.tqdm", "terminaltables.AsciiTable.append", "terminaltables.AsciiTable", "range", "logging.getLogger.info", "range", "mmn.utils.comm.is_main_process", "len", "len", "enumerate", "dataset.get_duration", "dataset.get_moment", "zip", "range", "sum", "sum", "len", "torch.pow", "mmn.data.datasets.utils.score2d_to_moments_scores", "evaluation.nms", "enumerate", "NotImplementedError", "mmn.data.datasets.utils.iou", "bools.any", "range", "range", "torch.round", "mious[].expand", "torch.round"], "function", ["home.repos.pwc.inspect_result.mcg-nju_mmn.utils.comm.is_main_process", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_duration", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.tacos.TACoSDataset.get_moment", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.score2d_to_moments_scores", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.evaluation.nms", "home.repos.pwc.inspect_result.mcg-nju_mmn.datasets.utils.iou"], ["", "def", "evaluate", "(", "cfg", ",", "dataset", ",", "predictions", ",", "nms_thresh", ",", "recall_metrics", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "    ", "\"\"\"evaluate dataset using different methods based on dataset type.\n    Args:\n    Returns:\n    \"\"\"", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"tacos\"", ":", "\n", "        ", "iou_metrics", "=", "(", "0.1", ",", "0.3", ",", "0.5", ")", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"activitynet\"", ":", "\n", "        ", "iou_metrics", "=", "(", "0.3", ",", "0.5", ",", "0.7", ")", "\n", "", "elif", "cfg", ".", "DATASETS", ".", "NAME", "==", "\"charades\"", ":", "\n", "        ", "iou_metrics", "=", "(", "0.5", ",", "0.7", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No support for %s dataset!\"", "%", "cfg", ".", "DATASETS", ".", "NAME", ")", "\n", "", "dataset_name", "=", "dataset", ".", "__class__", ".", "__name__", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"mmn.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Performing {} evaluation (Size: {}).\"", ".", "format", "(", "dataset_name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "num_recall_metrics", ",", "num_iou_metrics", "=", "len", "(", "recall_metrics", ")", ",", "len", "(", "iou_metrics", ")", "\n", "recall_metrics", "=", "torch", ".", "tensor", "(", "recall_metrics", ")", "\n", "iou_metrics", "=", "torch", ".", "tensor", "(", "iou_metrics", ")", "\n", "num_clips", "=", "predictions", "[", "0", "]", "[", "'iou'", "]", ".", "shape", "[", "-", "1", "]", "\n", "table", "=", "[", "[", "'R@{},IoU@{:.01f}'", ".", "format", "(", "i", ",", "torch", ".", "round", "(", "j", "*", "100", ")", "/", "100", ")", "for", "i", "in", "recall_metrics", "for", "j", "in", "iou_metrics", "]", "]", "\n", "recall_x_iou", "=", "torch", ".", "zeros", "(", "num_recall_metrics", ",", "num_iou_metrics", ")", "\n", "num_instance", "=", "0", "\n", "for", "idx", ",", "result2d", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "# each video", "\n", "        ", "score2d", "=", "torch", ".", "pow", "(", "result2d", "[", "'contrastive'", "]", "*", "0.5", "+", "0.5", ",", "cfg", ".", "TEST", ".", "CONTRASTIVE_SCORE_POW", ")", "*", "result2d", "[", "'iou'", "]", "\n", "duration", "=", "dataset", ".", "get_duration", "(", "idx", ")", "\n", "gt_moments", "=", "dataset", ".", "get_moment", "(", "idx", ")", "\n", "for", "gt_moment", ",", "pred_score2d", "in", "zip", "(", "gt_moments", ",", "score2d", ")", ":", "# each sentence", "\n", "            ", "num_instance", "+=", "1", "\n", "candidates", ",", "scores", "=", "score2d_to_moments_scores", "(", "pred_score2d", ",", "num_clips", ",", "duration", ")", "\n", "moments", "=", "nms", "(", "candidates", ",", "scores", ",", "nms_thresh", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "recall_metrics", ")", ":", "\n", "                ", "mious", "=", "iou", "(", "moments", "[", ":", "r", "]", ",", "gt_moment", ")", "\n", "bools", "=", "mious", "[", ":", ",", "None", "]", ".", "expand", "(", "r", ",", "num_iou_metrics", ")", ">=", "iou_metrics", "\n", "recall_x_iou", "[", "i", "]", "+=", "bools", ".", "any", "(", "dim", "=", "0", ")", "\n", "", "", "", "recall_x_iou", "/=", "num_instance", "\n", "table", ".", "append", "(", "[", "'{:.02f}'", ".", "format", "(", "recall_x_iou", "[", "i", "]", "[", "j", "]", "*", "100", ")", "for", "i", "in", "range", "(", "num_recall_metrics", ")", "for", "j", "in", "range", "(", "num_iou_metrics", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table", ")", "\n", "for", "i", "in", "range", "(", "num_recall_metrics", "*", "num_iou_metrics", ")", ":", "\n", "        ", "table", ".", "justify_columns", "[", "i", "]", "=", "'center'", "\n", "", "logger", ".", "info", "(", "'\\n'", "+", "table", ".", "table", ")", "\n", "result_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_recall_metrics", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_iou_metrics", ")", ":", "\n", "            ", "result_dict", "[", "'R@{},IoU@{:.01f}'", ".", "format", "(", "recall_metrics", "[", "i", "]", ",", "torch", ".", "round", "(", "iou_metrics", "[", "j", "]", "*", "100", ")", "/", "100", ")", "]", "=", "recall_x_iou", "[", "i", "]", "[", "j", "]", "\n", "", "", "best_r1", "=", "sum", "(", "recall_x_iou", "[", "0", "]", ")", "/", "num_iou_metrics", "\n", "best_r5", "=", "sum", "(", "recall_x_iou", "[", "1", "]", ")", "/", "num_iou_metrics", "\n", "result_dict", "[", "'Best_R1'", "]", "=", "best_r1", "\n", "result_dict", "[", "'Best_R5'", "]", "=", "best_r5", "\n", "return", "result_dict", "\n", "\n"]]}