{"home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.peff_b0.PEffN_b0SeparateHP_V1.__init__": [[6, 72], ["predify.networks.PNetSeparateHP.__init__", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.act1.register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Sequential", "predify.modules.PCoderN", "peff_b0.PEffN_b0SeparateHP_V1.backbone.blocks[].register_forward_hook", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder1", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder2", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder3", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder4", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder5", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder6", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder7", "torch.nn.ConvTranspose2d", "peff_b0.PEffN_b0SeparateHP_V1.pcoder8"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "build_graph", "=", "False", ",", "random_init", "=", "False", ",", "ff_multiplier", "=", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "fb_multiplier", "=", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "er_multiplier", "=", "(", "0.01", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.01", ",", "0.01", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "8", ",", "build_graph", ",", "random_init", ",", "ff_multiplier", ",", "fb_multiplier", ",", "er_multiplier", ")", "\n", "\n", "# PCoder number 1", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "(", "2.0", ",", "2.0", ")", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "32", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder1", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook1", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder1", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder2", ".", "prd", ",", "target", "=", "self", ".", "input_mem", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm1", ",", "fbm", "=", "self", ".", "fbm1", ",", "erm", "=", "self", ".", "erm1", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "act1", ".", "register_forward_hook", "(", "fw_hook1", ")", "\n", "\n", "# PCoder number 2", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder2", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook2", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder2", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder3", ".", "prd", ",", "target", "=", "self", ".", "pcoder1", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm2", ",", "fbm", "=", "self", ".", "fbm2", ",", "erm", "=", "self", ".", "erm2", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "0", "]", ".", "register_forward_hook", "(", "fw_hook2", ")", "\n", "\n", "# PCoder number 3", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "(", "2.0", ",", "2.0", ")", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "24", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder3", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook3", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder3", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder4", ".", "prd", ",", "target", "=", "self", ".", "pcoder2", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm3", ",", "fbm", "=", "self", ".", "fbm3", ",", "erm", "=", "self", ".", "erm3", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "1", "]", ".", "register_forward_hook", "(", "fw_hook3", ")", "\n", "\n", "# PCoder number 4", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "(", "2.0", ",", "2.0", ")", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "40", ",", "24", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder4", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook4", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder4", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder5", ".", "prd", ",", "target", "=", "self", ".", "pcoder3", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm4", ",", "fbm", "=", "self", ".", "fbm4", ",", "erm", "=", "self", ".", "erm4", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "2", "]", ".", "register_forward_hook", "(", "fw_hook4", ")", "\n", "\n", "# PCoder number 5", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "(", "2.0", ",", "2.0", ")", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "80", ",", "40", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder5", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook5", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder5", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder6", ".", "prd", ",", "target", "=", "self", ".", "pcoder4", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm5", ",", "fbm", "=", "self", ".", "fbm5", ",", "erm", "=", "self", ".", "erm5", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "3", "]", ".", "register_forward_hook", "(", "fw_hook5", ")", "\n", "\n", "# PCoder number 6", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "112", ",", "80", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder6", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook6", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder6", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder7", ".", "prd", ",", "target", "=", "self", ".", "pcoder5", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm6", ",", "fbm", "=", "self", ".", "fbm6", ",", "erm", "=", "self", ".", "erm6", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "4", "]", ".", "register_forward_hook", "(", "fw_hook6", ")", "\n", "\n", "# PCoder number 7", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "(", "2.0", ",", "2.0", ")", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "192", ",", "112", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder7", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook7", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder7", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder8", ".", "prd", ",", "target", "=", "self", ".", "pcoder6", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm7", ",", "fbm", "=", "self", ".", "fbm7", ",", "erm", "=", "self", ".", "erm7", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "5", "]", ".", "register_forward_hook", "(", "fw_hook7", ")", "\n", "\n", "# PCoder number 8", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "320", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder8", "=", "PCoderN", "(", "pmodule", ",", "False", ",", "self", ".", "random_init", ")", "\n", "def", "fw_hook8", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder8", "(", "ff", "=", "m_out", ",", "fb", "=", "None", ",", "target", "=", "self", ".", "pcoder7", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm8", ",", "fbm", "=", "self", ".", "fbm8", ",", "erm", "=", "self", ".", "erm8", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "blocks", "[", "6", "]", ".", "register_forward_hook", "(", "fw_hook8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_pefbo_hps_imagenet.evaluate": [[51, 82], ["numpy.zeros", "numpy.zeros", "print", "range", "print", "images.cuda.cuda", "labels.cuda.cuda", "len", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "writer.add_scalar", "loss_function", "loss_function.item", "net.max", "preds.eq().sum", "net", "net", "preds.eq"], "function", ["None"], ["def", "evaluate", "(", "net", ",", "epoch", ",", "dataloader", ",", "timesteps", ",", "writer", "=", "None", ",", "tag", "=", "'Clean'", ")", ":", "\n", "    ", "test_loss", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ",", ")", ")", "\n", "correct", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ",", ")", ")", "\n", "for", "(", "images", ",", "labels", ")", "in", "dataloader", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "                ", "if", "tt", "==", "0", ":", "\n", "                    ", "outputs", "=", "net", "(", "images", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "net", "(", ")", "\n", "\n", "", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "test_loss", "[", "tt", "]", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "preds", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "[", "tt", "]", "+=", "preds", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "", "print", "(", ")", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "        ", "test_loss", "[", "tt", "]", "/=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "correct", "[", "tt", "]", "/=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "print", "(", "'Test set t = {:02d}: Average loss: {:.4f}, Accuracy: {:.4f}'", ".", "format", "(", "\n", "tt", ",", "\n", "test_loss", "[", "tt", "]", ",", "\n", "correct", "[", "tt", "]", "\n", ")", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"{tag}Perf/Epoch#{epoch}\"", ",", "correct", "[", "tt", "]", ",", "tt", ")", "\n", "", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_pefbo_hps_imagenet.train": [[83, 114], ["enumerate", "net.reset", "labels.cuda.cuda", "images.cuda.cuda", "numpy.zeros", "optimizer.zero_grad", "range", "loss_function.backward", "optimizer.step", "net.update_hyperparameters", "print", "range", "print", "print", "writer.add_scalar", "net", "loss_function", "loss_function.item", "net", "loss_function", "loss_function.item", "loss_function.item", "len", "loss_function.item", "len", "len"], "function", ["None"], ["", "def", "train", "(", "net", ",", "epoch", ",", "dataloader", ",", "timesteps", ",", "writer", "=", "None", ")", ":", "\n", "    ", "for", "batch_index", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "\n", "ttloss", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "            ", "if", "tt", "==", "0", ":", "\n", "                ", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "ttloss", "[", "tt", "]", "=", "loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "net", "(", ")", "\n", "current_loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "ttloss", "[", "tt", "]", "=", "current_loss", ".", "item", "(", ")", "\n", "loss", "+=", "current_loss", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "net", ".", "update_hyperparameters", "(", ")", "\n", "\n", "print", "(", "f\"Training Epoch: {epoch} [{batch_index * 16 + len(images)}/{len(dataloader.dataset)}]\\tLoss: {loss.item():0.4f}\\tLR: {optimizer.param_groups[0]['lr']:0.6f}\"", ")", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "            ", "print", "(", "f'{ttloss[tt]:0.4f}\\t'", ",", "end", "=", "''", ")", "\n", "", "print", "(", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"TrainingLoss/CE\"", ",", "loss", ".", "item", "(", ")", ",", "(", "epoch", "-", "1", ")", "*", "len", "(", "dataloader", ")", "+", "batch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_pefbo_hps_imagenet.load_pnet": [[115, 131], ["range", "peff_b0.PEffN_b0SeparateHP_V1.eval", "peff_b0.PEffN_b0SeparateHP_V1.to", "Exception", "peff_b0.PEffN_b0SeparateHP_V1", "torch.load", "torch.load", "torch.load", "getattr().load_state_dict", "weight_pattern.replace", "torch.tensor", "torch.tensor", "torch.tensor", "getattr"], "function", ["None"], ["", "", "", "def", "load_pnet", "(", "net", ",", "weight_pattern", ",", "build_graph", ",", "random_init", ",", "ff_multiplier", ",", "fb_multiplier", ",", "er_multiplier", ",", "same_param", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "if", "same_param", ":", "\n", "        ", "raise", "Exception", "(", "'Not implemented!'", ")", "\n", "", "else", ":", "\n", "        ", "pnet", "=", "PEffN_b0SeparateHP_V1", "(", "net", ",", "build_graph", "=", "build_graph", ",", "random_init", "=", "random_init", ",", "ff_multiplier", "=", "ff_multiplier", ",", "fb_multiplier", "=", "fb_multiplier", ",", "er_multiplier", "=", "er_multiplier", ")", "\n", "\n", "\n", "", "for", "pc", "in", "range", "(", "pnet", ".", "number_of_pcoders", ")", ":", "\n", "        ", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "f'{pc+1}'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "'C_sqrt'", "not", "in", "pc_dict", ":", "\n", "            ", "pc_dict", "[", "'C_sqrt'", "]", "=", "torch", ".", "tensor", "(", "-", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "getattr", "(", "pnet", ",", "f'pcoder{pc+1}'", ")", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "", "pnet", ".", "eval", "(", ")", "\n", "pnet", ".", "to", "(", "device", ")", "\n", "return", "pnet", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_pefbo_hps_imagenet.log_hyper_parameters": [[132, 155], ["sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "range", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr().item", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr().item", "getattr().item", "getattr", "getattr", "getattr", "getattr().item", "getattr().item", "getattr", "getattr", "getattr().item", "getattr", "getattr", "getattr"], "function", ["None"], ["", "def", "log_hyper_parameters", "(", "net", ",", "epoch", ",", "sumwriter", ",", "same_param", "=", "True", ")", ":", "\n", "    ", "if", "same_param", ":", "\n", "        ", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/feedforward\"", ",", "getattr", "(", "net", ",", "f'ff_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/feedback\"", ",", "getattr", "(", "net", ",", "f'fb_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/error\"", ",", "getattr", "(", "net", ",", "f'errorm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/memory\"", ",", "getattr", "(", "net", ",", "f'mem_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/feedforward\"", ",", "getattr", "(", "net", ",", "f'ffm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/feedback\"", ",", "getattr", "(", "net", ",", "f'fbm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/error\"", ",", "getattr", "(", "net", ",", "f'erm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm'", ")", ".", "item", "(", ")", "-", "getattr", "(", "net", ",", "f'fbm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "net", ".", "number_of_pcoders", "+", "1", ")", ":", "\n", "            ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedforward\"", ",", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "if", "i", "<", "net", ".", "number_of_pcoders", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedback\"", ",", "getattr", "(", "net", ",", "f'fbm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedback\"", ",", "0", ",", "epoch", ")", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_error\"", ",", "getattr", "(", "net", ",", "f'erm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "if", "i", "<", "net", ".", "number_of_pcoders", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", "-", "getattr", "(", "net", ",", "f'fbm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet.train_pcoders": [[52, 82], ["net.train", "enumerate", "net.reset", "images.cuda.cuda", "optimizer.zero_grad", "net", "range", "loss.backward", "optimizer.step", "print", "sumwriter.add_scalar", "sumwriter.add_scalar", "loss.item", "loss_function", "getattr", "getattr", "loss_function", "loss_function.item", "loss.item", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.train"], ["def", "train_pcoders", "(", "net", ",", "epoch", ",", "writer", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "for", "batch_index", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "cifar100_training_loader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "# print(outputs[i][1].shape)", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "a", "=", "loss_function", "(", "net", ".", "pcoder1", ".", "prd", ",", "images", ")", "\n", "loss", "=", "a", "\n", "", "else", ":", "\n", "                ", "pcoder_pre", "=", "getattr", "(", "net", ",", "f\"pcoder{i}\"", ")", "\n", "pcoder_cur", "=", "getattr", "(", "net", ",", "f\"pcoder{i+1}\"", ")", "\n", "a", "=", "loss_function", "(", "pcoder_cur", ".", "prd", ",", "pcoder_pre", ".", "rep", ")", "\n", "loss", "+=", "a", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"MSE Train/PCoder{i+1}\"", ",", "a", ".", "item", "(", ")", ",", "epoch", "*", "len", "(", "cifar100_training_loader", ")", "+", "batch_index", ")", "\n", "# return", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Training Epoch: {epoch} [{trained_samples}/{total_samples}]\\tLoss: {:0.4f}\\tLR: {:0.6f}'", ".", "format", "(", "\n", "loss", ".", "item", "(", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "trained_samples", "=", "batch_index", "*", "128", "+", "len", "(", "images", ")", ",", "\n", "total_samples", "=", "len", "(", "cifar100_training_loader", ".", "dataset", ")", "\n", ")", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"MSE Train/Sum\"", ",", "loss", ".", "item", "(", ")", ",", "epoch", "*", "len", "(", "cifar100_training_loader", ")", "+", "batch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet.test_pcoders": [[83, 112], ["net.eval", "enumerate", "range", "sumwriter.add_scalar", "print", "net.reset", "images.cuda.cuda", "range", "len", "sumwriter.add_scalar", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "len", "loss_function().item", "getattr", "getattr", "loss_function().item", "len", "len", "len", "loss_function", "loss_function"], "function", ["None"], ["", "", "def", "test_pcoders", "(", "net", ",", "epoch", ",", "writer", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "final_loss", "=", "[", "0", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "for", "batch_index", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "cifar100_test_loader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "net", "(", "images", ")", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "final_loss", "[", "i", "]", "+=", "loss_function", "(", "net", ".", "pcoder1", ".", "prd", ",", "images", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "pcoder_pre", "=", "getattr", "(", "net", ",", "f\"pcoder{i}\"", ")", "\n", "pcoder_cur", "=", "getattr", "(", "net", ",", "f\"pcoder{i+1}\"", ")", "\n", "final_loss", "[", "i", "]", "+=", "loss_function", "(", "pcoder_cur", ".", "prd", ",", "pcoder_pre", ".", "rep", ")", ".", "item", "(", ")", "\n", "\n", "", "", "", "loss_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "final_loss", "[", "i", "]", "/=", "len", "(", "cifar100_test_loader", ")", "\n", "loss_sum", "+=", "final_loss", "[", "i", "]", "\n", "sumwriter", ".", "add_scalar", "(", "f\"MSE Test/PCoder{i+1}\"", ",", "final_loss", "[", "i", "]", ",", "epoch", "*", "len", "(", "cifar100_test_loader", ")", ")", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"MSE Test/Sum\"", ",", "loss_sum", ",", "epoch", "*", "len", "(", "cifar100_test_loader", ")", ")", "\n", "\n", "print", "(", "'Training Epoch: {epoch} [{trained_samples}/{total_samples}]\\tLoss: {:0.4f}\\tLR: {:0.6f}'", ".", "format", "(", "\n", "loss_sum", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "trained_samples", "=", "batch_index", "*", "128", "+", "len", "(", "images", ")", ",", "\n", "total_samples", "=", "len", "(", "cifar100_test_loader", ".", "dataset", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet_hps_cifarc.evaluate": [[48, 79], ["numpy.zeros", "numpy.zeros", "print", "range", "print", "images.cuda.cuda", "labels.cuda.cuda", "len", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "writer.add_scalar", "loss_function", "loss_function.item", "net.max", "preds.eq().sum", "net", "net", "preds.eq"], "function", ["None"], ["def", "evaluate", "(", "net", ",", "epoch", ",", "dataloader", ",", "timesteps", ",", "writer", "=", "None", ",", "tag", "=", "'Clean'", ")", ":", "\n", "    ", "test_loss", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ",", ")", ")", "\n", "correct", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ",", ")", ")", "\n", "for", "(", "images", ",", "labels", ")", "in", "dataloader", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "                ", "if", "tt", "==", "0", ":", "\n", "                    ", "outputs", "=", "net", "(", "images", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "net", "(", ")", "\n", "\n", "", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "test_loss", "[", "tt", "]", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "preds", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "[", "tt", "]", "+=", "preds", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "", "print", "(", ")", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "        ", "test_loss", "[", "tt", "]", "/=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "correct", "[", "tt", "]", "/=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "print", "(", "'Test set t = {:02d}: Average loss: {:.4f}, Accuracy: {:.4f}'", ".", "format", "(", "\n", "tt", ",", "\n", "test_loss", "[", "tt", "]", ",", "\n", "correct", "[", "tt", "]", "\n", ")", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"{tag}Perf/Epoch#{epoch}\"", ",", "correct", "[", "tt", "]", ",", "tt", ")", "\n", "", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet_hps_cifarc.train": [[80, 111], ["enumerate", "net.reset", "labels.cuda.cuda", "images.cuda.cuda", "numpy.zeros", "optimizer.zero_grad", "range", "loss_function.backward", "optimizer.step", "net.update_hyperparameters", "print", "range", "print", "print", "writer.add_scalar", "net", "loss_function", "loss_function.item", "net", "loss_function", "loss_function.item", "loss_function.item", "len", "loss_function.item", "len", "len"], "function", ["None"], ["", "def", "train", "(", "net", ",", "epoch", ",", "dataloader", ",", "timesteps", ",", "writer", "=", "None", ")", ":", "\n", "    ", "for", "batch_index", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "\n", "ttloss", "=", "np", ".", "zeros", "(", "(", "timesteps", "+", "1", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "            ", "if", "tt", "==", "0", ":", "\n", "                ", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "ttloss", "[", "tt", "]", "=", "loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "net", "(", ")", "\n", "current_loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "ttloss", "[", "tt", "]", "=", "current_loss", ".", "item", "(", ")", "\n", "loss", "+=", "current_loss", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "net", ".", "update_hyperparameters", "(", ")", "\n", "\n", "print", "(", "f\"Training Epoch: {epoch} [{batch_index * 128 + len(images)}/{len(dataloader.dataset)}]\\tLoss: {loss.item():0.4f}\\tLR: {optimizer.param_groups[0]['lr']:0.6f}\"", ")", "\n", "for", "tt", "in", "range", "(", "timesteps", "+", "1", ")", ":", "\n", "            ", "print", "(", "f'{ttloss[tt]:0.4f}\\t'", ",", "end", "=", "''", ")", "\n", "", "print", "(", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"TrainingLoss/CE\"", ",", "loss", ".", "item", "(", ")", ",", "(", "epoch", "-", "1", ")", "*", "len", "(", "dataloader", ")", "+", "batch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet_hps_cifarc.load_presnet18": [[112, 145], ["presnet.get_cifar_resnet18", "presnet.get_cifar_resnet18.load_state_dict", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSeparateHP.pcoder1.load_state_dict", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSeparateHP.pcoder2.load_state_dict", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSeparateHP.pcoder3.load_state_dict", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSeparateHP.pcoder4.load_state_dict", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSeparateHP.pcoder5.load_state_dict", "presnet.PResNet18V3NSeparateHP.eval", "presnet.PResNet18V3NSeparateHP.to", "torch.load", "torch.load", "torch.load", "presnet.PResNet18V3NSameHP", "presnet.PResNet18V3NSeparateHP", "weight_pattern.replace", "weight_pattern.replace", "weight_pattern.replace", "weight_pattern.replace", "weight_pattern.replace"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.get_cifar_resnet18"], ["", "", "", "def", "load_presnet18", "(", "pre_trained_resnet", ",", "weight_pattern", ",", "build_graph", ",", "random_init", ",", "ff_multiplier", ",", "fb_multiplier", ",", "er_multiplier", ",", "same_param", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "# loading PResNet with pretrained resnet on CIFAR100", "\n", "    ", "resnet", "=", "get_cifar_resnet18", "(", ")", "\n", "resnet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pre_trained_resnet", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "\n", "if", "same_param", ":", "\n", "        ", "presnet18", "=", "PResNet18V3NSameHP", "(", "resnet", ",", "build_graph", "=", "build_graph", ",", "random_init", "=", "random_init", ",", "ff_multiplier", "=", "ff_multiplier", ",", "fb_multiplier", "=", "fb_multiplier", ",", "er_multiplier", "=", "er_multiplier", ")", "\n", "", "else", ":", "\n", "        ", "presnet18", "=", "PResNet18V3NSeparateHP", "(", "resnet", ",", "build_graph", "=", "build_graph", ",", "random_init", "=", "random_init", ",", "ff_multiplier", "=", "ff_multiplier", ",", "fb_multiplier", "=", "fb_multiplier", ",", "er_multiplier", "=", "er_multiplier", ")", "\n", "\n", "# block 1", "\n", "", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "'_pc1'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "presnet18", ".", "pcoder1", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "# block 2", "\n", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "'_pc2'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "presnet18", ".", "pcoder2", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "# block 3", "\n", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "'_pc3'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "presnet18", ".", "pcoder3", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "# block 4", "\n", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "'_pc4'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "presnet18", ".", "pcoder4", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "# block 5", "\n", "pc_dict", "=", "torch", ".", "load", "(", "weight_pattern", ".", "replace", "(", "'*'", ",", "'_pc5'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "presnet18", ".", "pcoder5", ".", "load_state_dict", "(", "pc_dict", ")", "\n", "\n", "presnet18", ".", "eval", "(", ")", "\n", "presnet18", ".", "to", "(", "device", ")", "\n", "return", "presnet18", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_presnet_hps_cifarc.log_hyper_parameters": [[146, 169], ["sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "sumwriter.add_scalar", "range", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr().item", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr().item", "sumwriter.add_scalar", "sumwriter.add_scalar", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr().item", "getattr().item", "getattr", "getattr", "getattr", "getattr().item", "getattr().item", "getattr", "getattr", "getattr().item", "getattr", "getattr", "getattr"], "function", ["None"], ["", "def", "log_hyper_parameters", "(", "net", ",", "epoch", ",", "sumwriter", ",", "same_param", "=", "True", ")", ":", "\n", "    ", "if", "same_param", ":", "\n", "        ", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/feedforward\"", ",", "getattr", "(", "net", ",", "f'ff_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/feedback\"", ",", "getattr", "(", "net", ",", "f'fb_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/error\"", ",", "getattr", "(", "net", ",", "f'errorm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"HyperparamRaw/memory\"", ",", "getattr", "(", "net", ",", "f'mem_part'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/feedforward\"", ",", "getattr", "(", "net", ",", "f'ffm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/feedback\"", ",", "getattr", "(", "net", ",", "f'fbm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/error\"", ",", "getattr", "(", "net", ",", "f'erm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm'", ")", ".", "item", "(", ")", "-", "getattr", "(", "net", ",", "f'fbm'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "net", ".", "number_of_pcoders", "+", "1", ")", ":", "\n", "            ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedforward\"", ",", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "if", "i", "<", "net", ".", "number_of_pcoders", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedback\"", ",", "getattr", "(", "net", ",", "f'fbm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_feedback\"", ",", "0", ",", "epoch", ")", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_error\"", ",", "getattr", "(", "net", ",", "f'erm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "if", "i", "<", "net", ".", "number_of_pcoders", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", "-", "getattr", "(", "net", ",", "f'fbm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "sumwriter", ".", "add_scalar", "(", "f\"Hyperparam/pcoder{i}_memory\"", ",", "1", "-", "getattr", "(", "net", ",", "f'ffm{i}'", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_feedback_weights.Args.__init__": [[28, 47], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "random_seed", "=", "None", "#random_seed for the run", "\n", "self", ".", "batchsize", "=", "64", "#batchsize for training", "\n", "self", ".", "num_workers", "=", "8", "#number of workers", "\n", "self", ".", "num_epochs", "=", "50", "#number of epochs", "\n", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "log_dir", "=", "'./runs_train_feedbacks'", "#tensorboard logdir", "\n", "self", ".", "task_name", "=", "'pefficientnet_b0_lr0.001RMProp_with_cosingannealing'", "#dir_name", "\n", "self", ".", "extra_stuff_you_want_to_add_to_tb", "=", "'same_cosine_annealing_with_t0_3'", "\n", "\n", "self", ".", "optim_name", "=", "'RMSProp'", "\n", "self", ".", "lr", "=", "0.001", "\n", "self", ".", "weight_decay", "=", "5e-4", "\n", "self", ".", "ckpt_every", "=", "None", "#TODO", "\n", "\n", "# optional", "\n", "self", ".", "resume", "=", "None", "#resuming the training ", "\n", "self", ".", "resume_ckpts", "=", "[", "f\"../weights/PEffNetB0/pnet_pretrained_pc{x+1}_001.pth\"", "for", "x", "in", "range", "(", "8", ")", "]", "#path to the checkpoints. Should be a list of len equal to NUMBER_OF_PCODERS", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_feedback_weights.train_pcoders": [[95, 130], ["net.train", "time.time", "enumerate", "net.reset", "images.cuda.cuda", "optimizer.zero_grad", "net", "range", "loss.backward", "optimizer.step", "print", "print", "sumwriter.add_scalar", "sumwriter.add_scalar", "loss.item", "loss_function", "getattr", "getattr", "loss_function", "loss_function.item", "loss.item", "time.time", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.train"], ["def", "train_pcoders", "(", "net", ",", "epoch", ",", "writer", ",", "train_loader", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "''' A training epoch '''", "\n", "\n", "net", ".", "train", "(", ")", "\n", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_index", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "NUMBER_OF_PCODERS", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "a", "=", "loss_function", "(", "net", ".", "pcoder1", ".", "prd", ",", "images", ")", "\n", "loss", "=", "a", "\n", "", "else", ":", "\n", "                ", "pcoder_pre", "=", "getattr", "(", "net", ",", "f\"pcoder{i}\"", ")", "\n", "pcoder_curr", "=", "getattr", "(", "net", ",", "f\"pcoder{i+1}\"", ")", "\n", "a", "=", "loss_function", "(", "pcoder_curr", ".", "prd", ",", "pcoder_pre", ".", "rep", ")", "\n", "loss", "+=", "a", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"MSE Train/PCoder{i+1}\"", ",", "a", ".", "item", "(", ")", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "batch_index", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Training Epoch: {epoch} [{trained_samples}/{total_samples}]\\tLoss: {:0.4f}\\tLR: {:0.6f}'", ".", "format", "(", "\n", "loss", ".", "item", "(", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "trained_samples", "=", "batch_index", "*", "args", ".", "batchsize", "+", "len", "(", "images", ")", ",", "\n", "total_samples", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", ")", ")", "\n", "print", "(", "'Time taken:'", ",", "time", ".", "time", "(", ")", "-", "tstart", ")", "\n", "sumwriter", ".", "add_scalar", "(", "f\"MSE Train/Sum\"", ",", "loss", ".", "item", "(", ")", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "batch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_feedback_weights.test_pcoders": [[132, 168], ["net.eval", "time.time", "enumerate", "range", "sumwriter.add_scalar", "print", "print", "net.reset", "images.cuda.cuda", "range", "len", "sumwriter.add_scalar", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "len", "time.time", "loss_function().item", "getattr", "getattr", "loss_function().item", "len", "len", "len", "loss_function", "loss_function"], "function", ["None"], ["", "", "def", "test_pcoders", "(", "net", ",", "epoch", ",", "writer", ",", "test_loader", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "''' A testing epoch '''", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "final_loss", "=", "[", "0", "for", "i", "in", "range", "(", "NUMBER_OF_PCODERS", ")", "]", "\n", "for", "batch_index", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "net", ".", "reset", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "net", "(", "images", ")", "\n", "", "for", "i", "in", "range", "(", "NUMBER_OF_PCODERS", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "final_loss", "[", "i", "]", "+=", "loss_function", "(", "net", ".", "pcoder1", ".", "prd", ",", "images", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "pcoder_pre", "=", "getattr", "(", "net", ",", "f\"pcoder{i}\"", ")", "\n", "pcoder_curr", "=", "getattr", "(", "net", ",", "f\"pcoder{i+1}\"", ")", "\n", "final_loss", "[", "i", "]", "+=", "loss_function", "(", "pcoder_curr", ".", "prd", ",", "pcoder_pre", ".", "rep", ")", ".", "item", "(", ")", "\n", "\n", "", "", "", "loss_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "NUMBER_OF_PCODERS", ")", ":", "\n", "        ", "final_loss", "[", "i", "]", "/=", "len", "(", "test_loader", ")", "\n", "loss_sum", "+=", "final_loss", "[", "i", "]", "\n", "sumwriter", ".", "add_scalar", "(", "f\"MSE Test/PCoder{i+1}\"", ",", "final_loss", "[", "i", "]", ",", "epoch", "*", "len", "(", "test_loader", ")", ")", "\n", "", "sumwriter", ".", "add_scalar", "(", "f\"MSE Test/Sum\"", ",", "loss_sum", ",", "epoch", "*", "len", "(", "test_loader", ")", ")", "\n", "\n", "print", "(", "'Training Epoch: {epoch} [{trained_samples}/{total_samples}]\\tLoss: {:0.4f}\\tLR: {:0.6f}'", ".", "format", "(", "\n", "loss_sum", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "trained_samples", "=", "batch_index", "*", "args", ".", "batchsize", "+", "len", "(", "images", ")", ",", "\n", "total_samples", "=", "len", "(", "test_loader", ".", "dataset", ")", "\n", ")", ")", "\n", "print", "(", "'Time taken:'", ",", "time", ".", "time", "(", ")", "-", "tstart", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.PResNet18V3NSameHP.__init__": [[79, 133], ["predify.networks.PNetSameHP.__init__", "presnet.flatten_resnet", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.PResNet18V3NSameHP.backbone.conv1.register_forward_hook", "presnet.PResNet18V3NSameHP.backbone.layer1[].conv2.register_forward_hook", "presnet.PResNet18V3NSameHP.backbone.layer2[].conv2.register_forward_hook", "presnet.PResNet18V3NSameHP.backbone.layer3[].conv2.register_forward_hook", "presnet.PResNet18V3NSameHP.backbone.layer4[].conv2.register_forward_hook", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "presnet.PResNet18V3NSameHP.pcoder1", "presnet.PResNet18V3NSameHP.pcoder2", "presnet.PResNet18V3NSameHP.pcoder3", "presnet.PResNet18V3NSameHP.pcoder4", "presnet.PResNet18V3NSameHP.pcoder5"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.flatten_resnet", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info"], ["def", "__init__", "(", "self", ",", "resnet", ",", "build_graph", "=", "False", ",", "random_init", "=", "True", ",", "ff_multiplier", ":", "float", "=", "0.33", ",", "fb_multiplier", ":", "float", "=", "0.33", ",", "er_multiplier", ":", "float", "=", "0.01", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "resnet", ",", "5", ",", "build_graph", ",", "random_init", ",", "ff_multiplier", ",", "fb_multiplier", ",", "er_multiplier", ")", "\n", "\n", "resnet_seq", "=", "flatten_resnet", "(", "resnet", ")", "\n", "\n", "# create the first PCoder", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "3", ",", "-", "1", ")", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder1", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the second PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "13", ",", "3", ")", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder2", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the third PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "24", ",", "13", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder3", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the fourth PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "35", ",", "24", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder4", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the fifth PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "46", ",", "35", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder5", "=", "PCoderN", "(", "pmodule", ",", "False", ",", "self", ".", "random_init", ")", "\n", "\n", "def", "fw_hook1", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder1", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder2", ".", "prd", ",", "target", "=", "self", ".", "input_mem", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm", ",", "fbm", "=", "self", ".", "fbm", ",", "erm", "=", "self", ".", "erm", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "conv1", ".", "register_forward_hook", "(", "fw_hook1", ")", "\n", "\n", "def", "fw_hook2", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder2", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder3", ".", "prd", ",", "target", "=", "self", ".", "pcoder1", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm", ",", "fbm", "=", "self", ".", "fbm", ",", "erm", "=", "self", ".", "erm", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer1", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook2", ")", "\n", "\n", "def", "fw_hook3", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder3", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder4", ".", "prd", ",", "target", "=", "self", ".", "pcoder2", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm", ",", "fbm", "=", "self", ".", "fbm", ",", "erm", "=", "self", ".", "erm", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer2", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook3", ")", "\n", "\n", "def", "fw_hook4", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder4", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder5", ".", "prd", ",", "target", "=", "self", ".", "pcoder3", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm", ",", "fbm", "=", "self", ".", "fbm", ",", "erm", "=", "self", ".", "erm", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer3", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook4", ")", "\n", "\n", "def", "fw_hook5", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder5", "(", "ff", "=", "m_out", ",", "fb", "=", "None", ",", "target", "=", "self", ".", "pcoder4", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm", ",", "fbm", "=", "self", ".", "fbm", ",", "erm", "=", "self", ".", "erm", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer4", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.PResNet18V3NSeparateHP.__init__": [[138, 192], ["predify.networks.PNetSeparateHP.__init__", "presnet.flatten_resnet", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.get_deep_info", "torch.nn.Sequential", "predify.modules.PCoderN", "presnet.PResNet18V3NSeparateHP.backbone.conv1.register_forward_hook", "presnet.PResNet18V3NSeparateHP.backbone.layer1[].conv2.register_forward_hook", "presnet.PResNet18V3NSeparateHP.backbone.layer2[].conv2.register_forward_hook", "presnet.PResNet18V3NSeparateHP.backbone.layer3[].conv2.register_forward_hook", "presnet.PResNet18V3NSeparateHP.backbone.layer4[].conv2.register_forward_hook", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "presnet.PResNet18V3NSeparateHP.pcoder1", "presnet.PResNet18V3NSeparateHP.pcoder2", "presnet.PResNet18V3NSeparateHP.pcoder3", "presnet.PResNet18V3NSeparateHP.pcoder4", "presnet.PResNet18V3NSeparateHP.pcoder5"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.flatten_resnet", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info"], ["def", "__init__", "(", "self", ",", "resnet", ",", "build_graph", "=", "False", ",", "random_init", "=", "True", ",", "ff_multiplier", ":", "float", "=", "0.33", ",", "fb_multiplier", ":", "float", "=", "0.33", ",", "er_multiplier", ":", "float", "=", "0.01", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "resnet", ",", "5", ",", "build_graph", ",", "random_init", ",", "ff_multiplier", ",", "fb_multiplier", ",", "er_multiplier", ")", "\n", "\n", "resnet_seq", "=", "flatten_resnet", "(", "resnet", ")", "\n", "\n", "# create the first PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "3", ",", "-", "1", ")", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder1", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the second PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "13", ",", "3", ")", "\n", "pmodule", "=", "Sequential", "(", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder2", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the third PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "24", ",", "13", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder3", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the fourth PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "35", ",", "24", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder4", "=", "PCoderN", "(", "pmodule", ",", "True", ",", "self", ".", "random_init", ")", "\n", "\n", "# create the fifth PCoderN", "\n", "in_ch", ",", "out_ch", ",", "r", ",", "d", ",", "p", "=", "get_deep_info", "(", "resnet_seq", ",", "46", ",", "35", ")", "\n", "pmodule", "=", "Sequential", "(", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "pcoder5", "=", "PCoderN", "(", "pmodule", ",", "False", ",", "self", ".", "random_init", ")", "\n", "\n", "def", "fw_hook1", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder1", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder2", ".", "prd", ",", "target", "=", "self", ".", "input_mem", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm1", ",", "fbm", "=", "self", ".", "fbm1", ",", "erm", "=", "self", ".", "erm1", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "conv1", ".", "register_forward_hook", "(", "fw_hook1", ")", "\n", "\n", "def", "fw_hook2", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder2", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder3", ".", "prd", ",", "target", "=", "self", ".", "pcoder1", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm2", ",", "fbm", "=", "self", ".", "fbm2", ",", "erm", "=", "self", ".", "erm2", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer1", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook2", ")", "\n", "\n", "def", "fw_hook3", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder3", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder4", ".", "prd", ",", "target", "=", "self", ".", "pcoder2", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm3", ",", "fbm", "=", "self", ".", "fbm3", ",", "erm", "=", "self", ".", "erm3", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer2", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook3", ")", "\n", "\n", "def", "fw_hook4", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder4", "(", "ff", "=", "m_out", ",", "fb", "=", "self", ".", "pcoder5", ".", "prd", ",", "target", "=", "self", ".", "pcoder3", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm4", ",", "fbm", "=", "self", ".", "fbm4", ",", "erm", "=", "self", ".", "erm4", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer3", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook4", ")", "\n", "\n", "def", "fw_hook5", "(", "m", ",", "m_in", ",", "m_out", ")", ":", "\n", "            ", "e", "=", "self", ".", "pcoder5", "(", "ff", "=", "m_out", ",", "fb", "=", "None", ",", "target", "=", "self", ".", "pcoder4", ".", "rep", ",", "build_graph", "=", "self", ".", "build_graph", ",", "ffm", "=", "self", ".", "ffm5", ",", "fbm", "=", "self", ".", "fbm5", ",", "erm", "=", "self", ".", "erm5", ")", "\n", "return", "e", "[", "0", "]", "\n", "", "self", ".", "backbone", ".", "layer4", "[", "1", "]", ".", "conv2", ".", "register_forward_hook", "(", "fw_hook5", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_cifar_resnet18": [[9, 15], ["torchvision.resnet18", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Linear"], "function", ["None"], ["def", "get_cifar_resnet18", "(", ")", ":", "\n", "    ", "resnet", "=", "models", ".", "resnet18", "(", ")", "\n", "resnet", ".", "conv1", "=", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "resnet", ".", "maxpool", "=", "MaxPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "resnet", ".", "fc", "=", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "100", ",", "bias", "=", "True", ")", "\n", "return", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.get_deep_info": [[16, 60], ["range", "range", "range", "isinstance", "isinstance", "utils.to_pair", "utils.to_pair", "utils.to_pair", "utils.to_pair", "isinstance", "isinstance", "max", "max", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.to_pair", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.to_pair", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.to_pair", "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.to_pair"], ["", "def", "get_deep_info", "(", "sequence", ",", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"\n    Returns proper kernel-size,stride,padding for the conv-transpose\n    from layer i (higher layer) to j (lower layer) in a sequential.\n    \"\"\"", "\n", "P", "=", "(", "0", ",", "0", ")", "# deep padding", "\n", "R", "=", "(", "1", ",", "1", ")", "# deep receptive-field", "\n", "D", "=", "(", "1", ",", "1", ")", "# deep stride", "\n", "\n", "in_ch", "=", "0", "\n", "out_ch", "=", "0", "\n", "for", "idx", "in", "range", "(", "i", ",", "j", ",", "-", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "            ", "if", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "Conv2d", ")", "and", "in_ch", "==", "0", ":", "\n", "                ", "in_ch", "=", "sequence", "[", "idx", "]", ".", "out_channels", "\n", "\n", "", "s", "=", "to_pair", "(", "sequence", "[", "idx", "]", ".", "stride", ")", "\n", "k", "=", "to_pair", "(", "sequence", "[", "idx", "]", ".", "kernel_size", ")", "\n", "p", "=", "to_pair", "(", "sequence", "[", "idx", "]", ".", "padding", ")", "\n", "P0", ",", "P1", "=", "P", "\n", "if", "P0", "!=", "0", ":", "\n", "                ", "P0", "=", "k", "[", "0", "]", "+", "(", "P0", "-", "1", ")", "*", "s", "[", "0", "]", "-", "(", "k", "[", "0", "]", "-", "s", "[", "0", "]", ")", "+", "p", "[", "0", "]", "\n", "", "if", "P1", "!=", "0", ":", "\n", "                ", "P1", "=", "k", "[", "1", "]", "+", "(", "P1", "-", "1", ")", "*", "s", "[", "1", "]", "-", "(", "k", "[", "1", "]", "-", "s", "[", "1", "]", ")", "+", "p", "[", "1", "]", "\n", "", "P", "=", "(", "P0", ",", "P1", ")", "\n", "p", "=", "to_pair", "(", "sequence", "[", "idx", "]", ".", "padding", ")", "\n", "P", "=", "(", "max", "(", "P", "[", "0", "]", ",", "p", "[", "0", "]", ")", ",", "max", "(", "P", "[", "1", "]", ",", "p", "[", "1", "]", ")", ")", "\n", "\n", "", "", "for", "idx", "in", "range", "(", "j", ",", "i", ")", ":", "\n", "        ", "if", "idx", ">=", "0", ":", "\n", "            ", "if", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "k", "=", "sequence", "[", "idx", "]", ".", "kernel_size", "if", "isinstance", "(", "sequence", "[", "idx", "]", ".", "kernel_size", ",", "tuple", ")", "else", "(", "sequence", "[", "idx", "]", ".", "kernel_size", ",", "sequence", "[", "idx", "]", ".", "kernel_size", ")", "\n", "s", "=", "sequence", "[", "idx", "]", ".", "stride", "if", "isinstance", "(", "sequence", "[", "idx", "]", ".", "stride", ",", "tuple", ")", "else", "(", "sequence", "[", "idx", "]", ".", "stride", ",", "sequence", "[", "idx", "]", ".", "stride", ")", "\n", "R", "=", "(", "R", "[", "0", "]", "+", "(", "(", "k", "[", "0", "]", "-", "1", ")", "*", "D", "[", "0", "]", ")", ",", "R", "[", "1", "]", "+", "(", "(", "k", "[", "1", "]", "-", "1", ")", "*", "D", "[", "1", "]", ")", ")", "\n", "D", "=", "(", "D", "[", "0", "]", "*", "s", "[", "0", "]", ",", "D", "[", "1", "]", "*", "s", "[", "1", "]", ")", "\n", "", "", "", "if", "j", "==", "-", "1", ":", "\n", "        ", "out_ch", "=", "3", "\n", "", "else", ":", "\n", "        ", "for", "idx", "in", "range", "(", "j", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "isinstance", "(", "sequence", "[", "idx", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "out_ch", "=", "sequence", "[", "idx", "]", ".", "out_channels", "\n", "break", "\n", "\n", "", "", "", "return", "in_ch", ",", "out_ch", ",", "R", ",", "D", ",", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.presnet.flatten_resnet": [[61, 74], ["net.children", "isinstance", "modules.append", "modules.extend", "list", "mm.children"], "function", ["None"], ["", "def", "flatten_resnet", "(", "net", ")", ":", "\n", "    ", "\"\"\"\n    flattens resnet into a sequence of modules. output of this function will be\n    used to compute convtranspose parameters.\n    \"\"\"", "\n", "modules", "=", "[", "]", "\n", "for", "m", "in", "net", ".", "children", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "mm", "in", "m", ":", "\n", "                ", "modules", ".", "extend", "(", "list", "(", "mm", ".", "children", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "modules", ".", "append", "(", "m", ")", "\n", "", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.get_cifar_resnet18": [[48, 54], ["torchvision.resnet18", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Linear"], "function", ["None"], ["def", "get_cifar_resnet18", "(", ")", ":", "\n", "    ", "resnet", "=", "models", ".", "resnet18", "(", ")", "\n", "resnet", ".", "conv1", "=", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "resnet", ".", "maxpool", "=", "MaxPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "resnet", ".", "fc", "=", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "100", ",", "bias", "=", "True", ")", "\n", "return", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.train": [[56, 78], ["net.train", "enumerate", "labels.cuda.cuda", "images.cuda.cuda", "optimizer.zero_grad", "net", "loss_function", "loss_function.backward", "optimizer.step", "print", "warmup_scheduler.step", "loss_function.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.train"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "\n", "    ", "net", ".", "train", "(", ")", "\n", "for", "batch_index", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "cifar100_training_loader", ")", ":", "\n", "        ", "if", "epoch", "<=", "1", ":", "\n", "            ", "warmup_scheduler", ".", "step", "(", ")", "\n", "\n", "", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Training Epoch: {epoch} [{trained_samples}/{total_samples}]\\tLoss: {:0.4f}\\tLR: {:0.6f}'", ".", "format", "(", "\n", "loss", ".", "item", "(", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "trained_samples", "=", "batch_index", "*", "128", "+", "len", "(", "images", ")", ",", "\n", "total_samples", "=", "len", "(", "cifar100_training_loader", ".", "dataset", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.train_resnet.eval_training": [[80, 104], ["net.eval", "print", "print", "images.cuda.cuda", "labels.cuda.cuda", "net", "loss_function", "loss_function.item", "net.max", "preds.eq().sum", "correct.float", "len", "preds.eq", "len", "correct.float", "len"], "function", ["None"], ["", "", "def", "eval_training", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "\n", "test_loss", "=", "0.0", "# cost function error", "\n", "correct", "=", "0.0", "\n", "\n", "for", "(", "images", ",", "labels", ")", "in", "cifar100_test_loader", ":", "\n", "\n", "        ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "labels", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "preds", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "+=", "preds", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", "\n", "\n", "", "print", "(", "'Test set: Average loss: {:.4f}, Accuracy: {:.4f}'", ".", "format", "(", "\n", "test_loss", "/", "len", "(", "cifar100_test_loader", ".", "dataset", ")", ",", "\n", "correct", ".", "float", "(", ")", "/", "len", "(", "cifar100_test_loader", ".", "dataset", ")", "\n", ")", ")", "\n", "print", "(", ")", "\n", "\n", "return", "correct", ".", "float", "(", ")", "/", "len", "(", "cifar100_test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.CIFAR_C.__init__": [[14, 42], ["[].astype", "Exception", "Exception", "numpy.load", "os.path.join", "numpy.load", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "noise_type", ",", "noise_level", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "all_noises", "=", "[", "\"brightness\"", ",", "\n", "\"contrast\"", ",", "\n", "\"defocus_blur\"", ",", "\n", "\"elastic_transform\"", ",", "\n", "\"fog\"", ",", "\n", "\"frost\"", ",", "\n", "\"gaussian_blur\"", ",", "\n", "\"gaussian_noise\"", ",", "\n", "\"glass_blur\"", ",", "\n", "\"impulse_noise\"", ",", "\n", "\"jpeg_compression\"", ",", "\n", "\"motion_blur\"", ",", "\n", "\"pixelate\"", ",", "\n", "\"saturate\"", ",", "\n", "\"shot_noise\"", ",", "\n", "\"snow\"", ",", "\n", "\"spatter\"", ",", "\n", "\"speckle_noise\"", ",", "\n", "\"zoom_blur\"", "]", "\n", "if", "noise_type", "not", "in", "all_noises", ":", "\n", "            ", "raise", "Exception", "(", "f\"Wrong noise type. Choose one from {','.join(all_noises)}.\"", ")", "\n", "", "if", "noise_level", "<", "1", "or", "noise_level", ">", "5", ":", "\n", "            ", "raise", "Exception", "(", "f\"noise_level should be an integer between 1-5.\"", ")", "\n", "", "self", ".", "data", "=", "np", ".", "load", "(", "opj", "(", "root", ",", "f\"{noise_type}.npy\"", ")", ")", "[", "(", "noise_level", "-", "1", ")", "*", "10000", ":", "noise_level", "*", "10000", "]", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "opj", "(", "root", ",", "f\"labels.npy\"", ")", ")", "[", "(", "noise_level", "-", "1", ")", "*", "10000", ":", "noise_level", "*", "10000", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.CIFAR_C.__getitem__": [[43, 64], ["PIL.Image.fromarray", "utils.CIFAR_C.transform", "utils.CIFAR_C.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.CIFAR_C.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.IMAGENET_C.__init__": [[73, 101], ["[].astype", "Exception", "Exception", "numpy.load", "os.path.join", "numpy.load", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "noise_type", ",", "noise_level", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "all_noises", "=", "[", "\"brightness\"", ",", "\n", "\"contrast\"", ",", "\n", "\"defocus_blur\"", ",", "\n", "\"elastic_transform\"", ",", "\n", "\"fog\"", ",", "\n", "\"frost\"", ",", "\n", "\"gaussian_blur\"", ",", "\n", "\"gaussian_noise\"", ",", "\n", "\"glass_blur\"", ",", "\n", "\"impulse_noise\"", ",", "\n", "\"jpeg_compression\"", ",", "\n", "\"motion_blur\"", ",", "\n", "\"pixelate\"", ",", "\n", "\"saturate\"", ",", "\n", "\"shot_noise\"", ",", "\n", "\"snow\"", ",", "\n", "\"spatter\"", ",", "\n", "\"speckle_noise\"", ",", "\n", "\"zoom_blur\"", "]", "\n", "if", "noise_type", "not", "in", "all_noises", ":", "\n", "            ", "raise", "Exception", "(", "f\"Wrong noise type. Choose one from {','.join(all_noises)}.\"", ")", "\n", "", "if", "noise_level", "<", "1", "or", "noise_level", ">", "5", ":", "\n", "            ", "raise", "Exception", "(", "f\"noise_level should be an integer between 1-5.\"", ")", "\n", "", "self", ".", "data", "=", "np", ".", "load", "(", "opj", "(", "root", ",", "f\"{noise_type}.npy\"", ")", ")", "[", "(", "noise_level", "-", "1", ")", "*", "10000", ":", "noise_level", "*", "10000", "]", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "opj", "(", "root", ",", "f\"labels.npy\"", ")", ")", "[", "(", "noise_level", "-", "1", ")", "*", "10000", ":", "noise_level", "*", "10000", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.IMAGENET_C.__getitem__": [[102, 123], ["PIL.Image.fromarray", "utils.IMAGENET_C.transform", "utils.IMAGENET_C.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.IMAGENET_C.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.WarmUpLR.__init__": [[363, 367], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "total_iters", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "        ", "self", ".", "total_iters", "=", "total_iters", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.WarmUpLR.get_lr": [[368, 373], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "r\"\"\"we will use the first m batches, and set the learning\n        rate to base_lr * m / total_iters\n        \"\"\"", "\n", "return", "[", "base_lr", "*", "self", ".", "last_epoch", "/", "(", "self", ".", "total_iters", "+", "1e-8", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddGaussianNoise.__init__": [[384, 387], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "0.", ",", "std", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "std", "=", "std", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddGaussianNoise.__call__": [[388, 390], ["torch.randn", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", "+", "(", "torch", ".", "randn", "(", "tensor", ".", "size", "(", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddGaussianNoise.__repr__": [[391, 393], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddSaltPepperNoise.__init__": [[398, 401], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "salt", "=", "probability", "/", "2", "\n", "self", ".", "pepper", "=", "1", "-", "self", ".", "salt", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddSaltPepperNoise.__call__": [[402, 412], ["torch.rand().repeat", "tensor.clone", "torch.max", "torch.min", "torch.where", "torch.where", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "saltNpepper", "=", "torch", ".", "rand", "(", "tensor", ".", "shape", "[", "-", "2", "]", ",", "tensor", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", "\n", "noisy", "=", "tensor", ".", "clone", "(", ")", "\n", "\n", "salt_v", "=", "torch", ".", "max", "(", "tensor", ")", "\n", "pepper_v", "=", "torch", ".", "min", "(", "tensor", ")", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", ">=", "self", ".", "salt", ",", "noisy", ",", "salt_v", ")", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", "<=", "self", ".", "pepper", ",", "noisy", ",", "pepper_v", ")", "\n", "\n", "return", "noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.AddSaltPepperNoise.__repr__": [[413, 415], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(probability={0:0.3f})'", ".", "format", "(", "self", ".", "p", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.get_cifar_training_dataloader": [[128, 168], ["torchvision.Compose", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor", "torchvision.Normalize", "transform_list.append", "transform_list.insert"], "function", ["None"], ["", "", "def", "get_cifar_training_dataloader", "(", "mean", ",", "std", ",", "cifar10", "=", "False", ",", "simple", "=", "False", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ",", "shuffle", "=", "True", ",", "root", "=", "'./data'", ",", "noise_transform", "=", "None", ",", "after_norm", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "r\"\"\" return training dataloader for CIFAR dataset\n    Args:\n        mean: mean of cifar100/10 training dataset\n        std: std of cifar100/10 training dataset\n        path: path to cifar100/10 training python dataset\n        batch_size: dataloader batchsize\n        num_workers: dataloader num_works\n        shuffle: whether to shuffle \n    Returns: train_data_loader:torch dataloader object\n    \"\"\"", "\n", "if", "simple", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", "\n", "", "if", "noise_transform", "is", "not", "None", ":", "\n", "        ", "if", "after_norm", ":", "\n", "            ", "transform_list", ".", "append", "(", "noise_transform", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "insert", "(", "1", ",", "noise_transform", ")", "\n", "\n", "", "", "transform_train", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "#cifar100_training = CIFAR100Train(path, transform=transform_train)", "\n", "if", "cifar10", ":", "\n", "        ", "cifar_training", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "", "else", ":", "\n", "        ", "cifar_training", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "", "cifar_training_loader", "=", "DataLoader", "(", "\n", "cifar_training", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ",", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "cifar_training_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.get_cifar_test_dataloader": [[169, 202], ["torchvision.Compose", "torch.utils.data.DataLoader", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "transform_list.append", "transform_list.insert"], "function", ["None"], ["", "def", "get_cifar_test_dataloader", "(", "mean", ",", "std", ",", "cifar10", "=", "False", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ",", "shuffle", "=", "True", ",", "root", "=", "'./data'", ",", "noise_transform", "=", "None", ",", "sampler", "=", "None", ",", "after_norm", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "r\"\"\" return training dataloader for CIFAR\n    Args:\n        mean: mean of cifar100/10 test dataset\n        std: std of cifar100/10 test dataset\n        path: path to cifar100/10 test python dataset\n        batch_size: dataloader batchsize\n        num_workers: dataloader num_works\n        shuffle: whether to shuffle \n        after_norm: if true (false) applies the noise transformation after (before) normalization\n    Returns: cifar100_test_loader:torch dataloader object\n    \"\"\"", "\n", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", "\n", "if", "noise_transform", "is", "not", "None", ":", "\n", "        ", "if", "after_norm", ":", "\n", "            ", "transform_list", ".", "append", "(", "noise_transform", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "insert", "(", "1", ",", "noise_transform", ")", "\n", "\n", "", "", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "#cifar100_test = CIFAR100Test(path, transform=transform_test)", "\n", "if", "cifar10", ":", "\n", "        ", "cifar_test", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "", "else", ":", "\n", "        ", "cifar_test", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "", "cifar_test_loader", "=", "DataLoader", "(", "\n", "cifar_test", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "cifar_test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.get_cifarc_dataloader": [[203, 279], ["torchvision.Compose", "torch.utils.data.DataLoader", "torchvision.ToTensor", "transform_list.append", "torch.utils.data.ConcatDataset", "torchvision.Normalize", "all_ds.append", "range", "torch.utils.data.ConcatDataset", "utils.CIFAR_C", "utils.CIFAR_C", "all_ds.append", "utils.CIFAR_C"], "function", ["None"], ["", "def", "get_cifarc_dataloader", "(", "mean", "=", "None", ",", "std", "=", "None", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ",", "shuffle", "=", "True", ",", "root", "=", "'./data'", ",", "noise_type", "=", "None", ",", "noise_level", "=", "None", ",", "sampler", "=", "None", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "r\"\"\" return cifar10/100-c dataloader\n    Args:\n        mean: normalization mean\n        std: normalization std\n        batch_size: dataloader batchsize\n        num_workers: dataloader num_works\n        shuffle: whether to shuffle\n        root: path to cifar10/100-c dataset\n        noise_type: \"brightness\",\n                    \"contrast\",\n                    \"defocus_blur\",\n                    \"elastic_transform\",\n                    \"fog\",\n                    \"frost\",\n                    \"gaussian_blur\",\n                    \"gaussian_noise\",\n                    \"glass_blur\",\n                    \"impulse_noise\",\n                    \"jpeg_compression\",\n                    \"motion_blur\",\n                    \"pixelate\",\n                    \"saturate\",\n                    \"shot_noise\",\n                    \"snow\",\n                    \"spatter\",\n                    \"speckle_noise\",\n                    \"zoom_blur\"\n        noise_level: integer in range [1,5]\n        sampler: data sampler\n    Returns: cifarc_loader\n    \"\"\"", "\n", "all_noises", "=", "[", "\"brightness\"", ",", "\n", "\"contrast\"", ",", "\n", "\"defocus_blur\"", ",", "\n", "\"elastic_transform\"", ",", "\n", "\"fog\"", ",", "\n", "\"frost\"", ",", "\n", "\"gaussian_blur\"", ",", "\n", "\"gaussian_noise\"", ",", "\n", "\"glass_blur\"", ",", "\n", "\"impulse_noise\"", ",", "\n", "\"jpeg_compression\"", ",", "\n", "\"motion_blur\"", ",", "\n", "\"pixelate\"", ",", "\n", "\"saturate\"", ",", "\n", "\"shot_noise\"", ",", "\n", "\"snow\"", ",", "\n", "\"spatter\"", ",", "\n", "\"speckle_noise\"", ",", "\n", "\"zoom_blur\"", "]", "\n", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "if", "mean", "is", "not", "None", "and", "std", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "noise_type", "is", "None", "and", "noise_level", "is", "not", "None", ":", "\n", "        ", "all_ds", "=", "[", "]", "\n", "for", "noise", "in", "all_noises", ":", "\n", "            ", "all_ds", ".", "append", "(", "CIFAR_C", "(", "root", ",", "noise", ",", "noise_level", ",", "transform", "=", "transform_test", ")", ")", "\n", "", "cifarc", "=", "ConcatDataset", "(", "all_ds", ")", "\n", "", "elif", "noise_type", "is", "not", "None", "and", "noise_level", "is", "None", ":", "\n", "        ", "all_ds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "all_ds", ".", "append", "(", "CIFAR_C", "(", "root", ",", "noise_type", ",", "i", ",", "transform", "=", "transform_test", ")", ")", "\n", "", "cifarc", "=", "ConcatDataset", "(", "all_ds", ")", "\n", "", "else", ":", "\n", "        ", "cifarc", "=", "CIFAR_C", "(", "root", ",", "noise_type", ",", "noise_level", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "cifarc_loader", "=", "DataLoader", "(", "\n", "cifarc", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "cifarc_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.get_imagenetc_dataloader": [[280, 356], ["torchvision.Compose", "torch.utils.data.DataLoader", "torchvision.ToTensor", "transform_list.append", "torch.utils.data.ConcatDataset", "torchvision.Normalize", "all_ds.append", "range", "torch.utils.data.ConcatDataset", "utils.IMAGENET_C", "utils.IMAGENET_C", "all_ds.append", "utils.IMAGENET_C"], "function", ["None"], ["", "def", "get_imagenetc_dataloader", "(", "mean", "=", "None", ",", "std", "=", "None", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ",", "shuffle", "=", "True", ",", "root", "=", "'./data'", ",", "noise_type", "=", "None", ",", "noise_level", "=", "None", ",", "sampler", "=", "None", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "r\"\"\" return imagenet-c dataloader\n    Args:\n        mean: normalization mean\n        std: normalization std\n        batch_size: dataloader batchsize\n        num_workers: dataloader num_works\n        shuffle: whether to shuffle\n        root: path to imagenet-c dataset\n        noise_type: \"brightness\",\n                    \"contrast\",\n                    \"defocus_blur\",\n                    \"elastic_transform\",\n                    \"fog\",\n                    \"frost\",\n                    \"gaussian_blur\",\n                    \"gaussian_noise\",\n                    \"glass_blur\",\n                    \"impulse_noise\",\n                    \"jpeg_compression\",\n                    \"motion_blur\",\n                    \"pixelate\",\n                    \"saturate\",\n                    \"shot_noise\",\n                    \"snow\",\n                    \"spatter\",\n                    \"speckle_noise\",\n                    \"zoom_blur\"\n        noise_level: integer in range [1,5]\n        sampler: data sampler\n    Returns: imagenetc_loader\n    \"\"\"", "\n", "all_noises", "=", "[", "\"brightness\"", ",", "\n", "\"contrast\"", ",", "\n", "\"defocus_blur\"", ",", "\n", "\"elastic_transform\"", ",", "\n", "\"fog\"", ",", "\n", "\"frost\"", ",", "\n", "\"gaussian_blur\"", ",", "\n", "\"gaussian_noise\"", ",", "\n", "\"glass_blur\"", ",", "\n", "\"impulse_noise\"", ",", "\n", "\"jpeg_compression\"", ",", "\n", "\"motion_blur\"", ",", "\n", "\"pixelate\"", ",", "\n", "\"saturate\"", ",", "\n", "\"shot_noise\"", ",", "\n", "\"snow\"", ",", "\n", "\"spatter\"", ",", "\n", "\"speckle_noise\"", ",", "\n", "\"zoom_blur\"", "]", "\n", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "if", "mean", "is", "not", "None", "and", "std", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "noise_type", "is", "None", "and", "noise_level", "is", "not", "None", ":", "\n", "        ", "all_ds", "=", "[", "]", "\n", "for", "noise", "in", "all_noises", ":", "\n", "            ", "all_ds", ".", "append", "(", "IMAGENET_C", "(", "root", ",", "noise", ",", "noise_level", ",", "transform", "=", "transform_test", ")", ")", "\n", "", "imagenetc", "=", "ConcatDataset", "(", "all_ds", ")", "\n", "", "elif", "noise_type", "is", "not", "None", "and", "noise_level", "is", "None", ":", "\n", "        ", "all_ds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "all_ds", ".", "append", "(", "IMAGENET_C", "(", "root", ",", "noise_type", ",", "i", ",", "transform", "=", "transform_test", ")", ")", "\n", "", "imagenetc", "=", "ConcatDataset", "(", "all_ds", ")", "\n", "", "else", ":", "\n", "        ", "imagenetc", "=", "IMAGENET_C", "(", "root", ",", "noise_type", ",", "noise_level", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "imagenetc_loader", "=", "DataLoader", "(", "\n", "imagenetc", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "imagenetc_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.scripts.utils.to_pair": [[374, 379], ["isinstance"], "function", ["None"], ["", "", "def", "to_pair", "(", "input", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "tuple", ")", ":", "\n", "        ", "return", "input", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "return", "input", ",", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.picklable_adv.__init__": [[75, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "distance", "=", "x", ".", "_distance", "\n", "self", ".", "distance_value", "=", "x", ".", "distance", ".", "value", "\n", "self", ".", "unperturbed", "=", "x", ".", "unperturbed", "\n", "self", ".", "perturbed", "=", "x", ".", "perturbed", "\n", "self", ".", "_total_prediction_calls", "=", "x", ".", "_total_prediction_calls", "\n", "self", ".", "original_class", "=", "x", ".", "original_class", "\n", "self", ".", "target_class", "=", "x", ".", "target_class", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.deeper_model.__init__": [[87, 92], ["super().__init__", "predCodNet.predCodNet.predCodNet.to"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "t", ",", "predCodNet", ",", "batchsize", ")", ":", "\n", "        ", "super", "(", "deeper_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predCodNet", "=", "predCodNet", ".", "to", "(", "device", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "batchSize", "=", "batchsize", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.deeper_model.forward": [[93, 106], ["torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "range", "adversarial_attacks.deeper_model.predCodNet", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "bTempG", "=", "torch", ".", "randn", "(", "self", ".", "batchSize", ",", "12", ",", "32", ",", "32", ")", ".", "to", "(", "device", ")", "#changed this to randn", "\n", "cTempG", "=", "torch", ".", "randn", "(", "self", ".", "batchSize", ",", "18", ",", "16", ",", "16", ")", ".", "to", "(", "device", ")", "\n", "dTempG", "=", "torch", ".", "randn", "(", "self", ".", "batchSize", ",", "24", ",", "8", ",", "8", ")", ".", "to", "(", "device", ")", "\n", "\n", "bTempG", ".", "requires_grad", "=", "cTempG", ".", "requires_grad", "=", "dTempG", ".", "requires_grad", "=", "True", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "t", ")", ":", "\n", "            ", "out", ",", "a", ",", "bTempG", ",", "cTempG", ",", "dTempG", ",", "errorB", ",", "errorC", ",", "errorD", "=", "self", ".", "predCodNet", "(", "x", ",", "bTempG", ",", "cTempG", ",", "dTempG", ",", "'full'", ")", "\n", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.get_flag": [[110, 129], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "all", "len", "sample_target.cuda", "tlist.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "get_flag", "(", "sample_image", ",", "sample_target", ",", "allmodels", ")", ":", "\n", "\n", "\n", "    ", "mean", ",", "std", "=", "(", "0.507", ",", "0.486", ",", "0.440", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", "\n", "\n", "x_image", "=", "torch", ".", "zeros", "(", "sample_image", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "x_image", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "(", "sample_image", "[", ":", ",", "i", ",", ":", ",", ":", "]", "-", "torch", ".", "ones", "(", "(", "1", ",", "32", ",", "32", ")", ")", "*", "mean", "[", "i", "]", ")", "/", "std", "[", "i", "]", "\n", "\n", "\n", "", "tlist", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "allmodels", ")", ")", ":", "\n", "        ", "a", "=", "torch", ".", "max", "(", "allmodels", "[", "i", "]", "(", "torch", ".", "Tensor", "(", "x_image", ")", ".", "cuda", "(", ")", ")", ",", "1", ")", ".", "indices", "\n", "b", "=", "sample_target", ".", "cuda", "(", ")", "\n", "\n", "tlist", ".", "append", "(", "a", "==", "b", ")", "\n", "\n", "", "return", "all", "(", "tlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.get_correct_X": [[135, 159], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torchvision.ToTensor", "len", "inputs.to", "labels.to", "adversarial_attacks.get_flag", "correct_X_test.append", "print", "len"], "function", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.get_flag"], ["", "def", "get_correct_X", "(", "allmodels", ")", ":", "\n", "\n", "    ", "total_images", "=", "200", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "#, transforms.Normalize((0.507, 0.486, 0.440), (0.267, 0.256, 0.276))])", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "\n", "correct_X_test", "=", "[", "]", "\n", "\n", "for", "ind", ",", "data", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "if", "len", "(", "correct_X_test", ")", "<", "total_images", ":", "\n", "            ", "inputs", ",", "labels", "=", "data", "\n", "inputs", ".", "to", "(", "device", ")", "\n", "labels", ".", "to", "(", "device", ")", "\n", "\n", "if", "get_flag", "(", "inputs", ",", "labels", ",", "allmodels", ")", "==", "True", ":", "\n", "                ", "correct_X_test", ".", "append", "(", "(", "inputs", ",", "labels", ")", ")", "\n", "print", "(", "len", "(", "correct_X_test", ")", ",", "'====>'", ",", "ind", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "correct_X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.test_accuracy": [[164, 180], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "xmodel", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "labels.size", "float", "torchvision.ToTensor", "torchvision.Normalize", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "labels.cuda"], "function", ["None"], ["", "def", "test_accuracy", "(", "xmodel", ")", ":", "\n", "\n", "##Sanity test...accuracy on test set...", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.486", ",", "0.440", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", ")", "]", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "True", ")", "\n", "corrs", "=", "0.", "\n", "total", "=", "0.", "\n", "for", "(", "inputs", ",", "labels", ")", "in", "testloader", ":", "\n", "        ", "out", "=", "xmodel", "(", "torch", ".", "Tensor", "(", "inputs", ")", ".", "cuda", "(", ")", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "out", ",", "1", ")", "\n", "corrs", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "cuda", "(", ")", ".", "data", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "", "corrs", "=", "(", "float", "(", "corrs", ")", "*", "100.", ")", "/", "float", "(", "total", ")", "\n", "#     print ('The accuracy is:', (float(corrs)*100.) / float(total))", "\n", "return", "corrs", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.adversarial_attacks.mean_confidence_interval": [[287, 297], ["len", "numpy.mean", "numpy.std", "numpy.array", "scipy.stats.t.ppf"], "function", ["None"], ["def", "mean_confidence_interval", "(", "data", ",", "confidence", "=", "0.95", ")", ":", "\n", "\n", "    ", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", "=", "np", ".", "mean", "(", "a", ")", "\n", "std", "=", "np", ".", "std", "(", "a", ")", "\n", "# se = scipy.stats.sem(a)", "\n", "h", "=", "std", "*", "scipy", ".", "stats", ".", "t", ".", "ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.", ",", "n", "-", "1", ")", "\n", "# return  m, m-h,m+h,h", "\n", "return", "m", ",", "std", ",", "h", "\n", "", "NUMBER_BOOTSTRAPS", "=", "1000", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.RECtrainingHyperParameters.noisy": [[29, 52], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "gaussNoise.cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "unos.cuda.cuda", "unos.cuda.cuda", "saltNpepper.cuda.cuda", "thDown.cuda.cuda", "thUp.cuda.cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["def", "noisy", "(", "noise_typ", ",", "image", ",", "noiseParam", ")", ":", "\n", "    ", "if", "noise_typ", "==", "\"gauss\"", ":", "\n", "        ", "gaussNoise", "=", "torch", ".", "randn", "(", "image", ".", "shape", ")", "*", "noiseParam", "\n", "noisy", "=", "image", "+", "gaussNoise", ".", "cuda", "(", ")", "\n", "return", "noisy", "\n", "\n", "", "elif", "noise_typ", "==", "\"s&p\"", ":", "\n", "        ", "thUp", "=", "noiseParam", "/", "2", "*", "torch", ".", "ones", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "thDown", "=", "(", "1", "-", "noiseParam", "/", "2", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "saltNpepper", "=", "torch", ".", "rand", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "unos", "=", "torch", ".", "max", "(", "image", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", ")", "\n", "menoUnos", "=", "-", "torch", ".", "max", "(", "image", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", ")", "\n", "noisy", "=", "image", "\n", "\n", "unos", "=", "unos", ".", "cuda", "(", ")", "\n", "menoUnos", "=", "unos", ".", "cuda", "(", ")", "\n", "saltNpepper", "=", "saltNpepper", ".", "cuda", "(", ")", "\n", "thDown", "=", "thDown", ".", "cuda", "(", ")", "\n", "thUp", "=", "thUp", ".", "cuda", "(", ")", "\n", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", ">=", "thUp", ",", "noisy", ",", "unos", ")", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", "<=", "thDown", ",", "noisy", ",", "menoUnos", ")", "\n", "return", "noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.CEtrainingHyperParameters.noisy": [[29, 52], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "gaussNoise.cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "unos.cuda.cuda", "unos.cuda.cuda", "saltNpepper.cuda.cuda", "thDown.cuda.cuda", "thUp.cuda.cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["def", "noisy", "(", "noise_typ", ",", "image", ",", "noiseParam", ")", ":", "\n", "    ", "if", "noise_typ", "==", "\"gauss\"", ":", "\n", "        ", "gaussNoise", "=", "torch", ".", "randn", "(", "image", ".", "shape", ")", "*", "noiseParam", "\n", "noisy", "=", "image", "+", "gaussNoise", ".", "cuda", "(", ")", "\n", "return", "noisy", "\n", "\n", "", "elif", "noise_typ", "==", "\"s&p\"", ":", "\n", "        ", "thUp", "=", "noiseParam", "/", "2", "*", "torch", ".", "ones", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "thDown", "=", "(", "1", "-", "noiseParam", "/", "2", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "saltNpepper", "=", "torch", ".", "rand", "(", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "3", "]", ")", "\n", "unos", "=", "torch", ".", "max", "(", "image", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", ")", "\n", "menoUnos", "=", "-", "torch", ".", "max", "(", "image", ")", "*", "torch", ".", "ones", "(", "image", ".", "shape", ")", "\n", "noisy", "=", "image", "\n", "\n", "unos", "=", "unos", ".", "cuda", "(", ")", "\n", "menoUnos", "=", "unos", ".", "cuda", "(", ")", "\n", "saltNpepper", "=", "saltNpepper", ".", "cuda", "(", ")", "\n", "thDown", "=", "thDown", ".", "cuda", "(", ")", "\n", "thUp", "=", "thUp", ".", "cuda", "(", ")", "\n", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", ">=", "thUp", ",", "noisy", ",", "unos", ")", "\n", "noisy", "=", "torch", ".", "where", "(", "saltNpepper", "<=", "thDown", ",", "noisy", ",", "menoUnos", ")", "\n", "return", "noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__": [[8, 33], ["torch.Module.__init__", "numpy.round", "numpy.round", "numpy.round", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.square", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featB", ",", "featC", ",", "featD", ",", "gammaFw", ",", "alphaRec", ",", "betaFB", ",", "memory", ")", ":", "\n", "        ", "super", "(", "predCodNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gammaFw", "=", "gammaFw", "*", "torch", ".", "ones", "(", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "alphaRec", "=", "alphaRec", "*", "torch", ".", "ones", "(", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "betaFB", "=", "betaFB", "*", "torch", ".", "ones", "(", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "memory", "=", "memory", "*", "torch", ".", "ones", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "scalingL1", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "np", ".", "square", "(", "32", "*", "32", "*", "3", ")", "/", "(", "5", "*", "5", "*", "3", ")", ")", ")", "\n", "self", ".", "scalingL2", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "np", ".", "square", "(", "16", "*", "16", "*", "featB", ")", "/", "(", "5", "*", "5", "*", "featB", ")", ")", ")", "\n", "self", ".", "scalingL3", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "np", ".", "square", "(", "8", "*", "8", "*", "featC", ")", "/", "(", "5", "*", "5", "*", "featC", ")", ")", ")", "\n", "\n", "self", ".", "poolingParameter", "=", "2", "# important to be the same everywhere", "\n", "\n", "self", ".", "convAB", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "featB", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "convBC", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "featB", ",", "out_channels", "=", "featC", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "convCD", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "featC", ",", "out_channels", "=", "featD", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "convDC", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "featD", ",", "out_channels", "=", "featC", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "convCB", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "featC", ",", "out_channels", "=", "featB", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "convBA", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "featB", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "pool2D", "=", "nn", ".", "MaxPool2d", "(", "self", ".", "poolingParameter", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "poolingParameter", ",", "mode", "=", "'bilinear'", ")", "\n", "self", ".", "unpool2D", "=", "nn", ".", "MaxUnpool2d", "(", "self", ".", "poolingParameter", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "384", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artipago_Role_of_Feedback_in_Predictive_Coding.shallow network.predCodNet.predCodNet.forward": [[34, 97], ["predCodNet.predCodNet.pool2D", "temp3.view", "torch.relu", "torch.relu", "torch.relu", "predCodNet.predCodNet.fc2", "predCodNet.predCodNet.convAB", "predCodNet.predCodNet.pool2D", "predCodNet.predCodNet.convBC", "predCodNet.predCodNet.pool2D", "predCodNet.predCodNet.convCD", "torch.relu", "torch.relu", "torch.relu", "predCodNet.predCodNet.fc1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "predCodNet.predCodNet.convBA", "predCodNet.predCodNet.convCB", "predCodNet.predCodNet.convDC", "predCodNet.predCodNet.upsample", "predCodNet.predCodNet.upsample", "torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss", "predCodNet.predCodNet.pool2D", "torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss", "predCodNet.predCodNet.pool2D", "predCodNet.predCodNet.convBA", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "predCodNet.predCodNet.convCB", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.relu", "torch.relu", "torch.relu", "predCodNet.predCodNet.convDC", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "predCodNet.predCodNet.upsample", "predCodNet.predCodNet.upsample", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "predCodNet.predCodNet.convCB", "predCodNet.predCodNet.convDC", "predCodNet.predCodNet.convCD", "predCodNet.predCodNet.convAB", "predCodNet.predCodNet.upsample", "predCodNet.predCodNet.convBC", "predCodNet.predCodNet.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ",", "b", ",", "c", ",", "d", ",", "networkMode", ")", ":", "\n", "\n", "        ", "errorB", "=", "[", "]", "\n", "errorC", "=", "[", "]", "\n", "errorD", "=", "[", "]", "\n", "reconstructionB", "=", "[", "]", "\n", "reconstructionC", "=", "[", "]", "\n", "reconstructionD", "=", "[", "]", "\n", "\n", "batchSize", "=", "a", ".", "shape", "[", "0", "]", "\n", "\n", "if", "networkMode", "==", "\"forward\"", ":", "\n", "\n", "            ", "bNew", "=", "self", ".", "convAB", "(", "a", ")", "\n", "pooledB", ",", "indicesB", "=", "self", ".", "pool2D", "(", "F", ".", "relu", "(", "bNew", ")", ")", "\n", "cNew", "=", "self", ".", "convBC", "(", "pooledB", ")", "\n", "pooledC", ",", "indicesC", "=", "self", ".", "pool2D", "(", "F", ".", "relu", "(", "cNew", ")", ")", "\n", "dNew", "=", "self", ".", "convCD", "(", "pooledC", ")", "\n", "\n", "", "elif", "networkMode", "==", "\"reconstruction\"", ":", "\n", "\n", "            ", "a", "=", "self", ".", "convBA", "(", "b", ")", "# feedback from B upsample", "\n", "bNew", "=", "self", ".", "convCB", "(", "self", ".", "upsample", "(", "c", ")", ")", "# feedback from C", "\n", "cNew", "=", "self", ".", "convDC", "(", "self", ".", "upsample", "(", "d", ")", ")", "# feedback from D", "\n", "dNew", "=", "d", "\n", "\n", "", "elif", "networkMode", "==", "\"full\"", ":", "\n", "\n", "            ", "if", "self", ".", "betaFB", "==", "0", ":", "\n", "                ", "den", "=", "torch", ".", "sigmoid", "(", "self", ".", "gammaFw", ")", "+", "torch", ".", "sigmoid", "(", "self", ".", "memory", ")", "\n", "gammaFw", "=", "torch", ".", "sigmoid", "(", "self", ".", "gammaFw", ")", "/", "den", "\n", "betaBw", "=", "0", "\n", "", "else", ":", "\n", "                ", "den", "=", "torch", ".", "sigmoid", "(", "self", ".", "gammaFw", ")", "+", "torch", ".", "sigmoid", "(", "self", ".", "betaFB", ")", "+", "torch", ".", "sigmoid", "(", "self", ".", "memory", ")", "\n", "gammaFw", "=", "torch", ".", "sigmoid", "(", "self", ".", "gammaFw", ")", "/", "den", "\n", "betaBw", "=", "torch", ".", "sigmoid", "(", "self", ".", "betaFB", ")", "/", "den", "\n", "\n", "", "errorB", "=", "nn", ".", "functional", ".", "mse_loss", "(", "self", ".", "convBA", "(", "b", ")", ",", "a", ")", "\n", "reconstructionB", "=", "torch", ".", "autograd", ".", "grad", "(", "errorB", ",", "b", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "bNew", "=", "gammaFw", "*", "self", ".", "convAB", "(", "a", ")", "+", "(", "1", "-", "gammaFw", "-", "betaBw", ")", "*", "b", "+", "betaBw", "*", "self", ".", "convCB", "(", "self", ".", "upsample", "(", "c", ")", ")", "-", "self", ".", "alphaRec", "*", "self", ".", "scalingL1", "*", "batchSize", "*", "reconstructionB", "\n", "\n", "errorC", "=", "nn", ".", "functional", ".", "mse_loss", "(", "self", ".", "convCB", "(", "self", ".", "upsample", "(", "c", ")", ")", ",", "b", ")", "\n", "reconstructionC", "=", "torch", ".", "autograd", ".", "grad", "(", "errorC", ",", "c", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "pooledB", ",", "indicesB", "=", "self", ".", "pool2D", "(", "F", ".", "relu", "(", "bNew", ")", ")", "\n", "cNew", "=", "gammaFw", "*", "self", ".", "convBC", "(", "pooledB", ")", "+", "(", "1", "-", "gammaFw", "-", "betaBw", ")", "*", "c", "+", "betaBw", "*", "self", ".", "convDC", "(", "self", ".", "upsample", "(", "d", ")", ")", "-", "self", ".", "alphaRec", "*", "self", ".", "scalingL2", "*", "batchSize", "*", "reconstructionC", "\n", "\n", "errorD", "=", "nn", ".", "functional", ".", "mse_loss", "(", "self", ".", "convDC", "(", "self", ".", "upsample", "(", "d", ")", ")", ",", "c", ")", "\n", "reconstructionD", "=", "torch", ".", "autograd", ".", "grad", "(", "errorD", ",", "d", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "pooledC", ",", "indicesC", "=", "self", ".", "pool2D", "(", "F", ".", "relu", "(", "cNew", ")", ")", "\n", "\n", "dNew", "=", "gammaFw", "*", "self", ".", "convCD", "(", "pooledC", ")", "+", "(", "1", "-", "gammaFw", ")", "*", "d", "-", "self", ".", "alphaRec", "*", "self", ".", "scalingL3", "*", "batchSize", "*", "reconstructionD", "\n", "\n", "", "temp3", ",", "indices3", "=", "self", ".", "pool2D", "(", "F", ".", "relu", "(", "dNew", ")", ")", "\n", "\n", "flat3", "=", "temp3", ".", "view", "(", "-", "1", ",", "temp3", ".", "shape", "[", "1", "]", "*", "temp3", ".", "shape", "[", "2", "]", "*", "temp3", ".", "shape", "[", "3", "]", ")", "\n", "\n", "dense1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "flat3", ")", ")", "\n", "\n", "out", "=", "self", ".", "fc2", "(", "dense1", ")", "\n", "\n", "return", "out", ",", "a", ",", "bNew", ",", "cNew", ",", "dNew", ",", "reconstructionB", ",", "reconstructionC", ",", "reconstructionD", "", "", "", ""]]}