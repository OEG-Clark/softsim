{"home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.None.some_methods_inference_public.name_list": [[14, 16], ["name_list.split"], "function", ["None"], ["def", "name_list", "(", "name_list", ")", ":", "\n", "    ", "return", "[", "name", "for", "name", "in", "name_list", ".", "split", "(", "','", ")", "if", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.None.some_methods_inference_public.main": [[17, 48], ["click.command", "click.option", "click.option", "some_methods_inference_public.name_list", "list", "some_methods_inference_public.name_list", "getattr", "getattr.", "METHOD_KEYS.keys", "print", "road_anomaly_benchmark.evaluation.Evaluation", "tqdm.tqdm", "road_anomaly_benchmark.evaluation.Evaluation.wait_to_finish_saving", "road_anomaly_benchmark.evaluation.Evaluation.get_frames", "method_object.anomaly_score", "road_anomaly_benchmark.evaluation.Evaluation.save_output", "list", "road_anomaly_benchmark.evaluation.Evaluation.__len__", "METHOD_KEYS.keys"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.wait_to_finish_saving", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.SynBoost.anomaly_score", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.save_output", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--methods'", ",", "default", "=", "'ALL'", ",", "help", "=", "f'Which methods to run, ALL or some of {list(METHOD_KEYS.keys())}'", ")", "\n", "@", "click", ".", "option", "(", "'--dsets'", ",", "default", "=", "'ObstacleTrack-validation'", ",", "help", "=", "'List of datasets to evaluate on, ex: ObstacleTrack-validation,LostAndFound-testNoKnown'", ")", "\n", "\n", "def", "main", "(", "methods", ",", "dsets", ")", ":", "\n", "    ", "if", "methods", "==", "'ALL'", ":", "\n", "        ", "methods", "=", "list", "(", "METHOD_KEYS", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "methods", "=", "name_list", "(", "methods", ")", "\n", "", "dataset_names", "=", "name_list", "(", "dsets", ")", "\n", "\n", "for", "methodname", "in", "methods", ":", "\n", "        ", "modelid", "=", "METHOD_KEYS", "[", "methodname", "]", "\n", "method_object", "=", "getattr", "(", "baselines_module", ",", "methodname", ")", "\n", "method", "=", "method_object", "(", "modelid", ")", "\n", "\n", "for", "dset", "in", "dataset_names", ":", "\n", "            ", "print", "(", "f\"-- Inference: Method {methodname} on Dataset {dset} --\"", ")", "\n", "\n", "ev", "=", "Evaluation", "(", "\n", "method_name", "=", "methodname", ",", "\n", "# dataset_name = 'ObstacleTrack-all',", "\n", "# dataset_name='AnomalyTrack-test',", "\n", "dataset_name", "=", "dset", ",", "\n", ")", "\n", "\n", "for", "frame", "in", "tqdm", "(", "ev", ".", "get_frames", "(", ")", ",", "total", "=", "ev", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "result", "=", "method", ".", "anomaly_score", "(", "frame", ".", "image", ")", "\n", "ev", ".", "save_output", "(", "frame", ",", "result", ")", "\n", "\n", "", "ev", ".", "wait_to_finish_saving", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.None.example_inference.method_dummy": [[7, 12], ["cv2.cvtColor", "image_hsv[].astype"], "function", ["None"], ["def", "method_dummy", "(", "image", ",", "**", "_", ")", ":", "\n", "\t", "\"\"\" Very naive method: return color saturation \"\"\"", "\n", "image_hsv", "=", "cv", ".", "cvtColor", "(", "image", ",", "cv", ".", "COLOR_RGB2HSV_FULL", ")", "\n", "anomaly_p", "=", "image_hsv", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "*", "(", "1.", "/", "255.", ")", "\n", "return", "anomaly_p", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.None.example_inference.main": [[14, 30], ["road_anomaly_benchmark.evaluation.Evaluation", "tqdm.tqdm", "road_anomaly_benchmark.evaluation.Evaluation.wait_to_finish_saving", "road_anomaly_benchmark.evaluation.Evaluation.get_frames", "example_inference.method_dummy", "road_anomaly_benchmark.evaluation.Evaluation.save_output"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.wait_to_finish_saving", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.None.example_inference.method_dummy", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.save_output"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "ev", "=", "Evaluation", "(", "\n", "method_name", "=", "'Dummy'", ",", "\n", "dataset_name", "=", "'ObstacleTrack-all'", ",", "\n", "# dataset_name = 'AnomalyTrack-test',", "\n", ")", "\n", "\n", "for", "frame", "in", "tqdm", "(", "ev", ".", "get_frames", "(", ")", ")", ":", "\n", "# run method here", "\n", "\t\t", "result", "=", "method_dummy", "(", "frame", ".", "image", ")", "\n", "# provide the output for saving", "\n", "ev", ".", "save_output", "(", "frame", ",", "result", ")", "\n", "\n", "# wait for the background threads which are saving", "\n", "", "ev", ".", "wait_to_finish_saving", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.prediction_to_cocoformat.process_image": [[25, 52], ["cv2.imread", "range", "imantics.Image", "coco_dataset[].append", "os.path.join", "scipy.ndimage.median_filter", "imantics.Image.add", "imantics.Image.coco", "imantics.Mask"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread"], ["def", "process_image", "(", "file", ",", "image_id", ")", ":", "\n", "    ", "\"\"\" Assumes that prediction and image file have similar prefix, see below\"\"\"", "\n", "prediction", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "file", ")", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "# reduce noise (makes it easier to edit predictions)", "\n", "prediction", "=", "(", "prediction", "==", "19", ")", ".", "astype", "(", "'int32'", ")", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "prediction", "=", "sp", ".", "ndimage", ".", "median_filter", "(", "prediction", ",", "size", "=", "12", ")", "\n", "# remove part where there is obvious street and ego-vehicle", "\n", "", "prediction", "[", "700", ":", ",", "500", ":", "1750", "]", "=", "0", "\n", "prediction", "[", "vehicle_mask", "!=", "0", "]", "=", "1", "\n", "\n", "annotation", "=", "imantics", ".", "Image", "(", "width", "=", "2048", ",", "height", "=", "1024", ")", "\n", "for", "c", "in", "categories", ":", "\n", "        ", "annotation", ".", "add", "(", "imantics", ".", "Mask", "(", "prediction", "==", "c", ")", ",", "category", "=", "categories", "[", "c", "]", ")", "\n", "", "coco_dataset", "[", "'images'", "]", ".", "append", "(", "{", "\n", "'id'", ":", "image_id", ",", "\n", "'dataset_id'", ":", "1", ",", "\n", "'path'", ":", "\"/datasets/lostandfound/{}\"", ".", "format", "(", "file", "[", ":", "-", "10", "]", "+", "'rgb.png'", ")", ",", "\n", "'width'", ":", "2048", ",", "\n", "'height'", ":", "1024", ",", "\n", "'file_name'", ":", "file", "[", ":", "-", "10", "]", "+", "'rgb.png'", "}", ")", "\n", "coco_annotations", "=", "annotation", ".", "coco", "(", ")", "[", "'annotations'", "]", "\n", "for", "coco_annotation", "in", "coco_annotations", ":", "\n", "        ", "coco_annotation", "[", "'id'", "]", "=", "0", "\n", "coco_annotation", "[", "'image_id'", "]", "=", "image_id", "\n", "coco_annotation", "[", "'dataset_id'", "]", "=", "1", "\n", "", "return", "coco_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.__init__": [[34, 37], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.__getattr__": [[38, 45], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.__setattr__": [[46, 56], ["AttributeError"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "not", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", ":", "\n", "            ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "self", "[", "name", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but AttrDict is immutable'", ".", "\n", "format", "(", "name", ",", "value", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable": [[58, 70], ["attr_dict.AttrDict.__dict__.values", "attr_dict.AttrDict.values", "isinstance", "isinstance", "v.immutable", "v.immutable"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable"], ["", "", "def", "immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested AttrDicts.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.is_immutable": [[71, 73], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.__init__": [[291, 293], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.reset": [[294, 299], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.update": [[300, 305], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.make_exp_name": [[21, 59], ["vars", "sorted", "parser.get_default", "str", "isinstance", "str"], "function", ["None"], ["def", "make_exp_name", "(", "args", ",", "parser", ")", ":", "\n", "    ", "exp_name", "=", "'{}-{}'", ".", "format", "(", "args", ".", "dataset", "[", ":", "4", "]", ",", "args", ".", "arch", "[", ":", "]", ")", "\n", "dict_args", "=", "vars", "(", "args", ")", "\n", "\n", "# sort so that we get a consistent directory name", "\n", "argnames", "=", "sorted", "(", "dict_args", ")", "\n", "ignorelist", "=", "[", "'exp'", ",", "'arch'", ",", "'prev_best_filepath'", ",", "'lr_schedule'", ",", "'max_cu_epoch'", ",", "'max_epoch'", ",", "\n", "'strict_bdr_cls'", ",", "'world_size'", ",", "'tb_path'", ",", "'best_record'", ",", "'test_mode'", ",", "'ckpt'", "]", "\n", "# build experiment name with non-default args", "\n", "for", "argname", "in", "argnames", ":", "\n", "        ", "if", "dict_args", "[", "argname", "]", "!=", "parser", ".", "get_default", "(", "argname", ")", ":", "\n", "            ", "if", "argname", "in", "ignorelist", ":", "\n", "                ", "continue", "\n", "", "if", "argname", "==", "'snapshot'", ":", "\n", "                ", "arg_str", "=", "'PT'", "\n", "argname", "=", "''", "\n", "", "elif", "argname", "==", "'nosave'", ":", "\n", "                ", "arg_str", "=", "''", "\n", "argname", "=", "''", "\n", "", "elif", "argname", "==", "'freeze_trunk'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'ft'", "\n", "", "elif", "argname", "==", "'syncbn'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'sbn'", "\n", "", "elif", "argname", "==", "'jointwtborder'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'rlx_loss'", "\n", "", "elif", "isinstance", "(", "dict_args", "[", "argname", "]", ",", "bool", ")", ":", "\n", "                ", "arg_str", "=", "'T'", "if", "dict_args", "[", "argname", "]", "else", "'F'", "\n", "", "else", ":", "\n", "                ", "arg_str", "=", "str", "(", "dict_args", "[", "argname", "]", ")", "[", ":", "7", "]", "\n", "", "if", "argname", "is", "not", "''", ":", "\n", "                ", "exp_name", "+=", "'_{}_{}'", ".", "format", "(", "str", "(", "argname", ")", ",", "arg_str", ")", "\n", "", "else", ":", "\n", "                ", "exp_name", "+=", "'_{}'", ".", "format", "(", "arg_str", ")", "\n", "# clean special chars out    exp_name = re.sub(r'[^A-Za-z0-9_\\-]+', '', exp_name)", "\n", "", "", "", "return", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.fast_hist": [[248, 254], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "num_classes", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "num_classes", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "num_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "num_classes", "**", "2", ")", ".", "reshape", "(", "num_classes", ",", "num_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.per_class_iu": [[67, 69], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.save_log": [[70, 86], ["os.path.join", "print", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.FileHandler", "logging.getLogger().addHandler", "str", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "def", "save_log", "(", "prefix", ",", "output_dir", ",", "date_str", ",", "rank", "=", "0", ")", ":", "\n", "    ", "fmt", "=", "'%(asctime)s.%(msecs)03d %(message)s'", "\n", "date_fmt", "=", "'%m-%d %H:%M:%S'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "prefix", "+", "'_'", "+", "date_str", "+", "'_rank_'", "+", "str", "(", "rank", ")", "+", "'.log'", ")", "\n", "print", "(", "\"Logging :\"", ",", "filename", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "fmt", ",", "datefmt", "=", "date_fmt", ",", "\n", "filename", "=", "filename", ",", "filemode", "=", "'w'", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "fmt", ",", "datefmt", "=", "date_fmt", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "", "else", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.prep_experiment": [[89, 112], ["misc.make_exp_name", "os.path.join", "os.path.join", "torch.cuda.device_count", "str", "datetime.datetime.now().strftime", "os.makedirs", "os.makedirs", "misc.save_log", "open().write", "tensorboardX.SummaryWriter", "datetime.datetime.now", "open", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.make_exp_name", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.save_log", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["", "", "def", "prep_experiment", "(", "args", ",", "parser", ")", ":", "\n", "    ", "\"\"\"\n    Make output directories, setup logging, Tensorboard, snapshot code.\n    \"\"\"", "\n", "ckpt_path", "=", "args", ".", "ckpt", "\n", "tb_path", "=", "args", ".", "tb_path", "\n", "exp_name", "=", "make_exp_name", "(", "args", ",", "parser", ")", "\n", "args", ".", "exp_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "args", ".", "exp", ",", "exp_name", ")", "\n", "args", ".", "tb_exp_path", "=", "os", ".", "path", ".", "join", "(", "tb_path", ",", "args", ".", "exp", ",", "exp_name", ")", "\n", "args", ".", "ngpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "args", ".", "date_str", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ")", ")", "\n", "args", ".", "best_record", "=", "{", "'epoch'", ":", "-", "1", ",", "'iter'", ":", "0", ",", "'val_loss'", ":", "1e10", ",", "'acc'", ":", "0", ",", "\n", "'acc_cls'", ":", "0", ",", "'mean_iu'", ":", "0", ",", "'fwavacc'", ":", "0", "}", "\n", "args", ".", "last_record", "=", "{", "}", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "tb_exp_path", ",", "exist_ok", "=", "True", ")", "\n", "save_log", "(", "'log'", ",", "args", ".", "exp_path", ",", "args", ".", "date_str", ",", "rank", "=", "args", ".", "local_rank", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "args", ".", "date_str", "+", "'.txt'", ")", ",", "'w'", ")", ".", "write", "(", "\n", "str", "(", "args", ")", "+", "'\\n\\n'", ")", "\n", "writer", "=", "SummaryWriter", "(", "logdir", "=", "args", ".", "tb_exp_path", ",", "comment", "=", "args", ".", "tb_tag", ")", "\n", "return", "writer", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.evaluate_eval_for_inference": [[113, 130], ["numpy.nanmean", "misc.print_evaluate_results", "numpy.nanmean", "logging.info", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.print_evaluate_results"], ["", "def", "evaluate_eval_for_inference", "(", "hist", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Modified IOU mechanism for on-the-fly IOU calculations ( prevents memory overflow for\n    large dataset) Only applies to eval/eval.py\n    \"\"\"", "\n", "# axis 0: gt, axis 1: prediction", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset", "=", "dataset", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "logging", ".", "info", "(", "'mean {}'", ".", "format", "(", "mean_iu", ")", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.evaluate_eval": [[133, 245], ["numpy.nanmean", "misc.print_evaluate_results", "numpy.nanmean", "logging.info", "os.path.join", "torch.cuda.synchronize", "torch.save", "logging.info", "logging.info", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.join", "os.makedirs", "torchvision.Compose", "enumerate", "torch.stack", "torchvision.make_grid", "writer.add_image", "numpy.diag", "os.remove", "net.state_dict", "optimizer.state_dict", "os.path.join", "os.path.exists", "os.remove", "enumerate", "numpy.diag", "hist.sum", "hist.sum", "torchvision.Scale", "torchvision.ToTensor", "zip", "args.dataset_cls.colorize_mask", "args.dataset_cls.colorize_mask", "args.dataset_cls.colorize_mask.save", "args.dataset_cls.colorize_mask.save", "vutils.make_grid.extend", "data[].cpu().numpy", "data[].cpu().numpy", "os.path.join", "os.path.join", "standard_transforms.Compose.", "standard_transforms.Compose.", "data[].cpu", "data[].cpu", "args.dataset_cls.colorize_mask.convert", "args.dataset_cls.colorize_mask.convert"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.print_evaluate_results", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "def", "evaluate_eval", "(", "args", ",", "net", ",", "optimizer", ",", "val_loss", ",", "hist", ",", "dump_images", ",", "writer", ",", "epoch", "=", "0", ",", "dataset", "=", "None", ",", ")", ":", "\n", "    ", "\"\"\"\n    Modified IOU mechanism for on-the-fly IOU calculations ( prevents memory overflow for\n    large dataset) Only applies to eval/eval.py\n    \"\"\"", "\n", "# axis 0: gt, axis 1: prediction", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "logging", ".", "info", "(", "'mean {}'", ".", "format", "(", "mean_iu", ")", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "\n", "# update latest snapshot", "\n", "if", "'mean_iu'", "in", "args", ".", "last_record", ":", "\n", "        ", "last_snapshot", "=", "'last_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "args", ".", "last_record", "[", "'epoch'", "]", ",", "args", ".", "last_record", "[", "'mean_iu'", "]", ")", "\n", "last_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "last_snapshot", ")", "\n", "try", ":", "\n", "            ", "os", ".", "remove", "(", "last_snapshot", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "", "", "last_snapshot", "=", "'last_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "epoch", ",", "mean_iu", ")", "\n", "last_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "last_snapshot", ")", "\n", "args", ".", "last_record", "[", "'mean_iu'", "]", "=", "mean_iu", "\n", "args", ".", "last_record", "[", "'epoch'", "]", "=", "epoch", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'mean_iu'", ":", "mean_iu", ",", "\n", "'command'", ":", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "}", ",", "last_snapshot", ")", "\n", "\n", "# update best snapshot", "\n", "if", "mean_iu", ">", "args", ".", "best_record", "[", "'mean_iu'", "]", ":", "\n", "# remove old best snapshot", "\n", "        ", "if", "args", ".", "best_record", "[", "'epoch'", "]", "!=", "-", "1", ":", "\n", "            ", "best_snapshot", "=", "'best_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "args", ".", "best_record", "[", "'epoch'", "]", ",", "args", ".", "best_record", "[", "'mean_iu'", "]", ")", "\n", "best_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "best_snapshot", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "best_snapshot", ")", ",", "'cant find old snapshot {}'", ".", "format", "(", "best_snapshot", ")", "\n", "os", ".", "remove", "(", "best_snapshot", ")", "\n", "\n", "\n", "# save new best", "\n", "", "args", ".", "best_record", "[", "'val_loss'", "]", "=", "val_loss", ".", "avg", "\n", "args", ".", "best_record", "[", "'epoch'", "]", "=", "epoch", "\n", "args", ".", "best_record", "[", "'acc'", "]", "=", "acc", "\n", "args", ".", "best_record", "[", "'acc_cls'", "]", "=", "acc_cls", "\n", "args", ".", "best_record", "[", "'mean_iu'", "]", "=", "mean_iu", "\n", "args", ".", "best_record", "[", "'fwavacc'", "]", "=", "fwavacc", "\n", "\n", "best_snapshot", "=", "'best_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "args", ".", "best_record", "[", "'epoch'", "]", ",", "args", ".", "best_record", "[", "'mean_iu'", "]", ")", "\n", "best_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "best_snapshot", ")", "\n", "shutil", ".", "copyfile", "(", "last_snapshot", ",", "best_snapshot", ")", "\n", "\n", "\n", "to_save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "'best_images'", ")", "\n", "os", ".", "makedirs", "(", "to_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "val_visual", "=", "[", "]", "\n", "\n", "idx", "=", "0", "\n", "\n", "visualize", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "Scale", "(", "384", ")", ",", "\n", "standard_transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "for", "bs_idx", ",", "bs_data", "in", "enumerate", "(", "dump_images", ")", ":", "\n", "            ", "for", "local_idx", ",", "data", "in", "enumerate", "(", "zip", "(", "bs_data", "[", "0", "]", ",", "bs_data", "[", "1", "]", ",", "bs_data", "[", "2", "]", ")", ")", ":", "\n", "                ", "gt_pil", "=", "args", ".", "dataset_cls", ".", "colorize_mask", "(", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "predictions_pil", "=", "args", ".", "dataset_cls", ".", "colorize_mask", "(", "data", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "img_name", "=", "data", "[", "2", "]", "\n", "\n", "prediction_fn", "=", "'{}_prediction.png'", ".", "format", "(", "img_name", ")", "\n", "predictions_pil", ".", "save", "(", "os", ".", "path", ".", "join", "(", "to_save_dir", ",", "prediction_fn", ")", ")", "\n", "gt_fn", "=", "'{}_gt.png'", ".", "format", "(", "img_name", ")", "\n", "gt_pil", ".", "save", "(", "os", ".", "path", ".", "join", "(", "to_save_dir", ",", "gt_fn", ")", ")", "\n", "val_visual", ".", "extend", "(", "[", "visualize", "(", "gt_pil", ".", "convert", "(", "'RGB'", ")", ")", ",", "\n", "visualize", "(", "predictions_pil", ".", "convert", "(", "'RGB'", ")", ")", "]", ")", "\n", "if", "local_idx", ">=", "9", ":", "\n", "                    ", "break", "\n", "", "", "", "val_visual", "=", "torch", ".", "stack", "(", "val_visual", ",", "0", ")", "\n", "val_visual", "=", "vutils", ".", "make_grid", "(", "val_visual", ",", "nrow", "=", "10", ",", "padding", "=", "5", ")", "\n", "writer", ".", "add_image", "(", "'imgs'", ",", "val_visual", ",", "epoch", ")", "\n", "\n", "", "logging", ".", "info", "(", "'-'", "*", "107", ")", "\n", "fmt_str", "=", "'[epoch %d], [val loss %.5f], [acc %.5f], [acc_cls %.5f], '", "+", "'[mean_iu %.5f], [fwavacc %.5f]'", "\n", "logging", ".", "info", "(", "fmt_str", "%", "(", "epoch", ",", "val_loss", ".", "avg", ",", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", ")", ")", "\n", "fmt_str", "=", "'best record: [val loss %.5f], [acc %.5f], [acc_cls %.5f], '", "+", "'[mean_iu %.5f], [fwavacc %.5f], [epoch %d], '", "\n", "logging", ".", "info", "(", "fmt_str", "%", "(", "args", ".", "best_record", "[", "'val_loss'", "]", ",", "args", ".", "best_record", "[", "'acc'", "]", ",", "\n", "args", ".", "best_record", "[", "'acc_cls'", "]", ",", "args", ".", "best_record", "[", "'mean_iu'", "]", ",", "\n", "args", ".", "best_record", "[", "'fwavacc'", "]", ",", "args", ".", "best_record", "[", "'epoch'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'-'", "*", "107", ")", "\n", "\n", "# tensorboard logging of validation phase metrics", "\n", "\n", "writer", ".", "add_scalar", "(", "'training/acc'", ",", "acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'training/acc_cls'", ",", "acc_cls", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'training/mean_iu'", ",", "mean_iu", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'training/val_loss'", ",", "val_loss", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.print_evaluate_results": [[257, 285], ["numpy.diag", "logging.info", "logging.info", "enumerate", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "logging.info", "range"], "function", ["None"], ["", "def", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset", "=", "None", ")", ":", "\n", "# fixme: Need to refactor this dict", "\n", "    ", "try", ":", "\n", "        ", "id2cat", "=", "dataset", ".", "id2cat", "\n", "", "except", ":", "\n", "        ", "id2cat", "=", "{", "i", ":", "i", "for", "i", "in", "range", "(", "dataset", ".", "num_classes", ")", "}", "\n", "", "iu_false_positive", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "-", "np", ".", "diag", "(", "hist", ")", "\n", "iu_false_negative", "=", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", "\n", "iu_true_positive", "=", "np", ".", "diag", "(", "hist", ")", "\n", "\n", "logging", ".", "info", "(", "'IoU:'", ")", "\n", "logging", ".", "info", "(", "'label_id      label    iU    Precision Recall TP     FP    FN'", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "iu", ")", ":", "\n", "# Format all of the strings:", "\n", "        ", "idx_string", "=", "\"{:2d}\"", ".", "format", "(", "idx", ")", "\n", "class_name", "=", "\"{:>13}\"", ".", "format", "(", "id2cat", "[", "idx", "]", ")", "if", "idx", "in", "id2cat", "else", "''", "\n", "iu_string", "=", "'{:5.2f}'", ".", "format", "(", "i", "*", "100", ")", "\n", "total_pixels", "=", "hist", ".", "sum", "(", ")", "\n", "tp", "=", "'{:5.2f}'", ".", "format", "(", "100", "*", "iu_true_positive", "[", "idx", "]", "/", "total_pixels", ")", "\n", "fp", "=", "'{:5.2f}'", ".", "format", "(", "\n", "iu_false_positive", "[", "idx", "]", "/", "iu_true_positive", "[", "idx", "]", ")", "\n", "fn", "=", "'{:5.2f}'", ".", "format", "(", "iu_false_negative", "[", "idx", "]", "/", "iu_true_positive", "[", "idx", "]", ")", "\n", "precision", "=", "'{:5.2f}'", ".", "format", "(", "\n", "iu_true_positive", "[", "idx", "]", "/", "(", "iu_true_positive", "[", "idx", "]", "+", "iu_false_positive", "[", "idx", "]", ")", ")", "\n", "recall", "=", "'{:5.2f}'", ".", "format", "(", "\n", "iu_true_positive", "[", "idx", "]", "/", "(", "iu_true_positive", "[", "idx", "]", "+", "iu_false_negative", "[", "idx", "]", ")", ")", "\n", "logging", ".", "info", "(", "'{}    {}   {}  {}     {}  {}   {}   {}'", ".", "format", "(", "\n", "idx_string", ",", "class_name", ",", "iu_string", ",", "precision", ",", "recall", ",", "tp", ",", "fp", ",", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.__init__": [[157, 179], ["torch.nn.modules.Module.__init__", "my_data_parallel._check_balance", "torch.cuda.is_available", "list", "len", "my_data_parallel.MyDataParallel.module.cuda", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel._check_balance"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "gather", "=", "True", ")", ":", "\n", "        ", "super", "(", "MyDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "[", "]", "\n", "return", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "if", "output_device", "is", "None", ":", "\n", "            ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "output_device", "=", "output_device", "\n", "self", ".", "gather_bool", "=", "gather", "\n", "\n", "_check_balance", "(", "self", ".", "device_ids", ")", "\n", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "self", ".", "module", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.forward": [[180, 192], ["my_data_parallel.MyDataParallel.scatter", "my_data_parallel.MyDataParallel.replicate", "my_data_parallel.MyDataParallel.parallel_apply", "my_data_parallel.MyDataParallel.module", "len", "my_data_parallel.MyDataParallel.gather", "my_data_parallel.MyDataParallel.module", "len"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.scatter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.replicate", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.parallel_apply", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.gather"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "]", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "if", "self", ".", "gather_bool", ":", "\n", "            ", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.replicate": [[193, 195], ["torch.nn.parallel.replicate.replicate"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.replicate"], ["", "", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "return", "replicate", "(", "module", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.scatter": [[196, 198], ["torch.nn.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.parallel_apply": [[199, 201], ["torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.gather": [[202, 204], ["torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel._check_balance": [[47, 69], ["my_data_parallel._check_balance.warn_imbalance"], "function", ["None"], ["def", "_check_balance", "(", "device_ids", ")", ":", "\n", "    ", "imbalance_warn", "=", "\"\"\"\n    There is an imbalance between your GPUs. You may want to exclude GPU {} which\n    has less than 75% of the memory or cores of GPU {}. You can do so by setting\n    the device_ids argument to DataParallel, or by setting the CUDA_VISIBLE_DEVICES\n    environment variable.\"\"\"", "\n", "\n", "dev_props", "=", "[", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", "for", "i", "in", "device_ids", "]", "\n", "\n", "def", "warn_imbalance", "(", "get_prop", ")", ":", "\n", "        ", "values", "=", "[", "get_prop", "(", "props", ")", "for", "props", "in", "dev_props", "]", "\n", "min_pos", ",", "min_val", "=", "min", "(", "enumerate", "(", "values", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "max_pos", ",", "max_val", "=", "max", "(", "enumerate", "(", "values", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "if", "min_val", "/", "max_val", "<", "0.75", ":", "\n", "            ", "warnings", ".", "warn", "(", "imbalance_warn", ".", "format", "(", "device_ids", "[", "min_pos", "]", ",", "device_ids", "[", "max_pos", "]", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "if", "warn_imbalance", "(", "lambda", "props", ":", "props", ".", "total_memory", ")", ":", "\n", "        ", "return", "\n", "", "if", "warn_imbalance", "(", "lambda", "props", ":", "props", ".", "multi_processor_count", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.data_parallel": [[72, 105], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "torch.nn.parallel.parallel_apply.parallel_apply", "isinstance", "list", "len", "module", "torch.nn.parallel.scatter_gather.gather", "range", "len", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.replicate", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.parallel_apply", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.my_data_parallel.MyDataParallel.gather"], ["", "", "def", "data_parallel", "(", "module", ",", "inputs", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "module_kwargs", "=", "None", ",", "gather", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates module(input) in parallel across the GPUs given in device_ids.\n    This is the functional version of the DataParallel module.\n    Args:\n        module: the module to evaluate in parallel\n        inputs: inputs to the module\n        device_ids: GPU ids on which to replicate module\n        output_device: GPU location of the output  Use -1 to indicate the CPU.\n            (default: device_ids[0])\n    Returns:\n        a Tensor containing the result of module(input) located on\n        output_device\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "(", "inputs", ",", ")", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "        ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "", "if", "output_device", "is", "None", ":", "\n", "        ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "\n", "", "inputs", ",", "module_kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ",", "dim", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "        ", "return", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "module_kwargs", "[", "0", "]", ")", "\n", "", "used_device_ids", "=", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", "\n", "replicas", "=", "replicate", "(", "module", ",", "used_device_ids", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "module_kwargs", ",", "used_device_ids", ")", "\n", "if", "gather", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", ")", "\n", "", "else", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageHTML.__init__": [[151, 155], ["jupyter_show_image.ImageHTML.encode_image", "jupyter_show_image.adapt_img_data"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageHTML.encode_image", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.adapt_img_data"], ["def", "__init__", "(", "self", ",", "image_data", ",", "fmt", "=", "'webp'", ",", "adapt", "=", "True", ")", ":", "\n", "        ", "self", ".", "fmt", "=", "fmt", "\n", "image_data", "=", "adapt_img_data", "(", "image_data", ")", "if", "adapt", "else", "image_data", "\n", "self", ".", "data_base64", "=", "self", ".", "encode_image", "(", "image_data", ",", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageHTML.encode_image": [[156, 162], ["io.BytesIO", "PIL.Image.fromarray().save", "str", "binascii.b2a_base64", "PIL.Image.fromarray", "buffer.getvalue"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "@", "staticmethod", "\n", "def", "encode_image", "(", "image", ",", "fmt", ")", ":", "\n", "        ", "with", "BytesIO", "(", ")", "as", "buffer", ":", "\n", "            ", "PIL_Image", ".", "fromarray", "(", "image", ")", ".", "save", "(", "buffer", ",", "format", "=", "fmt", ")", "\n", "image_base64", "=", "str", "(", "b2a_base64", "(", "buffer", ".", "getvalue", "(", ")", ")", ",", "'utf8'", ")", "\n", "", "return", "image_base64", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageHTML._repr_html_": [[163, 165], ["jupyter_show_image.ImageHTML.CONTENT_TMPL.format"], "methods", ["None"], ["", "def", "_repr_html_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "CONTENT_TMPL", ".", "format", "(", "fmt", "=", "self", ".", "fmt", ",", "data", "=", "self", ".", "data_base64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageHTML.show": [[166, 168], ["IPython.display.display_html"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "display_html", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.__init__": [[180, 192], ["jupyter_show_image.ImageGridHTML.encode_row"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.encode_row"], ["def", "__init__", "(", "self", ",", "*", "rows", ",", "fmt", "=", "'webp'", ",", "adapt", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        `show(img_1, img_2)` will draw each image on a separate row\n        `show([img_1, img_2])` will draw both images in one row\n        `show([img_1, img_2], [img_3, img_4])` will draw two rows\n\n        @param fmt: image format, usually png jpeg webp\n        @param adapt: whether to try converting unusual shapes and datatypes to the needed RGB\n        \"\"\"", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "adapt", "=", "adapt", "\n", "self", ".", "rows", "=", "[", "self", ".", "encode_row", "(", "r", ")", "for", "r", "in", "rows", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.encode_row": [[193, 200], ["isinstance", "jupyter_show_image.ImageHTML", "jupyter_show_image.ImageHTML"], "methods", ["None"], ["", "def", "encode_row", "(", "self", ",", "row", ")", ":", "\n", "        ", "if", "isinstance", "(", "row", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "[", "ImageHTML", "(", "img", ",", "fmt", "=", "self", ".", "fmt", ",", "adapt", "=", "self", ".", "adapt", ")", "for", "img", "in", "row", "if", "img", "is", "not", "None", "]", "\n", "", "elif", "row", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "ImageHTML", "(", "row", ",", "fmt", "=", "self", ".", "fmt", ",", "adapt", "=", "self", ".", "adapt", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML._repr_html_": [[201, 210], ["fragments.append", "fragments.append", "img._repr_html_"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML._repr_html_"], ["", "", "def", "_repr_html_", "(", "self", ")", ":", "\n", "        ", "fragments", "=", "[", "]", "\n", "\n", "for", "row", "in", "self", ".", "rows", ":", "\n", "            ", "fragments", ".", "append", "(", "self", ".", "ROW_START", ")", "\n", "fragments", "+=", "[", "img", ".", "_repr_html_", "(", ")", "for", "img", "in", "row", "]", "\n", "fragments", ".", "append", "(", "self", ".", "ROW_END", ")", "\n", "\n", "", "return", "'\\n'", ".", "join", "(", "fragments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.show": [[211, 213], ["IPython.display.display_html"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "display_html", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.show_image": [[214, 225], ["jupyter_show_image.ImageGridHTML.show", "jupyter_show_image.ImageGridHTML"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.ImageGridHTML.show"], ["", "@", "staticmethod", "\n", "def", "show_image", "(", "*", "images", ",", "**", "options", ")", ":", "\n", "        ", "\"\"\"\n        `show(img_1, img_2)` will draw each image on a separate row\n        `show([img_1, img_2])` will draw both images in one row\n        `show([img_1, img_2], [img_3, img_4])` will draw two rows\n\n        @param fmt: image format, usually png jpeg webp\n        @param adapt: whether to try converting unusual shapes and datatypes to the needed RGB\n        \"\"\"", "\n", "ImageGridHTML", "(", "*", "images", ",", "**", "options", ")", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread": [[40, 42], ["numpy.asarray", "PIL.Image.open"], "function", ["None"], ["def", "imread", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "asarray", "(", "PIL_Image", ".", "open", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite": [[47, 55], ["pathlib.Path", "pathlib.Path.parent.mkdir", "PIL.Image.fromarray().save", "PIL.Image.fromarray", "IMWRITE_OPTS.get", "pathlib.Path.suffix.lower"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["def", "imwrite", "(", "path", ",", "data", ",", "format", "=", "None", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "PIL_Image", ".", "fromarray", "(", "data", ")", ".", "save", "(", "\n", "path", ",", "\n", "format", "=", "format", ",", "\n", "**", "IMWRITE_OPTS", ".", "get", "(", "path", ".", "suffix", ".", "lower", "(", ")", "[", "1", ":", "]", ",", "{", "}", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.get_boundary_mask": [[58, 69], ["PIL.Image.fromarray", "skimage.segmentation.mark_boundaries", "scipy.ndimage.morphology.binary_dilation().astype", "cv2.dilate", "numpy.zeros", "arr.astype", "scipy.ndimage.morphology.binary_dilation", "numpy.ones", "numpy.all", "numpy.all().astype", "numpy.ones", "numpy.all"], "function", ["None"], ["", "def", "get_boundary_mask", "(", "arr", ",", "index", "=", "1", ")", ":", "\n", "    ", "arr", "[", "arr", "!=", "index", "]", "=", "0", "\n", "arr", "[", "arr", "==", "index", "]", "=", "255", "\n", "gt", "=", "PIL_Image", ".", "fromarray", "(", "arr", ".", "astype", "(", "\"uint8\"", ")", ")", "\n", "bd", "=", "mark_boundaries", "(", "gt", ",", "arr", ")", "\n", "mask", "=", "binary_dilation", "(", "np", ".", "all", "(", "bd", "==", "[", "1", ",", "1", ",", "0", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "int", ")", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "mask", "=", "cv2", ".", "dilate", "(", "mask", ",", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "1", ")", "\n", "bd", "[", "np", ".", "all", "(", "bd", "==", "np", ".", "ones", "(", "3", ")", ",", "axis", "=", "-", "1", ")", "]", "=", "np", ".", "zeros", "(", "3", ")", "\n", "bd", "[", "mask", "==", "1", "]", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "im", "=", "(", "bd", "*", "255", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.get_heat": [[71, 89], ["heat_array.astype.astype", "matplotlib.Figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "plt.Figure.add_axes", "fig.add_axes.axis", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.fromstring().reshape", "fig.add_axes.imshow", "fig.add_axes.imshow", "jupyter_show_image.get_boundary_mask", "numpy.fromstring", "matplotlib.get_cmap", "matplotlib.get_cmap", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "numpy.all", "numpy.all"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.get_boundary_mask"], ["", "def", "get_heat", "(", "heat_array", ",", "overlay", "=", "None", ",", "vrange", "=", "None", ")", ":", "\n", "    ", "heat_array", "=", "heat_array", ".", "astype", "(", "\"float32\"", ")", "\n", "h", ",", "w", "=", "heat_array", ".", "shape", "\n", "dpi", "=", "100", "\n", "fig", "=", "plt", ".", "Figure", "(", "figsize", "=", "(", "w", "/", "dpi", ",", "h", "/", "dpi", ")", ",", "dpi", "=", "dpi", ",", "frameon", "=", "False", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "if", "vrange", "is", "None", ":", "\n", "        ", "ax", ".", "imshow", "(", "heat_array", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'RdBu_r'", ",", "16", ")", ",", "interpolation", "=", "'none'", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "imshow", "(", "heat_array", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'RdBu_r'", ",", "16", ")", ",", "interpolation", "=", "'none'", ",", "vmin", "=", "vrange", "[", "0", "]", ",", "vmax", "=", "vrange", "[", "1", "]", ")", "\n", "", "canvas", ".", "draw", "(", ")", "\n", "heat_arr", "=", "np", ".", "fromstring", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "if", "overlay", "is", "not", "None", ":", "\n", "        ", "bd", "=", "get_boundary_mask", "(", "overlay", ")", "\n", "heat_arr", "[", "~", "np", ".", "all", "(", "bd", "==", "(", "0", ",", "0", ",", "0", ")", ",", "axis", "=", "-", "1", ")", "]", "=", "bd", "[", "~", "np", ".", "all", "(", "bd", "==", "(", "0", ",", "0", ",", "0", ")", ",", "axis", "=", "-", "1", ")", "]", "\n", "", "return", "heat_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.adapt_img_data": [[93, 143], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap().reversed", "img_data.astype.shape.__len__", "matplotlib.cm.get_cmap", "img_data.astype.astype", "numpy.max", "img_data.astype.astype", "numpy.min", "numpy.max", "max", "cmap_pos", "cmap_div"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "adapt_img_data", "(", "img_data", ",", "cmap_pos", "=", "cm", ".", "get_cmap", "(", "'magma'", ")", ",", "cmap_div", "=", "cm", ".", "get_cmap", "(", "'Spectral'", ")", ".", "reversed", "(", ")", ",", "value_range", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Produce a HxWx3 uint8 image given a data array.\n    If the array is 1-channel, we use matplotlib colormap to colorize it\n    If the array is float, we may convert 0...1 to 0...255.\n    Boolean image is shown as black vs white.\n\n    @param img_data: data array to display\n    @param cmap_pos: colormap for all-positive data\n    @param cmap_div: colormap for when the array contains positive and negative data - these are drawn with different colors\n    \"\"\"", "\n", "num_dims", "=", "img_data", ".", "shape", ".", "__len__", "(", ")", "\n", "\n", "if", "num_dims", "==", "3", "or", "num_dims", "==", "4", ":", "\n", "# if img_data.shape[2] > 3:", "\n", "# \timg_data = img_data[:, :, :3]", "\n", "\n", "        ", "if", "img_data", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "if", "np", ".", "max", "(", "img_data", ")", "<", "1.1", ":", "\n", "                ", "img_data", "=", "img_data", "*", "255", "\n", "", "img_data", "=", "img_data", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "", "elif", "num_dims", "==", "2", ":", "\n", "        ", "if", "img_data", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "            ", "img_data", "=", "img_data", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "#c = 'png'", "\n", "\n", "", "else", ":", "\n", "            ", "if", "value_range", "is", "not", "None", ":", "\n", "                ", "vmin", ",", "vmax", "=", "value_range", "\n", "", "else", ":", "\n", "                ", "vmin", ",", "vmax", "=", "np", ".", "min", "(", "img_data", ")", ",", "np", ".", "max", "(", "img_data", ")", "\n", "\n", "# vmax = np.max(img_data)", "\n", "", "if", "img_data", ".", "dtype", "==", "np", ".", "uint8", "and", "vmax", "==", "1", ":", "\n", "                ", "img_data", "=", "img_data", "*", "255", "\n", "\n", "", "else", ":", "\n", "#vmin = np.min(img_data)", "\n", "\n", "                ", "if", "vmin", ">=", "0", ":", "\n", "                    ", "img_data", "=", "(", "img_data", "-", "vmin", ")", "*", "(", "1", "/", "(", "vmax", "-", "vmin", ")", ")", "\n", "img_data", "=", "cmap_pos", "(", "img_data", ",", "bytes", "=", "True", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "", "else", ":", "\n", "                    ", "vrange", "=", "max", "(", "-", "vmin", ",", "vmax", ")", "\n", "img_data", "=", "img_data", "/", "(", "2", "*", "vrange", ")", "+", "0.5", "\n", "img_data", "=", "cmap_div", "(", "img_data", ",", "bytes", "=", "True", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "", "", "", "", "return", "img_data", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list": [[14, 16], ["name_list.split"], "function", ["None"], ["def", "name_list", "(", "name_list", ")", ":", "\n", "\t", "return", "[", "name", "for", "name", "in", "name_list", ".", "split", "(", "','", ")", "if", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.main": [[17, 20], ["click.group"], "function", ["None"], ["", "@", "click", ".", "group", "(", ")", "\n", "def", "main", "(", ")", ":", "\n", "\t", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.metric": [[21, 57], ["main.command", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "__main__.name_list", "__main__.name_list", "__main__.name_list", "log.info", "evaluation.Evaluation", "evaluation.Evaluation.calculate_metric_from_saved_outputs", "range"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.calculate_metric_from_saved_outputs"], ["", "@", "main", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'metric_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'method_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'dataset_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--limit-length'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "@", "click", ".", "option", "(", "'--parallel/--no-parallel'", ",", "default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--frame-vis'", ",", "'frame_vis'", ",", "flag_value", "=", "1", ")", "\n", "@", "click", ".", "option", "(", "'--no-frame-vis'", ",", "'frame_vis'", ",", "flag_value", "=", "0", ")", "\n", "@", "click", ".", "option", "(", "'--frame-vis-only'", ",", "'frame_vis'", ",", "flag_value", "=", "'only'", ")", "\n", "@", "click", ".", "option", "(", "'--default-instancer/--own-instancer'", ",", "default", "=", "True", ")", "\n", "def", "metric", "(", "method_names", ",", "metric_names", ",", "dataset_names", ",", "limit_length", ",", "parallel", ",", "frame_vis", ",", "default_instancer", ")", ":", "\n", "\n", "\t", "method_names", "=", "name_list", "(", "method_names", ")", "\n", "metric_names", "=", "name_list", "(", "metric_names", ")", "\n", "dataset_names", "=", "name_list", "(", "dataset_names", ")", "\n", "\n", "for", "dset", "in", "dataset_names", ":", "\n", "\t\t", "for", "method", "in", "method_names", ":", "\n", "\t\t\t", "for", "metric", "in", "metric_names", ":", "\n", "\n", "\t\t\t\t", "log", ".", "info", "(", "f'Metric: {metric} | Method : {method} | Dataset : {dset}'", ")", "\n", "\n", "ev", "=", "Evaluation", "(", "\n", "method_name", "=", "method", ",", "\n", "dataset_name", "=", "dset", ",", "\n", "# metrics", "\n", "# metrics = ['PixelClassification'],", "\n", ")", "\n", "\n", "ag", "=", "ev", ".", "calculate_metric_from_saved_outputs", "(", "\n", "metric", ",", "\n", "sample", "=", "(", "dset", ",", "range", "(", "limit_length", ")", ")", "if", "limit_length", "!=", "0", "else", "None", ",", "\n", "parallel", "=", "parallel", ",", "\n", "show_plot", "=", "False", ",", "\n", "frame_vis", "=", "frame_vis", ",", "\n", "default_instancer", "=", "default_instancer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.wrap_html_table": [[89, 95], ["COMPARISON_HTML_TEMPLATE.format"], "function", ["None"], ["def", "wrap_html_table", "(", "table", ",", "title", "=", "'Comparisong'", ")", ":", "\n", "# script has { brackets which don't play well with format", "\n", "\t", "return", "COMPARISON_HTML_TEMPLATE", ".", "format", "(", "\n", "table", "=", "table", ",", "\n", "title", "=", "title", ",", "\n", "script_src", "=", "COMPARISON_HTML_SCRIPT", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.comparison": [[97, 205], ["main.command", "click.argument", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "__main__.name_list", "__main__.name_list", "__main__.name_list", "DataFrame", "print", "dict", "table.sort_values.to_latex", "__main__.wrap_html_table", "table.sort_values.to_json", "json.loads", "json.dumps", "out_f.parent.mkdir", "out_f.with_suffix().write_text", "out_f.with_suffix().write_text", "out_f.with_suffix().write_text", "json.loads", "json.loads.get", "json.loads.get", "json.loads.get", "json.loads.get", "rename_map.get.get", "columns.get", "table.sort_values.sort_values", "log.warn", "click.Path", "pathlib.Path().read_text", "columns.setdefault", "metrics.MetricRegistry.get", "ags.items", "table.sort_values.to_html", "k.replace", "out_f.with_suffix", "out_f.with_suffix", "out_f.with_suffix", "Series", "MetricRegistry.get.plot_many", "MetricRegistry.get.extracts_fields_for_table().items", "r.items", "pathlib.Path", "MetricRegistry.get.load", "list", "rename_map.get.get", "rename_map.get.get", "ags.values", "MetricRegistry.get.extracts_fields_for_table", "rename_map.get.get", "__main__.comparison.get_col"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.name_list", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__main__.wrap_html_table", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.plot_many", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.extracts_fields_for_table", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "@", "main", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'comparison_name'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'metric_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'method_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'dataset_names'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--order-by'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "@", "click", ".", "option", "(", "'--names'", ",", "type", "=", "click", ".", "Path", "(", "exists", "=", "True", ",", "file_okay", "=", "True", ",", "dir_okay", "=", "False", ")", ")", "\n", "def", "comparison", "(", "comparison_name", ",", "method_names", ",", "metric_names", ",", "dataset_names", ",", "order_by", "=", "None", ",", "names", "=", "None", ",", "plot_formats", "=", "None", ")", ":", "\n", "\t", "from", "pandas", "import", "DataFrame", ",", "Series", "\n", "\n", "method_names", "=", "name_list", "(", "method_names", ")", "\n", "metric_names", "=", "name_list", "(", "metric_names", ")", "\n", "dataset_names", "=", "name_list", "(", "dataset_names", ")", "\n", "\n", "order_by", "=", "order_by", "or", "f'{dataset_names[0]}.{metric_names[0]}.area_PRC'", "\n", "\n", "if", "names", "is", "not", "None", ":", "\n", "\t\t", "rename_map", "=", "json", ".", "loads", "(", "Path", "(", "names", ")", ".", "read_text", "(", ")", ")", "\n", "rename_methods", "=", "rename_map", ".", "get", "(", "'methods'", ",", "{", "}", ")", "\n", "rename_dsets", "=", "rename_map", ".", "get", "(", "'datasets'", ",", "{", "}", ")", "\n", "rename_metrics", "=", "rename_map", ".", "get", "(", "'metrics'", ",", "{", "}", ")", "\n", "\n", "plot_formats", "=", "rename_map", ".", "get", "(", "'plots'", ",", "{", "}", ")", "\n", "\n", "order_by", "=", "rename_metrics", ".", "get", "(", "order_by", ",", "order_by", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "rename_methods", "=", "rename_dsets", "=", "rename_metrics", "=", "plot_formats", "=", "{", "}", "\n", "\n", "", "columns", "=", "{", "}", "\n", "\n", "def", "get_col", "(", "name", ")", ":", "\n", "\t\t", "c", "=", "columns", ".", "get", "(", "name", ")", "\n", "if", "c", "is", "not", "None", ":", "\n", "\t\t\t", "return", "c", "\n", "", "else", ":", "\n", "\t\t\t", "return", "columns", ".", "setdefault", "(", "name", ",", "Series", "(", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "\n", "\n", "", "", "for", "dset", "in", "dataset_names", ":", "\n", "\t\t", "for", "metric_name", "in", "metric_names", ":", "\n", "\t\t\t", "metric", "=", "MetricRegistry", ".", "get", "(", "metric_name", ")", "\n", "\n", "ags", "=", "{", "}", "\n", "for", "method", "in", "method_names", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "ags", "[", "method", "]", "=", "metric", ".", "load", "(", "method_name", "=", "method", ",", "dataset_name", "=", "dset", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "\t\t\t\t\t", "...", "\n", "\n", "\n", "", "", "if", "\"PixBinaryClass\"", "in", "metric_name", ":", "\n", "\t\t\t\t", "metric", ".", "plot_many", "(", "\n", "list", "(", "ags", ".", "values", "(", ")", ")", ",", "\n", "f'{comparison_name}_{dset}'", ",", "\n", "method_names", "=", "rename_methods", ",", "\n", "plot_formats", "=", "plot_formats", ",", "\n", ")", "\n", "\n", "", "for", "method", ",", "ag", "in", "ags", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "for", "f", ",", "v", "in", "metric", ".", "extracts_fields_for_table", "(", "ag", ")", ".", "items", "(", ")", ":", "\n", "\n", "\t\t\t\t\t", "ds", "=", "rename_dsets", ".", "get", "(", "dset", ",", "dset", ")", "\n", "met", "=", "f'{metric_name}.{f}'", "\n", "met", "=", "rename_metrics", ".", "get", "(", "met", ",", "met", ")", "\n", "\n", "if", "met", ":", "\n", "# colname = f'{dset}.{metric_name}.{f}'", "\n", "\t\t\t\t\t\t", "colname", "=", "f'{ds}.{met}'", "\n", "mn", "=", "rename_methods", ".", "get", "(", "method", ",", "method", ")", "\n", "\n", "get_col", "(", "colname", ")", "[", "mn", "]", "=", "v", "\n", "\n", "", "", "", "", "", "table", "=", "DataFrame", "(", "data", "=", "columns", ")", "\n", "\n", "if", "order_by", "in", "table", ":", "\n", "\t\t", "table", "=", "table", ".", "sort_values", "(", "order_by", ",", "ascending", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t", "log", ".", "warn", "(", "f'Order by: no column {order_by}'", ")", "\n", "\n", "", "print", "(", "table", ")", "\n", "\n", "str_formats", "=", "dict", "(", "\n", "float_format", "=", "lambda", "f", ":", "f'{100*f:.01f}'", ",", "\n", "na_rep", "=", "'-'", ",", "\n", ")", "\n", "table_tex", "=", "table", ".", "to_latex", "(", "**", "str_formats", ")", "\n", "table_html", "=", "wrap_html_table", "(", "\n", "table", "=", "table", ".", "to_html", "(", "\n", "classes", "=", "(", "'display'", ",", "'compact'", ")", ",", "\n", "**", "str_formats", ",", "\n", ")", ",", "\n", "title", "=", "comparison_name", ",", "\n", ")", "\n", "\n", "# json dump for website", "\n", "table", "[", "'method'", "]", "=", "table", ".", "index", "\n", "table_json", "=", "table", ".", "to_json", "(", "orient", "=", "'records'", ")", "\n", "table_data", "=", "json", ".", "loads", "(", "table_json", ")", "\n", "table_data", "=", "[", "{", "k", ".", "replace", "(", "'.'", ",", "'-'", ")", ":", "v", "for", "k", ",", "v", "in", "r", ".", "items", "(", ")", "}", "for", "r", "in", "table_data", "]", "\n", "table_json", "=", "json", ".", "dumps", "(", "table_data", ")", "\n", "\n", "out_f", "=", "DIR_OUTPUTS", "/", "'tables'", "/", "comparison_name", "\n", "out_f", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "out_f", ".", "with_suffix", "(", "'.html'", ")", ".", "write_text", "(", "table_html", ")", "\n", "out_f", ".", "with_suffix", "(", "'.tex'", ")", ".", "write_text", "(", "table_tex", ")", "\n", "out_f", ".", "with_suffix", "(", "'.json'", ")", ".", "write_text", "(", "table_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.__init__.init_log": [[5, 24], ["logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "handlers[].setLevel", "logging.Formatter", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler", "handler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "init_log", "(", ")", ":", "\n", "\t", "log_root", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "log_root", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# Path('./logs').mkdir(exist_ok=True)", "\n", "\n", "handlers", "=", "[", "\n", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ",", "\n", "# logging.handlers.RotatingFileHandler('logs/watchdog.log', maxBytes=1024*1024, backupCount=7),", "\n", "]", "\n", "\n", "handlers", "[", "0", "]", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# handlers[1].setLevel(logging.INFO)", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'{asctime} | {name} {levelname} | {message}'", ",", "style", "=", "'{'", ")", "\n", "\n", "for", "handler", "in", "handlers", ":", "\n", "\t\t", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.__init__": [[39, 45], ["concurrent.futures.ThreadPoolExecutor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "method_name", ",", "dataset_name", ",", "threaded_saver", "=", "True", ",", "num_workers", "=", "8", ")", ":", "\n", "\t\t", "self", ".", "method_name", "=", "method_name", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "\n", "if", "threaded_saver", ":", "\n", "\t\t\t", "self", ".", "threads", "=", "ThreadPoolExecutor", "(", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_dataset": [[46, 48], ["datasets.DatasetRegistry.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "", "def", "get_dataset", "(", "self", ")", ":", "\n", "\t\t", "return", "DatasetRegistry", ".", "get", "(", "self", ".", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_frames": [[49, 51], ["evaluation.Evaluation.get_dataset().iter", "evaluation.Evaluation.get_dataset"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.iter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_dataset"], ["", "def", "get_frames", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "get_dataset", "(", ")", ".", "iter", "(", "'image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.__len__": [[52, 54], ["evaluation.Evaluation.get_dataset().__len__", "evaluation.Evaluation.get_dataset"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_dataset"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "get_dataset", "(", ")", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.write_task": [[55, 62], ["channel.write", "log.exception"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["", "@", "staticmethod", "\n", "def", "write_task", "(", "channel", ",", "value", ",", "extra", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "channel", ".", "write", "(", "value", ",", "**", "extra", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "log", ".", "exception", "(", "'In writing result'", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.save_output": [[64, 78], ["anomaly_p.astype", "functools.partial", "dict", "evaluation.Evaluation.threads.submit", "functools.partial."], "methods", ["None"], ["", "", "def", "save_output", "(", "self", ",", "frame", ",", "anomaly_p", ")", ":", "\n", "\t\t", "value", "=", "anomaly_p", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "write_func", "=", "partial", "(", "\n", "self", ".", "write_task", ",", "\n", "self", ".", "channels", "[", "'anomaly_p'", "]", ",", "\n", "value", ",", "\n", "dict", "(", "method_name", "=", "self", ".", "method_name", ",", "**", "frame", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "threads", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "threads", ".", "submit", "(", "write_func", ")", "\n", "", "else", ":", "\n", "\t\t\t", "write_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.run_metric_single": [[82, 132], ["metrics.MetricRegistry.get", "tqdm.tqdm.tqdm", "metrics.MetricRegistry.get.aggregate", "datasets.DatasetRegistry.get", "frame_indices.__len__", "evaluation.Evaluation.get_dataset", "evaluation.Evaluation.__len__", "evaluation.Evaluation.channels[].format", "metrics.MetricRegistry.get.process_frame", "fr_results.append", "print", "exit", "evaluation.Evaluation.channels[].read", "metrics.MetricRegistry.get.get_thresh_p_from_curve"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.aggregate", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.process_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.get_thresh_p_from_curve"], ["", "", "def", "run_metric_single", "(", "self", ",", "metric_name", ",", "sample", "=", "None", ",", "frame_vis", "=", "False", ",", "default_instancer", "=", "True", ")", ":", "\n", "# TODO sample is part of evaluation", "\n", "\n", "\t\t", "metric", "=", "MetricRegistry", ".", "get", "(", "metric_name", ")", "\n", "try", ":", "\n", "\t\t\t", "if", "\"Seg\"", "in", "metric_name", ":", "\n", "\t\t\t\t", "metric", ".", "cfg", ".", "default_instancer", "=", "default_instancer", "\n", "if", "metric", ".", "cfg", ".", "thresh_p", "is", "None", "and", "default_instancer", ":", "\n", "\t\t\t\t\t", "metric", ".", "get_thresh_p_from_curve", "(", "self", ".", "method_name", ",", "self", ".", "dataset_name", ")", "\n", "", "", "", "except", "AttributeError", ":", "\n", "\t\t\t", "print", "(", "\"Perform 'PixBinaryClass' first\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "fr_results", "=", "[", "]", "\n", "\n", "if", "sample", "is", "not", "None", ":", "\n", "\t\t\t", "dset_name", ",", "frame_indices", "=", "sample", "\n", "\n", "ds", "=", "DatasetRegistry", ".", "get", "(", "dset_name", ")", "\n", "fr_iterable", "=", "(", "ds", "[", "i", "]", "for", "i", "in", "frame_indices", ")", "\n", "fr_iterable_len", "=", "frame_indices", ".", "__len__", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "fr_iterable", "=", "self", ".", "get_dataset", "(", ")", "\n", "fr_iterable_len", "=", "fr_iterable", ".", "__len__", "(", ")", "\n", "\n", "", "for", "fr", "in", "tqdm", "(", "fr_iterable", ",", "total", "=", "fr_iterable_len", ")", ":", "\n", "\t\t\t", "frame", "=", "{", "\"method_name\"", ":", "self", ".", "method_name", ",", "\"dset_name\"", ":", "fr", ".", "dset_name", ",", "\"fid\"", ":", "fr", ".", "fid", "}", "\n", "fr", "[", "\"mask_path\"", "]", "=", "self", ".", "channels", "[", "'anomaly_mask_path'", "]", ".", "format", "(", "**", "frame", ")", "\n", "\n", "if", "metric", ".", "cfg", ".", "default_instancer", ":", "\n", "\t\t\t\t", "anomaly_p", "=", "self", ".", "channels", "[", "'anomaly_p'", "]", ".", "read", "(", "\n", "method_name", "=", "self", ".", "method_name", ",", "\n", "dset_name", "=", "fr", ".", "dset_name", ",", "\n", "fid", "=", "fr", ".", "fid", ",", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "anomaly_p", "=", "None", "\n", "\n", "", "fr_result", "=", "metric", ".", "process_frame", "(", "\n", "anomaly_p", "=", "anomaly_p", ",", "\n", "method_name", "=", "self", ".", "method_name", ",", "\n", "visualize", "=", "frame_vis", ",", "\n", "**", "fr", ",", "\n", ")", "\n", "fr_results", ".", "append", "(", "fr_result", ")", "\n", "\n", "", "return", "metric", ".", "aggregate", "(", "\n", "fr_results", ",", "\n", "method_name", "=", "self", ".", "method_name", ",", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.metric_worker": [[134, 187], ["datasets.DatasetRegistry.get", "metrics.MetricRegistry.get", "cls.channels[].format", "metrics.MetricRegistry.get.init", "datasets.DatasetRegistry.get.get_frame", "cls.channels[].read", "metrics.MetricRegistry.get.process_frame", "metrics.MetricRegistry.get.vis_frame", "log.exception", "cv.resize", "cv.resize.astype", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.init", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.process_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.vis_frame"], ["", "@", "classmethod", "\n", "def", "metric_worker", "(", "cls", ",", "method_name", ",", "metric_name", ",", "frame_vis", ",", "default_instancer", ",", "dataset_name_and_frame_idx", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "dataset_name", ",", "frame_idx", "=", "dataset_name_and_frame_idx", "\n", "\n", "dset", "=", "DatasetRegistry", ".", "get", "(", "dataset_name", ")", "\n", "metric", "=", "MetricRegistry", ".", "get", "(", "metric_name", ")", "\n", "\n", "frame_vis_only", "=", "frame_vis", "==", "'only'", "\n", "\n", "if", "default_instancer", ":", "\n", "\t\t\t\t", "metric", ".", "init", "(", "method_name", ",", "dataset_name", ")", "\n", "\n", "", "if", "not", "frame_vis_only", ":", "\n", "\t\t\t\t", "fr", "=", "dset", "[", "frame_idx", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "fr", "=", "dset", ".", "get_frame", "(", "frame_idx", ",", "'image'", ")", "\n", "\n", "", "frame", "=", "{", "\"method_name\"", ":", "method_name", ",", "\"dset_name\"", ":", "fr", ".", "dset_name", ",", "\"fid\"", ":", "fr", ".", "fid", "}", "\n", "fr", "[", "\"mask_path\"", "]", "=", "cls", ".", "channels", "[", "'anomaly_mask_path'", "]", ".", "format", "(", "**", "frame", ")", "\n", "\n", "if", "default_instancer", ":", "\n", "\t\t\t\t", "heatmap", "=", "cls", ".", "channels", "[", "'anomaly_p'", "]", ".", "read", "(", "\n", "method_name", "=", "method_name", ",", "\n", "dset_name", "=", "fr", ".", "dset_name", ",", "\n", "fid", "=", "fr", ".", "fid", ",", "\n", ")", "\n", "if", "heatmap", ".", "shape", "[", "1", "]", "<", "fr", ".", "image", ".", "shape", "[", "1", "]", ":", "\n", "\t\t\t\t\t", "heatmap", "=", "cv", ".", "resize", "(", "heatmap", ".", "astype", "(", "np", ".", "float32", ")", ",", "fr", ".", "image", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ",", "\n", "interpolation", "=", "cv", ".", "INTER_LINEAR", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "heatmap", "=", "None", "\n", "\n", "", "if", "not", "frame_vis_only", ":", "\n", "\t\t\t\t", "result", "=", "metric", ".", "process_frame", "(", "\n", "anomaly_p", "=", "heatmap", ",", "\n", "method_name", "=", "method_name", ",", "\n", "visualize", "=", "frame_vis", ",", "\n", "**", "fr", ",", "\n", ")", "\n", "return", "result", "\n", "", "else", ":", "\n", "\t\t\t\t", "h", ",", "w", ",", "_", "=", "fr", ".", "image", ".", "shape", "\n", "metric", ".", "vis_frame", "(", "\n", "anomaly_p", "=", "heatmap", ",", "\n", "method_name", "=", "method_name", ",", "\n", "mask_roi", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "bool", ")", ",", "\n", "**", "fr", ",", "\n", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "log", ".", "exception", "(", "f'Metric worker {e}'", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.run_metric_parallel": [[189, 228], ["metrics.MetricRegistry.get", "metrics.MetricRegistry.get.aggregate", "range", "multiprocessing.Pool", "pool.imap_unordered", "list", "print", "exit", "evaluation.Evaluation.get_dataset().__len__", "functools.partial", "tqdm.tqdm.tqdm", "metrics.MetricRegistry.get.get_thresh_p_from_curve", "evaluation.Evaluation.get_dataset", "tasks.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.aggregate", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.get_thresh_p_from_curve", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.get_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "", "def", "run_metric_parallel", "(", "self", ",", "metric_name", ",", "sample", "=", "None", ",", "frame_vis", "=", "False", ",", "default_instancer", "=", "True", ")", ":", "\n", "\n", "\t\t", "metric", "=", "MetricRegistry", ".", "get", "(", "metric_name", ")", "\n", "try", ":", "\n", "\t\t\t", "if", "\"Seg\"", "in", "metric_name", ":", "\n", "\t\t\t\t", "metric", ".", "cfg", ".", "default_instancer", "=", "default_instancer", "\n", "if", "metric", ".", "cfg", ".", "thresh_p", "is", "None", "and", "default_instancer", ":", "\n", "\t\t\t\t\t", "metric", ".", "get_thresh_p_from_curve", "(", "self", ".", "method_name", ",", "self", ".", "dataset_name", ")", "\n", "", "", "", "except", "AttributeError", ":", "\n", "\t\t\t", "print", "(", "\"Perform 'PixBinaryClass' first\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "sample", "is", "not", "None", ":", "\n", "\t\t\t", "dset_name", ",", "frame_indices", "=", "sample", "\n", "", "else", ":", "\n", "\t\t\t", "dset_name", "=", "self", ".", "dataset_name", "\n", "frame_indices", "=", "range", "(", "self", ".", "get_dataset", "(", ")", ".", "__len__", "(", ")", ")", "\n", "\n", "", "tasks", "=", "[", "\n", "(", "dset_name", ",", "idx", ")", "\n", "for", "idx", "in", "frame_indices", "\n", "]", "\n", "\n", "with", "multiprocessing", ".", "Pool", "(", ")", "as", "pool", ":", "\n", "\t\t\t", "it", "=", "pool", ".", "imap_unordered", "(", "\n", "partial", "(", "self", ".", "metric_worker", ",", "self", ".", "method_name", ",", "metric_name", ",", "frame_vis", ",", "default_instancer", ")", ",", "\n", "tasks", ",", "\n", "chunksize", "=", "4", ",", "\n", ")", "\n", "\n", "processed_frames", "=", "list", "(", "tqdm", "(", "it", ",", "total", "=", "tasks", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "ag", "=", "metric", ".", "aggregate", "(", "\n", "processed_frames", ",", "\n", "method_name", "=", "self", ".", "method_name", ",", "\n", "dataset_name", "=", "dset_name", ",", "\n", ")", "\n", "\n", "return", "ag", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.calculate_metric_from_saved_outputs": [[230, 251], ["metrics.MetricRegistry.get", "metrics.MetricRegistry.get.save", "metrics.MetricRegistry.get.plot_single", "evaluation.Evaluation.run_metric_parallel", "evaluation.Evaluation.run_metric_single"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.plot_single", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.run_metric_parallel", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.run_metric_single"], ["", "def", "calculate_metric_from_saved_outputs", "(", "self", ",", "metric_name", ",", "sample", "=", "None", ",", "parallel", "=", "True", ",", "show_plot", "=", "False", ",", "\n", "frame_vis", "=", "False", ",", "default_instancer", "=", "True", ")", ":", "\n", "\n", "\t\t", "metric", "=", "MetricRegistry", ".", "get", "(", "metric_name", ")", "\n", "\n", "if", "parallel", ":", "\n", "\t\t\t", "ag", "=", "self", ".", "run_metric_parallel", "(", "metric_name", ",", "sample", ",", "frame_vis", ",", "default_instancer", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ag", "=", "self", ".", "run_metric_single", "(", "metric_name", ",", "sample", ",", "frame_vis", ",", "default_instancer", ")", "\n", "\n", "", "dset_name", "=", "sample", "[", "0", "]", "if", "sample", "is", "not", "None", "else", "self", ".", "dataset_name", "\n", "\n", "metric", ".", "save", "(", "\n", "ag", ",", "\n", "method_name", "=", "self", ".", "method_name", ",", "\n", "dataset_name", "=", "dset_name", ",", "\n", ")", "\n", "\n", "metric", ".", "plot_single", "(", "ag", ",", "close", "=", "not", "show_plot", ")", "\n", "\n", "return", "ag", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.evaluation.Evaluation.wait_to_finish_saving": [[253, 257], ["evaluation.Evaluation.threads.shutdown"], "methods", ["None"], ["", "def", "wait_to_finish_saving", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "threads", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "threads", ".", "shutdown", "(", "True", ")", "\n", "self", ".", "threads", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.__init__": [[187, 190], ["dataset_io.DatasetBase.__init__", "tracks_extra.FishyscapesLAFSubset.discover"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "discover", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.fids": [[191, 194], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fids", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.b_load_labels": [[195, 198], ["tracks_extra.FishyscapesLAFSubset.cfg.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "@", "property", "\n", "def", "b_load_labels", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "cfg", ".", "get", "(", "'dir_fishy'", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.discover": [[199, 203], ["dataset_registry.DatasetRegistry.get", "dataset_registry.DatasetRegistry.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "laf_dsets", "=", "{", "\n", "'train'", ":", "DatasetRegistry", ".", "get", "(", "'LostAndFound-train'", ")", ",", "\n", "'test'", ":", "DatasetRegistry", ".", "get", "(", "'LostAndFound-test'", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.get_frame": [[205, 231], ["isinstance", "base_ds.get_frame", "set().difference", "tracks_extra.FishyscapesLAFSubset.channels_extra[].read", "KeyError", "set"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read"], ["", "def", "get_frame", "(", "self", ",", "idx_or_fid", ",", "*", "channels", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "idx_or_fid", ",", "str", ")", ":", "# by fid", "\n", "\t\t\t", "if", "idx_or_fid", "not", "in", "self", ".", "fids", ":", "\n", "\t\t\t\t", "raise", "KeyError", "(", "f'Id {idx_or_fid} is not in this dataset {self}'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fid", "=", "idx_or_fid", "\n", "", "", "else", ":", "\n", "\t\t\t", "fid", "=", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "[", "idx_or_fid", "]", "\n", "\n", "", "if", "fid", "in", "self", ".", "laf_dsets", "[", "'train'", "]", ".", "frames_by_fid", ":", "\n", "\t\t\t", "base_ds", "=", "self", ".", "laf_dsets", "[", "'train'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "base_ds", "=", "self", ".", "laf_dsets", "[", "'test'", "]", "\n", "\n", "", "key_labels", "=", "'semantic_class_gt'", "\n", "if", "self", ".", "b_load_labels", ":", "\n", "\t\t\t", "channels", "=", "set", "(", "channels", ")", ".", "difference", "(", "{", "key_labels", ",", "'semantic_class_gt'", "}", ")", "\n", "\n", "", "fr", "=", "base_ds", ".", "get_frame", "(", "fid", ",", "*", "channels", ")", "\n", "\n", "if", "self", ".", "b_load_labels", ":", "\n", "\t\t\t", "label", "=", "self", ".", "channels_extra", "[", "key_labels", "]", ".", "read", "(", "dset", "=", "self", ",", "**", "fr", ")", "\n", "fr", "[", "key_labels", "]", "=", "label", "\n", "fr", "[", "'label_pixel_gt'", "]", "=", "label", "\n", "\n", "", "return", "fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.FishyscapesLAFSubset.__len__": [[232, 234], ["tracks_extra.FishyscapesLAFSubset.fids.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "fids", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.LostAndFoundAnomaly.__init__": [[256, 259], ["dataset_io.DatasetBase.__init__", "tracks_extra.LostAndFoundAnomaly.discover"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "discover", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.LostAndFoundAnomaly.discover": [[260, 263], ["dataset_registry.DatasetRegistry.get", "dataset_io.imread().astype", "dataset_io.imread"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "base_ds", "=", "DatasetRegistry", ".", "get", "(", "self", ".", "cfg", ".", "base_ds", ")", "\n", "self", ".", "roi_mask", "=", "imread", "(", "self", ".", "cfg", ".", "roi_img", ")", ".", "astype", "(", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.LostAndFoundAnomaly.get_frame": [[264, 276], ["tracks_extra.LostAndFoundAnomaly.base_ds.get_frame", "tracks_extra.LostAndFoundAnomaly.get", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "get_frame", "(", "self", ",", "idx_or_fid", ",", "*", "channels", ")", ":", "\n", "\t\t", "fr", "=", "self", ".", "base_ds", ".", "get_frame", "(", "idx_or_fid", ",", "*", "channels", ")", "\n", "\n", "pix_gt", "=", "fr", ".", "get", "(", "'label_pixel_gt'", ")", "\n", "if", "pix_gt", "is", "not", "None", ":", "\n", "\t\t\t", "h", ",", "w", "=", "pix_gt", ".", "shape", "[", ":", "2", "]", "\n", "label", "=", "np", ".", "full", "(", "(", "h", ",", "w", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "label", "[", "self", ".", "roi_mask", "]", "=", "0", "\n", "label", "[", "pix_gt", "==", "1", "]", "=", "1", "\n", "fr", "[", "'label_pixel_gt'", "]", "=", "label", "\n", "\n", "", "return", "fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.LostAndFoundAnomaly.__len__": [[277, 279], ["tracks_extra.LostAndFoundAnomaly.base_ds.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "base_ds", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.ErasingSubset.__init__": [[492, 495], ["dataset_io.DatasetBase.__init__", "tracks_extra.ErasingSubset.discover"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "discover", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.ErasingSubset.fids": [[496, 499], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fids", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.ErasingSubset.discover": [[500, 502], ["dataset_registry.DatasetRegistry.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "base_ds", "=", "DatasetRegistry", ".", "get", "(", "'ObstacleTrack-all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.ErasingSubset.get_frame": [[503, 514], ["isinstance", "tracks_extra.ErasingSubset.base_ds.get_frame", "KeyError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame"], ["", "def", "get_frame", "(", "self", ",", "idx_or_fid", ",", "*", "channels", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "idx_or_fid", ",", "str", ")", ":", "# by fid", "\n", "\t\t\t", "if", "idx_or_fid", "not", "in", "self", ".", "fids", ":", "\n", "\t\t\t\t", "raise", "KeyError", "(", "f'Id {idx_or_fid} is not in this dataset {self}'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fid", "=", "idx_or_fid", "\n", "", "", "else", ":", "\n", "\t\t\t", "fid", "=", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "[", "idx_or_fid", "]", "\n", "\n", "", "fr", "=", "self", ".", "base_ds", ".", "get_frame", "(", "fid", ",", "*", "channels", ")", "\n", "return", "fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.ErasingSubset.__len__": [[515, 517], ["tracks_extra.ErasingSubset.fids.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "fids", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.RoadAnomalyByClass.__init__": [[812, 816], ["tracks.DatasetRA.__init__", "tracks_extra.RoadAnomalyByClass.discover", "super().check_size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.check_size"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "discover", "(", ")", "\n", "super", "(", ")", ".", "check_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.RoadAnomalyByClass.fids": [[817, 820], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fids", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.RoadAnomalyByClass.discover": [[821, 823], ["dataset_registry.DatasetRegistry.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "base_ds", "=", "DatasetRegistry", ".", "get", "(", "'AnomalyTrack-all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.RoadAnomalyByClass.get_frame": [[824, 835], ["isinstance", "tracks_extra.RoadAnomalyByClass.base_ds.get_frame", "KeyError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame"], ["", "def", "get_frame", "(", "self", ",", "idx_or_fid", ",", "*", "channels", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "idx_or_fid", ",", "str", ")", ":", "# by fid", "\n", "\t\t\t", "if", "idx_or_fid", "not", "in", "self", ".", "fids", ":", "\n", "\t\t\t\t", "raise", "KeyError", "(", "'Id {idx_or_fid} is not in this dataset {self}'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fid", "=", "idx_or_fid", "\n", "", "", "else", ":", "\n", "\t\t\t", "fid", "=", "self", ".", "FRAME_IDS", "[", "self", ".", "cfg", ".", "split", "]", "[", "idx_or_fid", "]", "\n", "\n", "", "fr", "=", "self", ".", "base_ds", ".", "get_frame", "(", "fid", ",", "*", "channels", ")", "\n", "return", "fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.RoadAnomalyByClass.__len__": [[836, 838], ["tracks_extra.RoadAnomalyByClass.fids.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "fids", ".", "__len__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks_extra.read_json": [[13, 25], ["json.loads", "pathlib.Path().read_text", "print", "pathlib.Path"], "function", ["None"], ["def", "read_json", "(", "path", ",", "key", "=", "None", ",", "allow_failure", "=", "False", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "file_content", "=", "json", ".", "loads", "(", "Path", "(", "path", ")", ".", "read_text", "(", ")", ")", "\n", "return", "file_content", "[", "key", "]", "if", "key", "is", "not", "None", "else", "file_content", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "print", "(", "f'Failed to load JSON {path}: '", ",", "e", ")", "\n", "\n", "if", "allow_failure", ":", "\n", "\t\t\t", "return", "[", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoader.read": [[14, 16], ["NotImplementedError"], "methods", ["None"], ["\t", "def", "read", "(", "self", ",", "**", "frame", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoader.write": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "value", ",", "**", "frame", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.__init__": [[25, 28], ["isinstance", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_path_tmpl", ")", ":", "\n", "# convert Path to str so that we can .format it", "\n", "\t\t", "self", ".", "file_path_tmpl", "=", "str", "(", "file_path_tmpl", ")", "if", "isinstance", "(", "file_path_tmpl", ",", "Path", ")", "else", "file_path_tmpl", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.resolve_template": [[29, 39], ["isinstance", "template.format", "template"], "methods", ["None"], ["", "def", "resolve_template", "(", "self", ",", "**", "frame", ")", ":", "\n", "\t\t", "template", "=", "self", ".", "file_path_tmpl", "\n", "if", "isinstance", "(", "template", ",", "str", ")", ":", "\n", "# string template", "\n", "\t\t\t", "return", "template", ".", "format", "(", "\n", "**", "frame", ",", "\n", ")", "\n", "", "else", ":", "\n", "# function template", "\n", "\t\t\t", "return", "template", "(", "channel", "=", "self", ",", "**", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read": [[40, 43], ["pathlib.Path", "dataset_io.ChannelLoaderFileCollection.read_file", "dataset_io.ChannelLoaderFileCollection.resolve_template"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.read_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.resolve_template"], ["", "", "def", "read", "(", "self", ",", "**", "frame", ")", ":", "\n", "\t\t", "path", "=", "Path", "(", "self", ".", "resolve_template", "(", "**", "frame", ")", ")", "\n", "return", "self", ".", "read_file", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write": [[44, 48], ["pathlib.Path", "pathlib.Path.parent.mkdir", "dataset_io.ChannelLoaderFileCollection.write_file", "dataset_io.ChannelLoaderFileCollection.resolve_template"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.write_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.resolve_template"], ["", "def", "write", "(", "self", ",", "value", ",", "**", "frame", ")", ":", "\n", "\t\t", "path", "=", "Path", "(", "self", ".", "resolve_template", "(", "**", "frame", ")", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "self", ".", "write_file", "(", "path", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read_file": [[49, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "'read_file for {c}'", ".", "format", "(", "c", "=", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write_file": [[52, 54], ["NotImplementedError"], "methods", ["None"], ["", "def", "write_file", "(", "self", ",", "path", ",", "data", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "'write_file for {c}'", ".", "format", "(", "c", "=", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "'{cls}({tp})'", ".", "format", "(", "cls", "=", "self", ".", "__class__", ".", "__name__", ",", "tp", "=", "self", ".", "file_path_tmpl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderImage.__init__": [[68, 71], ["dataset_io.ChannelLoaderFileCollection.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\t", "def", "__init__", "(", "self", ",", "file_path_tmpl", "=", "None", ",", "save_opts", "=", "{", "}", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "file_path_tmpl", ")", "\n", "self", ".", "save_opts", "=", "save_opts", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderImage.read_file": [[72, 74], ["jupyter_show_image.imread"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread"], ["", "def", "read_file", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "return", "imread", "(", "path", ",", "**", "self", ".", "save_opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderImage.write_file": [[75, 77], ["jupyter_show_image.imwrite"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "def", "write_file", "(", "self", ",", "path", ",", "data", ")", ":", "\n", "\t\t", "imwrite", "(", "path", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.__init__": [[80, 84], ["dataset_io.ChannelLoaderFileCollection.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\t", "def", "__init__", "(", "self", ",", "file_path_tmpl", "=", "None", ",", "var_name", "=", "'value'", ",", "compression", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "file_path_tmpl", ")", "\n", "self", ".", "var_name", "=", "var_name", "\n", "self", ".", "compression", "=", "compression", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.read_hdf5_variable": [[85, 91], ["variable.shape.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "@", "staticmethod", "\n", "def", "read_hdf5_variable", "(", "variable", ")", ":", "\n", "\t\t", "if", "variable", ".", "shape", ".", "__len__", "(", ")", ">", "0", ":", "\n", "\t\t\t", "return", "variable", "[", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.read_file": [[92, 100], ["h5py.File", "dataset_io.ChannelLoaderHDF5.read_hdf5_variable", "KeyError", "hdf5_file_handle.keys"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.read_hdf5_variable"], ["", "", "def", "read_file", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "var_name", "=", "self", ".", "var_name", "\n", "\n", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hdf5_file_handle", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "return", "self", ".", "read_hdf5_variable", "(", "hdf5_file_handle", "[", "var_name", "]", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "\t\t\t\t", "raise", "KeyError", "(", "f'Failed to read {var_name} from handle with keys {hdf5_file_handle.keys()}: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderHDF5.write_file": [[101, 112], ["pathlib.Path", "pathlib.Path.parent.mkdir", "h5py.File", "hdf5_file_handle.create_dataset"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "", "", "def", "write_file", "(", "self", ",", "path", ",", "data", ")", ":", "\n", "\t\t", "var_name", "=", "self", ".", "var_name", "\n", "\n", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "path", ",", "'w'", ")", "as", "hdf5_file_handle", ":", "\n", "\t\t\t", "if", "var_name", "in", "hdf5_file_handle", ":", "\n", "\t\t\t\t", "hdf5_file_handle", "[", "var_name", "]", "[", ":", "]", "=", "data", "\n", "", "else", ":", "\n", "\t\t\t\t", "hdf5_file_handle", ".", "create_dataset", "(", "var_name", ",", "data", "=", "data", ",", "compression", "=", "self", ".", "compression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.__init__": [[160, 164], ["easydict.EasyDict"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "self", ".", "cfg", "=", "EasyDict", "(", "cfg", ")", "\n", "self", ".", "frames", "=", "[", "]", "\n", "self", ".", "frames_by_fid", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.name": [[165, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "cfg", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.set_frames": [[169, 173], ["list", "dataset_io.DatasetBase.frames.sort", "operator.itemgetter"], "methods", ["None"], ["", "def", "set_frames", "(", "self", ",", "frame_list", ")", ":", "\n", "\t\t", "self", ".", "frames", "=", "list", "(", "frame_list", ")", "\n", "self", ".", "frames", ".", "sort", "(", "key", "=", "itemgetter", "(", "'fid'", ")", ")", "\n", "self", ".", "frames_by_fid", "=", "{", "fr", "[", "'fid'", "]", ":", "fr", "for", "fr", "in", "self", ".", "frames", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.get_frame": [[174, 188], ["isinstance", "easydict.EasyDict", "dataset_io.DatasetBase.channels.keys", "dataset_io.DatasetBase.channels[].read", "dataset_io.DatasetBase.cfg.get"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "get_frame", "(", "self", ",", "idx_or_fid", ",", "*", "channels", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "idx_or_fid", ",", "int", ")", ":", "\n", "\t\t\t", "fr", "=", "self", ".", "frames", "[", "idx_or_fid", "]", "\n", "", "else", ":", "\n", "\t\t\t", "fr", "=", "self", ".", "frames_by_fid", "[", "idx_or_fid", "]", "\n", "\n", "", "out_fr", "=", "EasyDict", "(", "fr", ",", "dset_name", "=", "self", ".", "cfg", ".", "get", "(", "'name_for_persistence'", ",", "self", ".", "cfg", ".", "name", ")", ")", "\n", "\n", "channels", "=", "channels", "or", "self", ".", "channels", ".", "keys", "(", ")", "\n", "\n", "for", "ch_name", "in", "channels", ":", "\n", "\t\t\t", "out_fr", "[", "ch_name", "]", "=", "self", ".", "channels", "[", "ch_name", "]", ".", "read", "(", "dset", "=", "self", ",", "**", "fr", ")", "\n", "\n", "", "return", "out_fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.check_size": [[189, 195], ["dataset_io.DatasetBase.cfg.get", "dataset_io.DatasetBase.__len__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "check_size", "(", "self", ")", ":", "\n", "\t\t", "desired_len", "=", "self", ".", "cfg", ".", "get", "(", "'expected_length'", ")", "\n", "actual_len", "=", "self", ".", "__len__", "(", ")", "\n", "\n", "if", "desired_len", "is", "not", "None", "and", "actual_len", "!=", "desired_len", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'The dataset should have {desired_len} frames but found {actual_len}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.iter": [[196, 204], ["range", "dataset_io.DatasetBase.__len__", "dataset_io.DatasetBase.get_frame"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame"], ["", "", "def", "iter", "(", "self", ",", "*", "channels", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tIterate over frames but only load a subset of channels. For example:\n\t\t\tfor fr in dset.iter('image'):\n\t\t\t\tprocess(fr.image)\n\t\t\"\"\"", "\n", "for", "idx", "in", "range", "(", "self", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t", "yield", "self", ".", "get_frame", "(", "idx", ",", "*", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.__getitem__": [[205, 207], ["dataset_io.DatasetBase.get_frame"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame"], ["", "", "def", "__getitem__", "(", "self", ",", "idx_or_fid", ")", ":", "\n", "\t\t", "return", "self", ".", "get_frame", "(", "idx_or_fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.__len__": [[208, 210], ["dataset_io.DatasetBase.frames.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "frames", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.__iter__": [[211, 213], ["dataset_io.DatasetBase.iter"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.DatasetBase.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_group": [[114, 130], ["hierarchy.items", "isinstance", "dataset_io.hdf5_write_hierarchy_to_group", "isinstance", "isinstance", "group.create_group", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_group"], ["", "", "", "", "def", "hdf5_write_hierarchy_to_group", "(", "group", ",", "hierarchy", ")", ":", "\n", "\t", "for", "name", ",", "value", "in", "hierarchy", ".", "items", "(", ")", ":", "\n", "# sub-dict", "\n", "\t\t", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "\t\t\t", "hdf5_write_hierarchy_to_group", "(", "\n", "group", "=", "group", ".", "create_group", "(", "name", ")", ",", "\n", "hierarchy", "=", "value", "\n", ")", "\n", "# label or single value", "\n", "", "elif", "isinstance", "(", "value", ",", "(", "str", ",", "bytes", ",", "float", ",", "int", ")", ")", ":", "\n", "\t\t\t", "group", ".", "attrs", "[", "name", "]", "=", "value", "\n", "# ndarray", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "\t\t\t", "group", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "f'Failed to write type {type(value)} to hdf: {name}={value}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_file": [[131, 138], ["pathlib.Path", "pathlib.Path.parent.mkdir", "h5py.File", "dataset_io.hdf5_write_hierarchy_to_group"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_group"], ["", "", "", "def", "hdf5_write_hierarchy_to_file", "(", "path", ",", "hierarchy", ",", "create_parent_dir", "=", "True", ")", ":", "\n", "\t", "if", "create_parent_dir", ":", "\n", "\t\t", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "hdf5_write_hierarchy_to_group", "(", "f", ",", "hierarchy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_group": [[139, 148], ["easydict.EasyDict", "isinstance", "dataset_io.hdf5_read_hierarchy_from_group", "group.items"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_group"], ["", "", "def", "hdf5_read_hierarchy_from_group", "(", "group", ")", ":", "\n", "\t", "return", "EasyDict", "(", "\n", "# label or single value", "\n", "**", "group", ".", "attrs", ",", "\n", "# numeric arrays", "\n", "**", "{", "\n", "name", ":", "hdf5_read_hierarchy_from_group", "(", "value", ")", "\n", "if", "isinstance", "(", "value", ",", "h5py", ".", "Group", ")", "else", "value", "[", "(", ")", "]", "\n", "for", "name", ",", "value", "in", "group", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_file": [[151, 154], ["h5py.File", "dataset_io.hdf5_read_hierarchy_from_group"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_group"], ["", "def", "hdf5_read_hierarchy_from_file", "(", "path", ")", ":", "\n", "\t", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "return", "hdf5_read_hierarchy_from_group", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.__init__": [[9, 12], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "INITIALIZERS", "=", "{", "}", "\n", "self", ".", "MODULES", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.register": [[13, 21], ["functools.partial", "log.warn"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "name", ":", "str", ",", "init_func", ":", "Callable", ",", "*", "opts_s", ",", "**", "opts_kw", ")", ":", "\n", "\t\t", "if", "opts_s", "or", "opts_kw", ":", "\n", "\t\t\t", "init_func", "=", "partial", "(", "init_func", ",", "*", "opts_s", ",", "**", "opts_kw", ")", "\n", "\n", "", "if", "name", "in", "self", ".", "INITIALIZERS", "or", "name", "in", "self", ".", "MODULES", ":", "\n", "\t\t\t", "log", ".", "warn", "(", "f'Module {name} is already registered'", ")", "\n", "\n", "", "self", ".", "INITIALIZERS", "[", "name", "]", "=", "init_func", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.register_concrete": [[22, 30], ["log.warn"], "methods", ["None"], ["", "def", "register_concrete", "(", "self", ",", "name", ":", "str", ",", "dset_object", ")", ":", "\n", "\n", "\t\t", "if", "name", "in", "self", ".", "MODULES", ":", "\n", "\t\t\t", "log", ".", "warn", "(", "f'Module {name} is already registered'", ")", "\n", "\n", "", "self", ".", "MODULES", "[", "name", "]", "=", "dset_object", "\n", "\n", "return", "dset_object", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.list_available_dsets": [[31, 36], ["set().union", "list", "list.sort", "dataset_registry.Registry.MODULES.keys", "set", "dataset_registry.Registry.INITIALIZERS.keys"], "methods", ["None"], ["", "def", "list_available_dsets", "(", "self", ")", ":", "\n", "\t\t", "names", "=", "set", "(", "self", ".", "INITIALIZERS", ".", "keys", "(", ")", ")", ".", "union", "(", "self", ".", "MODULES", ".", "keys", "(", ")", ")", "\n", "names", "=", "list", "(", "names", ")", "\n", "names", ".", "sort", "(", ")", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get": [[37, 53], ["dataset_registry.Registry.MODULES.get", "dataset_registry.Registry.INITIALIZERS.get", "ValueError", "dataset_registry.Registry.", "dataset_registry.Registry.register_concrete", "dataset_registry.Registry.list_available_dsets"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.register_concrete", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.list_available_dsets"], ["", "def", "get", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "\t\t", "obj", "=", "self", ".", "MODULES", ".", "get", "(", "name", ")", "\n", "\n", "if", "obj", "is", "None", ":", "\n", "\t\t\t", "init_func", "=", "self", ".", "INITIALIZERS", ".", "get", "(", "name", ")", "\n", "\n", "if", "init_func", "is", "None", ":", "\n", "\t\t\t\t", "dslist", "=", "'\\n '", ".", "join", "(", "self", ".", "list_available_dsets", "(", ")", ")", "\n", "# KeyError can't display newlines https://stackoverflow.com/questions/46892261/new-line-on-error-message-in-keyerror-python-3-3", "\n", "raise", "ValueError", "(", "f'No dataset called {name} in registry, avaiable datasets:\\n {dslist}'", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "obj", "=", "init_func", "(", ")", "\n", "self", ".", "register_concrete", "(", "name", ",", "obj", ")", "\n", "\n", "", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.register_class": [[54, 68], ["getattr", "isinstance", "configs.", "dataset_registry.Registry.register", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.register"], ["", "def", "register_class", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "def", "decorator", "(", "class_to_register", ")", ":", "\n", "\t\t\t", "configs", "=", "getattr", "(", "class_to_register", ",", "'configs'", ")", "\n", "\n", "# config generator function", "\n", "if", "isinstance", "(", "configs", ",", "Callable", ")", ":", "\n", "\t\t\t\t", "configs", "=", "configs", "(", ")", "\n", "\n", "", "for", "cfg", "in", "configs", ":", "\n", "\t\t\t\t", "self", ".", "register", "(", "cfg", "[", "'name'", "]", ",", "partial", "(", "class_to_register", ",", "cfg", ")", ")", "\n", "\n", "", "return", "class_to_register", "\n", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.__init__": [[19, 22], ["dataset_io.DatasetBase.__init__", "tracks.DatasetRA.discover"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "discover", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.discover": [[23, 34], ["pathlib.Path", "fids.sort", "tracks.DatasetRA.set_frames", "tracks.DatasetRA.check_size", "tracks.DatasetRA.channels[].resolve_template", "pathlib.Path.parent.glob", "easydict.EasyDict"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetObstacleTrack.set_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.check_size", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.resolve_template"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" Discover frames in file system \"\"\"", "\n", "path_template", "=", "Path", "(", "self", ".", "channels", "[", "'image'", "]", ".", "resolve_template", "(", "\n", "dset", "=", "self", ",", "\n", "fid", "=", "'*'", ",", "\n", ")", ")", "\n", "# print(path_template, path_template.parent, path_template.name)", "\n", "fids", "=", "[", "p", ".", "stem", "for", "p", "in", "path_template", ".", "parent", ".", "glob", "(", "path_template", ".", "name", ")", "]", "\n", "fids", ".", "sort", "(", ")", "\n", "self", ".", "set_frames", "(", "[", "EasyDict", "(", "fid", "=", "fid", ")", "for", "fid", "in", "fids", "]", ")", "\n", "self", ".", "check_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.check_size": [[36, 42], ["tracks.DatasetRA.cfg.get", "tracks.DatasetRA.__len__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "check_size", "(", "self", ")", ":", "\n", "\t\t", "desired_len", "=", "self", ".", "cfg", ".", "get", "(", "'expected_length'", ")", "\n", "actual_len", "=", "self", ".", "__len__", "(", ")", "\n", "\n", "if", "desired_len", "is", "not", "None", "and", "actual_len", "!=", "desired_len", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'The dataset should have {desired_len} frames but found {actual_len}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame": [[43, 75], ["set", "super().get_frame", "super().get_frame.get", "set.remove", "set.add", "numpy.full", "isinstance", "KeyError", "anomaly.__len__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.get_frame", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "", "def", "get_frame", "(", "self", ",", "key", ",", "*", "channels", ")", ":", "\n", "\n", "\t\t", "channels", "=", "set", "(", "channels", ")", "\n", "wants_labels_explicitly", "=", "False", "\n", "if", "'label_pixel_gt'", "in", "channels", ":", "\n", "\t\t\t", "wants_labels_explicitly", "=", "True", "\n", "channels", ".", "remove", "(", "'label_pixel_gt'", ")", "\n", "channels", ".", "add", "(", "'semantic_class_gt'", ")", "\n", "\n", "", "fr", "=", "super", "(", ")", ".", "get_frame", "(", "key", ",", "*", "channels", ")", "\n", "\n", "sem_gt", "=", "fr", ".", "get", "(", "'semantic_class_gt'", ")", "\n", "if", "sem_gt", "is", "not", "None", ":", "\n", "\t\t\t", "h", ",", "w", "=", "sem_gt", ".", "shape", "[", ":", "2", "]", "\n", "label", "=", "np", ".", "full", "(", "(", "h", ",", "w", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "label", "[", "sem_gt", "==", "self", ".", "cfg", ".", "classes", ".", "usual", "]", "=", "0", "\n", "\n", "anomaly", "=", "self", ".", "cfg", ".", "classes", ".", "anomaly", "\n", "if", "isinstance", "(", "anomaly", ",", "(", "tuple", ",", "list", ")", ")", "and", "anomaly", ".", "__len__", "(", ")", "==", "2", ":", "\n", "\t\t\t\t", "range_low", ",", "range_high", "=", "anomaly", "\n", "anomaly_mask", "=", "(", "range_low", "<=", "sem_gt", ")", "&", "(", "sem_gt", "<=", "range_high", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "anomaly_mask", "=", "sem_gt", "==", "anomaly", "\n", "\n", "", "label", "[", "anomaly_mask", "]", "=", "1", "\n", "\n", "fr", "[", "'label_pixel_gt'", "]", "=", "label", "\n", "", "elif", "wants_labels_explicitly", ":", "\n", "\t\t\t", "raise", "KeyError", "(", "f'No labels for {key} in {self}'", ")", "\n", "\n", "\n", "", "return", "fr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetObstacleTrack.set_frames": [[213, 232], ["tracks.DatasetObstacleTrack.cfg.get", "super().set_frames", "frames_filtered.__len__", "print", "fr.fid.split", "any", "frames_filtered.__len__", "fr.fid.startswith"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetObstacleTrack.set_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["def", "set_frames", "(", "self", ",", "frame_list", ")", ":", "\n", "\t\t", "\"\"\" Filter frames by requested scenes \"\"\"", "\n", "frames_filtered", "=", "[", "\n", "fr", "for", "fr", "in", "frame_list", "\n", "if", "fr", ".", "fid", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "self", ".", "cfg", ".", "scenes", "\n", "]", "\n", "\n", "excluded_prefixes", "=", "self", ".", "cfg", ".", "get", "(", "'exclude_prefix'", ")", "\n", "if", "excluded_prefixes", "is", "not", "None", ":", "\n", "\t\t\t", "frlen", "=", "frames_filtered", ".", "__len__", "(", ")", "\n", "frames_filtered", "=", "[", "\n", "fr", "for", "fr", "in", "frames_filtered", "\n", "if", "not", "any", "(", "[", "\n", "fr", ".", "fid", ".", "startswith", "(", "p", ")", "for", "p", "in", "excluded_prefixes", "\n", "]", ")", "\n", "]", "\n", "print", "(", "f'Exclude {frlen} -> {frames_filtered.__len__()}'", ")", "\n", "\n", "", "super", "(", ")", ".", "set_frames", "(", "frames_filtered", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetLostAndFound.laf_id_from_image_path": [[350, 362], ["cls.RE_LAF_NAME.match", "easydict.EasyDict", "int", "cls.RE_LAF_NAME.match.group", "int", "int", "cls.RE_LAF_NAME.match.group", "cls.RE_LAF_NAME.match.group", "cls.RE_LAF_NAME.match.group"], "methods", ["None"], ["@", "classmethod", "\n", "def", "laf_id_from_image_path", "(", "cls", ",", "path", ",", "**", "_", ")", ":", "\n", "\t\t", "fid", "=", "path", ".", "stem", "[", ":", "-", "cls", ".", "LAF_SUFFIX_LEN", "]", "\n", "\n", "m", "=", "cls", ".", "RE_LAF_NAME", ".", "match", "(", "fid", ")", "\n", "\n", "return", "EasyDict", "(", "\n", "fid", "=", "fid", ",", "\n", "scene_id", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "\n", "scene_name", "=", "m", ".", "group", "(", "2", ")", ",", "\n", "scene_seq", "=", "int", "(", "m", ".", "group", "(", "3", ")", ")", ",", "\n", "scene_time", "=", "int", "(", "m", ".", "group", "(", "4", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetLostAndFound.discover": [[365, 410], ["log.info", "frames.sort", "tracks.DatasetLostAndFound.cfg.get", "tracks.DatasetLostAndFound.cfg.get", "tracks.DatasetLostAndFound.set_frames", "tracks.DatasetLostAndFound.check_size", "list", "FileNotFoundError", "tracks.DatasetLostAndFound.laf_id_from_image_path", "numpy.delete", "frames.__len__", "print", "pathlib.Path", "img_dir.glob", "operator.itemgetter", "numpy.arange", "frames.__len__", "any", "frames.__len__", "fr.fid.startswith"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetObstacleTrack.set_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.check_size", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetLostAndFound.laf_id_from_image_path", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "img_dir", "=", "Path", "(", "self", ".", "cfg", ".", "dir_root", ")", "/", "'leftImg8bit'", "/", "self", ".", "cfg", ".", "split", "\n", "\n", "for", "img_ext", "in", "[", "'png'", ",", "'webp'", ",", "'jpg'", "]", ":", "\n", "\t\t\t", "img_files", "=", "list", "(", "img_dir", ".", "glob", "(", "f'*/*_leftImg8bit.{img_ext}'", ")", ")", "\n", "if", "img_files", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "if", "not", "img_files", ":", "\n", "\t\t\t", "raise", "FileNotFoundError", "(", "f'Did not find images at {img_dir}'", ")", "\n", "\n", "\n", "", "log", ".", "info", "(", "f'LAF: found images in {img_ext} format'", ")", "\n", "self", ".", "img_fmt", "=", "img_ext", "\n", "\n", "# LAF's PNG images contain a gamma value which makes them washed out, ignore it", "\n", "# if img_ext == '.png':", "\n", "# self.channels['image'].opts['ignoregamma'] = True", "\n", "\n", "frames", "=", "[", "\n", "self", ".", "laf_id_from_image_path", "(", "p", ")", "\n", "for", "p", "in", "img_files", "\n", "]", "\n", "frames", ".", "sort", "(", "key", "=", "itemgetter", "(", "'fid'", ")", ")", "\n", "\n", "# remove invalid labeled frames", "\n", "invalid_indices", "=", "self", ".", "cfg", ".", "get", "(", "'exclude_frame_indices'", ")", "\n", "if", "invalid_indices", "is", "not", "None", ":", "\n", "\t\t\t", "valid_indices", "=", "np", ".", "delete", "(", "np", ".", "arange", "(", "frames", ".", "__len__", "(", ")", ")", ",", "invalid_indices", ")", "\n", "frames", "=", "[", "frames", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "\n", "# remove scenes", "\n", "", "excluded_prefixes", "=", "self", ".", "cfg", ".", "get", "(", "'exclude_prefix'", ")", "\n", "if", "excluded_prefixes", "is", "not", "None", ":", "\n", "\t\t\t", "frlen", "=", "frames", ".", "__len__", "(", ")", "\n", "frames", "=", "[", "\n", "fr", "for", "fr", "in", "frames", "\n", "if", "not", "any", "(", "[", "\n", "fr", ".", "fid", ".", "startswith", "(", "p", ")", "for", "p", "in", "excluded_prefixes", "\n", "]", ")", "\n", "]", "\n", "print", "(", "f'Exclude {frlen} -> {frames.__len__()}'", ")", "\n", "\n", "", "self", ".", "set_frames", "(", "frames", ")", "\n", "self", ".", "check_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.sod_id_from_image_path": [[462, 468], ["easydict.EasyDict", "str().split", "str().split", "str", "str"], "methods", ["None"], ["def", "sod_id_from_image_path", "(", "cls", ",", "path", ",", "**", "_", ")", ":", "\n", "\t\t", "fid", "=", "path", ".", "stem", "\n", "direc", "=", "str", "(", "fid", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'_'", "+", "str", "(", "fid", ")", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "return", "EasyDict", "(", "\n", "fid", "=", "fid", ",", "\n", "direc", "=", "direc", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.discover": [[470, 492], ["log.info", "frames.sort", "tracks.DatasetSmallObstacle.set_frames", "tracks.DatasetSmallObstacle.check_size", "pathlib.Path", "list", "FileNotFoundError", "tracks.DatasetSmallObstacle.sod_id_from_image_path", "img_dir.glob", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetObstacleTrack.set_frames", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetRA.check_size", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.tracks.DatasetSmallObstacle.sod_id_from_image_path"], ["", "def", "discover", "(", "self", ")", ":", "\n", "\t\t", "img_dir", "=", "Path", "(", "self", ".", "cfg", ".", "dir_root", ")", "/", "self", ".", "cfg", ".", "split", "\n", "\n", "for", "img_ext", "in", "[", "'png'", ",", "'webp'", ",", "'jpg'", "]", ":", "\n", "\t\t\t", "img_files", "=", "list", "(", "img_dir", ".", "glob", "(", "f'*/labels/*.{img_ext}'", ")", ")", "\n", "if", "img_files", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "if", "not", "img_files", ":", "\n", "\t\t\t", "raise", "FileNotFoundError", "(", "f'Did not find images at {img_dir}'", ")", "\n", "\n", "", "log", ".", "info", "(", "f'SOD: found images in {img_ext} format'", ")", "\n", "self", ".", "img_fmt", "=", "img_ext", "\n", "\n", "frames", "=", "[", "\n", "self", ".", "sod_id_from_image_path", "(", "p", ")", "\n", "for", "p", "in", "img_files", "\n", "]", "\n", "frames", ".", "sort", "(", "key", "=", "itemgetter", "(", "'fid'", ")", ")", "\n", "\n", "self", ".", "set_frames", "(", "frames", ")", "\n", "self", ".", "check_size", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.cityscapes_labels.assureSingleInstanceName": [[163, 180], ["name.endswith", "len"], "function", ["None"], ["", "", "def", "assureSingleInstanceName", "(", "name", ")", ":", "\n", "# if the name is known, it is not a group", "\n", "    ", "if", "name", "in", "name2label", ":", "\n", "        ", "return", "name", "\n", "# test if the name actually denotes a group", "\n", "", "if", "not", "name", ".", "endswith", "(", "\"group\"", ")", ":", "\n", "        ", "return", "None", "\n", "# remove group", "\n", "", "name", "=", "name", "[", ":", "-", "len", "(", "\"group\"", ")", "]", "\n", "# test if the new name exists", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "        ", "return", "None", "\n", "# test if the new name denotes a label that actually has instances", "\n", "", "if", "not", "name2label", "[", "name", "]", ".", "hasInstances", ":", "\n", "        ", "return", "None", "\n", "# all good then", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.__init__": [[16, 18], ["easydict.EasyDict"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\t\t", "self", ".", "cfg", "=", "EasyDict", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.init": [[19, 21], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "method_name", ",", "dataset_name", ")", ":", "\n", "\t\t", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.process_frame": [[22, 28], ["None"], "methods", ["None"], ["", "def", "process_frame", "(", "self", ",", "label_pixel_gt", ":", "np", ".", "ndarray", ",", "anomaly_p", ":", "np", ".", "ndarray", ",", "dset_name", ":", "str", "=", "None", ",", "method_name", ":", "str", "=", "None", ",", "visualize", ":", "bool", "=", "True", ",", "**", "_", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t@param frame: dict containing frame fields, such as `image`, `semantic_class_gt`, `pred_anomaly_p`\n\t\t@return: \n\t\t\"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.aggregate": [[29, 35], ["None"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "frame_results", ":", "list", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t@param frame_results: sequence of outputs of `process_frame` for the whole dataset\n\t\t@return: \n\t\t\"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.save": [[36, 38], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "aggregated_result", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "\t\t", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.load": [[39, 41], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "\t\t", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.fields_for_table": [[42, 44], ["None"], "methods", ["None"], ["", "def", "fields_for_table", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "\t\t", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.extracts_fields_for_table": [[45, 49], ["easydict.EasyDict", "getattr", "base.EvaluationMetric.fields_for_table"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.fields_for_table"], ["", "def", "extracts_fields_for_table", "(", "self", ",", "ag", ")", ":", "\n", "\t\t", "return", "EasyDict", "(", "{", "\n", "f", ":", "getattr", "(", "ag", ",", "f", ")", "\n", "for", "f", "in", "self", ".", "fields_for_table", "(", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.plot_many": [[51, 53], ["None"], "methods", ["None"], ["", "def", "plot_many", "(", "self", ",", "aggregated_results", ":", "List", ",", "comparison_name", ":", "str", ",", "close", ":", "bool", "=", "True", ")", ":", "\n", "\t\t", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.EvaluationMetric.plot_single": [[54, 57], ["base.EvaluationMetric.plot_many"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.plot_many"], ["", "def", "plot_single", "(", "self", ",", "aggregated_result", ",", "close", ":", "bool", "=", "True", ")", ":", "\n", "\t\t", "ag", "=", "aggregated_result", "\n", "self", ".", "plot_many", "(", "[", "ag", "]", ",", "f'{ag.method_name}_{ag.dataset_name}'", ",", "close", "=", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.save_figure": [[59, 64], ["path.parent.mkdir", "fig.savefig", "path.with_suffix"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "", "def", "save_figure", "(", "path", ",", "fig", ")", ":", "\n", "\t", "path", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "fmt", "in", "(", "'png'", ",", "'svg'", ",", "'pdf'", ")", ":", "\n", "\t\t", "fig", ".", "savefig", "(", "path", ".", "with_suffix", "(", "f'.{fmt}'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.save_table": [[66, 71], ["path.parent.mkdir", "path.with_suffix().write_text", "path.with_suffix().write_text", "table.to_html", "table.to_latex", "path.with_suffix", "path.with_suffix"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "", "def", "save_table", "(", "path", ",", "table", ")", ":", "\n", "\t", "path", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "path", ".", "with_suffix", "(", "'.html'", ")", ".", "write_text", "(", "table", ".", "to_html", "(", ")", ")", "\n", "path", ".", "with_suffix", "(", "'.tex'", ")", ".", "write_text", "(", "table", ".", "to_latex", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.name": [[140, 143], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "cfg", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.vis_frame": [[144, 159], ["jupyter_show_image.adapt_img_data", "jupyter_show_image.imwrite", "jupyter_show_image.get_heat", "jupyter_show_image.imwrite", "image.copy", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.adapt_img_data", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.get_heat", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "def", "vis_frame", "(", "self", ",", "fid", ",", "dset_name", ",", "method_name", ",", "mask_roi", ",", "anomaly_p", ",", "image", "=", "None", ",", "label_pixel_gt", "=", "None", ",", "**", "_", ")", ":", "\n", "\t\t", "h", ",", "w", "=", "mask_roi", ".", "shape", "[", ":", "2", "]", "\n", "\n", "canvas", "=", "image", ".", "copy", "(", ")", "if", "image", "is", "not", "None", "else", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "heatmap_color", "=", "adapt_img_data", "(", "anomaly_p", ")", "\n", "canvas", "[", "mask_roi", "]", "=", "canvas", "[", "mask_roi", "]", "//", "2", "+", "heatmap_color", "[", "mask_roi", "]", "//", "2", "\n", "imwrite", "(", "\n", "DIR_OUTPUTS", "/", "f'vis_PixelClassification'", "/", "method_name", "/", "dset_name", "/", "f'{fid}_demo_anomalyP.webp'", ",", "\n", "canvas", ",", "\n", ")", "\n", "\n", "anomaly_heat", "=", "get_heat", "(", "anomaly_p", ",", "overlay", "=", "label_pixel_gt", ")", "\n", "imwrite", "(", "\n", "DIR_OUTPUTS", "/", "f'vis_PixelClassification'", "/", "method_name", "/", "dset_name", "/", "f'{fid}_demo_anomalyP_heat.png'", ",", "\n", "anomaly_heat", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.process_frame": [[162, 195], ["pixel_classification.binary_confusion_matrix", "pixel_classification.MetricPixelClassification.vis_frame", "labels_in_roi.astype"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.binary_confusion_matrix", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.vis_frame"], ["", "def", "process_frame", "(", "self", ",", "label_pixel_gt", ":", "np", ".", "ndarray", ",", "anomaly_p", ":", "np", ".", "ndarray", ",", "fid", ":", "str", "=", "None", ",", "dset_name", ":", "str", "=", "None", ",", "method_name", ":", "str", "=", "None", ",", "visualize", ":", "bool", "=", "True", ",", "**", "_", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t@param label_pixel_gt: HxW uint8\n\t\t\t0 = road\n\t\t\t1 = obstacle\n\t\t\t255 = ignore\n\t\t@param anomaly_p: HxW float16\n\t\t\theatmap of per-pixel anomaly detection, value from 0 to 1\n\t\t@param fid: frame identifier, for saving extra outputs\n\t\t@param dset_name: dataset identifier, for saving extra outputs\n\t\t\"\"\"", "\n", "\n", "mask_roi", "=", "label_pixel_gt", "<", "255", "\n", "\n", "labels_in_roi", "=", "label_pixel_gt", "[", "mask_roi", "]", "\n", "predictions_in_roi", "=", "anomaly_p", "[", "mask_roi", "]", "\n", "\n", "bc", "=", "binary_confusion_matrix", "(", "\n", "prob", "=", "predictions_in_roi", ",", "\n", "gt_label_bool", "=", "labels_in_roi", ".", "astype", "(", "bool", ")", ",", "\n", "num_bins", "=", "self", ".", "cfg", ".", "num_bins", ",", "\n", "bin_strategy", "=", "self", ".", "cfg", ".", "bin_strategy", ",", "\n", ")", "\n", "# bc.cmats, bc.bins", "\n", "\n", "# visualization", "\n", "if", "visualize", "and", "fid", "is", "not", "None", "and", "dset_name", "is", "not", "None", "and", "method_name", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "vis_frame", "(", "fid", "=", "fid", ",", "dset_name", "=", "dset_name", ",", "method_name", "=", "method_name", ",", "mask_roi", "=", "mask_roi", ",", "\n", "anomaly_p", "=", "anomaly_p", ",", "label_pixel_gt", "=", "label_pixel_gt", ",", "**", "_", ")", "\n", "\n", "#print('Vrange', np.min(predictions_in_roi), np.mean(predictions_in_roi), np.max(predictions_in_roi))", "\n", "\n", "", "return", "bc", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.aggregate_fixed_bins": [[197, 210], ["numpy.sum", "easydict.EasyDict"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate_fixed_bins", "(", "frame_results", ")", ":", "\n", "\n", "# bin edges are the same in every frame", "\n", "\t\t", "bin_edges", "=", "frame_results", "[", "0", "]", ".", "bin_edges", "\n", "thresholds", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# each frame has the same thresholds, so we can sum the cmats", "\n", "cmat_sum", "=", "np", ".", "sum", "(", "[", "result", ".", "cmat_sum", "for", "result", "in", "frame_results", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "EasyDict", "(", "\n", "cmat", "=", "cmat_sum", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.aggregate_dynamic_bins": [[212, 242], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "sum", "sum", "numpy.cumsum", "numpy.cumsum", "numpy.array().transpose", "easydict.EasyDict", "numpy.argsort", "tp_relative[].astype", "fp_relative[].astype", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate_dynamic_bins", "(", "frame_results", ")", ":", "\n", "\n", "\t\t", "thresholds", "=", "np", ".", "concatenate", "(", "[", "r", ".", "bin_edges", "[", "1", ":", "]", "for", "r", "in", "frame_results", "]", ")", "\n", "\n", "tp_relative", "=", "np", ".", "concatenate", "(", "[", "r", ".", "tp_rel", "for", "r", "in", "frame_results", "]", ",", "axis", "=", "0", ")", "\n", "fp_relative", "=", "np", ".", "concatenate", "(", "[", "r", ".", "fp_rel", "for", "r", "in", "frame_results", "]", ",", "axis", "=", "0", ")", "\n", "\n", "num_positives", "=", "sum", "(", "r", ".", "num_pos", "for", "r", "in", "frame_results", ")", "\n", "num_negatives", "=", "sum", "(", "r", ".", "num_neg", "for", "r", "in", "frame_results", ")", "\n", "\n", "\n", "threshold_order", "=", "np", ".", "argsort", "(", "thresholds", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "# We start at threshold = 1, and lower it", "\n", "# Initially, prediction=0, all GT=1 pixels are false-negatives, and all GT=0 pixels are true-negatives.", "\n", "\n", "tp_cumu", "=", "np", ".", "cumsum", "(", "tp_relative", "[", "threshold_order", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "fp_cumu", "=", "np", ".", "cumsum", "(", "fp_relative", "[", "threshold_order", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "cmats", "=", "np", ".", "array", "(", "[", "\n", "# tp, fp", "\n", "[", "tp_cumu", ",", "fp_cumu", "]", ",", "\n", "# fn, tn", "\n", "[", "num_positives", "-", "tp_cumu", ",", "num_negatives", "-", "fp_cumu", "]", ",", "\n", "]", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "return", "EasyDict", "(", "\n", "cmat", "=", "cmats", ",", "\n", "thresholds", "=", "thresholds", "[", "threshold_order", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.aggregate": [[244, 264], ["pixel_classification_curves.curves_from_cmats", "pixel_classification_curves.BinaryClassificationCurve", "pixel_classification.MetricPixelClassification.aggregate_fixed_bins", "pixel_classification.MetricPixelClassification.aggregate_dynamic_bins"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.curves_from_cmats", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.aggregate_fixed_bins", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.aggregate_dynamic_bins"], ["", "def", "aggregate", "(", "self", ",", "frame_results", ":", "list", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ")", ":", "\n", "# fuse cmats FIXED BINS", "\n", "\n", "\t\t", "if", "self", ".", "cfg", ".", "bin_strategy", "==", "'uniform'", ":", "\n", "\t\t\t", "ag", "=", "self", ".", "aggregate_fixed_bins", "(", "frame_results", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ag", "=", "self", ".", "aggregate_dynamic_bins", "(", "frame_results", ")", "\n", "\n", "", "thresholds", "=", "ag", ".", "thresholds", "\n", "cmats", "=", "ag", ".", "cmat", "\n", "\n", "curves", "=", "curves_from_cmats", "(", "cmats", ",", "thresholds", ")", "\n", "\n", "bc_info", "=", "BinaryClassificationCurve", "(", "\n", "method_name", "=", "method_name", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "**", "curves", ",", "\n", ")", "\n", "\n", "return", "bc_info", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.persistence_path_data": [[265, 267], ["None"], "methods", ["None"], ["", "def", "persistence_path_data", "(", "self", ",", "method_name", ",", "dataset_name", ")", ":", "\n", "\t\t", "return", "DIR_OUTPUTS", "/", "self", ".", "name", "/", "'data'", "/", "f'PixClassCurve_{method_name}_{dataset_name}.hdf5'", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.persistence_path_plot": [[268, 270], ["None"], "methods", ["None"], ["", "def", "persistence_path_plot", "(", "self", ",", "comparison_name", ",", "plot_name", ")", ":", "\n", "\t\t", "return", "DIR_OUTPUTS", "/", "self", ".", "name", "/", "'plot'", "/", "f'{comparison_name}__{plot_name}'", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.save": [[271, 277], ["aggregated_result.save", "pixel_classification_curves.reduce_curve_resolution", "pixel_classification_curves.reduce_curve_resolution.save", "pixel_classification.MetricPixelClassification.persistence_path_data", "out_path.with_name", "out_path.name.replace"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.reduce_curve_resolution", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.persistence_path_data"], ["", "def", "save", "(", "self", ",", "aggregated_result", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "\t\t", "out_path", "=", "path_override", "or", "self", ".", "persistence_path_data", "(", "method_name", ",", "dataset_name", ")", "\n", "aggregated_result", ".", "save", "(", "out_path", ")", "\n", "\n", "c_lowres", "=", "reduce_curve_resolution", "(", "aggregated_result", ",", "num_pts", "=", "256", ")", "\n", "c_lowres", ".", "save", "(", "out_path", ".", "with_name", "(", "out_path", ".", "name", ".", "replace", "(", "'PixClassCurve'", ",", "'PixClassCurve-simplified'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.load": [[278, 288], ["out_path.with_name", "out_path.is_file", "pixel_classification.MetricPixelClassification.persistence_path_data", "out_path.name.replace", "pixel_classification_curves.BinaryClassificationCurve.from_file", "out_path.with_name.is_file", "pixel_classification_curves.BinaryClassificationCurve.from_file", "FileNotFoundError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.persistence_path_data", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.from_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.from_file"], ["", "def", "load", "(", "self", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "\t\t", "out_path", "=", "path_override", "or", "self", ".", "persistence_path_data", "(", "method_name", ",", "dataset_name", ")", "\n", "out_path_simplified", "=", "out_path", ".", "with_name", "(", "out_path", ".", "name", ".", "replace", "(", "'PixClassCurve'", ",", "'PixClassCurve-simplified'", ")", ")", "\n", "\n", "if", "out_path", ".", "is_file", "(", ")", ":", "\n", "\t\t\t", "return", "BinaryClassificationCurve", ".", "from_file", "(", "out_path", ")", "\n", "", "elif", "out_path_simplified", ".", "is_file", "(", ")", ":", "\n", "\t\t\t", "return", "BinaryClassificationCurve", ".", "from_file", "(", "out_path_simplified", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "FileNotFoundError", "(", "f'No saved curve at {out_path} or {out_path_simplified}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.fields_for_table": [[289, 291], ["None"], "methods", ["None"], ["", "", "def", "fields_for_table", "(", "self", ")", ":", "\n", "\t\t", "return", "[", "'area_PRC'", ",", "'tpr95_fpr'", ",", "'best_f1'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.plot_many": [[292, 309], ["pixel_classification_curves.plot_classification_curves", "base.save_figure", "base.save_table", "pixel_classification_curves.reduce_curve_resolution", "pixel_classification.MetricPixelClassification.persistence_path_plot", "matplotlib.pyplot.close", "pixel_classification.MetricPixelClassification.persistence_path_plot"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.plot_classification_curves", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.save_figure", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.base.save_table", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.reduce_curve_resolution", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.persistence_path_plot", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.MetricPixelClassification.persistence_path_plot"], ["", "def", "plot_many", "(", "self", ",", "aggregated_results", ":", "List", ",", "comparison_name", ":", "str", ",", "close", ":", "bool", "=", "True", ",", "method_names", "=", "{", "}", ",", "plot_formats", "=", "{", "}", ")", ":", "\n", "\n", "\t\t", "cinfos", "=", "[", "\n", "reduce_curve_resolution", "(", "cinfo", ",", "num_pts", "=", "256", ")", "\n", "for", "cinfo", "in", "aggregated_results", "\n", "]", "\n", "\n", "vis_res", "=", "plot_classification_curves", "(", "cinfos", ",", "method_names", "=", "method_names", ",", "plot_formats", "=", "plot_formats", ")", "\n", "fig", "=", "vis_res", ".", "plot_figure", "\n", "table", "=", "vis_res", ".", "score_table", "\n", "\n", "save_figure", "(", "self", ".", "persistence_path_plot", "(", "comparison_name", ",", "'PixClassCurves'", ")", ",", "fig", ")", "\n", "\n", "if", "close", ":", "\n", "\t\t\t", "pyplot", ".", "close", "(", "fig", ")", "\n", "\n", "", "save_table", "(", "self", ".", "persistence_path_plot", "(", "comparison_name", ",", "'PixClassTable'", ")", ",", "table", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.binary_confusion_matrix": [[16, 105], ["gt_label_bool.__len__", "numpy.count_nonzero", "numpy.histogram", "numpy.cumsum", "numpy.histogram", "numpy.cumsum", "numpy.array().transpose().astype", "easydict.EasyDict", "numpy.concatenate", "numpy.unique", "numpy.array().transpose", "numpy.quantile", "numpy.quantile", "numpy.array", "numpy.linspace", "numpy.linspace", "min", "min"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["def", "binary_confusion_matrix", "(", "\n", "prob", ":", "np", ".", "ndarray", ",", "gt_label_bool", ":", "np", ".", "ndarray", ",", "\n", "num_bins", ":", "int", "=", "1024", ",", "bin_strategy", "=", "'uniform'", ",", "# : Literal['uniform', 'percentiles'] = 'uniform',", "\n", "normalize", ":", "bool", "=", "False", ",", "dtype", "=", "np", ".", "float64", ")", ":", "\n", "\n", "\t", "area", "=", "gt_label_bool", ".", "__len__", "(", ")", "\n", "\n", "gt_area_true", "=", "np", ".", "count_nonzero", "(", "gt_label_bool", ")", "\n", "gt_area_false", "=", "area", "-", "gt_area_true", "\n", "\n", "prob_at_true", "=", "prob", "[", "gt_label_bool", "]", "\n", "prob_at_false", "=", "prob", "[", "~", "gt_label_bool", "]", "\n", "\n", "if", "bin_strategy", "==", "'uniform'", ":", "\n", "# bins spread uniforms in 0 .. 1", "\n", "\t\t", "bins", "=", "num_bins", "\n", "histogram_range", "=", "[", "0", ",", "1", "]", "\n", "\n", "", "elif", "bin_strategy", "==", "'percentiles'", ":", "\n", "# dynamic bins representing the range of occurring values", "\n", "# bin edges are following the distribution of positive and negative pixels", "\n", "\n", "\t\t", "bins", "=", "[", "\n", "[", "0", ",", "1", "]", ",", "# make sure 0 and 1 are included", "\n", "]", "\n", "\n", "if", "prob_at_true", ".", "size", ":", "\n", "\t\t\t", "bins", "+=", "[", "\n", "np", ".", "quantile", "(", "prob_at_true", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "min", "(", "num_bins", "//", "2", ",", "prob_at_true", ".", "size", ")", ")", ")", ",", "\n", "]", "\n", "", "if", "prob_at_false", ".", "size", ":", "\n", "\t\t\t", "bins", "+=", "[", "\n", "np", ".", "quantile", "(", "prob_at_false", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "min", "(", "num_bins", "//", "2", ",", "prob_at_false", ".", "size", ")", ")", ")", ",", "\n", "]", "\n", "\n", "\n", "", "bins", "=", "np", ".", "concatenate", "(", "bins", ")", "\n", "\n", "# sort and remove duplicates, duplicated cause an exception in np.histogram", "\n", "bins", "=", "np", ".", "unique", "(", "bins", ")", "\n", "\n", "\n", "histogram_range", "=", "None", "\n", "\n", "# the area of positive pixels is divided into", "\n", "#\t- true positives - above threshold", "\n", "#\t- false negatives - below threshold", "\n", "", "tp_rel", ",", "_", "=", "np", ".", "histogram", "(", "prob_at_true", ",", "bins", "=", "bins", ",", "range", "=", "histogram_range", ")", "\n", "# the curve goes from higher thresholds to lower thresholds", "\n", "tp_rel", "=", "tp_rel", "[", ":", ":", "-", "1", "]", "\n", "# cumsum to get number of tp at given threshold", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp_rel", ")", "\n", "# GT-positives which are not TP are instead FN", "\n", "fn", "=", "gt_area_true", "-", "tp", "\n", "\n", "# the area of negative pixels is divided into", "\n", "#\t- false positives - above threshold", "\n", "#\t- true negatives - below threshold", "\n", "fp_rel", ",", "bin_edges", "=", "np", ".", "histogram", "(", "prob_at_false", ",", "bins", "=", "bins", ",", "range", "=", "histogram_range", ")", "\n", "# the curve goes from higher thresholds to lower thresholds", "\n", "bin_edges", "=", "bin_edges", "[", ":", ":", "-", "1", "]", "\n", "fp_rel", "=", "fp_rel", "[", ":", ":", "-", "1", "]", "\n", "# cumsum to get number of fp at given threshold", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp_rel", ")", "\n", "# GT-negatives which are not FP are instead TN", "\n", "tn", "=", "gt_area_false", "-", "fp", "\n", "\n", "cmat_sum", "=", "np", ".", "array", "(", "[", "\n", "[", "tp", ",", "fp", "]", ",", "\n", "[", "fn", ",", "tn", "]", ",", "\n", "]", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "# cmat_rel = np.array([", "\n", "# \t[tp_rel, fp_rel],", "\n", "# \t[-tp_rel, -fp_rel],", "\n", "# ]).transpose(2, 0, 1).astype(dtype)", "\n", "\n", "if", "normalize", ":", "\n", "\t\t", "cmat_sum", "*=", "(", "1.", "/", "area", ")", "\n", "# cmat_rel *= (1./area)", "\n", "\n", "", "return", "EasyDict", "(", "\n", "bin_edges", "=", "bin_edges", ",", "\n", "cmat_sum", "=", "cmat_sum", ",", "\n", "# cmat_rel = cmat_rel,", "\n", "tp_rel", "=", "tp_rel", ",", "\n", "fp_rel", "=", "fp_rel", ",", "\n", "num_pos", "=", "gt_area_true", ",", "\n", "num_neg", "=", "gt_area_false", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.test_binary_confusion_matrix": [[108, 118], ["numpy.array", "numpy.array", "numpy.sum", "numpy.sum", "print", "matplotlib.pyplot.plot", "pixel_classification.binary_confusion_matrix"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification.binary_confusion_matrix"], ["", "def", "test_binary_confusion_matrix", "(", ")", ":", "\n", "\t", "pp", "=", "np", ".", "array", "(", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", ")", "\n", "gt", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "cmat", "=", "binary_confusion_matrix", "(", "pp", ",", "gt", ",", "levels", "=", "20", ")", ".", "cmat_sum", "\n", "cmat_all_p", "=", "np", ".", "sum", "(", "cmat", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "\n", "cmat_all_n", "=", "np", ".", "sum", "(", "cmat", "[", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "1", ")", "\n", "\n", "print", "(", "cmat_all_p", ",", "cmat_all_n", ")", "\n", "\n", "pyplot", ".", "plot", "(", "cmat", "[", ":", ",", "0", ",", "1", "]", "/", "cmat_all_n", ",", "cmat", "[", ":", ",", "0", ",", "0", "]", "/", "cmat_all_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.BinaryClassificationCurve.__iter__": [[40, 42], ["dataclasses.asdict().items", "dataclasses.asdict"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "return", "dataclasses", ".", "asdict", "(", "self", ")", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.BinaryClassificationCurve.save": [[43, 45], ["datasets.dataset_io.hdf5_write_hierarchy_to_file", "dataclasses.asdict"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_file"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "hdf5_write_hierarchy_to_file", "(", "path", ",", "dataclasses", ".", "asdict", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.BinaryClassificationCurve.from_file": [[46, 49], ["cls", "datasets.dataset_io.hdf5_read_hierarchy_from_file"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_file"], ["", "@", "classmethod", "\n", "def", "from_file", "(", "cls", ",", "path", ")", ":", "\n", "\t\t", "return", "cls", "(", "**", "hdf5_read_hierarchy_from_file", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.get_no_prediction_prefix": [[51, 65], ["range", "ValueError", "cmats.__len__"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "", "def", "get_no_prediction_prefix", "(", "cmats", ")", ":", "\n", "\t", "\"\"\"\n\tThe threshold goes from high to low\n\tAt the beginning, we have 0 predictions and there is no valid precision\n\tRemove the prefix with 0 predictions\n\n\tThis function returns the number of elements to remove from the beginning.\n\t\"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "cmats", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t", "if", "cmats", "[", "i", ",", "0", ",", "0", "]", "+", "cmats", "[", "i", ",", "0", ",", "1", "]", ">", "0.01", ":", "\n", "\t\t\t", "return", "i", "\n", "\n", "", "", "raise", "ValueError", "(", "'No predictions made at all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.curves_from_cmats": [[67, 132], ["pixel_classification_curves.get_no_prediction_prefix", "numpy.searchsorted", "numpy.searchsorted", "float", "numpy.nanargmax", "float", "print", "easydict.EasyDict", "print", "float", "numpy.sum", "numpy.trapz", "numpy.trapz", "numpy.trapz", "numpy.diff"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.get_no_prediction_prefix"], ["", "def", "curves_from_cmats", "(", "cmats", ",", "thresholds", ")", ":", "\n", "\n", "# The threshold goes from high to low", "\n", "# At the beginning, we have 0 predictions and there is no valid precision", "\n", "# Remove the prefix with 0 predictions", "\n", "\n", "\t", "num_remove", "=", "get_no_prediction_prefix", "(", "cmats", ")", "\n", "\n", "if", "num_remove", ">", "0", ":", "\n", "\t\t", "print", "(", "f'Skip {num_remove}'", ")", "\n", "cmats", "=", "cmats", "[", "num_remove", ":", "]", "\n", "thresholds", "=", "thresholds", "[", "num_remove", ":", "]", "\n", "\n", "", "tp", "=", "cmats", "[", ":", ",", "0", ",", "0", "]", "\n", "fp", "=", "cmats", "[", ":", ",", "0", ",", "1", "]", "\n", "fn", "=", "cmats", "[", ":", ",", "1", ",", "0", "]", "\n", "tn", "=", "cmats", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "tp_rates", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "fp_rates", "=", "fp", "/", "(", "fp", "+", "tn", ")", "\n", "\n", "precisions", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recalls", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "f1_scores", "=", "(", "2", "*", "tp", ")", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "\n", "\n", "tpr95_index", "=", "np", ".", "searchsorted", "(", "tp_rates", ",", "0.95", ")", "\n", "if", "tpr95_index", "<", "tp_rates", ".", "shape", "[", "0", "]", ":", "\n", "\t\t", "fpr_tpr95", "=", "fp_rates", "[", "tpr95_index", "]", "\n", "tpr95_threshold", "=", "float", "(", "thresholds", "[", "tpr95_index", "]", ")", "\n", "", "else", ":", "\n", "# tpr95 was not reached", "\n", "\t\t", "fpr_tpr95", "=", "1.0", "\n", "tpr95_threshold", "=", "0.0", "\n", "\n", "", "recall50_index", "=", "np", ".", "searchsorted", "(", "recalls", ",", "0.50", ")", "\n", "recall50_threshold", "=", "float", "(", "thresholds", "[", "recall50_index", "]", ")", "\n", "\n", "ix", "=", "np", ".", "nanargmax", "(", "f1_scores", ")", "\n", "best_f1_threshold", "=", "float", "(", "thresholds", "[", "ix", "]", ")", "\n", "best_f1", "=", "f1_scores", "[", "ix", "]", "\n", "\n", "print", "(", "\n", "'ap-sum'", ",", "np", ".", "sum", "(", "np", ".", "diff", "(", "recalls", ")", "*", "precisions", "[", ":", "-", "1", "]", ")", ",", "\n", "'ap-trapz'", ",", "np", ".", "trapz", "(", "precisions", ",", "recalls", ")", ",", "\n", ")", "\n", "\n", "return", "EasyDict", "(", "\n", "# curves", "\n", "curve_tpr", "=", "tp_rates", ",", "\n", "curve_fpr", "=", "fp_rates", ",", "\n", "curve_precision", "=", "precisions", ",", "\n", "curve_recall", "=", "recalls", ",", "\n", "\n", "thresholds", "=", "thresholds", ",", "\n", "\n", "# areas", "\n", "area_ROC", "=", "np", ".", "trapz", "(", "tp_rates", ",", "fp_rates", ")", ",", "\n", "area_PRC", "=", "np", ".", "trapz", "(", "precisions", ",", "recalls", ")", ",", "\n", "\n", "tpr95_fpr", "=", "fpr_tpr95", ",", "\n", "tpr95_threshold", "=", "tpr95_threshold", ",", "\n", "\n", "recall50_threshold", "=", "recall50_threshold", ",", "\n", "best_f1_threshold", "=", "best_f1_threshold", ",", "\n", "best_f1", "=", "best_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.select_points_for_curve": [[136, 176], ["numpy.linspace", "list.append", "list.append", "numpy.unique", "dict", "numpy.searchsorted", "list.append", "list", "list", "range", "range"], "function", ["None"], ["", "def", "select_points_for_curve", "(", "x", ",", "y", ",", "num_points", ",", "value_range", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "\t", "\"\"\"\n\tx is ascending\n\t\"\"\"", "\n", "\n", "range_start", ",", "range_end", "=", "value_range", "\n", "thresholds", "=", "np", ".", "linspace", "(", "range_start", ",", "range_end", ",", "num", "=", "num_points", "-", "2", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "\n", "# points spaced equally in x space", "\n", "idx", "=", "0", "\n", "for", "thr", "in", "thresholds", ":", "\n", "# binary search for the next threshold", "\n", "\t\t", "ofs", "=", "np", ".", "searchsorted", "(", "x", "[", "idx", ":", "]", ",", "thr", ")", "\n", "# print(f'{idx}/{x.size} + {ofs} thr {thr}')", "\n", "idx", "+=", "ofs", "\n", "indices", ".", "append", "(", "idx", ")", "\n", "\n", "\n", "# points spaced equally as percentiles", "\n", "", "if", "x", ".", "size", ">", "num_points", ":", "\n", "\t\t", "indices", "+=", "list", "(", "range", "(", "0", ",", "x", ".", "size", ",", "x", ".", "size", "//", "num_points", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "indices", "=", "list", "(", "range", "(", "x", ".", "size", ")", ")", "\n", "\n", "# first and last point is always included", "\n", "", "indices", ".", "append", "(", "0", ")", "\n", "indices", ".", "append", "(", "x", ".", "size", "-", "1", ")", "\n", "\n", "# sort and remove duplicated", "\n", "indices", "=", "np", ".", "unique", "(", "indices", ")", "\n", "\n", "if", "indices", "[", "-", "1", "]", "==", "x", ".", "size", ":", "\n", "\t\t", "indices", "=", "indices", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "dict", "(", "\n", "indices", "=", "indices", ",", "\n", "curve_x", "=", "x", "[", "indices", "]", ",", "\n", "curve_y", "=", "y", "[", "indices", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.reduce_curve_resolution": [[179, 210], ["pixel_classification_curves.select_points_for_curve", "dataclasses.replace", "cinfo.curve_precision.__len__"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.select_points_for_curve", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "reduce_curve_resolution", "(", "cinfo", ":", "BinaryClassificationCurve", ",", "num_pts", ":", "int", "=", "128", ")", "->", "BinaryClassificationCurve", ":", "\n", "\t", "\"\"\"\n\tReduces curve resolution for plotting\n\t\"\"\"", "\n", "\n", "if", "cinfo", ".", "curve_precision", ".", "__len__", "(", ")", "<=", "num_pts", ":", "\n", "\t\t", "return", "cinfo", "\n", "\n", "", "prc", "=", "select_points_for_curve", "(", "\n", "cinfo", ".", "curve_recall", ",", "\n", "cinfo", ".", "curve_precision", ",", "\n", "num_points", "=", "num_pts", ",", "\n", ")", "\n", "\n", "indices", "=", "prc", "[", "'indices'", "]", "\n", "\n", "# roc = select_points_for_curve(", "\n", "# \tcurve_info.curve_fpr, ", "\n", "# \tcurve_info.curve_tpr, ", "\n", "# \tnum_points = num_pts,", "\n", "# )", "\n", "\n", "return", "dataclasses", ".", "replace", "(", "\n", "cinfo", ",", "\n", "curve_recall", "=", "prc", "[", "'curve_x'", "]", ",", "\n", "curve_precision", "=", "prc", "[", "'curve_y'", "]", ",", "\n", "# curve_fpr = roc['curve_x']", "\n", "# curve_tpr = roc['curve_y']", "\n", "curve_fpr", "=", "cinfo", ".", "curve_fpr", "[", "indices", "]", ",", "\n", "curve_tpr", "=", "cinfo", ".", "curve_tpr", "[", "indices", "]", ",", "\n", "thresholds", "=", "cinfo", ".", "thresholds", "[", "indices", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.plot_classification_curves_draw_entry": [[213, 262], ["format.split", "pixel_classification_curves.select_points_for_curve", "plot_prc.plot", "pixel_classification_curves.select_points_for_curve", "plot_roc.plot", "format.split.__len__", "format.split.__len__", "format.split.__len__"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.select_points_for_curve", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.select_points_for_curve", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__"], ["", "def", "plot_classification_curves_draw_entry", "(", "plot_roc", ":", "pyplot", ".", "Axes", ",", "plot_prc", ":", "pyplot", ".", "Axes", ",", "curve_info", ":", "BinaryClassificationCurve", ",", "display_name", ":", "str", ",", "format", "=", "None", ")", ":", "\n", "\n", "\t", "fmt_args", "=", "{", "}", "\n", "\n", "if", "format", "is", "not", "None", ":", "\n", "\t\t", "segs", "=", "format", ".", "split", "(", ")", "\n", "\n", "if", "segs", ".", "__len__", "(", ")", ">=", "1", ":", "\n", "\t\t\t", "fmt_args", "[", "'color'", "]", "=", "segs", "[", "0", "]", "\n", "\n", "", "if", "segs", ".", "__len__", "(", ")", ">=", "2", ":", "\n", "\t\t\t", "fmt_args", "[", "'linestyle'", "]", "=", "segs", "[", "1", "]", "\n", "\n", "", "if", "segs", ".", "__len__", "(", ")", ">=", "3", ":", "\n", "\t\t\t", "fmt_args", "[", "'marker'", "]", "=", "segs", "[", "2", "]", "\n", "\n", "", "", "if", "plot_prc", "is", "not", "None", ":", "\n", "\t\t", "curves", "=", "select_points_for_curve", "(", "\n", "curve_info", ".", "curve_recall", ",", "\n", "curve_info", ".", "curve_precision", ",", "\n", "num_points", "=", "256", ",", "\n", ")", "\n", "curve_recall", "=", "curves", "[", "'curve_x'", "]", "\n", "curve_precision", "=", "curves", "[", "'curve_y'", "]", "\n", "# curve_recall = ci_red.curve_recall", "\n", "# curve_precision = ci_red.curve_precision", "\n", "\n", "plot_prc", ".", "plot", "(", "curve_recall", ",", "curve_precision", ",", "\n", "# label='{lab:<24}{a:.02f}'.format(lab=label, a=area_under),", "\n", "label", "=", "f'{curve_info.area_PRC:.02f} {display_name}'", ",", "\n", "#marker = '.',", "\n", "**", "fmt_args", ",", "\n", ")", "\n", "\n", "", "if", "plot_roc", "is", "not", "None", ":", "\n", "\t\t", "curves", "=", "select_points_for_curve", "(", "\n", "curve_info", ".", "curve_fpr", ",", "\n", "curve_info", ".", "curve_tpr", ",", "\n", "num_points", "=", "256", ",", "\n", ")", "\n", "curve_fpr", "=", "curves", "[", "'curve_x'", "]", "\n", "curve_tpr", "=", "curves", "[", "'curve_y'", "]", "\n", "\n", "plot_roc", ".", "plot", "(", "curve_fpr", ",", "curve_tpr", ",", "\n", "#fmt,", "\n", "# label='{lab:<24}{a:.02f}'.format(lab=label, a=area_under),", "\n", "label", "=", "f'{curve_info.area_ROC:.03f} {display_name}'", ",", "\n", "# marker = '.',", "\n", "**", "fmt_args", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.pixel_classification_curves.plot_classification_curves": [[265, 322], ["pandas.DataFrame", "table_scores.sort_values.sort_values", "matplotlib.pyplot.figure", "pyplot.figure.subplots", "plot_prc.set_xlabel", "plot_prc.set_ylabel", "plot_prc.set_xlim", "plot_prc.set_ylim", "plot_roc.set_xlabel", "plot_roc.set_ylabel", "plot_roc.set_xlim", "list", "list.sort", "enumerate", "pixel_classification_curves.plot_classification_curves.make_legend"], "function", ["None"], ["", "", "def", "plot_classification_curves", "(", "curve_infos", ":", "List", "[", "BinaryClassificationCurve", "]", ",", "method_names", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", ",", "plot_formats", "=", "{", "}", ",", "plot_best", "=", "None", ")", ":", "\n", "\n", "\t", "table_scores", "=", "DataFrame", "(", "data", "=", "[", "\n", "Series", "(", "{", "\n", "'AveragePrecision'", ":", "crv", ".", "area_PRC", ",", "\n", "'AUROC'", ":", "crv", ".", "area_ROC", ",", "\n", "'FPR-at-95-TPR:'", ":", "crv", ".", "tpr95_fpr", ",", "\n", "'IOU'", ":", "crv", ".", "IOU_at_05", ",", "\n", "'PDR'", ":", "crv", ".", "PDR_at_05", ",", "\n", "}", ",", "\n", "name", "=", "method_names", ".", "get", "(", "crv", ".", "method_name", ",", "crv", ".", "method_name", ")", ",", "\n", ")", "\n", "for", "crv", "in", "curve_infos", "\n", "]", ")", "\n", "table_scores", "=", "table_scores", ".", "sort_values", "(", "'AveragePrecision'", ",", "ascending", "=", "False", ")", "\n", "\n", "fig", "=", "pyplot", ".", "figure", "(", "figsize", "=", "(", "18", ",", "8", ")", ")", "\n", "plot_roc", ",", "plot_prc", "=", "fig", ".", "subplots", "(", "1", ",", "2", ")", "\n", "\n", "plot_prc", ".", "set_xlabel", "(", "'recall'", ")", "\n", "plot_prc", ".", "set_ylabel", "(", "'precision'", ")", "\n", "plot_prc", ".", "set_xlim", "(", "[", "0", ",", "1", "]", ")", "\n", "plot_prc", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "\n", "plot_roc", ".", "set_xlabel", "(", "'false positive rate'", ")", "\n", "plot_roc", ".", "set_ylabel", "(", "'true positive rate'", ")", "\n", "plot_roc", ".", "set_xlim", "(", "[", "0", ",", "0.2", "]", ")", "\n", "\n", "# sort descending by AP", "\n", "curve_infos_sorted", "=", "list", "(", "curve_infos", ")", "\n", "curve_infos_sorted", ".", "sort", "(", "key", "=", "attrgetter", "(", "'area_PRC'", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "k", ",", "crv", "in", "enumerate", "(", "curve_infos_sorted", ")", ":", "\n", "\t\t", "plot_classification_curves_draw_entry", "(", "\n", "plot_prc", "=", "plot_prc", ",", "\n", "plot_roc", "=", "plot_roc", ",", "\n", "curve_info", "=", "crv", ",", "\n", "display_name", "=", "method_names", ".", "get", "(", "crv", ".", "method_name", ",", "crv", ".", "method_name", ")", ",", "\n", "format", "=", "plot_formats", ".", "get", "(", "crv", ".", "method_name", ")", ",", "\n", ")", "\n", "if", "k", "==", "plot_best", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "", "def", "make_legend", "(", "plot_obj", ",", "position", "=", "'lower right'", ",", "title", "=", "None", ")", ":", "\n", "\t\t", "handles", ",", "labels", "=", "plot_obj", ".", "get_legend_handles_labels", "(", ")", "\n", "plot_obj", ".", "legend", "(", "handles", ",", "labels", ",", "loc", "=", "position", ",", "title", "=", "title", ")", "\n", "\n", "plot_obj", ".", "grid", "(", "True", ")", "\n", "\n", "", "make_legend", "(", "plot_prc", ",", "'lower left'", ",", "title", "=", "'Average Precision'", ")", "\n", "make_legend", "(", "plot_roc", ",", "'lower right'", ",", "title", "=", "'AUROC'", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "return", "EasyDict", "(", "\n", "plot_figure", "=", "fig", ",", "\n", "score_table", "=", "table_scores", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.__iter__": [[181, 183], ["dataclasses.asdict().items", "dataclasses.asdict"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "dataclasses", ".", "asdict", "(", "self", ")", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.save": [[184, 186], ["datasets.dataset_io.hdf5_write_hierarchy_to_file", "dataclasses.asdict"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_write_hierarchy_to_file"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "hdf5_write_hierarchy_to_file", "(", "path", ",", "dataclasses", ".", "asdict", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.from_file": [[187, 190], ["cls", "datasets.dataset_io.hdf5_read_hierarchy_from_file"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_file"], ["", "@", "classmethod", "\n", "def", "from_file", "(", "cls", ",", "path", ")", ":", "\n", "        ", "return", "cls", "(", "**", "hdf5_read_hierarchy_from_file", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.name": [[218, 221], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cfg", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.vis_frame": [[222, 231], ["numpy.copy", "jupyter_show_image.adapt_img_data", "jupyter_show_image.imwrite", "image.copy", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.adapt_img_data", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "def", "vis_frame", "(", "self", ",", "fid", ",", "dset_name", ",", "method_name", ",", "mask_roi", ",", "anomaly_p", ",", "image", "=", "None", ",", "**", "_", ")", ":", "\n", "        ", "segmentation", "=", "np", ".", "copy", "(", "anomaly_p", ")", "\n", "segmentation", "[", "anomaly_p", ">", "self", ".", "cfg", ".", "thresh_p", "]", "=", "1", "\n", "segmentation", "[", "anomaly_p", "<=", "self", ".", "cfg", ".", "thresh_p", "]", "=", "0", "\n", "h", ",", "w", "=", "mask_roi", ".", "shape", "[", ":", "2", "]", "\n", "canvas", "=", "image", ".", "copy", "(", ")", "if", "image", "is", "not", "None", "else", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "heatmap_color", "=", "adapt_img_data", "(", "segmentation", ")", "\n", "canvas", "[", "mask_roi", "]", "=", "canvas", "[", "mask_roi", "]", "//", "2", "+", "heatmap_color", "[", "mask_roi", "]", "//", "2", "\n", "imwrite", "(", "DIR_OUTPUTS", "/", "f'vis_SegPred'", "/", "method_name", "/", "dset_name", "/", "f'{fid}.webp'", ",", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.process_frame": [[232, 261], ["instance_segmentation.MetricSegment.cfg.get", "instance_segmentation.segment_metrics", "instance_segmentation.default_instancer", "jupyter_show_image.imread", "instance_segmentation.anomaly_instances_from_mask", "instance_segmentation.MetricSegment.vis_frame"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.segment_metrics", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.default_instancer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.anomaly_instances_from_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.vis_frame"], ["", "def", "process_frame", "(", "self", ",", "label_pixel_gt", ":", "np", ".", "ndarray", ",", "anomaly_p", ":", "np", ".", "ndarray", ",", "fid", ":", "str", "=", "None", ",", "dset_name", ":", "str", "=", "None", ",", "\n", "method_name", ":", "str", "=", "None", ",", "visualize", ":", "bool", "=", "True", ",", "**", "_", ")", ":", "\n", "        ", "\"\"\"\n        @param label_pixel_gt: HxW uint8\n            0 = in-distribution / road\n            1 = anomaly / obstacle\n            255 = void / ignore\n        @param anomaly_p: HxW float16\n            heatmap of per-pixel anomaly detection, higher values correspond to anomaly / obstacle class\n        @param visualize: bool\n            saves an image with segment predictions\n        \"\"\"", "\n", "\n", "if", "self", ".", "cfg", ".", "get", "(", "default_instancer", ",", "True", ")", ":", "\n", "            ", "anomaly_gt", ",", "anomaly_pred", ",", "mask", "=", "default_instancer", "(", "anomaly_p", ",", "label_pixel_gt", ",", "self", ".", "cfg", ".", "thresh_p", ",", "\n", "self", ".", "cfg", ".", "thresh_segsize", ",", "self", ".", "cfg", ".", "thresh_instsize", ")", "\n", "# imwrite(_[\"mask_path\"], mask)", "\n", "", "else", ":", "\n", "            ", "anomaly_mask", "=", "imread", "(", "_", "[", "\"mask_path\"", "]", ")", "\n", "anomaly_gt", ",", "anomaly_pred", "=", "anomaly_instances_from_mask", "(", "anomaly_mask", ",", "label_pixel_gt", ",", "self", ".", "cfg", ".", "thresh_instsize", ")", "\n", "\n", "", "results", "=", "segment_metrics", "(", "anomaly_gt", ",", "anomaly_pred", ",", "self", ".", "cfg", ".", "thresh_sIoU", ")", "\n", "\n", "mask_roi", "=", "label_pixel_gt", "<", "255", "\n", "if", "visualize", "and", "fid", "is", "not", "None", "and", "dset_name", "is", "not", "None", "and", "method_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "vis_frame", "(", "fid", "=", "fid", ",", "dset_name", "=", "dset_name", ",", "method_name", "=", "method_name", ",", "mask_roi", "=", "mask_roi", ",", "\n", "anomaly_p", "=", "anomaly_p", ",", "**", "_", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.aggregate": [[262, 308], ["print", "print", "print", "len", "len", "len", "len", "print", "print", "print", "print", "print", "instance_segmentation.ResultsInfo", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "str", "str", "str", "str", "str", "str", "str", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "frame_results", ":", "list", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ")", ":", "\n", "\n", "        ", "sIoU_gt_mean", "=", "sum", "(", "np", ".", "sum", "(", "r", ".", "sIoU_gt", ")", "for", "r", "in", "frame_results", ")", "/", "sum", "(", "len", "(", "r", ".", "sIoU_gt", ")", "for", "r", "in", "frame_results", ")", "\n", "sIoU_pred_mean", "=", "sum", "(", "np", ".", "sum", "(", "r", ".", "sIoU_pred", ")", "for", "r", "in", "frame_results", ")", "/", "sum", "(", "len", "(", "r", ".", "sIoU_pred", ")", "for", "r", "in", "frame_results", ")", "\n", "prec_pred_mean", "=", "sum", "(", "np", ".", "sum", "(", "r", ".", "prec_pred", ")", "for", "r", "in", "frame_results", ")", "/", "sum", "(", "len", "(", "r", ".", "prec_pred", ")", "for", "r", "in", "frame_results", ")", "\n", "ag_results", "=", "{", "\"tp_mean\"", ":", "0.", ",", "\"fn_mean\"", ":", "0.", ",", "\"fp_mean\"", ":", "0.", ",", "\"f1_mean\"", ":", "0.", ",", "\n", "\"sIoU_gt\"", ":", "sIoU_gt_mean", ",", "\"sIoU_pred\"", ":", "sIoU_pred_mean", ",", "\"prec_pred\"", ":", "prec_pred_mean", "}", "\n", "print", "(", "\"Mean sIoU GT   :\"", ",", "sIoU_gt_mean", ")", "\n", "print", "(", "\"Mean sIoU PRED :\"", ",", "sIoU_pred_mean", ")", "\n", "print", "(", "\"Mean Precision PRED :\"", ",", "prec_pred_mean", ")", "\n", "for", "t", "in", "self", ".", "cfg", ".", "thresh_sIoU", ":", "\n", "            ", "tp", "=", "sum", "(", "r", "[", "\"tp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "for", "r", "in", "frame_results", ")", "\n", "fn", "=", "sum", "(", "r", "[", "\"fn_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "for", "r", "in", "frame_results", ")", "\n", "fp", "=", "sum", "(", "r", "[", "\"fp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "for", "r", "in", "frame_results", ")", "\n", "f1", "=", "(", "2", "*", "tp", ")", "/", "(", "2", "*", "tp", "+", "fn", "+", "fp", ")", "\n", "if", "t", "in", "[", "0.25", ",", "0.50", ",", "0.75", "]", ":", "\n", "                ", "ag_results", "[", "\"tp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "tp", "\n", "ag_results", "[", "\"fn_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "fn", "\n", "ag_results", "[", "\"fp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "fp", "\n", "ag_results", "[", "\"f1_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "f1", "\n", "# print(\"---sIoU thresh =\", t)", "\n", "# print(\"Number of TPs  :\", tp)", "\n", "# print(\"Number of FNs  :\", fn)", "\n", "# print(\"Number of FPs  :\", fp)", "\n", "# print(\"F1 score       :\", f1)", "\n", "", "ag_results", "[", "\"tp_mean\"", "]", "+=", "tp", "\n", "ag_results", "[", "\"fn_mean\"", "]", "+=", "fn", "\n", "ag_results", "[", "\"fp_mean\"", "]", "+=", "fp", "\n", "ag_results", "[", "\"f1_mean\"", "]", "+=", "f1", "\n", "\n", "", "ag_results", "[", "\"tp_mean\"", "]", "/=", "len", "(", "self", ".", "cfg", ".", "thresh_sIoU", ")", "\n", "ag_results", "[", "\"fn_mean\"", "]", "/=", "len", "(", "self", ".", "cfg", ".", "thresh_sIoU", ")", "\n", "ag_results", "[", "\"fp_mean\"", "]", "/=", "len", "(", "self", ".", "cfg", ".", "thresh_sIoU", ")", "\n", "ag_results", "[", "\"f1_mean\"", "]", "/=", "len", "(", "self", ".", "cfg", ".", "thresh_sIoU", ")", "\n", "print", "(", "\"---sIoU thresh averaged\"", ")", "\n", "print", "(", "\"Number of TPs  :\"", ",", "ag_results", "[", "\"tp_mean\"", "]", ")", "\n", "print", "(", "\"Number of FNs  :\"", ",", "ag_results", "[", "\"fn_mean\"", "]", ")", "\n", "print", "(", "\"Number of FPs  :\"", ",", "ag_results", "[", "\"fp_mean\"", "]", ")", "\n", "print", "(", "\"F1 score       :\"", ",", "ag_results", "[", "\"f1_mean\"", "]", ")", "\n", "\n", "seg_info", "=", "ResultsInfo", "(", "\n", "method_name", "=", "method_name", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "**", "ag_results", ",", "\n", ")", "\n", "return", "seg_info", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.persistence_path_data": [[309, 311], ["None"], "methods", ["None"], ["", "def", "persistence_path_data", "(", "self", ",", "method_name", ",", "dataset_name", ")", ":", "\n", "        ", "return", "DIR_OUTPUTS", "/", "self", ".", "name", "/", "'data'", "/", "f'{self.name}Results_{method_name}_{dataset_name}.hdf5'", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.save": [[312, 315], ["aggregated_result.save", "instance_segmentation.MetricSegment.persistence_path_data"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.persistence_path_data"], ["", "def", "save", "(", "self", ",", "aggregated_result", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "        ", "out_path", "=", "path_override", "or", "self", ".", "persistence_path_data", "(", "method_name", ",", "dataset_name", ")", "\n", "aggregated_result", ".", "save", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load": [[316, 319], ["instance_segmentation.ResultsInfo.from_file", "instance_segmentation.MetricSegment.persistence_path_data"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.ResultsInfo.from_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.persistence_path_data"], ["", "def", "load", "(", "self", ",", "method_name", ":", "str", ",", "dataset_name", ":", "str", ",", "path_override", ":", "Path", "=", "None", ")", ":", "\n", "        ", "out_path", "=", "path_override", "or", "self", ".", "persistence_path_data", "(", "method_name", ",", "dataset_name", ")", "\n", "return", "ResultsInfo", ".", "from_file", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.fields_for_table": [[320, 323], ["None"], "methods", ["None"], ["", "def", "fields_for_table", "(", "self", ")", ":", "\n", "        ", "return", "[", "'sIoU_gt'", ",", "'prec_pred'", ",", "'fn_25'", ",", "'fp_25'", ",", "'f1_25'", ",", "'fn_50'", ",", "'fp_50'", ",", "'f1_50'", ",", "\n", "'fn_75'", ",", "'fp_75'", ",", "'f1_75'", ",", "'f1_mean'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.init": [[324, 326], ["instance_segmentation.MetricSegment.get_thresh_p_from_curve"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.get_thresh_p_from_curve"], ["", "def", "init", "(", "self", ",", "method_name", ",", "dataset_name", ")", ":", "\n", "        ", "self", ".", "get_thresh_p_from_curve", "(", "method_name", ",", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.get_thresh_p_from_curve": [[327, 338], ["datasets.dataset_io.hdf5_read_hierarchy_from_file", "datasets.dataset_io.hdf5_read_hierarchy_from_file.keys", "numpy.nanargmax", "float"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.hdf5_read_hierarchy_from_file"], ["", "def", "get_thresh_p_from_curve", "(", "self", ",", "method_name", ",", "dataset_name", ")", ":", "\n", "        ", "out_path", "=", "DIR_OUTPUTS", "/", "\"PixBinaryClass\"", "/", "'data'", "/", "f'PixClassCurve_{method_name}_{dataset_name}.hdf5'", "\n", "pixel_results", "=", "hdf5_read_hierarchy_from_file", "(", "out_path", ")", "\n", "if", "\"best_f1_threshold\"", "in", "pixel_results", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "cfg", ".", "thresh_p", "=", "pixel_results", ".", "best_f1_threshold", "\n", "", "else", ":", "\n", "            ", "prc", "=", "pixel_results", ".", "curve_precision", "\n", "rec", "=", "pixel_results", ".", "curve_recall", "\n", "f1_scores", "=", "(", "2", "*", "prc", "*", "rec", ")", "/", "(", "prc", "+", "rec", ")", "\n", "ix", "=", "np", ".", "nanargmax", "(", "f1_scores", ")", "\n", "self", ".", "cfg", ".", "thresh_p", "=", "float", "(", "pixel_results", ".", "thresholds", "[", "ix", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.default_instancer": [[16, 55], ["numpy.copy", "numpy.zeros", "numpy.zeros", "numpy.ones", "scipy.ndimage.measurements.label", "scipy.ndimage.measurements.label", "numpy.copy", "label_pixel_gt.copy.copy", "range", "numpy.copy().astype", "numpy.copy", "range", "len", "numpy.copy", "len"], "function", ["None"], ["def", "default_instancer", "(", "anomaly_p", ":", "np", ".", "ndarray", ",", "label_pixel_gt", ":", "np", ".", "ndarray", ",", "thresh_p", ":", "float", ",", "\n", "thresh_segsize", ":", "int", ",", "thresh_instsize", ":", "int", "=", "0", ")", ":", "\n", "\n", "    ", "\"\"\"segmentation from pixel-wise anoamly scores\"\"\"", "\n", "segmentation", "=", "np", ".", "copy", "(", "anomaly_p", ")", "\n", "segmentation", "[", "anomaly_p", ">", "thresh_p", "]", "=", "1", "\n", "segmentation", "[", "anomaly_p", "<=", "thresh_p", "]", "=", "0", "\n", "\n", "anomaly_gt", "=", "np", ".", "zeros", "(", "label_pixel_gt", ".", "shape", ")", "\n", "anomaly_gt", "[", "label_pixel_gt", "==", "1", "]", "=", "1", "\n", "anomaly_pred", "=", "np", ".", "zeros", "(", "label_pixel_gt", ".", "shape", ")", "\n", "anomaly_pred", "[", "segmentation", "==", "1", "]", "=", "1", "\n", "anomaly_pred", "[", "label_pixel_gt", "==", "255", "]", "=", "0", "\n", "\n", "\"\"\"connected components\"\"\"", "\n", "structure", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anomaly_instances", ",", "n_anomaly", "=", "label", "(", "anomaly_gt", ",", "structure", ")", "\n", "anomaly_seg_pred", ",", "n_seg_pred", "=", "label", "(", "anomaly_pred", ",", "structure", ")", "\n", "\n", "\"\"\"remove connected components below size threshold\"\"\"", "\n", "if", "thresh_segsize", "is", "not", "None", ":", "\n", "        ", "minimum_cc_sum", "=", "thresh_segsize", "\n", "labeled_mask", "=", "np", ".", "copy", "(", "anomaly_seg_pred", ")", "\n", "for", "comp", "in", "range", "(", "n_seg_pred", "+", "1", ")", ":", "\n", "            ", "if", "len", "(", "anomaly_seg_pred", "[", "labeled_mask", "==", "comp", "]", ")", "<", "minimum_cc_sum", ":", "\n", "                ", "anomaly_seg_pred", "[", "labeled_mask", "==", "comp", "]", "=", "0", "\n", "", "", "", "labeled_mask", "=", "np", ".", "copy", "(", "anomaly_instances", ")", "\n", "label_pixel_gt", "=", "label_pixel_gt", ".", "copy", "(", ")", "# copy for editing", "\n", "for", "comp", "in", "range", "(", "n_anomaly", "+", "1", ")", ":", "\n", "        ", "if", "len", "(", "anomaly_instances", "[", "labeled_mask", "==", "comp", "]", ")", "<", "thresh_instsize", ":", "\n", "            ", "label_pixel_gt", "[", "labeled_mask", "==", "comp", "]", "=", "255", "\n", "\n", "", "", "\"\"\"restrict to region of interest\"\"\"", "\n", "mask_roi", "=", "label_pixel_gt", "<", "255", "\n", "segmentation_filtered", "=", "np", ".", "copy", "(", "anomaly_seg_pred", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "segmentation_filtered", "[", "anomaly_seg_pred", ">", "0", "]", "=", "1", "\n", "segmentation_filtered", "[", "mask_roi", "==", "255", "]", "=", "0", "\n", "\n", "return", "anomaly_instances", "[", "mask_roi", "]", ",", "anomaly_seg_pred", "[", "mask_roi", "]", ",", "segmentation_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.anomaly_instances_from_mask": [[57, 79], ["numpy.zeros", "numpy.zeros", "numpy.ones", "scipy.ndimage.measurements.label", "scipy.ndimage.measurements.label", "numpy.copy", "label_pixel_gt.copy.copy", "range", "len"], "function", ["None"], ["", "def", "anomaly_instances_from_mask", "(", "segmentation", ":", "np", ".", "ndarray", ",", "label_pixel_gt", ":", "np", ".", "ndarray", ",", "thresh_instsize", ":", "int", "=", "0", ")", ":", "\n", "    ", "anomaly_gt", "=", "np", ".", "zeros", "(", "label_pixel_gt", ".", "shape", ")", "\n", "anomaly_gt", "[", "label_pixel_gt", "==", "1", "]", "=", "1", "\n", "anomaly_pred", "=", "np", ".", "zeros", "(", "label_pixel_gt", ".", "shape", ")", "\n", "anomaly_pred", "[", "segmentation", "==", "1", "]", "=", "1", "\n", "anomaly_pred", "[", "label_pixel_gt", "==", "255", "]", "=", "0", "\n", "\n", "\"\"\"connected components\"\"\"", "\n", "structure", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "anomaly_instances", ",", "n_anomaly", "=", "label", "(", "anomaly_gt", ",", "structure", ")", "\n", "anomaly_seg_pred", ",", "n_seg_pred", "=", "label", "(", "anomaly_pred", ",", "structure", ")", "\n", "\n", "\"\"\"remove ground truth connected components below size threshold\"\"\"", "\n", "labeled_mask", "=", "np", ".", "copy", "(", "anomaly_instances", ")", "\n", "label_pixel_gt", "=", "label_pixel_gt", ".", "copy", "(", ")", "# copy for editing", "\n", "for", "comp", "in", "range", "(", "n_anomaly", "+", "1", ")", ":", "\n", "        ", "if", "len", "(", "anomaly_instances", "[", "labeled_mask", "==", "comp", "]", ")", "<", "thresh_instsize", ":", "\n", "            ", "label_pixel_gt", "[", "labeled_mask", "==", "comp", "]", "=", "255", "\n", "\n", "", "", "\"\"\"restrict to region of interest\"\"\"", "\n", "mask_roi", "=", "label_pixel_gt", "<", "255", "\n", "return", "anomaly_instances", "[", "mask_roi", "]", ",", "anomaly_seg_pred", "[", "mask_roi", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.save_anomaly_mask": [[81, 91], ["numpy.copy", "jupyter_show_image.imwrite", "print", "np.copy.astype"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "def", "save_anomaly_mask", "(", "anomaly_p", ":", "np", ".", "ndarray", ",", "thresh_p", ":", "float", ",", "save_path", ":", "str", ")", ":", "\n", "\n", "    ", "\"\"\"segmentation from pixel-wise anomaly scores\"\"\"", "\n", "segmentation", "=", "np", ".", "copy", "(", "anomaly_p", ")", "\n", "segmentation", "[", "anomaly_p", ">", "thresh_p", "]", "=", "1", "\n", "segmentation", "[", "anomaly_p", "<=", "thresh_p", "]", "=", "0", "\n", "\n", "# Image.fromarray(segmentation.astype('uint8')).save(save_path)", "\n", "imwrite", "(", "save_path", ",", "segmentation", ".", "astype", "(", "'uint8'", ")", ")", "\n", "print", "(", "\"Saved:\"", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.segment_metrics": [[93, 150], ["numpy.linspace", "numpy.unique", "numpy.unique", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "easydict.EasyDict", "numpy.unique", "len", "len", "np.array.append", "np.array.append", "numpy.unique", "len", "len", "np.array.append", "np.array.append", "np.array.append", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.isin", "numpy.logical_and", "numpy.sum", "numpy.sum", "numpy.isin", "numpy.logical_and", "numpy.sum", "numpy.sum", "str", "str", "str", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "int", "int", "int", "numpy.isin", "numpy.isin"], "function", ["None"], ["", "def", "segment_metrics", "(", "anomaly_instances", ",", "anomaly_seg_pred", ",", "iou_thresholds", "=", "np", ".", "linspace", "(", "0.25", ",", "0.75", ",", "11", ",", "endpoint", "=", "True", ")", ")", ":", "\n", "    ", "\"\"\"\n    function that computes the segments metrics based on the adjusted IoU\n    anomaly_instances: (numpy array) anomaly instance annoation\n    anomaly_seg_pred: (numpy array) anomaly instance prediction\n    iou_threshold: (float) threshold for true positive\n    \"\"\"", "\n", "\n", "\"\"\"Loop over ground truth instances\"\"\"", "\n", "sIoU_gt", "=", "[", "]", "\n", "size_gt", "=", "[", "]", "\n", "\n", "for", "i", "in", "np", ".", "unique", "(", "anomaly_instances", "[", "anomaly_instances", ">", "0", "]", ")", ":", "\n", "        ", "tp_loc", "=", "anomaly_seg_pred", "[", "anomaly_instances", "==", "i", "]", "\n", "seg_ind", "=", "np", ".", "unique", "(", "tp_loc", "[", "tp_loc", "!=", "0", "]", ")", "\n", "\n", "\"\"\"calc area of intersection\"\"\"", "\n", "intersection", "=", "len", "(", "tp_loc", "[", "np", ".", "isin", "(", "tp_loc", ",", "seg_ind", ")", "]", ")", "\n", "adjustment", "=", "len", "(", "\n", "anomaly_seg_pred", "[", "np", ".", "logical_and", "(", "~", "np", ".", "isin", "(", "anomaly_instances", ",", "[", "0", ",", "i", "]", ")", ",", "np", ".", "isin", "(", "anomaly_seg_pred", ",", "seg_ind", ")", ")", "]", ")", "\n", "\n", "adjusted_union", "=", "np", ".", "sum", "(", "np", ".", "isin", "(", "anomaly_seg_pred", ",", "seg_ind", ")", ")", "+", "np", ".", "sum", "(", "\n", "anomaly_instances", "==", "i", ")", "-", "intersection", "-", "adjustment", "\n", "sIoU_gt", ".", "append", "(", "intersection", "/", "adjusted_union", ")", "\n", "size_gt", ".", "append", "(", "np", ".", "sum", "(", "anomaly_instances", "==", "i", ")", ")", "\n", "\n", "", "\"\"\"Loop over prediction instances\"\"\"", "\n", "sIoU_pred", "=", "[", "]", "\n", "size_pred", "=", "[", "]", "\n", "prec_pred", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "unique", "(", "anomaly_seg_pred", "[", "anomaly_seg_pred", ">", "0", "]", ")", ":", "\n", "        ", "tp_loc", "=", "anomaly_instances", "[", "anomaly_seg_pred", "==", "i", "]", "\n", "seg_ind", "=", "np", ".", "unique", "(", "tp_loc", "[", "tp_loc", "!=", "0", "]", ")", "\n", "intersection", "=", "len", "(", "tp_loc", "[", "np", ".", "isin", "(", "tp_loc", ",", "seg_ind", ")", "]", ")", "\n", "adjustment", "=", "len", "(", "\n", "anomaly_instances", "[", "np", ".", "logical_and", "(", "~", "np", ".", "isin", "(", "anomaly_seg_pred", ",", "[", "0", ",", "i", "]", ")", ",", "np", ".", "isin", "(", "anomaly_instances", ",", "seg_ind", ")", ")", "]", ")", "\n", "adjusted_union", "=", "np", ".", "sum", "(", "np", ".", "isin", "(", "anomaly_instances", ",", "seg_ind", ")", ")", "+", "np", ".", "sum", "(", "\n", "anomaly_seg_pred", "==", "i", ")", "-", "intersection", "-", "adjustment", "\n", "sIoU_pred", ".", "append", "(", "intersection", "/", "adjusted_union", ")", "\n", "size_pred", ".", "append", "(", "np", ".", "sum", "(", "anomaly_seg_pred", "==", "i", ")", ")", "\n", "prec_pred", ".", "append", "(", "intersection", "/", "np", ".", "sum", "(", "anomaly_seg_pred", "==", "i", ")", ")", "\n", "\n", "", "sIoU_gt", "=", "np", ".", "array", "(", "sIoU_gt", ")", "\n", "sIoU_pred", "=", "np", ".", "array", "(", "sIoU_pred", ")", "\n", "size_gt", "=", "np", ".", "array", "(", "(", "size_gt", ")", ")", "\n", "size_pred", "=", "np", ".", "array", "(", "size_pred", ")", "\n", "prec_pred", "=", "np", ".", "array", "(", "prec_pred", ")", "\n", "\n", "\"\"\"create results dictionary\"\"\"", "\n", "results", "=", "EasyDict", "(", "sIoU_gt", "=", "sIoU_gt", ",", "sIoU_pred", "=", "sIoU_pred", ",", "size_gt", "=", "size_gt", ",", "size_pred", "=", "size_pred", ",", "prec_pred", "=", "prec_pred", ")", "\n", "for", "t", "in", "iou_thresholds", ":", "\n", "        ", "results", "[", "\"tp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "np", ".", "count_nonzero", "(", "sIoU_gt", ">=", "t", ")", "\n", "results", "[", "\"fn_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "np", ".", "count_nonzero", "(", "sIoU_gt", "<", "t", ")", "\n", "# results[\"fp_\" + str(int(t*100))] = np.count_nonzero(sIoU_pred < t)", "\n", "results", "[", "\"fp_\"", "+", "str", "(", "int", "(", "t", "*", "100", ")", ")", "]", "=", "np", ".", "count_nonzero", "(", "prec_pred", "<", "t", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Max_softmax.__init__": [[23, 30], ["utils.init_pytorch_DeepWV3Plus", "checkpoint_path.is_file", "os.path.join", "utils.download_checkpoint"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "checkpoint_path", "=", "DIR_CHECKPOINTS", "/", "\"DeepLabV3+_WideResNet38_baseline.pth\"", "\n", "if", "not", "checkpoint_path", ".", "is_file", "(", ")", ":", "\n", "            ", "checkpoint_download_url", "=", "os", ".", "path", ".", "join", "(", "\"https://uni-wuppertal.sciebo.de/s/\"", ",", "modelid", ",", "\"download\"", ")", "\n", "filename", "=", "download_checkpoint", "(", "checkpoint_download_url", ",", "DIR_CHECKPOINTS", ")", "\n", "(", "DIR_CHECKPOINTS", "/", "filename", ")", ".", "rename", "(", "checkpoint_path", ")", "\n", "", "self", ".", "model", "=", "init_pytorch_DeepWV3Plus", "(", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Max_softmax.anomaly_score": [[31, 34], ["utils.get_softmax", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_softmax"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "probs", "=", "get_softmax", "(", "self", ".", "model", ",", "image", ")", "\n", "return", "1", "-", "np", ".", "max", "(", "probs", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.ODIN.__init__": [[37, 46], ["utils.init_pytorch_DeepWV3Plus", "checkpoint_path.is_file", "os.path.join", "utils.download_checkpoint"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ",", "magnitude", "=", "0.0001", ",", "temperature", "=", "3.0", ")", ":", "\n", "        ", "self", ".", "magnitude", "=", "magnitude", "# default magnitude tuned on LaF", "\n", "self", ".", "temperature", "=", "temperature", "# default temperature tuned on LaF", "\n", "checkpoint_path", "=", "DIR_CHECKPOINTS", "/", "\"DeepLabV3+_WideResNet38_baseline.pth\"", "\n", "if", "not", "checkpoint_path", ".", "is_file", "(", ")", ":", "\n", "            ", "checkpoint_download_url", "=", "os", ".", "path", ".", "join", "(", "\"https://uni-wuppertal.sciebo.de/s/\"", ",", "modelid", ",", "\"download\"", ")", "\n", "filename", "=", "download_checkpoint", "(", "checkpoint_download_url", ",", "DIR_CHECKPOINTS", ")", "\n", "(", "DIR_CHECKPOINTS", "/", "filename", ")", ".", "rename", "(", "checkpoint_path", ")", "\n", "", "self", ".", "model", "=", "init_pytorch_DeepWV3Plus", "(", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.ODIN.anomaly_score": [[47, 50], ["utils.get_calibrated_softmax", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_calibrated_softmax"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "calibrated_softmax", "=", "get_calibrated_softmax", "(", "self", ".", "model", ",", "image", ",", "self", ".", "magnitude", ",", "self", ".", "temperature", ",", "as_numpy", "=", "True", ")", "\n", "return", "1", "-", "np", ".", "max", "(", "calibrated_softmax", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Mahalanobis.__init__": [[53, 66], ["utils.mahalanobis_modification", "os.path.join", "utils.download_zip", "os.remove", "h5py.File", "numpy.array", "baselines.Mahalanobis.arithmetic_means.reshape", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.init_pytorch_DeepWV3Plus", "checkpoint_path.is_file", "estimates_path.is_file", "baselines.Mahalanobis.inverse_covariances.astype"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.mahalanobis_modification", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_zip", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "checkpoint_path", "=", "DIR_CHECKPOINTS", "/", "\"DeepLabV3+_WideResNet38_baseline.pth\"", "\n", "estimates_path", "=", "DIR_CHECKPOINTS", "/", "\"cityscapes_train_estimates_global.h5\"", "\n", "if", "not", "checkpoint_path", ".", "is_file", "(", ")", "or", "not", "estimates_path", ".", "is_file", "(", ")", ":", "\n", "            ", "zip_download_url", "=", "os", ".", "path", ".", "join", "(", "\"https://uni-wuppertal.sciebo.de/s/\"", ",", "modelid", ",", "\"download\"", ")", "\n", "filename", "=", "download_zip", "(", "zip_download_url", ",", "DIR_CHECKPOINTS", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "with", "h5py", ".", "File", "(", "estimates_path", ",", "\"r\"", ")", "as", "data", ":", "\n", "            ", "self", ".", "arithmetic_means", "=", "np", ".", "array", "(", "data", "[", "'means'", "]", ")", "\n", "self", ".", "arithmetic_means", "=", "self", ".", "arithmetic_means", ".", "reshape", "(", "self", ".", "arithmetic_means", ".", "shape", "[", ":", "2", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "self", ".", "inverse_covariances", "=", "np", ".", "array", "(", "data", "[", "'inverse'", "]", ")", "\n", "self", ".", "inverse_covariances", "=", "torch", ".", "from_numpy", "(", "self", ".", "inverse_covariances", ".", "astype", "(", "\"float\"", ")", ")", "\n", "", "self", ".", "model", "=", "mahalanobis_modification", "(", "init_pytorch_DeepWV3Plus", "(", ")", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Mahalanobis.forward_pass": [[67, 69], ["utils.get_activations"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_activations"], ["", "def", "forward_pass", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "get_activations", "(", "self", ".", "model", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Mahalanobis.anomaly_score": [[70, 81], ["baselines.Mahalanobis.forward_pass", "numpy.zeros", "range", "numpy.min().astype", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum().numpy", "torch.einsum().numpy", "torch.einsum().numpy", "torch.einsum().numpy", "torch.einsum().numpy.reshape", "torch.einsum().numpy.reshape", "baselines.Mahalanobis.reshape", "torch.from_numpy.astype", "torch.from_numpy.astype", "numpy.min", "len", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Mahalanobis.forward_pass"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "activations", "=", "self", ".", "forward_pass", "(", "image", ")", "\n", "output_shape", "=", "activations", ".", "shape", "\n", "mahalanobis", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "arithmetic_means", ")", ",", ")", "+", "output_shape", "[", "1", ":", "]", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "self", ".", "arithmetic_means", ")", ")", ":", "\n", "            ", "z", "=", "activations", ".", "reshape", "(", "output_shape", "[", "0", "]", ",", "-", "1", ")", "-", "self", ".", "arithmetic_means", "[", "c", "]", "\n", "z", "=", "torch", ".", "from_numpy", "(", "z", ".", "astype", "(", "\"float\"", ")", ")", "\n", "left", "=", "torch", ".", "einsum", "(", "'ij,ik->kj'", ",", "z", ",", "self", ".", "inverse_covariances", "[", "c", "]", ")", "\n", "score", "=", "torch", ".", "einsum", "(", "'ij,ij->j'", ",", "left", ",", "z", ")", ".", "numpy", "(", ")", "\n", "mahalanobis", "[", "c", "]", "=", "score", ".", "reshape", "(", "output_shape", "[", "1", ":", "]", ")", "\n", "", "return", "np", ".", "min", "(", "mahalanobis", ",", "axis", "=", "0", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Entropy_max.__init__": [[85, 92], ["utils.init_pytorch_DeepWV3Plus", "checkpoint_path.is_file", "os.path.join", "utils.download_checkpoint"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_checkpoint"], ["def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "checkpoint_path", "=", "DIR_CHECKPOINTS", "/", "\"DeepLabV3+_WideResNet38_epoch_4_alpha_0.9.pth\"", "\n", "if", "not", "checkpoint_path", ".", "is_file", "(", ")", ":", "\n", "            ", "checkpoint_download_url", "=", "os", ".", "path", ".", "join", "(", "\"https://uni-wuppertal.sciebo.de/s/\"", ",", "modelid", ",", "\"download\"", ")", "\n", "filename", "=", "download_checkpoint", "(", "checkpoint_download_url", ",", "DIR_CHECKPOINTS", ")", "\n", "(", "DIR_CHECKPOINTS", "/", "filename", ")", ".", "rename", "(", "checkpoint_path", ")", "\n", "", "self", ".", "model", "=", "init_pytorch_DeepWV3Plus", "(", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.Entropy_max.anomaly_score": [[93, 95], ["utils.get_entropy"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_entropy"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "get_entropy", "(", "self", ".", "model", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.voidclassifier.__init__": [[98, 102], ["utils.load_gdrive_file", "tensorflow.compat.v1.enable_resource_variables", "tensorflow.saved_model.load", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.load_gdrive_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "load_gdrive_file", "(", "modelid", ",", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "enable_resource_variables", "(", ")", "\n", "self", ".", "model", "=", "tf", ".", "saved_model", ".", "load", "(", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.voidclassifier.anomaly_score": [[103, 110], ["tensorflow.cast", "tensorflow.image.resize", "tensorflow.image.resize", "tensorflow.squeeze().numpy().astype", "tensorflow.squeeze().numpy", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "image_shape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "(", "1024", ",", "2048", ")", ")", "\n", "out", "=", "self", ".", "model", ".", "signatures", "[", "'serving_default'", "]", "(", "image", "[", "tf", ".", "newaxis", "]", ")", "[", "'anomaly_score'", "]", "\n", "out", "=", "tf", ".", "image", ".", "resize", "(", "out", "[", "...", ",", "tf", ".", "newaxis", "]", ",", "image_shape", ")", "\n", "return", "tf", ".", "squeeze", "(", "out", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.dropout.__init__": [[113, 117], ["utils.load_gdrive_file", "tensorflow.compat.v1.enable_resource_variables", "tensorflow.saved_model.load", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.load_gdrive_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "load_gdrive_file", "(", "modelid", ",", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "enable_resource_variables", "(", ")", "\n", "self", ".", "model", "=", "tf", ".", "saved_model", ".", "load", "(", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.dropout.anomaly_score": [[118, 125], ["tensorflow.cast", "tensorflow.image.resize", "tensorflow.image.resize", "tensorflow.squeeze().numpy().astype", "tensorflow.squeeze().numpy", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "image_shape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "(", "1024", ",", "2048", ")", ")", "\n", "out", "=", "self", ".", "model", ".", "signatures", "[", "'serving_default'", "]", "(", "image", "[", "tf", ".", "newaxis", "]", ")", "[", "'anomaly_score'", "]", "\n", "out", "=", "tf", ".", "image", ".", "resize", "(", "out", "[", "...", ",", "tf", ".", "newaxis", "]", ",", "image_shape", ")", "\n", "return", "tf", ".", "squeeze", "(", "out", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.mindensity.__init__": [[128, 132], ["utils.load_gdrive_file", "tensorflow.compat.v1.enable_resource_variables", "tensorflow.saved_model.load", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.load_gdrive_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["    ", "def", "__init__", "(", "self", ",", "modelid", ")", ":", "\n", "        ", "load_gdrive_file", "(", "modelid", ",", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "enable_resource_variables", "(", ")", "\n", "self", ".", "model", "=", "tf", ".", "saved_model", ".", "load", "(", "str", "(", "DIR_CHECKPOINTS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.mindensity.anomaly_score": [[133, 140], ["tensorflow.cast", "tensorflow.image.resize", "tensorflow.image.resize", "tensorflow.squeeze().numpy().astype", "tensorflow.squeeze().numpy", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "image_shape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "(", "1024", ",", "2048", ")", ")", "\n", "out", "=", "self", ".", "model", ".", "signatures", "[", "'serving_default'", "]", "(", "image", "[", "tf", ".", "newaxis", "]", ")", "[", "'anomaly_score'", "]", "\n", "out", "=", "tf", ".", "image", ".", "resize", "(", "out", "[", "...", ",", "tf", ".", "newaxis", "]", ",", "image_shape", ")", "\n", "return", "tf", ".", "squeeze", "(", "out", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.SynBoost.__init__": [[144, 161], ["os.path.join", "baselines.SynBoost.set_seeds", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "utils.get_segmentation", "utils.get_synthesis", "utils.get_dissimilarity", "utils.get_synboost_transformations", "os.path.exists", "os.path.join", "utils.download_tar", "os.remove", "os.rename", "int", "options.config_class.Config", "options.config_class.Config", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.SynBoost.set_seeds", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_segmentation", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_synthesis", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_dissimilarity", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_synboost_transformations", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_tar"], ["def", "__init__", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "DIR_CHECKPOINTS", ",", "\"synboost_weights\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "pretrained_weights_url", "=", "os", ".", "path", ".", "join", "(", "\"http://robotics.ethz.ch/~asl-datasets/Dissimilarity/models.tar\"", ")", "\n", "filename", "=", "download_tar", "(", "pretrained_weights_url", ",", "DIR_CHECKPOINTS", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "DIR_CHECKPOINTS", ",", "\"models\"", ")", ",", "os", ".", "path", ".", "join", "(", "DIR_CHECKPOINTS", ",", "\"synboost_weights\"", ")", ")", "\n", "\n", "", "self", ".", "set_seeds", "(", "int", "(", "seed", ")", ")", "\n", "# Common options for all models", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "self", ".", "seg_net", "=", "get_segmentation", "(", "checkpoints_dir", ",", "Config", "(", ")", ")", "\n", "self", ".", "syn_net", "=", "get_synthesis", "(", "checkpoints_dir", ",", "Config", "(", ")", ")", "\n", "self", ".", "diss_model", ",", "self", ".", "prior", ",", "self", ".", "ensemble", "=", "get_dissimilarity", "(", "checkpoints_dir", ")", "\n", "# self.get_transformations()", "\n", "self", ".", "img_transform", ",", "self", ".", "transform_semantic", ",", "self", ".", "transform_image_syn", ",", "self", ".", "vgg_diff", ",", "self", ".", "base_transforms_diss", ",", "self", ".", "norm_transform_diss", "=", "get_synboost_transformations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.SynBoost.anomaly_score": [[162, 259], ["PIL.Image.fromarray", "PIL.Image.fromarray.resize", "baselines.SynBoost.img_transform", "torch.softmax", "torch.softmax", "numpy.argmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.zeros_like", "image_segmentation.datasets.cityscapes_labels.label2trainid.items", "PIL.Image.fromarray", "baselines.SynBoost.transform_image_syn", "label_tensor.clone", "baselines.SynBoost.syn_net", "PIL.Image.fromarray", "entropy.cpu().numpy.cpu().numpy.cpu().numpy", "PIL.Image.fromarray.cpu().numpy", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "baselines.SynBoost.base_transforms_diss", "baselines.SynBoost.base_transforms_diss", "baselines.SynBoost.norm_transform_diss().unsqueeze().cuda", "baselines.SynBoost.norm_transform_diss().unsqueeze().cuda", "baselines.SynBoost.vgg_diff", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "PIL.Image.fromarray.cpu().numpy", "PIL.Image.fromarray", "baselines.SynBoost.base_transforms_diss().unsqueeze().cuda", "baselines.SynBoost.base_transforms_diss().unsqueeze().cuda", "baselines.SynBoost.base_transforms_diss().unsqueeze().cuda", "image_dissimilarity.data.cityscapes_dataset.one_hot_encoding().unsqueeze().cuda", "torch.softmax.cpu().numpy", "numpy.array", "numpy.array.astype", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "baselines.SynBoost.seg_net", "baselines.SynBoost.cpu().numpy().squeeze", "entropy.cpu().numpy.cpu().numpy.max", "numpy.zeros_like.astype", "baselines.SynBoost.transform_semantic", "label_tensor.unsqueeze", "label_tensor.clone.unsqueeze", "baselines.SynBoost.unsqueeze", "entropy.cpu().numpy.cpu().numpy.astype().squeeze", "PIL.Image.fromarray.astype().squeeze", "numpy.argmax.astype", "baselines.SynBoost.base_transforms_diss", "PIL.Image.fromarray.squeeze", "PIL.Image.fromarray.squeeze", "PIL.Image.fromarray.astype", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "PIL.Image.fromarray().resize", "baselines.SynBoost.unsqueeze().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "entropy.cpu().numpy.cpu().numpy.min", "result.max", "numpy.transpose", "entropy.cpu().numpy.cpu().numpy.cpu", "PIL.Image.fromarray.cpu", "baselines.SynBoost.norm_transform_diss().unsqueeze", "baselines.SynBoost.norm_transform_diss().unsqueeze", "PIL.Image.fromarray.squeeze", "PIL.Image.fromarray.cpu", "baselines.SynBoost.base_transforms_diss().unsqueeze", "baselines.SynBoost.base_transforms_diss().unsqueeze", "baselines.SynBoost.base_transforms_diss().unsqueeze", "image_dissimilarity.data.cityscapes_dataset.one_hot_encoding().unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.cpu", "baselines.SynBoost.cpu().numpy", "result.min", "numpy.where", "baselines.SynBoost.squeeze().cpu().numpy", "entropy.cpu().numpy.cpu().numpy.astype", "PIL.Image.fromarray.astype", "baselines.SynBoost.diss_model", "baselines.SynBoost.diss_model", "baselines.SynBoost.cpu().numpy", "PIL.Image.fromarray", "baselines.SynBoost.unsqueeze", "baselines.SynBoost.norm_transform_diss", "baselines.SynBoost.norm_transform_diss", "baselines.SynBoost.base_transforms_diss", "baselines.SynBoost.base_transforms_diss", "baselines.SynBoost.base_transforms_diss", "image_dissimilarity.data.cityscapes_dataset.one_hot_encoding", "torch.softmax.squeeze", "baselines.SynBoost.cpu", "baselines.SynBoost.squeeze().cpu", "baselines.SynBoost.cpu", "baselines.SynBoost.squeeze"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.one_hot_encoding"], ["", "def", "anomaly_score", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "image_og_h", "=", "image", ".", "size", "[", "1", "]", "\n", "image_og_w", "=", "image", ".", "size", "[", "0", "]", "\n", "img", "=", "image", ".", "resize", "(", "(", "2048", ",", "1024", ")", ")", "\n", "img_tensor", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "\n", "# predict segmentation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "seg_outs", "=", "self", ".", "seg_net", "(", "img_tensor", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "seg_softmax_out", "=", "F", ".", "softmax", "(", "seg_outs", ",", "dim", "=", "1", ")", "\n", "seg_final", "=", "np", ".", "argmax", "(", "seg_outs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "axis", "=", "0", ")", "# segmentation map", "\n", "\n", "# get entropy", "\n", "entropy", "=", "torch", ".", "sum", "(", "-", "seg_softmax_out", "*", "torch", ".", "log", "(", "seg_softmax_out", ")", ",", "dim", "=", "1", ")", "\n", "entropy", "=", "(", "entropy", "-", "entropy", ".", "min", "(", ")", ")", "/", "entropy", ".", "max", "(", ")", "\n", "entropy", "*=", "255", "# for later use in the dissimilarity", "\n", "\n", "# get softmax distance", "\n", "distance", ",", "_", "=", "torch", ".", "topk", "(", "seg_softmax_out", ",", "2", ",", "dim", "=", "1", ")", "\n", "max_logit", "=", "distance", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "max2nd_logit", "=", "distance", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "result", "=", "max_logit", "-", "max2nd_logit", "\n", "distance", "=", "1", "-", "(", "result", "-", "result", ".", "min", "(", ")", ")", "/", "result", ".", "max", "(", ")", "\n", "distance", "*=", "255", "# for later use in the dissimilarity", "\n", "\n", "# get label map for synthesis model", "\n", "label_out", "=", "np", ".", "zeros_like", "(", "seg_final", ")", "\n", "for", "label_id", ",", "train_id", "in", "label2trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_out", "[", "np", ".", "where", "(", "seg_final", "==", "train_id", ")", "]", "=", "label_id", "\n", "", "label_img", "=", "Image", ".", "fromarray", "(", "(", "label_out", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# prepare for synthesis", "\n", "label_tensor", "=", "self", ".", "transform_semantic", "(", "label_img", ")", "*", "255.0", "\n", "label_tensor", "[", "label_tensor", "==", "255", "]", "=", "35", "# 'unknown' is opt.label_nc", "\n", "image_tensor", "=", "self", ".", "transform_image_syn", "(", "img", ")", "\n", "# Get instance map in right format. Since prediction doesn't have instance map, we use semantic instead", "\n", "instance_tensor", "=", "label_tensor", ".", "clone", "(", ")", "\n", "\n", "# run synthesis", "\n", "syn_input", "=", "{", "'label'", ":", "label_tensor", ".", "unsqueeze", "(", "0", ")", ",", "'instance'", ":", "instance_tensor", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'image'", ":", "image_tensor", ".", "unsqueeze", "(", "0", ")", "}", "\n", "generated", "=", "self", ".", "syn_net", "(", "syn_input", ",", "mode", "=", "'inference'", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "generated", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "\n", "synthesis_final_img", "=", "Image", ".", "fromarray", "(", "(", "image_numpy", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# prepare dissimilarity", "\n", "entropy", "=", "entropy", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "distance", "=", "distance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "entropy_img", "=", "Image", ".", "fromarray", "(", "entropy", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ")", "\n", "distance", "=", "Image", ".", "fromarray", "(", "distance", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ")", "\n", "semantic", "=", "Image", ".", "fromarray", "(", "(", "seg_final", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# get initial transformation", "\n", "semantic_tensor", "=", "self", ".", "base_transforms_diss", "(", "semantic", ")", "*", "255", "\n", "syn_image_tensor", "=", "self", ".", "base_transforms_diss", "(", "synthesis_final_img", ")", "\n", "image_tensor", "=", "self", ".", "base_transforms_diss", "(", "img", ")", "\n", "syn_image_tensor", "=", "self", ".", "norm_transform_diss", "(", "syn_image_tensor", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "image_tensor", "=", "self", ".", "norm_transform_diss", "(", "image_tensor", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# get softmax difference", "\n", "perceptual_diff", "=", "self", ".", "vgg_diff", "(", "image_tensor", ",", "syn_image_tensor", ")", "\n", "min_v", "=", "torch", ".", "min", "(", "perceptual_diff", ".", "squeeze", "(", ")", ")", "\n", "max_v", "=", "torch", ".", "max", "(", "perceptual_diff", ".", "squeeze", "(", ")", ")", "\n", "perceptual_diff", "=", "(", "perceptual_diff", ".", "squeeze", "(", ")", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", ")", "\n", "perceptual_diff", "*=", "255", "\n", "perceptual_diff", "=", "perceptual_diff", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "perceptual_diff", "=", "Image", ".", "fromarray", "(", "perceptual_diff", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# finish transformation", "\n", "perceptual_diff_tensor", "=", "self", ".", "base_transforms_diss", "(", "perceptual_diff", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "entropy_tensor", "=", "self", ".", "base_transforms_diss", "(", "entropy_img", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "distance_tensor", "=", "self", ".", "base_transforms_diss", "(", "distance", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# hot encode semantic map", "\n", "semantic_tensor", "[", "semantic_tensor", "==", "255", "]", "=", "20", "# 'ignore label is 20'", "\n", "semantic_tensor", "=", "one_hot_encoding", "(", "semantic_tensor", ",", "20", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# run dissimilarity", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "prior", ":", "\n", "                ", "diss_pred", "=", "F", ".", "softmax", "(", "\n", "self", ".", "diss_model", "(", "image_tensor", ",", "syn_image_tensor", ",", "semantic_tensor", ",", "entropy_tensor", ",", "\n", "perceptual_diff_tensor", ",", "distance_tensor", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "diss_pred", "=", "F", ".", "softmax", "(", "self", ".", "diss_model", "(", "image_tensor", ",", "syn_image_tensor", ",", "semantic_tensor", ")", ",", "dim", "=", "1", ")", "\n", "", "", "diss_pred", "=", "diss_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# do ensemble if necessary", "\n", "if", "self", ".", "ensemble", ":", "\n", "            ", "diss_pred", "=", "diss_pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "0.75", "+", "entropy_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "0.25", "\n", "", "else", ":", "\n", "            ", "diss_pred", "=", "diss_pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "diss_pred", ".", "squeeze", "(", ")", ")", ".", "resize", "(", "(", "image_og_w", ",", "image_og_h", ")", ")", ")", "\n", "return", "out", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.baselines.SynBoost.set_seeds": [[260, 266], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "set_seeds", "(", "seed", "=", "0", ")", ":", "\n", "# set seeds for reproducibility", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus": [[24, 35], ["print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.DataParallel", "print", "network.cuda().eval.cuda().eval", "image_segmentation.network.deepv3.DeepWV3Plus", "print", "network.cuda().eval.load_state_dict", "print", "network.cuda().eval.cuda", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["def", "init_pytorch_DeepWV3Plus", "(", "ckpt_path", "=", "None", ",", "num_classes", "=", "19", ")", ":", "\n", "    ", "print", "(", "\"Load PyTorch model\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "network", "=", "nn", ".", "DataParallel", "(", "DeepWV3Plus", "(", "num_classes", ")", ")", "\n", "print", "(", "\"... ok\"", ")", "\n", "if", "ckpt_path", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Checkpoint file: %s\"", "%", "ckpt_path", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_path", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"... ok\\n\"", ")", "\n", "", "network", "=", "network", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_checkpoint": [[37, 42], ["print", "pathlib.Path().mkdir", "wget.download", "pathlib.Path", "str"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "def", "download_checkpoint", "(", "url", ",", "save_dir", ")", ":", "\n", "    ", "print", "(", "\"Download PyTorch checkpoint\"", ")", "\n", "Path", "(", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "wget", ".", "download", "(", "url", ",", "out", "=", "str", "(", "save_dir", ")", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_tar": [[44, 52], ["print", "wget.download", "os.path.exists", "os.makedirs", "tarfile.open", "tar_file.extractall", "str", "pathlib.Path"], "function", ["None"], ["", "def", "download_tar", "(", "url", ",", "save_dir", ")", ":", "\n", "    ", "print", "(", "\"Download .tar and de-compress\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "filename", "=", "wget", ".", "download", "(", "url", ",", "out", "=", "str", "(", "save_dir", ")", ")", "\n", "with", "tarfile", ".", "open", "(", "Path", "(", "save_dir", ")", "/", "filename", ",", "'r'", ")", "as", "tar_file", ":", "\n", "        ", "tar_file", ".", "extractall", "(", "save_dir", ")", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.download_zip": [[54, 61], ["print", "pathlib.Path().mkdir", "wget.download", "zipfile.ZipFile", "zip_ref.extractall", "pathlib.Path", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "def", "download_zip", "(", "url", ",", "save_dir", ")", ":", "\n", "    ", "print", "(", "\"Download .zip and de-compress\"", ")", "\n", "Path", "(", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "wget", ".", "download", "(", "url", ",", "out", "=", "str", "(", "save_dir", ")", ")", "\n", "with", "ZipFile", "(", "Path", "(", "save_dir", ")", "/", "filename", ",", "'r'", ")", "as", "zip_ref", ":", "\n", "        ", "zip_ref", ".", "extractall", "(", "save_dir", ")", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.load_gdrive_file": [[63, 71], ["print", "os.path.join", "zipfile.ZipFile().extractall", "os.path.expanduser", "os.path.exists", "gdown.download", "zipfile.ZipFile"], "function", ["None"], ["", "def", "load_gdrive_file", "(", "file_id", ",", "save_dir", ",", "ending", "=", "'zip'", ")", ":", "\n", "    ", "print", "(", "\"Downloads files from google drive, caches files that are already downloaded.\"", ")", "\n", "filename", "=", "'{}.{}'", ".", "format", "(", "file_id", ",", "ending", ")", "if", "ending", "else", "file_id", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'~/.keras/datasets'", ")", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "gdown", ".", "download", "(", "'https://drive.google.com/uc?id={}'", ".", "format", "(", "file_id", ")", ",", "filename", ",", "quiet", "=", "False", ")", "\n", "", "ZipFile", "(", "filename", ")", ".", "extractall", "(", "save_dir", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_softmax": [[73, 84], ["torchvision.transforms.Compose.", "x.unsqueeze_().cuda.unsqueeze_().cuda", "torch.softmax", "torchvision.transforms.Compose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "network", "[].astype", "x.unsqueeze_().cuda.unsqueeze_", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "[].astype.data.cpu().numpy", "[].astype.data.cpu"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax"], ["", "def", "get_softmax", "(", "network", ",", "image", ",", "transform", "=", "None", ",", "as_numpy", "=", "True", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "", "x", "=", "transform", "(", "image", ")", "\n", "x", "=", "x", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "y", "=", "network", "(", "x", ")", "\n", "", "probs", "=", "F", ".", "softmax", "(", "y", ",", "1", ")", "\n", "if", "as_numpy", ":", "\n", "        ", "probs", "=", "probs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_entropy": [[86, 92], ["utils.get_softmax", "torch.div", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "[].astype", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "[].astype.data.cpu().numpy", "[].astype.data.cpu"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_softmax"], ["", "def", "get_entropy", "(", "network", ",", "image", ",", "transform", "=", "None", ",", "as_numpy", "=", "True", ")", ":", "\n", "    ", "probs", "=", "get_softmax", "(", "network", ",", "image", ",", "transform", ",", "as_numpy", "=", "False", ")", "\n", "entropy", "=", "torch", ".", "div", "(", "torch", ".", "sum", "(", "-", "probs", "*", "torch", ".", "log", "(", "probs", ")", ",", "dim", "=", "1", ")", ",", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "probs", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "if", "as_numpy", ":", "\n", "        ", "entropy", "=", "entropy", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_calibrated_softmax": [[93, 107], ["torchvision.transforms.Compose.", "torch.sub.unsqueeze_().cuda", "utils.get_gradient_wrt_input", "torch.sub", "torch.sub", "torch.sub", "torch.softmax", "torchvision.transforms.Compose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "network", "[].astype", "torch.sub.unsqueeze_", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "[].astype.data.cpu().numpy", "[].astype.data.cpu"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_gradient_wrt_input", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax"], ["", "def", "get_calibrated_softmax", "(", "network", ",", "image", ",", "magnitude", ",", "temperature", ",", "transform", "=", "None", ",", "as_numpy", "=", "False", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "", "x", "=", "transform", "(", "image", ")", "\n", "x", "=", "x", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "p", "=", "get_gradient_wrt_input", "(", "network", ",", "image", ",", "transform", ")", "\n", "x", "=", "torch", ".", "sub", "(", "x", ",", "p", ",", "alpha", "=", "magnitude", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "y", "=", "network", "(", "x", ")", "\n", "", "y", "=", "y", "/", "temperature", "\n", "probs", "=", "F", ".", "softmax", "(", "y", ",", "1", ")", "\n", "if", "as_numpy", ":", "\n", "        ", "probs", "=", "probs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_gradient_wrt_input": [[109, 125], ["torchvision.transforms.Compose.", "x.unsqueeze_().requires_grad_().cuda.unsqueeze_().requires_grad_().cuda", "network", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "criterion.backward", "torch.sign", "torch.sign", "torch.sign", "torchvision.transforms.Compose", "torch.Softmax", "torch.argmax().detach.cuda", "[].astype", "x.unsqueeze_().requires_grad_().cuda.unsqueeze_().requires_grad_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "x.unsqueeze_().requires_grad_().cuda.unsqueeze_", "[].astype.cpu().detach().numpy", "[].astype.cpu().detach", "[].astype.cpu"], "function", ["None"], ["", "def", "get_gradient_wrt_input", "(", "network", ",", "image", ",", "transform", "=", "None", ",", "as_numpy", "=", "False", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "", "x", "=", "transform", "(", "image", ")", "\n", "x", "=", "x", ".", "unsqueeze_", "(", "0", ")", ".", "requires_grad_", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "network", "(", "x", ")", "\n", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "y", ")", "\n", "pred", "=", "torch", ".", "argmax", "(", "softmax", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "softmax", ",", "pred", ".", "cuda", "(", ")", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad", "=", "-", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "loss", ",", "inputs", "=", "x", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "grad", "=", "torch", ".", "sign", "(", "grad", ")", "\n", "if", "as_numpy", ":", "\n", "        ", "grad", "=", "grad", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.mahalanobis_modification": [[127, 139], ["torch.Sequential", "print", "network.load_state_dict", "print", "network.cuda().eval", "torch.Conv2d", "image_segmentation.network.mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "image_segmentation.network.mynn.Norm2d", "torch.ReLU", "torch.load", "torch.load", "torch.load", "network.cuda"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["", "def", "mahalanobis_modification", "(", "network", ",", "ckpt_path", ")", ":", "\n", "    ", "network", ".", "module", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "48", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "print", "(", "\"Checkpoint file: %s\"", "%", "ckpt_path", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_path", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"... ok\\n\"", ")", "\n", "return", "network", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_activations": [[141, 151], ["torchvision.transforms.Compose.", "x.unsqueeze_().cuda.unsqueeze_().cuda", "torchvision.transforms.Compose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "network", "[].astype", "x.unsqueeze_().cuda.unsqueeze_", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "[].astype.data.cpu().numpy", "[].astype.data.cpu"], "function", ["None"], ["", "def", "get_activations", "(", "network", ",", "image", ",", "transform", "=", "None", ",", "as_numpy", "=", "True", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "", "x", "=", "transform", "(", "image", ")", "\n", "x", "=", "x", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "y", "=", "network", "(", "x", ")", "\n", "", "if", "as_numpy", ":", "\n", "        ", "y", "=", "y", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_segmentation": [[153, 161], ["utils.init_pytorch_DeepWV3Plus", "print", "os.path.join", "image_segmentation.optimizer.restore_snapshot", "segmentation_net.eval", "print"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.init_pytorch_DeepWV3Plus", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.restore_snapshot"], ["", "def", "get_segmentation", "(", "checkpoint_dir", ",", "opt", ")", ":", "\n", "    ", "net", "=", "init_pytorch_DeepWV3Plus", "(", ")", "\n", "print", "(", "'Segmentation Net Built.'", ")", "\n", "snapshot", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "opt", ".", "snapshot", ")", "\n", "segmentation_net", ",", "_", "=", "restore_snapshot", "(", "net", ",", "optimizer", "=", "None", ",", "snapshot", "=", "snapshot", ",", "restore_optimizer_bool", "=", "False", ")", "\n", "segmentation_net", ".", "eval", "(", ")", "\n", "print", "(", "'Segmentation Net Restored.'", ")", "\n", "return", "segmentation_net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_synthesis": [[163, 171], ["print", "image_synthesis.models.pix2pix_model.Pix2PixModel", "image_synthesis.models.pix2pix_model.Pix2PixModel.eval", "print"], "function", ["None"], ["", "def", "get_synthesis", "(", "checkpoints_dir", ",", "opt", ")", ":", "\n", "# Get Synthesis Net", "\n", "    ", "print", "(", "'Synthesis Net Built.'", ")", "\n", "opt", ".", "checkpoints_dir", "=", "checkpoints_dir", "\n", "synthesis_net", "=", "Pix2PixModel", "(", "opt", ")", "\n", "synthesis_net", ".", "eval", "(", ")", "\n", "print", "(", "'Synthesis Net Restored'", ")", "\n", "return", "synthesis_net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_dissimilarity": [[173, 201], ["print", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "DissimNet().cuda.load_state_dict", "DissimNet().cuda.eval", "print", "os.path.join", "os.path.join", "open", "yaml.load", "image_dissimilarity.models.dissimilarity_model.DissimNetPrior().cuda", "image_dissimilarity.models.dissimilarity_model.DissimNet().cuda", "os.getcwd", "os.path.dirname", "os.getcwd", "os.path.dirname", "image_dissimilarity.models.dissimilarity_model.DissimNetPrior", "image_dissimilarity.models.dissimilarity_model.DissimNet"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["", "def", "get_dissimilarity", "(", "checkpoint_dir", ",", "ours", "=", "True", ")", ":", "\n", "# Get Dissimilarity Net", "\n", "    ", "if", "ours", ":", "\n", "        ", "config_diss", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "'image_dissimilarity/configs/test/ours_configuration.yaml'", ")", "\n", "", "else", ":", "\n", "        ", "config_diss", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "'image_dissimilarity/configs/test/baseline_configuration.yaml'", ")", "\n", "\n", "", "with", "open", "(", "config_diss", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config_diss", "=", "yaml", ".", "load", "(", "stream", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "prior", "=", "config_diss", "[", "'model'", "]", "[", "'prior'", "]", "\n", "ensemble", "=", "config_diss", "[", "'ensemble'", "]", "\n", "\n", "if", "prior", ":", "\n", "        ", "diss_model", "=", "DissimNetPrior", "(", "**", "config_diss", "[", "'model'", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "diss_model", "=", "DissimNet", "(", "**", "config_diss", "[", "'model'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "", "print", "(", "'Dissimilarity Net Built.'", ")", "\n", "save_folder", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "config_diss", "[", "'save_folder'", "]", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'%s_net_%s.pth'", "%", "(", "config_diss", "[", "'which_epoch'", "]", ",", "config_diss", "[", "'experiment_name'", "]", ")", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "diss_model", ".", "load_state_dict", "(", "model_weights", ")", "\n", "diss_model", ".", "eval", "(", ")", "\n", "print", "(", "'Dissimilarity Net Restored'", ")", "\n", "return", "diss_model", ",", "prior", ",", "ensemble", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.methods.utils.get_synboost_transformations": [[203, 219], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "image_dissimilarity.models.vgg_features.VGG19_difference().cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "image_dissimilarity.models.vgg_features.VGG19_difference", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_synboost_transformations", "(", ")", ":", "\n", "# Transform images to Tensor based on ImageNet Mean and STD", "\n", "    ", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "img_transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "*", "mean_std", ")", "]", ")", "\n", "\n", "# synthesis necessary pre-process", "\n", "transform_semantic", "=", "Compose", "(", "[", "Resize", "(", "size", "=", "(", "256", ",", "512", ")", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "transform_image_syn", "=", "Compose", "(", "[", "Resize", "(", "size", "=", "(", "256", ",", "512", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "# dissimilarity pre-process", "\n", "vgg_diff", "=", "VGG19_difference", "(", ")", ".", "cuda", "(", ")", "\n", "base_transforms_diss", "=", "Compose", "(", "[", "Resize", "(", "size", "=", "(", "256", ",", "512", ")", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "norm_transform_diss", "=", "Compose", "(", "[", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "# imageNet normalization", "\n", "\n", "return", "img_transform", ",", "transform_semantic", ",", "transform_image_syn", ",", "vgg_diff", ",", "base_transforms_diss", ",", "norm_transform_diss", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_dissimilarity.test_ensemble.normalize": [[27, 35], ["numpy.linalg.norm"], "function", ["None"], ["def", "normalize", "(", "weights", ")", ":", "\n", "# calculate l1 vector norm", "\n", "    ", "result", "=", "norm", "(", "weights", ",", "1", ")", "\n", "# check for a vector of all zeros", "\n", "if", "result", "==", "0.0", ":", "\n", "        ", "return", "weights", "\n", "# return normalized vector (unit norm)", "\n", "", "return", "weights", "/", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_dissimilarity.test_ensemble.grid_search": [[38, 61], ["itertools.product", "test_ensemble.normalize", "test_ensemble.evaluate_ensemble", "print", "list", "len", "str", "print", "set", "str"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.normalize", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_dissimilarity.test_ensemble.evaluate_ensemble"], ["", "def", "grid_search", "(", "model_num", "=", "4", ")", ":", "\n", "# define weights to consider", "\n", "    ", "d", "=", "{", "}", "\n", "w", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "best_score", ",", "best_roc", ",", "best_ap", ",", "best_weights", "=", "1.0", ",", "0", ",", "0", ",", "None", "\n", "# iterate all possible combinations (cartesian product)", "\n", "for", "weights", "in", "product", "(", "w", ",", "repeat", "=", "model_num", ")", ":", "\n", "# skip if all weights are equal", "\n", "        ", "if", "len", "(", "set", "(", "weights", ")", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "# hack, normalize weight vector", "\n", "", "weights", "=", "normalize", "(", "weights", ")", "\n", "if", "str", "(", "weights", ")", "in", "d", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "d", "[", "str", "(", "weights", ")", "]", "=", "0", "\n", "# evaluate weights", "\n", "", "score_roc", ",", "score_ap", ",", "score_fp", "=", "evaluate_ensemble", "(", "weights", ")", "\n", "print", "(", "'Weights: %s Score_FP: %.3f Score_ROC:%.3f Score_AP:%.3f'", "%", "(", "weights", ",", "score_fp", ",", "score_roc", ",", "score_ap", ")", ")", "\n", "if", "score_fp", "<", "best_score", ":", "\n", "            ", "best_score", ",", "best_weights", ",", "best_roc", ",", "best_ap", "=", "score_fp", ",", "weights", ",", "score_roc", ",", "score_ap", "\n", "print", "(", "'>BEST SO FAR %s Score_FP: %.3f Score_ROC:%.3f Score_AP:%.3f'", "%", "(", "best_weights", ",", "best_score", ",", "best_roc", ",", "best_ap", ")", ")", "\n", "", "", "return", "list", "(", "best_weights", ")", ",", "best_score", ",", "best_roc", ",", "best_ap", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_dissimilarity.test_ensemble.evaluate_ensemble": [[62, 109], ["int", "int", "numpy.zeros", "numpy.zeros", "sklearn.metrics.get_metrics", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.argwhere", "numpy.delete", "numpy.delete", "len", "len", "data_i[].cuda", "data_i[].cuda", "data_i[].cuda", "data_i[].cuda", "torch.max", "torch.max", "torch.flatten().detach().cpu().numpy", "torch.flatten().detach().cpu().numpy", "torch.flatten().detach().cpu().numpy", "torch.flatten().detach().cpu().numpy", "os.path.basename", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "Image.fromarray.save", "Image.fromarray.save", "Image.fromarray.save", "data_i[].cuda", "data_i[].cuda", "data_i[].cuda", "softmax", "softmax", "label_tensor.squeeze().cpu().numpy().astype", "predicted_tensor.squeeze().cpu().numpy().astype", "os.path.join", "os.path.join", "os.path.join", "diss_model", "diss_model", "torch.flatten().detach().cpu", "torch.flatten().detach().cpu", "torch.flatten().detach().cpu", "torch.flatten().detach().cpu", "label_tensor.squeeze().cpu().numpy", "predicted_tensor.squeeze().cpu().numpy", "torch.flatten().detach", "torch.flatten().detach", "torch.flatten().detach", "torch.flatten().detach", "soft_pred.squeeze().cpu().numpy", "label_tensor.squeeze().cpu", "predicted_tensor.squeeze().cpu", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "soft_pred.squeeze().cpu", "label_tensor.squeeze", "predicted_tensor.squeeze", "soft_pred.squeeze"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.metrics.get_metrics", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax"], ["", "def", "evaluate_ensemble", "(", "weights_f", ")", ":", "\n", "# create memory locations for results to save time while running the code", "\n", "    ", "dataset", "=", "cfg_test_loader", "[", "'dataset_args'", "]", "\n", "h", "=", "int", "(", "(", "dataset", "[", "'crop_size'", "]", "/", "dataset", "[", "'aspect_ratio'", "]", ")", ")", "\n", "w", "=", "int", "(", "dataset", "[", "'crop_size'", "]", ")", "\n", "flat_pred", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader", ")", ",", "dtype", "=", "'float32'", ")", "\n", "flat_labels", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data_i", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "original", "=", "data_i", "[", "'original'", "]", ".", "cuda", "(", ")", "\n", "semantic", "=", "data_i", "[", "'semantic'", "]", ".", "cuda", "(", ")", "\n", "synthesis", "=", "data_i", "[", "'synthesis'", "]", ".", "cuda", "(", ")", "\n", "label", "=", "data_i", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "prior", ":", "\n", "                ", "entropy", "=", "data_i", "[", "'entropy'", "]", ".", "cuda", "(", ")", "\n", "mae", "=", "data_i", "[", "'mae'", "]", ".", "cuda", "(", ")", "\n", "distance", "=", "data_i", "[", "'distance'", "]", ".", "cuda", "(", ")", "\n", "outputs", "=", "softmax", "(", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ",", "entropy", ",", "mae", ",", "distance", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "softmax", "(", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ")", ")", "\n", "", "(", "softmax_pred", ",", "predictions", ")", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "soft_pred", "=", "outputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "weights_f", "[", "0", "]", "+", "entropy", "*", "weights_f", "[", "1", "]", "+", "mae", "*", "weights_f", "[", "2", "]", "+", "distance", "*", "weights_f", "[", "3", "]", "\n", "flat_pred", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "soft_pred", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_labels", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "label", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Save results", "\n", "predicted_tensor", "=", "predictions", "*", "1", "\n", "label_tensor", "=", "label", "*", "1", "\n", "\n", "file_name", "=", "os", ".", "path", ".", "basename", "(", "data_i", "[", "'original_path'", "]", "[", "0", "]", ")", "\n", "label_img", "=", "Image", ".", "fromarray", "(", "label_tensor", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "soft_img", "=", "Image", ".", "fromarray", "(", "(", "soft_pred", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "predicted_img", "=", "Image", ".", "fromarray", "(", "predicted_tensor", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "predicted_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "store_fdr_exp", ",", "'pred'", ",", "file_name", ")", ")", "\n", "soft_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "store_fdr_exp", ",", "'soft'", ",", "file_name", ")", ")", "\n", "label_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "store_fdr_exp", ",", "'label'", ",", "file_name", ")", ")", "\n", "\n", "", "", "if", "config", "[", "'test_dataloader'", "]", "[", "'dataset_args'", "]", "[", "'roi'", "]", ":", "\n", "        ", "invalid_indices", "=", "np", ".", "argwhere", "(", "flat_labels", "==", "255", ")", "\n", "flat_labels", "=", "np", ".", "delete", "(", "flat_labels", ",", "invalid_indices", ")", "\n", "flat_pred", "=", "np", ".", "delete", "(", "flat_pred", ",", "invalid_indices", ")", "\n", "\n", "", "results", "=", "metrics", ".", "get_metrics", "(", "flat_labels", ",", "flat_pred", ")", "\n", "return", "results", "[", "'auroc'", "]", ",", "results", "[", "'AP'", "]", ",", "results", "[", "'FPR@95%TPR'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.__init__": [[19, 93], ["image_dissimilarity.util.trainer_util.set_seed", "print", "print", "image_dissimilarity.models.dissimilarity_model.DissimNetPrior().cuda", "print", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dissimilarity_trainer.DissimilarityTrainer.diss_model.load_state_dict", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "print", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "image_dissimilarity.models.dissimilarity_model.DissimNet().cuda", "NotImplementedError", "dissimilarity_trainer.DissimilarityTrainer.diss_model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "image_dissimilarity.util.trainer_util.loader", "print", "image_dissimilarity.util.trainer_util.get_class_weights", "image_dissimilarity.models.dissimilarity_model.DissimNetPrior", "dissimilarity_trainer.DissimilarityTrainer.diss_model.parameters", "os.path.join", "os.path.join", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "image_dissimilarity.models.dissimilarity_model.DissimNet", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.set_seed", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.loader", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.get_class_weights"], ["def", "__init__", "(", "self", ",", "config", ",", "seed", "=", "0", ")", ":", "\n", "\n", "        ", "trainer_util", ".", "set_seed", "(", "seed", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "self", ".", "config", "=", "config", "\n", "\n", "if", "config", "[", "'gpu_ids'", "]", "!=", "-", "1", ":", "\n", "            ", "self", ".", "gpu", "=", "'cuda'", "\n", "", "else", ":", "\n", "            ", "self", ".", "gpu", "=", "'cpu'", "\n", "\n", "", "if", "config", "[", "'model'", "]", "[", "'prior'", "]", ":", "\n", "            ", "self", ".", "diss_model", "=", "DissimNetPrior", "(", "**", "config", "[", "'model'", "]", ")", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "", "elif", "'vgg'", "in", "config", "[", "'model'", "]", "[", "'architecture'", "]", ":", "\n", "            ", "self", ".", "diss_model", "=", "DissimNet", "(", "**", "config", "[", "'model'", "]", ")", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# get pre-trained model", "\n", "", "pretrain_config", "=", "config", "[", "'diss_pretrained'", "]", "\n", "if", "pretrain_config", "[", "'load'", "]", ":", "\n", "            ", "epoch", "=", "pretrain_config", "[", "'which_epoch'", "]", "\n", "save_ckpt_fdr", "=", "pretrain_config", "[", "'save_folder'", "]", "\n", "ckpt_name", "=", "pretrain_config", "[", "'experiment_name'", "]", "\n", "\n", "print", "(", "'Loading pretrained weights from %s (epoch: %s)'", "%", "(", "ckpt_name", ",", "epoch", ")", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "save_ckpt_fdr", ",", "ckpt_name", ",", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "ckpt_name", ")", ")", "\n", "model_weights", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "self", ".", "diss_model", ".", "load_state_dict", "(", "model_weights", ",", "strict", "=", "False", ")", "\n", "# NOTE: For old models, there were some correlation weights created that were not used in the foward pass. That's the reason to include strict=False", "\n", "\n", "", "print", "(", "'Printing Model Parameters'", ")", "\n", "print", "(", "self", ".", "diss_model", ".", "parameters", ")", "\n", "\n", "lr_config", "=", "config", "[", "'optimizer'", "]", "\n", "lr_options", "=", "lr_config", "[", "'parameters'", "]", "\n", "if", "lr_config", "[", "'algorithm'", "]", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "diss_model", ".", "parameters", "(", ")", ",", "lr", "=", "lr_options", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "lr_options", "[", "'weight_decay'", "]", ",", ")", "\n", "", "elif", "lr_config", "[", "'algorithm'", "]", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "diss_model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr_options", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "lr_options", "[", "'weight_decay'", "]", ",", "\n", "betas", "=", "(", "lr_options", "[", "'beta1'", "]", ",", "lr_options", "[", "'beta2'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "lr_options", "[", "'lr_policy'", "]", "==", "'ReduceLROnPlateau'", ":", "\n", "            ", "self", ".", "scheduler", "=", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "'min'", ",", "patience", "=", "lr_options", "[", "'patience'", "]", ",", "factor", "=", "lr_options", "[", "'factor'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "old_lr", "=", "lr_options", "[", "'lr'", "]", "\n", "\n", "if", "config", "[", "'training_strategy'", "]", "[", "'class_weight'", "]", ":", "\n", "            ", "if", "not", "config", "[", "'training_strategy'", "]", "[", "'class_weight_cityscapes'", "]", ":", "\n", "                ", "if", "config", "[", "'train_dataloader'", "]", "[", "'dataset_args'", "]", "[", "'void'", "]", ":", "\n", "                    ", "label_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'train_dataloader'", "]", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ",", "'labels_with_void_no_ego/'", ")", "\n", "", "else", ":", "\n", "                    ", "label_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'train_dataloader'", "]", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ",", "'labels/'", ")", "\n", "\n", "", "full_loader", "=", "trainer_util", ".", "loader", "(", "label_path", ",", "batch_size", "=", "'all'", ")", "\n", "print", "(", "'Getting class weights for cross entropy loss. This might take some time.'", ")", "\n", "class_weights", "=", "trainer_util", ".", "get_class_weights", "(", "full_loader", ",", "num_classes", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "if", "config", "[", "'train_dataloader'", "]", "[", "'dataset_args'", "]", "[", "'void'", "]", ":", "\n", "                    ", "class_weights", "=", "[", "1.54843156", ",", "8.03912212", "]", "\n", "", "else", ":", "\n", "                    ", "class_weights", "=", "[", "1.46494611", ",", "16.5204619", "]", "\n", "", "", "print", "(", "'Using the following weights for each respective class [0,1]:'", ",", "class_weights", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "class_weights", ")", ".", "to", "(", "\"cuda\"", ")", ")", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.run_model_one_step": [[94, 103], ["dissimilarity_trainer.DissimilarityTrainer.optimizer.zero_grad", "dissimilarity_trainer.DissimilarityTrainer.diss_model", "dissimilarity_trainer.DissimilarityTrainer.criterion", "dissimilarity_trainer.DissimilarityTrainer.backward", "dissimilarity_trainer.DissimilarityTrainer.optimizer.step", "label.type().squeeze().cuda", "label.type().squeeze", "label.type"], "methods", ["None"], ["", "", "def", "run_model_one_step", "(", "self", ",", "original", ",", "synthesis", ",", "semantic", ",", "label", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "predictions", "=", "self", ".", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ")", "\n", "model_loss", "=", "self", ".", "criterion", "(", "predictions", ",", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "model_losses", "=", "model_loss", "\n", "self", ".", "generated", "=", "predictions", "\n", "return", "model_loss", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.run_validation": [[104, 108], ["dissimilarity_trainer.DissimilarityTrainer.diss_model", "dissimilarity_trainer.DissimilarityTrainer.criterion", "label.type().squeeze().cuda", "label.type().squeeze", "label.type"], "methods", ["None"], ["", "def", "run_validation", "(", "self", ",", "original", ",", "synthesis", ",", "semantic", ",", "label", ")", ":", "\n", "        ", "predictions", "=", "self", ".", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ")", "\n", "model_loss", "=", "self", ".", "criterion", "(", "predictions", ",", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", ")", "\n", "return", "model_loss", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.run_model_one_step_prior": [[109, 118], ["dissimilarity_trainer.DissimilarityTrainer.optimizer.zero_grad", "dissimilarity_trainer.DissimilarityTrainer.diss_model", "dissimilarity_trainer.DissimilarityTrainer.criterion", "dissimilarity_trainer.DissimilarityTrainer.backward", "dissimilarity_trainer.DissimilarityTrainer.optimizer.step", "label.type().squeeze().cuda", "label.type().squeeze", "label.type"], "methods", ["None"], ["", "def", "run_model_one_step_prior", "(", "self", ",", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "distance", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "predictions", "=", "self", ".", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ",", "entropy", ",", "mae", ",", "distance", ")", "\n", "model_loss", "=", "self", ".", "criterion", "(", "predictions", ",", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "model_losses", "=", "model_loss", "\n", "self", ".", "generated", "=", "predictions", "\n", "return", "model_loss", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.run_validation_prior": [[119, 123], ["dissimilarity_trainer.DissimilarityTrainer.diss_model", "dissimilarity_trainer.DissimilarityTrainer.criterion", "label.type().squeeze().cuda", "label.type().squeeze", "label.type"], "methods", ["None"], ["", "def", "run_validation_prior", "(", "self", ",", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "distance", ")", ":", "\n", "        ", "predictions", "=", "self", ".", "diss_model", "(", "original", ",", "synthesis", ",", "semantic", ",", "entropy", ",", "mae", ",", "distance", ")", "\n", "model_loss", "=", "self", ".", "criterion", "(", "predictions", ",", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", ")", "\n", "return", "model_loss", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.get_latest_losses": [[124, 126], ["None"], "methods", ["None"], ["", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "model_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.get_latest_generated": [[127, 129], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.save": [[130, 137], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.isdir", "os.mkdir", "dissimilarity_trainer.DissimilarityTrainer.diss_model.state_dict", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "def", "save", "(", "self", ",", "save_dir", ",", "epoch", ",", "name", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", ")", "\n", "\n", "", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "self", ".", "diss_model", ".", "state_dict", "(", ")", ",", "save_path", ")", "# net.cpu() -> net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.update_learning_rate": [[142, 154], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", "[", "'training_strategy'", "]", "[", "'niter'", "]", ":", "\n", "            ", "lrd", "=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'parameters'", "]", "[", "'lr'", "]", "/", "self", ".", "config", "[", "'training_strategy'", "]", "[", "'niter_decay'", "]", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.dissimilarity_trainer.DissimilarityTrainer.update_learning_rate_schedule": [[155, 159], ["dissimilarity_trainer.DissimilarityTrainer.scheduler.step", "print"], "methods", ["None"], ["", "", "def", "update_learning_rate_schedule", "(", "self", ",", "val_loss", ")", ":", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", "val_loss", ")", "\n", "lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "[", "0", "]", "\n", "print", "(", "'Current learning rate is set for %f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.__init__": [[11, 22], ["models.pix2pix_model.Pix2PixModel", "torch.nn.parallel.DistributedDataParallel", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.create_optimizers"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pix2pix_model", "=", "Pix2PixModel", "(", "opt", ")", "\n", "self", ".", "pix2pix_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "pix2pix_model", ",", "\n", "device_ids", "=", "[", "opt", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", ".", "module", "\n", "\n", "self", ".", "generated", "=", "None", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D", "=", "self", ".", "pix2pix_model_on_one_gpu", ".", "create_optimizers", "(", "opt", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step": [[23, 31], ["pix2pix_trainer.Pix2PixTrainer.optimizer_G.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.step", "sum", "g_losses.values"], "methods", ["None"], ["", "", "def", "run_generator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "g_losses", ",", "generated", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'generator'", ")", "\n", "g_loss", "=", "sum", "(", "g_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "self", ".", "g_losses", "=", "g_losses", "\n", "self", ".", "generated", "=", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step": [[32, 39], ["pix2pix_trainer.Pix2PixTrainer.optimizer_D.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.step", "sum", "pix2pix_trainer.Pix2PixTrainer.values"], "methods", ["None"], ["", "def", "run_discriminator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "d_losses", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'discriminator'", ")", "\n", "d_loss", "=", "sum", "(", "d_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "self", ".", "d_losses", "=", "d_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "g_losses", ",", "**", "self", ".", "d_losses", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.save": [[46, 48], ["pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.save"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "pix2pix_model_on_one_gpu", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate": [[53, 74], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "if", "self", ".", "opt", ".", "no_TTUR", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "\n", "new_lr_D", "=", "new_lr", "\n", "", "else", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "/", "2", "\n", "new_lr_D", "=", "new_lr", "*", "2", "\n", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_D", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_G", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.__init__": [[9, 30], ["os.path.join", "numpy.loadtxt", "print", "print"], "methods", ["None"], ["self", ".", "config", "=", "config", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "\n", "self", ".", "first_epoch", "=", "1", "\n", "self", ".", "total_epochs", "=", "config", "[", "'training_strategy'", "]", "[", "'niter'", "]", "+", "config", "[", "'training_strategy'", "]", "[", "'niter_decay'", "]", "\n", "self", ".", "epoch_iter", "=", "0", "# iter number within each epoch", "\n", "\n", "self", ".", "total_steps_so_far", "=", "(", "self", ".", "first_epoch", "-", "1", ")", "*", "dataset_size", "+", "self", ".", "epoch_iter", "\n", "\n", "self", ".", "print_freq", "=", "print_freq", "\n", "self", ".", "display_freq", "=", "display_freq", "\n", "\n", "\n", "# return the iterator of epochs for the training", "\n", "", "def", "training_epochs", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "first_epoch", ",", "self", ".", "total_epochs", "+", "1", ")", "\n", "\n", "", "def", "record_epoch_start", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "epoch_iter", "=", "0", "\n", "self", ".", "last_iter_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "current_epoch", "=", "epoch", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.training_epochs": [[32, 34], ["range"], "methods", ["None"], ["", "def", "record_one_iteration", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_epoch_start": [[35, 40], ["time.time", "time.time"], "methods", ["None"], ["# the last remaining batch is dropped (see data/__init__.py),", "\n", "# so we can assume batch size is always batch_size", "\n", "self", ".", "time_per_iter", "=", "(", "current_time", "-", "self", ".", "last_iter_time", ")", "/", "self", ".", "batch_size", "\n", "self", ".", "last_iter_time", "=", "current_time", "\n", "self", ".", "total_steps_so_far", "+=", "self", ".", "batch_size", "\n", "self", ".", "epoch_iter", "+=", "self", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_one_iteration": [[41, 50], ["time.time"], "methods", ["None"], ["\n", "", "def", "record_epoch_end", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_per_epoch", "=", "current_time", "-", "self", ".", "epoch_start_time", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "self", ".", "current_epoch", ",", "self", ".", "total_epochs", ",", "self", ".", "time_per_epoch", ")", ")", "\n", "\n", "", "def", "needs_printing", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "print_freq", ")", "<", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_epoch_end": [[52, 62], ["time.time", "print", "numpy.savetxt", "print"], "methods", ["None"], ["        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "display_freq", ")", "<", "self", ".", "batch_size", "\n", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.needs_printing": [[73, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.needs_displaying": [[76, 78], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_decoders.DenormalizeImage.__init__": [[4, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_decoders.DenormalizeImage.__call__": [[8, 20], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "\n", "", "return", "tensor", "", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.metrics.get_metrics": [[3, 79], ["flat_pred[].reshape().astype", "slice", "range", "curve_precision.append", "curve_recall.append", "numpy.trapz", "numpy.argsort", "numpy.where", "numpy.cumsum", "tps.searchsorted", "numpy.sum", "curve_precision.append", "curve_recall.append", "numpy.array", "numpy.array", "flat_pred[].reshape", "numpy.diff", "numpy.isnan", "numpy.searchsorted", "numpy.diff"], "function", ["None"], ["def", "get_metrics", "(", "flat_labels", ",", "flat_pred", ",", "num_points", "=", "50", ")", ":", "\n", "# From fishycapes code", "\n", "    ", "pos", "=", "flat_labels", "==", "1", "\n", "valid", "=", "flat_labels", "<=", "1", "# filter out void", "\n", "gt", "=", "pos", "[", "valid", "]", "\n", "del", "pos", "\n", "uncertainty", "=", "flat_pred", "[", "valid", "]", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "del", "valid", "\n", "\n", "# Sort the classifier scores (uncertainties)", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "uncertainty", ",", "kind", "=", "'mergesort'", ")", "[", ":", ":", "-", "1", "]", "\n", "uncertainty", ",", "gt", "=", "uncertainty", "[", "sorted_indices", "]", ",", "gt", "[", "sorted_indices", "]", "\n", "del", "sorted_indices", "\n", "\n", "# Remove duplicates along the curve", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "uncertainty", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "gt", ".", "size", "-", "1", "]", "\n", "del", "distinct_value_indices", ",", "uncertainty", "\n", "\n", "# Accumulate TPs and FPs", "\n", "tps", "=", "np", ".", "cumsum", "(", "gt", ",", "dtype", "=", "np", ".", "uint64", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "\n", "del", "threshold_idxs", "\n", "\n", "# Compute Precision and Recall", "\n", "precision", "=", "tps", "/", "(", "tps", "+", "fps", ")", "\n", "precision", "[", "np", ".", "isnan", "(", "precision", ")", "]", "=", "0", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "# stop when full recall attained and reverse the outputs so recall is decreasing", "\n", "sl", "=", "slice", "(", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", ",", "None", ",", "-", "1", ")", "\n", "precision", "=", "np", ".", "r_", "[", "precision", "[", "sl", "]", ",", "1", "]", "\n", "recall", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "0", "]", "\n", "average_precision", "=", "-", "np", ".", "sum", "(", "np", ".", "diff", "(", "recall", ")", "*", "precision", "[", ":", "-", "1", "]", ")", "\n", "\n", "# select num_points values for a plotted curve", "\n", "interval", "=", "1.0", "/", "num_points", "\n", "curve_precision", "=", "[", "precision", "[", "-", "1", "]", "]", "\n", "curve_recall", "=", "[", "recall", "[", "-", "1", "]", "]", "\n", "idx", "=", "recall", ".", "size", "-", "1", "\n", "for", "p", "in", "range", "(", "1", ",", "num_points", ")", ":", "\n", "        ", "while", "recall", "[", "idx", "]", "<", "p", "*", "interval", ":", "\n", "            ", "idx", "-=", "1", "\n", "", "curve_precision", ".", "append", "(", "precision", "[", "idx", "]", ")", "\n", "curve_recall", ".", "append", "(", "recall", "[", "idx", "]", ")", "\n", "", "curve_precision", ".", "append", "(", "precision", "[", "0", "]", ")", "\n", "curve_recall", ".", "append", "(", "recall", "[", "0", "]", ")", "\n", "del", "precision", ",", "recall", "\n", "\n", "if", "tps", ".", "size", "==", "0", "or", "fps", "[", "0", "]", "!=", "0", "or", "tps", "[", "0", "]", "!=", "0", ":", "\n", "# Add an extra threshold position if necessary", "\n", "# to make sure that the curve starts at (0, 0)", "\n", "        ", "tps", "=", "np", ".", "r_", "[", "0.", ",", "tps", "]", "\n", "fps", "=", "np", ".", "r_", "[", "0.", ",", "fps", "]", "\n", "\n", "# Compute TPR and FPR", "\n", "", "tpr", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "del", "tps", "\n", "fpr", "=", "fps", "/", "fps", "[", "-", "1", "]", "\n", "del", "fps", "\n", "\n", "# Compute AUROC", "\n", "auroc", "=", "np", ".", "trapz", "(", "tpr", ",", "fpr", ")", "\n", "\n", "# Compute FPR@95%TPR", "\n", "fpr_tpr95", "=", "fpr", "[", "np", ".", "searchsorted", "(", "tpr", ",", "0.95", ")", "]", "\n", "results", "=", "{", "\n", "'auroc'", ":", "auroc", ",", "\n", "'AP'", ":", "average_precision", ",", "\n", "'FPR@95%TPR'", ":", "fpr_tpr95", ",", "\n", "'recall'", ":", "np", ".", "array", "(", "curve_recall", ")", ",", "\n", "'precision'", ":", "np", ".", "array", "(", "curve_precision", ")", ",", "\n", "'fpr'", ":", "fpr", ",", "\n", "'tpr'", ":", "tpr", "\n", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask": [[14, 22], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask.\n    \"\"\"", "\n", "# mask: numpy array of the mask", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.__init__": [[14, 18], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "ModelWithTemperature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "1.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.forward": [[19, 22], ["temperature_scaling.ModelWithTemperature.model", "temperature_scaling.ModelWithTemperature.temperature_scale"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "return", "self", ".", "temperature_scale", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.temperature_scale": [[23, 30], ["temperature_scaling.ModelWithTemperature.temperature.unsqueeze().expand", "logits.size", "logits.size", "temperature_scaling.ModelWithTemperature.temperature.unsqueeze"], "methods", ["None"], ["", "def", "temperature_scale", "(", "self", ",", "logits", ")", ":", "\n", "        ", "\"\"\"\n        Perform temperature scaling on logits\n        \"\"\"", "\n", "# Expand temperature to match the size of logits", "\n", "temperature", "=", "self", ".", "temperature", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "logits", ".", "size", "(", "0", ")", ",", "logits", ".", "size", "(", "1", ")", ")", "\n", "return", "logits", "/", "self", ".", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.set_temperature": [[32, 79], ["temperature_scaling.ModelWithTemperature.cuda", "torch.nn.CrossEntropyLoss().cuda", "_ECELoss().cuda", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "torch.optim.LBFGS", "torch.optim.LBFGS.step", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "print", "torch.no_grad", "torch.cat().cuda", "torch.cat().type().squeeze().cuda", "torch.nn.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.backward", "torch.nn.CrossEntropyLoss", "temperature_scaling._ECELoss", "input[].cuda", "input[].cuda", "input[].cuda", "input[].cuda", "temperature_scaling.ModelWithTemperature.model", "logits_list.append", "labels_list.append", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature_scale", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature.item", "torch.cat", "torch.cat().type().squeeze", "temperature_scaling.ModelWithTemperature.temperature_scale", "temperature_scaling.ModelWithTemperature.temperature_scale", "torch.cat().type", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "set_temperature", "(", "self", ",", "valid_loader", ")", ":", "\n", "        ", "\"\"\"\n        Tune the tempearature of the model (using the validation set).\n        We're going to set it to optimize NLL.\n        valid_loader (DataLoader): validation set loader\n        \"\"\"", "\n", "self", ".", "cuda", "(", ")", "\n", "nll_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece_criterion", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# First: collect all the logits and labels for the validation set", "\n", "logits_list", "=", "[", "]", "\n", "labels_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "input", "in", "valid_loader", ":", "\n", "                ", "original", "=", "input", "[", "'original'", "]", ".", "cuda", "(", ")", "\n", "semantic", "=", "input", "[", "'semantic'", "]", ".", "cuda", "(", ")", "\n", "synthesis", "=", "input", "[", "'synthesis'", "]", ".", "cuda", "(", ")", "\n", "label", "=", "input", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "original", ",", "synthesis", ",", "semantic", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "labels_list", ".", "append", "(", "label", ")", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits_list", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels_list", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# Calculate NLL and ECE before temperature scaling", "\n", "", "before_temperature_nll", "=", "nll_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "before_temperature_ece", "=", "ece_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Before temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "before_temperature_nll", ",", "before_temperature_ece", ")", ")", "\n", "\n", "# Next: optimize the temperature w.r.t. NLL", "\n", "optimizer", "=", "optim", ".", "LBFGS", "(", "[", "self", ".", "temperature", "]", ",", "lr", "=", "0.01", ",", "max_iter", "=", "50", ")", "\n", "\n", "def", "eval", "(", ")", ":", "\n", "            ", "loss", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "", "optimizer", ".", "step", "(", "eval", ")", "\n", "\n", "# Calculate NLL and ECE after temperature scaling", "\n", "after_temperature_nll", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "after_temperature_ece", "=", "ece_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Optimal temperature: %.3f'", "%", "self", ".", "temperature", ".", "item", "(", ")", ")", "\n", "print", "(", "'After temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "after_temperature_nll", ",", "after_temperature_ece", ")", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling._ECELoss.__init__": [[100, 108], ["torch.nn.Module.__init__", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "n_bins", "=", "15", ")", ":", "\n", "        ", "\"\"\"\n        n_bins (int): number of confidence interval bins\n        \"\"\"", "\n", "super", "(", "_ECELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.temperature_scaling._ECELoss.forward": [[109, 125], ["torch.nn.functional.softmax", "torch.max", "predictions.eq", "torch.zeros", "zip", "in_bin.float().mean", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "accuracies[].float"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "softmaxes", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "softmaxes", ",", "1", ")", "\n", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "\n", "", "", "return", "ece", "", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.activate_gpus": [[15, 36], ["config[].split", "torch.device", "int", "torch.cuda.is_available", "gpu_ids.append", "len", "str"], "function", ["None"], ["def", "activate_gpus", "(", "config", ")", ":", "\n", "    ", "\"\"\"Identify which GPUs to activate\n        Args:\n            config: Configuration dictionary with project hyperparameters\n        Returns:\n            dict: Required information for GPU/CPU training\n    \"\"\"", "\n", "str_ids", "=", "config", "[", "'gpu_ids'", "]", ".", "split", "(", "','", ")", "\n", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "        ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "            ", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "use_gpu", "=", "True", "\n", "", "else", ":", "\n", "        ", "use_gpu", "=", "False", "\n", "gpu_ids", "=", "[", "]", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "gpu_ids", "[", "0", "]", ")", "if", "use_gpu", "else", "\"cpu\"", ")", "\n", "return", "{", "'device'", ":", "device", ",", "'gpu_ids'", ":", "gpu_ids", ",", "'use_gpu'", ":", "use_gpu", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.set_seed": [[37, 44], ["torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.get_dataloader": [[45, 49], ["image_dissimilarity.data.cityscapes_dataset.CityscapesDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_dataloader", "(", "dataset_args", ",", "dataloader_args", ")", ":", "\n", "    ", "dataset", "=", "CityscapesDataset", "(", "**", "dataset_args", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "dataloader_args", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.get_class_weights": [[52, 72], ["next", "next.flatten", "numpy.bincount", "len", "numpy.log"], "function", ["None"], ["", "def", "get_class_weights", "(", "loader", ",", "num_classes", ",", "c", "=", "1.02", ")", ":", "\n", "    ", "'''\n    This class return the class weights for each class\n\n    Arguments:\n    - loader : The generator object which return all the labels at one iteration\n               Do Note: That this class expects all the labels to be returned in\n               one iteration\n    - num_classes : The number of classes\n    Return:\n    - class_weights : An array equal in length to the number of classes\n                      containing the class weights for each class\n    '''", "\n", "\n", "labels", "=", "next", "(", "loader", ")", "\n", "all_labels", "=", "labels", ".", "flatten", "(", ")", "\n", "each_class", "=", "np", ".", "bincount", "(", "all_labels", ",", "minlength", "=", "num_classes", ")", "\n", "prospensity_score", "=", "each_class", "/", "len", "(", "all_labels", ")", "\n", "class_weights", "=", "1", "/", "(", "np", ".", "log", "(", "c", "+", "prospensity_score", ")", ")", "\n", "return", "class_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.loader": [[74, 105], ["os.listdir", "len", "str().lower", "numpy.random.randint", "torch.tensor", "PIL.Image.open", "numpy.array", "cv2.resize", "torch.tensor.append", "str"], "function", ["None"], ["", "def", "loader", "(", "segmented_path", ",", "batch_size", ",", "h", "=", "256", ",", "w", "=", "512", ")", ":", "\n", "    ", "\"\"\"\n    The Loader to generate inputs and labels from the Image and Segmented Directory\n    Arguments:\n    training_path - str - Path to the directory that contains the training images\n    segmented_path - str - Path to the directory that contains the segmented images\n    batch_size - int - the batch size\n    yields inputs and labels of the batch size\n    \"\"\"", "\n", "\n", "filenames_s", "=", "os", ".", "listdir", "(", "segmented_path", ")", "\n", "total_files_s", "=", "len", "(", "filenames_s", ")", "\n", "id_to_trainid", "=", "cityscapes_labels", ".", "label2trainid", "\n", "\n", "if", "str", "(", "batch_size", ")", ".", "lower", "(", ")", "==", "'all'", ":", "\n", "        ", "batch_size", "=", "total_files_s", "\n", "\n", "", "idx", "=", "0", "\n", "while", "(", "1", ")", ":", "\n", "        ", "batch_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "total_files_s", ",", "batch_size", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "jj", "in", "batch_idxs", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "segmented_path", "+", "filenames_s", "[", "jj", "]", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "h", ",", "w", ")", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "labels", ".", "append", "(", "img", ")", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "yield", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.DenormalizeImage.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.DenormalizeImage.__call__": [[10, 24], ["zip", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage.", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "\n", "", "transform", "=", "ToPILImage", "(", ")", "\n", "image", "=", "transform", "(", "tensor", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.__init__": [[31, 46], ["torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "image_logging.DenormalizeImage", "torchvision.transforms.ToPILImage", "image_logging.DenormalizeImage", "torchvision.transforms.ToPILImage"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "preprocess_mode", ")", ":", "\n", "# image net normalization values", "\n", "        ", "norm_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "norm_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "imgs", "=", "[", "]", "\n", "\n", "# Decoders depending on the type of augmentations done", "\n", "if", "preprocess_mode", "==", "'none'", ":", "\n", "            ", "self", ".", "decoders", "=", "{", "'original'", ":", "ToPILImage", "(", ")", ",", "'label'", ":", "ToPILImage", "(", ")", ",", "\n", "'synthesis'", ":", "ToPILImage", "(", ")", ",", "'semantic'", ":", "ToPILImage", "(", ")", ",", "'prediction'", ":", "ToPILImage", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "decoders", "=", "{", "'original'", ":", "DenormalizeImage", "(", "norm_mean", ",", "norm_std", ")", ",", "'label'", ":", "ToPILImage", "(", ")", ",", "\n", "'synthesis'", ":", "DenormalizeImage", "(", "norm_mean", ",", "norm_std", ")", ",", "'semantic'", ":", "ToPILImage", "(", ")", ",", "\n", "'prediction'", ":", "ToPILImage", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.decode_img": [[47, 52], ["enumerate", "dic.items", "img_labels.append", "numpy.asarray"], "methods", ["None"], ["", "", "def", "decode_img", "(", "self", ",", "dic", ")", ":", "\n", "        ", "img_labels", "=", "[", "]", "\n", "for", "ind", ",", "(", "key", ",", "image", ")", "in", "enumerate", "(", "dic", ".", "items", "(", ")", ")", ":", "\n", "            ", "img_labels", ".", "append", "(", "np", ".", "asarray", "(", "self", ".", "decoders", "[", "key", "]", "(", "image", ")", ".", "convert", "(", "'RGB'", ")", ")", ")", "\n", "", "return", "img_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.merge": [[53, 85], ["numpy.shape", "numpy.zeros", "numpy.transpose"], "methods", ["None"], ["", "def", "merge", "(", "self", ",", "img_list", ",", "row", "=", "True", ")", ":", "\n", "        ", "num_imgs", ",", "height", ",", "width", ",", "channels", "=", "np", ".", "shape", "(", "img_list", ")", "\n", "if", "row", ":", "\n", "            ", "total_width", "=", "width", "*", "num_imgs", "\n", "total_height", "=", "height", "\n", "", "else", ":", "\n", "            ", "total_height", "=", "height", "*", "num_imgs", "\n", "total_width", "=", "width", "\n", "\n", "", "new_im", "=", "np", ".", "zeros", "(", "(", "3", ",", "total_height", ",", "total_width", ")", ")", "\n", "if", "row", ":", "\n", "            ", "width_start", "=", "0", "\n", "width_end", "=", "width", "\n", "height_start", "=", "0", "\n", "height_end", "=", "total_height", "\n", "", "else", ":", "\n", "            ", "width_start", "=", "0", "\n", "width_end", "=", "total_width", "\n", "height_start", "=", "0", "\n", "height_end", "=", "height", "\n", "\n", "", "for", "im", "in", "img_list", ":", "\n", "            ", "im", "=", "np", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_im", "[", ":", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", "=", "im", "\n", "if", "row", ":", "\n", "                ", "width_start", "+=", "width", "\n", "width_end", "=", "width_start", "+", "width", "\n", "", "else", ":", "\n", "                ", "height_start", "+=", "height", "\n", "height_end", "=", "height_start", "+", "height", "\n", "\n", "", "", "return", "new_im", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.log_imgs": [[86, 88], ["image_logging.ImgLogging.imgs.append", "image_logging.ImgLogging.merge", "image_logging.ImgLogging.decode_img"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.merge", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.decode_img"], ["", "def", "log_imgs", "(", "self", ",", "dic", ")", ":", "\n", "        ", "self", ".", "imgs", ".", "append", "(", "self", ".", "merge", "(", "self", ".", "decode_img", "(", "dic", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.write_imgs": [[89, 93], ["pdb.set_trace", "writer.add_image"], "methods", ["None"], ["", "def", "write_imgs", "(", "self", ",", "writer", ",", "iteration", ")", ":", "\n", "        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "writer", ".", "add_image", "(", "'image'", ",", "self", ".", "imgs", ",", "iteration", ")", "\n", "self", ".", "imgs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_current_iter": [[64, 69], ["numpy.savetxt", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.needs_saving": [[70, 72], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.__init__": [[9, 29], ["web_dir.endswith", "os.path.join", "dominate.document", "os.path.split", "os.makedirs", "os.makedirs", "h1", "len", "os.path.exists", "len", "os.path.exists", "datetime.datetime.now().strftime", "meta", "datetime.datetime.now", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "if", "web_dir", ".", "endswith", "(", "'.html'", ")", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "os", ".", "path", ".", "split", "(", "web_dir", ")", "\n", "", "else", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "web_dir", ",", "'index.html'", "\n", "", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "html_name", "=", "html_name", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "with", "self", ".", "doc", ":", "\n", "            ", "h1", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%I:%M%p on %B %d, %Y\"", ")", ")", "\n", "", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.get_image_dir": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_header": [[33, 36], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_table": [[37, 40], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_images": [[41, 52], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "txt.encode", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save": [[53, 59], ["os.path.join", "open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "#html_file = '%s/%s' % (self.web_dir, self.html_name)", "\n", "        ", "html_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "self", ".", "html_name", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.coco.id2label": [[2, 195], ["None"], "function", ["None"], ["def", "id2label", "(", "id", ")", ":", "\n", "    ", "if", "id", "==", "182", ":", "\n", "        ", "id", "=", "0", "\n", "", "else", ":", "\n", "        ", "id", "=", "id", "+", "1", "\n", "", "labelmap", "=", "{", "0", ":", "'unlabeled'", ",", "\n", "1", ":", "'person'", ",", "\n", "2", ":", "'bicycle'", ",", "\n", "3", ":", "'car'", ",", "\n", "4", ":", "'motorcycle'", ",", "\n", "5", ":", "'airplane'", ",", "\n", "6", ":", "'bus'", ",", "\n", "7", ":", "'train'", ",", "\n", "8", ":", "'truck'", ",", "\n", "9", ":", "'boat'", ",", "\n", "10", ":", "'traffic light'", ",", "\n", "11", ":", "'fire hydrant'", ",", "\n", "12", ":", "'street sign'", ",", "\n", "13", ":", "'stop sign'", ",", "\n", "14", ":", "'parking meter'", ",", "\n", "15", ":", "'bench'", ",", "\n", "16", ":", "'bird'", ",", "\n", "17", ":", "'cat'", ",", "\n", "18", ":", "'dog'", ",", "\n", "19", ":", "'horse'", ",", "\n", "20", ":", "'sheep'", ",", "\n", "21", ":", "'cow'", ",", "\n", "22", ":", "'elephant'", ",", "\n", "23", ":", "'bear'", ",", "\n", "24", ":", "'zebra'", ",", "\n", "25", ":", "'giraffe'", ",", "\n", "26", ":", "'hat'", ",", "\n", "27", ":", "'backpack'", ",", "\n", "28", ":", "'umbrella'", ",", "\n", "29", ":", "'shoe'", ",", "\n", "30", ":", "'eye glasses'", ",", "\n", "31", ":", "'handbag'", ",", "\n", "32", ":", "'tie'", ",", "\n", "33", ":", "'suitcase'", ",", "\n", "34", ":", "'frisbee'", ",", "\n", "35", ":", "'skis'", ",", "\n", "36", ":", "'snowboard'", ",", "\n", "37", ":", "'sports ball'", ",", "\n", "38", ":", "'kite'", ",", "\n", "39", ":", "'baseball bat'", ",", "\n", "40", ":", "'baseball glove'", ",", "\n", "41", ":", "'skateboard'", ",", "\n", "42", ":", "'surfboard'", ",", "\n", "43", ":", "'tennis racket'", ",", "\n", "44", ":", "'bottle'", ",", "\n", "45", ":", "'plate'", ",", "\n", "46", ":", "'wine glass'", ",", "\n", "47", ":", "'cup'", ",", "\n", "48", ":", "'fork'", ",", "\n", "49", ":", "'knife'", ",", "\n", "50", ":", "'spoon'", ",", "\n", "51", ":", "'bowl'", ",", "\n", "52", ":", "'banana'", ",", "\n", "53", ":", "'apple'", ",", "\n", "54", ":", "'sandwich'", ",", "\n", "55", ":", "'orange'", ",", "\n", "56", ":", "'broccoli'", ",", "\n", "57", ":", "'carrot'", ",", "\n", "58", ":", "'hot dog'", ",", "\n", "59", ":", "'pizza'", ",", "\n", "60", ":", "'donut'", ",", "\n", "61", ":", "'cake'", ",", "\n", "62", ":", "'chair'", ",", "\n", "63", ":", "'couch'", ",", "\n", "64", ":", "'potted plant'", ",", "\n", "65", ":", "'bed'", ",", "\n", "66", ":", "'mirror'", ",", "\n", "67", ":", "'dining table'", ",", "\n", "68", ":", "'window'", ",", "\n", "69", ":", "'desk'", ",", "\n", "70", ":", "'toilet'", ",", "\n", "71", ":", "'door'", ",", "\n", "72", ":", "'tv'", ",", "\n", "73", ":", "'laptop'", ",", "\n", "74", ":", "'mouse'", ",", "\n", "75", ":", "'remote'", ",", "\n", "76", ":", "'keyboard'", ",", "\n", "77", ":", "'cell phone'", ",", "\n", "78", ":", "'microwave'", ",", "\n", "79", ":", "'oven'", ",", "\n", "80", ":", "'toaster'", ",", "\n", "81", ":", "'sink'", ",", "\n", "82", ":", "'refrigerator'", ",", "\n", "83", ":", "'blender'", ",", "\n", "84", ":", "'book'", ",", "\n", "85", ":", "'clock'", ",", "\n", "86", ":", "'vase'", ",", "\n", "87", ":", "'scissors'", ",", "\n", "88", ":", "'teddy bear'", ",", "\n", "89", ":", "'hair drier'", ",", "\n", "90", ":", "'toothbrush'", ",", "\n", "91", ":", "'hair brush'", ",", "## Last class of Thing", "\n", "92", ":", "'banner'", ",", "## Beginning of Stuff", "\n", "93", ":", "'blanket'", ",", "\n", "94", ":", "'branch'", ",", "\n", "95", ":", "'bridge'", ",", "\n", "96", ":", "'building-other'", ",", "\n", "97", ":", "'bush'", ",", "\n", "98", ":", "'cabinet'", ",", "\n", "99", ":", "'cage'", ",", "\n", "100", ":", "'cardboard'", ",", "\n", "101", ":", "'carpet'", ",", "\n", "102", ":", "'ceiling-other'", ",", "\n", "103", ":", "'ceiling-tile'", ",", "\n", "104", ":", "'cloth'", ",", "\n", "105", ":", "'clothes'", ",", "\n", "106", ":", "'clouds'", ",", "\n", "107", ":", "'counter'", ",", "\n", "108", ":", "'cupboard'", ",", "\n", "109", ":", "'curtain'", ",", "\n", "110", ":", "'desk-stuff'", ",", "\n", "111", ":", "'dirt'", ",", "\n", "112", ":", "'door-stuff'", ",", "\n", "113", ":", "'fence'", ",", "\n", "114", ":", "'floor-marble'", ",", "\n", "115", ":", "'floor-other'", ",", "\n", "116", ":", "'floor-stone'", ",", "\n", "117", ":", "'floor-tile'", ",", "\n", "118", ":", "'floor-wood'", ",", "\n", "119", ":", "'flower'", ",", "\n", "120", ":", "'fog'", ",", "\n", "121", ":", "'food-other'", ",", "\n", "122", ":", "'fruit'", ",", "\n", "123", ":", "'furniture-other'", ",", "\n", "124", ":", "'grass'", ",", "\n", "125", ":", "'gravel'", ",", "\n", "126", ":", "'ground-other'", ",", "\n", "127", ":", "'hill'", ",", "\n", "128", ":", "'house'", ",", "\n", "129", ":", "'leaves'", ",", "\n", "130", ":", "'light'", ",", "\n", "131", ":", "'mat'", ",", "\n", "132", ":", "'metal'", ",", "\n", "133", ":", "'mirror-stuff'", ",", "\n", "134", ":", "'moss'", ",", "\n", "135", ":", "'mountain'", ",", "\n", "136", ":", "'mud'", ",", "\n", "137", ":", "'napkin'", ",", "\n", "138", ":", "'net'", ",", "\n", "139", ":", "'paper'", ",", "\n", "140", ":", "'pavement'", ",", "\n", "141", ":", "'pillow'", ",", "\n", "142", ":", "'plant-other'", ",", "\n", "143", ":", "'plastic'", ",", "\n", "144", ":", "'platform'", ",", "\n", "145", ":", "'playingfield'", ",", "\n", "146", ":", "'railing'", ",", "\n", "147", ":", "'railroad'", ",", "\n", "148", ":", "'river'", ",", "\n", "149", ":", "'road'", ",", "\n", "150", ":", "'rock'", ",", "\n", "151", ":", "'roof'", ",", "\n", "152", ":", "'rug'", ",", "\n", "153", ":", "'salad'", ",", "\n", "154", ":", "'sand'", ",", "\n", "155", ":", "'sea'", ",", "\n", "156", ":", "'shelf'", ",", "\n", "157", ":", "'sky-other'", ",", "\n", "158", ":", "'skyscraper'", ",", "\n", "159", ":", "'snow'", ",", "\n", "160", ":", "'solid-other'", ",", "\n", "161", ":", "'stairs'", ",", "\n", "162", ":", "'stone'", ",", "\n", "163", ":", "'straw'", ",", "\n", "164", ":", "'structural-other'", ",", "\n", "165", ":", "'table'", ",", "\n", "166", ":", "'tent'", ",", "\n", "167", ":", "'textile-other'", ",", "\n", "168", ":", "'towel'", ",", "\n", "169", ":", "'tree'", ",", "\n", "170", ":", "'vegetable'", ",", "\n", "171", ":", "'wall-brick'", ",", "\n", "172", ":", "'wall-concrete'", ",", "\n", "173", ":", "'wall-other'", ",", "\n", "174", ":", "'wall-panel'", ",", "\n", "175", ":", "'wall-stone'", ",", "\n", "176", ":", "'wall-tile'", ",", "\n", "177", ":", "'wall-wood'", ",", "\n", "178", ":", "'water-other'", ",", "\n", "179", ":", "'waterdrops'", ",", "\n", "180", ":", "'window-blind'", ",", "\n", "181", ":", "'window-other'", ",", "\n", "182", ":", "'wood'", "}", "\n", "if", "id", "in", "labelmap", ":", "\n", "        ", "return", "labelmap", "[", "id", "]", "\n", "", "else", ":", "\n", "        ", "return", "'unknown'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.__init__": [[14, 40], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "tf.summary.FileWriter", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdirs", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "rank", "=", "0", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "tf_log", "=", "opt", ".", "isTrain", "and", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "                    ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.display_current_results": [[42, 111], ["visualizer.Visualizer.convert_visuals_to_numpy", "visualizer.Visualizer.items", "visualizer.Visualizer.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "isinstance", "html.HTML", "range", "html.HTML.save", "StringIO", "len", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "range", "os.path.join", "html.HTML.add_header", "visualizer.Visualizer.items", "BytesIO", "visualizer.Visualizer.tf.Summary.Value", "len", "os.path.join", "len", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "scipy.misc.toimage", "BytesIO.getvalue", "util.save_image", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_header", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_image", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_images", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_images", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_images", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_image"], ["", "", "", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "\n", "## convert tensors to numpy arrays", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "\n", "if", "0", ":", "# do not show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                    ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "                    ", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "# Create and write Summary", "\n", "                ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.png'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                            ", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                        ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "", "", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "# update website", "\n", "                ", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "5", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                    ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                        ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                            ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                                ", "img_path", "=", "'epoch%.3d_%s_%d.png'", "%", "(", "n", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                        ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                        ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.plot_current_errors": [[113, 120], ["errors.items", "value.mean().float.mean().float.mean().float", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "value.mean().float.mean().float.mean", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "value", "=", "value", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                    ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.print_current_errors": [[122, 134], ["errors.items", "v.mean().float.mean().float.mean().float", "print", "open", "log_file.write", "v.mean().float.mean().float.mean"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["", "", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "#print(v)", "\n", "#if v != 0:", "\n", "            ", "v", "=", "v", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "                ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.convert_visuals_to_numpy": [[135, 146], ["visuals.items", "util.tensor2label", "util.tensor2labelgray", "util.tensor2im"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2label", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2labelgray", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im"], ["", "", "", "def", "convert_visuals_to_numpy", "(", "self", ",", "visuals", ",", "gray", "=", "False", ")", ":", "\n", "        ", "for", "key", ",", "t", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "tile", "=", "self", ".", "opt", ".", "batchSize", ">", "8", "\n", "if", "'input_label'", "==", "key", "and", "not", "gray", ":", "\n", "                ", "t", "=", "util", ".", "tensor2label", "(", "t", ",", "self", ".", "opt", ".", "label_nc", "+", "2", ",", "tile", "=", "tile", ")", "\n", "", "elif", "'input_label'", "==", "key", "and", "gray", ":", "\n", "                ", "t", "=", "util", ".", "tensor2labelgray", "(", "t", ",", "self", ".", "opt", ".", "label_nc", "+", "2", ",", "tile", "=", "tile", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "util", ".", "tensor2im", "(", "t", ",", "tile", "=", "tile", ")", "\n", "", "visuals", "[", "key", "]", "=", "t", "\n", "", "return", "visuals", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.save_images": [[148, 172], ["visualizer.Visualizer.convert_visuals_to_numpy", "webpage.get_image_dir", "ntpath.basename", "visualizer.Visualizer.items", "os.path.splitext", "webpage.add_header", "os.path.join", "os.path.join", "ims.append", "txts.append", "links.append", "webpage.add_images", "util.save_image"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_header", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.add_images", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ",", "gray", "=", "False", ")", ":", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ",", "gray", "=", "gray", ")", "\n", "\n", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "webpage", ".", "add_header", "(", "name", ")", "\n", "", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "join", "(", "label", ",", "'%s.png'", "%", "(", "name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ",", "create_dir", "=", "True", ")", "\n", "\n", "", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.Colorize.__init__": [[280, 283], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.Colorize.__call__": [[284, 295], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_obj": [[15, 18], ["open", "dill.dump"], "function", ["None"], ["def", "save_obj", "(", "obj", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.load_obj": [[19, 22], ["open", "dill.load"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["", "", "def", "load_obj", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.copyconf": [[26, 32], ["argparse.Namespace", "print", "setattr", "vars"], "function", ["None"], ["", "", "def", "copyconf", "(", "default_opt", ",", "**", "kwargs", ")", ":", "\n", "    ", "conf", "=", "argparse", ".", "Namespace", "(", "**", "vars", "(", "default_opt", ")", ")", "\n", "for", "key", "in", "kwargs", ":", "\n", "        ", "print", "(", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "setattr", "(", "conf", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tile_images": [[34, 54], ["range", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "numpy.concatenate", "numpy.zeros", "range"], "function", ["None"], ["", "def", "tile_images", "(", "imgs", ",", "picturesPerRow", "=", "4", ")", ":", "\n", "    ", "\"\"\" Code borrowed from \n    https://stackoverflow.com/questions/26521365/cleanly-tile-numpy-array-of-images-stored-in-a-flattened-1d-format/26521997\n    \"\"\"", "\n", "\n", "# Padding", "\n", "if", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "==", "0", ":", "\n", "        ", "rowPadding", "=", "0", "\n", "", "else", ":", "\n", "        ", "rowPadding", "=", "picturesPerRow", "-", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "\n", "", "if", "rowPadding", ">", "0", ":", "\n", "        ", "imgs", "=", "np", ".", "concatenate", "(", "[", "imgs", ",", "np", ".", "zeros", "(", "(", "rowPadding", ",", "*", "imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "imgs", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Tiling Loop (The conditionals are not necessary anymore)", "\n", "", "tiled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgs", ".", "shape", "[", "0", "]", ",", "picturesPerRow", ")", ":", "\n", "        ", "tiled", ".", "append", "(", "np", ".", "concatenate", "(", "[", "imgs", "[", "j", "]", "for", "j", "in", "range", "(", "i", ",", "i", "+", "picturesPerRow", ")", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "tiled", "=", "np", ".", "concatenate", "(", "tiled", ",", "axis", "=", "0", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im": [[58, 90], ["isinstance", "image_tensor.unsqueeze.detach().cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "image_tensor.unsqueeze.dim", "range", "numpy.concatenate", "image_tensor.unsqueeze.dim", "image_tensor.unsqueeze.unsqueeze", "len", "np.clip.append", "image_tensor.unsqueeze.size", "util.tensor2im", "np.concatenate.append", "util.tile_images", "image_tensor.unsqueeze.detach().cpu().float", "numpy.transpose", "util.tensor2im", "tensor2im.reshape", "image_tensor.unsqueeze.detach().cpu", "numpy.transpose", "image_tensor.unsqueeze.detach"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tile_images", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "\n", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "image_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "image_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2im", "(", "one_image", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "return", "images_np", "\n", "\n", "", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "image_tensor", "=", "image_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_numpy", "=", "image_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2label": [[92, 119], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "label_tensor.cpu().float.dim", "range", "numpy.concatenate", "label_tensor.cpu().float.dim", "numpy.zeros", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.size", "util.tensor2label", "np.concatenate.append", "util.tile_images", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max", "tensor2label.reshape"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2label", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tile_images"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "label_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "label_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "label_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2label", "(", "one_image", ",", "n_label", ",", "imtype", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "images_np", "=", "images_np", "[", "0", "]", "\n", "return", "images_np", "\n", "\n", "", "", "if", "label_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "result", "=", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2labelgray": [[121, 147], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "label_tensor.cpu().float.dim", "range", "numpy.concatenate", "label_tensor.cpu().float.dim", "numpy.zeros", "util.tensor2im", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.size", "util.tensor2labelgray", "np.concatenate.append", "util.tile_images", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max", "tensor2labelgray.reshape"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2im", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tensor2labelgray", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.tile_images"], ["", "def", "tensor2labelgray", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "label_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "label_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "label_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2labelgray", "(", "one_image", ",", "n_label", ",", "imtype", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "images_np", "=", "images_np", "[", "0", "]", "\n", "return", "images_np", "\n", "\n", "", "", "if", "label_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "64", ",", "64", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "result", "=", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_image": [[149, 166], ["os.makedirs", "PIL.Image.fromarray", "Image.fromarray.save", "PIL.Image.fromarray", "Image.fromarray.save", "os.path.dirname", "np.repeat.squeeze", "image_path.replace", "numpy.expand_dims", "numpy.repeat", "image_path.replace", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "create_dir", "=", "False", ",", "gray", "=", "False", ")", ":", "\n", "    ", "if", "create_dir", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "## save to png", "\n", "", "if", "gray", ":", "\n", "        ", "if", "(", "image_numpy", ".", "shape", ")", "==", "3", ":", "\n", "            ", "assert", "(", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ")", "\n", "image_numpy", "=", "image_numpy", ".", "squeeze", "(", "2", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "image_numpy", ".", "shape", ")", "==", "2", "and", "not", "gray", ":", "\n", "            ", "image_numpy", "=", "np", ".", "expand_dims", "(", "image_numpy", ",", "axis", "=", "2", ")", "\n", "", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", "and", "not", "gray", ":", "\n", "            ", "image_numpy", "=", "np", ".", "repeat", "(", "image_numpy", ",", "3", ",", "2", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdirs": [[167, 173], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir": [[174, 177], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.atoi": [[178, 180], ["text.isdigit", "int"], "function", ["None"], ["", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.natural_keys": [[181, 188], ["util.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.natural_sort": [[189, 191], ["items.sort"], "function", ["None"], ["", "def", "natural_sort", "(", "items", ")", ":", "\n", "    ", "items", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.str2bool": [[192, 199], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.find_class_in_module": [[200, 213], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["", "", "def", "find_class_in_module", "(", "target_cls_name", ",", "module", ")", ":", "\n", "    ", "target_cls_name", "=", "target_cls_name", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "clslib", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "cls", "=", "None", "\n", "for", "name", ",", "clsobj", "in", "clslib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_cls_name", ":", "\n", "            ", "cls", "=", "clsobj", "\n", "\n", "", "", "if", "cls", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s, there should be a class whose name matches %s in lowercase without underscore(_)\"", "%", "(", "module", ",", "target_cls_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.save_network": [[214, 218], ["os.path.join", "torch.save", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "def", "save_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "save_path", ")", "# net.cpu() -> net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.load_network": [[219, 229], ["os.path.join", "os.path.join", "torch.load", "net.load_state_dict", "torch.device"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "weights", "=", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "#weights = {k: v for k, v in weights.items() if k in net.state_dict()}", "\n", "#torch.save(weights, 'checkpoints/new.pth')", "\n", "#pdb.set_trace()", "\n", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.uint82bin": [[236, 239], ["str", "range"], "function", ["None"], ["", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.labelcolormap": [[240, 278], ["numpy.array", "numpy.zeros", "range", "range", "range", "util.uint82bin", "util.coco.id2label", "numpy.array", "numpy.uint8", "numpy.uint8", "numpy.uint8", "list"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.uint82bin", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.coco.id2label"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "+", "1", "# let's give 0 a color", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "\n", "", "if", "N", "==", "182", ":", "# COCO        ", "\n", "            ", "important_colors", "=", "{", "\n", "'sea'", ":", "(", "54", ",", "62", ",", "167", ")", ",", "\n", "'sky-other'", ":", "(", "95", ",", "219", ",", "255", ")", ",", "\n", "'tree'", ":", "(", "140", ",", "104", ",", "47", ")", ",", "\n", "'clouds'", ":", "(", "170", ",", "170", ",", "170", ")", ",", "\n", "'grass'", ":", "(", "29", ",", "195", ",", "49", ")", "\n", "}", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "name", "=", "util", ".", "coco", ".", "id2label", "(", "i", ")", "\n", "if", "name", "in", "important_colors", ":", "\n", "                    ", "color", "=", "important_colors", "[", "name", "]", "\n", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "list", "(", "color", ")", ")", "\n", "\n", "", "", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.SPADE.__init__": [[13, 28], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_nc", ",", "label_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ks", "=", "3", "\n", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.SPADE.forward": [[29, 44], ["normalization.SPADE.param_free_norm", "normalization.SPADE.shared", "normalization.SPADE.gamma", "normalization.SPADE.beta", "torch.interpolate", "torch.interpolate", "x.size", "torch.interpolate.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "if", "x", ".", "size", "(", ")", "[", "2", "]", "!=", "segmap", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "", "actv", "=", "self", ".", "shared", "(", "segmap", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.FILM.__init__": [[47, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "guide_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ks", "=", "3", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "guide_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.FILM.forward": [[61, 72], ["normalization.FILM.shared", "normalization.FILM.gamma", "normalization.FILM.beta", "normalization.affine_transformation", "torch.interpolate", "torch.interpolate", "x.size", "torch.interpolate.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.affine_transformation"], ["", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", ")", "[", "2", "]", "!=", "guide", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "guide", "=", "F", ".", "interpolate", "(", "guide", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "", "actv", "=", "self", ".", "shared", "(", "guide", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "affine_transformation", "(", "x", ",", "gamma", ",", "beta", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.GuideCorrelation.__init__": [[75, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "guide_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ks", "=", "3", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "guide_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.GuideCorrelation.forward": [[89, 99], ["normalization.GuideCorrelation.shared", "normalization.GuideCorrelation.gamma", "normalization.GuideCorrelation.beta", "torch.interpolate", "torch.interpolate", "x.size", "torch.interpolate.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "        ", "if", "x", ".", "size", "(", ")", "[", "2", "]", "!=", "guide", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "guide", "=", "F", ".", "interpolate", "(", "guide", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "", "actv", "=", "self", ".", "shared", "(", "guide", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "beta", "(", "actv", ")", "\n", "\n", "return", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.GuideNormalization.__init__": [[101, 105], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "nc", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.GuideNormalization.forward": [[106, 114], ["normalization.GuideNormalization.param_free_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma1", ",", "beta1", ",", "gamma2", ",", "beta2", ")", ":", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "gamma", "=", "gamma1", "*", "gamma2", "\n", "beta", "=", "beta1", "*", "beta2", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.calc_mean_std": [[116, 125], ["feat.size", "feat_var.sqrt().view", "feat.view().mean().view", "len", "feat.view().var", "feat_var.sqrt", "feat.view().mean", "feat.view", "feat.view"], "function", ["None"], ["", "", "def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.affine_transformation": [[127, 133], ["X.clone", "normalization.calc_mean_std", "mean.expand_as.expand_as", "std.expand_as.expand_as"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.normalization.calc_mean_std"], ["", "def", "affine_transformation", "(", "X", ",", "alpha", ",", "beta", ")", ":", "\n", "    ", "x", "=", "X", ".", "clone", "(", ")", "\n", "mean", ",", "std", "=", "calc_mean_std", "(", "x", ")", "\n", "mean", "=", "mean", ".", "expand_as", "(", "x", ")", "\n", "std", "=", "std", ".", "expand_as", "(", "x", ")", "\n", "return", "alpha", "*", "(", "(", "x", "-", "mean", ")", "/", "std", ")", "+", "beta", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.SemanticEncoder.__init__": [[6, 41], ["torch.Module.__init__", "torch.ModuleList", "semantic_encoder.SemanticEncoder._initialize_weights", "range", "range", "semantic_encoder.SemanticEncoder.hidden_layers.append", "semantic_encoder.SemanticEncoder.hidden_layers.append", "semantic_encoder.SemanticEncoder.hidden_layers.append", "semantic_encoder.SemanticEncoder.hidden_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNetPrior._initialize_weights"], ["def", "__init__", "(", "self", ",", "architecture", "=", "'vgg16'", ",", "in_channels", "=", "19", ",", "num_hidden_layers", "=", "4", ",", "base_feature_size", "=", "32", ")", ":", "\n", "\t\t", "super", "(", "SemanticEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "'bn'", "in", "architecture", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "\t\t\t\t", "if", "idx", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "base_feature_size", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_feature_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "in_channels", "=", "base_feature_size", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "feature_size", "=", "in_channels", "*", "2", "\n", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "in_channels", "=", "feature_size", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "\t\t\t\t", "if", "idx", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "base_feature_size", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "in_channels", "=", "base_feature_size", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "feature_size", "=", "in_channels", "*", "2", "\n", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "in_channels", "=", "feature_size", "\n", "\n", "", "", "", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.SemanticEncoder._initialize_weights": [[42, 54], ["semantic_encoder.SemanticEncoder.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.SemanticEncoder.forward": [[55, 62], ["enumerate", "layer", "output.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "output", "=", "[", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "hidden_layers", ")", ":", "\n", "\t\t\t", "x", "=", "layer", "(", "x", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.ResNetSemanticEncoder.__init__": [[67, 91], ["torch.Module.__init__", "torch.ModuleList", "range", "semantic_encoder.ResNetSemanticEncoder._initialize_weights", "semantic_encoder.ResNetSemanticEncoder.hidden_layers.append", "semantic_encoder.ResNetSemanticEncoder.hidden_layers.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNetPrior._initialize_weights"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "19", ",", "num_hidden_layers", "=", "4", ")", ":", "\n", "\t\t", "super", "(", "ResNetSemanticEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "base_feature_size", "=", "32", "\n", "\n", "for", "idx", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "\t\t\t", "if", "idx", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "base_feature_size", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_feature_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ")", "\n", "in_channels", "=", "base_feature_size", "\n", "", "else", ":", "\n", "\t\t\t\t", "feature_size", "=", "in_channels", "*", "2", "\n", "self", ".", "hidden_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "in_channels", "=", "feature_size", "\n", "\n", "\n", "", "", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.ResNetSemanticEncoder._initialize_weights": [[92, 104], ["semantic_encoder.ResNetSemanticEncoder.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.semantic_encoder.ResNetSemanticEncoder.forward": [[105, 112], ["enumerate", "layer", "output.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "output", "=", "[", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "hidden_layers", ")", ":", "\n", "\t\t\t", "x", "=", "layer", "(", "x", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNet.__init__": [[18, 79], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "vgg_features.VGGSPADE", "vgg_features.VGGFeatures", "semantic_encoder.SemanticEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "architecture", "=", "'vgg16'", ",", "semantic", "=", "True", ",", "pretrained", "=", "True", ",", "correlation", "=", "True", ",", "prior", "=", "False", ",", "spade", "=", "''", ",", "\n", "num_semantic_classes", "=", "19", ")", ":", "\n", "        ", "super", "(", "DissimNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#get initialization parameters", "\n", "self", ".", "correlation", "=", "correlation", "\n", "self", ".", "spade", "=", "spade", "\n", "self", ".", "semantic", "=", "semantic", "\n", "\n", "# generate encoders", "\n", "if", "self", ".", "spade", "==", "'encoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "self", ".", "vgg_encoder", "=", "VGGSPADE", "(", "pretrained", "=", "pretrained", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vgg_encoder", "=", "VGGFeatures", "(", "architecture", "=", "architecture", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "", "if", "self", ".", "semantic", ":", "\n", "            ", "self", ".", "semantic_encoder", "=", "SemanticEncoder", "(", "architecture", "=", "architecture", ",", "in_channels", "=", "num_semantic_classes", ")", "\n", "\n", "# layers for decoder", "\n", "# all the 3x3 convolutions", "\n", "", "if", "correlation", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "513", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "513", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "385", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "193", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "384", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "self", ".", "conv2", "=", "SPADEDecoderLayer", "(", "nc", "=", "256", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv13", "=", "SPADEDecoderLayer", "(", "nc", "=", "256", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv4", "=", "SPADEDecoderLayer", "(", "nc", "=", "128", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv6", "=", "SPADEDecoderLayer", "(", "nc", "=", "64", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv13", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "# all the tranposed convolutions", "\n", "", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "# all the other 1x1 convolutions", "\n", "if", "self", ".", "semantic", ":", "\n", "            ", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "1280", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "640", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "320", ",", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "160", ",", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNet._initialize_weights": [[82, 94], ["dissimilarity_model.DissimNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNet.forward": [[96, 169], ["dissimilarity_model.DissimNet.conv7", "dissimilarity_model.DissimNet.conv8", "dissimilarity_model.DissimNet.conv9", "dissimilarity_model.DissimNet.conv10", "dissimilarity_model.DissimNet.conv1", "dissimilarity_model.DissimNet.tconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNet.conv12", "dissimilarity_model.DissimNet.tconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNet.conv3", "dissimilarity_model.DissimNet.tconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNet.conv5", "dissimilarity_model.DissimNet.conv11", "dissimilarity_model.DissimNet.vgg_encoder", "dissimilarity_model.DissimNet.vgg_encoder", "dissimilarity_model.DissimNet.vgg_encoder", "dissimilarity_model.DissimNet.vgg_encoder", "dissimilarity_model.DissimNet.semantic_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNet.conv2", "dissimilarity_model.DissimNet.conv2", "dissimilarity_model.DissimNet.conv13", "dissimilarity_model.DissimNet.conv13", "dissimilarity_model.DissimNet.conv4", "dissimilarity_model.DissimNet.conv4", "dissimilarity_model.DissimNet.conv6", "dissimilarity_model.DissimNet.conv6", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "original_img", ",", "synthesis_img", ",", "semantic_img", ",", "softmax_out", "=", "False", ")", ":", "\n", "# get all the image encodings", "\n", "        ", "if", "self", ".", "spade", "==", "'encoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "encoding_og", "=", "self", ".", "vgg_encoder", "(", "original_img", ",", "semantic_img", ")", "\n", "encoding_syn", "=", "self", ".", "vgg_encoder", "(", "synthesis_img", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "encoding_og", "=", "self", ".", "vgg_encoder", "(", "original_img", ")", "\n", "encoding_syn", "=", "self", ".", "vgg_encoder", "(", "synthesis_img", ")", "\n", "\n", "", "if", "self", ".", "semantic", ":", "\n", "            ", "encoding_sem", "=", "self", ".", "semantic_encoder", "(", "semantic_img", ")", "\n", "# concatenate the output of each encoder", "\n", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ",", "encoding_sem", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ",", "encoding_sem", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ",", "encoding_sem", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ",", "encoding_sem", "[", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# use 1x1 convolutions to reduce dimensions of concatenations", "\n", "", "layer4_cat", "=", "self", ".", "conv7", "(", "layer4_cat", ")", "\n", "layer3_cat", "=", "self", ".", "conv8", "(", "layer3_cat", ")", "\n", "layer2_cat", "=", "self", ".", "conv9", "(", "layer2_cat", ")", "\n", "layer1_cat", "=", "self", ".", "conv10", "(", "layer1_cat", ")", "\n", "\n", "if", "self", ".", "correlation", ":", "\n", "# get correlation for each layer (multiplication + 1x1 conv)", "\n", "            ", "corr1", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr2", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr3", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr4", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "# concatenate correlation layers", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "corr4", ",", "layer4_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "corr3", ",", "layer3_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "corr2", ",", "layer2_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "corr1", ",", "layer1_cat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Run Decoder", "\n", "", "x", "=", "self", ".", "conv1", "(", "layer4_cat", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv1", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer3_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv12", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv13", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv3", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer2_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv4", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv2", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer1_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv6", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "", "logits", "=", "self", ".", "conv11", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNetPrior.__init__": [[172, 236], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "vgg_features.VGGSPADE", "vgg_features.VGGFeatures", "semantic_encoder.SemanticEncoder", "semantic_encoder.SemanticEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "dissimilarity_model.SPADEDecoderLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "torch.SELU", "torch.SELU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "architecture", "=", "'vgg16'", ",", "semantic", "=", "True", ",", "pretrained", "=", "True", ",", "correlation", "=", "True", ",", "prior", "=", "False", ",", "spade", "=", "''", ",", "\n", "num_semantic_classes", "=", "19", ")", ":", "\n", "        ", "super", "(", "DissimNetPrior", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# get initialization parameters", "\n", "self", ".", "correlation", "=", "correlation", "\n", "self", ".", "spade", "=", "spade", "\n", "# self.semantic = False if spade else semantic", "\n", "self", ".", "semantic", "=", "semantic", "\n", "self", ".", "prior", "=", "prior", "\n", "\n", "# generate encoders", "\n", "if", "self", ".", "spade", "==", "'encoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "self", ".", "vgg_encoder", "=", "VGGSPADE", "(", "pretrained", "=", "pretrained", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vgg_encoder", "=", "VGGFeatures", "(", "architecture", "=", "architecture", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "", "if", "self", ".", "semantic", ":", "\n", "            ", "self", ".", "semantic_encoder", "=", "SemanticEncoder", "(", "architecture", "=", "architecture", ",", "in_channels", "=", "num_semantic_classes", ")", "\n", "self", ".", "prior_encoder", "=", "SemanticEncoder", "(", "architecture", "=", "architecture", ",", "in_channels", "=", "3", ",", "base_feature_size", "=", "64", ")", "\n", "\n", "# layers for decoder", "\n", "# all the 3x3 convolutions", "\n", "", "if", "correlation", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "513", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "513", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "385", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "193", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "384", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "self", ".", "conv2", "=", "SPADEDecoderLayer", "(", "nc", "=", "256", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv13", "=", "SPADEDecoderLayer", "(", "nc", "=", "256", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv4", "=", "SPADEDecoderLayer", "(", "nc", "=", "128", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "self", ".", "conv6", "=", "SPADEDecoderLayer", "(", "nc", "=", "64", ",", "label_nc", "=", "num_semantic_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv13", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "SELU", "(", ")", ")", "\n", "\n", "# all the tranposed convolutions", "\n", "", "self", ".", "tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "tconv3", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "tconv2", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "# all the other 1x1 convolutions", "\n", "if", "self", ".", "semantic", ":", "\n", "            ", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "1280", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "640", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "320", ",", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "160", ",", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNetPrior._initialize_weights": [[239, 251], ["dissimilarity_model.DissimNetPrior.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.DissimNetPrior.forward": [[252, 333], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.conv7", "dissimilarity_model.DissimNetPrior.conv8", "dissimilarity_model.DissimNetPrior.conv9", "dissimilarity_model.DissimNetPrior.conv10", "dissimilarity_model.DissimNetPrior.conv1", "dissimilarity_model.DissimNetPrior.tconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.conv12", "dissimilarity_model.DissimNetPrior.tconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.conv3", "dissimilarity_model.DissimNetPrior.tconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.conv5", "dissimilarity_model.DissimNetPrior.conv11", "dissimilarity_model.DissimNetPrior.vgg_encoder", "dissimilarity_model.DissimNetPrior.vgg_encoder", "dissimilarity_model.DissimNetPrior.vgg_encoder", "dissimilarity_model.DissimNetPrior.vgg_encoder", "dissimilarity_model.DissimNetPrior.semantic_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.prior_encoder", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dissimilarity_model.DissimNetPrior.conv2", "dissimilarity_model.DissimNetPrior.conv2", "dissimilarity_model.DissimNetPrior.conv13", "dissimilarity_model.DissimNetPrior.conv13", "dissimilarity_model.DissimNetPrior.conv4", "dissimilarity_model.DissimNetPrior.conv4", "dissimilarity_model.DissimNetPrior.conv6", "dissimilarity_model.DissimNetPrior.conv6", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "original_img", ",", "synthesis_img", ",", "semantic_img", ",", "entropy", ",", "mae", ",", "distance", ",", "softmax_out", "=", "False", ")", ":", "\n", "# get all the image encodings", "\n", "        ", "prior_img", "=", "torch", ".", "cat", "(", "(", "entropy", ",", "mae", ",", "distance", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "spade", "==", "'encoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "encoding_og", "=", "self", ".", "vgg_encoder", "(", "original_img", ",", "semantic_img", ")", "\n", "encoding_syn", "=", "self", ".", "vgg_encoder", "(", "synthesis_img", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "encoding_og", "=", "self", ".", "vgg_encoder", "(", "original_img", ")", "\n", "encoding_syn", "=", "self", ".", "vgg_encoder", "(", "synthesis_img", ")", "\n", "\n", "", "if", "self", ".", "semantic", ":", "\n", "            ", "encoding_sem", "=", "self", ".", "semantic_encoder", "(", "semantic_img", ")", "\n", "# concatenate the output of each encoder", "\n", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ",", "encoding_sem", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ",", "encoding_sem", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ",", "encoding_sem", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ",", "encoding_sem", "[", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# use 1x1 convolutions to reduce dimensions of concatenations", "\n", "", "layer4_cat", "=", "self", ".", "conv7", "(", "layer4_cat", ")", "\n", "layer3_cat", "=", "self", ".", "conv8", "(", "layer3_cat", ")", "\n", "layer2_cat", "=", "self", ".", "conv9", "(", "layer2_cat", ")", "\n", "layer1_cat", "=", "self", ".", "conv10", "(", "layer1_cat", ")", "\n", "\n", "if", "self", ".", "prior", ":", "\n", "            ", "encoding_pior", "=", "self", ".", "prior_encoder", "(", "prior_img", ")", "\n", "layer1_cat", "=", "torch", ".", "mul", "(", "layer1_cat", ",", "encoding_pior", "[", "0", "]", ")", "\n", "layer2_cat", "=", "torch", ".", "mul", "(", "layer2_cat", ",", "encoding_pior", "[", "1", "]", ")", "\n", "layer3_cat", "=", "torch", ".", "mul", "(", "layer3_cat", ",", "encoding_pior", "[", "2", "]", ")", "\n", "layer4_cat", "=", "torch", ".", "mul", "(", "layer4_cat", ",", "encoding_pior", "[", "3", "]", ")", "\n", "\n", "", "if", "self", ".", "correlation", ":", "\n", "# get correlation for each layer (multiplication + 1x1 conv)", "\n", "            ", "corr1", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "0", "]", ",", "encoding_syn", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr2", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "1", "]", ",", "encoding_syn", "[", "1", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr3", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "2", "]", ",", "encoding_syn", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "corr4", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "encoding_og", "[", "3", "]", ",", "encoding_syn", "[", "3", "]", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "# concatenate correlation layers", "\n", "layer4_cat", "=", "torch", ".", "cat", "(", "(", "corr4", ",", "layer4_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer3_cat", "=", "torch", ".", "cat", "(", "(", "corr3", ",", "layer3_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer2_cat", "=", "torch", ".", "cat", "(", "(", "corr2", ",", "layer2_cat", ")", ",", "dim", "=", "1", ")", "\n", "layer1_cat", "=", "torch", ".", "cat", "(", "(", "corr1", ",", "layer1_cat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Run Decoder", "\n", "", "x", "=", "self", ".", "conv1", "(", "layer4_cat", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv1", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer3_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv12", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv13", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv13", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv3", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer2_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv4", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "", "x", "=", "self", ".", "tconv2", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "layer1_cat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "if", "self", ".", "spade", "==", "'decoder'", "or", "self", ".", "spade", "==", "'both'", ":", "\n", "            ", "x", "=", "self", ".", "conv6", "(", "x", ",", "semantic_img", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "", "logits", "=", "self", ".", "conv11", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.SPADEDecoderLayer.__init__": [[1176, 1185], ["torch.Module.__init__", "normalization.SPADE", "torch.SELU", "torch.SELU", "torch.Conv2d", "torch.Conv2d", "normalization.SPADE", "torch.SELU", "torch.SELU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "256", ",", "label_nc", "=", "19", ")", ":", "\n", "        ", "super", "(", "SPADEDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# create conv layers", "\n", "self", ".", "norm1", "=", "SPADE", "(", "norm_nc", "=", "nc", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "selu1", "=", "nn", ".", "SELU", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nc", ",", "nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "SPADE", "(", "norm_nc", "=", "nc", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "selu2", "=", "nn", ".", "SELU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.dissimilarity_model.SPADEDecoderLayer.forward": [[1186, 1189], ["dissimilarity_model.SPADEDecoderLayer.selu2", "dissimilarity_model.SPADEDecoderLayer.norm2", "dissimilarity_model.SPADEDecoderLayer.conv", "dissimilarity_model.SPADEDecoderLayer.selu1", "dissimilarity_model.SPADEDecoderLayer.norm1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "out", "=", "self", ".", "selu2", "(", "self", ".", "norm2", "(", "self", ".", "conv", "(", "self", ".", "selu1", "(", "self", ".", "norm1", "(", "x", ",", "seg", ")", ")", ")", ",", "seg", ")", ")", "\n", "return", "out", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.BasicBlock.__init__": [[30, 47], ["torch.Module.__init__", "resnet_features.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_features.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.BasicBlock.forward": [[48, 65], ["resnet_features.BasicBlock.conv1", "resnet_features.BasicBlock.bn1", "resnet_features.BasicBlock.relu", "resnet_features.BasicBlock.conv2", "resnet_features.BasicBlock.bn2", "resnet_features.BasicBlock.relu", "resnet_features.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "resnet_features.conv1x1", "norm_layer", "resnet_features.conv3x3", "norm_layer", "resnet_features.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.conv1x1", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.Bottleneck.forward": [[87, 108], ["resnet_features.Bottleneck.conv1", "resnet_features.Bottleneck.bn1", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.conv2", "resnet_features.Bottleneck.bn2", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.conv3", "resnet_features.Bottleneck.bn3", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.ResNet.__init__": [[112, 160], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_features.ResNet._make_layer", "resnet_features.ResNet._make_layer", "resnet_features.ResNet._make_layer", "resnet_features.ResNet._make_layer", "resnet_features.ResNet.modules", "len", "ValueError", "isinstance", "resnet_features.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.ResNet._make_layer": [[161, 184], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_features.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.ResNet._forward_impl": [[185, 198], ["resnet_features.ResNet.conv1", "resnet_features.ResNet.bn1", "resnet_features.ResNet.relu", "resnet_features.ResNet.maxpool", "resnet_features.ResNet.layer1", "resnet_features.ResNet.layer2", "resnet_features.ResNet.layer3", "resnet_features.ResNet.layer4"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "return", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.ResNet.forward": [[199, 201], ["resnet_features.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.conv1x1": [[22, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet": [[203, 210], ["resnet_features.ResNet", "torch.utils.model_zoo.load_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.resnet18": [[212, 222], ["resnet_features._resnet"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.resnet34": [[224, 234], ["resnet_features._resnet"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features.resnet": [[237, 250], ["resnet_features._resnet", "resnet_features._resnet", "resnet_features._resnet", "resnet_features._resnet", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.resnet_features._resnet"], ["", "def", "resnet", "(", "architecture", "=", "'resnet18'", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "architecture", "==", "'resnet18'", ":", "\n", "        ", "model", "=", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "True", ")", "\n", "", "elif", "architecture", "==", "'resnet34'", ":", "\n", "        ", "model", "=", "_resnet", "(", "architecture", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "True", ")", "\n", "", "elif", "architecture", "==", "'resnet50'", ":", "\n", "        ", "model", "=", "_resnet", "(", "architecture", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "True", ")", "\n", "", "elif", "architecture", "==", "'resnet101'", ":", "\n", "        ", "model", "=", "_resnet", "(", "architecture", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGGFeatures.__init__": [[11, 27], ["torch.Module.__init__", "torchvision.models.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.models.vgg16_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "list", "list", "list", "list", "list", "list", "list", "torchvision.models.vgg16.children", "torchvision.models.vgg16.children", "torchvision.models.vgg16.children", "torchvision.models.vgg16.children", "torchvision.models.vgg16_bn.children", "torchvision.models.vgg16_bn.children", "torchvision.models.vgg16_bn.children", "torchvision.models.vgg16_bn.children"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\t", "def", "__init__", "(", "self", ",", "architecture", "=", "'vgg16'", ",", "pretrained", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "VGGFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'bn'", "not", "in", "architecture", ":", "\n", "\t\t\t", "vgg16", "=", "torchvision", ".", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16", ".", "children", "(", ")", ")", "[", "0", "]", "[", ":", "4", "]", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16", ".", "children", "(", ")", ")", "[", "0", "]", "[", "4", ":", "9", "]", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16", ".", "children", "(", ")", ")", "[", "0", "]", "[", "9", ":", "16", "]", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16", ".", "children", "(", ")", ")", "[", "0", "]", "[", "16", ":", "23", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "vgg16_bn", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16_bn", ".", "children", "(", ")", ")", "[", "0", "]", "[", ":", "6", "]", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16_bn", ".", "children", "(", ")", ")", "[", "0", "]", "[", "6", ":", "13", "]", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16_bn", ".", "children", "(", ")", ")", "[", "0", "]", "[", "13", ":", "23", "]", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16_bn", ".", "children", "(", ")", ")", "[", "0", "]", "[", "23", ":", "33", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGGFeatures.forward": [[28, 34], ["vgg_features.VGGFeatures.layer1", "vgg_features.VGGFeatures.layer2", "vgg_features.VGGFeatures.layer3", "vgg_features.VGGFeatures.layer4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "return", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGGSPADE.__init__": [[53, 113], ["super().__init__", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "SPADE", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.vgg16_bn", "vgg_features.VGGSPADE.slice1.add_module", "vgg_features.VGGSPADE.slice2.add_module", "vgg_features.VGGSPADE.slice3.add_module", "vgg_features.VGGSPADE.slice4.add_module", "vgg_features.VGGSPADE.slice5.add_module", "vgg_features.VGGSPADE.slice6.add_module", "vgg_features.VGGSPADE.slice7.add_module", "vgg_features.VGGSPADE.slice8.add_module", "vgg_features.VGGSPADE.slice9.add_module", "vgg_features.VGGSPADE.slice10.add_module", "vgg_features.VGGSPADE.slice11.add_module", "vgg_features.VGGSPADE.slice12.add_module", "vgg_features.VGGSPADE.slice13.add_module", "vgg_features.VGGSPADE.slice14.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\t", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ",", "label_nc", "=", "19", ")", ":", "\n", "\n", "\t\t", "super", "(", "VGGSPADE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "\n", "self", ".", "norm_layer_1", "=", "SPADE", "(", "norm_nc", "=", "64", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_2", "=", "SPADE", "(", "norm_nc", "=", "64", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_3", "=", "SPADE", "(", "norm_nc", "=", "128", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_4", "=", "SPADE", "(", "norm_nc", "=", "128", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_5", "=", "SPADE", "(", "norm_nc", "=", "256", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_6", "=", "SPADE", "(", "norm_nc", "=", "256", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_7", "=", "SPADE", "(", "norm_nc", "=", "256", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_8", "=", "SPADE", "(", "norm_nc", "=", "512", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_9", "=", "SPADE", "(", "norm_nc", "=", "512", ",", "label_nc", "=", "label_nc", ")", "\n", "self", ".", "norm_layer_10", "=", "SPADE", "(", "norm_nc", "=", "512", ",", "label_nc", "=", "label_nc", ")", "\n", "\n", "# TODO Reformat to make it more efficient/clean code", "\n", "self", ".", "slice1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice8", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice9", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice10", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice11", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice12", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice13", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice14", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "1", ")", ":", "\n", "\t\t\t", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "\t\t\t", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "6", ")", ":", "\n", "\t\t\t", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "6", ",", "8", ")", ":", "\n", "\t\t\t", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "11", ")", ":", "\n", "\t\t\t", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "\t\t\t", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "13", ",", "15", ")", ":", "\n", "\t\t\t", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "\t\t\t", "self", ".", "slice8", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "19", ",", "21", ")", ":", "\n", "\t\t\t", "self", ".", "slice9", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "22", ",", "23", ")", ":", "\n", "\t\t\t", "self", ".", "slice10", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "25", ")", ":", "\n", "\t\t\t", "self", ".", "slice11", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "26", ",", "28", ")", ":", "\n", "\t\t\t", "self", ".", "slice12", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "29", ",", "31", ")", ":", "\n", "\t\t\t", "self", ".", "slice13", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "32", ",", "33", ")", ":", "\n", "\t\t\t", "self", ".", "slice14", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGGSPADE.forward": [[114, 123], ["vgg_features.VGGSPADE.slice3", "vgg_features.VGGSPADE.slice6", "vgg_features.VGGSPADE.slice10", "vgg_features.VGGSPADE.slice14", "vgg_features.VGGSPADE.norm_layer_2", "vgg_features.VGGSPADE.norm_layer_4", "vgg_features.VGGSPADE.norm_layer_7", "vgg_features.VGGSPADE.norm_layer_10", "vgg_features.VGGSPADE.slice2", "vgg_features.VGGSPADE.slice5", "vgg_features.VGGSPADE.slice9", "vgg_features.VGGSPADE.slice13", "vgg_features.VGGSPADE.norm_layer_1", "vgg_features.VGGSPADE.norm_layer_3", "vgg_features.VGGSPADE.norm_layer_6", "vgg_features.VGGSPADE.norm_layer_9", "vgg_features.VGGSPADE.slice1", "vgg_features.VGGSPADE.slice4", "vgg_features.VGGSPADE.slice8", "vgg_features.VGGSPADE.slice12", "vgg_features.VGGSPADE.norm_layer_5", "vgg_features.VGGSPADE.norm_layer_8", "vgg_features.VGGSPADE.slice7", "vgg_features.VGGSPADE.slice11"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ",", "semantic_img", ")", ":", "\n", "\t\t", "h_relu1", "=", "self", ".", "slice3", "(", "self", ".", "norm_layer_2", "(", "self", ".", "slice2", "(", "self", ".", "norm_layer_1", "(", "self", ".", "slice1", "(", "img", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", "\n", "h_relu2", "=", "self", ".", "slice6", "(", "self", ".", "norm_layer_4", "(", "self", ".", "slice5", "(", "self", ".", "norm_layer_3", "(", "self", ".", "slice4", "(", "h_relu1", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", "\n", "h_relu3", "=", "self", ".", "slice10", "(", "self", ".", "norm_layer_7", "(", "self", ".", "slice9", "(", "self", ".", "norm_layer_6", "(", "self", ".", "slice8", "(", "self", ".", "norm_layer_5", "(", "self", ".", "slice7", "(", "h_relu2", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", "\n", "h_relu4", "=", "self", ".", "slice14", "(", "self", ".", "norm_layer_10", "(", "self", ".", "slice13", "(", "self", ".", "norm_layer_9", "(", "self", ".", "slice12", "(", "self", ".", "norm_layer_8", "(", "self", ".", "slice11", "(", "h_relu3", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", ",", "semantic_img", ")", ")", "\n", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGG19_difference.__init__": [[125, 155], ["super().__init__", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "vgg_features.VGG19_difference.slice1.add_module", "vgg_features.VGG19_difference.slice2.add_module", "vgg_features.VGG19_difference.slice3.add_module", "vgg_features.VGG19_difference.slice4.add_module", "vgg_features.VGG19_difference.slice5.add_module", "vgg_features.VGG19_difference.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["\t", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "up5", "=", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "up4", "=", "Upsample", "(", "scale_factor", "=", "8", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "up3", "=", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "up2", "=", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "up1", "=", "Upsample", "(", "scale_factor", "=", "1", ",", "mode", "=", "'bicubic'", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n", "\n", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "\t\t\t", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "\t\t\t", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "\t\t\t", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "\t\t\t", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "\t\t\t", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "\t\t\t", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.VGG19_difference.forward": [[156, 184], ["vgg_features.VGG19_difference.slice1", "vgg_features.VGG19_difference.slice2", "vgg_features.VGG19_difference.slice3", "vgg_features.VGG19_difference.slice4", "vgg_features.VGG19_difference.slice5", "vgg_features.VGG19_difference.slice1", "vgg_features.VGG19_difference.slice2", "vgg_features.VGG19_difference.slice3", "vgg_features.VGG19_difference.slice4", "vgg_features.VGG19_difference.slice5", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "vgg_features.VGG19_difference.up5", "vgg_features.VGG19_difference.up4", "vgg_features.VGG19_difference.up3", "vgg_features.VGG19_difference.up2", "vgg_features.VGG19_difference.up1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "\t\t", "x1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "x2", "=", "self", ".", "slice2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "slice3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "slice4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "slice5", "(", "x4", ")", "\n", "\n", "y1", "=", "self", ".", "slice1", "(", "Y", ")", "\n", "y2", "=", "self", ".", "slice2", "(", "y1", ")", "\n", "y3", "=", "self", ".", "slice3", "(", "y2", ")", "\n", "y4", "=", "self", ".", "slice4", "(", "y3", ")", "\n", "y5", "=", "self", ".", "slice5", "(", "y4", ")", "\n", "\n", "feat1", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x1", "-", "y1", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "feat2", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x2", "-", "y2", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "feat3", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x3", "-", "y3", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "feat4", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x4", "-", "y4", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "feat5", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x5", "-", "y5", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "img_5", "=", "self", ".", "up5", "(", "feat5", ")", "\n", "img_4", "=", "self", ".", "up4", "(", "feat4", ")", "\n", "img_3", "=", "self", ".", "up3", "(", "feat3", ")", "\n", "img_2", "=", "self", ".", "up2", "(", "feat2", ")", "\n", "img_1", "=", "self", ".", "up1", "(", "feat1", ")", "\n", "perceptual_diff", "=", "self", ".", "weights", "[", "0", "]", "*", "img_1", "+", "self", ".", "weights", "[", "1", "]", "*", "img_2", "+", "self", ".", "weights", "[", "2", "]", "*", "img_3", "+", "self", ".", "weights", "[", "3", "]", "*", "img_4", "+", "self", ".", "weights", "[", "\n", "4", "]", "*", "img_5", "\n", "\n", "return", "perceptual_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.vgg_features.make_layers": [[36, 50], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "\t", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "\t\t", "if", "v", "==", "'M'", ":", "\n", "\t\t\t", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "\t\t\t", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "\t\t\t\t", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.__init__.find_model_using_name": [[5, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], ["def", "init_log", "(", ")", ":", "\n", "\t", "log_root", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "log_root", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# Path('./logs').mkdir(exist_ok=True)", "\n", "\n", "handlers", "=", "[", "\n", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ",", "\n", "# logging.handlers.RotatingFileHandler('logs/watchdog.log', maxBytes=1024*1024, backupCount=7),", "\n", "]", "\n", "\n", "handlers", "[", "0", "]", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# handlers[1].setLevel(logging.INFO)", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'{asctime} | {name} {levelname} | {message}'", ",", "style", "=", "'{'", ")", "\n", "\n", "for", "handler", "in", "handlers", ":", "\n", "\t\t", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler", ")", "\n", "\n", "", "", "init_log", "(", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.__init__.create_model": [[34, 40], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.__init__": [[66, 74], ["super().__init__", "pix2pix_model.Pix2PixModel.initialize_networks"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.initialize_networks"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "self", ".", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "\n", "self", ".", "BoolTensor", "=", "torch", ".", "cuda", ".", "BoolTensor", "\n", "\n", "self", ".", "netG", ",", "self", ".", "netD", ",", "self", ".", "netE", "=", "self", ".", "initialize_networks", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.forward": [[89, 119], ["isinstance", "pix2pix_model.Pix2PixModel.preprocess_input", "label.cuda.cuda.cuda", "image.cuda.cuda.cuda", "pix2pix_model.Pix2PixModel.compute_generator_loss", "torch.no_grad", "pix2pix_model.Pix2PixModel.generate_fake", "pix2pix_model.Pix2PixModel.compute_discriminator_loss", "pix2pix_model.Pix2PixModel.encode_z", "ValueError", "torch.no_grad", "pix2pix_model.Pix2PixModel.generate_fake"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.preprocess_input", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.generate_fake", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.encode_z", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.generate_fake"], ["", "def", "forward", "(", "self", ",", "data", ",", "mode", ")", ":", "\n", "        ", "if", "isinstance", "(", "mode", ",", "str", ")", ":", "\n", "            ", "input_semantics", ",", "real_image", "=", "self", ".", "preprocess_input", "(", "data", ")", "\n", "if", "mode", "==", "'generator'", ":", "\n", "                ", "g_loss", ",", "generated", "=", "self", ".", "compute_generator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "g_loss", ",", "generated", "\n", "", "elif", "mode", "==", "'discriminator'", ":", "\n", "                ", "d_loss", "=", "self", ".", "compute_discriminator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "d_loss", "\n", "", "elif", "mode", "==", "'encode_only'", ":", "\n", "                ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "return", "mu", ",", "logvar", "\n", "", "elif", "mode", "==", "'inference'", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "fake_image", ",", "_", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ")", "\n", "", "return", "fake_image", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"|mode| is invalid\"", ")", "\n", "", "", "else", ":", "\n", "# for modularity, I use the same name variables but this is used for onnx converion", "\n", "            ", "label", "=", "data", "\n", "image", "=", "mode", "\n", "label", "=", "label", ".", "cuda", "(", "self", ".", "opt", ".", "gpu", ")", "\n", "image", "=", "image", ".", "cuda", "(", "self", ".", "opt", ".", "gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", ",", "_", "=", "self", ".", "generate_fake", "(", "label", ",", "image", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.initialize_networks": [[160, 177], ["pix2pix_model.define_G", "pix2pix_model.define_E", "pix2pix_model.load_network", "pix2pix_model.load_network", "pix2pix_model.load_network"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.define_G", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.define_E", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.load_network", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.load_network", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.load_network"], ["", "", "def", "initialize_networks", "(", "self", ",", "opt", ")", ":", "\n", "# netG = networks.define_G(opt)", "\n", "# netD = networks.define_D(opt) if opt.isTrain else None", "\n", "# netE = networks.define_E(opt) if opt.use_vae else None", "\n", "\n", "        ", "netG", "=", "define_G", "(", "opt", ")", "\n", "netD", "=", "None", "\n", "netE", "=", "define_E", "(", "opt", ")", "if", "opt", ".", "use_vae", "else", "None", "\n", "\n", "if", "not", "opt", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "netG", "=", "load_network", "(", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "netD", "=", "load_network", "(", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "if", "opt", ".", "use_vae", ":", "\n", "                ", "netE", "=", "load_network", "(", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "\n", "", "", "return", "netG", ",", "netD", ",", "netE", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.preprocess_input": [[182, 245], ["data[].long", "data[].cuda", "data[].cuda", "data[].cuda", "label_map.size", "pix2pix_model.Pix2PixModel.FloatTensor().zero_", "pix2pix_model.Pix2PixModel.scatter_", "pix2pix_model.Pix2PixModel.get_edges", "torch.cat", "pix2pix_model.Pix2PixModel.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.get_edges"], ["", "def", "preprocess_input", "(", "self", ",", "data", ")", ":", "\n", "# move to GPU and change data types", "\n", "        ", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "long", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "cuda", "(", "self", ".", "opt", ".", "gpu", ")", "\n", "data", "[", "'instance'", "]", "=", "data", "[", "'instance'", "]", ".", "cuda", "(", "self", ".", "opt", ".", "gpu", ")", "\n", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "cuda", "(", "self", ".", "opt", ".", "gpu", ")", "\n", "\n", "# create one-hot label map", "\n", "label_map", "=", "data", "[", "'label'", "]", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "label_map", ".", "size", "(", ")", "\n", "nc", "=", "self", ".", "opt", ".", "label_nc", "+", "1", "if", "self", ".", "opt", ".", "contain_dontcare_label", "else", "self", ".", "opt", ".", "label_nc", "\n", "input_label", "=", "self", ".", "FloatTensor", "(", "bs", ",", "nc", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "input_semantics", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ",", "1.0", ")", "\n", "\n", "# concatenate instance map if it exists", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "data", "[", "'instance'", "]", "\n", "instance_edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_semantics", "=", "torch", ".", "cat", "(", "(", "input_semantics", ",", "instance_edge_map", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "input_semantics", ",", "data", "[", "'image'", "]", "\n", "\n", "# def compute_generator_loss(self, input_semantics, real_image):", "\n", "#     G_losses = {}", "\n", "#", "\n", "#     fake_image, KLD_loss = self.generate_fake(", "\n", "#         input_semantics, real_image, compute_kld_loss=self.opt.use_vae)", "\n", "#", "\n", "#     if self.opt.use_vae:", "\n", "#         G_losses['KLD'] = KLD_loss", "\n", "#", "\n", "#     feat_fake, pred_fake, feat_real, pred_real = self.discriminate(", "\n", "#             input_semantics, fake_image, real_image)", "\n", "#     if not self.opt.no_ganFeat_loss:", "\n", "#         GAN_Feat_loss = self.FloatTensor(1).fill_(0)", "\n", "#         num_D = len(feat_fake)", "\n", "#         for i in range(num_D):", "\n", "#             GAN_Feat_loss += self.criterionFeat(", "\n", "#                     feat_fake[i], feat_real[i].detach()) * self.opt.lambda_feat / num_D", "\n", "#         G_losses['GAN_Feat'] = GAN_Feat_loss", "\n", "#", "\n", "#     G_losses['GAN'] = self.criterionGAN(pred_fake, True, for_discriminator=False)", "\n", "#", "\n", "#     if not self.opt.no_vgg_loss:", "\n", "#         G_losses['VGG'] = self.criterionVGG(fake_image, real_image) * self.opt.lambda_vgg", "\n", "#", "\n", "#     return G_losses, fake_image", "\n", "#", "\n", "# def compute_discriminator_loss(self, input_semantics, real_image):", "\n", "#     D_losses = {}", "\n", "#     with torch.no_grad():", "\n", "#         fake_image, _ = self.generate_fake(input_semantics, real_image)", "\n", "#         fake_image = fake_image.detach()", "\n", "#         fake_image.requires_grad_()", "\n", "#", "\n", "#     _, pred_fake, _, pred_real = self.discriminate(input_semantics, fake_image, real_image)", "\n", "#", "\n", "#", "\n", "#     D_losses['D_Fake'] = self.criterionGAN(pred_fake, False, for_discriminator=True)", "\n", "#     D_losses['D_real'] = self.criterionGAN(pred_real, True,  for_discriminator=True)", "\n", "\n", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.encode_z": [[246, 250], ["pix2pix_model.Pix2PixModel.netE", "pix2pix_model.Pix2PixModel.reparameterize"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.reparameterize"], ["", "def", "encode_z", "(", "self", ",", "real_image", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "netE", "(", "real_image", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.generate_fake": [[251, 265], ["pix2pix_model.Pix2PixModel.netG", "pix2pix_model.Pix2PixModel.encode_z", "pix2pix_model.Pix2PixModel.KLDLoss"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.encode_z"], ["", "def", "generate_fake", "(", "self", ",", "input_semantics", ",", "real_image", ",", "compute_kld_loss", "=", "False", ")", ":", "\n", "        ", "z", "=", "None", "\n", "KLD_loss", "=", "None", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "if", "compute_kld_loss", ":", "\n", "                ", "KLD_loss", "=", "self", ".", "KLDLoss", "(", "mu", ",", "logvar", ")", "*", "self", ".", "opt", ".", "lambda_kld", "\n", "\n", "", "", "fake_image", "=", "self", ".", "netG", "(", "input_semantics", ",", "z", "=", "z", ")", "\n", "\n", "assert", "(", "not", "compute_kld_loss", ")", "or", "self", ".", "opt", ".", "use_vae", ",", "\"You cannot compute KLD loss if opt.use_vae == False\"", "\n", "\n", "return", "fake_image", ",", "KLD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.discriminate": [[269, 278], ["torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.divide_pred", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.divide_pred"], ["", "def", "discriminate", "(", "self", ",", "input_semantics", ",", "fake_image", ",", "real_image", ")", ":", "\n", "        ", "fake_and_real_img", "=", "torch", ".", "cat", "(", "[", "fake_image", ",", "real_image", "]", ",", "dim", "=", "0", ")", "\n", "\n", "discriminator_out", "=", "self", ".", "netD", "(", "fake_and_real_img", ",", "\n", "segmap", "=", "torch", ".", "cat", "(", "(", "input_semantics", ",", "input_semantics", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "fake_feats", ",", "fake_preds", ",", "real_feats", ",", "real_preds", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "\n", "return", "fake_feats", ",", "fake_preds", ",", "real_feats", ",", "real_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.divide_pred": [[280, 293], ["fake_feats.append", "real_feats.append", "fake_preds.append", "real_preds.append", "p.size", "p.size", "p.size", "p.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "        ", "fake_feats", "=", "[", "]", "\n", "fake_preds", "=", "[", "]", "\n", "real_feats", "=", "[", "]", "\n", "real_preds", "=", "[", "]", "\n", "for", "p", "in", "pred", "[", "0", "]", ":", "\n", "            ", "fake_feats", ".", "append", "(", "p", "[", ":", "p", ".", "size", "(", "0", ")", "//", "2", "]", ")", "\n", "real_feats", ".", "append", "(", "p", "[", "p", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "\n", "", "for", "p", "in", "pred", "[", "1", "]", ":", "\n", "            ", "fake_preds", ".", "append", "(", "p", "[", ":", "p", ".", "size", "(", "0", ")", "//", "2", "]", ")", "\n", "real_preds", ".", "append", "(", "p", "[", "p", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "\n", "\n", "", "return", "fake_feats", ",", "fake_preds", ",", "real_feats", ",", "real_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.get_edges": [[295, 302], ["pix2pix_model.Pix2PixModel.BoolTensor().zero_", "pix2pix_model.Pix2PixModel.float", "pix2pix_model.Pix2PixModel.BoolTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "self", ".", "BoolTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "# for PyTorch versions higher than 1.2.0, use BoolTensor instead of ByteTensor", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.Pix2PixModel.reparameterize": [[303, 307], ["torch.exp", "torch.randn_like", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", "+", "mu", "\n", "#return mu", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.create_network": [[22, 29], ["cls", "cls.print_network", "torch.cuda.is_available", "cls.cuda", "cls.init_weights"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.print_network", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.init_weights"], ["def", "create_network", "(", "cls", ",", "opt", ")", ":", "\n", "    ", "net", "=", "cls", "(", "opt", ")", "\n", "net", ".", "print_network", "(", ")", "\n", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "cuda", "(", "opt", ".", "gpu", ")", "\n", "net", ".", "init_weights", "(", "opt", ".", "init_type", ",", "opt", ".", "init_variance", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.define_G": [[31, 35], ["pix2pix_model.create_network"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.create_network"], ["", "def", "define_G", "(", "opt", ")", ":", "\n", "# netG_cls = find_network_using_name(opt.netG, 'generator')", "\n", "    ", "from", ".", "networks", ".", "generator", "import", "CondConvGenerator", "\n", "return", "create_network", "(", "CondConvGenerator", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.define_E": [[42, 47], ["pix2pix_model.create_network"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.create_network"], ["", "def", "define_E", "(", "opt", ")", ":", "\n", "# there exists only one encoder type", "\n", "# netE_cls = find_network_using_name('conv', 'encoder')", "\n", "    ", "from", ".", "networks", ".", "encoder", "import", "ConvEncoder", "\n", "return", "create_network", "(", "ConvEncoder", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.models.pix2pix_model.load_network": [[49, 59], ["os.path.join", "os.path.join", "torch.load", "net.load_state_dict", "torch.device"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "weights", "=", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "#weights = {k: v for k, v in weights.items() if k in net.state_dict()}", "\n", "#torch.save(weights, 'checkpoints/new.pth')", "\n", "#pdb.set_trace()", "\n", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.include_void_to_labels": [[16, 59], ["print", "natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.join", "os.path.join", "zip", "print", "PIL.Image.open", "numpy.array", "numpy.array().astype", "numpy.where().astype", "PIL.Image.fromarray", "os.path.basename", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.listdir", "os.listdir", "PIL.Image.open().resize", "numpy.where().astype", "np.where().astype.astype", "Image.fromarray.save", "Image.fromarray.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "numpy.where", "os.path.join", "os.path.join", "len", "PIL.Image.open", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["def", "include_void_to_labels", "(", "label_path", ",", "semantic_path", ",", "save_dir", ",", "include_ego_vehicle", "=", "True", ")", ":", "\n", "    ", "print", "(", "include_ego_vehicle", ")", "\n", "# we only include void labels that are borders, static or big objects", "\n", "if", "include_ego_vehicle", ":", "\n", "#void_labels = [0, 1, 2, 3, 4,  29, 30]", "\n", "        ", "void_labels", "=", "[", "4", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void'", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void'", ")", ")", "\n", "", "", "else", ":", "\n", "#void_labels = [0, 2, 3, 4,  29, 30]  # without ego vehicle", "\n", "        ", "void_labels", "=", "[", "5", "]", "# without ego vehicle", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void_no_ego'", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void_no_ego'", ")", ")", "\n", "\n", "", "", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "label_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "label_path", ")", "]", "\n", "\n", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "(", "label", ",", "semantic", ")", "in", "enumerate", "(", "zip", "(", "label_paths", ",", "semantic_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "\n", "label_img", "=", "Image", ".", "open", "(", "label", ")", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ".", "resize", "(", "label_img", ".", "size", ")", ")", "\n", "label_img", "=", "np", ".", "array", "(", "label_img", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# get mask where instance is located", "\n", "for", "void_label", "in", "void_labels", ":", "\n", "#mask_unknown = np.where(semantic_img == void_label, 1, 0).astype(np.uint8)", "\n", "            ", "mask_unknown", "=", "np", ".", "where", "(", "semantic_img", "==", "void_label", ",", "255", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_img", "+=", "mask_unknown", "\n", "\n", "#final_mask = np.where(label_img != 1, 0, 1).astype(np.uint8)", "\n", "", "final_mask", "=", "np", ".", "where", "(", "label_img", "!=", "255", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "if", "include_ego_vehicle", ":", "\n", "            ", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void'", ",", "label_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_void_no_ego'", ",", "label_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.create_void_semantic": [[60, 105], ["natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "zip", "print", "os.path.basename().replace", "os.path.basename().replace", "numpy.array", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.zeros_like", "id_to_trainid.items", "numpy.copy", "cv2.imwrite", "cv2.imwrite", "numpy.zeros_like", "id_to_trainid.items", "cv2.imwrite", "os.listdir", "os.listdir", "os.listdir", "PIL.Image.open", "os.path.join", "os.path.join", "np.array.resize", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "os.path.join", "len", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "", "def", "create_void_semantic", "(", "semantic_path", ",", "labels_path", ",", "semantic_path_pred", ",", "save_dir_semantic", ",", "save_dir_semantic_train", ",", "save_dir_inst", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_semantic", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_semantic", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_semantic_train", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_semantic_train", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_inst", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_inst", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "labels_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "labels_path", ")", "]", "\n", "pred_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path_pred", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "pred_paths", "=", "natsorted", "(", "pred_paths", ")", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "\n", "for", "idx", ",", "(", "label", ",", "semantic", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "label_paths", ",", "semantic_paths", ",", "pred_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'fakeTrainIds'", ",", "'labelIds'", ")", "\n", "new_instance_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'fakeTrainIds'", ",", "'instanceIds'", ")", "\n", "\n", "semantic_train", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", ")", "\n", "label_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "labels_path", ",", "label", ")", ")", "\n", "pred_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "pred", ")", ")", "\n", "\n", "pred_img", "=", "np", ".", "array", "(", "pred_img", ".", "resize", "(", "label_img", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "label_img", "=", "np", ".", "array", "(", "label_img", ")", "\n", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic_train", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "semantic_train", "==", "train_id", ")", "]", "=", "label_id", "\n", "\n", "", "syn_semantic", "=", "np", ".", "copy", "(", "pred_img", ")", "\n", "mask", "=", "(", "label_img", "==", "1", ")", "\n", "syn_semantic", "[", "mask", "]", "=", "semantic_out", "[", "mask", "]", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_semantic", ",", "new_semantic_name", ")", ",", "syn_semantic", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_inst", ",", "new_instance_name", ")", ",", "syn_semantic", ")", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic_train", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "syn_semantic", "==", "label_id", ")", "]", "=", "train_id", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_semantic_train", ",", "new_semantic_name", ")", ",", "semantic_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.change_name": [[106, 125], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "os.path.basename().replace", "os.path.basename().replace", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "shutil.copyfile", "os.listdir", "os.path.basename", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["", "", "def", "change_name", "(", "semantic_path_pred", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "pred_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path_pred", ")", "]", "\n", "\n", "pred_paths", "=", "natsorted", "(", "pred_paths", ")", "\n", "\n", "for", "idx", ",", "pred", "in", "enumerate", "(", "pred_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "pred_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "pred", ")", ".", "replace", "(", "'_leftImg8bit'", ",", "'_labelIds'", ")", "\n", "new_instance_name", "=", "os", ".", "path", ".", "basename", "(", "pred", ")", ".", "replace", "(", "'_leftImg8bit'", ",", "'_instanceIds'", ")", "\n", "\n", "original", "=", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "pred", ")", "\n", "target1", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_semantic_name", ")", "\n", "target2", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_instance_name", ")", "\n", "shutil", ".", "copyfile", "(", "original", ",", "target1", ")", "\n", "shutil", ".", "copyfile", "(", "original", ",", "target2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.create_void_semantic_original": [[126, 166], ["natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "zip", "print", "os.path.basename().replace", "os.path.basename().replace", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.zeros_like", "id_to_trainid.items", "numpy.copy", "cv2.imwrite", "cv2.imwrite", "numpy.zeros_like", "id_to_trainid.items", "cv2.imwrite", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "np.array.resize", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "len", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "create_void_semantic_original", "(", "semantic_path", ",", "semantic_path_pred", ",", "save_dir_semantic", ",", "save_dir_semantic_train", ",", "save_dir_inst", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_semantic", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_semantic", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_semantic_train", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_semantic_train", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir_inst", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir_inst", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "pred_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path_pred", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "pred_paths", "=", "natsorted", "(", "pred_paths", ")", "\n", "\n", "for", "idx", ",", "(", "semantic", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "semantic_paths", ",", "pred_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'fakeTrainIds'", ",", "'labelIds'", ")", "\n", "new_instance_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'fakeTrainIds'", ",", "'instanceIds'", ")", "\n", "\n", "semantic_train", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", "\n", "pred_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "pred", ")", ")", "\n", "pred_img", "=", "np", ".", "array", "(", "pred_img", ".", "resize", "(", "semantic_train", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "semantic_train", "=", "np", ".", "array", "(", "semantic_train", ")", "\n", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic_train", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "semantic_train", "==", "train_id", ")", "]", "=", "label_id", "\n", "\n", "", "syn_semantic", "=", "np", ".", "copy", "(", "semantic_out", ")", "\n", "mask", "=", "(", "semantic_train", "==", "255", ")", "\n", "syn_semantic", "[", "mask", "]", "=", "pred_img", "[", "mask", "]", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_semantic", ",", "new_semantic_name", ")", ",", "syn_semantic", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_inst", ",", "new_instance_name", ")", ",", "syn_semantic", ")", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic_train", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "syn_semantic", "==", "label_id", ")", "]", "=", "train_id", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir_semantic_train", ",", "new_semantic_name", ")", ",", "semantic_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.change_labelIds_to_trainIds": [[167, 186], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "os.path.basename().replace", "numpy.array", "numpy.zeros_like", "id_to_trainid.items", "cv2.imwrite", "os.listdir", "PIL.Image.open", "os.path.join", "os.path.basename", "os.path.join", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "change_labelIds_to_trainIds", "(", "semantic_folder", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_folder", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_folder", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'labelIds'", ",", "'TrainIds_known'", ")", "\n", "\n", "semantic", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", ")", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "semantic", "==", "label_id", ")", "]", "=", "train_id", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_semantic_name", ")", ",", "semantic_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.change_trainIds_to_labelIds": [[187, 214], ["natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "zip", "print", "os.path.basename", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.zeros_like", "id_to_trainid.items", "numpy.copy", "cv2.imwrite", "os.listdir", "os.listdir", "PIL.Image.open().resize", "os.path.join", "len", "PIL.Image.open", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "change_trainIds_to_labelIds", "(", "semantic_folder", ",", "save_dir", ",", "semantic_path_pred", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "semantic_path_pred", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path_pred", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path_pred", ")", "]", "\n", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_folder", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_folder", ")", "]", "\n", "\n", "semantic_paths_pred", "=", "natsorted", "(", "semantic_path_pred", ")", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "for", "idx", ",", "(", "semantic_path", ",", "semantic_path_pred", ")", "in", "enumerate", "(", "zip", "(", "semantic_paths", ",", "semantic_paths_pred", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic_path", ")", "\n", "semantic", "=", "Image", ".", "open", "(", "semantic_path", ")", "\n", "semantic_pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic_path_pred", ")", ".", "resize", "(", "semantic", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "semantic", "=", "np", ".", "array", "(", "semantic", ")", "\n", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic", ")", "\n", "for", "label_id", ",", "train_id", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_out", "[", "np", ".", "where", "(", "semantic", "==", "train_id", ")", "]", "=", "label_id", "\n", "\n", "", "syn_semantic", "=", "np", ".", "copy", "(", "semantic_out", ")", "\n", "mask", "=", "(", "semantic", "==", "255", ")", "\n", "syn_semantic", "[", "mask", "]", "=", "semantic_pred", "[", "mask", "]", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_semantic_name", ")", ",", "syn_semantic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.create_labels": [[215, 231], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "os.path.basename().replace", "numpy.array", "numpy.zeros_like", "cv2.imwrite", "os.listdir", "PIL.Image.open", "os.path.join", "os.path.basename", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "create_labels", "(", "semantic_folder", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_folder", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_folder", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'trainlIds'", ",", "'label'", ")", "\n", "\n", "semantic", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", ")", "\n", "semantic_out", "=", "np", ".", "zeros_like", "(", "semantic", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_semantic_name", ")", ",", "semantic_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.create_labels_fake": [[232, 247], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "os.path.basename", "numpy.array", "numpy.ones_like", "cv2.imwrite", "os.listdir", "PIL.Image.open", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "create_labels_fake", "(", "semantic_folder", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_folder", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_folder", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "semantic", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", ")", "\n", "semantic_out", "=", "np", ".", "ones_like", "(", "semantic", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_semantic_name", ")", ",", "semantic_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.void_correction.update_labels_to_ignore_void": [[248, 267], ["natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "zip", "print", "os.path.basename", "numpy.array", "numpy.array", "cv2.imwrite", "os.listdir", "os.listdir", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "def", "update_labels_to_ignore_void", "(", "semantic_path", ",", "labels_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "labels_paths", "=", "[", "os", ".", "path", ".", "join", "(", "labels_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "labels_path", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "labels_paths", "=", "natsorted", "(", "labels_paths", ")", "\n", "\n", "for", "idx", ",", "(", "label", ",", "semantic", ")", "in", "enumerate", "(", "zip", "(", "labels_paths", ",", "semantic_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "semantic", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "semantic", ")", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "labels_path", ",", "label", ")", ")", ")", "\n", "label", "[", "semantic", "==", "255", "]", "=", "255", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "label_name", ")", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.audi_filter.extract_image_file_name_from_semantic_file_name": [[10, 20], ["file_name_semantic.split", "file_name_image.split.split", "file_name_image[].split"], "function", ["None"], ["def", "extract_image_file_name_from_semantic_file_name", "(", "file_name_semantic", ")", ":", "\n", "    ", "file_name_image", "=", "file_name_semantic", ".", "split", "(", "'/'", ")", "\n", "file_name_image", "=", "file_name_image", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "file_name_image", "=", "file_name_image", ".", "split", "(", "'_'", ")", "\n", "file_name_image", "=", "file_name_image", "[", "0", "]", "+", "'_'", "+", "'camera_'", "+", "file_name_image", "[", "2", "]", "+", "'_'", "+", "file_name_image", "[", "3", "]", "+", "'.png'", "\n", "\n", "return", "file_name_image", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.audi_filter.filter_images": [[22, 63], ["enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.listdir", "os.path.isdir", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "print", "cv2.imread", "cv2.cvtColor", "numpy.zeros", "numpy.unique", "os.listdir", "numpy.asarray", "cv2.inRange", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "cv2.imwrite", "len", "audi_filter.extract_image_file_name_from_semantic_file_name", "os.path.basename", "os.path.basename", "len", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.audi_filter.extract_image_file_name_from_semantic_file_name"], ["", "def", "filter_images", "(", "root_dir", ",", "labels_to_filter", ",", "thrd", "=", "0.01", ")", ":", "\n", "    ", "root_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "root_dir", ",", "dir", ")", "for", "dir", "in", "os", ".", "listdir", "(", "root_dir", ")", "]", "\n", "for", "jdx", ",", "dir", "in", "enumerate", "(", "root_dirs", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "original_save_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'filter'", ",", "'original'", ")", "\n", "label_save_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'filter'", ",", "'labels'", ")", "\n", "\n", "semantic_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'label'", ",", "'cam_front_center'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'camera'", ",", "'cam_front_center'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "original_save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "original_save_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "label_save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "label_save_dir", ")", "\n", "\n", "", "semntic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_dir", ",", "semantic", ")", "for", "semantic", "in", "os", ".", "listdir", "(", "semantic_dir", ")", "]", "\n", "\n", "for", "idx", ",", "semantic_path", "in", "enumerate", "(", "semntic_paths", ")", ":", "\n", "            ", "print", "(", "'Processing image %i out of %i for folder %i out %i'", "%", "(", "\n", "idx", "+", "1", ",", "len", "(", "semntic_paths", ")", ",", "jdx", "+", "1", ",", "len", "(", "root_dirs", ")", ")", ")", "\n", "semantic_img", "=", "cv2", ".", "imread", "(", "semantic_path", ")", "\n", "semantic_img", "=", "cv2", ".", "cvtColor", "(", "semantic_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "final_mask", "=", "np", ".", "zeros", "(", "semantic_img", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "unknown_object", "in", "labels_to_filter", ":", "\n", "                ", "obs_color", "=", "np", ".", "asarray", "(", "hextorgb", "[", "labeltohex", "[", "unknown_object", "]", "]", ")", "\n", "mask", "=", "cv2", ".", "inRange", "(", "semantic_img", ",", "obs_color", ",", "obs_color", ")", "\n", "final_mask", "+=", "mask", "\n", "\n", "", "mask_labels", ",", "mask_counts", "=", "np", ".", "unique", "(", "final_mask", ",", "return_counts", "=", "True", ")", "\n", "\n", "if", "len", "(", "mask_labels", ")", ">", "1", "and", "mask_counts", "[", "1", "]", "/", "mask_counts", "[", "\n", "0", "]", ">", "thrd", ":", "# ensures the obstacle is at least X percent of the image", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "extract_image_file_name_from_semantic_file_name", "(", "semantic_path", ")", ")", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "original_save_dir", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "save_semantic_path", "=", "os", ".", "path", ".", "join", "(", "label_save_dir", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "copyfile", "(", "img_path", ",", "save_img_path", ")", "\n", "cv2", ".", "imwrite", "(", "save_semantic_path", ",", "final_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.audi_filter.clean_diss_labels": [[65, 78], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "cv2.imread", "numpy.where", "cv2.imwrite", "os.listdir", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imread", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite"], ["", "", "", "", "def", "clean_diss_labels", "(", "root_dir", ")", ":", "\n", "    ", "labels_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'labels'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'labels_clean'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "labels_dir", ",", "label", ")", "for", "label", "in", "os", ".", "listdir", "(", "labels_dir", ")", "]", "\n", "\n", "for", "label_path", "in", "label_paths", ":", "\n", "        ", "label_img", "=", "cv2", ".", "imread", "(", "label_path", ")", "\n", "label_img", "=", "np", ".", "where", "(", "label_img", "==", "255", ",", "1", ",", "0", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", ",", "label_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.road_anomaly_preprocess.move_labels": [[14, 27], ["os.path.isdir", "os.mkdir", "os.path.join", "PIL.Image.open", "Image.open.save", "os.path.join", "os.path.join", "os.listdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["def", "move_labels", "(", "label_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", "\n", "\n", "", "image_paths", "=", "[", "image", "[", ":", "-", "4", "]", "for", "image", "in", "os", ".", "listdir", "(", "label_path", ")", "if", "'.jpg'", "in", "image", "]", "\n", "\n", "for", "image", "in", "image_paths", ":", "\n", "        ", "folder_name", "=", "image", "+", "'.labels'", "\n", "label_name", "=", "'labels_semantic.png'", "\n", "label", "=", "os", ".", "path", ".", "join", "(", "label_path", ",", "folder_name", ",", "label_name", ")", "\n", "\n", "label_img", "=", "Image", ".", "open", "(", "label", ")", "\n", "label_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "image", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.road_anomaly_preprocess.convert_semantic_to_trainids": [[28, 51], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "numpy.array", "Image.fromarray.copy", "id_to_trainid.items", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.path.join", "os.path.join", "os.listdir", "PIL.Image.open", "semantic_img.copy.astype", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "convert_semantic_to_trainids", "(", "semantic_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ")", "\n", "\n", "# Correct labels to train ID", "\n", "semantic_copy", "=", "semantic_img", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_copy", "[", "semantic_img", "==", "k", "]", "=", "v", "\n", "\n", "", "semantic_img", "=", "Image", ".", "fromarray", "(", "semantic_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ",", "semantic_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.road_anomaly_preprocess.convert_labels": [[52, 72], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "numpy.array", "numpy.where", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.path.join", "os.path.join", "os.listdir", "PIL.Image.open", "np.where.astype", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "convert_labels", "(", "data_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", "\n", "\n", "", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "data_path", ")", "]", "\n", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "label_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "\n", "label_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "label", ")", ")", "\n", "\n", "# get mask where instance is located", "\n", "mask", "=", "np", ".", "where", "(", "label_img", "==", "2", ",", "1", ",", "0", ")", "\n", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "label_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.troublesheet_data.troubleshoot_data": [[18, 145], ["natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert", "PIL.Image.open().convert", "pdb.set_trace", "round", "image_dissimilarity.data.augmentations.get_transform", "base_transforms", "troublesheet_data.one_hot_encoding", "os.path.join", "natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "base_transforms", "base_transforms", "base_transforms", "base_transforms", "base_transforms", "augmentations", "base_transforms", "torchvision.transforms.Compose", "transforms.Compose.", "transforms.Compose.", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.one_hot_encoding"], ["def", "troubleshoot_data", "(", "dataroot", ",", "preprocess_mode", ",", "crop_size", "=", "512", ",", "aspect_ratio", "=", "0.5", ",", "flip", "=", "False", ",", "normalize", "=", "False", ",", "\n", "prior", "=", "False", ",", "only_valid", "=", "False", ",", "roi", "=", "False", ",", "light_data", "=", "False", ",", "void", "=", "False", ",", "num_semantic_classes", "=", "19", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "original_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'original'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'original'", ")", ")", "]", "\n", "if", "light_data", ":", "\n", "        ", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'semantic_icnet'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'semantic_icnet'", ")", ")", "]", "\n", "synthesis_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'synthesis_spade'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'synthesis_spade'", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'semantic'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'semantic'", ")", ")", "]", "\n", "synthesis_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'synthesis'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'synthesis'", ")", ")", "]", "\n", "", "if", "roi", ":", "\n", "        ", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels_with_ROI'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels_with_ROI'", ")", ")", "]", "\n", "", "elif", "void", ":", "\n", "        ", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels_with_void_no_ego'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels_with_void_no_ego'", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'labels'", ")", ")", "]", "\n", "", "if", "prior", ":", "\n", "        ", "if", "light_data", ":", "\n", "            ", "mae_features_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'mae_features_spade'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'mae_features_spade'", ")", ")", "]", "\n", "entropy_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'entropy_icnet'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'entropy_icnet'", ")", ")", "]", "\n", "logit_distance_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'logit_distance_icnet'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'logit_distance_icnet'", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "mae_features_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'mae_features'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'mae_features'", ")", ")", "]", "\n", "entropy_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'entropy'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'entropy'", ")", ")", "]", "\n", "logit_distance_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'logit_distance'", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'logit_distance'", ")", ")", "]", "\n", "\n", "# We need to sort the images to ensure all the pairs match with each other", "\n", "", "", "original_paths", "=", "natsorted", "(", "original_paths", ")", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "synthesis_paths", "=", "natsorted", "(", "synthesis_paths", ")", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "if", "prior", ":", "\n", "        ", "mae_features_paths", "=", "natsorted", "(", "mae_features_paths", ")", "\n", "entropy_paths", "=", "natsorted", "(", "entropy_paths", ")", "\n", "logit_distance_paths", "=", "natsorted", "(", "logit_distance_paths", ")", "\n", "\n", "\n", "", "index", "=", "0", "\n", "\n", "# get and open all images", "\n", "label_path", "=", "label_paths", "[", "index", "]", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "\n", "semantic_path", "=", "semantic_paths", "[", "index", "]", "\n", "semantic", "=", "Image", ".", "open", "(", "semantic_path", ")", "\n", "\n", "image_path", "=", "original_paths", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "syn_image_path", "=", "synthesis_paths", "[", "index", "]", "\n", "syn_image", "=", "Image", ".", "open", "(", "syn_image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "prior", ":", "\n", "        ", "mae_path", "=", "mae_features_paths", "[", "index", "]", "\n", "mae_image", "=", "Image", ".", "open", "(", "mae_path", ")", "\n", "\n", "entropy_path", "=", "entropy_paths", "[", "index", "]", "\n", "entropy_image", "=", "Image", ".", "open", "(", "entropy_path", ")", "\n", "\n", "distance_path", "=", "logit_distance_paths", "[", "index", "]", "\n", "distance_image", "=", "Image", ".", "open", "(", "distance_path", ")", "\n", "\n", "", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "# get input for transformations", "\n", "w", "=", "crop_size", "\n", "h", "=", "round", "(", "crop_size", "/", "aspect_ratio", ")", "\n", "image_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "# get augmentations", "\n", "base_transforms", ",", "augmentations", "=", "get_transform", "(", "image_size", ",", "preprocess_mode", ")", "\n", "\n", "# apply base transformations", "\n", "label_tensor", "=", "base_transforms", "(", "label", ")", "*", "255", "\n", "semantic_tensor", "=", "base_transforms", "(", "semantic", ")", "*", "255", "\n", "syn_image_tensor", "=", "base_transforms", "(", "syn_image", ")", "\n", "if", "prior", ":", "\n", "        ", "mae_tensor", "=", "base_transforms", "(", "mae_image", ")", "\n", "entropy_tensor", "=", "base_transforms", "(", "entropy_image", ")", "\n", "distance_tensor", "=", "base_transforms", "(", "distance_image", ")", "\n", "", "else", ":", "\n", "        ", "mae_tensor", "=", "[", "]", "\n", "entropy_tensor", "=", "[", "]", "\n", "distance_tensor", "=", "[", "]", "\n", "\n", "", "if", "is_train", "and", "preprocess_mode", "!=", "'none'", ":", "\n", "        ", "image_tensor", "=", "augmentations", "(", "image", ")", "\n", "", "else", ":", "\n", "        ", "image_tensor", "=", "base_transforms", "(", "image", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "norm_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "# imageNet normamlization", "\n", "syn_image_tensor", "=", "norm_transform", "(", "syn_image_tensor", ")", "\n", "image_tensor", "=", "norm_transform", "(", "image_tensor", ")", "\n", "\n", "# post processing for semantic labels", "\n", "", "if", "num_semantic_classes", "==", "19", ":", "\n", "        ", "semantic_tensor", "[", "semantic_tensor", "==", "255", "]", "=", "num_semantic_classes", "+", "1", "# 'ignore label is 20'", "\n", "", "semantic_tensor", "=", "one_hot_encoding", "(", "semantic_tensor", ",", "num_semantic_classes", "+", "1", ")", "\n", "\n", "input_dict", "=", "{", "'label'", ":", "label_tensor", ",", "\n", "'original'", ":", "image_tensor", ",", "\n", "'semantic'", ":", "semantic_tensor", ",", "\n", "'synthesis'", ":", "syn_image_tensor", ",", "\n", "'label_path'", ":", "label_path", ",", "\n", "'original_path'", ":", "image_path", ",", "\n", "'semantic_path'", ":", "semantic_path", ",", "\n", "'syn_image_path'", ":", "syn_image_path", ",", "\n", "'entropy'", ":", "entropy_tensor", ",", "\n", "'mae'", ":", "mae_tensor", ",", "\n", "'distance'", ":", "distance_tensor", "\n", "}", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.troublesheet_data.one_hot_encoding": [[146, 152], ["torch.zeros", "torch.zeros", "range", "semantic.size", "semantic.size", "semantic.squeeze"], "function", ["None"], ["", "def", "one_hot_encoding", "(", "semantic", ",", "num_classes", "=", "20", ")", ":", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "num_classes", ",", "semantic", ".", "size", "(", "1", ")", ",", "semantic", ".", "size", "(", "2", ")", ")", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "one_hot", "[", "class_id", ",", ":", ",", ":", "]", "=", "(", "semantic", ".", "squeeze", "(", "0", ")", "==", "class_id", ")", "\n", "", "one_hot", "=", "one_hot", "[", ":", "num_classes", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.is_image_file": [[15, 17], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.make_dataset_rec": [[19, 27], ["os.path.isdir", "sorted", "os.walk", "custom_dataset_preprocess.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.is_image_file"], ["", "def", "make_dataset_rec", "(", "dir", ",", "images", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.make_dataset": [[29, 59], ["os.path.join", "os.path.isfile", "custom_dataset_preprocess.make_dataset_rec", "sorted", "os.path.join", "os.path.isdir", "os.path.islink", "os.walk", "sorted", "open", "print", "open", "f.read().splitlines", "custom_dataset_preprocess.is_image_file", "f.write", "os.path.join", "f.read().splitlines.append", "f.read"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset_rec", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.is_image_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read"], ["", "", "", "", "def", "make_dataset", "(", "dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "False", ",", "write_cache", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "\n", "if", "read_cache", ":", "\n", "        ", "possible_filelist", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_filelist", ")", ":", "\n", "            ", "with", "open", "(", "possible_filelist", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "return", "images", "\n", "\n", "", "", "", "if", "recursive", ":", "\n", "        ", "make_dataset_rec", "(", "dir", ",", "images", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", "or", "os", ".", "path", ".", "islink", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "fnames", "=", "sorted", "(", "fnames", ")", "\n", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "if", "write_cache", ":", "\n", "        ", "filelist_cache", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "with", "open", "(", "filelist_cache", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "path", "in", "images", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "path", ")", "\n", "", "print", "(", "'wrote filelist cache at %s'", "%", "filelist_cache", ")", "\n", "\n", "", "", "return", "images", "\n", "", "def", "get_mapillary_labels", "(", "data_dir", ",", "data_type", ",", "save_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.get_mapillary_labels": [[59, 99], ["os.path.join", "enumerate", "os.path.join", "natsort.natsorted", "enumerate", "open", "json.load", "print", "os.path.isdir", "os.mkdir", "os.path.join", "print", "PIL.Image.open", "numpy.array", "numpy.zeros", "numpy.where().astype", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.listdir", "numpy.where().astype", "np.where().astype.astype", "os.path.join", "numpy.where", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "def", "get_mapillary_labels", "(", "data_dir", ",", "data_type", ",", "save_dir", ")", ":", "\n", "\n", "# read in config file", "\n", "    ", "config_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'config.json'", ")", "\n", "with", "open", "(", "config_file", ")", "as", "config_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "config_file", ")", "\n", "# in this example we are only interested in the labels", "\n", "", "labels", "=", "config", "[", "'labels'", "]", "\n", "for", "label_id", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "print", "(", "\"{:>30} ({:2d}): {:<40} has instances: {}\"", ".", "format", "(", "label", "[", "\"readable\"", "]", ",", "label_id", ",", "label", "[", "\"name\"", "]", ",", "\n", "label", "[", "\"instances\"", "]", ")", ")", "\n", "# labels to show", "\n", "", "void_labels", "=", "[", "0", ",", "1", ",", "32", ",", "33", ",", "35", ",", "42", ",", "43", ",", "51", ",", "53", ",", "63", ",", "65", "]", "\n", "#void_labels = [65]", "\n", "\n", "# create save folder", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "# find label images", "\n", "", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_type", ",", "'labels'", ")", "\n", "label_paths", "=", "[", "os", ".", "path", ".", "join", "(", "label_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "label_path", ")", "]", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "label_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "# load images", "\n", "label_image", "=", "Image", ".", "open", "(", "label", ")", "\n", "# convert labeled data to numpy arrays for better handling", "\n", "label_array", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label_img", "=", "np", ".", "zeros", "(", "label_array", ".", "shape", ")", "\n", "for", "void_label", "in", "void_labels", ":", "\n", "            ", "mask_unknown", "=", "np", ".", "where", "(", "label_array", "==", "void_label", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_img", "+=", "mask_unknown", "\n", "\n", "", "final_mask", "=", "np", ".", "where", "(", "label_img", "!=", "1", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "label_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.get_cityscapes_labels": [[101, 132], ["os.path.join", "custom_dataset_preprocess.make_dataset", "natsort.natsorted", "enumerate", "os.path.isdir", "os.makedirs", "print", "PIL.Image.open", "numpy.array", "numpy.zeros", "numpy.where().astype", "p.endswith", "numpy.where().astype", "len", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "numpy.where", "numpy.unique", "np.where().astype.astype", "os.path.join", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "get_cityscapes_labels", "(", "data_dir", ",", "data_type", ",", "save_dir", ")", ":", "\n", "\n", "# labels to show", "\n", "    ", "void_labels", "=", "[", "5", "]", "\n", "\n", "# create save folder", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "# find label images", "\n", "", "label_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'gtFine'", ",", "data_type", ")", "\n", "label_paths_all", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "True", ")", "\n", "label_paths", "=", "[", "p", "for", "p", "in", "label_paths_all", "if", "p", ".", "endswith", "(", "'_labelIds.png'", ")", "]", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "label_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "# load images", "\n", "label_image", "=", "Image", ".", "open", "(", "label", ")", "\n", "# convert labeled data to numpy arrays for better handling", "\n", "label_array", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label_img", "=", "np", ".", "zeros", "(", "label_array", ".", "shape", ")", "\n", "for", "void_label", "in", "void_labels", ":", "\n", "            ", "mask_unknown", "=", "np", ".", "where", "(", "label_array", "==", "void_label", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_img", "+=", "mask_unknown", "\n", "\n", "", "final_mask", "=", "np", ".", "where", "(", "label_img", "!=", "1", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "len", "(", "np", ".", "unique", "(", "final_mask", ")", ")", "==", "2", ":", "\n", "            ", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "label_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.get_wild_dash_labels": [[133, 163], ["os.path.join", "custom_dataset_preprocess.make_dataset", "natsort.natsorted", "enumerate", "os.path.isdir", "os.makedirs", "print", "PIL.Image.open", "numpy.array", "numpy.zeros", "numpy.where().astype", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "p.endswith", "numpy.where().astype", "np.where().astype.astype", "os.path.join", "numpy.where", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "", "def", "get_wild_dash_labels", "(", "data_dir", ",", "save_dir", ")", ":", "\n", "\n", "# labels to show", "\n", "    ", "void_labels", "=", "[", "5", "]", "\n", "\n", "# create save folder", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "# find label images", "\n", "", "label_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ")", "\n", "label_paths_all", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "True", ")", "\n", "label_paths", "=", "[", "p", "for", "p", "in", "label_paths_all", "if", "p", ".", "endswith", "(", "'_labelIds.png'", ")", "]", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "label_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "# load images", "\n", "label_image", "=", "Image", ".", "open", "(", "label", ")", "\n", "# convert labeled data to numpy arrays for better handling", "\n", "label_array", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label_img", "=", "np", ".", "zeros", "(", "label_array", ".", "shape", ")", "\n", "for", "void_label", "in", "void_labels", ":", "\n", "            ", "mask_unknown", "=", "np", ".", "where", "(", "label_array", "==", "void_label", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_img", "+=", "mask_unknown", "\n", "\n", "", "final_mask", "=", "np", ".", "where", "(", "label_img", "!=", "1", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "label_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset_preprocess.get_cityscapes_labels_dynamic": [[165, 215], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "custom_dataset_preprocess.make_dataset", "natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.join", "os.path.join", "os.path.join", "zip", "print", "PIL.Image.open", "numpy.array", "numpy.zeros", "numpy.where().astype", "p.endswith", "os.listdir", "os.listdir", "os.listdir", "numpy.where().astype", "len", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.remove", "os.remove", "os.remove", "numpy.where", "numpy.unique", "np.where().astype.astype", "os.path.join", "len", "numpy.where"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "get_cityscapes_labels_dynamic", "(", "data_dir", ",", "data_type", ",", "save_dir", ")", ":", "\n", "\n", "# labels to show", "\n", "    ", "void_labels", "=", "[", "5", "]", "\n", "\n", "# create save folder", "\n", "original_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ")", "\n", "semantic_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", "\n", "synthesis_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'synthesis'", ")", "\n", "label_save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", "\n", "\n", "# find label images", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'gtFine'", ",", "data_type", ")", "\n", "label_paths_all", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "True", ")", "\n", "label_paths", "=", "[", "p", "for", "p", "in", "label_paths_all", "if", "p", ".", "endswith", "(", "'_labelIds.png'", ")", "]", "\n", "\n", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "\n", "synthesis_paths", "=", "[", "os", ".", "path", ".", "join", "(", "synthesis_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "synthesis_path", ")", "]", "\n", "\n", "original_paths", "=", "[", "os", ".", "path", ".", "join", "(", "original_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "original_path", ")", "]", "\n", "\n", "label_paths", "=", "natsorted", "(", "label_paths", ")", "\n", "original_paths", "=", "natsorted", "(", "original_paths", ")", "\n", "synthesis_paths", "=", "natsorted", "(", "synthesis_paths", ")", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "(", "label", ",", "original", ",", "semantic", ",", "synthesis", ")", "in", "enumerate", "(", "zip", "(", "label_paths", ",", "original_paths", ",", "semantic_paths", ",", "synthesis_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "label_paths", ")", ")", ")", "\n", "# load images", "\n", "label_image", "=", "Image", ".", "open", "(", "label", ")", "\n", "# convert labeled data to numpy arrays for better handling", "\n", "label_array", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label_img", "=", "np", ".", "zeros", "(", "label_array", ".", "shape", ")", "\n", "for", "void_label", "in", "void_labels", ":", "\n", "            ", "mask_unknown", "=", "np", ".", "where", "(", "label_array", "==", "void_label", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_img", "+=", "mask_unknown", "\n", "\n", "", "final_mask", "=", "np", ".", "where", "(", "label_img", "!=", "1", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "len", "(", "np", ".", "unique", "(", "final_mask", ")", ")", "==", "2", ":", "\n", "            ", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "label", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "label_save_path", ",", "label_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "remove", "(", "original", ")", "\n", "os", ".", "remove", "(", "semantic", ")", "\n", "os", ".", "remove", "(", "synthesis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_labels.assureSingleInstanceName": [[163, 180], ["name.endswith", "len"], "function", ["None"], ["", "", "def", "assureSingleInstanceName", "(", "name", ")", ":", "\n", "# if the name is known, it is not a group", "\n", "    ", "if", "name", "in", "name2label", ":", "\n", "        ", "return", "name", "\n", "# test if the name actually denotes a group", "\n", "", "if", "not", "name", ".", "endswith", "(", "\"group\"", ")", ":", "\n", "        ", "return", "None", "\n", "# remove group", "\n", "", "name", "=", "name", "[", ":", "-", "len", "(", "\"group\"", ")", "]", "\n", "# test if the new name exists", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "        ", "return", "None", "\n", "# test if the new name denotes a label that actually has instances", "\n", "", "if", "not", "name2label", "[", "name", "]", ".", "hasInstances", ":", "\n", "        ", "return", "None", "\n", "# all good then", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlurs.__init__": [[12, 17], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.GaussianBlur", "imgaug.augmenters.MotionBlur", "imgaug.parameters.Uniform", "imgaug.parameters.Choice"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "GaussianBlur", "(", "sigma", "=", "iap", ".", "Uniform", "(", "0", ",", "3.0", ")", ")", ",", "\n", "iaa", ".", "MotionBlur", "(", "\n", "k", "=", "iap", ".", "Choice", "(", "[", "3", ",", "7", ",", "11", ",", "15", "]", ")", ",", "angle", "=", "0", ",", "\n", "direction", "=", "1", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlurs.__call__": [[19, 22], ["numpy.array", "augmentations.OnlyApplyBlurs.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursMedium.__init__": [[25, 30], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.GaussianBlur", "imgaug.augmenters.MotionBlur", "imgaug.parameters.Uniform", "imgaug.parameters.Choice"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "GaussianBlur", "(", "sigma", "=", "iap", ".", "Uniform", "(", "0", ",", "4.5", ")", ")", ",", "\n", "iaa", ".", "MotionBlur", "(", "\n", "k", "=", "iap", ".", "Choice", "(", "[", "11", ",", "15", ",", "21", "]", ")", ",", "angle", "=", "0", ",", "\n", "direction", "=", "1", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursMedium.__call__": [[32, 35], ["numpy.array", "augmentations.OnlyApplyBlursMedium.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursStrong.__init__": [[38, 44], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.GaussianBlur", "imgaug.augmenters.MotionBlur", "imgaug.parameters.Uniform", "imgaug.parameters.Choice"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "GaussianBlur", "(", "sigma", "=", "iap", ".", "Uniform", "(", "0", ",", "6.0", ")", ")", ",", "\n", "iaa", ".", "MotionBlur", "(", "\n", "k", "=", "iap", ".", "Choice", "(", "[", "15", ",", "21", ",", "27", ",", "33", "]", ")", ",", "\n", "angle", "=", "0", ",", "\n", "direction", "=", "1", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursStrong.__call__": [[46, 49], ["numpy.array", "augmentations.OnlyApplyBlursStrong.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursAggressive.__init__": [[52, 58], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.GaussianBlur", "imgaug.augmenters.MotionBlur", "imgaug.parameters.Uniform", "imgaug.parameters.Normal", "imgaug.parameters.Normal", "imgaug.parameters.Normal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.50", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "GaussianBlur", "(", "sigma", "=", "iap", ".", "Uniform", "(", "0", ",", "8.0", ")", ")", ",", "\n", "iaa", ".", "MotionBlur", "(", "\n", "k", "=", "iap", ".", "Normal", "(", "15", ",", "50", ")", ",", "\n", "angle", "=", "iap", ".", "Normal", "(", "0", ",", "360", ")", ",", "\n", "direction", "=", "iap", ".", "Normal", "(", "-", "1", ",", "1", ")", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBlursAggressive.__call__": [[60, 63], ["numpy.array", "augmentations.OnlyApplyBlursAggressive.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyChangeContrast.__init__": [[66, 71], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.contrast.LinearContrast", "imgaug.augmenters.SigmoidContrast", "imgaug.parameters.Choice", "imgaug.parameters.Choice", "imgaug.parameters.Choice", "numpy.arange().tolist", "numpy.arange().tolist", "numpy.arange().tolist", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "\n", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "contrast", ".", "LinearContrast", "(", "alpha", "=", "iap", ".", "Choice", "(", "np", ".", "arange", "(", "0", ",", "3", ",", "0.5", ")", ".", "tolist", "(", ")", ")", ")", ",", "\n", "iaa", ".", "SigmoidContrast", "(", "gain", "=", "iap", ".", "Choice", "(", "np", ".", "arange", "(", "0", ",", "3", ",", "1", ")", ".", "tolist", "(", ")", ")", ",", "\n", "cutoff", "=", "iap", ".", "Choice", "(", "np", ".", "arange", "(", "0", ",", "0.6", ",", "0.10", ")", ".", "tolist", "(", ")", ")", ")", "]", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyChangeContrast.__call__": [[73, 76], ["numpy.array", "augmentations.OnlyChangeContrast.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropout.__init__": [[79, 82], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.Dropout", "imgaug.augmenters.CoarseDropout"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "Dropout", "(", "p", "=", "(", "0", ",", "0.2", ")", ")", ",", "\n", "iaa", ".", "CoarseDropout", "(", "0.1", ",", "size_percent", "=", "0.25", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropout.__call__": [[84, 87], ["numpy.array", "augmentations.OnlyApplyDropout.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutMedium.__init__": [[90, 93], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.Dropout", "imgaug.augmenters.CoarseDropout"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "Dropout", "(", "p", "=", "(", "0", ",", "0.35", ")", ")", ",", "\n", "iaa", ".", "CoarseDropout", "(", "0.15", ",", "size_percent", "=", "0.25", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutMedium.__call__": [[95, 98], ["numpy.array", "augmentations.OnlyApplyDropoutMedium.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutStrong.__init__": [[101, 104], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.Dropout", "imgaug.augmenters.CoarseDropout"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.40", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "Dropout", "(", "p", "=", "(", "0", ",", "0.5", ")", ")", ",", "\n", "iaa", ".", "CoarseDropout", "(", "0.25", ",", "size_percent", "=", "0.25", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutStrong.__call__": [[106, 109], ["numpy.array", "augmentations.OnlyApplyDropoutStrong.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutAggressive.__init__": [[112, 115], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.Dropout", "imgaug.augmenters.CoarseDropout"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Sometimes", "(", "0.50", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "Dropout", "(", "p", "=", "(", "0", ",", "0.75", ")", ")", ",", "\n", "iaa", ".", "CoarseDropout", "(", "0.5", ",", "size_percent", "=", "0.5", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyDropoutAggressive.__call__": [[117, 120], ["numpy.array", "augmentations.OnlyApplyDropoutAggressive.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseLight.__init__": [[123, 127], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.AdditiveGaussianNoise", "imgaug.augmenters.AdditivePoissonNoise"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "\n", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "AdditiveGaussianNoise", "(", "(", "0", ",", "0.1", ")", ",", "(", "0", ",", "0.1", ")", ",", "per_channel", "=", "True", ")", ",", "\n", "iaa", ".", "AdditivePoissonNoise", "(", "(", "0", ",", "0.1", ")", ",", "per_channel", "=", "True", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseLight.__call__": [[129, 132], ["numpy.array", "augmentations.OnlyApplyNoiseLight.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseMedium.__init__": [[135, 139], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.AdditiveGaussianNoise", "imgaug.augmenters.AdditivePoissonNoise"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "\n", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "AdditiveGaussianNoise", "(", "(", "0", ",", "0.2", ")", ",", "(", "0", ",", "0.1", ")", ",", "per_channel", "=", "True", ")", ",", "\n", "iaa", ".", "AdditivePoissonNoise", "(", "(", "0", ",", "0.2", ")", ",", "per_channel", "=", "True", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseMedium.__call__": [[141, 144], ["numpy.array", "augmentations.OnlyApplyNoiseMedium.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseStrong.__init__": [[147, 151], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.AdditiveGaussianNoise", "imgaug.augmenters.AdditivePoissonNoise"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "\n", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "AdditiveGaussianNoise", "(", "(", "0", ",", "0.2", ")", ",", "(", "0", ",", "0.2", ")", ",", "per_channel", "=", "True", ")", ",", "\n", "iaa", ".", "AdditivePoissonNoise", "(", "(", "0", ",", "0.2", ")", ",", "per_channel", "=", "True", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseStrong.__call__": [[153, 156], ["numpy.array", "augmentations.OnlyApplyNoiseStrong.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseAggressive.__init__": [[159, 166], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Sometimes", "imgaug.augmenters.OneOf", "imgaug.augmenters.AdditiveGaussianNoise", "imgaug.augmenters.AdditivePoissonNoise"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "\n", "[", "iaa", ".", "Sometimes", "(", "0.25", ",", "iaa", ".", "OneOf", "(", "[", "iaa", ".", "AdditiveGaussianNoise", "(", "(", "0", ",", "100", ")", ",", "\n", "(", "0", ",", "100", ")", ",", "\n", "per_channel", "=", "True", ")", ",", "\n", "iaa", ".", "AdditivePoissonNoise", "(", "(", "0", ",", "100", ")", ",", "\n", "per_channel", "=", "True", ")", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyNoiseAggressive.__call__": [[168, 171], ["numpy.array", "augmentations.OnlyApplyNoiseAggressive.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBrightnessAggressive.__init__": [[174, 176], ["imgaug.augmenters.Sequential", "imgaug.augmenters.Add", "imgaug.parameters.Normal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "aug", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Add", "(", "iap", ".", "Normal", "(", "-", "200", ",", "200", ")", ",", "per_channel", "=", "False", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.OnlyApplyBrightnessAggressive.__call__": [[177, 180], ["numpy.array", "augmentations.OnlyApplyBrightnessAggressive.aug.augment_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "self", ".", "aug", ".", "augment_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.__flip": [[182, 186], ["img.transpose"], "function", ["None"], ["", "", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.augmentations.get_transform": [[187, 282], ["dict", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "augmentations.OnlyApplyBlurs", "augmentations.OnlyChangeContrast", "augmentations.OnlyApplyDropout", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomApply", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "augmentations.OnlyApplyDropout", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlurs", "augmentations.OnlyChangeContrast", "augmentations.OnlyApplyDropout", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyDropout", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlurs", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlurs", "augmentations.OnlyApplyNoiseMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyDropoutMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursMedium", "augmentations.OnlyApplyNoiseMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursMedium", "augmentations.OnlyApplyDropoutMedium", "augmentations.OnlyApplyNoiseMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursStrong", "augmentations.OnlyApplyDropoutStrong", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursStrong", "augmentations.OnlyApplyDropoutStrong", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursStrong", "augmentations.OnlyApplyNoiseMedium", "torchvision.transforms.ColorJitter", "augmentations.OnlyApplyBlursStrong", "augmentations.OnlyApplyDropoutStrong", "augmentations.OnlyApplyNoiseMedium", "torchvision.transforms.ColorJitter", "PIL.Image.fromarray", "torchvision.transforms.RandomAffine", "torchvision.transforms.RandomRotation", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "get_transform", "(", "image_size", ",", "transform_name", "=", "'blurs'", ")", ":", "\n", "# uses ImageNet mean and standard deviation to normalize images", "\n", "    ", "norm_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "norm_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "my_transforms", "=", "dict", "(", ")", "\n", "#common_transforms = [transforms.Normalize(norm_mean, norm_std)]", "\n", "common_transforms", "=", "[", "transforms", ".", "Resize", "(", "size", "=", "image_size", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "my_transforms", "[", "'none'", "]", "=", "[", "]", "\n", "my_transforms", "[", "'base'", "]", "=", "transforms", ".", "Compose", "(", "common_transforms", ")", "\n", "my_transforms", "[", "'normalization'", "]", "=", "transforms", ".", "Compose", "(", "common_transforms", ")", "\n", "my_transforms", "[", "'blurs'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlurs", "(", ")", ",", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "common_transforms", ")", "\n", "my_transforms", "[", "'contrast'", "]", "=", "transforms", ".", "Compose", "(", "\n", "[", "OnlyChangeContrast", "(", ")", ",", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "common_transforms", ")", "\n", "my_transforms", "[", "'dropout'", "]", "=", "transforms", ".", "Compose", "(", "\n", "[", "OnlyApplyDropout", "(", ")", ",", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "common_transforms", ")", "\n", "my_transforms", "[", "'color_jitter'", "]", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "common_transforms", ")", "\n", "my_transforms", "[", "'color_jitter_dropout'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyDropout", "(", ")", ",", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "my_transforms", "[", "'geometry'", "]", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "RandomAffine", "(", "degrees", "=", "0", ",", "shear", "=", "(", "-", "25", ",", "+", "25", ")", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "(", "-", "25", ",", "25", ")", ")", "]", ",", "p", "=", "0.50", ")", "]", "+", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'all'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlurs", "(", ")", ",", "\n", "OnlyChangeContrast", "(", ")", ",", "\n", "OnlyApplyDropout", "(", ")", ",", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'light_1'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyDropout", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'light_2'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlurs", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'light_3'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlurs", "(", ")", ",", "\n", "OnlyApplyNoiseMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'medium_1'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyDropoutMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'medium_2'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'medium_3'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursMedium", "(", ")", ",", "\n", "OnlyApplyNoiseMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'medium_4'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursMedium", "(", ")", ",", "\n", "OnlyApplyDropoutMedium", "(", ")", ",", "\n", "OnlyApplyNoiseMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'strong_1'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursStrong", "(", ")", ",", "\n", "OnlyApplyDropoutStrong", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.5", ",", "0.5", ",", "0.5", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'strong_2'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursStrong", "(", ")", ",", "\n", "OnlyApplyDropoutStrong", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.5", ",", "0.5", ",", "0.5", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'strong_3'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursStrong", "(", ")", ",", "\n", "OnlyApplyNoiseMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.5", ",", "0.5", ",", "0.5", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "my_transforms", "[", "'strong_4'", "]", "=", "transforms", ".", "Compose", "(", "[", "OnlyApplyBlursStrong", "(", ")", ",", "\n", "OnlyApplyDropoutStrong", "(", ")", ",", "\n", "OnlyApplyNoiseMedium", "(", ")", ",", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", "]", "+", "\n", "[", "transforms", ".", "ColorJitter", "(", "0.5", ",", "0.5", ",", "0.5", ")", "]", "+", "\n", "common_transforms", ")", "\n", "\n", "return", "my_transforms", "[", "'base'", "]", ",", "my_transforms", "[", "transform_name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.lostandfound_preprocess.convert_gtCoarse_to_labels": [[14, 34], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "numpy.array", "numpy.where", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.path.join", "os.path.join", "os.listdir", "PIL.Image.open", "np.where.astype", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["def", "convert_gtCoarse_to_labels", "(", "data_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "'labelTrainIds'", "in", "image", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ")", "\n", "\n", "# get mask where instance is located", "\n", "mask", "=", "np", ".", "where", "(", "semantic_img", "==", "2", ",", "1", ",", "0", ")", "\n", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "semantic_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.lostandfound_preprocess.convert_semantic_to_trainids": [[35, 58], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "numpy.array", "Image.fromarray.copy", "id_to_trainid.items", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.path.join", "os.path.join", "os.listdir", "PIL.Image.open", "semantic_img.copy.astype", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "convert_semantic_to_trainids", "(", "semantic_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ")", "\n", "\n", "# Correct labels to train ID", "\n", "semantic_copy", "=", "semantic_img", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "semantic_copy", "[", "semantic_img", "==", "k", "]", "=", "v", "\n", "\n", "", "semantic_img", "=", "Image", ".", "fromarray", "(", "semantic_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ",", "semantic_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.lostandfound_preprocess.convert_gtCoarse_to_labels_ROI": [[59, 82], ["natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.join", "print", "numpy.array", "numpy.where", "numpy.where", "PIL.Image.fromarray", "os.path.basename", "Image.fromarray.save", "os.path.join", "os.path.join", "os.listdir", "PIL.Image.open", "final_mask.astype", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "def", "convert_gtCoarse_to_labels_ROI", "(", "data_path", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_ROI'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_ROI'", ")", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "'labelTrainIds'", "in", "image", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "\n", "for", "idx", ",", "semantic", "in", "enumerate", "(", "semantic_paths", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ")", "\n", "\n", "# get mask where instance is located", "\n", "mask_unknown", "=", "np", ".", "where", "(", "semantic_img", "==", "2", ",", "1", ",", "0", ")", "\n", "mask_roi", "=", "np", ".", "where", "(", "semantic_img", "==", "255", ",", "255", ",", "0", ")", "\n", "\n", "final_mask", "=", "mask_unknown", "+", "mask_roi", "\n", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels_with_ROI'", ",", "semantic_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.one_hot_encoding": [[4, 10], ["torch.zeros", "range", "semantic.size", "semantic.size", "semantic.squeeze"], "function", ["None"], ["def", "one_hot_encoding", "(", "semantic", ",", "num_classes", "=", "20", ")", ":", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "num_classes", ",", "semantic", ".", "size", "(", "1", ")", ",", "semantic", ".", "size", "(", "2", ")", ")", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "one_hot", "[", "class_id", ",", ":", ",", ":", "]", "=", "(", "semantic", ".", "squeeze", "(", "0", ")", "==", "class_id", ")", "\n", "", "one_hot", "=", "one_hot", "[", ":", "num_classes", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.create_unknown_examples.create_unknown_examples": [[18, 144], ["natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "zip", "print", "numpy.array", "numpy.array", "PIL.Image.open", "int", "numpy.zeros", "numpy.copy", "range", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename", "os.path.basename().replace", "PIL.Image.fromarray", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "PIL.Image.open", "PIL.Image.open", "numpy.shape", "int", "unique_classes.pop", "numpy.where", "numpy.place", "numpy.where", "np.zeros.astype", "semantic_copy.astype.copy", "id_to_trainid.items", "new_semantic_map.copy.astype", "semantic_copy.astype.copy", "id_to_trainid.items", "new_semantic_map.copy.astype", "util.visualization.colorize_mask", "util.visualization.colorize_mask", "Image.fromarray.save", "Image.fromarray.save", "Image.open.save", "visualization.colorize_mask.save", "PIL.Image.fromarray", "semantic_copy.astype.copy", "id_to_trainid.items", "new_semantic_map.copy.astype", "PIL.Image.fromarray", "Image.fromarray.save", "Image.open.save", "Image.fromarray.save", "Image.fromarray.save", "Image.open.save", "Image.fromarray.save", "PIL.Image.open", "Image.open.save", "numpy.unique", "random.random", "len", "int", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "random.random", "len", "int", "os.path.join", "os.path.join", "os.path.basename", "str", "random.random", "len", "str"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir"], ["def", "create_unknown_examples", "(", "instance_path", ",", "semantic_path", ",", "original_path", ",", "save_dir", ",", "visualize", "=", "False", ",", "dynamic", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic_labelId'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic_labelId'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ")", ")", "\n", "\n", "# for creating synthesis later", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ",", "'gtFine'", ",", "'val'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ",", "'leftImg8bit'", ",", "'val'", ")", ")", "\n", "\n", "", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "instance_paths", "=", "[", "os", ".", "path", ".", "join", "(", "instance_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "instance_path", ")", "]", "\n", "original_paths", "=", "[", "os", ".", "path", ".", "join", "(", "original_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "original_path", ")", "]", "\n", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "instance_paths", "=", "natsorted", "(", "instance_paths", ")", "\n", "original_paths", "=", "natsorted", "(", "original_paths", ")", "\n", "\n", "for", "idx", ",", "(", "semantic", ",", "instance", ",", "original", ")", "in", "enumerate", "(", "zip", "(", "semantic_paths", ",", "instance_paths", ",", "original_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "semantic_paths", ")", ")", ")", "\n", "\n", "semantic_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "semantic", ")", ")", "\n", "instance_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "instance", ")", ")", "\n", "original_img", "=", "Image", ".", "open", "(", "original", ")", "\n", "\n", "unique_classes", "=", "[", "sample", "for", "sample", "in", "np", ".", "unique", "(", "instance_img", ")", "if", "len", "(", "str", "(", "sample", ")", ")", "==", "5", "]", "\n", "\n", "how_many", "=", "int", "(", "random", ".", "random", "(", ")", "*", "len", "(", "unique_classes", ")", ")", "\n", "\n", "final_mask", "=", "np", ".", "zeros", "(", "np", ".", "shape", "(", "instance_img", ")", ")", "\n", "new_semantic_map", "=", "np", ".", "copy", "(", "semantic_img", ")", "\n", "\n", "# Make final mask by selecting each instance to replace at random", "\n", "for", "_", "in", "range", "(", "how_many", ")", ":", "\n", "# instance to change", "\n", "            ", "instance_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "len", "(", "unique_classes", ")", ")", "\n", "instance_change", "=", "unique_classes", ".", "pop", "(", "instance_idx", ")", "\n", "\n", "# get mask where instance is located", "\n", "mask", "=", "np", ".", "where", "(", "instance_img", "==", "instance_change", ",", "1", ",", "0", ")", "\n", "\n", "while", "True", ":", "\n", "                ", "new_instance_idx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "len", "(", "objects_to_change", ")", ")", "\n", "new_instance_id", "=", "objects_to_change", "[", "new_instance_idx", "]", "\n", "\n", "# ensure we don't replace by the same class", "\n", "if", "new_instance_id", "!=", "int", "(", "(", "str", "(", "instance_change", ")", "[", ":", "2", "]", ")", ")", ":", "\n", "                    ", "break", "\n", "", "", "np", ".", "place", "(", "new_semantic_map", ",", "mask", ",", "new_instance_id", ")", "\n", "final_mask", "+=", "mask", "\n", "\n", "# also mark dynamic labels (Optional)", "\n", "", "if", "dynamic", ":", "\n", "            ", "mask", "=", "np", ".", "where", "(", "semantic_img", "==", "5", ",", "1", ",", "0", ")", "\n", "final_mask", "+=", "mask", "\n", "\n", "", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'labelIds'", ",", "'unknown_labelIds'", ")", "\n", "new_semantic_train_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'labelIds'", ",", "'unknown_trainIds'", ")", "\n", "new_label_name", "=", "os", ".", "path", ".", "basename", "(", "instance", ")", ".", "replace", "(", "'instanceIds'", ",", "'unknown'", ")", "\n", "old_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", "\n", "new_original_name", "=", "os", ".", "path", ".", "basename", "(", "original", ")", ".", "replace", "(", "'leftImg8bit'", ",", "'unknown_leftImg8bit'", ")", "\n", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "visualize", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'old_semantic'", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'old_semantic'", ")", ")", "\n", "\n", "# Correct labels to train ID for old semantic", "\n", "", "semantic_copy", "=", "semantic_img", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "semantic_copy", "[", "semantic_img", "==", "k", "]", "=", "v", "\n", "", "semantic_img", "=", "semantic_copy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Correct labels to train ID for new semantic", "\n", "semantic_copy", "=", "new_semantic_map", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "semantic_copy", "[", "new_semantic_map", "==", "k", "]", "=", "v", "\n", "", "new_semantic_map", "=", "semantic_copy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "new_semantic_img", "=", "visualization", ".", "colorize_mask", "(", "new_semantic_map", ")", "\n", "old_semantic_img", "=", "visualization", ".", "colorize_mask", "(", "semantic_img", ")", "\n", "\n", "# save images", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "new_label_name", ")", ")", "\n", "new_semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ",", "new_semantic_name", ")", ")", "\n", "original_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ",", "new_original_name", ")", ")", "\n", "old_semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'old_semantic'", ",", "old_semantic_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "new_semantic_img", "=", "Image", ".", "fromarray", "(", "new_semantic_map", ")", "\n", "\n", "# Correct labels to train ID for new semantic", "\n", "semantic_copy", "=", "new_semantic_map", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "semantic_copy", "[", "new_semantic_map", "==", "k", "]", "=", "v", "\n", "", "new_semantic_map", "=", "semantic_copy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "new_semantic_train_img", "=", "Image", ".", "fromarray", "(", "new_semantic_map", ")", "\n", "\n", "# save images", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "new_label_name", ")", ")", "\n", "original_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ",", "new_original_name", ")", ")", "\n", "new_semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic_labelId'", ",", "new_semantic_name", ")", ")", "\n", "new_semantic_train_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ",", "new_semantic_train_name", ")", ")", "\n", "\n", "# save images for synthesis", "\n", "original_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ",", "'leftImg8bit'", ",", "'val'", ",", "new_original_name", ")", ")", "\n", "new_semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ",", "'gtFine'", ",", "'val'", ",", "new_semantic_name", ")", ")", "\n", "\n", "instance_img", "=", "Image", ".", "open", "(", "instance", ")", "\n", "instance_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp'", ",", "'gtFine'", ",", "'val'", ",", "os", ".", "path", ".", "basename", "(", "instance", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.create_unknown_examples.create_known_examples": [[145, 187], ["natsort.natsorted", "natsort.natsorted", "natsort.natsorted", "enumerate", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "zip", "print", "numpy.array", "numpy.zeros", "PIL.Image.fromarray", "PIL.Image.open", "PIL.Image.open", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename().replace", "Image.fromarray.save", "Image.open.save", "Image.open.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "PIL.Image.open", "numpy.shape", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdir", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save"], ["", "", "", "def", "create_known_examples", "(", "instance_path", ",", "semantic_path", ",", "original_path", ",", "save_dir", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ")", ")", "\n", "\n", "", "instance_paths", "=", "[", "os", ".", "path", ".", "join", "(", "instance_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "instance_path", ")", "]", "\n", "\n", "semantic_paths", "=", "[", "os", ".", "path", ".", "join", "(", "semantic_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "semantic_path", ")", "]", "\n", "\n", "original_paths", "=", "[", "os", ".", "path", ".", "join", "(", "original_path", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "original_path", ")", "]", "\n", "\n", "instance_paths", "=", "natsorted", "(", "instance_paths", ")", "\n", "semantic_paths", "=", "natsorted", "(", "semantic_paths", ")", "\n", "original_paths", "=", "natsorted", "(", "original_paths", ")", "\n", "\n", "for", "idx", ",", "(", "instance", ",", "semantic", ",", "original", ")", "in", "enumerate", "(", "zip", "(", "instance_paths", ",", "semantic_paths", ",", "original_paths", ")", ")", ":", "\n", "        ", "print", "(", "'Generating image %i our of %i'", "%", "(", "idx", "+", "1", ",", "len", "(", "instance_paths", ")", ")", ")", "\n", "\n", "# create a file where all the images are zero", "\n", "instance_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "instance", ")", ")", "\n", "final_mask", "=", "np", ".", "zeros", "(", "np", ".", "shape", "(", "instance_img", ")", ")", "\n", "\n", "mask_img", "=", "Image", ".", "fromarray", "(", "(", "final_mask", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "semantic_img", "=", "Image", ".", "open", "(", "semantic", ")", "\n", "original_img", "=", "Image", ".", "open", "(", "original", ")", "\n", "\n", "new_semantic_name", "=", "os", ".", "path", ".", "basename", "(", "semantic", ")", ".", "replace", "(", "'labelIds'", ",", "'known_labelIds'", ")", "\n", "new_original_name", "=", "os", ".", "path", ".", "basename", "(", "original", ")", ".", "replace", "(", "'leftImg8bit'", ",", "'known_leftImg8bit'", ")", "\n", "label_name", "=", "os", ".", "path", ".", "basename", "(", "instance", ")", ".", "replace", "(", "'instanceIds'", ",", "'known'", ")", "\n", "\n", "mask_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'labels'", ",", "label_name", ")", ")", "\n", "semantic_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'semantic'", ",", "new_semantic_name", ")", ")", "\n", "original_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'original'", ",", "new_original_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset.CustomDataset.modify_commandline_options": [[11, 29], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.modify_commandline_options"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "load_size", "=", "286", "if", "is_train", "else", "256", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "load_size", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "13", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--label_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the directory that contains label images'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the directory that contains photo images'", ")", "\n", "parser", ".", "add_argument", "(", "'--instance_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to the directory that contains instance maps. Leave black if not exists'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.custom_dataset.CustomDataset.get_paths": [[30, 46], ["data.image_folder.make_dataset", "data.image_folder.make_dataset", "len", "data.image_folder.make_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_dir", "=", "opt", ".", "label_dir", "\n", "label_paths", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "image_dir", "=", "opt", ".", "image_dir", "\n", "image_paths", "=", "make_dataset", "(", "image_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "if", "len", "(", "opt", ".", "instance_dir", ")", ">", "0", ":", "\n", "            ", "instance_dir", "=", "opt", ".", "instance_dir", "\n", "instance_paths", "=", "make_dataset", "(", "instance_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "instance_paths", "=", "[", "]", "\n", "\n", "", "assert", "len", "(", "label_paths", ")", "==", "len", "(", "image_paths", ")", ",", "\"The #images in %s and %s do not match. Is there something wrong?\"", "\n", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options": [[8, 13], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--no_pairing_check'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, skip sanity check of correct label-image file pairing'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.initialize": [[14, 34], ["pix2pix_dataset.Pix2pixDataset.get_paths", "util.natural_sort", "util.natural_sort", "len", "util.natural_sort"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.CityscapesDataset.get_paths", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.natural_sort", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.natural_sort", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.natural_sort"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "label_paths", ",", "image_paths", ",", "instance_paths", "=", "self", ".", "get_paths", "(", "opt", ")", "\n", "\n", "util", ".", "natural_sort", "(", "label_paths", ")", "\n", "util", ".", "natural_sort", "(", "image_paths", ")", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "util", ".", "natural_sort", "(", "instance_paths", ")", "\n", "\n", "", "label_paths", "=", "label_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "image_paths", "=", "image_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "instance_paths", "=", "instance_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "\n", "self", ".", "label_paths", "=", "label_paths", "\n", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "instance_paths", "=", "instance_paths", "\n", "\n", "size", "=", "len", "(", "self", ".", "label_paths", ")", "\n", "self", ".", "dataset_size", "=", "size", "\n", "# if opt.isTrain:", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.get_paths": [[38, 44], ["None"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_paths", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "instance_paths", "=", "[", "]", "\n", "assert", "False", ",", "\"A subclass of Pix2pixDataset must override self.get_paths(self, opt)\"", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.paths_match": [[45, 49], ["os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "filename1_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path1", ")", ")", "[", "0", "]", "\n", "filename2_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path2", ")", ")", "[", "0", "]", "\n", "return", "filename1_without_ext", "==", "filename2_without_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.__getitem__": [[50, 89], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "PIL.Image.open", "image.convert.convert.convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "pix2pix_dataset.Pix2pixDataset.postprocess", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.long", "data.base_dataset.get_transform.", "data.base_dataset.get_transform."], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ColorJitter.get_params", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.postprocess"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Label Image", "\n", "        ", "label_path", "=", "self", ".", "label_paths", "[", "index", "]", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "label", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "label_tensor", "=", "transform_label", "(", "label", ")", "*", "255.0", "\n", "label_tensor", "[", "label_tensor", "==", "255", "]", "=", "self", ".", "opt", ".", "label_nc", "# 'unknown' is opt.label_nc", "\n", "\n", "# input image (real images)", "\n", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "image_tensor", "=", "transform_image", "(", "image", ")", "\n", "\n", "# if using instance maps", "\n", "if", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "instance_tensor", "=", "0", "\n", "", "else", ":", "\n", "            ", "instance_path", "=", "self", ".", "instance_paths", "[", "index", "]", "\n", "instance", "=", "Image", ".", "open", "(", "instance_path", ")", "\n", "if", "instance", ".", "mode", "==", "'L'", ":", "\n", "                ", "instance_tensor", "=", "transform_label", "(", "instance", ")", "*", "255", "\n", "instance_tensor", "=", "instance_tensor", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "instance_tensor", "=", "transform_label", "(", "instance", ")", "\n", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "label_tensor", ",", "\n", "'instance'", ":", "instance_tensor", ",", "\n", "'image'", ":", "image_tensor", ",", "\n", "'path'", ":", "image_path", ",", "\n", "}", "\n", "\n", "# Give subclasses a chance to modify the final output", "\n", "self", ".", "postprocess", "(", "input_dict", ")", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.postprocess": [[90, 92], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.pix2pix_dataset.Pix2pixDataset.__len__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.BaseDataset.__init__": [[9, 11], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.BaseDataset.modify_commandline_options": [[12, 15], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.BaseDataset.initialize": [[16, 18], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.get_params": [[20, 40], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random", "int", "min", "max"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess_mode", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_shortside_and_crop'", ":", "\n", "        ", "ss", ",", "ls", "=", "min", "(", "w", ",", "h", ")", ",", "max", "(", "w", ",", "h", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "w", "==", "ss", "\n", "ls", "=", "int", "(", "opt", ".", "load_size", "*", "ls", "/", "ss", ")", "\n", "new_w", ",", "new_h", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.get_transform": [[42, 74], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "round", "transform_list.append", "transform_list.append", "torchvision.Resize", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Lambda", "transform_list.append", "torchvision.Lambda", "base_dataset.__crop", "base_dataset.__make_power_2", "base_dataset.__resize", "base_dataset.__flip", "base_dataset.__scale_width", "base_dataset.__scale_shortside"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__crop", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__resize", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__flip", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__scale_shortside"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "", "elif", "'scale_shortside'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_shortside", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'none'", ":", "\n", "        ", "base", "=", "32", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'fixed'", ":", "\n", "        ", "w", "=", "opt", ".", "crop_size", "\n", "h", "=", "round", "(", "opt", ".", "crop_size", "/", "opt", ".", "aspect_ratio", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.normalize": [[76, 78], ["torchvision.Normalize"], "function", ["None"], ["", "def", "normalize", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__resize": [[80, 82], ["img.resize"], "function", ["None"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__make_power_2": [[84, 91], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__scale_width": [[93, 100], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__scale_shortside": [[102, 111], ["int", "img.resize", "min", "max"], "function", ["None"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__crop": [[113, 118], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.base_dataset.__flip": [[120, 124], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__init__": [[69, 82], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__getitem__": [[83, 92], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.trainer_util.loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.ImageFolder.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.is_image_file": [[17, 19], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset_rec": [[21, 29], ["os.path.isdir", "sorted", "os.walk", "image_folder.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.is_image_file"], ["", "def", "make_dataset_rec", "(", "dir", ",", "images", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset": [[31, 61], ["os.path.join", "os.path.isfile", "image_folder.make_dataset_rec", "sorted", "os.path.join", "os.path.isdir", "os.path.islink", "os.walk", "sorted", "open", "print", "open", "f.read().splitlines", "image_folder.is_image_file", "f.write", "os.path.join", "f.read().splitlines.append", "f.read"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset_rec", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.is_image_file", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.read"], ["", "", "", "", "def", "make_dataset", "(", "dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "False", ",", "write_cache", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "\n", "if", "read_cache", ":", "\n", "        ", "possible_filelist", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_filelist", ")", ":", "\n", "            ", "with", "open", "(", "possible_filelist", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "return", "images", "\n", "\n", "", "", "", "if", "recursive", ":", "\n", "        ", "make_dataset_rec", "(", "dir", ",", "images", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", "or", "os", ".", "path", ".", "islink", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "fnames", "=", "sorted", "(", "fnames", ")", "\n", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "if", "write_cache", ":", "\n", "        ", "filelist_cache", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "with", "open", "(", "filelist_cache", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "path", "in", "images", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "path", ")", "\n", "", "print", "(", "'wrote filelist cache at %s'", "%", "filelist_cache", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.default_loader": [[63, 65], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.find_dataset_using_name": [[6, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "ValueError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], ["\t", "log_root", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "log_root", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# Path('./logs').mkdir(exist_ok=True)", "\n", "\n", "handlers", "=", "[", "\n", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ",", "\n", "# logging.handlers.RotatingFileHandler('logs/watchdog.log', maxBytes=1024*1024, backupCount=7),", "\n", "]", "\n", "\n", "handlers", "[", "0", "]", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# handlers[1].setLevel(logging.INFO)", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'{asctime} | {name} {levelname} | {message}'", ",", "style", "=", "'{'", ")", "\n", "\n", "for", "handler", "in", "handlers", ":", "\n", "\t\t", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler", ")", "\n", "\n", "", "", "init_log", "(", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.get_option_setter": [[31, 34], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.create_dataloader": [[36, 58], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "int", "int", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.CityscapesDataset.modify_commandline_options": [[8, 21], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.parse_known_args", "hasattr", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.modify_commandline_options"], ["", "one_hot", "=", "one_hot", "[", ":", "num_classes", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.CityscapesDataset.get_paths": [[22, 39], ["os.path.join", "data.image_folder.make_dataset", "os.path.join", "data.image_folder.make_dataset", "p.endswith", "p.endswith"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.image_folder.make_dataset"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.cityscapes_dataset.CityscapesDataset.paths_match": [[40, 46], ["os.path.basename", "os.path.basename", "os.path.basename.split", "os.path.basename.split"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_synthesis.train.main": [[14, 29], ["options.train_options.TrainOptions.", "options.train_options.TrainOptions.parse", "options.train_options.TrainOptions.save_options", "print", "torch.spawn"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.save_options"], ["\n", "from", "trainers", ".", "dissimilarity_trainer", "import", "DissimilarityTrainer", "\n", "from", "util", "import", "trainer_util", "\n", "from", "util", "import", "trainer_util", ",", "metrics", "\n", "from", "util", ".", "iter_counter", "import", "IterationCounter", "\n", "from", "util", ".", "image_logging", "import", "ImgLogging", "\n", "from", "util", "import", "visualization", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "help", "=", "'Path to the config file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'seed for experiment'", ")", "\n", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Load experiment setting", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_synthesis.train.main_worker": [[30, 94], ["print", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "data.create_dataloader", "trainers.pix2pix_trainer.Pix2PixTrainer", "util.iter_counter.IterationCounter", "util.visualizer.Visualizer", "util.iter_counter.IterationCounter.training_epochs", "print", "len", "data.create_dataloader.sampler.set_epoch", "util.iter_counter.IterationCounter.record_epoch_start", "enumerate", "collections.OrderedDict", "util.visualizer.Visualizer.display_current_results", "trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate", "util.iter_counter.IterationCounter.record_epoch_end", "util.iter_counter.IterationCounter.record_one_iteration", "trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step", "trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step", "util.iter_counter.IterationCounter.needs_printing", "print", "trainers.pix2pix_trainer.Pix2PixTrainer.save", "util.iter_counter.IterationCounter.record_current_iter", "print", "trainers.pix2pix_trainer.Pix2PixTrainer.save", "trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses", "util.visualizer.Visualizer.print_current_errors", "util.visualizer.Visualizer.plot_current_errors", "trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.create_dataloader", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.training_epochs", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_epoch_start", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.display_current_results", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_epoch_end", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_one_iteration", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.needs_printing", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.iter_counter.IterationCounter.record_current_iter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.print_current_errors", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualizer.Visualizer.plot_current_errors", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated"], ["with", "open", "(", "opts", ".", "config", ",", "'r'", ")", "as", "stream", ":", "\n", "    ", "config", "=", "yaml", ".", "load", "(", "stream", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "# get experiment information", "\n", "", "exp_name", "=", "config", "[", "'experiment_name'", "]", "+", "opts", ".", "seed", "\n", "save_fdr", "=", "config", "[", "'save_folder'", "]", "\n", "logs_fdr", "=", "config", "[", "'logger'", "]", "[", "'results_dir'", "]", "\n", "\n", "print", "(", "'Starting experiment named: %s'", "%", "exp_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_fdr", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "save_fdr", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "logs_fdr", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "logs_fdr", ")", "\n", "\n", "", "train_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "logs_fdr", ",", "exp_name", ",", "'train'", ")", ",", "flush_secs", "=", "30", ")", "\n", "val_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "logs_fdr", ",", "exp_name", ",", "'validation'", ")", ",", "flush_secs", "=", "30", ")", "\n", "test_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "logs_fdr", ",", "exp_name", ",", "'test'", ")", ",", "flush_secs", "=", "30", ")", "\n", "\n", "# Save config file use for experiment", "\n", "shutil", ".", "copy", "(", "opts", ".", "config", ",", "os", ".", "path", ".", "join", "(", "logs_fdr", ",", "exp_name", ",", "'config.yaml'", ")", ")", "\n", "\n", "# Activate GPUs", "\n", "config", "[", "'gpu_ids'", "]", "=", "opts", ".", "gpu_ids", "\n", "gpu_info", "=", "trainer_util", ".", "activate_gpus", "(", "config", ")", "\n", "\n", "# Get data loaders", "\n", "cfg_train_loader", "=", "config", "[", "'train_dataloader'", "]", "\n", "cfg_val_loader", "=", "config", "[", "'val_dataloader'", "]", "\n", "cfg_test_loader1", "=", "config", "[", "'test_dataloader1'", "]", "\n", "cfg_test_loader2", "=", "config", "[", "'test_dataloader2'", "]", "\n", "cfg_test_loader3", "=", "config", "[", "'test_dataloader3'", "]", "\n", "cfg_test_loader4", "=", "config", "[", "'test_dataloader4'", "]", "\n", "\n", "# checks if we are using prior images", "\n", "prior", "=", "config", "[", "'model'", "]", "[", "'prior'", "]", "\n", "\n", "# adds logic to dataloaders (avoid repetition in config file)", "\n", "cfg_train_loader", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "cfg_val_loader", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "cfg_test_loader3", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "cfg_test_loader4", "[", "'dataset_args'", "]", "[", "'prior'", "]", "=", "prior", "\n", "\n", "\n", "train_loader", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_train_loader", "[", "'dataset_args'", "]", ",", "cfg_train_loader", "[", "'dataloader_args'", "]", ")", "\n", "val_loader", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_val_loader", "[", "'dataset_args'", "]", ",", "cfg_val_loader", "[", "'dataloader_args'", "]", ")", "\n", "test_loader1", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", ",", "cfg_test_loader1", "[", "'dataloader_args'", "]", ")", "\n", "test_loader2", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", ",", "cfg_test_loader2", "[", "'dataloader_args'", "]", ")", "\n", "test_loader3", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_test_loader3", "[", "'dataset_args'", "]", ",", "cfg_test_loader3", "[", "'dataloader_args'", "]", ")", "\n", "test_loader4", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_test_loader4", "[", "'dataset_args'", "]", ",", "cfg_test_loader4", "[", "'dataloader_args'", "]", ")", "\n", "\n", "if", "config", "[", "'training_strategy'", "]", "[", "'image_visualization'", "]", ":", "\n", "    ", "cfg_image_loader", "=", "config", "[", "'img_dataloader'", "]", "\n", "image_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "logs_fdr", ",", "exp_name", ",", "'images'", ")", ",", "flush_secs", "=", "30", ")", "\n", "image_loader", "=", "trainer_util", ".", "get_dataloader", "(", "cfg_image_loader", "[", "'dataset_args'", "]", ",", "cfg_image_loader", "[", "'dataloader_args'", "]", ")", "\n", "image_logger", "=", "ImgLogging", "(", "cfg_image_loader", "[", "'dataset_args'", "]", "[", "'preprocess_mode'", "]", ")", "\n", "\n", "# Getting parameters for test", "\n", "", "dataset", "=", "cfg_test_loader1", "[", "'dataset_args'", "]", "\n", "h", "=", "int", "(", "(", "dataset", "[", "'crop_size'", "]", "/", "dataset", "[", "'aspect_ratio'", "]", ")", ")", "\n", "w", "=", "int", "(", "dataset", "[", "'crop_size'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.discriminator.FPSEDiscriminator.__init__": [[16, 75], ["models.networks.base_network.BaseNetwork.__init__", "models.networks.normalization.get_nonspade_norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.get_nonspade_norm_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "nf", "=", "opt", ".", "ndf", "\n", "input_nc", "=", "3", "\n", "label_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "+", "(", "0", "if", "opt", ".", "no_instance", "else", "1", ")", "\n", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "\n", "# bottom-up pathway", "\n", "self", ".", "enc1", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "enc2", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "enc3", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "enc4", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "enc5", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "\n", "# top-down pathway", "\n", "self", ".", "lat2", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "kernel_size", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "lat3", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "kernel_size", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "lat4", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "4", ",", "kernel_size", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "lat5", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "4", ",", "kernel_size", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "\n", "# upsampling", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "# final layers", "\n", "self", ".", "final2", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "final3", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "final4", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "\n", "# true/false prediction and semantic alignment prediction", "\n", "self", ".", "tf", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "seg", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Conv2d", "(", "label_nc", ",", "nf", "*", "2", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.discriminator.FPSEDiscriminator.forward": [[76, 119], ["discriminator.FPSEDiscriminator.enc1", "discriminator.FPSEDiscriminator.enc2", "discriminator.FPSEDiscriminator.enc3", "discriminator.FPSEDiscriminator.enc4", "discriminator.FPSEDiscriminator.enc5", "discriminator.FPSEDiscriminator.lat5", "discriminator.FPSEDiscriminator.final2", "discriminator.FPSEDiscriminator.final3", "discriminator.FPSEDiscriminator.final4", "discriminator.FPSEDiscriminator.tf", "discriminator.FPSEDiscriminator.tf", "discriminator.FPSEDiscriminator.tf", "discriminator.FPSEDiscriminator.seg", "discriminator.FPSEDiscriminator.seg", "discriminator.FPSEDiscriminator.seg", "discriminator.FPSEDiscriminator.embedding", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "discriminator.FPSEDiscriminator.up", "discriminator.FPSEDiscriminator.lat4", "discriminator.FPSEDiscriminator.up", "discriminator.FPSEDiscriminator.lat3", "discriminator.FPSEDiscriminator.up", "discriminator.FPSEDiscriminator.lat2", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fake_and_real_img", ",", "segmap", ")", ":", "\n", "# bottom-up pathway", "\n", "        ", "feat11", "=", "self", ".", "enc1", "(", "fake_and_real_img", ")", "\n", "feat12", "=", "self", ".", "enc2", "(", "feat11", ")", "\n", "feat13", "=", "self", ".", "enc3", "(", "feat12", ")", "\n", "feat14", "=", "self", ".", "enc4", "(", "feat13", ")", "\n", "feat15", "=", "self", ".", "enc5", "(", "feat14", ")", "\n", "# top-down pathway and lateral connections", "\n", "feat25", "=", "self", ".", "lat5", "(", "feat15", ")", "\n", "feat24", "=", "self", ".", "up", "(", "feat25", ")", "+", "self", ".", "lat4", "(", "feat14", ")", "\n", "feat23", "=", "self", ".", "up", "(", "feat24", ")", "+", "self", ".", "lat3", "(", "feat13", ")", "\n", "feat22", "=", "self", ".", "up", "(", "feat23", ")", "+", "self", ".", "lat2", "(", "feat12", ")", "\n", "# final prediction layers", "\n", "feat32", "=", "self", ".", "final2", "(", "feat22", ")", "\n", "feat33", "=", "self", ".", "final3", "(", "feat23", ")", "\n", "feat34", "=", "self", ".", "final4", "(", "feat24", ")", "\n", "# Patch-based True/False prediction", "\n", "pred2", "=", "self", ".", "tf", "(", "feat32", ")", "\n", "pred3", "=", "self", ".", "tf", "(", "feat33", ")", "\n", "pred4", "=", "self", ".", "tf", "(", "feat34", ")", "\n", "seg2", "=", "self", ".", "seg", "(", "feat32", ")", "\n", "seg3", "=", "self", ".", "seg", "(", "feat33", ")", "\n", "seg4", "=", "self", ".", "seg", "(", "feat34", ")", "\n", "\n", "# intermediate features for discriminator feature matching loss", "\n", "feats", "=", "[", "feat12", ",", "feat13", ",", "feat14", ",", "feat15", "]", "\n", "\n", "# segmentation map embedding", "\n", "segemb", "=", "self", ".", "embedding", "(", "segmap", ")", "\n", "segemb", "=", "F", ".", "avg_pool2d", "(", "segemb", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "segemb2", "=", "F", ".", "avg_pool2d", "(", "segemb", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "segemb3", "=", "F", ".", "avg_pool2d", "(", "segemb2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "segemb4", "=", "F", ".", "avg_pool2d", "(", "segemb3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "# semantics embedding discriminator score", "\n", "pred2", "+=", "torch", ".", "mul", "(", "segemb2", ",", "seg2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pred3", "+=", "torch", ".", "mul", "(", "segemb3", ",", "seg3", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pred4", "+=", "torch", ".", "mul", "(", "segemb4", ",", "seg4", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# concat results from multiple resolutions", "\n", "results", "=", "[", "pred2", ",", "pred3", ",", "pred4", "]", "\n", "\n", "return", "[", "feats", ",", "results", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.encoder.ConvEncoder.__init__": [[14, 36], ["base_network.BaseNetwork.__init__", "int", "normalization.get_nonspade_norm_layer", "normalization.get_nonspade_norm_layer.", "normalization.get_nonspade_norm_layer.", "normalization.get_nonspade_norm_layer.", "normalization.get_nonspade_norm_layer.", "normalization.get_nonspade_norm_layer.", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.ceil", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.get_nonspade_norm_layer.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.get_nonspade_norm_layer"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "3", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "ndf", "=", "opt", ".", "ngf", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_E", ")", "\n", "self", ".", "layer1", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 128", "\n", "self", ".", "layer2", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "1", ",", "ndf", "*", "2", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 64", "\n", "self", ".", "layer3", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 32", "\n", "self", ".", "layer4", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 16", "\n", "self", ".", "layer5", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 8", "\n", "if", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "self", ".", "layer6", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "opt", ")", "# 4", "\n", "\n", "", "self", ".", "so", "=", "s0", "=", "4", "\n", "self", ".", "fc_mu", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "self", ".", "fc_var", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "\n", "self", ".", "actvn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.encoder.ConvEncoder.forward": [[37, 55], ["encoder.ConvEncoder.layer1", "encoder.ConvEncoder.layer2", "encoder.ConvEncoder.layer3", "encoder.ConvEncoder.layer4", "encoder.ConvEncoder.layer5", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.view", "encoder.ConvEncoder.fc_mu", "encoder.ConvEncoder.fc_var", "torch.interpolate", "torch.interpolate", "torch.interpolate", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.layer6", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.actvn"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "2", ")", "!=", "256", "or", "x", ".", "size", "(", "3", ")", "!=", "256", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer5", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "if", "self", ".", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "actvn", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "fc_mu", "(", "x", ")", "\n", "logvar", "=", "self", ".", "fc_var", "(", "x", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.SPADE.__init__": [[53, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "guide_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", ")", "[", "2", "]", "!=", "guide", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "guide", "=", "F", ".", "interpolate", "(", "guide", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "", "actv", "=", "self", ".", "shared", "(", "guide", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "affine_transformation", "(", "x", ",", "gamma", ",", "beta", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.SPADE.forward": [[73, 89], ["normalization.SPADE.param_free_norm", "normalization.SPADE.mlp_shared", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x.size", "torch.interpolate.size", "x.size"], "methods", ["None"], ["\n", "", "", "class", "GuideCorrelation", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nc", ",", "guide_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ks", "=", "3", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "guide_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.get_nonspade_norm_layer": [[10, 43], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "torch", "getattr", "delattr", "torch.register_parameter", "torch.InstanceNorm2d", "len", "normalization.get_nonspade_norm_layer.get_out_channel"], "function", ["None"], ["## |norm_nc|: the #channels of the normalized activations, hence the output dim of SPADE", "\n", "## |label_nc|: the #channels of the input semantic map, hence the input dim of SPADE", "\n", "class", "SPADE", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "norm_nc", ",", "label_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ks", "=", "3", "\n", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "if", "x", ".", "size", "(", ")", "[", "2", "]", "!=", "segmap", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "", "actv", "=", "self", ".", "shared", "(", "segmap", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.DepthsepCCBlock.__init__": [[21, 65], ["torch.Module.__init__", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "condconv.DepthConv", "BNFunc", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BNFunc", "condconv.DepthConv", "BNFunc", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch", "torch", "torch", "torch", "normalization.SPADE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "semantic_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "\n", "# layers to generate conditional convolution weights", "\n", "nhidden", "=", "128", "\n", "self", ".", "weight_channels", "=", "fmiddle", "*", "9", "\n", "self", ".", "gen_weights1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "semantic_nc", ",", "nhidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nhidden", ",", "fin", "*", "9", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "gen_weights2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "semantic_nc", ",", "nhidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nhidden", ",", "fout", "*", "9", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "\n", "self", ".", "gen_se_weights1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "semantic_nc", ",", "nhidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nhidden", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "gen_se_weights2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "semantic_nc", ",", "nhidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nhidden", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "# create conv layers", "\n", "if", "opt", ".", "mpdist", ":", "\n", "            ", "BNFunc", "=", "nn", ".", "SyncBatchNorm", "\n", "", "else", ":", "\n", "            ", "BNFunc", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "conv_0", "=", "DepthConv", "(", "fin", ",", "opt", ")", "\n", "self", ".", "norm_0", "=", "BNFunc", "(", "fmiddle", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "norm_1", "=", "BNFunc", "(", "fin", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv_2", "=", "DepthConv", "(", "fmiddle", ",", "opt", ")", "\n", "self", ".", "norm_2", "=", "BNFunc", "(", "fmiddle", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "norm_s", "=", "SPADE", "(", "fin", ",", "semantic_nc", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.DepthsepCCBlock.forward": [[66, 91], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "architecture.DepthsepCCBlock.gen_weights1", "architecture.DepthsepCCBlock.gen_weights2", "architecture.DepthsepCCBlock.gen_se_weights1", "architecture.DepthsepCCBlock.gen_se_weights2", "architecture.DepthsepCCBlock.shortcut", "architecture.DepthsepCCBlock.norm_1", "architecture.DepthsepCCBlock.conv_0", "architecture.DepthsepCCBlock.conv_1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "architecture.DepthsepCCBlock.actvn", "architecture.DepthsepCCBlock.norm_2", "architecture.DepthsepCCBlock.conv_2", "architecture.DepthsepCCBlock.conv_3", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "architecture.DepthsepCCBlock.actvn", "x.size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "\n", "# predict weight for conditional convolution", "\n", "        ", "segmap", "=", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "conv_weights1", "=", "self", ".", "gen_weights1", "(", "segmap", ")", "\n", "conv_weights2", "=", "self", ".", "gen_weights2", "(", "segmap", ")", "\n", "se_weights1", "=", "self", ".", "gen_se_weights1", "(", "segmap", ")", "\n", "se_weights2", "=", "self", ".", "gen_se_weights2", "(", "segmap", ")", "\n", "\n", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "segmap", ")", "\n", "\n", "dx", "=", "self", ".", "norm_1", "(", "x", ")", "\n", "dx", "=", "self", ".", "conv_0", "(", "dx", ",", "conv_weights1", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "dx", ")", "\n", "dx", "=", "torch", ".", "mul", "(", "dx", ",", "se_weights1", ")", "\n", "dx", "=", "self", ".", "actvn", "(", "dx", ")", "\n", "dx", "=", "self", ".", "norm_2", "(", "dx", ")", "\n", "dx", "=", "self", ".", "conv_2", "(", "dx", ",", "conv_weights2", ")", "\n", "dx", "=", "self", ".", "conv_3", "(", "dx", ")", "\n", "dx", "=", "torch", ".", "mul", "(", "dx", ",", "se_weights2", ")", "\n", "dx", "=", "self", ".", "actvn", "(", "dx", ")", "\n", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.DepthsepCCBlock.shortcut": [[92, 98], ["architecture.DepthsepCCBlock.conv_s", "architecture.DepthsepCCBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.DepthsepCCBlock.actvn": [[99, 101], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.__init__": [[110, 136], ["torch.Module.__init__", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "opt.norm_G.replace", "normalization.SPADE", "normalization.SPADE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "normalization.SPADE", "torch", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "semantic_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "\n", "\n", "# create conv layers", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "\n", "# define normalization layers", "\n", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "self", ".", "norm_0", "=", "SPADE", "(", "fin", ",", "semantic_nc", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "fmiddle", ",", "semantic_nc", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "fin", ",", "semantic_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.forward": [[139, 148], ["architecture.SPADEResnetBlock.shortcut", "architecture.SPADEResnetBlock.conv_0", "architecture.SPADEResnetBlock.conv_1", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.norm_0", "architecture.SPADEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg", ")", "\n", "\n", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg", ")", ")", ")", "\n", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.shortcut": [[149, 155], ["architecture.SPADEResnetBlock.conv_s", "architecture.SPADEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.SPADEResnetBlock.actvn": [[156, 158], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.VGG19.__init__": [[162, 187], ["super().__init__", "torchvision.models.vgg19", "torchvision.models.vgg19.load_state_dict", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "architecture.VGG19.slice1.add_module", "architecture.VGG19.slice2.add_module", "architecture.VGG19.slice3.add_module", "architecture.VGG19.slice4.add_module", "architecture.VGG19.slice5.add_module", "architecture.VGG19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "local_pretrained_path", "=", "'checkpoints/vgg19.pth'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#vgg_pretrained_features = torchvision.models.vgg19(pretrained=True).features", "\n", "model", "=", "torchvision", ".", "models", ".", "vgg19", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "local_pretrained_path", ")", ")", "\n", "vgg_pretrained_features", "=", "model", ".", "features", "\n", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.architecture.VGG19.forward": [[188, 196], ["architecture.VGG19.slice1", "architecture.VGG19.slice2", "architecture.VGG19.slice3", "architecture.VGG19.slice4", "architecture.VGG19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.__init__": [[12, 33], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_target_tensor": [[34, 45], ["loss.GANLoss.real_label_tensor.expand_as", "loss.GANLoss.fake_label_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_tensor.requires_grad_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.fake_label_tensor.requires_grad_", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_zero_tensor": [[46, 51], ["loss.GANLoss.zero_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.zero_tensor.requires_grad_", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.loss": [[52, 79], ["F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "input.size", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "batchsize", "=", "input", ".", "size", "(", "0", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.__call__": [[80, 95], ["isinstance", "loss.GANLoss.loss", "isinstance", "loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "loss.GANLoss.size", "loss.GANLoss.view", "len", "loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.loss", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "## computing loss is a bit complicated because |input| may not be", "\n", "## a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.VGGLoss.__init__": [[99, 107], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.networks.architecture.VGG19().cuda", "models.networks.architecture.VGG19().cuda", "models.networks.architecture.VGG19", "models.networks.architecture.VGG19"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.VGGLoss.forward": [[108, 114], ["range", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "len", "loss.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.loss.KLDLoss.forward": [[118, 120], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.generator.CondConvGenerator.__init__": [[16, 79], ["base_network.BaseNetwork.__init__", "generator.CondConvGenerator.compute_latent_vector_size", "normalization.get_nonspade_norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "architecture.DepthsepCCBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.generator.CondConvGenerator.compute_latent_vector_size", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.normalization.get_nonspade_norm_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "opt", ".", "dataset_mode", "==", "'cityscapes'", ":", "\n", "            ", "self", ".", "num_upsampling_layers", "=", "'more'", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_upsampling_layers", "=", "'normal'", "\n", "\n", "", "nf", "=", "opt", ".", "ngf", "\n", "\n", "self", ".", "sw", ",", "self", ".", "sh", "=", "self", ".", "compute_latent_vector_size", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "use_vae", ":", "\n", "# In case of VAE, we will sample from random z vector", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "opt", ".", "z_dim", ",", "16", "*", "nf", "*", "self", ".", "sw", "*", "self", ".", "sh", ")", "\n", "", "else", ":", "\n", "# Otherwise, we make the network deterministic by starting with", "\n", "# downsampled segmentation map instead of random z", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "self", ".", "opt", ".", "semantic_nc", ",", "16", "*", "nf", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# global-context-aware weight prediction network", "\n", "", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_G", ")", "\n", "self", ".", "labelenc1", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "self", ".", "opt", ".", "semantic_nc", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 256", "\n", "self", ".", "labelenc2", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 128", "\n", "self", ".", "labelenc3", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 64", "\n", "self", ".", "labelenc4", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 32", "\n", "self", ".", "labelenc5", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 16", "\n", "self", ".", "labelenc6", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 8", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "self", ".", "labelenc7", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "# 4", "\n", "\n", "# lateral for fpn", "\n", "", "self", ".", "labellat1", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "#16", "\n", "self", ".", "labellat2", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "#32", "\n", "self", ".", "labellat3", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "#64", "\n", "self", ".", "labellat4", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "#128", "\n", "self", ".", "labellat5", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "#256", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "self", ".", "labellat6", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "\n", "", "self", ".", "labeldec1", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "labeldec2", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "labeldec3", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "labeldec4", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "self", ".", "labeldec5", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "self", ".", "labeldec6", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "padding", "=", "1", ")", ",", "opt", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ")", "\n", "\n", "# image generator", "\n", "", "self", ".", "head_0", "=", "DepthsepCCBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "self", ".", "G_middle_0", "=", "DepthsepCCBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "self", ".", "G_middle_1", "=", "DepthsepCCBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "\n", "self", ".", "up_0", "=", "DepthsepCCBlock", "(", "16", "*", "nf", ",", "8", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "self", ".", "up_1", "=", "DepthsepCCBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "self", ".", "up_2", "=", "DepthsepCCBlock", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "self", ".", "up_3", "=", "DepthsepCCBlock", "(", "2", "*", "nf", ",", "1", "*", "nf", ",", "opt", ",", "opt", ".", "semantic_nc", "+", "nf", ")", "\n", "\n", "final_nc", "=", "nf", "\n", "\n", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "final_nc", ",", "3", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.generator.CondConvGenerator.compute_latent_vector_size": [[80, 90], ["round"], "methods", ["None"], ["", "def", "compute_latent_vector_size", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "num_up_layers", "=", "6", "\n", "", "else", ":", "\n", "            ", "num_up_layers", "=", "5", "\n", "\n", "", "sw", "=", "opt", ".", "crop_size", "//", "(", "2", "**", "num_up_layers", ")", "\n", "sh", "=", "round", "(", "sw", "/", "opt", ".", "aspect_ratio", ")", "\n", "\n", "return", "sw", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.generator.CondConvGenerator.forward": [[91, 180], ["generator.CondConvGenerator.labelenc1", "generator.CondConvGenerator.labelenc2", "generator.CondConvGenerator.labelenc3", "generator.CondConvGenerator.labelenc4", "generator.CondConvGenerator.labelenc5", "generator.CondConvGenerator.labelenc6", "generator.CondConvGenerator.head_0", "generator.CondConvGenerator.up", "generator.CondConvGenerator.G_middle_0", "generator.CondConvGenerator.up", "generator.CondConvGenerator.up", "generator.CondConvGenerator.up", "generator.CondConvGenerator.up", "generator.CondConvGenerator.conv_img", "torch.tanh", "torch.tanh", "torch.tanh", "generator.CondConvGenerator.fc", "generator.CondConvGenerator.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "generator.CondConvGenerator.fc", "generator.CondConvGenerator.labelenc7", "generator.CondConvGenerator.labeldec1", "generator.CondConvGenerator.labeldec2", "generator.CondConvGenerator.labeldec3", "generator.CondConvGenerator.labeldec4", "generator.CondConvGenerator.labeldec5", "generator.CondConvGenerator.labeldec6", "generator.CondConvGenerator.labeldec1", "generator.CondConvGenerator.labeldec2", "generator.CondConvGenerator.labeldec3", "generator.CondConvGenerator.labeldec4", "generator.CondConvGenerator.labeldec5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.CondConvGenerator.up", "generator.CondConvGenerator.G_middle_1", "generator.CondConvGenerator.G_middle_1", "generator.CondConvGenerator.up_0", "generator.CondConvGenerator.up_0", "generator.CondConvGenerator.up_1", "generator.CondConvGenerator.up_1", "generator.CondConvGenerator.up_2", "generator.CondConvGenerator.up_2", "generator.CondConvGenerator.up_3", "generator.CondConvGenerator.up_3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat1", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat2", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat3", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat4", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat5", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat6", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat1", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat2", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat3", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat4", "generator.CondConvGenerator.up", "generator.CondConvGenerator.labellat5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "input.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size", "generator.CondConvGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", "=", "None", ")", ":", "\n", "        ", "seg", "=", "input", "\n", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "# we sample z from unit normal and reshape the tensor", "\n", "            ", "if", "z", "is", "None", ":", "\n", "                ", "z", "=", "torch", ".", "randn", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "z_dim", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "input", ".", "get_device", "(", ")", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "z", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "opt", ".", "ngf", ",", "self", ".", "sh", ",", "self", ".", "sw", ")", "\n", "", "else", ":", "\n", "# we downsample segmap and run convolution", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "(", "self", ".", "sh", ",", "self", ".", "sw", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "# encode segmentation labels", "\n", "", "seg1", "=", "self", ".", "labelenc1", "(", "seg", ")", "# 256", "\n", "seg2", "=", "self", ".", "labelenc2", "(", "seg1", ")", "# 128", "\n", "seg3", "=", "self", ".", "labelenc3", "(", "seg2", ")", "# 64", "\n", "seg4", "=", "self", ".", "labelenc4", "(", "seg3", ")", "# 32", "\n", "seg5", "=", "self", ".", "labelenc5", "(", "seg4", ")", "# 16", "\n", "seg6", "=", "self", ".", "labelenc6", "(", "seg5", ")", "# 8", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "seg7", "=", "self", ".", "labelenc7", "(", "seg6", ")", "\n", "segout1", "=", "seg7", "\n", "segout2", "=", "self", ".", "up", "(", "segout1", ")", "+", "self", ".", "labellat1", "(", "seg6", ")", "\n", "segout2", "=", "self", ".", "labeldec1", "(", "segout2", ")", "\n", "segout3", "=", "self", ".", "up", "(", "segout2", ")", "+", "self", ".", "labellat2", "(", "seg5", ")", "\n", "segout3", "=", "self", ".", "labeldec2", "(", "segout3", ")", "\n", "segout4", "=", "self", ".", "up", "(", "segout3", ")", "+", "self", ".", "labellat3", "(", "seg4", ")", "\n", "segout4", "=", "self", ".", "labeldec3", "(", "segout4", ")", "\n", "segout5", "=", "self", ".", "up", "(", "segout4", ")", "+", "self", ".", "labellat4", "(", "seg3", ")", "\n", "segout5", "=", "self", ".", "labeldec4", "(", "segout5", ")", "\n", "segout6", "=", "self", ".", "up", "(", "segout5", ")", "+", "self", ".", "labellat5", "(", "seg2", ")", "\n", "segout6", "=", "self", ".", "labeldec5", "(", "segout6", ")", "\n", "segout7", "=", "self", ".", "up", "(", "segout6", ")", "+", "self", ".", "labellat6", "(", "seg1", ")", "\n", "segout7", "=", "self", ".", "labeldec6", "(", "segout7", ")", "\n", "", "else", ":", "\n", "            ", "segout1", "=", "seg6", "\n", "segout2", "=", "self", ".", "up", "(", "segout1", ")", "+", "self", ".", "labellat1", "(", "seg5", ")", "\n", "segout2", "=", "self", ".", "labeldec1", "(", "segout2", ")", "\n", "segout3", "=", "self", ".", "up", "(", "segout2", ")", "+", "self", ".", "labellat2", "(", "seg4", ")", "\n", "segout3", "=", "self", ".", "labeldec2", "(", "segout3", ")", "\n", "segout4", "=", "self", ".", "up", "(", "segout3", ")", "+", "self", ".", "labellat3", "(", "seg3", ")", "\n", "segout4", "=", "self", ".", "labeldec3", "(", "segout4", ")", "\n", "segout5", "=", "self", ".", "up", "(", "segout4", ")", "+", "self", ".", "labellat4", "(", "seg2", ")", "\n", "segout5", "=", "self", ".", "labeldec4", "(", "segout5", ")", "\n", "segout6", "=", "self", ".", "up", "(", "segout5", ")", "+", "self", ".", "labellat5", "(", "seg1", ")", "\n", "segout6", "=", "self", ".", "labeldec5", "(", "segout6", ")", "\n", "\n", "", "x", "=", "self", ".", "head_0", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout1", ")", ",", "dim", "=", "1", ")", ")", "# 8", "\n", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_middle_0", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout2", ")", ",", "dim", "=", "1", ")", ")", "# 16", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout3", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout2", ")", ",", "dim", "=", "1", ")", ")", "# 16", "\n", "\n", "", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "x", "=", "self", ".", "up_0", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout4", ")", ",", "dim", "=", "1", ")", ")", "# 32", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "up_0", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout3", ")", ",", "dim", "=", "1", ")", ")", "# 32", "\n", "\n", "", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "x", "=", "self", ".", "up_1", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout5", ")", ",", "dim", "=", "1", ")", ")", "# 64", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "up_1", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout4", ")", ",", "dim", "=", "1", ")", ")", "# 64", "\n", "\n", "", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "x", "=", "self", ".", "up_2", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout6", ")", ",", "dim", "=", "1", ")", ")", "# 128", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "up_2", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout5", ")", ",", "dim", "=", "1", ")", ")", "# 128", "\n", "\n", "", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "if", "self", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "x", "=", "self", ".", "up_3", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout7", ")", ",", "dim", "=", "1", ")", ")", "# 256", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "up_3", "(", "x", ",", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", ",", "segout6", ")", ",", "dim", "=", "1", ")", ")", "# 256", "\n", "\n", "\n", "", "x", "=", "self", ".", "conv_img", "(", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.condconv.DepthConv.__init__": [[8, 20], ["torch.Module.__init__", "torch.Unfold", "torch.Unfold", "torch.Unfold", "BNFunc"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fmiddle", ",", "opt", ",", "kw", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kw", "=", "kw", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "self", ".", "kw", ",", "self", ".", "kw", ")", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "if", "opt", ".", "mpdist", ":", "\n", "            ", "BNFunc", "=", "nn", ".", "SyncBatchNorm", "\n", "", "else", ":", "\n", "            ", "BNFunc", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "norm_layer", "=", "BNFunc", "(", "fmiddle", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.condconv.DepthConv.forward": [[21, 33], ["torch.mul().sum().view.size", "torch.mul().sum().view.size", "torch.mul().sum().view.size", "conv_weights.view.view.view", "condconv.DepthConv.unfold().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "torch.mul().sum().view", "condconv.DepthConv.unfold", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "conv_weights", ")", ":", "\n", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "conv_weights", "=", "conv_weights", ".", "view", "(", "N", "*", "C", ",", "self", ".", "kw", "*", "self", ".", "kw", ",", "H", "//", "self", ".", "stride", ",", "W", "//", "self", ".", "stride", ")", "\n", "#conv_weights = nn.functional.softmax(conv_weights, dim=1)", "\n", "x", "=", "self", ".", "unfold", "(", "x", ")", ".", "view", "(", "N", "*", "C", ",", "self", ".", "kw", "*", "self", ".", "kw", ",", "H", "//", "self", ".", "stride", ",", "W", "//", "self", ".", "stride", ")", "\n", "x", "=", "torch", ".", "mul", "(", "conv_weights", ",", "x", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "view", "(", "N", ",", "C", ",", "H", "//", "self", ".", "stride", ",", "W", "//", "self", ".", "stride", ")", "\n", "\n", "#x = self.norm_layer(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.modify_commandline_options": [[9, 12], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.print_network": [[13, 19], ["isinstance", "base_network.BaseNetwork.parameters", "param.numel"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "#print('Network [%s] was created. Total number of parameters: %.1f million. '", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.init_weights": [[23, 55], ["base_network.BaseNetwork.apply", "base_network.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.networks.base_network.BaseNetwork.init_weights"], ["", "", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'none'", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'init_weights'", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.test_options.TestOptions.initialize": [[5, 30], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "float"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'scale_width_and_crop'", ",", "crop_size", "=", "256", ",", "load_size", "=", "256", ",", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "serial_batches", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "no_flip", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "phase", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.train_options.TrainOptions.initialize": [[4, 38], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for training", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'# of iter at starting learning rate. This is NOT the total #epochs. Totla #epochs is niter + niter_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_vgg'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for vgg loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'fpse'", ",", "help", "=", "'discriminator mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD_subarch'", ",", "type", "=", "str", ",", "default", "=", "'n_layer'", ",", "help", "=", "'(n_layer|dyconv_n_layer|half_dyconv_n_layer)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_TTUR'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Not use TTUR training scheme'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_kld'", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.__init__": [[13, 15], ["None"], "methods", ["None"], ["        ", "self", ".", "initialized", "=", "False", "\n", "\n", "", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize": [[16, 71], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["# experiment specifics", "\n", "        ", "parser", ".", "add_argument", "(", "'--mpdist'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use distributed multiprocessing'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "type", "=", "str", ",", "default", "=", "'tcp://10.1.72.171:8000'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_servers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--idx_server'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ngpus_per_node'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of gpus for each server'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'CC-FPSE_coco'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pix'", ",", "help", "=", "'which model to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralsync_batch'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_E'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "\n", "# input/output sizes", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess_mode'", ",", "type", "=", "str", ",", "default", "=", "'scale_width_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time.'", ",", "choices", "=", "(", "\"resize_and_crop\"", ",", "\"crop\"", ",", "\"scale_width\"", ",", "\"scale_width_and_crop\"", ",", "\"scale_shortside\"", ",", "\"scale_shortside_and_crop\"", ",", "\"fixed\"", ",", "\"none\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'Scale images to this size. The final image will be cropped to --crop_size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Crop to the width of crop_size (after initially scaling the images to load_size.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The ratio width/height. The final height of the load image will be crop_size/aspect_ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "182", ",", "help", "=", "'# of input label classes without unknown class. If you have unknown class as class label, specify --contain_dopntcare_label.'", ")", "\n", "parser", ".", "add_argument", "(", "'--contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if the label map contains dontcare label (dontcare=255)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/cityscapes/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'coco'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "sys", ".", "maxsize", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_from_opt_file'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load the options from checkpoints and use that as default'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_write'", ",", "action", "=", "'store_true'", ",", "help", "=", "'saves the current filelist into a text file, so that it loads faster'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_read'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reads from the file list cache'", ")", "\n", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'display window size'", ")", "\n", "\n", "# for generator", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'condconv'", ",", "help", "=", "'model to use for netG'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_variance'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'variance of the initialization distribution'", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"dimension of the latent z vector\"", ")", "\n", "\n", "# for instance-wise features", "\n", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_vae'", ",", "action", "=", "'store_true'", ",", "help", "=", "'enable training with an image encoder.'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n", "", "def", "gather_options", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.gather_options": [[72, 102], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize", "base_options.BaseOptions.update_options_from_file"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.update_options_from_file"], ["# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_mode", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_mode", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# if there is opt_file, load it.", "\n", "# The previous default options will be overwritten", "\n", "if", "opt", ".", "load_from_opt_file", ":", "\n", "            ", "parser", "=", "self", ".", "update_options_from_file", "(", "parser", ",", "opt", ")", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "opt", "\n", "\n", "", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.print_options": [[103, 114], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "", "def", "option_file_path", "(", "self", ",", "opt", ",", "makedir", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.option_file_path": [[115, 121], ["os.path.join", "os.path.join", "util.util.util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.util.mkdirs"], ["        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "makedir", ":", "\n", "            ", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt'", ")", "\n", "return", "file_name", "\n", "\n", "", "def", "save_options", "(", "self", ",", "opt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.save_options": [[122, 134], ["base_options.BaseOptions.option_file_path", "open", "sorted", "open", "pickle.dump", "vars().items", "base_options.BaseOptions.parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.option_file_path", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_io.ChannelLoaderFileCollection.write"], ["        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                    ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "\n", "", "", "with", "open", "(", "file_name", "+", "'.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "\n", "\n", "", "", "def", "update_options_from_file", "(", "self", ",", "parser", ",", "opt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.update_options_from_file": [[135, 142], ["base_options.BaseOptions.load_options", "sorted", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.load_options"], ["        ", "new_opt", "=", "self", ".", "load_options", "(", "opt", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "                ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n", "", "def", "load_options", "(", "self", ",", "opt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.load_options": [[143, 147], ["base_options.BaseOptions.option_file_path", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.option_file_path", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load"], ["        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "False", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "return", "new_opt", "\n", "\n", "", "def", "parse", "(", "self", ",", "save", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.parse": [[148, 179], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.save_options"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.save_options"], ["\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "#self.print_options(opt)", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "save_options", "(", "opt", ")", "\n", "\n", "# Set semantic_nc based on the option.", "\n", "# This will be convenient in many places", "\n", "", "opt", ".", "semantic_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "+", "(", "0", "if", "opt", ".", "no_instance", "else", "1", ")", "\n", "\n", "# set gpu ids", "\n", "#str_ids = opt.gpu_ids.split(',')", "\n", "#opt.gpu_ids = []", "\n", "#for str_id in str_ids:", "\n", "#    id = int(str_id)", "\n", "#    if id >= 0:", "\n", "#        opt.gpu_ids.append(id)", "\n", "#if len(opt.gpu_ids) > 0 and not opt.mpdist:", "\n", "#    torch.cuda.set_device(opt.gpu_ids[0])", "\n", "\n", "#assert len(opt.gpu_ids) == 0 or opt.batchSize % len(opt.gpu_ids) == 0, \\", "\n", "#    \"Batch size %d is wrong. It must be a multiple of # GPUs %d.\" \\", "\n", "#    % (opt.batchSize, len(opt.gpu_ids))", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.config.assert_and_infer_cfg": [[86, 123], ["hasattr", "cfg.immutable", "cfg.immutable", "Exception", "int", "args.strict_bdr_cls.split"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable"], ["def", "assert_and_infer_cfg", "(", "args", ",", "make_immutable", "=", "True", ",", "train_mode", "=", "True", ")", ":", "\n", "    ", "\"\"\"Call this function in your script after you have finished setting all cfg\n    values that are necessary (e.g., merging a config from a file, merging\n    command line config options, etc.). By default, this function will also\n    mark the global cfg as immutable to prevent changing the global cfg settings\n    during script execution (which can lead to hard to debug errors or code\n    that's harder to understand than is necessary).\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "args", ",", "'syncbn'", ")", "and", "args", ".", "syncbn", ":", "\n", "        ", "if", "args", ".", "apex", ":", "\n", "            ", "import", "apex", "\n", "__C", ".", "MODEL", ".", "BN", "=", "'apex-syncnorm'", "\n", "__C", ".", "MODEL", ".", "BNFUNC", "=", "apex", ".", "parallel", ".", "SyncBatchNorm", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'No Support for SyncBN without Apex'", ")", "\n", "", "", "else", ":", "\n", "        ", "__C", ".", "MODEL", ".", "BNFUNC", "=", "torch", ".", "nn", ".", "BatchNorm2d", "\n", "#print('Using regular batch norm')", "\n", "\n", "", "if", "not", "train_mode", ":", "\n", "        ", "cfg", ".", "immutable", "(", "True", ")", "\n", "return", "\n", "", "if", "args", ".", "class_uniform_pct", ":", "\n", "        ", "cfg", ".", "CLASS_UNIFORM_PCT", "=", "args", ".", "class_uniform_pct", "\n", "\n", "", "if", "args", ".", "batch_weighting", ":", "\n", "        ", "__C", ".", "BATCH_WEIGHTING", "=", "True", "\n", "\n", "", "if", "args", ".", "jointwtborder", ":", "\n", "        ", "if", "args", ".", "strict_bdr_cls", "!=", "''", ":", "\n", "            ", "__C", ".", "STRICTBORDERCLASS", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "strict_bdr_cls", ".", "split", "(", "\",\"", ")", "]", "\n", "", "if", "args", ".", "rlx_off_epoch", ">", "-", "1", ":", "\n", "            ", "__C", ".", "REDUCE_BORDER_EPOCH", "=", "args", ".", "rlx_off_epoch", "\n", "\n", "", "", "if", "make_immutable", ":", "\n", "        ", "cfg", ".", "immutable", "(", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.__init__": [[389, 411], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "metrics", ",", "write_image", ",", "dataset_cls", ",", "inference_mode", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'rgb'", ")", "\n", "self", ".", "pred_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'pred'", ")", "\n", "self", ".", "diff_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'diff'", ")", "\n", "self", ".", "compose_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'compose'", ")", "\n", "self", ".", "metrics", "=", "metrics", "\n", "\n", "self", ".", "write_image", "=", "write_image", "\n", "self", ".", "dataset_cls", "=", "dataset_cls", "\n", "self", ".", "inference_mode", "=", "inference_mode", "\n", "self", ".", "mapping", "=", "{", "}", "\n", "os", ".", "makedirs", "(", "self", ".", "rgb_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "pred_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "diff_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "compose_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "self", ".", "hist", "=", "np", ".", "zeros", "(", "(", "self", ".", "dataset_cls", ".", "num_classes", ",", "\n", "self", ".", "dataset_cls", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hist", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax": [[412, 416], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "# only difference", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.inf": [[417, 478], ["torchvision.ToPILImage", "inference", "torchvision.ToPILImage.", "torchvision.ToPILImage.", "numpy.mean", "numpy.argmax", "utils.misc.fast_hist", "round", "pbar.set_description", "eval.RunEval.dataset_cls.colorize_mask", "eval.RunEval.save", "PIL.Image.blend", "PIL.Image.blend.save", "numpy.zeros_like", "eval.RunEval.dataset_cls.id_to_trainid.items", "cv2.imwrite", "numpy.concatenate", "numpy.argmax.flatten", "gt[].cpu().numpy.cpu().numpy().flatten", "transforms.ToPILImage.convert", "eval.RunEval.convert", "gt[].cpu().numpy", "PIL.Image.fromarray", "PIL.ImageChops.lighter().save", "numpy.nanmean", "str", "gt[].cpu().numpy.cpu().numpy", "utils.misc.per_class_iu", "gt[].cpu", "diff.astype", "PIL.ImageChops.lighter", "numpy.where", "PIL.ImageOps.invert().convert", "gt[].cpu().numpy.cpu", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.fast_hist", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.visualization.colorize_mask", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.road_anomaly_benchmark.jupyter_show_image.imwrite", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.html.HTML.save", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.per_class_iu"], ["", "def", "inf", "(", "self", ",", "imgs", ",", "img_names", ",", "gt", ",", "inference", ",", "net", ",", "scales", ",", "pbar", ",", "base_img", ")", ":", "\n", "\n", "######################################################################", "\n", "# Run inference", "\n", "######################################################################", "\n", "\n", "        ", "self", ".", "img_name", "=", "img_names", "[", "0", "]", "\n", "col_img_name", "=", "'{}/{}_color.png'", ".", "format", "(", "self", ".", "rgb_path", ",", "self", ".", "img_name", ")", "\n", "pred_img_name", "=", "'{}/{}.png'", ".", "format", "(", "self", ".", "pred_path", ",", "self", ".", "img_name", ")", "\n", "diff_img_name", "=", "'{}/{}_diff.png'", ".", "format", "(", "self", ".", "diff_path", ",", "self", ".", "img_name", ")", "\n", "compose_img_name", "=", "'{}/{}_compose.png'", ".", "format", "(", "self", ".", "compose_path", ",", "self", ".", "img_name", ")", "\n", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "img", "=", "imgs", "\n", "pool_base_img", "=", "to_pil", "(", "base_img", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "\n", "            ", "img", "=", "to_pil", "(", "imgs", "[", "0", "]", ")", "\n", "", "prediction_pre_argmax_collection", "=", "inference", "(", "net", ",", "img", ",", "scales", ")", "\n", "\n", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "prediction", "=", "prediction_pre_argmax_collection", "\n", "prediction", "=", "np", ".", "concatenate", "(", "prediction", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "prediction_pre_argmax", "=", "np", ".", "mean", "(", "prediction_pre_argmax_collection", ",", "axis", "=", "0", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "prediction_pre_argmax", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "metrics", ":", "\n", "            ", "self", ".", "hist", "+=", "fast_hist", "(", "prediction", ".", "flatten", "(", ")", ",", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", "self", ".", "dataset_cls", ".", "num_classes", ")", "\n", "iou", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_iu", "(", "self", ".", "hist", ")", ")", "*", "100", ",", "2", ")", "\n", "pbar", ".", "set_description", "(", "\"Mean IOU: %s\"", "%", "(", "str", "(", "iou", ")", ")", ")", "\n", "\n", "######################################################################", "\n", "# Dump Images", "\n", "######################################################################", "\n", "", "if", "self", ".", "write_image", ":", "\n", "\n", "            ", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "                ", "img", "=", "pool_base_img", "\n", "\n", "", "colorized", "=", "self", ".", "dataset_cls", ".", "colorize_mask", "(", "prediction", ")", "\n", "colorized", ".", "save", "(", "col_img_name", ")", "\n", "blend", "=", "Image", ".", "blend", "(", "img", ".", "convert", "(", "\"RGBA\"", ")", ",", "colorized", ".", "convert", "(", "\"RGBA\"", ")", ",", "0.5", ")", "\n", "blend", ".", "save", "(", "compose_img_name", ")", "\n", "\n", "if", "gt", "is", "not", "None", ":", "\n", "                ", "gt", "=", "gt", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# only write diff image if gt is valid", "\n", "diff", "=", "(", "prediction", "!=", "gt", ")", "\n", "diff", "[", "gt", "==", "255", "]", "=", "0", "\n", "diffimg", "=", "Image", ".", "fromarray", "(", "diff", ".", "astype", "(", "'uint8'", ")", "*", "255", ")", "\n", "PIL", ".", "ImageChops", ".", "lighter", "(", "\n", "blend", ",", "\n", "PIL", ".", "ImageOps", ".", "invert", "(", "diffimg", ")", ".", "convert", "(", "\"RGBA\"", ")", "\n", ")", ".", "save", "(", "diff_img_name", ")", "\n", "\n", "", "label_out", "=", "np", ".", "zeros_like", "(", "prediction", ")", "\n", "for", "label_id", ",", "train_id", "in", "self", ".", "dataset_cls", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_out", "[", "np", ".", "where", "(", "prediction", "==", "train_id", ")", "]", "=", "label_id", "\n", "", "cv2", ".", "imwrite", "(", "pred_img_name", ",", "label_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.final_dump": [[479, 485], ["utils.misc.evaluate_eval_for_inference"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.evaluate_eval_for_inference"], ["", "", "def", "final_dump", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Dump Final metrics on completion of evaluation\n        \"\"\"", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "evaluate_eval_for_inference", "(", "self", ".", "hist", ",", "args", ".", "dataset_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.sliding_window_cropping": [[85, 133], ["range", "int", "int", "len", "math.ceil", "int", "int", "range", "range", "math.ceil", "math.ceil", "int", "int", "min", "min", "int", "int", "[].append", "[].unsqueeze", "torch.cat", "[].unsqueeze"], "function", ["None"], ["def", "sliding_window_cropping", "(", "data", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Sliding Window Cropping\n    Take the image and create a mapping and multiple crops\n    \"\"\"", "\n", "sliding_window_cropping", "=", "None", "\n", "mapping", "=", "{", "}", "\n", "crop_ctr", "=", "0", "\n", "if", "scale", "<", "1.0", ":", "\n", "        ", "scale", "=", "1.0", "\n", "", "tile_size", "=", "(", "int", "(", "args", ".", "crop_size", "*", "scale", ")", ",", "int", "(", "args", ".", "crop_size", "*", "scale", ")", ")", "\n", "\n", "overlap", "=", "args", ".", "sliding_overlap", "\n", "\n", "for", "img_ctr", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "data", "[", "img_ctr", "]", ".", "shape", "[", "1", ":", "]", "\n", "mapping", "[", "img_ctr", "]", "=", "[", "w", ",", "h", ",", "[", "]", "]", "\n", "stride", "=", "ceil", "(", "tile_size", "[", "0", "]", "*", "(", "1", "-", "overlap", ")", ")", "\n", "\n", "tile_rows", "=", "int", "(", "\n", "ceil", "(", "(", "w", "-", "tile_size", "[", "0", "]", ")", "/", "stride", ")", "+", "1", ")", "\n", "tile_cols", "=", "int", "(", "ceil", "(", "(", "h", "-", "tile_size", "[", "1", "]", ")", "/", "stride", ")", "+", "1", ")", "\n", "for", "row", "in", "range", "(", "tile_rows", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "tile_cols", ")", ":", "\n", "                ", "y1", "=", "int", "(", "col", "*", "stride", ")", "\n", "x1", "=", "int", "(", "row", "*", "stride", ")", "\n", "x2", "=", "min", "(", "x1", "+", "tile_size", "[", "1", "]", ",", "w", ")", "\n", "y2", "=", "min", "(", "y1", "+", "tile_size", "[", "0", "]", ",", "h", ")", "\n", "x1", "=", "int", "(", "x2", "-", "tile_size", "[", "1", "]", ")", "\n", "y1", "=", "int", "(", "y2", "-", "tile_size", "[", "0", "]", ")", "\n", "if", "x1", "<", "0", ":", "# for portrait the x1 underflows sometimes", "\n", "                    ", "x1", "=", "0", "\n", "", "if", "y1", "<", "0", ":", "\n", "                    ", "y1", "=", "0", "\n", "", "if", "crop_ctr", "==", "0", ":", "\n", "                    ", "sliding_window_cropping", "=", "data", "[", "img_ctr", "]", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "sliding_window_cropping", "=", "torch", ".", "cat", "(", "\n", "(", "sliding_window_cropping", ",", "\n", "data", "[", "img_ctr", "]", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "", "mapping", "[", "img_ctr", "]", "[", "2", "]", ".", "append", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "crop_ctr", "+=", "1", "\n", "\n", "", "", "", "return", "(", "mapping", ",", "sliding_window_cropping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.resize_thread": [[135, 146], ["resizequeue.put", "resizequeue.put", "cv2.resize", "cv2.resize", "numpy.fliplr"], "function", ["None"], ["", "def", "resize_thread", "(", "flip", ",", "index", ",", "array", ",", "resizequeue", ",", "origw", ",", "origh", ")", ":", "\n", "    ", "\"\"\"\n    Thread to resize the image size\n    \"\"\"", "\n", "if", "flip", ":", "\n", "        ", "resizequeue", ".", "put", "(", "(", "index", ",", "cv2", ".", "resize", "(", "np", ".", "fliplr", "(", "array", ")", ",", "\n", "(", "origw", ",", "origh", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "resizequeue", ".", "put", "(", "(", "index", ",", "cv2", ".", "resize", "(", "array", ",", "(", "origw", ",", "origh", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.reverse_mapping": [[148, 188], ["numpy.zeros", "numpy.zeros", "range", "queue.Queue", "range", "dict", "range", "que.put", "len", "np.zeros.astype", "threading.Thread", "threading.Thread.start", "t_list.append", "thread.join", "out_temp.append", "out_y.append", "queue.Queue.get"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "", "def", "reverse_mapping", "(", "i", ",", "ctr", ",", "input_img", ",", "mapping", ",", "que", ",", "flip", ",", "origw", ",", "origh", ")", ":", "\n", "    ", "\"\"\"\n    Reverse Mapping for sliding window\n    \"\"\"", "\n", "w", ",", "h", ",", "coords", "=", "mapping", "[", "i", "]", "\n", "full_probs", "=", "np", ".", "zeros", "(", "(", "args", ".", "dataset_cls", ".", "num_classes", ",", "h", ",", "w", ")", ")", "\n", "count_predictions", "=", "np", ".", "zeros", "(", "(", "args", ".", "dataset_cls", ".", "num_classes", ",", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "coords", ")", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "coords", "[", "j", "]", "\n", "count_predictions", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1", "\n", "average", "=", "input_img", "[", "ctr", "]", "\n", "if", "full_probs", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "shape", "!=", "average", ".", "shape", ":", "\n", "            ", "average", "=", "average", "[", ":", ",", ":", "y2", "-", "y1", ",", ":", "x2", "-", "x1", "]", "\n", "\n", "", "full_probs", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "average", "\n", "ctr", "=", "ctr", "+", "1", "\n", "\n", "# Accumulate and average overerlapping areas", "\n", "", "full_probs", "=", "full_probs", "/", "count_predictions", ".", "astype", "(", "np", ".", "float", ")", "\n", "out_temp", "=", "[", "]", "\n", "out_y", "=", "[", "]", "\n", "t_list", "=", "[", "]", "\n", "resizequeue", "=", "queue", ".", "Queue", "(", ")", "\n", "classes", "=", "full_probs", ".", "shape", "[", "0", "]", "\n", "for", "y_", "in", "range", "(", "classes", ")", ":", "\n", "        ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "resize_thread", ",", "args", "=", "(", "flip", ",", "y_", ",", "full_probs", "[", "y_", "]", ",", "\n", "resizequeue", ",", "origw", ",", "origh", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "thread", "in", "t_list", ":", "\n", "        ", "thread", ".", "join", "(", ")", "\n", "out_temp", ".", "append", "(", "resizequeue", ".", "get", "(", ")", ")", "\n", "\n", "", "dictionary", "=", "dict", "(", "out_temp", ")", "\n", "for", "iterator", "in", "range", "(", "classes", ")", ":", "\n", "        ", "out_y", ".", "append", "(", "dictionary", "[", "iterator", "]", ")", "\n", "\n", "", "que", ".", "put", "(", "out_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.reverse_sliding_window": [[190, 213], ["queue.Queue", "range", "final_queue.put", "len", "threading.Thread", "threading.Thread.start", "t_list.append", "item.join", "batch_return.append", "numpy.mean", "len", "queue.Queue.get"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "reverse_sliding_window", "(", "mapping", ",", "input_img", ",", "flip_list", ",", "origw", ",", "origh", ",", "final_queue", ")", ":", "\n", "    ", "\"\"\"\n    Take mapping and crops and reconstruct original image\n    \"\"\"", "\n", "\n", "batch_return", "=", "[", "]", "\n", "ctr", "=", "0", "\n", "# Loop through the maps and merge them together", "\n", "que", "=", "queue", ".", "Queue", "(", ")", "\n", "t_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "reverse_mapping", ",", "args", "=", "(", "i", ",", "ctr", ",", "input_img", ",", "mapping", ",", "que", ",", "\n", "flip_list", "[", "i", "]", ",", "origw", ",", "origh", ")", ")", "\n", "ctr", "=", "ctr", "+", "len", "(", "mapping", "[", "i", "]", "[", "2", "]", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "item", "in", "t_list", ":", "\n", "        ", "item", ".", "join", "(", ")", "\n", "batch_return", ".", "append", "(", "que", ".", "get", "(", ")", ")", "\n", "\n", "", "final_queue", ".", "put", "(", "np", ".", "mean", "(", "batch_return", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.pooled_eval": [[215, 229], ["torch.no_grad", "model", "torch.nn.AvgPool2d", "torch.nn.Upsample"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["", "def", "pooled_eval", "(", "model", ",", "image", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Perform Pooled Evaluation\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "y", "=", "model", "(", "image", ")", "\n", "if", "scale", ">", "1.0", ":", "\n", "            ", "y", "=", "[", "torch", ".", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "(", "y_", ")", "for", "y_", "in", "y", "]", "\n", "", "elif", "scale", "<", "1.0", ":", "\n", "            ", "y", "=", "[", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "(", "y_", ")", "for", "y_", "in", "y", "]", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.flip_tensor": [[231, 239], ["x.dim", "tuple", "slice", "torch.arange().long", "range", "x.dim", "torch.arange", "x.size"], "function", ["None"], ["", "def", "flip_tensor", "(", "x", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Flip Tensor along a dimension\n    \"\"\"", "\n", "dim", "=", "x", ".", "dim", "(", ")", "+", "dim", "if", "dim", "<", "0", "else", "dim", "\n", "return", "x", "[", "tuple", "(", "slice", "(", "None", ",", "None", ")", "if", "i", "!=", "dim", "\n", "else", "torch", ".", "arange", "(", "x", ".", "size", "(", "i", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.inference_pool": [[241, 269], ["range", "range", "torch.argmax().cpu().numpy", "len", "type", "type", "eval.pooled_eval", "eval.pooled_eval", "x.add_", "torch.argmax().cpu", "x.add_", "eval.flip_tensor", "zip", "zip", "torch.argmax", "len"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.pooled_eval", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.pooled_eval", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.flip_tensor"], ["", "def", "inference_pool", "(", "model", ",", "img", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Post Inference Pool Operations\n    \"\"\"", "\n", "\n", "if", "args", ".", "no_flip", ":", "\n", "        ", "flip_range", "=", "1", "\n", "", "else", ":", "\n", "        ", "flip_range", "=", "2", "\n", "\n", "", "y_tmp_with_flip", "=", "0", "\n", "for", "flip", "in", "range", "(", "flip_range", ")", ":", "\n", "        ", "y_tmp", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "scales", ")", ")", ":", "\n", "            ", "if", "type", "(", "y_tmp", ")", "==", "type", "(", "None", ")", ":", "\n", "                ", "y_tmp", "=", "pooled_eval", "(", "model", ",", "img", "[", "flip", "]", "[", "i", "]", ",", "scales", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "pooled_eval", "(", "model", ",", "img", "[", "flip", "]", "[", "i", "]", ",", "scales", "[", "i", "]", ")", "\n", "[", "x", ".", "add_", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "y_tmp", ",", "out", ")", "]", "\n", "", "", "if", "flip", "==", "0", ":", "\n", "            ", "y_tmp_with_flip", "=", "y_tmp", "\n", "", "else", ":", "\n", "            ", "[", "x", ".", "add_", "(", "flip_tensor", "(", "y", ",", "3", ")", ")", "for", "x", ",", "y", "in", "zip", "(", "y_tmp_with_flip", ",", "y_tmp", ")", "]", "\n", "\n", "", "", "y", "=", "[", "torch", ".", "argmax", "(", "y_", "/", "(", "flip_range", "*", "len", "(", "scales", ")", ")", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "y_", "in", "\n", "y_tmp_with_flip", "]", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.inference_sliding": [[271, 332], ["queue.Queue", "img.resize", "range", "eval.sliding_window_cropping", "torch.cuda.empty_cache", "model.data.cpu().numpy", "threading.Thread", "threading.Thread.start", "t_list.append", "threads.join", "preds.append", "int", "int", "torchvision.Compose", "transforms.Compose.", "image_list.append", "flip_list.append", "torch.no_grad", "input_crops.cuda.size", "queue.Queue.get", "scaled_img.transpose.transpose", "range", "torch.cat", "input_crops.cuda.cuda", "model", "model.data.cpu", "torchvision.ToTensor", "torchvision.Normalize", "input_crops[].unsqueeze().cuda", "model", "output_scattered_list.append", "input_crops[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.sliding_window_cropping", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.datasets.dataset_registry.Registry.get"], ["", "def", "inference_sliding", "(", "model", ",", "img", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Sliding Window Inference Function\n    \"\"\"", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "origw", ",", "origh", "=", "img", ".", "size", "\n", "preds", "=", "[", "]", "\n", "if", "args", ".", "no_flip", ":", "\n", "        ", "flip_range", "=", "1", "\n", "", "else", ":", "\n", "        ", "flip_range", "=", "2", "\n", "\n", "", "finalque", "=", "queue", ".", "Queue", "(", ")", "\n", "t_list", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "\n", "        ", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "scaled_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "y", "=", "[", "]", "\n", "image_list", "=", "[", "]", "\n", "flip_list", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "flip_range", ")", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "scaled_img", "=", "scaled_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "img_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "*", "mean_std", ")", "]", ")", "\n", "image", "=", "img_transform", "(", "scaled_img", ")", "\n", "image_list", ".", "append", "(", "image", ")", "\n", "flip_list", ".", "append", "(", "flip", ")", "\n", "\n", "", "mapping", ",", "input_crops", "=", "sliding_window_cropping", "(", "image_list", ",", "scale", "=", "scale", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "bi", ",", "_", ",", "hi", ",", "wi", "=", "input_crops", ".", "size", "(", ")", "\n", "if", "hi", ">=", "args", ".", "crop_size", ":", "\n", "                ", "output_scattered_list", "=", "[", "]", "\n", "for", "b_idx", "in", "range", "(", "bi", ")", ":", "\n", "                    ", "cur_input", "=", "input_crops", "[", "b_idx", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "cur_output", "=", "model", "(", "cur_input", ")", "\n", "output_scattered_list", ".", "append", "(", "cur_output", ")", "\n", "", "output_scattered", "=", "torch", ".", "cat", "(", "output_scattered_list", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "input_crops", "=", "input_crops", ".", "cuda", "(", ")", "\n", "output_scattered", "=", "model", "(", "input_crops", ")", "\n", "\n", "", "", "output_scattered", "=", "output_scattered", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "t", "=", "threading", ".", "Thread", "(", "target", "=", "reverse_sliding_window", ",", "args", "=", "(", "mapping", ",", "output_scattered", ",", "\n", "flip_list", ",", "origw", ",", "\n", "origh", ",", "finalque", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "threads", "in", "t_list", ":", "\n", "        ", "threads", ".", "join", "(", ")", "\n", "preds", ".", "append", "(", "finalque", ".", "get", "(", ")", ")", "\n", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.setup_loader": [[334, 370], ["torchvision.ToTensor", "transforms.MaskToTensor", "torch.utils.data.DataLoader", "args.dataset_cls.CityScapes", "NameError", "args.dataset_cls.CityScapes.split_dataset"], "function", ["None"], ["", "def", "setup_loader", "(", ")", ":", "\n", "    ", "\"\"\"\n    Setup Data Loaders\n    \"\"\"", "\n", "val_input_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "target_transform", "=", "extended_transforms", ".", "MaskToTensor", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "args", ".", "dataset_cls", "=", "cityscapes", "\n", "eval_mode_pooling", "=", "False", "\n", "eval_scales", "=", "None", "\n", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "eval_mode_pooling", "=", "True", "\n", "eval_scales", "=", "args", ".", "scales", "\n", "", "test_set", "=", "args", ".", "dataset_cls", ".", "CityScapes", "(", "args", ".", "mode", ",", "args", ".", "split", ",", "\n", "transform", "=", "val_input_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "cv_split", "=", "args", ".", "cv_split", ",", "\n", "eval_mode", "=", "eval_mode_pooling", ",", "\n", "eval_scales", "=", "eval_scales", ",", "\n", "eval_flip", "=", "not", "args", ".", "no_flip", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NameError", "(", "'-------------Not Supported Currently-------------'", ")", "\n", "\n", "", "if", "args", ".", "split_count", ">", "1", ":", "\n", "        ", "test_set", ".", "split_dataset", "(", "args", ".", "split_index", ",", "args", ".", "split_count", ")", "\n", "\n", "", "batch_size", "=", "1", "\n", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "        ", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.get_net": [[372, 386], ["logging.info", "network.get_net", "optimizer.restore_snapshot", "torch.nn.DataParallel().cuda.eval", "utils.my_data_parallel.MyDataParallel().cuda", "torch.nn.DataParallel().cuda", "utils.my_data_parallel.MyDataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.get_net", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.restore_snapshot"], ["", "def", "get_net", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get Network for evaluation\n    \"\"\"", "\n", "logging", ".", "info", "(", "'Load model file: %s'", ",", "args", ".", "snapshot", ")", "\n", "net", "=", "network", ".", "get_net", "(", "args", ",", "criterion", "=", "None", ")", "\n", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "        ", "net", "=", "MyDataParallel", "(", "net", ",", "gather", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "", "net", ",", "_", "=", "restore_snapshot", "(", "net", ",", "optimizer", "=", "None", ",", "\n", "snapshot", "=", "args", ".", "snapshot", ",", "restore_optimizer_bool", "=", "False", ")", "\n", "net", ".", "eval", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.infer_args": [[487, 511], ["re.search", "os.path.split", "os.path.split", "os.path.split", "os.path.basename", "int", "re.search.group"], "function", ["None"], ["", "", "", "def", "infer_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    To make life easier, we infer some args from the snapshot meta information.\n    \"\"\"", "\n", "if", "'dist_bn'", "in", "args", ".", "snapshot", "and", "not", "args", ".", "dist_bn", ":", "\n", "        ", "args", ".", "dist_bn", "=", "True", "\n", "\n", "", "cv_re", "=", "re", ".", "search", "(", "r'-cv_(\\d)-'", ",", "args", ".", "snapshot", ")", "\n", "if", "cv_re", "and", "args", ".", "cv_split", "is", "None", ":", "\n", "        ", "args", ".", "cv_split", "=", "int", "(", "cv_re", ".", "group", "(", "1", ")", ")", "\n", "\n", "", "snap_dir", ",", "_snap_file", "=", "os", ".", "path", ".", "split", "(", "args", ".", "snapshot", ")", "\n", "exp_dir", ",", "snap_dir", "=", "os", ".", "path", ".", "split", "(", "snap_dir", ")", "\n", "ckpt_path", ",", "exp_dir", "=", "os", ".", "path", ".", "split", "(", "exp_dir", ")", "\n", "ckpt_path", "=", "os", ".", "path", ".", "basename", "(", "ckpt_path", ")", "\n", "\n", "if", "args", ".", "exp_name", "is", "None", ":", "\n", "        ", "args", ".", "exp_name", "=", "exp_dir", "\n", "\n", "", "if", "args", ".", "ckpt_path", "is", "None", ":", "\n", "        ", "args", ".", "ckpt_path", "=", "ckpt_path", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'video_folder'", ":", "\n", "        ", "args", ".", "split", "=", "'video_folder'", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.main": [[513, 580], ["eval.infer_args", "os.path.join", "os.makedirs", "utils.misc.save_log", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "eval.setup_loader", "eval.RunEval", "eval.get_net", "tqdm.tqdm", "enumerate", "eval.RunEval.final_dump", "torch.nn.AvgPool2d", "eval.RunEval.inf", "float", "args.scales.split", "str"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.infer_args", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.save_log", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.setup_loader", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.get_net", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.final_dump", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.inf"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Main Function\n    \"\"\"", "\n", "# Parse args and set up logging", "\n", "infer_args", "(", ")", "\n", "\n", "if", "args", ".", "single_scale", ":", "\n", "        ", "scales", "=", "[", "1.0", "]", "\n", "", "else", ":", "\n", "        ", "scales", "=", "[", "float", "(", "x", ")", "for", "x", "in", "args", ".", "scales", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "args", ".", "exp_name", ",", "args", ".", "split", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "save_log", "(", "'eval'", ",", "output_dir", ",", "date_str", ")", "\n", "logging", ".", "info", "(", "\"Network Arch: %s\"", ",", "args", ".", "arch", ")", "\n", "logging", ".", "info", "(", "\"CV split: %d\"", ",", "args", ".", "cv_split", ")", "\n", "logging", ".", "info", "(", "\"Exp_name: %s\"", ",", "args", ".", "exp_name", ")", "\n", "logging", ".", "info", "(", "\"Ckpt path: %s\"", ",", "args", ".", "ckpt_path", ")", "\n", "logging", ".", "info", "(", "\"Scales : %s\"", ",", "' '", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "scales", ")", ")", "\n", "logging", ".", "info", "(", "\"Inference mode: %s\"", ",", "args", ".", "inference_mode", ")", "\n", "\n", "# Set up network, loader, inference mode", "\n", "metrics", "=", "args", ".", "dataset", "!=", "'video_folder'", "\n", "test_loader", "=", "setup_loader", "(", ")", "\n", "\n", "runner", "=", "RunEval", "(", "output_dir", ",", "metrics", ",", "\n", "write_image", "=", "args", ".", "dump_images", ",", "\n", "dataset_cls", "=", "args", ".", "dataset_cls", ",", "\n", "inference_mode", "=", "args", ".", "inference_mode", ")", "\n", "net", "=", "get_net", "(", ")", "\n", "\n", "# Fix the ASPP pool size to 105, which is the tensor size if you train with crop", "\n", "# size of 840x840", "\n", "if", "args", ".", "fixed_aspp_pool", ":", "\n", "        ", "net", ".", "module", ".", "aspp", ".", "img_pooling", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "105", ")", "\n", "\n", "", "if", "args", ".", "inference_mode", "==", "'sliding'", ":", "\n", "        ", "inference", "=", "inference_sliding", "\n", "", "elif", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "        ", "inference", "=", "inference_pool", "\n", "", "else", ":", "\n", "        ", "raise", "'Not a valid inference mode: {}'", ".", "format", "(", "args", ".", "inference_mode", ")", "\n", "\n", "# Run Inference!", "\n", "", "pbar", "=", "tqdm", "(", "test_loader", ",", "desc", "=", "'eval {}'", ".", "format", "(", "args", ".", "split", ")", ",", "smoothing", "=", "1.0", ")", "\n", "for", "iteration", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "\n", "        ", "if", "args", ".", "dataset", "==", "'video_folder'", ":", "\n", "            ", "imgs", ",", "img_names", "=", "data", "\n", "gt", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "                ", "base_img", ",", "gt_with_imgs", ",", "img_names", "=", "data", "\n", "base_img", "=", "base_img", "[", "0", "]", "\n", "imgs", "=", "gt_with_imgs", "[", "0", "]", "\n", "gt", "=", "gt_with_imgs", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "base_img", "=", "None", "\n", "imgs", ",", "gt", ",", "img_names", "=", "data", "\n", "\n", "", "", "runner", ".", "inf", "(", "imgs", ",", "img_names", ",", "gt", ",", "inference", ",", "net", ",", "scales", ",", "pbar", ",", "base_img", ")", "\n", "if", "iteration", ">", "5", "and", "args", ".", "test_mode", ":", "\n", "            ", "break", "\n", "\n", "# Calculate final overall statistics", "\n", "", "", "runner", ".", "final_dump", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.main": [[150, 192], ["config.assert_and_infer_cfg", "utils.misc.prep_experiment", "datasets.setup_loaders", "loss.get_loss", "network.get_net", "optimizer.get_optimizer", "network.wrap_network_in_dataparallel", "torch.cuda.empty_cache", "range", "apex.amp.initialize", "optimizer.load_weights", "config.cfg.immutable", "config.cfg.immutable", "scheduler.step", "train.train", "train.validate", "train_loader.sampler.set_epoch", "train_obj.build_epoch", "train_obj.build_epoch", "train_loader.sampler.set_num_samples"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.prep_experiment", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.get_loss", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.get_net", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.load_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.train", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.validate"], ["                ", "entropy", "=", "data_i", "[", "'entropy'", "]", ".", "cuda", "(", ")", "\n", "mae", "=", "data_i", "[", "'mae'", "]", ".", "cuda", "(", ")", "\n", "distance", "=", "data_i", "[", "'distance'", "]", ".", "cuda", "(", ")", "\n", "\n", "# Evaluating", "\n", "loss", ",", "_", "=", "trainer", ".", "run_validation_prior", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "\n", "distance", ")", "\n", "", "else", ":", "\n", "                ", "loss", ",", "_", "=", "trainer", ".", "run_validation", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ")", "\n", "\n", "", "val_loss", "+=", "loss", "\n", "\n", "", "avg_val_loss", "=", "val_loss", "/", "len", "(", "val_loader", ")", "\n", "print", "(", "'Validation Loss: %f'", "%", "avg_val_loss", ")", "\n", "\n", "val_writer", ".", "add_scalar", "(", "'Loss_epoch'", ",", "avg_val_loss", ",", "epoch", ")", "\n", "\n", "if", "avg_val_loss", "<", "best_val_loss", ":", "\n", "            ", "print", "(", "'Validation loss for epoch %d (%f) is better than previous best loss (%f). Saving best model.'", "\n", "%", "(", "epoch", ",", "avg_val_loss", ",", "best_val_loss", ")", ")", "\n", "best_val_loss", "=", "avg_val_loss", "\n", "trainer", ".", "save", "(", "save_fdr", ",", "'best'", ",", "exp_name", ")", "\n", "\n", "# Starts Testing (Test Set 1)", "\n", "", "print", "(", "'Starting Testing For %s'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ")", "\n", "flat_pred", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader1", ")", ")", "\n", "flat_labels", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader1", ")", ")", "\n", "val_loss", "=", "0", "\n", "for", "i", ",", "data_i", "in", "enumerate", "(", "tqdm", "(", "test_loader1", ")", ")", ":", "\n", "            ", "original", "=", "data_i", "[", "'original'", "]", ".", "cuda", "(", ")", "\n", "semantic", "=", "data_i", "[", "'semantic'", "]", ".", "cuda", "(", ")", "\n", "synthesis", "=", "data_i", "[", "'synthesis'", "]", ".", "cuda", "(", ")", "\n", "label", "=", "data_i", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "prior", ":", "\n", "                ", "entropy", "=", "data_i", "[", "'entropy'", "]", ".", "cuda", "(", ")", "\n", "mae", "=", "data_i", "[", "'mae'", "]", ".", "cuda", "(", ")", "\n", "distance", "=", "data_i", "[", "'distance'", "]", ".", "cuda", "(", ")", "\n", "\n", "# Evaluating", "\n", "loss", ",", "outputs", "=", "trainer", ".", "run_validation_prior", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "\n", "distance", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.train": [[194, 254], ["net.train", "utils.misc.AverageMeter", "enumerate", "len", "optim.zero_grad", "net", "utils.misc.AverageMeter.update", "optim.step", "inputs.size", "inputs.cuda", "gts.cuda", "main_loss.mean.clone().detach_", "torch.distributed.all_reduce", "main_loss.mean.mean", "main_loss.mean.clone().detach_", "main_loss.clone().detach_.item", "main_loss.mean.backward", "logging.info", "writer.add_scalar", "writer.add_scalar", "inputs.size", "inputs.size", "apex.amp.scale_loss", "scaled_loss.backward", "len", "main_loss.mean.clone", "main_loss.mean.clone"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.train", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.update"], ["\n", "", "val_loss", "+=", "loss", "\n", "outputs", "=", "softmax", "(", "outputs", ")", "\n", "(", "softmax_pred", ",", "predictions", ")", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "flat_pred", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "outputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_labels", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "label", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "config", "[", "'test_dataloader1'", "]", "[", "'dataset_args'", "]", "[", "'roi'", "]", ":", "\n", "            ", "invalid_indices", "=", "np", ".", "argwhere", "(", "flat_labels", "==", "255", ")", "\n", "flat_labels", "=", "np", ".", "delete", "(", "flat_labels", ",", "invalid_indices", ")", "\n", "flat_pred", "=", "np", ".", "delete", "(", "flat_pred", ",", "invalid_indices", ")", "\n", "\n", "", "print", "(", "'Calculating metrics'", ")", "\n", "results", "=", "metrics", ".", "get_metrics", "(", "flat_labels", ",", "flat_pred", ")", "\n", "print", "(", "'AU_ROC: %f'", "%", "results", "[", "'auroc'", "]", ")", "\n", "print", "(", "'mAP: %f'", "%", "results", "[", "'AP'", "]", ")", "\n", "print", "(", "'FPR@95TPR: %f'", "%", "results", "[", "'FPR@95%TPR'", "]", ")", "\n", "\n", "avg_val_loss", "=", "val_loss", "/", "len", "(", "test_loader1", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s AUC_ROC'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "results", "[", "'auroc'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s mAP'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "results", "[", "'AP'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s FPR@95TPR'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "results", "[", "'FPR@95%TPR'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'val_loss_%s'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader1", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "avg_val_loss", ",", "epoch", ")", "\n", "cumul_map_sum", "+=", "results", "[", "'AP'", "]", "\n", "# Starts Testing (Test Set 2)", "\n", "print", "(", "'Starting Testing For %s'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ")", "\n", "flat_pred", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader2", ")", ")", "\n", "flat_labels", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader2", ")", ")", "\n", "val_loss", "=", "0", "\n", "for", "i", ",", "data_i", "in", "enumerate", "(", "tqdm", "(", "test_loader2", ")", ")", ":", "\n", "            ", "original", "=", "data_i", "[", "'original'", "]", ".", "cuda", "(", ")", "\n", "semantic", "=", "data_i", "[", "'semantic'", "]", ".", "cuda", "(", ")", "\n", "synthesis", "=", "data_i", "[", "'synthesis'", "]", ".", "cuda", "(", ")", "\n", "label", "=", "data_i", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "prior", ":", "\n", "                ", "entropy", "=", "data_i", "[", "'entropy'", "]", ".", "cuda", "(", ")", "\n", "mae", "=", "data_i", "[", "'mae'", "]", ".", "cuda", "(", ")", "\n", "distance", "=", "data_i", "[", "'distance'", "]", ".", "cuda", "(", ")", "\n", "\n", "# Evaluating", "\n", "loss", ",", "outputs", "=", "trainer", ".", "run_validation_prior", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "\n", "distance", ")", "\n", "", "else", ":", "\n", "                ", "loss", ",", "outputs", "=", "trainer", ".", "run_validation", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ")", "\n", "\n", "", "val_loss", "+=", "loss", "\n", "outputs", "=", "softmax", "(", "outputs", ")", "\n", "(", "softmax_pred", ",", "predictions", ")", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "flat_pred", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "outputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_labels", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "label", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "config", "[", "'test_dataloader2'", "]", "[", "'dataset_args'", "]", "[", "'roi'", "]", ":", "\n", "            ", "invalid_indices", "=", "np", ".", "argwhere", "(", "flat_labels", "==", "255", ")", "\n", "flat_labels", "=", "np", ".", "delete", "(", "flat_labels", ",", "invalid_indices", ")", "\n", "flat_pred", "=", "np", ".", "delete", "(", "flat_pred", ",", "invalid_indices", ")", "\n", "\n", "", "avg_val_loss", "=", "val_loss", "/", "len", "(", "test_loader2", ")", "\n", "\n", "print", "(", "'Calculating metrics'", ")", "\n", "results", "=", "metrics", ".", "get_metrics", "(", "flat_labels", ",", "flat_pred", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.train.validate": [[256, 315], ["net.eval", "utils.misc.AverageMeter", "enumerate", "utils.misc.AverageMeter.update", "[].cpu", "utils.misc.fast_hist", "torch.cuda.FloatTensor", "torch.distributed.all_reduce", "torch.cuda.FloatTensor.cpu().numpy", "utils.misc.evaluate_eval", "inputs.size", "inputs.cuda", "gt_image.cuda", "torch.no_grad", "net", "criterion().item", "dump_images.append", "[].cpu.numpy().flatten", "gt_image.numpy().flatten", "len", "len", "inputs.size", "gt_image.size", "inputs.size", "inputs.size", "net.size", "gt_image.size", "net.size", "logging.info", "torch.cuda.FloatTensor.cpu", "inputs.size", "gt_image.size", "criterion", "net.data.max", "len", "[].cpu.numpy", "gt_image.numpy"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.fast_hist", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.evaluate_eval"], ["print", "(", "'mAP: %f'", "%", "results", "[", "'AP'", "]", ")", "\n", "print", "(", "'FPR@95TPR: %f'", "%", "results", "[", "'FPR@95%TPR'", "]", ")", "\n", "\n", "cumul_map_sum", "+=", "results", "[", "'AP'", "]", "\n", "test_writer", ".", "add_scalar", "(", "'%s AUC_ROC'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "\n", "results", "[", "'auroc'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s mAP'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "results", "[", "'AP'", "]", ",", "\n", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s FPR@95TPR'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "\n", "results", "[", "'FPR@95%TPR'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'val_loss_%s'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader2", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "\n", "avg_val_loss", ",", "epoch", ")", "\n", "\n", "# Starts Testing (Test Set 3)", "\n", "print", "(", "'Starting Testing For %s'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader3", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ")", "\n", "flat_pred", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader3", ")", ")", "\n", "flat_labels", "=", "np", ".", "zeros", "(", "w", "*", "h", "*", "len", "(", "test_loader3", ")", ")", "\n", "val_loss", "=", "0", "\n", "for", "i", ",", "data_i", "in", "enumerate", "(", "tqdm", "(", "test_loader3", ")", ")", ":", "\n", "            ", "original", "=", "data_i", "[", "'original'", "]", ".", "cuda", "(", ")", "\n", "semantic", "=", "data_i", "[", "'semantic'", "]", ".", "cuda", "(", ")", "\n", "synthesis", "=", "data_i", "[", "'synthesis'", "]", ".", "cuda", "(", ")", "\n", "label", "=", "data_i", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "prior", ":", "\n", "                ", "entropy", "=", "data_i", "[", "'entropy'", "]", ".", "cuda", "(", ")", "\n", "mae", "=", "data_i", "[", "'mae'", "]", ".", "cuda", "(", ")", "\n", "distance", "=", "data_i", "[", "'distance'", "]", ".", "cuda", "(", ")", "\n", "\n", "# Evaluating", "\n", "loss", ",", "outputs", "=", "trainer", ".", "run_validation_prior", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ",", "entropy", ",", "mae", ",", "\n", "distance", ")", "\n", "", "else", ":", "\n", "                ", "loss", ",", "outputs", "=", "trainer", ".", "run_validation", "(", "original", ",", "synthesis", ",", "semantic", ",", "label", ")", "\n", "\n", "", "val_loss", "+=", "loss", "\n", "outputs", "=", "softmax", "(", "outputs", ")", "\n", "(", "softmax_pred", ",", "predictions", ")", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "flat_pred", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "outputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_labels", "[", "i", "*", "w", "*", "h", ":", "i", "*", "w", "*", "h", "+", "w", "*", "h", "]", "=", "torch", ".", "flatten", "(", "label", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "config", "[", "'test_dataloader3'", "]", "[", "'dataset_args'", "]", "[", "'roi'", "]", ":", "\n", "            ", "invalid_indices", "=", "np", ".", "argwhere", "(", "flat_labels", "==", "255", ")", "\n", "flat_labels", "=", "np", ".", "delete", "(", "flat_labels", ",", "invalid_indices", ")", "\n", "flat_pred", "=", "np", ".", "delete", "(", "flat_pred", ",", "invalid_indices", ")", "\n", "\n", "", "print", "(", "'Calculating metrics'", ")", "\n", "results", "=", "metrics", ".", "get_metrics", "(", "flat_labels", ",", "flat_pred", ")", "\n", "print", "(", "'AU_ROC: %f'", "%", "results", "[", "'auroc'", "]", ")", "\n", "print", "(", "'mAP: %f'", "%", "results", "[", "'AP'", "]", ")", "\n", "print", "(", "'FPR@95TPR: %f'", "%", "results", "[", "'FPR@95%TPR'", "]", ")", "\n", "cumul_map_sum", "+=", "results", "[", "'AP'", "]", "\n", "avg_val_loss", "=", "val_loss", "/", "len", "(", "test_loader3", ")", "\n", "\n", "test_writer", ".", "add_scalar", "(", "'%s AUC_ROC'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader3", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "\n", "results", "[", "'auroc'", "]", ",", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s mAP'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader3", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "results", "[", "'AP'", "]", ",", "\n", "epoch", ")", "\n", "test_writer", ".", "add_scalar", "(", "'%s FPR@95TPR'", "%", "os", ".", "path", ".", "basename", "(", "cfg_test_loader3", "[", "'dataset_args'", "]", "[", "'dataroot'", "]", ")", ",", "\n", "results", "[", "'FPR@95%TPR'", "]", ",", "epoch", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImageBasedCrossEntropyLoss2d.__init__": [[44, 53], ["torch.Module.__init__", "logging.info", "torch.NLLLoss2d", "torch.NLLLoss2d", "torch.NLLLoss2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n", "", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n", "", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImageBasedCrossEntropyLoss2d.calculate_weights": [[54, 65], ["numpy.histogram", "target.flatten", "range"], "methods", ["None"], ["            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "batchsize", "=", "input", ".", "size", "(", "0", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImageBasedCrossEntropyLoss2d.forward": [[66, 82], ["targets.data.cpu().numpy", "range", "loss.ImageBasedCrossEntropyLoss2d.calculate_weights", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "loss.ImageBasedCrossEntropyLoss2d.nll_loss", "targets.data.cpu", "loss.ImageBasedCrossEntropyLoss2d.calculate_weights", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "targets[].unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "inputs[].unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.calculate_weights"], ["", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n", "", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "## computing loss is a bit complicated because |input| may not be", "\n", "## a tensor, but list of tensors in case of multiscale discriminator", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.CrossEntropyLoss2d.__init__": [[90, 94], ["torch.Module.__init__", "logging.info", "torch.NLLLoss2d", "torch.NLLLoss2d", "torch.NLLLoss2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.CrossEntropyLoss2d.forward": [[96, 98], ["loss.CrossEntropyLoss2d.nll_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["\n", "## Perceptual loss that uses a pretrained VGG network", "\n", "", "", "", "class", "VGGLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.__init__": [[115, 125], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["\n", "## KL Divergence loss used in VAE with an image encoder", "\n", "", "", "class", "KLDLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.calculate_weights": [[127, 140], ["len", "target.sum", "target.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.custom_nll": [[141, 167], ["loss_matrix.sum", "mask.half", "mask.float", "mask.sum().item", "mask.sum", "loss.customsoftmax", "loss.customsoftmax", "target[].half", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].half", "target[].float", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].float", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze", "class_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.customsoftmax", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.customsoftmax"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.forward": [[168, 191], ["target.data.cpu().numpy", "range", "target[].sum().half", "target[].sum().float", "loss.ImgWtLossSoftNLL.calculate_weights", "target.data.cpu", "loss.ImgWtLossSoftNLL.calculate_weights", "loss.ImgWtLossSoftNLL.custom_nll", "target[].sum", "target[].sum", "inputs[].unsqueeze", "target[].unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.ImgWtLossSoftNLL.custom_nll"], []], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.get_loss": [[13, 37], ["CrossEntropyLoss2d().cuda", "ImageBasedCrossEntropyLoss2d().cuda", "ImgWtLossSoftNLL().cuda", "CrossEntropyLoss2d().cuda", "loss.CrossEntropyLoss2d", "loss.ImageBasedCrossEntropyLoss2d", "loss.ImgWtLossSoftNLL", "loss.CrossEntropyLoss2d"], "function", ["None"], ["tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n", "", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.loss.customsoftmax": [[99, 108], ["torch.softmax", "torch.log", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.eval.RunEval.softmax"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.load_weights": [[57, 64], ["logging.info", "optimizer.restore_snapshot"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.restore_snapshot"], ["def", "load_weights", "(", "net", ",", "optimizer", ",", "snapshot_file", ",", "restore_optimizer_bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load weights from snapshot file\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Loading weights from model %s\"", ",", "snapshot_file", ")", "\n", "net", ",", "optimizer", "=", "restore_snapshot", "(", "net", ",", "optimizer", ",", "snapshot_file", ",", "restore_optimizer_bool", ")", "\n", "return", "net", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.restore_snapshot": [[66, 81], ["torch.load", "logging.info", "optimizer.load_state_dict", "optimizer.forgiving_state_restore", "optimizer.forgiving_state_restore", "torch.device"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.metrics.instance_segmentation.MetricSegment.load", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.forgiving_state_restore", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.forgiving_state_restore"], ["", "def", "restore_snapshot", "(", "net", ",", "optimizer", ",", "snapshot", ",", "restore_optimizer_bool", ")", ":", "\n", "    ", "\"\"\"\n    Restore weights and optimizer (if needed ) for resuming job.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "snapshot", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "logging", ".", "info", "(", "\"Checkpoint Load Compelete\"", ")", "\n", "if", "optimizer", "is", "not", "None", "and", "'optimizer'", "in", "checkpoint", "and", "restore_optimizer_bool", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "net", "=", "forgiving_state_restore", "(", "net", ",", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "forgiving_state_restore", "(", "net", ",", "checkpoint", ")", "\n", "\n", "", "return", "net", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.image_segmentation.optimizer.forgiving_state_restore": [[83, 99], ["net.state_dict", "net.state_dict.update", "net.load_state_dict", "logging.info", "net_state_dict[].size", "loaded_dict[].size"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.utils.misc.AverageMeter.update"], ["", "def", "forgiving_state_restore", "(", "net", ",", "loaded_dict", ")", ":", "\n", "    ", "\"\"\"\n    Handle partial loading when some tensors don't match up in size.\n    Because we want to use models that were trained off a different\n    number of classes.\n    \"\"\"", "\n", "net_state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "new_loaded_dict", "=", "{", "}", "\n", "for", "k", "in", "net_state_dict", ":", "\n", "        ", "if", "k", "in", "loaded_dict", "and", "net_state_dict", "[", "k", "]", ".", "size", "(", ")", "==", "loaded_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_loaded_dict", "[", "k", "]", "=", "loaded_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"Skipped loading parameter %s\"", ",", "k", ")", "\n", "", "", "net_state_dict", ".", "update", "(", "new_loaded_dict", ")", "\n", "net", ".", "load_state_dict", "(", "net_state_dict", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d": [[6, 11], ["torch.BatchNorm2d"], "function", ["None"], ["def", "Norm2d", "(", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Custom Norm Function to allow flexible switching\n    \"\"\"", "\n", "return", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights": [[12, 25], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Model Weights\n    \"\"\"", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample": [[26, 32], ["torch.functional.interpolate"], "function", ["None"], ["", "", "", "", "def", "Upsample", "(", "x", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper Around the Upsample Call\n    \"\"\"", "\n", "return", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3._AtrousSpatialPyramidPoolingModule.__init__": [[47, 80], ["torch.nn.Module.__init__", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.ModuleList", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "reduction_dim", "=", "256", ",", "output_stride", "=", "16", ",", "rates", "=", "(", "6", ",", "12", ",", "18", ")", ")", ":", "\n", "        ", "super", "(", "_AtrousSpatialPyramidPoolingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "rates", "=", "[", "2", "*", "r", "for", "r", "in", "rates", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "'output stride of {} not supported'", ".", "format", "(", "output_stride", ")", "\n", "\n", "", "self", ".", "features", "=", "[", "]", "\n", "# 1x1", "\n", "self", ".", "features", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "# other rates", "\n", "for", "r", "in", "rates", ":", "\n", "            ", "self", ".", "features", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "r", ",", "padding", "=", "r", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n", "# img level features", "\n", "self", ".", "img_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "img_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3._AtrousSpatialPyramidPoolingModule.forward": [[81, 93], ["x.size", "deepv3._AtrousSpatialPyramidPoolingModule.img_pooling", "deepv3._AtrousSpatialPyramidPoolingModule.img_conv", "mynn.Upsample", "f", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "img_features", "=", "self", ".", "img_pooling", "(", "x", ")", "\n", "img_features", "=", "self", ".", "img_conv", "(", "img_features", ")", "\n", "img_features", "=", "Upsample", "(", "img_features", ",", "x_size", "[", "2", ":", "]", ")", "\n", "out", "=", "img_features", "\n", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "y", "=", "f", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepV3Plus.__init__": [[103, 174], ["torch.nn.Module.__init__", "deepv3._AtrousSpatialPyramidPoolingModule", "torch.nn.Conv2d", "torch.nn.Sequential", "mynn.initialize_weights", "mynn.initialize_weights", "mynn.initialize_weights", "mynn.initialize_weights", "SEresnext.se_resnext50_32x4d", "deepv3.DeepV3Plus.layer3.named_modules", "deepv3.DeepV3Plus.layer4.named_modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "SEresnext.se_resnext101_32x4d", "deepv3.DeepV3Plus.layer4.named_modules", "print", "torch.nn.Conv2d", "Exception", "Resnet.resnet50", "torch.nn.Sequential", "Resnet.resnet101", "torch.nn.Sequential", "ValueError"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.se_resnext50_32x4d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.se_resnext101_32x4d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet50", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet101"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "trunk", "=", "'seresnext-50'", ",", "criterion", "=", "None", ",", "variant", "=", "'D'", ",", "\n", "skip", "=", "'m1'", ",", "skip_num", "=", "48", ")", ":", "\n", "        ", "super", "(", "DeepV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "variant", "=", "variant", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "skip_num", "=", "skip_num", "\n", "\n", "if", "trunk", "==", "'seresnext-50'", ":", "\n", "            ", "resnet", "=", "SEresnext", ".", "se_resnext50_32x4d", "(", ")", "\n", "", "elif", "trunk", "==", "'seresnext-101'", ":", "\n", "            ", "resnet", "=", "SEresnext", ".", "se_resnext101_32x4d", "(", ")", "\n", "", "elif", "trunk", "==", "'resnet-50'", ":", "\n", "            ", "resnet", "=", "Resnet", ".", "resnet50", "(", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnet-101'", ":", "\n", "            ", "resnet", "=", "Resnet", ".", "resnet101", "(", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a valid network arch\"", ")", "\n", "\n", "", "self", ".", "layer0", "=", "resnet", ".", "layer0", "\n", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "=", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", "\n", "\n", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "            ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "'conv2'", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "'conv2'", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "            ", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "'conv2'", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "            ", "print", "(", "\"Not using Dilation \"", ")", "\n", "\n", "", "self", ".", "aspp", "=", "_AtrousSpatialPyramidPoolingModule", "(", "2048", ",", "256", ",", "\n", "output_stride", "=", "8", ")", "\n", "\n", "if", "self", ".", "skip", "==", "'m1'", ":", "\n", "            ", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "skip_num", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "skip", "==", "'m2'", ":", "\n", "            ", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "skip_num", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a valid skip'", ")", "\n", "\n", "", "self", ".", "bot_aspp", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "self", ".", "skip_num", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_fine", ")", "\n", "initialize_weights", "(", "self", ".", "final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepV3Plus.forward": [[175, 202], ["x.size", "deepv3.DeepV3Plus.layer0", "deepv3.DeepV3Plus.layer1", "deepv3.DeepV3Plus.layer2", "deepv3.DeepV3Plus.layer3", "deepv3.DeepV3Plus.layer4", "deepv3.DeepV3Plus.aspp", "deepv3.DeepV3Plus.bot_aspp", "torch.cat", "deepv3.DeepV3Plus.final", "mynn.Upsample", "deepv3.DeepV3Plus.bot_fine", "mynn.Upsample", "deepv3.DeepV3Plus.bot_fine", "mynn.Upsample", "deepv3.DeepV3Plus.criterion", "deepv3.DeepV3Plus.size", "deepv3.DeepV3Plus.size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "x", ",", "gts", "=", "None", ")", ":", "\n", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "# 800", "\n", "x0", "=", "self", ".", "layer0", "(", "x", ")", "# 400", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "# 400", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "# 100", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "# 100", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "# 100", "\n", "xp", "=", "self", ".", "aspp", "(", "x4", ")", "\n", "\n", "dec0_up", "=", "self", ".", "bot_aspp", "(", "xp", ")", "\n", "if", "self", ".", "skip", "==", "'m1'", ":", "\n", "            ", "dec0_fine", "=", "self", ".", "bot_fine", "(", "x1", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "dec0_fine", "=", "self", ".", "bot_fine", "(", "x2", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "x2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "", "dec0", "=", "[", "dec0_fine", ",", "dec0_up", "]", "\n", "dec0", "=", "torch", ".", "cat", "(", "dec0", ",", "1", ")", "\n", "dec1", "=", "self", ".", "final", "(", "dec0", ")", "\n", "main_out", "=", "Upsample", "(", "dec1", ",", "x_size", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "criterion", "(", "main_out", ",", "gts", ")", "\n", "\n", "", "return", "main_out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepWV3Plus.__init__": [[218, 261], ["torch.nn.Module.__init__", "logging.debug", "wider_resnet.wider_resnet38_a2", "torch.nn.DataParallel", "deepv3._AtrousSpatialPyramidPoolingModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "mynn.initialize_weights", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "trunk", "=", "'WideResnet38'", ")", ":", "\n", "\n", "        ", "super", "(", "DeepWV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "debug", "(", "\"Trunk: %s\"", ",", "trunk", ")", "\n", "wide_resnet", "=", "wider_resnet38_a2", "(", "classes", "=", "1000", ",", "dilation", "=", "True", ")", "\n", "wide_resnet", "=", "torch", ".", "nn", ".", "DataParallel", "(", "wide_resnet", ")", "\n", "#         try:", "\n", "#             checkpoint = torch.load('./pretrained_models/wider_resnet38.pth.tar', map_location='cpu')", "\n", "#             wide_resnet.load_state_dict(checkpoint['state_dict'])", "\n", "#             del checkpoint", "\n", "#         except:", "\n", "#             print(\"=====================Could not load ImageNet weights=======================\")", "\n", "#             print(\"Please download the ImageNet weights of WideResNet38 in our repo to ./pretrained_models.\")", "\n", "\n", "wide_resnet", "=", "wide_resnet", ".", "module", "\n", "\n", "self", ".", "mod1", "=", "wide_resnet", ".", "mod1", "\n", "self", ".", "mod2", "=", "wide_resnet", ".", "mod2", "\n", "self", ".", "mod3", "=", "wide_resnet", ".", "mod3", "\n", "self", ".", "mod4", "=", "wide_resnet", ".", "mod4", "\n", "self", ".", "mod5", "=", "wide_resnet", ".", "mod5", "\n", "self", ".", "mod6", "=", "wide_resnet", ".", "mod6", "\n", "self", ".", "mod7", "=", "wide_resnet", ".", "mod7", "\n", "self", ".", "pool2", "=", "wide_resnet", ".", "pool2", "\n", "self", ".", "pool3", "=", "wide_resnet", ".", "pool3", "\n", "del", "wide_resnet", "\n", "\n", "self", ".", "aspp", "=", "_AtrousSpatialPyramidPoolingModule", "(", "4096", ",", "256", ",", "\n", "output_stride", "=", "8", ")", "\n", "\n", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "128", ",", "48", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bot_aspp", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "48", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepWV3Plus.forward": [[262, 284], ["inp.size", "deepv3.DeepWV3Plus.mod1", "deepv3.DeepWV3Plus.mod2", "deepv3.DeepWV3Plus.mod3", "deepv3.DeepWV3Plus.mod4", "deepv3.DeepWV3Plus.mod5", "deepv3.DeepWV3Plus.mod6", "deepv3.DeepWV3Plus.mod7", "deepv3.DeepWV3Plus.aspp", "deepv3.DeepWV3Plus.bot_aspp", "deepv3.DeepWV3Plus.bot_fine", "mynn.Upsample", "torch.cat", "deepv3.DeepWV3Plus.final", "mynn.Upsample", "deepv3.DeepWV3Plus.pool2", "deepv3.DeepWV3Plus.pool3", "deepv3.DeepWV3Plus.size"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "\n", "        ", "x_size", "=", "inp", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "mod1", "(", "inp", ")", "\n", "m2", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "m2", ")", ")", "\n", "x", "=", "self", ".", "mod4", "(", "x", ")", "\n", "x", "=", "self", ".", "mod5", "(", "x", ")", "\n", "x", "=", "self", ".", "mod6", "(", "x", ")", "\n", "x", "=", "self", ".", "mod7", "(", "x", ")", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "dec0_up", "=", "self", ".", "bot_aspp", "(", "x", ")", "\n", "\n", "dec0_fine", "=", "self", ".", "bot_fine", "(", "m2", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "m2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "dec0", "=", "[", "dec0_fine", ",", "dec0_up", "]", "\n", "dec0", "=", "torch", ".", "cat", "(", "dec0", ",", "1", ")", "\n", "\n", "dec1", "=", "self", ".", "final", "(", "dec0", ")", "\n", "out", "=", "Upsample", "(", "dec1", ",", "x_size", "[", "2", ":", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepSRNX50V3PlusD_m1": [[286, 292], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "", "def", "DeepSRNX50V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    SEResnet 50 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'seresnext-50'", ",", "criterion", "=", "criterion", ",", "variant", "=", "'D'", ",", "\n", "skip", "=", "'m1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepR50V3PlusD_m1": [[293, 298], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR50V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 50 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-50'", ",", "criterion", "=", "criterion", ",", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.deepv3.DeepSRNX101V3PlusD_m1": [[300, 306], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepSRNX101V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    SeResnext 101 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'seresnext-101'", ",", "criterion", "=", "criterion", ",", "variant", "=", "'D'", ",", "\n", "skip", "=", "'m1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SEModule.__init__": [[73, 82], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SEModule.forward": [[83, 91], ["SEresnext.SEModule.avg_pool", "SEresnext.SEModule.fc1", "SEresnext.SEModule.relu", "SEresnext.SEModule.fc2", "SEresnext.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.Bottleneck.forward": [[97, 118], ["SEresnext.Bottleneck.conv1", "SEresnext.Bottleneck.bn1", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv2", "SEresnext.Bottleneck.bn2", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv3", "SEresnext.Bottleneck.bn3", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.downsample", "SEresnext.Bottleneck.se_module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "se_module", "(", "out", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SEBottleneck.__init__": [[126, 142], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SEResNetBottleneck.__init__": [[152, 167], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SEResNeXtBottleneck.__init__": [[175, 191], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "base_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "SEResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.__init__": [[198, 315], ["torch.Module.__init__", "layer0_modules.append", "torch.Sequential", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "torch.AvgPool2d", "torch.Linear", "collections.OrderedDict", "torch.Dropout", "torch.MaxPool2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", ",", "reduction", ",", "dropout_p", "=", "0.2", ",", "\n", "inplanes", "=", "128", ",", "input_3x3", "=", "True", ",", "downsample_kernel_size", "=", "3", ",", "\n", "downsample_padding", "=", "1", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        block (nn.Module): Bottleneck class.\n            - For SENet154: SEBottleneck\n            - For SE-ResNet models: SEResNetBottleneck\n            - For SE-ResNeXt models:  SEResNeXtBottleneck\n        layers (list of ints): Number of residual blocks for 4 layers of the\n            network (layer1...layer4).\n        groups (int): Number of groups for the 3x3 convolution in each\n            bottleneck block.\n            - For SENet154: 64\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models:  32\n        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.\n            - For all models: 16\n        dropout_p (float or None): Drop probability for the Dropout layer.\n            If `None` the Dropout layer is not used.\n            - For SENet154: 0.2\n            - For SE-ResNet models: None\n            - For SE-ResNeXt models: None\n        inplanes (int):  Number of input channels for layer1.\n            - For SENet154: 128\n            - For SE-ResNet models: 64\n            - For SE-ResNeXt models: 64\n        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of\n            a single 7x7 convolution in layer0.\n            - For SENet154: True\n            - For SE-ResNet models: False\n            - For SE-ResNeXt models: False\n        downsample_kernel_size (int): Kernel size for downsampling convolutions\n            in layer2, layer3 and layer4.\n            - For SENet154: 3\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models: 1\n        downsample_padding (int): Padding for downsampling convolutions in\n            layer2, layer3 and layer4.\n            - For SENet154: 1\n            - For SE-ResNet models: 0\n            - For SE-ResNeXt models: 0\n        num_classes (int): Number of outputs in `last_linear` layer.\n            - For all models: 1000\n        \"\"\"", "\n", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "if", "input_3x3", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn2'", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv3'", ",", "nn", ".", "Conv2d", "(", "64", ",", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn3'", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu3'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "# To preserve compatibility with Caffe weights `ceil_mode=True`", "\n", "# is used instead of `padding=1`.", "\n", "", "layer0_modules", ".", "append", "(", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "\n", "ceil_mode", "=", "True", ")", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layer0_modules", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "64", ",", "\n", "blocks", "=", "layers", "[", "0", "]", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "128", ",", "\n", "blocks", "=", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "256", ",", "\n", "blocks", "=", "layers", "[", "2", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "512", ",", "\n", "blocks", "=", "layers", "[", "3", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_p", ")", "if", "dropout_p", "is", "not", "None", "else", "None", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet._make_layer": [[316, 335], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "mynn.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "downsample_kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", ",", "\n", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.features": [[336, 346], ["SEresnext.SENet.layer0", "SEresnext.SENet.layer1", "SEresnext.SENet.layer2", "SEresnext.SENet.layer3", "SEresnext.SENet.layer4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward Pass through the each layer of SE network\n        \"\"\"", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.logits": [[347, 357], ["SEresnext.SENet.avg_pool", "SEresnext.SENet.view", "SEresnext.SENet.last_linear", "SEresnext.SENet.dropout", "SEresnext.SENet.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        AvgPool and Linear Layer\n        \"\"\"", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.forward": [[358, 362], ["SEresnext.SENet.features", "SEresnext.SENet.logits"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.features", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.SENet.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.initialize_pretrained_model": [[364, 379], ["torch.utils.model_zoo.load_url", "model.load_state_dict"], "function", ["None"], ["", "", "def", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Pretrain Model Information,\n    Dowload weights, load weights, set variables\n    \"\"\"", "\n", "assert", "num_classes", "==", "settings", "[", "'num_classes'", "]", ",", "'num_classes should be {}, but is {}'", ".", "format", "(", "\n", "settings", "[", "'num_classes'", "]", ",", "num_classes", ")", "\n", "weights", "=", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.se_resnext50_32x4d": [[382, 393], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext50_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext50\n    \"\"\"", "\n", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "settings", "=", "pretrained_settings", "[", "'se_resnext50_32x4d'", "]", "[", "'imagenet'", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.se_resnext101_32x4d": [[395, 407], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext101_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext101\n    \"\"\"", "\n", "\n", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "settings", "=", "pretrained_settings", "[", "'se_resnext101_32x4d'", "]", "[", "'imagenet'", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.GlobalAvgPool2d.__init__": [[55, 58], ["torch.Module.__init__", "logging.debug"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "debug", "(", "\"Global Average Pooling Initialized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.GlobalAvgPool2d.forward": [[59, 62], ["inputs.size", "inputs.view().mean", "inputs.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "in_size", "=", "inputs", ".", "size", "(", ")", "\n", "return", "inputs", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.IdentityResidualBlock.__init__": [[68, 168], ["torch.Module.__init__", "norm_act", "torch.Sequential", "torch.Sequential", "ValueError", "ValueError", "len", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "len", "len", "len", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "dropout", "dropout"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "dropout", "=", "None", ",", "\n", "dist_bn", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Configurable identity-mapping residual block\n\n        Parameters\n        ----------\n        in_channels : int\n            Number of input channels.\n        channels : list of int\n            Number of channels in the internal feature maps.\n            Can either have two or three elements: if three construct\n            a residual block with two `3 x 3` convolutions,\n            otherwise construct a bottleneck block with `1 x 1`, then\n            `3 x 3` then `1 x 1` convolutions.\n        stride : int\n            Stride of the first `3 x 3` convolution\n        dilation : int\n            Dilation to apply to the `3 x 3` convolutions.\n        groups : int\n            Number of convolution groups.\n            This is used to create ResNeXt-style blocks and is only compatible with\n            bottleneck blocks.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        dropout: callable\n            Function to create Dropout Module.\n        dist_bn: Boolean\n            A variable to enable or disable use of distributed BN\n        \"\"\"", "\n", "super", "(", "IdentityResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "\n", "# Check parameters for inconsistencies", "\n", "if", "len", "(", "channels", ")", "!=", "2", "and", "len", "(", "channels", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"channels must contain either two or three values\"", ")", "\n", "", "if", "len", "(", "channels", ")", "==", "2", "and", "groups", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"groups > 1 are only valid if len(channels) == 3\"", ")", "\n", "\n", "", "is_bottleneck", "=", "len", "(", "channels", ")", "==", "3", "\n", "need_proj_conv", "=", "stride", "!=", "1", "or", "in_channels", "!=", "channels", "[", "-", "1", "]", "\n", "\n", "self", ".", "bn1", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "not", "is_bottleneck", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "2", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "2", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn3\"", ",", "norm_act", "(", "channels", "[", "1", "]", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "\n", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "4", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "4", ":", "]", "\n", "", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n", "if", "need_proj_conv", ":", "\n", "            ", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.IdentityResidualBlock.forward": [[169, 183], ["hasattr", "wider_resnet.IdentityResidualBlock.convs", "wider_resnet.IdentityResidualBlock.add_", "wider_resnet.IdentityResidualBlock.bn1", "wider_resnet.IdentityResidualBlock.proj_conv", "x.clone", "wider_resnet.IdentityResidualBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        This is the standard forward function for non-distributed batch norm\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"proj_conv\"", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "shortcut", "=", "self", ".", "proj_conv", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "convs", "(", "bn1", ")", "\n", "out", ".", "add_", "(", "shortcut", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.WiderResNet.__init__": [[191, 249], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "structure", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "classes", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Wider ResNet with pre-activation (identity mapping) blocks\n\n        Parameters\n        ----------\n        structure : list of int\n            Number of residual blocks in each of the six modules of the network.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        classes : int\n            If not `0` also include global average pooling and \\\n            a fully-connected layer with `classes` outputs at the end\n            of the network.\n        \"\"\"", "\n", "super", "(", "WiderResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "structure", "=", "structure", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "(", "128", ",", "128", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "512", ",", "1024", ")", ",", "\n", "(", "512", ",", "1024", ",", "2048", ")", ",", "(", "1024", ",", "2048", ",", "4096", ")", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "in_channels", ",", "channels", "[", "mod_id", "]", ",", "\n", "norm_act", "=", "norm_act", ")", "\n", ")", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<=", "4", ":", "\n", "                ", "self", ".", "add_module", "(", "\"pool%d\"", "%", "\n", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.WiderResNet.forward": [[251, 265], ["wider_resnet.WiderResNet.mod1", "wider_resnet.WiderResNet.mod2", "wider_resnet.WiderResNet.mod3", "wider_resnet.WiderResNet.mod4", "wider_resnet.WiderResNet.mod5", "wider_resnet.WiderResNet.mod6", "wider_resnet.WiderResNet.mod7", "wider_resnet.WiderResNet.bn_out", "hasattr", "wider_resnet.WiderResNet.pool2", "wider_resnet.WiderResNet.pool3", "wider_resnet.WiderResNet.pool4", "wider_resnet.WiderResNet.pool5", "wider_resnet.WiderResNet.pool6", "wider_resnet.WiderResNet.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "self", ".", "pool4", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod5", "(", "self", ".", "pool5", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod6", "(", "self", ".", "pool6", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.WiderResNetA2.__init__": [[288, 364], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "functools.partial", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "functools.partial", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "structure", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "classes", "=", "0", ",", "\n", "dilation", "=", "False", ",", "\n", "dist_bn", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "WiderResNetA2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# If using distributed batch norm, use the encoding.nn as oppose to torch.nn", "\n", "\n", "\n", "nn", ".", "Dropout", "=", "nn", ".", "Dropout2d", "\n", "norm_act", "=", "bnrelu", "\n", "self", ".", "structure", "=", "structure", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "(", "128", ",", "128", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "512", ",", "1024", ")", ",", "(", "512", ",", "1024", ",", "2048", ")", ",", "\n", "(", "1024", ",", "2048", ",", "4096", ")", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "if", "not", "dilation", ":", "\n", "                    ", "dil", "=", "1", "\n", "stride", "=", "2", "if", "block_id", "==", "0", "and", "2", "<=", "mod_id", "<=", "4", "else", "1", "\n", "", "else", ":", "\n", "                    ", "if", "mod_id", "==", "3", ":", "\n", "                        ", "dil", "=", "2", "\n", "", "elif", "mod_id", ">", "3", ":", "\n", "                        ", "dil", "=", "4", "\n", "", "else", ":", "\n", "                        ", "dil", "=", "1", "\n", "", "stride", "=", "2", "if", "block_id", "==", "0", "and", "mod_id", "==", "2", "else", "1", "\n", "\n", "", "if", "mod_id", "==", "4", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.3", ")", "\n", "", "elif", "mod_id", "==", "5", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "drop", "=", "None", "\n", "\n", "", "blocks", ".", "append", "(", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "in_channels", ",", "\n", "channels", "[", "mod_id", "]", ",", "norm_act", "=", "norm_act", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dil", ",", "\n", "dropout", "=", "drop", ",", "dist_bn", "=", "self", ".", "dist_bn", ")", "\n", ")", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<", "2", ":", "\n", "                ", "self", ".", "add_module", "(", "\"pool%d\"", "%", "\n", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.WiderResNetA2.forward": [[366, 379], ["wider_resnet.WiderResNetA2.mod1", "wider_resnet.WiderResNetA2.mod2", "wider_resnet.WiderResNetA2.mod3", "wider_resnet.WiderResNetA2.mod4", "wider_resnet.WiderResNetA2.mod5", "wider_resnet.WiderResNetA2.mod6", "wider_resnet.WiderResNetA2.mod7", "wider_resnet.WiderResNetA2.bn_out", "hasattr", "wider_resnet.WiderResNetA2.pool2", "wider_resnet.WiderResNetA2.pool3", "wider_resnet.WiderResNetA2.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "out", ")", "\n", "out", "=", "self", ".", "mod5", "(", "out", ")", "\n", "out", "=", "self", ".", "mod6", "(", "out", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "return", "self", ".", "classifier", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.wider_resnet.bnrelu": [[43, 49], ["torch.Sequential", "mynn.Norm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "bnrelu", "(", "channels", ")", ":", "\n", "    ", "\"\"\"\n    Single Layer BN and Relui\n    \"\"\"", "\n", "return", "nn", ".", "Sequential", "(", "mynn", ".", "Norm2d", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.BasicBlock.__init__": [[65, 74], ["torch.Module.__init__", "Resnet.conv3x3", "mynn.Norm2d", "torch.ReLU", "torch.ReLU", "Resnet.conv3x3", "mynn.Norm2d"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.BasicBlock.forward": [[75, 92], ["Resnet.BasicBlock.conv1", "Resnet.BasicBlock.bn1", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.conv2", "Resnet.BasicBlock.bn2", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.Bottleneck.__init__": [[100, 112], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.Bottleneck.forward": [[113, 134], ["Resnet.Bottleneck.conv1", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv2", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.bn3", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet.__init__": [[140, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "Resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet._make_layer": [[162, 178], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.mynn.Norm2d"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.ResNet.forward": [[179, 195], ["Resnet.ResNet.conv1", "Resnet.ResNet.bn1", "Resnet.ResNet.relu", "Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "Resnet.ResNet.layer2", "Resnet.ResNet.layer3", "Resnet.ResNet.layer4", "Resnet.ResNet.avgpool", "Resnet.ResNet.view", "Resnet.ResNet.fc", "Resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.conv3x3": [[53, 57], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet18": [[197, 207], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet34": [[209, 219], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet50": [[221, 231], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet101": [[233, 243], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.network.Resnet.resnet152": [[245, 255], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RandomVerticalFlip.__call__": [[53, 57], ["random.random", "img.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.DeNormalize.__init__": [[60, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.DeNormalize.__call__": [[64, 68], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.MaskToTensor.__call__": [[71, 73], ["torch.from_numpy().long", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RelaxedBoundaryLossToTensor.__init__": [[78, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ignore_id", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "ignore_id", "=", "ignore_id", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter": [[83, 89], ["numpy.zeros", "numpy.arange", "a.ravel"], "methods", ["None"], ["", "def", "new_one_hot_converter", "(", "self", ",", "a", ")", ":", "\n", "        ", "ncols", "=", "self", ".", "num_classes", "+", "1", "\n", "out", "=", "np", ".", "zeros", "(", "(", "a", ".", "size", ",", "ncols", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "out", "[", "np", ".", "arange", "(", "a", ".", "size", ")", ",", "a", ".", "ravel", "(", ")", "]", "=", "1", "\n", "out", ".", "shape", "=", "a", ".", "shape", "+", "(", "ncols", ",", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RelaxedBoundaryLossToTensor.__call__": [[90, 124], ["numpy.array", "range", "numpy.moveaxis", "torch.from_numpy().byte", "transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "numpy.zeros", "skimage.segmentation.find_boundaries().astype", "range", "numpy.where", "numpy.where", "numpy.logical_or", "scipy.ndimage.interpolation.shift", "transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "numpy.expand_dims", "torch.from_numpy", "skimage.segmentation.find_boundaries"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img_arr", "=", "np", ".", "array", "(", "img", ")", "\n", "img_arr", "[", "img_arr", "==", "self", ".", "ignore_id", "]", "=", "self", ".", "num_classes", "\n", "\n", "if", "cfg", ".", "STRICTBORDERCLASS", "!=", "None", ":", "\n", "            ", "one_hot_orig", "=", "self", ".", "new_one_hot_converter", "(", "img_arr", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "img_arr", ".", "shape", "[", "0", "]", ",", "img_arr", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "cls", "in", "cfg", ".", "STRICTBORDERCLASS", ":", "\n", "                ", "mask", "=", "np", ".", "logical_or", "(", "mask", ",", "(", "img_arr", "==", "cls", ")", ")", "\n", "", "", "one_hot", "=", "0", "\n", "\n", "border", "=", "cfg", ".", "BORDER_WINDOW", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_EPOCH", "!=", "-", "1", "and", "cfg", ".", "EPOCH", ">", "cfg", ".", "REDUCE_BORDER_EPOCH", ")", ":", "\n", "            ", "border", "=", "border", "//", "2", "\n", "border_prediction", "=", "find_boundaries", "(", "img_arr", ",", "mode", "=", "'thick'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "-", "border", ",", "border", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "border", ",", "border", "+", "1", ")", ":", "\n", "                ", "shifted", "=", "shift", "(", "img_arr", ",", "(", "i", ",", "j", ")", ",", "cval", "=", "self", ".", "num_classes", ")", "\n", "one_hot", "+=", "self", ".", "new_one_hot_converter", "(", "shifted", ")", "\n", "\n", "", "", "one_hot", "[", "one_hot", ">", "1", "]", "=", "1", "\n", "\n", "if", "cfg", ".", "STRICTBORDERCLASS", "!=", "None", ":", "\n", "            ", "one_hot", "=", "np", ".", "where", "(", "np", ".", "expand_dims", "(", "mask", ",", "2", ")", ",", "one_hot_orig", ",", "one_hot", ")", "\n", "\n", "", "one_hot", "=", "np", ".", "moveaxis", "(", "one_hot", ",", "-", "1", ",", "0", ")", "\n", "\n", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_EPOCH", "!=", "-", "1", "and", "cfg", ".", "EPOCH", ">", "cfg", ".", "REDUCE_BORDER_EPOCH", ")", ":", "\n", "                ", "one_hot", "=", "np", ".", "where", "(", "border_prediction", ",", "2", "*", "one_hot", ",", "1", "*", "one_hot", ")", "\n", "# print(one_hot.shape)", "\n", "", "return", "torch", ".", "from_numpy", "(", "one_hot", ")", ".", "byte", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ResizeHeight.__init__": [[126, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ResizeHeight.__call__": [[130, 134], ["int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.FreeScale.__init__": [[137, 140], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.FreeScale.__call__": [[141, 143], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.FlipChannels.__call__": [[149, 152], ["PIL.Image.fromarray", "numpy.array", "img.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RandomGaussianBlur.__call__": [[158, 163], ["skimage.filters.gaussian", "PIL.Image.fromarray", "numpy.array", "skimage.filters.gaussian.astype", "random.random"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "0.15", "+", "random", ".", "random", "(", ")", "*", "1.15", "\n", "blurred_img", "=", "gaussian", "(", "np", ".", "array", "(", "img", ")", ",", "sigma", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.RandomBilateralBlur.__call__": [[170, 175], ["random.uniform", "skimage.restoration.denoise_bilateral", "PIL.Image.fromarray", "numpy.array", "skimage.restoration.denoise_bilateral.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "0.05", ",", "0.75", ")", "\n", "blurred_img", "=", "denoise_bilateral", "(", "np", ".", "array", "(", "img", ")", ",", "sigma_spatial", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ColorJitter.__init__": [[301, 306], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ColorJitter.get_params": [[307, 342], ["numpy.random.shuffle", "torchvision.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "torchvision.Lambda", "transforms.adjust_brightness", "transforms.adjust_contrast", "transforms.adjust_saturation", "transforms.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_brightness", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_contrast", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_saturation", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n\n        Arguments are same as that of __init__.\n\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torch_tr", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ColorJitter.__call__": [[343, 354], ["transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms._is_pil_image": [[176, 181], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_brightness": [[183, 201], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms._is_pil_image"], ["", "", "def", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_contrast": [[203, 221], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms._is_pil_image"], ["", "def", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_saturation": [[223, 241], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms._is_pil_image"], ["", "def", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms.adjust_hue": [[243, 286], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "transforms._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.transforms._is_pil_image", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.util.image_logging.ImgLogging.merge"], ["", "def", "adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n\n    See https://en.wikipedia.org/wiki/Hue for more details on Hue.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'hue_factor is not in [-0.5, 0.5].'", ".", "format", "(", "hue_factor", ")", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "'L'", ",", "'1'", ",", "'I'", ",", "'F'", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "'HSV'", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "'ignore'", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "'L'", ")", "\n", "\n", "img", "=", "Image", ".", "merge", "(", "'HSV'", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Compose.__init__": [[42, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Compose.__call__": [[45, 50], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomCrop.__init__": [[66, 74], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ",", "nopad", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "nopad", "=", "nopad", "\n", "self", ".", "pad_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomCrop.__call__": [[75, 124], ["random.randint", "min", "random.randint", "min", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "min", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "max", "max", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "# ASSUME H, W", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "\n", "", "if", "self", ".", "nopad", ":", "\n", "            ", "if", "th", ">", "h", "or", "tw", ">", "w", ":", "\n", "# Instead of padding, adjust crop size to the shorter edge of image.", "\n", "                ", "shorter_side", "=", "min", "(", "w", ",", "h", ")", "\n", "th", ",", "tw", "=", "shorter_side", ",", "shorter_side", "\n", "", "", "else", ":", "\n", "# Check if we need to pad img to fit for crop_size.", "\n", "            ", "if", "th", ">", "h", ":", "\n", "                ", "pad_h", "=", "(", "th", "-", "h", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "0", "\n", "", "if", "tw", ">", "w", ":", "\n", "                ", "pad_w", "=", "(", "tw", "-", "w", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_w", "=", "0", "\n", "", "border", "=", "(", "pad_w", ",", "pad_h", ",", "pad_w", ",", "pad_h", ")", "\n", "if", "pad_h", "or", "pad_w", ":", "\n", "                ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "pad_color", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "", "", "if", "centroid", "is", "not", "None", ":", "\n", "# Need to insure that centroid is covered by crop and that crop", "\n", "# sits fully within the image", "\n", "            ", "c_x", ",", "c_y", "=", "centroid", "\n", "max_x", "=", "w", "-", "tw", "\n", "max_y", "=", "h", "-", "th", "\n", "x1", "=", "random", ".", "randint", "(", "c_x", "-", "tw", ",", "c_x", ")", "\n", "x1", "=", "min", "(", "max_x", ",", "max", "(", "0", ",", "x1", ")", ")", "\n", "y1", "=", "random", ".", "randint", "(", "c_y", "-", "th", ",", "c_y", ")", "\n", "y1", "=", "min", "(", "max_y", ",", "max", "(", "0", ",", "y1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "w", "==", "tw", ":", "\n", "                ", "x1", "=", "0", "\n", "", "else", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "", "if", "h", "==", "th", ":", "\n", "                ", "y1", "=", "0", "\n", "", "else", ":", "\n", "                ", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "", "", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ResizeHeight.__init__": [[127, 130], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ResizeHeight.__call__": [[131, 136], ["int", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "(", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", ",", "\n", "mask", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.CenterCrop.__init__": [[139, 144], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.CenterCrop.__call__": [[145, 152], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.CenterCropPad.__init__": [[155, 161], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.CenterCropPad.__call__": [[162, 190], ["isinstance", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "round", "round", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "tuple", ")", ":", "\n", "                ", "tw", ",", "th", "=", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "", "if", "w", "<", "tw", ":", "\n", "            ", "pad_x", "=", "tw", "-", "w", "\n", "", "else", ":", "\n", "            ", "pad_x", "=", "0", "\n", "", "if", "h", "<", "th", ":", "\n", "            ", "pad_y", "=", "th", "-", "h", "\n", "", "else", ":", "\n", "            ", "pad_y", "=", "0", "\n", "\n", "", "if", "pad_x", "or", "pad_y", ":", "\n", "# left, top, right, bottom", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "\n", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.PadImage.__init__": [[194, 197], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.PadImage.__call__": [[199, 217], ["PIL.ImageOps.expand", "PIL.ImageOps.expand", "int", "float", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", ">", "tw", "or", "h", ">", "th", ":", "\n", "            ", "wpercent", "=", "(", "tw", "/", "float", "(", "w", ")", ")", "\n", "target_h", "=", "int", "(", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "*", "float", "(", "wpercent", ")", ")", ")", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "##Pad", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomHorizontallyFlip.__call__": [[219, 224], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "\n", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.FreeScale.__init__": [[227, 229], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.FreeScale.__call__": [[230, 233], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Scale.__init__": [[240, 242], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Scale.__call__": [[243, 258], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ScaleMin.__init__": [[265, 267], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ScaleMin.__call__": [[268, 283], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Resize.__init__": [[290, 292], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.Resize.__call__": [[293, 300], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "==", "h", "and", "w", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "return", "(", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomSizedCrop.__init__": [[303, 305], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomSizedCrop.__call__": [[306, 334], ["range", "joint_transforms.Scale", "joint_transforms.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomRotate.__init__": [[337, 339], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomRotate.__call__": [[340, 344], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "rotate", "(", "\n", "rotate_degree", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomSizeAndCrop.__init__": [[347, 354], ["joint_transforms.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "\n", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "pre_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "self", ".", "pre_size", "=", "pre_size", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.RandomSizeAndCrop.__call__": [[355, 374], ["random.uniform", "joint_transforms.RandomSizeAndCrop.crop", "int", "img.resize", "mask.resize", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "# first, resize such that shorter edge is pre_size", "\n", "if", "self", ".", "pre_size", "is", "None", ":", "\n", "            ", "scale_amt", "=", "1.", "\n", "", "elif", "img", ".", "size", "[", "1", "]", "<", "img", ".", "size", "[", "0", "]", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "0", "]", "\n", "", "scale_amt", "*=", "random", ".", "uniform", "(", "self", ".", "scale_min", ",", "self", ".", "scale_max", ")", "\n", "w", ",", "h", "=", "[", "int", "(", "i", "*", "scale_amt", ")", "for", "i", "in", "img", ".", "size", "]", "\n", "\n", "if", "centroid", "is", "not", "None", ":", "\n", "            ", "centroid", "=", "[", "int", "(", "c", "*", "scale_amt", ")", "for", "c", "in", "centroid", "]", "\n", "\n", "", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "self", ".", "crop", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCropOld.__init__": [[377, 381], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCropOld._pad": [[382, 390], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCropOld.__call__": [[391, 426], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCropOld._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "joint_transforms.SlidingCropOld._pad", "img_sublist.append", "mask_sublist.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_sublist", ",", "mask_sublist", "=", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "", "", "return", "img_sublist", ",", "mask_sublist", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop.__init__": [[429, 433], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop._pad": [[434, 442], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop.__call__": [[443, 479], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCrop._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "joint_transforms.SlidingCrop._pad", "img_slices.append", "mask_slices.append", "slices_info.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_slices", ",", "mask_slices", ",", "slices_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "slices_info", ".", "append", "(", "[", "sy", ",", "ey", ",", "sx", ",", "ex", ",", "sub_h", ",", "sub_w", "]", ")", "\n", "", "", "return", "img_slices", ",", "mask_slices", ",", "slices_info", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "[", "img", "]", ",", "[", "mask", "]", ",", "[", "[", "0", ",", "sub_h", ",", "0", ",", "sub_w", ",", "sub_h", ",", "sub_w", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__init__": [[482, 500], ["joint_transforms.RandomCrop", "class_list.replace().split", "class_list.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "\n", "class_list", "=", "[", "16", ",", "15", ",", "14", "]", ")", ":", "\n", "        ", "\"\"\"\n        This is the initialization for class uniform sampling\n        :param size: crop size (int)\n        :param crop_nopad: Padding or no padding (bool)\n        :param scale_min: Minimum Scale (float)\n        :param scale_max: Maximum Scale (float)\n        :param ignore_index: The index value to ignore in the GT images (unsigned int)\n        :param class_list: A list of class to sample around, by default Truck, train, bus\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "\n", "self", ".", "class_list", "=", "class_list", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "\n", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.detect_peaks": [[501, 536], ["generate_binary_structure", "binary_erosion", "maximum_filter"], "methods", ["None"], ["", "def", "detect_peaks", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Takes an image and detect the peaks usingthe local maximum filter.\n        Returns a boolean mask of the peaks (i.e. 1 when\n        the pixel's value is the neighborhood maximum, 0 otherwise)\n\n        :param image: An 2d input images\n        :return: Binary output images of the same size as input with pixel value equal\n        to 1 indicating that there is peak at that point\n        \"\"\"", "\n", "\n", "# define an 8-connected neighborhood", "\n", "neighborhood", "=", "generate_binary_structure", "(", "2", ",", "2", ")", "\n", "\n", "# apply the local maximum filter; all pixel of maximal value", "\n", "# in their neighborhood are set to 1", "\n", "local_max", "=", "maximum_filter", "(", "image", ",", "footprint", "=", "neighborhood", ")", "==", "image", "\n", "# local_max is a mask that contains the peaks we are", "\n", "# looking for, but also the background.", "\n", "# In order to isolate the peaks we must remove the background from the mask.", "\n", "\n", "# we create the mask of the background", "\n", "background", "=", "(", "image", "==", "0", ")", "\n", "\n", "# a little technicality: we must erode the background in order to", "\n", "# successfully subtract it form local_max, otherwise a line will", "\n", "# appear along the background border (artifact of the local maximum filter)", "\n", "eroded_background", "=", "binary_erosion", "(", "background", ",", "structure", "=", "neighborhood", ",", "\n", "border_value", "=", "1", ")", "\n", "\n", "# we obtain the final mask, containing only peaks,", "\n", "# by removing the background from the local_max mask (xor operation)", "\n", "detected_peaks", "=", "local_max", "^", "eroded_background", "\n", "\n", "return", "detected_peaks", "\n", "\n"]], "home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.__call__": [[537, 615], ["random.uniform", "int", "int", "joint_transforms.ClassUniform.crop", "numpy.array", "numpy.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "range", "joint_transforms.ClassUniform.detect_peaks", "numpy.column_stack().tolist", "img.resize", "mask.resize", "img.resize", "mask.resize", "numpy.where", "range", "len", "joint_transforms.ClassUniform.crop", "numpy.random.randint", "random.uniform", "random.uniform", "img_new.crop", "mask_new.crop", "numpy.zeros", "numpy.zeros", "origarr[].sum", "origarr[].sum", "float", "float", "numpy.column_stack", "len", "int", "int", "max", "max", "max", "max", "numpy.where.astype", "numpy.where.sum", "numpy.isnan", "numpy.where", "int", "int"], "methods", ["home.repos.pwc.inspect_result.segmentmeifyoucan_road-anomaly-benchmark.transforms.joint_transforms.ClassUniform.detect_peaks"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        :param img: PIL Input Image\n        :param mask: PIL Input Mask\n        :return: PIL output PIL (mask, crop) of self.crop_size\n        \"\"\"", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "scale_amt", "=", "random", ".", "uniform", "(", "self", ".", "scale_min", ",", "self", ".", "scale_max", ")", "\n", "w", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "if", "scale_amt", "<", "1.0", ":", "\n", "            ", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", "return", "self", ".", "crop", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "# Smart Crop ( Class Uniform's ABN)", "\n", "            ", "origw", ",", "origh", "=", "mask", ".", "size", "\n", "img_new", ",", "mask_new", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "interested_class", "=", "self", ".", "class_list", "# [16, 15, 14]  # Train, Truck, Bus", "\n", "data", "=", "np", ".", "array", "(", "mask", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", "\n", "for", "class_of_interest", "in", "interested_class", ":", "\n", "# hist = np.histogram(data==class_of_interest)", "\n", "                ", "map", "=", "np", ".", "where", "(", "data", "==", "class_of_interest", ",", "data", ",", "0", ")", "\n", "map", "=", "map", ".", "astype", "(", "'float64'", ")", "/", "map", ".", "sum", "(", ")", "/", "class_of_interest", "\n", "map", "[", "np", ".", "isnan", "(", "map", ")", "]", "=", "0", "\n", "arr", "=", "arr", "+", "map", "\n", "\n", "", "origarr", "=", "arr", "\n", "window_size", "=", "250", "\n", "\n", "# Given a list of classes of interest find the points on the image that are", "\n", "# of interest to crop from", "\n", "sum_arr", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "x", "in", "range", "(", "0", ",", "arr", ".", "shape", "[", "0", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                ", "for", "y", "in", "range", "(", "0", ",", "arr", ".", "shape", "[", "1", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                    ", "sum_arr", "[", "int", "(", "x", "+", "window_size", "/", "2", ")", ",", "int", "(", "y", "+", "window_size", "/", "2", ")", "]", "=", "origarr", "[", "\n", "x", ":", "x", "+", "window_size", ",", "\n", "y", ":", "y", "+", "window_size", "]", ".", "sum", "(", ")", "\n", "tmp", "[", "x", ":", "x", "+", "window_size", ",", "y", ":", "y", "+", "window_size", "]", "=", "origarr", "[", "x", ":", "x", "+", "window_size", ",", "y", ":", "y", "+", "window_size", "]", ".", "sum", "(", ")", "\n", "\n", "# Scaling Ratios in X and Y for non-uniform images", "\n", "", "", "ratio", "=", "(", "float", "(", "origw", ")", "/", "w", ",", "float", "(", "origh", ")", "/", "h", ")", "\n", "output", "=", "self", ".", "detect_peaks", "(", "sum_arr", ")", "\n", "coord", "=", "(", "np", ".", "column_stack", "(", "np", ".", "where", "(", "output", ")", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# Check if there are any peaks in the images to crop from if not do standard", "\n", "# cropping behaviour", "\n", "if", "len", "(", "coord", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "crop", "(", "img_new", ",", "mask_new", ")", "\n", "", "else", ":", "\n", "# If peaks are detected, random peak selection followed by peak", "\n", "# coordinate scaling to new scaled image and then random", "\n", "# cropping around the peak point in the scaled image", "\n", "                ", "randompick", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "coord", ")", ")", "\n", "y", ",", "x", "=", "coord", "[", "randompick", "]", "\n", "y", ",", "x", "=", "int", "(", "y", "*", "ratio", "[", "0", "]", ")", ",", "int", "(", "x", "*", "ratio", "[", "1", "]", ")", "\n", "window_size", "=", "window_size", "*", "ratio", "[", "0", "]", "\n", "cropx", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "x", "-", "window_size", "/", "2", ")", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "w", "-", "window_size", ")", "-", "x", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "cropy", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "y", "-", "window_size", "/", "2", ")", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "h", "-", "window_size", ")", "-", "y", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "return_img", "=", "img_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "return_mask", "=", "mask_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "return", "(", "return_img", ",", "return_mask", ")", "\n", "", "", "", "", ""]]}