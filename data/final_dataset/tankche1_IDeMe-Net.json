{"home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.logger.Logger.__init__": [[13, 16], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.logger.Logger.scalar_summary": [[17, 21], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.logger.Logger.image_summary": [[22, 44], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.logger.Logger.histo_summary": [[45, 72], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.option.Options.__init__": [[6, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "### ", "\n", "# Training settings", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Tank Shot'", ")", "\n", "parser", ".", "add_argument", "(", "'--LR'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "\n", "help", "=", "'Learning rate of the Encoder Network'", ")", "\n", "parser", ".", "add_argument", "(", "'--clsLR'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "\n", "help", "=", "'Learning rate of the Encoder Network'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "'Batch Size'", ")", "\n", "parser", ".", "add_argument", "(", "'--nthreads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "'threads num to load data'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorname'", ",", "default", "=", "'resnet18'", ",", "type", "=", "str", ",", "\n", "help", "=", "'tensorboard curve name'", ")", "\n", "parser", ".", "add_argument", "(", "'--ways'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of class for one test'", ")", "\n", "parser", ".", "add_argument", "(", "'--shots'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of pictures of each class to support'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_num'", ",", "default", "=", "15", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of pictures of each class for test'", ")", "\n", "parser", ".", "add_argument", "(", "'--augnum'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of augnum'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "default", "=", "'miniImageEmbedding'", ",", "type", "=", "str", ",", "\n", "help", "=", "'data loader type'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "default", "=", "'None'", ",", "type", "=", "str", ",", "\n", "help", "=", "'load network.t7'", ")", "\n", "parser", ".", "add_argument", "(", "'--galleryNum'", ",", "default", "=", "30", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of gallery'", ")", "\n", "parser", ".", "add_argument", "(", "'--stepSize'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of epoch to decay lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--Fang'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of block'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "600", ",", "type", "=", "int", ",", "\n", "help", "=", "'train epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--trainways'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of class for one episode in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixScale'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'1 means fix Scale '", ")", "\n", "parser", ".", "add_argument", "(", "'--GNet'", ",", "default", "=", "'none'", ",", "type", "=", "str", ",", "\n", "help", "=", "'load network.t7'", ")", "\n", "parser", ".", "add_argument", "(", "'--scratch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'whether to train from scratch'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixAttention'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'whether to fix attention part'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixCls'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'whether to fix cls part'", ")", "\n", "parser", ".", "add_argument", "(", "'--chooseNum'", ",", "default", "=", "15", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of choosing'", ")", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.option.Options.parse": [[56, 58], ["option.Options.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.classification.ClassificationNetwork.__init__": [[38, 43], ["torch.Module.__init__", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ClassificationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "num_ftrs", "=", "self", ".", "convnet", ".", "fc", ".", "in_features", "\n", "self", ".", "convnet", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.classification.ClassificationNetwork.forward": [[44, 48], ["classification.ClassificationNetwork.convnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "convnet", "(", "inputs", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.classification.train_model": [[84, 175], ["time.time", "copy.deepcopy", "range", "print", "print", "model.load_state_dict", "model.state_dict", "print", "print", "print", "time.time", "tqdm", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "scheduler.step", "model.train", "model.train", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "optimizer.zero_grad", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "labels.view.view", "criterion", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "copy.deepcopy", "os.path.join", "torch.autograd.Variable.cuda", "labels.view.cuda", "labels.view.size", "criterion.backward", "optimizer.step", "criterion.item", "torch.autograd.Variable.size", "model.state_dict", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "str", "labels.view.view"], "function", ["None"], ["def", "train_model", "(", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "num_epochs", "=", "25", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_loss", "=", "1000000000.0", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "num_epochs", "-", "1", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "[", "'train'", "]", ":", "\n", "\n", "            ", "if", "phase", "==", "'train'", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "model", ".", "train", "(", "True", ")", "# Set model to training mode", "\n", "", "else", ":", "\n", "                ", "model", ".", "train", "(", "False", ")", "# Set model to evaluate mode", "\n", "\n", "\n", "", "running_loss", "=", "0.0", "\n", "tot_dist", "=", "0.0", "\n", "running_corrects", "=", "0", "\n", "loss", "=", "0", "\n", "\n", "# Iterate over data.", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "tqdm", "(", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ")", ":", "\n", "\n", "#c = labels", "\n", "# wrap them in Variable", "\n", "                ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "\n", "labels", "=", "labels", ".", "view", "(", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "\n", "# backward + optimize only if in training phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# statistics", "\n", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "view", "(", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "#print(running_corrects)", "\n", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "(", "dataset_sizes", "[", "phase", "]", "*", "1.0", ")", "\n", "epoch_acc", "=", "running_corrects", "/", "(", "dataset_sizes", "[", "phase", "]", "*", "1.0", ")", "\n", "info", "=", "{", "\n", "phase", "+", "'loss'", ":", "running_loss", ",", "\n", "phase", "+", "'Accuracy'", ":", "epoch_acc", ",", "\n", "}", "\n", "\n", "print", "(", "'{} Loss: {:.4f} Accuracy: {:.4f} '", ".", "format", "(", "\n", "phase", ",", "epoch_loss", ",", "epoch_acc", ")", ")", "\n", "\n", "# deep copy the model", "\n", "if", "phase", "==", "'train'", "and", "epoch_loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "epoch_loss", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", ")", "\n", "# if epoch>=30 and epoch %3 ==0:", "\n", "#     torch.save(best_model_wts,os.path.join(rootdir,'models/'+str(args.tensorname)+ str(epoch) + '.t7'))", "\n", "#     print('save!')", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "best_model_wts", ",", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'models/'", "+", "str", "(", "args", ".", "tensorname", ")", "+", "'.t7'", ")", ")", "\n", "print", "(", "'save!'", ")", "\n", "##", "\n", "\n", "", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "\n", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "'Best val Loss: {:4f}'", ".", "format", "(", "best_loss", ")", ")", "\n", "\n", "\n", "# load best model weights", "\n", "model", ".", "load_state_dict", "(", "best_model_wts", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Denormalize.__init__": [[86, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Denormalize.__call__": [[90, 94], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Clip.__init__": [[97, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Clip.__call__": [[100, 105], ["tensor.clone"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "t", "=", "tensor", ".", "clone", "(", ")", "\n", "t", "[", "t", ">", "1", "]", "=", "1", "\n", "t", "[", "t", "<", "0", "]", "=", "0", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Flatten.__init__": [[124, 126], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.Flatten.forward": [[127, 129], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", "class", "ClassificationNetwork", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.ClassificationNetwork.__init__": [[130, 135], ["torch.Module.__init__", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet18", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ClassificationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "num_ftrs", "=", "self", ".", "convnet", ".", "fc", ".", "in_features", "\n", "self", ".", "convnet", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "64", ")", "\n", "#print(self.convnet)", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.ClassificationNetwork.forward": [[137, 141], ["onlyBasetwoLoss.ClassificationNetwork.convnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "convnet", "(", "inputs", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.weightNet.__init__": [[144, 167], ["torch.Module.__init__", "onlyBasetwoLoss.ClassificationNetwork", "onlyBasetwoLoss.weightNet.resnet.load_state_dict", "print", "onlyBasetwoLoss.weightNet.conv1.load_state_dict", "onlyBasetwoLoss.weightNet.bn1.load_state_dict", "onlyBasetwoLoss.weightNet.layer1.load_state_dict", "onlyBasetwoLoss.weightNet.layer2.load_state_dict", "onlyBasetwoLoss.weightNet.layer3.load_state_dict", "onlyBasetwoLoss.weightNet.layer4.load_state_dict", "onlyBasetwoLoss.weightNet.layer4.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "str", "onlyBasetwoLoss.weightNet.resnet.convnet.conv1.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.bn1.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.layer1.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.layer2.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.layer3.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.layer4.state_dict", "onlyBasetwoLoss.weightNet.resnet.convnet.layer4.state_dict", "str"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "weightNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "ClassificationNetwork", "(", ")", "\n", "self", ".", "resnet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'models/'", "+", "str", "(", "args", ".", "network", ")", "+", "'.t7'", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "print", "(", "'loading '", ",", "str", "(", "args", ".", "network", ")", ")", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "resnet", ".", "convnet", ".", "conv1", "\n", "self", ".", "conv1", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "conv1", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "bn1", "=", "self", ".", "resnet", ".", "convnet", ".", "bn1", "\n", "self", ".", "bn1", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "bn1", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "relu", "=", "self", ".", "resnet", ".", "convnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "resnet", ".", "convnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "resnet", ".", "convnet", ".", "layer1", "\n", "self", ".", "layer1", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "layer1", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "layer2", "=", "self", ".", "resnet", ".", "convnet", ".", "layer2", "\n", "self", ".", "layer2", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "layer2", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "resnet", ".", "convnet", ".", "layer3", "\n", "self", ".", "layer3", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "layer3", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "resnet", ".", "convnet", ".", "layer4", "\n", "self", ".", "layer4", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "layer4", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "resnet", ".", "convnet", ".", "layer4", "\n", "self", ".", "layer4", ".", "load_state_dict", "(", "self", ".", "resnet", ".", "convnet", ".", "layer4", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "avgpool", "=", "self", ".", "resnet", ".", "convnet", ".", "avgpool", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.weightNet.forward": [[168, 181], ["onlyBasetwoLoss.weightNet.conv1", "onlyBasetwoLoss.weightNet.bn1", "onlyBasetwoLoss.weightNet.relu", "onlyBasetwoLoss.weightNet.maxpool", "onlyBasetwoLoss.weightNet.layer1", "onlyBasetwoLoss.weightNet.layer2", "onlyBasetwoLoss.weightNet.layer3", "onlyBasetwoLoss.weightNet.layer4", "onlyBasetwoLoss.weightNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "layer1", "=", "self", ".", "layer1", "(", "x", ")", "# (, 64L, 56L, 56L)", "\n", "layer2", "=", "self", ".", "layer2", "(", "layer1", ")", "# (, 128L, 28L, 28L)", "\n", "layer3", "=", "self", ".", "layer3", "(", "layer2", ")", "# (, 256L, 14L, 14L)", "\n", "layer4", "=", "self", ".", "layer4", "(", "layer3", ")", "# (,512,7,7)", "\n", "x", "=", "self", ".", "avgpool", "(", "layer4", ")", "# (,512,1,1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.smallNet.__init__": [[183, 202], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "onlyBasetwoLoss.smallNet.__init__.conv_block"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "smallNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_block", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "\n", "", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "# 6*224*224", "\n", "conv_block", "(", "6", ",", "32", ")", ",", "# 64*112*112", "\n", "conv_block", "(", "32", ",", "64", ")", ",", "# 64*56*56", "\n", "conv_block", "(", "64", ",", "64", ")", ",", "# 64*28*28", "\n", "conv_block", "(", "64", ",", "32", ")", ",", "# 64*14*14", "\n", "conv_block", "(", "32", ",", "16", ")", ",", "# 32*7*7", "\n", "Flatten", "(", ")", "# 784", "\n", ")", "\n", "print", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.smallNet.forward": [[203, 212], ["onlyBasetwoLoss.smallNet.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "\"\"\"                 \n        inputs: Batchsize*3*224*224\n        outputs: Batchsize*100\n        \"\"\"", "\n", "outputs", "=", "self", ".", "encoder", "(", "inputs", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.GNet.__init__": [[221, 245], ["torch.Module.__init__", "onlyBasetwoLoss.smallNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "onlyBasetwoLoss.weightNet", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "onlyBasetwoLoss.ClassificationNetwork", "ClassificationNetwork.load_state_dict", "onlyBasetwoLoss.GNet.fc.load_state_dict", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "ClassificationNetwork.convnet.fc.state_dict", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str"], "methods", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.ANet = weightNet()", "\n", "# self.BNet = weightNet()", "\n", "self", ".", "attentionNet", "=", "smallNet", "(", ")", "\n", "\n", "self", ".", "toWeight", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "784", ",", "args", ".", "Fang", "*", "args", ".", "Fang", ")", ",", "\n", "# nn.ReLU(),", "\n", "# nn.Linear(100,args.Fang*args.Fang),", "\n", "# nn.Linear(1024,9),", "\n", "# nn.Tanh(),", "\n", "# nn.ReLU(),", "\n", ")", "\n", "\n", "self", ".", "CNet", "=", "weightNet", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "64", ")", "\n", "\n", "resnet", "=", "ClassificationNetwork", "(", ")", "\n", "resnet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'models/'", "+", "str", "(", "args", ".", "network", ")", "+", "'.t7'", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n", "self", ".", "fc", ".", "load_state_dict", "(", "resnet", ".", "convnet", ".", "fc", ".", "state_dict", "(", ")", ")", "\n", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "1.0", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.GNet.forward": [[246, 272], ["A.size", "onlyBasetwoLoss.GNet.attentionNet", "onlyBasetwoLoss.GNet.toWeight", "onlyBasetwoLoss.GNet.view", "torch.sum.expand", "torch.sum.expand", "torch.sum.expand", "torch.sum.expand", "torch.sum.expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "onlyBasetwoLoss.GNet.CNet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "onlyBasetwoLoss.GNet.CNet", "onlyBasetwoLoss.GNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "B", "=", "1", ",", "fixSquare", "=", "1", ",", "oneSquare", "=", "1", ",", "mode", "=", "'one'", ")", ":", "\n", "# A,B :[batch,3,224,224] fixSquare:[batch,9,3,224,224] oneSquare:[batch,3,224,224]", "\n", "        ", "if", "mode", "==", "'two'", ":", "\n", "# Calculate 3*3 weight matrix", "\n", "            ", "batchSize", "=", "A", ".", "size", "(", "0", ")", "\n", "feature", "=", "self", ".", "attentionNet", "(", "torch", ".", "cat", "(", "(", "A", ",", "B", ")", ",", "1", ")", ")", "\n", "weight", "=", "self", ".", "toWeight", "(", "feature", ")", "# [batch,3*3]", "\n", "\n", "weightSquare", "=", "weight", ".", "view", "(", "batchSize", ",", "args", ".", "Fang", "*", "args", ".", "Fang", ",", "1", ",", "1", ",", "1", ")", "\n", "weightSquare", "=", "weightSquare", ".", "expand", "(", "batchSize", ",", "args", ".", "Fang", "*", "args", ".", "Fang", ",", "3", ",", "224", ",", "224", ")", "\n", "weightSquare", "=", "weightSquare", "*", "fixSquare", "# [batch,9,3,224,224]", "\n", "weightSquare", "=", "torch", ".", "sum", "(", "weightSquare", ",", "dim", "=", "1", ")", "# [batch,3,224,224]", "\n", "\n", "C", "=", "weightSquare", "*", "A", "+", "(", "oneSquare", "-", "weightSquare", ")", "*", "B", "\n", "Cfeature", "=", "self", ".", "CNet", "(", "C", ")", "\n", "return", "Cfeature", ",", "weight", ",", "feature", "\n", "\n", "", "elif", "mode", "==", "'one'", ":", "\n", "# Calculate feature", "\n", "            ", "Cfeature", "=", "self", ".", "CNet", "(", "A", ")", "\n", "return", "Cfeature", "\n", "\n", "", "elif", "mode", "==", "'fc'", ":", "\n", "# Go through fc layer, just for debug", "\n", "            ", "Cfeature", "=", "self", ".", "fc", "(", "A", ")", "\n", "return", "Cfeature", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.worker_init_fn": [[36, 38], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.plotPicture": [[113, 120], ["matplotlib.figure", "plt.figure.add_subplot", "image.clone", "fig.add_subplot.imshow", "plt.figure.savefig", "matplotlib.close", "detransform", "str"], "function", ["None"], ["def", "plotPicture", "(", "image", ",", "name", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "A", "=", "image", ".", "clone", "(", ")", "\n", "ax", ".", "imshow", "(", "detransform", "(", "A", ")", ")", "\n", "fig", ".", "savefig", "(", "'picture/'", "+", "str", "(", "name", ")", "+", "'.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.euclidean_dist": [[332, 347], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "# To accelerate training, but observe little effect", "\n", "A", "=", "GNet", ".", "module", ".", "scale", "\n", "\n", "return", "(", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", "*", "A", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.iterateMix": [[348, 405], ["supportFeatures.view().mean", "torch.cat.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "range", "galleryFeature.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "onlyBasetwoLoss.euclidean_dist", "range", "range", "supportFeatures.view", "galleryFeature[].cuda", "onlyBasetwoLoss.euclidean_dist", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "galleryFeature.size", "galleryFeature[].cuda", "numpy.random.randint", "numpy.random.randint", "image_datasets[].get_image", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.euclidean_dist", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.euclidean_dist", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.get_image"], ["", "def", "iterateMix", "(", "supportImages", ",", "supportFeatures", ",", "supportBelongs", ",", "supportReals", ",", "ways", ")", ":", "\n", "    ", "'''\n        Inputs:\n            supportImages ways,shots,3,224,224\n        Outputs:\n            AImages [ways*shots*(1+augnum),3,224,224]\n            BImages [ways*shots*(1+augnum),3,224,224]\n            ABelongs: The label in [0,way-1]\n            Reals: The label in [0,63] # Just for debug\n    '''", "\n", "center", "=", "supportFeatures", ".", "view", "(", "ways", ",", "args", ".", "shots", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "# dists = euclidean_dist(galleryFeature,center) # [ways*unNum,ways]", "\n", "Num", "=", "galleryFeature", ".", "size", "(", "0", ")", "/", "10", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dists", "=", "euclidean_dist", "(", "galleryFeature", "[", ":", "Num", "]", ".", "cuda", "(", ")", ",", "center", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "_end", "=", "(", "i", "+", "1", ")", "*", "Num", "\n", "if", "i", "==", "9", ":", "\n", "                ", "_end", "=", "galleryFeature", ".", "size", "(", "0", ")", "\n", "", "dist", "=", "euclidean_dist", "(", "galleryFeature", "[", "i", "*", "Num", ":", "_end", "]", ".", "cuda", "(", ")", ",", "center", ")", "\n", "dists", "=", "torch", ".", "cat", "(", "(", "dists", ",", "dist", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "dists", "=", "dists", ".", "transpose", "(", "1", ",", "0", ")", "# [ways,ways*unNum]", "\n", "\n", "AImages", "=", "torch", ".", "FloatTensor", "(", "ways", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", ",", "3", ",", "224", ",", "224", ")", "\n", "ABelongs", "=", "torch", ".", "LongTensor", "(", "ways", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", ",", "1", ")", "\n", "Reals", "=", "torch", ".", "LongTensor", "(", "ways", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", ",", "1", ")", "\n", "\n", "BImages", "=", "torch", ".", "FloatTensor", "(", "ways", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", ",", "3", ",", "224", ",", "224", ")", "\n", "\n", "_", ",", "bh", "=", "torch", ".", "topk", "(", "dists", ",", "args", ".", "chooseNum", ",", "dim", "=", "1", ",", "largest", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "ways", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "args", ".", "shots", ")", ":", "\n", "\n", "            ", "AImages", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "0", "]", "=", "supportImages", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "ABelongs", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "0", "]", "=", "supportBelongs", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "Reals", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "0", "]", "=", "supportReals", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "\n", "BImages", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "0", "]", "=", "supportImages", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "augnum", ")", ":", "\n", "\n", "                ", "p", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "p", "==", "0", ":", "\n", "                    ", "AImages", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "1", "+", "k", "]", "=", "torch", ".", "flip", "(", "supportImages", "[", "i", "*", "args", ".", "shots", "+", "j", "]", ",", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "AImages", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "1", "+", "k", "]", "=", "supportImages", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "", "ABelongs", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "1", "+", "k", "]", "=", "supportBelongs", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "Reals", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "1", "+", "k", "]", "=", "supportReals", "[", "i", "*", "args", ".", "shots", "+", "j", "]", "\n", "\n", "choose", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "args", ".", "chooseNum", ")", "\n", "BImages", "[", "i", "*", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", "+", "j", "*", "(", "args", ".", "augnum", "+", "1", ")", "+", "1", "+", "k", "]", "=", "image_datasets", "[", "'test'", "]", ".", "get_image", "(", "Gallery", "[", "bh", "[", "i", "]", "[", "choose", "]", "]", ")", "\n", "# BImages[i*args.shots*(1+args.augnum)+j*(args.augnum+1)+1+k] = unImages[bh[i][choose]]", "\n", "\n", "", "", "", "return", "AImages", ",", "BImages", ",", "ABelongs", ",", "Reals", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.batchModel": [[406, 425], ["range", "model", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AInputs.size", "torch.autograd.Variable", "torch.autograd.Variable", "AInputs[].cuda", "AInputs[].cuda", "AInputs.size"], "function", ["None"], ["", "def", "batchModel", "(", "model", ",", "AInputs", ",", "requireGrad", ")", ":", "\n", "    ", "Batch", "=", "(", "AInputs", ".", "size", "(", "0", ")", "+", "args", ".", "batchSize", "-", "1", ")", "//", "args", ".", "batchSize", "\n", "First", "=", "True", "\n", "Cfeatures", "=", "1", "\n", "\n", "\n", "for", "b", "in", "range", "(", "Batch", ")", ":", "\n", "        ", "if", "b", "<", "Batch", "-", "1", ":", "\n", "            ", "midFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "(", "b", "+", "1", ")", "*", "args", ".", "batchSize", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "requireGrad", ")", ")", "\n", "", "else", ":", "\n", "            ", "midFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "AInputs", ".", "size", "(", "0", ")", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "requireGrad", ")", ")", "\n", "\n", "", "if", "First", ":", "\n", "            ", "First", "=", "False", "\n", "Cfeatures", "=", "midFeature", "\n", "", "else", ":", "\n", "            ", "Cfeatures", "=", "torch", ".", "cat", "(", "(", "Cfeatures", ",", "midFeature", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "Cfeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.train_model": [[426, 619], ["time.time", "copy.deepcopy", "print", "print", "range", "print", "print", "model.load_state_dict", "model.state_dict", "type", "galleryFeature.size", "print", "print", "print", "time.time", "model.train", "range", "numpy.random.seed", "tqdm", "info.items", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "Attention_lr_scheduler.step", "Classifier_lr_scheduler.step", "enumerate", "supportInputs.squeeze.squeeze", "supportLabels.squeeze.squeeze", "supportReals.squeeze.squeeze", "testInputs.squeeze.squeeze", "testLabels.squeeze().cuda.squeeze().cuda", "onlyBasetwoLoss.batchModel", "onlyBasetwoLoss.batchModel", "onlyBasetwoLoss.iterateMix", "range", "torch.cat.transpose", "range", "torch.cat.view().mean", "onlyBasetwoLoss.euclidean_dist", "torch.log_softmax().view", "F.log_softmax().view.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "loss_val.item", "torch.eq().float().mean.item", "logger.scalar_summary", "os.path.join", "supportInputs.squeeze.size", "F.log_softmax().view.gather().squeeze().view().mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ABReals.view().cuda.view().cuda", "clsCriterion", "clsCriterion.item", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "copy.deepcopy", "copy.deepcopy", "str", "testLabels.squeeze().cuda.squeeze", "model", "model", "model", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Weights[].view().tolist", "torch.cat.view", "torch.log_softmax", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "optimizer_attention.zero_grad", "loss_val.backward", "optimizer_attention.step", "optimizer_scale.zero_grad", "loss_val.backward", "optimizer_scale.step", "optimizer_classifier.zero_grad", "clsCriterion.backward", "optimizer_classifier.step", "model.module.state_dict", "model.state_dict", "AInputs.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "AInputs.size", "torch.autograd.Variable", "str", "F.log_softmax().view.gather().squeeze().view", "ABReals.view().cuda.view", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "str", "AInputs[].cuda", "BInputs[].cuda", "fixSquare.expand().cuda", "oneSquare.expand().cuda", "AInputs[].cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "str", "Weights[].view", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "ABReals.view().cuda.size", "BInputs[].cuda", "fixSquare.expand().cuda", "oneSquare.expand().cuda", "F.log_softmax().view.gather().squeeze", "testLabels.squeeze().cuda.view", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "fixSquare.expand", "oneSquare.expand", "fixSquare.expand", "oneSquare.expand", "F.log_softmax().view.gather", "testLabels.squeeze().cuda.view"], "function", ["home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.batchModel", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.batchModel", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.iterateMix", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.onlyBasetwoLoss.euclidean_dist", "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.None.logger.Logger.scalar_summary"], ["", "def", "train_model", "(", "model", ",", "num_epochs", "=", "25", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_loss", "=", "1000000000.0", "\n", "\n", "\n", "\n", "print", "(", "type", "(", "galleryFeature", ")", ")", "\n", "print", "(", "'Gallery size: '", ",", "galleryFeature", ".", "size", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "num_epochs", "-", "1", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "\n", "for", "phase", "in", "[", "'test'", ",", "'train'", "]", ":", "####@@@", "\n", "# for phase in [ 'test']: ###", "\n", "\n", "            ", "if", "phase", "==", "'train'", ":", "\n", "                ", "Attention_lr_scheduler", ".", "step", "(", ")", "\n", "Classifier_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "train", "(", "False", ")", "# To ban batchnorm", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_accuracy", "=", "0", "\n", "running_cls_loss", "=", "0", "\n", "running_cls_accuracy", "=", "0", "\n", "\n", "Times", "=", "0", "\n", "\n", "# Iterate over data.", "\n", "allWeight", "=", "{", "}", "\n", "for", "k", "in", "range", "(", "args", ".", "Fang", "*", "args", ".", "Fang", ")", ":", "\n", "                ", "allWeight", "[", "str", "(", "k", ")", "]", "=", "[", "]", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", ")", "\n", "\n", "for", "i", ",", "(", "supportInputs", ",", "supportLabels", ",", "supportReals", ",", "testInputs", ",", "testLabels", ",", "testReals", ")", "in", "tqdm", "(", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ")", ":", "\n", "\n", "                ", "if", "epoch", "==", "0", "and", "i", ">", "4000", ":", "\n", "                    ", "break", "\n", "\n", "", "Times", "=", "Times", "+", "1", "\n", "\n", "supportInputs", "=", "supportInputs", ".", "squeeze", "(", "0", ")", "\n", "supportLabels", "=", "supportLabels", ".", "squeeze", "(", "0", ")", "\n", "supportReals", "=", "supportReals", ".", "squeeze", "(", "0", ")", "\n", "\n", "testInputs", "=", "testInputs", ".", "squeeze", "(", "0", ")", "\n", "testLabels", "=", "testLabels", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "ways", "=", "supportInputs", ".", "size", "(", "0", ")", "/", "args", ".", "shots", "\n", "\n", "supportFeatures", "=", "batchModel", "(", "model", ",", "supportInputs", ",", "requireGrad", "=", "False", ")", "\n", "testFeatures", "=", "batchModel", "(", "model", ",", "testInputs", ",", "requireGrad", "=", "True", ")", "\n", "\n", "AInputs", ",", "BInputs", ",", "ABLabels", ",", "ABReals", "=", "iterateMix", "(", "supportInputs", ",", "supportFeatures", ",", "supportLabels", ",", "supportReals", ",", "ways", "=", "ways", ")", "\n", "\n", "\n", "Batch", "=", "(", "AInputs", ".", "size", "(", "0", ")", "+", "args", ".", "batchSize", "-", "1", ")", "//", "args", ".", "batchSize", "\n", "\n", "First", "=", "True", "\n", "Cfeatures", "=", "1", "\n", "Ccls", "=", "1", "\n", "Weights", "=", "0", "\n", "\n", "'''\n                    Pytorch has a bug.\n                    Per input's size has to be divisble by the number of GPU\n                    So make sure each input's size can be devisble by the number of available GPU\n                '''", "\n", "\n", "for", "b", "in", "range", "(", "Batch", ")", ":", "\n", "                    ", "if", "b", "<", "Batch", "-", "1", ":", "\n", "                        ", "_cfeature", ",", "weight", ",", "middleFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "(", "b", "+", "1", ")", "*", "args", ".", "batchSize", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ",", "\n", "Variable", "(", "BInputs", "[", "b", "*", "args", ".", "batchSize", ":", "(", "b", "+", "1", ")", "*", "args", ".", "batchSize", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ",", "\n", "Variable", "(", "fixSquare", ".", "expand", "(", "args", ".", "batchSize", ",", "args", ".", "Fang", "*", "args", ".", "Fang", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "Variable", "(", "oneSquare", ".", "expand", "(", "args", ".", "batchSize", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "mode", "=", "'two'", "\n", ")", "\n", "_cls", "=", "model", "(", "_cfeature", ",", "B", "=", "1", ",", "fixSquare", "=", "1", ",", "oneSquare", "=", "1", ",", "mode", "=", "'fc'", ")", "\n", "", "else", ":", "\n", "                        ", "_len", "=", "AInputs", ".", "size", "(", "0", ")", "-", "(", "b", "*", "args", ".", "batchSize", ")", "\n", "_cfeature", ",", "weight", ",", "middleFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ",", "\n", "B", "=", "Variable", "(", "BInputs", "[", "b", "*", "args", ".", "batchSize", ":", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ",", "\n", "fixSquare", "=", "Variable", "(", "fixSquare", ".", "expand", "(", "_len", ",", "args", ".", "Fang", "*", "args", ".", "Fang", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "oneSquare", "=", "Variable", "(", "oneSquare", ".", "expand", "(", "_len", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "\n", "mode", "=", "'two'", "\n", ")", "\n", "_cls", "=", "model", "(", "_cfeature", ",", "B", "=", "1", ",", "fixSquare", "=", "1", ",", "oneSquare", "=", "1", ",", "mode", "=", "'fc'", ")", "\n", "\n", "", "if", "First", ":", "\n", "                        ", "First", "=", "False", "\n", "Cfeatures", "=", "_cfeature", "\n", "Weights", "=", "weight", "\n", "Ccls", "=", "_cls", "\n", "", "else", ":", "\n", "                        ", "Cfeatures", "=", "torch", ".", "cat", "(", "(", "Cfeatures", ",", "_cfeature", ")", ",", "dim", "=", "0", ")", "\n", "Weights", "=", "torch", ".", "cat", "(", "(", "Weights", ",", "weight", ")", ",", "dim", "=", "0", ")", "\n", "Ccls", "=", "torch", ".", "cat", "(", "(", "Ccls", ",", "_cls", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "Weights", "=", "Weights", ".", "transpose", "(", "1", ",", "0", ")", "# 9*Batch", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "Fang", "*", "args", ".", "Fang", ")", ":", "\n", "                    ", "allWeight", "[", "str", "(", "k", ")", "]", "=", "allWeight", "[", "str", "(", "k", ")", "]", "+", "Weights", "[", "k", "]", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "center", "=", "Cfeatures", ".", "view", "(", "ways", ",", "args", ".", "shots", "*", "(", "1", "+", "args", ".", "augnum", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "# [ways,512]", "\n", "dists", "=", "euclidean_dist", "(", "testFeatures", ",", "center", ")", "# [ways*test_num,ways]", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", ".", "view", "(", "ways", ",", "args", ".", "test_num", ",", "-", "1", ")", "# [ways,test_num,ways]", "\n", "\n", "loss_val", "=", "-", "log_p_y", ".", "gather", "(", "2", ",", "testLabels", ".", "view", "(", "ways", ",", "args", ".", "test_num", ",", "1", ")", ")", ".", "squeeze", "(", ")", ".", "view", "(", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "2", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "testLabels", ".", "view", "(", "ways", ",", "args", ".", "test_num", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "# statistics", "\n", "running_loss", "+=", "loss_val", ".", "item", "(", ")", "\n", "running_accuracy", "+=", "acc_val", ".", "item", "(", ")", "\n", "\n", "# backward + optimize only if in training phase", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "if", "(", "args", ".", "fixAttention", "==", "0", ")", ":", "\n", "                        ", "optimizer_attention", ".", "zero_grad", "(", ")", "\n", "loss_val", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer_attention", ".", "step", "(", ")", "\n", "", "if", "args", ".", "fixScale", "==", "0", ":", "\n", "                        ", "optimizer_scale", ".", "zero_grad", "(", ")", "\n", "loss_val", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer_scale", ".", "step", "(", ")", "\n", "", "_", ",", "preds", "=", "torch", ".", "max", "(", "Ccls", ",", "1", ")", "\n", "ABReals", "=", "ABReals", ".", "view", "(", "ABReals", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "loss_cls", "=", "clsCriterion", "(", "Ccls", ",", "ABReals", ")", "\n", "if", "epoch", "!=", "0", "and", "(", "args", ".", "fixCls", "==", "0", ")", ":", "\n", "                        ", "optimizer_classifier", ".", "zero_grad", "(", ")", "\n", "loss_cls", ".", "backward", "(", ")", "\n", "optimizer_classifier", ".", "step", "(", ")", "\n", "\n", "", "running_cls_loss", "+=", "loss_cls", ".", "item", "(", ")", "\n", "running_cls_accuracy", "+=", "torch", ".", "eq", "(", "preds", ",", "ABReals", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "epoch_loss", "=", "running_loss", "/", "(", "Times", "*", "1.0", ")", "\n", "epoch_accuracy", "=", "running_accuracy", "/", "(", "Times", "*", "1.0", ")", "\n", "epoch_cls_loss", "=", "running_cls_loss", "/", "(", "Times", "*", "1.0", ")", "\n", "epoch_cls_accuracy", "=", "running_cls_accuracy", "/", "(", "Times", "*", "1.0", ")", "\n", "\n", "\n", "info", "=", "{", "\n", "phase", "+", "'loss'", ":", "epoch_loss", ",", "\n", "phase", "+", "'accuracy'", ":", "epoch_accuracy", ",", "\n", "phase", "+", "'_cls_loss'", ":", "epoch_cls_loss", ",", "\n", "phase", "+", "'_cls_accuracy'", ":", "epoch_cls_accuracy", ",", "\n", "}", "\n", "\n", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "scalar_summary", "(", "tag", ",", "value", ",", "epoch", "+", "1", ")", "\n", "\n", "", "print", "(", "'{} Loss: {:.4f} Accuracy: {:.4f}'", ".", "format", "(", "\n", "phase", ",", "epoch_loss", ",", "epoch_accuracy", ")", ")", "\n", "\n", "# print('Classify Loss: {:.4f} Accuracy: {:.4f}'.format(", "\n", "#     epoch_cls_loss,epoch_cls_accuracy))", "\n", "\n", "# deep copy the model", "\n", "if", "phase", "==", "'test'", "and", "epoch_loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "epoch_loss", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                    ", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "\n", "", "", "", "print", "(", ")", "\n", "if", "epoch", "%", "2", "==", "0", ":", "\n", "\n", "            ", "torch", ".", "save", "(", "best_model_wts", ",", "os", ".", "path", ".", "join", "(", "rootdir", ",", "'models/'", "+", "str", "(", "args", ".", "tensorname", ")", "+", "'.t7'", ")", ")", "\n", "print", "(", "'save!'", ")", "\n", "\n", "\n", "", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "\n", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "'Best test Loss: {:4f}'", ".", "format", "(", "best_loss", ")", ")", "\n", "\n", "# load best model weights", "\n", "model", ".", "load_state_dict", "(", "best_model_wts", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.__init__": [[32, 95], ["torchvision.Compose", "torchvision.Compose", "os.path.join", "oneShotBaseCls.miniImagenetOneshotDataset.__init__.loadSplit"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataroot", "=", "'/home/'", "+", "userName", "+", "'/data/miniImagenet'", ",", "type", "=", "'train'", ",", "ways", "=", "5", ",", "shots", "=", "1", ",", "test_num", "=", "1", ",", "epoch", "=", "100", ",", "galleryNum", "=", "10", ")", ":", "\n", "# oneShot setting", "\n", "        ", "self", ".", "ways", "=", "ways", "\n", "self", ".", "shots", "=", "shots", "\n", "self", ".", "test_num", "=", "test_num", "# indicate test number of each class", "\n", "self", ".", "__size", "=", "epoch", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "filenameToPILImage", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "self", ".", "galleryTransform", "=", "transforms", ".", "Compose", "(", "[", "filenameToPILImage", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "def", "loadSplit", "(", "splitFile", ")", ":", "\n", "            ", "dictLabels", "=", "{", "}", "\n", "with", "open", "(", "splitFile", ")", "as", "csvfile", ":", "\n", "                ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "next", "(", "csvreader", ",", "None", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "csvreader", ")", ":", "\n", "                    ", "filename", "=", "row", "[", "0", "]", "\n", "label", "=", "row", "[", "1", "]", "\n", "\n", "if", "label", "in", "dictLabels", ".", "keys", "(", ")", ":", "\n", "                        ", "dictLabels", "[", "label", "]", ".", "append", "(", "filename", ")", "\n", "", "else", ":", "\n", "                        ", "dictLabels", "[", "label", "]", "=", "[", "filename", "]", "\n", "", "", "", "return", "dictLabels", "\n", "\n", "", "self", ".", "miniImagenetImagesDir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'images'", ")", "\n", "\n", "self", ".", "unData", "=", "loadSplit", "(", "splitFile", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'train'", "+", "'.csv'", ")", ")", "\n", "self", ".", "data", "=", "loadSplit", "(", "splitFile", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "type", "+", "'.csv'", ")", ")", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "data", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "self", ".", "data", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "unData", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "self", ".", "unData", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "galleryNum", "=", "galleryNum", "\n", "\n", "# sample Gallery", "\n", "self", ".", "Gallery", "=", "[", "]", "\n", "numpy", ".", "random", ".", "seed", "(", "2019", ")", "\n", "for", "classes", "in", "range", "(", "len", "(", "self", ".", "unData", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "Files", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "unData", "[", "self", ".", "unData", ".", "keys", "(", ")", "[", "classes", "]", "]", ",", "self", ".", "galleryNum", ",", "False", ")", "\n", "for", "file", "in", "Files", ":", "\n", "                ", "self", ".", "Gallery", ".", "append", "(", "file", ")", "\n", "\n", "", "", "numpy", ".", "random", ".", "seed", "(", ")", "\n", "\n", "self", ".", "keyTobh", "=", "{", "}", "\n", "for", "c", "in", "range", "(", "len", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "keyTobh", "[", "self", ".", "data", ".", "keys", "(", ")", "[", "c", "]", "]", "=", "c", "\n", "\n", "", "for", "c", "in", "range", "(", "len", "(", "self", ".", "unData", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "keyTobh", "[", "self", ".", "unData", ".", "keys", "(", ")", "[", "c", "]", "]", "=", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.batchModel": [[97, 116], ["range", "model", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AInputs.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "AInputs[].cuda", "AInputs[].cuda", "AInputs.size"], "methods", ["None"], ["", "", "def", "batchModel", "(", "model", ",", "AInputs", ",", "requireGrad", ")", ":", "\n", "        ", "Batch", "=", "(", "AInputs", ".", "size", "(", "0", ")", "+", "args", ".", "batchSize", "-", "1", ")", "//", "args", ".", "batchSize", "\n", "First", "=", "True", "\n", "Cfeatures", "=", "1", "\n", "\n", "\n", "for", "b", "in", "range", "(", "Batch", ")", ":", "\n", "            ", "if", "b", "<", "Batch", "-", "1", ":", "\n", "                ", "midFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "(", "b", "+", "1", ")", "*", "args", ".", "batchSize", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "requireGrad", ")", ")", "\n", "", "else", ":", "\n", "                ", "midFeature", "=", "model", "(", "Variable", "(", "AInputs", "[", "b", "*", "args", ".", "batchSize", ":", "AInputs", ".", "size", "(", "0", ")", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "requireGrad", ")", ")", "\n", "\n", "", "if", "First", ":", "\n", "                ", "First", "=", "False", "\n", "Cfeatures", "=", "midFeature", "\n", "", "else", ":", "\n", "                ", "Cfeatures", "=", "torch", ".", "cat", "(", "(", "Cfeatures", ",", "midFeature", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "Cfeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.acquireFeature": [[117, 147], ["range", "range", "min", "oneShotBaseCls.miniImagenetOneshotDataset.transform", "image.unsqueeze.unsqueeze.unsqueeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model().cpu", "len", "len", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "model", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.cuda", "torch.cat.cuda"], "methods", ["None"], ["", "def", "acquireFeature", "(", "self", ",", "model", ",", "batchSize", "=", "128", ")", ":", "\n", "\n", "        ", "Batch", "=", "(", "len", "(", "self", ".", "Gallery", ")", "+", "batchSize", "-", "1", ")", "//", "batchSize", "\n", "First", "=", "True", "\n", "Cfeatures", "=", "1", "\n", "Images", "=", "1", "\n", "\n", "for", "b", "in", "range", "(", "Batch", ")", ":", "\n", "\n", "            ", "jFirst", "=", "True", "\n", "Images", "=", "1", "\n", "for", "j", "in", "range", "(", "b", "*", "batchSize", ",", "min", "(", "(", "b", "+", "1", ")", "*", "batchSize", ",", "len", "(", "self", ".", "Gallery", ")", ")", ")", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "self", ".", "Gallery", "[", "j", "]", ")", ")", ")", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "if", "jFirst", ":", "\n", "                    ", "jFirst", "=", "False", "\n", "Images", "=", "image", "\n", "", "else", ":", "\n", "                    ", "Images", "=", "torch", ".", "cat", "(", "(", "Images", ",", "image", ")", ",", "0", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "##", "\n", "                ", "midFeature", "=", "model", "(", "Variable", "(", "Images", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "First", ":", "\n", "                    ", "First", "=", "False", "\n", "Cfeatures", "=", "midFeature", "\n", "", "else", ":", "\n", "                    ", "Cfeatures", "=", "torch", ".", "cat", "(", "(", "Cfeatures", ",", "midFeature", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "", "return", "Cfeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.get_image": [[148, 151], ["oneShotBaseCls.miniImagenetOneshotDataset.galleryTransform", "os.path.join", "str"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "file", ")", ":", "\n", "        ", "image", "=", "self", ".", "galleryTransform", "(", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "file", ")", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.__getitem__": [[153, 195], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.random.choice", "numpy.random.choice", "range", "oneShotBaseCls.miniImagenetOneshotDataset.data.keys", "numpy.random.choice", "numpy.random.choice", "range", "numpy.random.choice", "numpy.random.choice", "range", "oneShotBaseCls.miniImagenetOneshotDataset.transform", "image.unsqueeze.unsqueeze.unsqueeze", "oneShotBaseCls.miniImagenetOneshotDataset.transform", "image.unsqueeze.unsqueeze.unsqueeze", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# ways,shots,3,224,224", "\n", "#numpy.random.seed(index+datetime.datetime.now().second + datetime.datetime.now().microsecond)", "\n", "        ", "supportFirst", "=", "True", "\n", "supportImages", "=", "1", "\n", "supportBelongs", "=", "torch", ".", "LongTensor", "(", "self", ".", "ways", "*", "self", ".", "shots", ",", "1", ")", "\n", "supportReal", "=", "torch", ".", "LongTensor", "(", "self", ".", "ways", "*", "self", ".", "shots", ",", "1", ")", "\n", "\n", "testFirst", "=", "True", "\n", "testImages", "=", "1", "\n", "testBelongs", "=", "torch", ".", "LongTensor", "(", "self", ".", "ways", "*", "self", ".", "test_num", ",", "1", ")", "\n", "testReal", "=", "torch", ".", "LongTensor", "(", "self", ".", "ways", "*", "self", ".", "test_num", ",", "1", ")", "\n", "\n", "selected_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "data", ".", "keys", "(", ")", ",", "self", ".", "ways", ",", "False", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "ways", ")", ":", "\n", "            ", "files", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "data", "[", "selected_classes", "[", "i", "]", "]", ",", "self", ".", "shots", ",", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "shots", ")", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "files", "[", "j", "]", ")", ")", ")", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "if", "supportFirst", ":", "\n", "                    ", "supportFirst", "=", "False", "\n", "supportImages", "=", "image", "\n", "", "else", ":", "\n", "                    ", "supportImages", "=", "torch", ".", "cat", "(", "(", "supportImages", ",", "image", ")", ",", "0", ")", "\n", "", "supportBelongs", "[", "i", "*", "self", ".", "shots", "+", "j", ",", "0", "]", "=", "i", "\n", "supportReal", "[", "i", "*", "self", ".", "shots", "+", "j", ",", "0", "]", "=", "self", ".", "keyTobh", "[", "selected_classes", "[", "i", "]", "]", "\n", "\n", "\n", "", "files", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "data", "[", "selected_classes", "[", "i", "]", "]", ",", "self", ".", "test_num", ",", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "test_num", ")", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "files", "[", "j", "]", ")", ")", ")", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "if", "testFirst", ":", "\n", "                    ", "testFirst", "=", "False", "\n", "testImages", "=", "image", "\n", "", "else", ":", "\n", "                    ", "testImages", "=", "torch", ".", "cat", "(", "(", "testImages", ",", "image", ")", ",", "0", ")", "\n", "", "testBelongs", "[", "i", "*", "self", ".", "test_num", "+", "j", ",", "0", "]", "=", "i", "\n", "testReal", "[", "i", "*", "self", ".", "test_num", "+", "j", ",", "0", "]", "=", "self", ".", "keyTobh", "[", "selected_classes", "[", "i", "]", "]", "\n", "\n", "\n", "", "", "return", "supportImages", ",", "supportBelongs", ",", "supportReal", ",", "testImages", ",", "testBelongs", ",", "testReal", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.miniImagenetOneshotDataset.__len__": [[196, 198], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__size", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.oneShotBaseCls.worker_init_fn": [[199, 201], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["", "", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__init__": [[37, 94], ["os.path.join", "softRandom.miniImagenetEmbeddingDataset.__init__.loadSplit"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataroot", "=", "'/home/'", "+", "userName", "+", "'/data/miniImagenet'", ",", "type", "=", "'train'", ")", ":", "\n", "        ", "if", "type", "==", "'specialtest'", ":", "\n", "            ", "type", "=", "'test'", "\n", "# Transformations to the image", "\n", "", "if", "type", "==", "'train'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "filenameToPILImage", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "filenameToPILImage", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "", "def", "loadSplit", "(", "splitFile", ")", ":", "\n", "            ", "dictLabels", "=", "{", "}", "\n", "with", "open", "(", "splitFile", ")", "as", "csvfile", ":", "\n", "                ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "next", "(", "csvreader", ",", "None", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "csvreader", ")", ":", "\n", "                    ", "filename", "=", "row", "[", "0", "]", "\n", "label", "=", "row", "[", "1", "]", "\n", "\n", "if", "label", "in", "dictLabels", ".", "keys", "(", ")", ":", "\n", "                        ", "dictLabels", "[", "label", "]", ".", "append", "(", "filename", ")", "\n", "", "else", ":", "\n", "                        ", "dictLabels", "[", "label", "]", "=", "[", "filename", "]", "\n", "", "", "", "return", "dictLabels", "\n", "\n", "", "self", ".", "miniImagenetImagesDir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'images'", ")", "\n", "\n", "self", ".", "data", "=", "loadSplit", "(", "splitFile", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "type", "+", "'.csv'", ")", ")", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "data", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "self", ".", "data", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "classes_dict", "=", "{", "self", ".", "data", ".", "keys", "(", ")", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", "}", "# map NLabel to id(0-99)", "\n", "self", ".", "bhToClass", "=", "{", "i", ":", "self", ".", "data", ".", "keys", "(", ")", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", "}", "\n", "\n", "self", ".", "Files", "=", "[", "]", "\n", "self", ".", "belong", "=", "[", "]", "\n", "\n", "for", "c", "in", "range", "(", "len", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "data", "[", "self", ".", "data", ".", "keys", "(", ")", "[", "c", "]", "]", "=", "self", ".", "data", "[", "self", ".", "data", ".", "keys", "(", ")", "[", "c", "]", "]", "[", ":", "500", "]", "\n", "for", "file", "in", "self", ".", "data", "[", "self", ".", "data", ".", "keys", "(", ")", "[", "c", "]", "]", ":", "\n", "                ", "self", ".", "Files", ".", "append", "(", "file", ")", "\n", "self", ".", "belong", ".", "append", "(", "c", ")", "\n", "\n", "", "", "self", ".", "Files", "=", "self", ".", "Files", "+", "self", ".", "Files", "\n", "self", ".", "belong", "=", "self", ".", "belong", "+", "self", ".", "belong", "\n", "self", ".", "__size", "=", "len", "(", "self", ".", "Files", ")", "\n", "\n", "print", "(", "type", ",", "self", ".", "__size", ",", "len", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__getitem__": [[95, 121], ["os.path.join", "softRandom.miniImagenetEmbeddingDataset.transform", "numpy.random.randint", "str", "softRandom.miniImagenetEmbeddingDataset.transform", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "numpy.random.uniform", "numpy.random.randint", "str", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "c", "=", "self", ".", "belong", "[", "index", "]", "\n", "File", "=", "self", ".", "Files", "[", "index", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "File", ")", ")", "\n", "images", "=", "self", ".", "transform", "(", "path", ")", "\n", "\n", "p", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "if", "p", "<", "2", ":", "\n", "# if p==0:", "\n", "#     BFile = self.Files[np.random.randint(0,len(self.Files))]", "\n", "# else:", "\n", "            ", "className", "=", "self", ".", "bhToClass", "[", "c", "]", "\n", "BFile", "=", "self", ".", "data", "[", "className", "]", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "data", "[", "className", "]", ")", ")", "]", "\n", "\n", "\n", "\n", "\n", "Bimages", "=", "self", ".", "transform", "(", "os", ".", "path", ".", "join", "(", "pathImages", ",", "str", "(", "BFile", ")", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "Fang", "*", "Fang", ")", ":", "\n", "                ", "weight", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "images", "[", ":", ",", "patch_xl", "[", "k", "]", ":", "patch_xr", "[", "k", "]", ",", "patch_yl", "[", "k", "]", ":", "patch_yr", "[", "k", "]", "]", "=", "weight", "*", "images", "[", ":", ",", "patch_xl", "[", "k", "]", ":", "patch_xr", "[", "k", "]", ",", "patch_yl", "[", "k", "]", ":", "patch_yr", "[", "k", "]", "]", "+", "(", "1", "-", "weight", ")", "*", "Bimages", "[", ":", ",", "patch_xl", "[", "k", "]", ":", "patch_xr", "[", "k", "]", ",", "patch_yl", "[", "k", "]", ":", "patch_yr", "[", "k", "]", "]", "\n", "\n", "", "", "return", "images", ",", "torch", ".", "LongTensor", "(", "[", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tankche1_IDeMe-Net.datasets.softRandom.miniImagenetEmbeddingDataset.__len__": [[122, 124], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__size", "\n", "\n"]]}