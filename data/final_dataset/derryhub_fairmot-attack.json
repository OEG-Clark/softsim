{"home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.demo.demo": [[25, 45], ["tracking_utils.utils.mkdir_if_missing", "tracking_utils.log.logger.info", "datasets.LoadVideo", "os.path.join", "os.path.join", "os.join", "track.eval_seq", "os.join", "os.system", "os.system", "tracking_utils.log.logger.info", "os.join"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.eval_seq"], ["def", "demo", "(", "opt", ")", ":", "\n", "    ", "result_root", "=", "opt", ".", "output_root", "if", "opt", ".", "output_root", "!=", "''", "else", "'.'", "\n", "mkdir_if_missing", "(", "result_root", ")", "\n", "\n", "logger", ".", "info", "(", "'Starting tracking...'", ")", "\n", "dataloader", "=", "datasets", ".", "LoadVideo", "(", "opt", ".", "input_video", ",", "opt", ".", "img_size", ")", "\n", "result_filename", "=", "os", ".", "path", ".", "join", "(", "result_root", ",", "'results.txt'", ")", "\n", "frame_rate", "=", "dataloader", ".", "frame_rate", "\n", "\n", "frame_dir", "=", "None", "if", "opt", ".", "output_format", "==", "'text'", "else", "osp", ".", "join", "(", "result_root", ",", "'frame'", ")", "\n", "try", ":", "\n", "        ", "eval_seq", "(", "opt", ",", "dataloader", ",", "'mot'", ",", "result_filename", ",", "\n", "save_dir", "=", "frame_dir", ",", "show_image", "=", "False", ",", "frame_rate", "=", "frame_rate", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logger", ".", "info", "(", "e", ")", "\n", "\n", "", "if", "opt", ".", "output_format", "==", "'video'", ":", "\n", "        ", "output_video_path", "=", "osp", ".", "join", "(", "result_root", ",", "'result.mp4'", ")", "\n", "cmd_str", "=", "'ffmpeg -f image2 -i {}/%05d.jpg -b 5000k -c:v mpeg4 {}'", ".", "format", "(", "osp", ".", "join", "(", "result_root", ",", "'frame'", ")", ",", "output_video_path", ")", "\n", "os", ".", "system", "(", "cmd_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.gen_labels_15.mkdirs": [[11, 14], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.test_det.post_process": [[30, 39], ["utils.post_process.ctdet_post_process.detach().cpu().numpy", "utils.post_process.ctdet_post_process.reshape", "utils.post_process.ctdet_post_process", "range", "utils.post_process.ctdet_post_process.copy", "numpy.array().reshape", "utils.post_process.ctdet_post_process.detach().cpu", "numpy.array", "utils.post_process.ctdet_post_process.detach"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.post_process.ctdet_post_process"], ["def", "post_process", "(", "opt", ",", "dets", ",", "meta", ")", ":", "\n", "    ", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dets", "=", "dets", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "=", "ctdet_post_process", "(", "\n", "dets", ".", "copy", "(", ")", ",", "[", "meta", "[", "'c'", "]", "]", ",", "[", "meta", "[", "'s'", "]", "]", ",", "\n", "meta", "[", "'out_height'", "]", ",", "meta", "[", "'out_width'", "]", ",", "opt", ".", "num_classes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "        ", "dets", "[", "0", "]", "[", "j", "]", "=", "np", ".", "array", "(", "dets", "[", "0", "]", "[", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "", "return", "dets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.test_det.merge_outputs": [[41, 56], ["range", "numpy.hstack", "numpy.concatenate().astype", "len", "range", "len", "numpy.partition", "numpy.concatenate", "range"], "function", ["None"], ["", "def", "merge_outputs", "(", "opt", ",", "detections", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "1", ",", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "        ", "results", "[", "j", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "detection", "[", "j", "]", "for", "detection", "in", "detections", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "scores", "=", "np", ".", "hstack", "(", "\n", "[", "results", "[", "j", "]", "[", ":", ",", "4", "]", "for", "j", "in", "range", "(", "1", ",", "opt", ".", "num_classes", "+", "1", ")", "]", ")", "\n", "if", "len", "(", "scores", ")", ">", "128", ":", "\n", "        ", "kth", "=", "len", "(", "scores", ")", "-", "128", "\n", "thresh", "=", "np", ".", "partition", "(", "scores", ",", "kth", ")", "[", "kth", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "keep_inds", "=", "(", "results", "[", "j", "]", "[", ":", ",", "4", "]", ">=", "thresh", ")", "\n", "results", "[", "j", "]", "=", "results", "[", "j", "]", "[", "keep_inds", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.test_det.test_det": [[58, 215], ["open", "json.load", "open.close", "print", "models.model.create_model", "models.model.load_model", "model.to.to", "model.to.eval", "torchvision.transforms.transforms.Compose", "datasets.dataset.jde.DetDataset", "torch.utils.data.DataLoader", "print", "enumerate", "print", "print", "torch.device", "torch.device", "numpy.zeros", "numpy.zeros", "time.time", "numpy.array", "output[].sigmoid_", "models.decode.mot_decode", "enumerate", "torchvision.transforms.transforms.ToTensor", "model.to.", "max", "post_process.unsqueeze", "test_det.post_process", "utils.utils.ap_per_class", "numpy.bincount", "numpy.bincount", "mAPs.append", "mR.append", "mP.append", "print", "imgs.cuda", "enumerate", "test_det.merge_outputs", "labels.size", "utils.utils.xywh2xyxy", "AP.mean", "R.mean", "P.mean", "numpy.sum", "numpy.sum", "numpy.sum", "int", "labels.size", "mAPs.append", "mR.append", "mP.append", "torch.FloatTensor().view", "numpy.argmax", "numpy.zeros_like", "float", "float", "mAPs.append", "mR.append", "mP.append", "utils.utils.bbox_iou", "correct.append", "detected.append", "correct.append", "torch.FloatTensor", "time.time"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.ap_per_class", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.xywh2xyxy", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.bbox_iou"], ["", "def", "test_det", "(", "\n", "opt", ",", "\n", "batch_size", "=", "12", ",", "\n", "img_size", "=", "(", "1088", ",", "608", ")", ",", "\n", "iou_thres", "=", "0.5", ",", "\n", "print_interval", "=", "40", ",", "\n", ")", ":", "\n", "    ", "data_cfg", "=", "opt", ".", "data_cfg", "\n", "f", "=", "open", "(", "data_cfg", ")", "\n", "data_cfg_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "nC", "=", "1", "\n", "test_path", "=", "data_cfg_dict", "[", "'test'", "]", "\n", "dataset_root", "=", "data_cfg_dict", "[", "'root'", "]", "\n", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "print", "(", "'Creating model...'", ")", "\n", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "model", "=", "load_model", "(", "model", ",", "opt", ".", "load_model", ")", "\n", "#model = torch.nn.DataParallel(model)", "\n", "model", "=", "model", ".", "to", "(", "opt", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Get dataloader", "\n", "transforms", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "dataset", "=", "DetDataset", "(", "dataset_root", ",", "test_path", ",", "img_size", ",", "augment", "=", "False", ",", "transforms", "=", "transforms", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "mean_mAP", ",", "mean_R", ",", "mean_P", ",", "seen", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0", "\n", "print", "(", "'%11s'", "*", "5", "%", "(", "'Image'", ",", "'Total'", ",", "'P'", ",", "'R'", ",", "'mAP'", ")", ")", "\n", "outputs", ",", "mAPs", ",", "mR", ",", "mP", ",", "TP", ",", "confidence", ",", "pred_class", ",", "target_class", ",", "jdict", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "AP_accum", ",", "AP_accum_count", "=", "np", ".", "zeros", "(", "nC", ")", ",", "np", ".", "zeros", "(", "nC", ")", "\n", "for", "batch_i", ",", "(", "imgs", ",", "targets", ",", "paths", ",", "shapes", ",", "targets_len", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "#seen += batch_size", "\n", "\n", "output", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "[", "-", "1", "]", "\n", "origin_shape", "=", "shapes", "[", "0", "]", "\n", "width", "=", "origin_shape", "[", "1", "]", "\n", "height", "=", "origin_shape", "[", "0", "]", "\n", "inp_height", "=", "img_size", "[", "1", "]", "\n", "inp_width", "=", "img_size", "[", "0", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "opt", ".", "down_ratio", "}", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid_", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "opt", ".", "reg_offset", "else", "None", "\n", "opt", ".", "K", "=", "200", "\n", "detections", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "opt", ".", "cat_spec_wh", ",", "K", "=", "opt", ".", "K", ")", "\n", "# Compute average precision for each sample", "\n", "targets", "=", "[", "targets", "[", "i", "]", "[", ":", "int", "(", "l", ")", "]", "for", "i", ",", "l", "in", "enumerate", "(", "targets_len", ")", "]", "\n", "for", "si", ",", "labels", "in", "enumerate", "(", "targets", ")", ":", "\n", "            ", "seen", "+=", "1", "\n", "#path = paths[si]", "\n", "#img0 = cv2.imread(path)", "\n", "dets", "=", "detections", "[", "si", "]", "\n", "dets", "=", "dets", ".", "unsqueeze", "(", "0", ")", "\n", "dets", "=", "post_process", "(", "opt", ",", "dets", ",", "meta", ")", "\n", "dets", "=", "merge_outputs", "(", "opt", ",", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "#remain_inds = dets[:, 4] > opt.det_thres", "\n", "#dets = dets[remain_inds]", "\n", "if", "dets", "is", "None", ":", "\n", "# If there are labels but no detections mark as zero AP", "\n", "                ", "if", "labels", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "                    ", "mAPs", ".", "append", "(", "0", ")", ",", "mR", ".", "append", "(", "0", ")", ",", "mP", ".", "append", "(", "0", ")", "\n", "", "continue", "\n", "\n", "# If no labels add number of detections as incorrect", "\n", "", "correct", "=", "[", "]", "\n", "if", "labels", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "# correct.extend([0 for _ in range(len(detections))])", "\n", "                ", "mAPs", ".", "append", "(", "0", ")", ",", "mR", ".", "append", "(", "0", ")", ",", "mP", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "target_cls", "=", "labels", "[", ":", ",", "0", "]", "\n", "\n", "# Extract target boxes as (x1, y1, x2, y2)", "\n", "target_boxes", "=", "xywh2xyxy", "(", "labels", "[", ":", ",", "2", ":", "6", "]", ")", "\n", "target_boxes", "[", ":", ",", "0", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "2", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "1", "]", "*=", "height", "\n", "target_boxes", "[", ":", ",", "3", "]", "*=", "height", "\n", "\n", "'''\n                path = paths[si]\n                img0 = cv2.imread(path)\n                img1 = cv2.imread(path)\n                for t in range(len(target_boxes)):\n                    x1 = target_boxes[t, 0]\n                    y1 = target_boxes[t, 1]\n                    x2 = target_boxes[t, 2]\n                    y2 = target_boxes[t, 3]\n                    cv2.rectangle(img0, (x1, y1), (x2, y2), (0, 255, 0), 4)\n                cv2.imwrite('gt.jpg', img0)\n                for t in range(len(dets)):\n                    x1 = dets[t, 0]\n                    y1 = dets[t, 1]\n                    x2 = dets[t, 2]\n                    y2 = dets[t, 3]\n                    cv2.rectangle(img1, (x1, y1), (x2, y2), (0, 255, 0), 4)\n                cv2.imwrite('pred.jpg', img1)\n                abc = ace\n                '''", "\n", "\n", "detected", "=", "[", "]", "\n", "for", "*", "pred_bbox", ",", "conf", "in", "dets", ":", "\n", "                    ", "obj_pred", "=", "0", "\n", "pred_bbox", "=", "torch", ".", "FloatTensor", "(", "pred_bbox", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "# Compute iou with target boxes", "\n", "iou", "=", "bbox_iou", "(", "pred_bbox", ",", "target_boxes", ",", "x1y1x2y2", "=", "True", ")", "[", "0", "]", "\n", "# Extract index of largest overlap", "\n", "best_i", "=", "np", ".", "argmax", "(", "iou", ")", "\n", "# If overlap exceeds threshold and classification is correct mark as correct", "\n", "if", "iou", "[", "best_i", "]", ">", "iou_thres", "and", "obj_pred", "==", "labels", "[", "best_i", ",", "0", "]", "and", "best_i", "not", "in", "detected", ":", "\n", "                        ", "correct", ".", "append", "(", "1", ")", "\n", "detected", ".", "append", "(", "best_i", ")", "\n", "", "else", ":", "\n", "                        ", "correct", ".", "append", "(", "0", ")", "\n", "\n", "# Compute Average Precision (AP) per class", "\n", "", "", "", "AP", ",", "AP_class", ",", "R", ",", "P", "=", "ap_per_class", "(", "tp", "=", "correct", ",", "\n", "conf", "=", "dets", "[", ":", ",", "4", "]", ",", "\n", "pred_cls", "=", "np", ".", "zeros_like", "(", "dets", "[", ":", ",", "4", "]", ")", ",", "# detections[:, 6]", "\n", "target_cls", "=", "target_cls", ")", "\n", "\n", "# Accumulate AP per class", "\n", "AP_accum_count", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "nC", ")", "\n", "AP_accum", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "nC", ",", "weights", "=", "AP", ")", "\n", "\n", "# Compute mean AP across all classes in this image, and append to image list", "\n", "mAPs", ".", "append", "(", "AP", ".", "mean", "(", ")", ")", "\n", "mR", ".", "append", "(", "R", ".", "mean", "(", ")", ")", "\n", "mP", ".", "append", "(", "P", ".", "mean", "(", ")", ")", "\n", "\n", "# Means of all images", "\n", "mean_mAP", "=", "np", ".", "sum", "(", "mAPs", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "mean_R", "=", "np", ".", "sum", "(", "mR", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "mean_P", "=", "np", ".", "sum", "(", "mP", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "\n", "", "if", "batch_i", "%", "print_interval", "==", "0", ":", "\n", "# Print image mAP and running mean mAP", "\n", "            ", "print", "(", "(", "'%11s%11s'", "+", "'%11.3g'", "*", "4", "+", "'s'", ")", "%", "\n", "(", "seen", ",", "dataloader", ".", "dataset", ".", "nF", ",", "mean_P", ",", "mean_R", ",", "mean_mAP", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "# Print mAP per class", "\n", "", "", "print", "(", "'%11s'", "*", "5", "%", "(", "'Image'", ",", "'Total'", ",", "'P'", ",", "'R'", ",", "'mAP'", ")", ")", "\n", "\n", "print", "(", "'AP: %-.4f\\n\\n'", "%", "(", "AP_accum", "[", "0", "]", "/", "(", "AP_accum_count", "[", "0", "]", "+", "1E-16", ")", ")", ")", "\n", "\n", "# Return mAP", "\n", "return", "mean_mAP", ",", "mean_R", ",", "mean_P", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.gen_data_path.gen_caltech_path": [[11, 23], ["os.path.join", "os.path.join.replace", "sorted", "f.close", "glob.glob", "open", "sorted", "glob.glob", "label.replace().replace", "print", "label.replace"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close"], ["def", "gen_caltech_path", "(", "root_path", ")", ":", "\n", "    ", "label_path", "=", "'Caltech/data/labels_with_ids'", "\n", "real_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "label_path", ")", "\n", "image_path", "=", "real_path", ".", "replace", "(", "'labels_with_ids'", ",", "'images'", ")", "\n", "images_exist", "=", "sorted", "(", "glob", ".", "glob", "(", "image_path", "+", "'/*.png'", ")", ")", "\n", "with", "open", "(", "'../src/data/caltech.all'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "labels", "=", "sorted", "(", "glob", ".", "glob", "(", "real_path", "+", "'/*.txt'", ")", ")", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "image", "=", "label", ".", "replace", "(", "'labels_with_ids'", ",", "'images'", ")", ".", "replace", "(", "'.txt'", ",", "'.png'", ")", "\n", "if", "image", "in", "images_exist", ":", "\n", "                ", "print", "(", "image", "[", "22", ":", "]", ",", "file", "=", "f", ")", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.test_emb.test_emb": [[33, 111], ["open", "json.load", "open.close", "print", "models.model.create_model", "models.model.load_model", "model.to.to", "model.to.eval", "torchvision.transforms.transforms.Compose", "datasets.dataset.jde.JointDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "enumerate", "print", "torch.stack().cuda", "torch.stack().cuda", "torch.LongTensor", "torch.LongTensor", "len", "print", "torch.normalize", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.LongTensor.expand().eq().numpy", "numpy.where", "sklearn.metrics.roc_curve", "scipy.interpolate.interp1d", "enumerate", "torch.device", "torch.device", "torch.device", "torch.device", "time.time", "models.utils._tranpose_and_gather_feat", "id_head[].contiguous", "range", "len", "len", "len", "interpolate.interp1d.", "print", "torchvision.transforms.transforms.ToTensor", "model.to.", "batch[].cuda", "math.sqrt", "math.log", "torch.normalize", "batch[].cuda", "print", "torch.stack", "torch.stack", "torch.mm().cpu", "torch.mm().cpu", "torch.LongTensor.expand().eq", "batch[].cuda", "len", "F.normalize.append", "torch.LongTensor.append", "torch.LongTensor.expand().t", "numpy.triu", "batch[].cuda", "id_target[].long", "len", "len", "torch.mm", "torch.mm", "torch.LongTensor.expand", "numpy.eye", "time.time", "F.normalize.t", "torch.LongTensor.expand", "batch[].cuda"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["def", "test_emb", "(", "\n", "opt", ",", "\n", "batch_size", "=", "16", ",", "\n", "img_size", "=", "(", "1088", ",", "608", ")", ",", "\n", "print_interval", "=", "40", ",", "\n", ")", ":", "\n", "    ", "data_cfg", "=", "opt", ".", "data_cfg", "\n", "f", "=", "open", "(", "data_cfg", ")", "\n", "data_cfg_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "nC", "=", "1", "\n", "test_paths", "=", "data_cfg_dict", "[", "'test_emb'", "]", "\n", "dataset_root", "=", "data_cfg_dict", "[", "'root'", "]", "\n", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "print", "(", "'Creating model...'", ")", "\n", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "model", "=", "load_model", "(", "model", ",", "opt", ".", "load_model", ")", "\n", "# model = torch.nn.DataParallel(model)", "\n", "model", "=", "model", ".", "to", "(", "opt", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Get dataloader", "\n", "transforms", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "dataset", "=", "JointDataset", "(", "opt", ",", "dataset_root", ",", "test_paths", ",", "img_size", ",", "augment", "=", "False", ",", "transforms", "=", "transforms", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "embedding", ",", "id_labels", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "'Extracting pedestrain features...'", ")", "\n", "for", "batch_i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "batch", "[", "'input'", "]", ".", "cuda", "(", ")", ")", "[", "-", "1", "]", "\n", "id_head", "=", "_tranpose_and_gather_feat", "(", "output", "[", "'id'", "]", ",", "batch", "[", "'ind'", "]", ".", "cuda", "(", ")", ")", "\n", "id_head", "=", "id_head", "[", "batch", "[", "'reg_mask'", "]", ".", "cuda", "(", ")", ">", "0", "]", ".", "contiguous", "(", ")", "\n", "emb_scale", "=", "math", ".", "sqrt", "(", "2", ")", "*", "math", ".", "log", "(", "opt", ".", "nID", "-", "1", ")", "\n", "id_head", "=", "emb_scale", "*", "F", ".", "normalize", "(", "id_head", ")", "\n", "id_target", "=", "batch", "[", "'ids'", "]", ".", "cuda", "(", ")", "[", "batch", "[", "'reg_mask'", "]", ".", "cuda", "(", ")", ">", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "id_head", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "len", "(", "id_head", ".", "shape", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "feat", ",", "label", "=", "id_head", "[", "i", "]", ",", "id_target", "[", "i", "]", ".", "long", "(", ")", "\n", "", "if", "label", "!=", "-", "1", ":", "\n", "                ", "embedding", ".", "append", "(", "feat", ")", "\n", "id_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "if", "batch_i", "%", "print_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Extracting {}/{}, # of instances {}, time {:.2f} sec.'", ".", "format", "(", "batch_i", ",", "len", "(", "dataloader", ")", ",", "len", "(", "id_labels", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "", "", "print", "(", "'Computing pairwise similairity...'", ")", "\n", "if", "len", "(", "embedding", ")", "<", "1", ":", "\n", "        ", "return", "None", "\n", "", "embedding", "=", "torch", ".", "stack", "(", "embedding", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "id_labels", "=", "torch", ".", "LongTensor", "(", "id_labels", ")", "\n", "n", "=", "len", "(", "id_labels", ")", "\n", "print", "(", "n", ",", "len", "(", "embedding", ")", ")", "\n", "assert", "len", "(", "embedding", ")", "==", "n", "\n", "\n", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "dim", "=", "1", ")", "\n", "pdist", "=", "torch", ".", "mm", "(", "embedding", ",", "embedding", ".", "t", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "id_labels", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "id_labels", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", ".", "numpy", "(", ")", "\n", "\n", "up_triangle", "=", "np", ".", "where", "(", "np", ".", "triu", "(", "pdist", ")", "-", "np", ".", "eye", "(", "n", ")", "*", "pdist", "!=", "0", ")", "\n", "pdist", "=", "pdist", "[", "up_triangle", "]", "\n", "gt", "=", "gt", "[", "up_triangle", "]", "\n", "\n", "far_levels", "=", "[", "1e-6", ",", "1e-5", ",", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", "]", "\n", "far", ",", "tar", ",", "threshold", "=", "metrics", ".", "roc_curve", "(", "gt", ",", "pdist", ")", "\n", "interp", "=", "interpolate", ".", "interp1d", "(", "far", ",", "tar", ")", "\n", "tar_at_far", "=", "[", "interp", "(", "x", ")", "for", "x", "in", "far_levels", "]", "\n", "for", "f", ",", "fa", "in", "enumerate", "(", "far_levels", ")", ":", "\n", "        ", "print", "(", "'TPR@FAR={:.7f}: {:.4f}'", ".", "format", "(", "fa", ",", "tar_at_far", "[", "f", "]", ")", ")", "\n", "", "return", "tar_at_far", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.train.main": [[26, 97], ["torch.manual_seed", "torch.manual_seed", "print", "datasets.dataset_factory.get_dataset", "open", "json.load", "open.close", "torchvision.transforms.transforms.Compose", "datasets.dataset_factory.get_dataset.", "opts.opts().update_dataset_info_and_set_heads", "print", "logger.Logger", "torch.device", "torch.device", "print", "models.model.create_model", "torch.optim.Adam", "torch.optim.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "Trainer", "Trainer.set_device", "range", "logger.Logger.close", "models.model.create_model.parameters", "models.model.load_model", "Trainer.train", "logger.Logger.write", "log_dict_train.items", "logger.Logger.write", "torchvision.transforms.transforms.ToTensor", "opts.opts", "logger.Logger.scalar_summary", "logger.Logger.write", "models.model.save_model", "models.model.save_model", "models.model.save_model", "print", "models.model.save_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "opts().update_dataset_info_and_set_heads.lr_step.index"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.datasets.dataset_factory.get_dataset", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.update_dataset_info_and_set_heads", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.set_device", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.save_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.save_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.save_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.save_model"], ["def", "main", "(", "opt", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "not", "opt", ".", "not_cuda_benchmark", "and", "not", "opt", ".", "test", "\n", "\n", "print", "(", "'Setting up data...'", ")", "\n", "Dataset", "=", "get_dataset", "(", "opt", ".", "dataset", ",", "opt", ".", "task", ")", "\n", "f", "=", "open", "(", "opt", ".", "data_cfg", ")", "\n", "data_config", "=", "json", ".", "load", "(", "f", ")", "\n", "trainset_paths", "=", "data_config", "[", "'train'", "]", "\n", "dataset_root", "=", "data_config", "[", "'root'", "]", "\n", "f", ".", "close", "(", ")", "\n", "transforms", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "dataset", "=", "Dataset", "(", "opt", ",", "dataset_root", ",", "trainset_paths", ",", "(", "1088", ",", "608", ")", ",", "augment", "=", "True", ",", "transforms", "=", "transforms", ")", "\n", "opt", "=", "opts", "(", ")", ".", "update_dataset_info_and_set_heads", "(", "opt", ",", "dataset", ")", "\n", "print", "(", "opt", ")", "\n", "\n", "logger", "=", "Logger", "(", "opt", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "gpus_str", "\n", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", "else", "'cpu'", ")", "\n", "\n", "print", "(", "'Creating model...'", ")", "\n", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "opt", ".", "lr", ")", "\n", "start_epoch", "=", "0", "\n", "if", "opt", ".", "load_model", "!=", "''", ":", "\n", "        ", "model", ",", "optimizer", ",", "start_epoch", "=", "load_model", "(", "\n", "model", ",", "opt", ".", "load_model", ",", "optimizer", ",", "opt", ".", "resume", ",", "opt", ".", "lr", ",", "opt", ".", "lr_step", ")", "\n", "\n", "# Get dataloader", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "print", "(", "'Starting training...'", ")", "\n", "Trainer", "=", "train_factory", "[", "opt", ".", "task", "]", "\n", "trainer", "=", "Trainer", "(", "opt", ",", "model", ",", "optimizer", ")", "\n", "trainer", ".", "set_device", "(", "opt", ".", "gpus", ",", "opt", ".", "chunk_sizes", ",", "opt", ".", "device", ")", "\n", "best", "=", "1e10", "\n", "for", "epoch", "in", "range", "(", "start_epoch", "+", "1", ",", "opt", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "mark", "=", "epoch", "if", "opt", ".", "save_all", "else", "'last'", "\n", "log_dict_train", ",", "_", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ")", "\n", "logger", ".", "write", "(", "'epoch: {} |'", ".", "format", "(", "epoch", ")", ")", "\n", "for", "k", ",", "v", "in", "log_dict_train", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "scalar_summary", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "v", ",", "epoch", ")", "\n", "logger", ".", "write", "(", "'{} {:8f} | '", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "opt", ".", "val_intervals", ">", "0", "and", "epoch", "%", "opt", ".", "val_intervals", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "mark", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_last.pth'", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ")", "\n", "", "logger", ".", "write", "(", "'\\n'", ")", "\n", "if", "epoch", "in", "opt", ".", "lr_step", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ")", "\n", "lr", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "opt", ".", "lr_step", ".", "index", "(", "epoch", ")", "+", "1", ")", ")", "\n", "print", "(", "'Drop LR to'", ",", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "save_model", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ",", "\n", "epoch", ",", "model", ",", "optimizer", ")", "\n", "", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src._init_paths.add_path": [[9, 12], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.gen_labels_20.mkdirs": [[11, 14], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.Logger.__init__": [[41, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.Logger.__call__": [[44, 47], ["print", "print"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "s", ")", ":", "\n", "        ", "print", "(", "s", ")", "\n", "print", "(", "s", ",", "file", "=", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.__init__": [[50, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_frame", ",", "iou_thr", ")", ":", "\n", "        ", "self", ".", "start_frame", "=", "start_frame", "\n", "self", ".", "iou_thr", "=", "iou_thr", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.read_result": [[54, 68], ["open", "open.readlines", "map", "list", "frame2id.setdefault", "id2frame.setdefault", "map", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "read_result", "(", "path", ")", ":", "\n", "        ", "f", "=", "open", "(", "path", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "frame2id", "=", "{", "}", "\n", "id2frame", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "frame", ",", "id", "=", "map", "(", "int", ",", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "[", ":", "2", "]", ")", "\n", "bbox", "=", "list", "(", "map", "(", "float", ",", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "[", "2", ":", "-", "4", "]", ")", ")", "\n", "frame2id", ".", "setdefault", "(", "frame", ",", "{", "}", ")", "\n", "id2frame", ".", "setdefault", "(", "id", ",", "{", "}", ")", "\n", "frame2id", "[", "frame", "]", "[", "id", "]", "=", "bbox", "\n", "id2frame", "[", "id", "]", "[", "frame", "]", "=", "bbox", "\n", "", "return", "frame2id", ",", "id2frame", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.tracks_pari": [[69, 95], ["valid_id2frame.items", "origin_frame2id.items", "dict", "numpy.array", "numpy.array", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "zip", "frame_info.items", "attack_frame2id[].items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tracks_pari", "(", "origin_frame2id", ",", "attack_frame2id", ",", "valid_id2frame", ")", ":", "\n", "        ", "tracks_pair_dic", "=", "{", "}", "\n", "for", "id", ",", "info", "in", "valid_id2frame", ".", "items", "(", ")", ":", "\n", "            ", "tracks_pair_dic", "[", "id", "]", "=", "dict", "(", "(", "frame_id", ",", "-", "1", ")", "for", "frame_id", "in", "info", "[", "'frames'", "]", ")", "\n", "\n", "", "for", "frame_id", ",", "frame_info", "in", "origin_frame2id", ".", "items", "(", ")", ":", "\n", "            ", "if", "frame_id", "not", "in", "attack_frame2id", ":", "\n", "                ", "continue", "\n", "", "origin_bbox_info", "=", "[", "[", "id", ",", "bbox", "]", "for", "id", ",", "bbox", "in", "frame_info", ".", "items", "(", ")", "]", "\n", "origin_bbox", "=", "np", ".", "array", "(", "[", "info", "[", "1", "]", "for", "info", "in", "origin_bbox_info", "]", ")", "\n", "origin_id", "=", "[", "info", "[", "0", "]", "for", "info", "in", "origin_bbox_info", "]", "\n", "attack_bbox_info", "=", "[", "[", "id", ",", "bbox", "]", "for", "id", ",", "bbox", "in", "attack_frame2id", "[", "frame_id", "]", ".", "items", "(", ")", "]", "\n", "attack_bbox", "=", "np", ".", "array", "(", "[", "info", "[", "1", "]", "for", "info", "in", "attack_bbox_info", "]", ")", "\n", "attack_id", "=", "[", "info", "[", "0", "]", "for", "info", "in", "attack_bbox_info", "]", "\n", "origin_bbox", "[", ":", ",", "2", ":", "]", "=", "origin_bbox", "[", ":", ",", "2", ":", "]", "+", "origin_bbox", "[", ":", ",", ":", "2", "]", "\n", "attack_bbox", "[", ":", ",", "2", ":", "]", "=", "attack_bbox", "[", ":", ",", "2", ":", "]", "+", "attack_bbox", "[", ":", ",", ":", "2", "]", "\n", "iou", "=", "bbox_ious", "(", "origin_bbox", ",", "attack_bbox", ")", "\n", "origin_inds", ",", "attack_inds", "=", "linear_sum_assignment", "(", "1", "-", "iou", ")", "\n", "\n", "for", "origin_ind", ",", "attack_ind", "in", "zip", "(", "origin_inds", ",", "attack_inds", ")", ":", "\n", "                ", "if", "origin_id", "[", "origin_ind", "]", "in", "valid_id2frame", "and", "iou", "[", "origin_ind", ",", "attack_ind", "]", ">", "0.5", ":", "\n", "                    ", "tracks_pair_dic", "[", "origin_id", "[", "origin_ind", "]", "]", "[", "frame_id", "]", "=", "attack_id", "[", "attack_ind", "]", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "", "return", "tracks_pair_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.get_valid_ids": [[96, 115], ["id2frame.items", "len", "eval_id.append", "list", "list.sort", "id2frame[].keys", "track.MultipleEval.eval_frame", "list", "[].append", "id2frame[].keys"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.eval_frame"], ["", "def", "get_valid_ids", "(", "self", ",", "frame2id", ",", "id2frame", ")", ":", "\n", "        ", "eval_id", "=", "[", "]", "\n", "valid_id2frame", "=", "{", "}", "\n", "for", "id", ",", "frame", "in", "id2frame", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "frame", ")", ">", "self", ".", "start_frame", ":", "\n", "                ", "eval_id", ".", "append", "(", "id", ")", "\n", "valid_frames", "=", "list", "(", "id2frame", "[", "id", "]", ".", "keys", "(", ")", ")", "\n", "valid_frames", ".", "sort", "(", ")", "\n", "for", "frame", "in", "valid_frames", "[", "10", ":", "]", ":", "\n", "                    ", "if", "self", ".", "eval_frame", "(", "frame2id", ",", "frame", ",", "id", ")", ":", "\n", "                        ", "if", "id", "not", "in", "valid_id2frame", ":", "\n", "                            ", "valid_id2frame", "[", "id", "]", "=", "{", "}", "\n", "valid_id2frame", "[", "id", "]", "[", "'frame2bbox'", "]", "=", "id2frame", "[", "id", "]", "\n", "valid_id2frame", "[", "id", "]", "[", "'frames'", "]", "=", "list", "(", "id2frame", "[", "id", "]", ".", "keys", "(", ")", ")", "\n", "valid_id2frame", "[", "id", "]", "[", "'intersect_frames'", "]", "=", "[", "frame", "]", "\n", "", "else", ":", "\n", "                            ", "valid_id2frame", "[", "id", "]", "[", "'intersect_frames'", "]", ".", "append", "(", "frame", ")", "\n", "\n", "", "", "", "", "", "return", "valid_id2frame", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.eval_frame": [[116, 131], ["numpy.array", "numpy.array", "cython_bbox.bbox_overlaps", "len", "frame2id[].items"], "methods", ["None"], ["", "def", "eval_frame", "(", "self", ",", "frame2id", ",", "frame_id", ",", "persion_id", ")", ":", "\n", "        ", "bbox", "=", "frame2id", "[", "frame_id", "]", "[", "persion_id", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "bbox", "]", ")", "\n", "bbox", "[", ":", ",", "2", ":", "]", "=", "bbox", "[", ":", ",", "2", ":", "]", "+", "bbox", "[", ":", ",", ":", "2", "]", "\n", "comp_bbox", "=", "np", ".", "array", "(", "[", "bbox", "for", "id", ",", "bbox", "in", "frame2id", "[", "frame_id", "]", ".", "items", "(", ")", "if", "id", "!=", "persion_id", "]", ")", "\n", "\n", "if", "len", "(", "comp_bbox", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "comp_bbox", "[", ":", ",", "2", ":", "]", "=", "comp_bbox", "[", ":", ",", "2", ":", "]", "+", "comp_bbox", "[", ":", ",", ":", "2", "]", "\n", "ious", "=", "bbox_ious", "(", "bbox", ",", "comp_bbox", ")", "\n", "\n", "if", "(", "ious", ">", "self", ".", "iou_thr", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.__call__": [[132, 155], ["track.MultipleEval.read_result", "track.MultipleEval.read_result", "track.MultipleEval.get_valid_ids", "track.MultipleEval.tracks_pari", "set", "set", "track.MultipleEval.items", "track.MultipleEval.keys", "track_id.remove", "len", "track_id[].index", "len", "set.add", "track_info.items", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.read_result", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.read_result", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.get_valid_ids", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.MultipleEval.tracks_pari"], ["", "def", "__call__", "(", "self", ",", "origin_path", ",", "attack_path", ")", ":", "\n", "        ", "origin_frame2id", ",", "origin_id2frame", "=", "self", ".", "read_result", "(", "origin_path", ")", "\n", "attack_frame2id", ",", "attack_id2frame", "=", "self", ".", "read_result", "(", "attack_path", ")", "\n", "\n", "valid_id2frame", "=", "self", ".", "get_valid_ids", "(", "origin_frame2id", ",", "origin_id2frame", ")", "\n", "valid_id_track_pari", "=", "self", ".", "tracks_pari", "(", "origin_frame2id", ",", "attack_frame2id", ",", "valid_id2frame", ")", "\n", "\n", "success_attack", "=", "0", "\n", "success_attack_id", "=", "set", "(", "[", "]", ")", "\n", "all_attack_id", "=", "set", "(", "valid_id_track_pari", ".", "keys", "(", ")", ")", "\n", "for", "id", ",", "track_info", "in", "valid_id_track_pari", ".", "items", "(", ")", ":", "\n", "            ", "track_id", "=", "[", "pre_track_id", "for", "frame_id", ",", "pre_track_id", "in", "track_info", ".", "items", "(", ")", "]", "\n", "while", "-", "1", "in", "track_id", ":", "\n", "                ", "track_id", ".", "remove", "(", "-", "1", ")", "\n", "", "if", "len", "(", "track_id", ")", "<", "self", ".", "start_frame", ":", "\n", "                ", "continue", "\n", "", "origin_id", "=", "track_id", "[", "self", ".", "start_frame", "-", "1", "]", "\n", "final_index", "=", "len", "(", "track_id", ")", "-", "1", "-", "track_id", "[", ":", ":", "-", "1", "]", ".", "index", "(", "origin_id", ")", "\n", "if", "final_index", "+", "1", "<", "len", "(", "track_id", ")", ":", "\n", "                ", "success_attack", "+=", "1", "\n", "success_attack_id", ".", "add", "(", "id", ")", "\n", "\n", "", "", "return", "success_attack_id", ",", "all_attack_id", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.__init__": [[158, 171], ["list", "track.TrackObject.frames.append", "map", "int", "int", "int", "numpy.array", "list.strip().split", "int", "list.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "result_lines", ",", "id", ")", ":", "\n", "        ", "self", ".", "dic", "=", "{", "}", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "frames", "=", "[", "]", "\n", "for", "line", "in", "result_lines", ":", "\n", "            ", "line", "=", "list", "(", "map", "(", "float", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "if", "int", "(", "line", "[", "1", "]", ")", "!=", "id", ":", "\n", "                ", "continue", "\n", "", "assert", "int", "(", "line", "[", "0", "]", ")", "not", "in", "self", ".", "dic", "\n", "self", ".", "frames", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "self", ".", "dic", "[", "int", "(", "line", "[", "0", "]", ")", "]", "=", "{", "\n", "'xywh'", ":", "np", ".", "array", "(", "line", "[", "2", ":", "6", "]", ")", ",", "\n", "'match'", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.getXYWH": [[173, 177], ["None"], "methods", ["None"], ["", "", "def", "getXYWH", "(", "self", ",", "frame_id", ")", ":", "\n", "        ", "if", "frame_id", "not", "in", "self", ".", "dic", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "dic", "[", "frame_id", "]", "[", "'xywh'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.updateMatch": [[178, 181], ["None"], "methods", ["None"], ["", "def", "updateMatch", "(", "self", ",", "frame_id", ",", "track", ")", ":", "\n", "        ", "assert", "frame_id", "in", "self", ".", "dic", "and", "self", ".", "dic", "[", "frame_id", "]", "[", "'match'", "]", "is", "None", "\n", "self", ".", "dic", "[", "frame_id", "]", "[", "'match'", "]", "=", "track", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.length": [[182, 185], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.__repr__": [[186, 195], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "frame_id", "in", "self", ".", "frames", ":", "\n", "            ", "if", "self", ".", "dic", "[", "frame_id", "]", "[", "'match'", "]", "is", "None", ":", "\n", "                ", "s", "+=", "f\"frame_id: {frame_id}, xywh: {self.dic[frame_id]['xywh']}, match_id: -1\\n\"", "\n", "", "else", ":", "\n", "                ", "s", "+=", "f\"frame_id: {frame_id}, xywh: {self.dic[frame_id]['xywh']}, \"", "f\"match_id: {self.dic[frame_id]['match'].id}\\n\"", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.write_results": [[197, 217], ["tracking_utils.log.logger.info", "open", "ValueError", "zip", "save_format.format", "f.write"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write"], ["", "", "def", "write_results", "(", "filename", ",", "results", ",", "data_type", ")", ":", "\n", "    ", "if", "data_type", "==", "'mot'", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "", "elif", "data_type", "==", "'kitti'", ":", "\n", "        ", "save_format", "=", "'{frame} {id} pedestrian 0 0 -10 {x1} {y1} {x2} {y2} -10 -10 -10 -1000 -1000 -1000 -10\\n'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "data_type", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "tlwhs", ",", "track_ids", "in", "results", ":", "\n", "            ", "if", "data_type", "==", "'kitti'", ":", "\n", "                ", "frame_id", "-=", "1", "\n", "", "for", "tlwh", ",", "track_id", "in", "zip", "(", "tlwhs", ",", "track_ids", ")", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "tlwh", "\n", "x2", ",", "y2", "=", "x1", "+", "w", ",", "y1", "+", "h", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "x2", "=", "x2", ",", "y2", "=", "y2", ",", "w", "=", "w", ",", "h", "=", "h", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "logger", ".", "info", "(", "'save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.show": [[219, 225], ["cv2.rectangle", "int", "int", "int", "int"], "function", ["None"], ["", "def", "show", "(", "img", ",", "dets", ")", ":", "\n", "    ", "for", "det", "in", "dets", ":", "\n", "        ", "det", "=", "det", "[", "0", "]", "\n", "img", "=", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "det", "[", "0", "]", ")", ",", "int", "(", "det", "[", "1", "]", ")", ")", ",", "(", "int", "(", "det", "[", "0", "]", "+", "det", "[", "2", "]", ")", ",", "int", "(", "det", "[", "1", "]", "+", "det", "[", "3", "]", ")", ")", ",", "\n", "color", "=", "(", "255", ",", "1", ",", "1", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeResult": [[227, 238], ["set", "open", "f.readlines", "list", "set.add", "tracks.append", "int", "sorted", "map", "int", "track.TrackObject", "list", "list.strip().split", "list.strip"], "function", ["None"], ["", "def", "decodeResult", "(", "result_filename", ")", ":", "\n", "    ", "with", "open", "(", "result_filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "ids", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "list", "(", "map", "(", "float", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "ids", ".", "add", "(", "int", "(", "line", "[", "1", "]", ")", ")", "\n", "", "tracks", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "tracks", ".", "append", "(", "TrackObject", "(", "lines", ",", "id", ")", ")", "\n", "", "return", "tracks", ",", "int", "(", "line", "[", "0", "]", ")", ",", "sorted", "(", "list", "(", "ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeTrack": [[240, 253], ["numpy.zeros", "np.append.copy", "numpy.append", "ids.append", "tracks_frame.append", "track.getXYWH", "track.getXYWH().reshape", "track.getXYWH"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.getXYWH", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.getXYWH"], ["", "def", "decodeTrack", "(", "tracks", ",", "frame", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "xywhs", "=", "np", ".", "zeros", "(", "[", "0", ",", "4", "]", ")", "\n", "tracks_frame", "=", "[", "]", "\n", "for", "track", "in", "tracks", ":", "\n", "        ", "if", "track", ".", "getXYWH", "(", "frame", ")", "is", "None", ":", "\n", "            ", "continue", "\n", "", "xywhs", "=", "np", ".", "append", "(", "xywhs", ",", "track", ".", "getXYWH", "(", "frame", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "ids", ".", "append", "(", "track", ".", "id", ")", "\n", "tracks_frame", ".", "append", "(", "track", ")", "\n", "", "tlbrs", "=", "xywhs", ".", "copy", "(", ")", "\n", "tlbrs", "[", ":", ",", "2", ":", "]", "+=", "tlbrs", "[", ":", ",", ":", "2", "]", "\n", "return", "ids", ",", "tlbrs", ",", "tracks_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.evaluate_attack": [[255, 285], ["track.decodeResult", "track.decodeResult", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "ori_track_len.reshape().repeat.reshape().repeat", "att_track_len.reshape().repeat.reshape().repeat", "track_iou.max().mean", "len", "len", "track.decodeTrack", "track.decodeTrack", "scipy.optimize.linear_sum_assignment", "zip", "len", "len", "np.zeros.sum", "ori_track_len[].sum", "np.zeros.sum", "att_track_len[].sum", "len", "len", "cython_bbox.bbox_overlaps", "ori_tracks_frame[].updateMatch", "att_tracks_frame[].updateMatch", "ori_track_len.reshape().repeat.reshape", "att_track_len.reshape().repeat.reshape", "track_iou.max", "ori_all_ids.index", "att_all_ids.index", "ori_all_ids.index", "att_all_ids.index"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeResult", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeResult", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeTrack", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.decodeTrack", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.updateMatch", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.TrackObject.updateMatch"], ["", "def", "evaluate_attack", "(", "result_filename_ori", ",", "result_filename_att", ")", ":", "\n", "    ", "ori_tracks", ",", "frames_o", ",", "ori_all_ids", "=", "decodeResult", "(", "result_filename_ori", ")", "\n", "att_tracks", ",", "frames_a", ",", "att_all_ids", "=", "decodeResult", "(", "result_filename_att", ")", "\n", "assert", "frames_a", "==", "frames_o", "\n", "frames", "=", "frames_o", "\n", "track_union", "=", "np", ".", "zeros", "(", "[", "len", "(", "ori_all_ids", ")", ",", "len", "(", "att_all_ids", ")", "]", ")", "\n", "ori_track_len", "=", "np", ".", "zeros", "(", "len", "(", "ori_all_ids", ")", ")", "\n", "att_track_len", "=", "np", ".", "zeros", "(", "len", "(", "att_all_ids", ")", ")", "\n", "for", "track", "in", "ori_tracks", ":", "\n", "        ", "ori_track_len", "[", "ori_all_ids", ".", "index", "(", "track", ".", "id", ")", "]", "=", "track", ".", "length", "\n", "", "for", "track", "in", "att_tracks", ":", "\n", "        ", "att_track_len", "[", "att_all_ids", ".", "index", "(", "track", ".", "id", ")", "]", "=", "track", ".", "length", "\n", "", "for", "frame", "in", "range", "(", "1", ",", "frames", "+", "1", ")", ":", "\n", "        ", "ori_ids", ",", "ori_tlbrs", ",", "ori_tracks_frame", "=", "decodeTrack", "(", "ori_tracks", ",", "frame", ")", "\n", "att_ids", ",", "att_tlbrs", ",", "att_tracks_frame", "=", "decodeTrack", "(", "att_tracks", ",", "frame", ")", "\n", "ious", "=", "-", "bbox_ious", "(", "ori_tlbrs", ",", "att_tlbrs", ")", "\n", "row_inds", ",", "col_inds", "=", "linear_sum_assignment", "(", "ious", ")", "\n", "for", "row_ind", ",", "col_ind", "in", "zip", "(", "row_inds", ",", "col_inds", ")", ":", "\n", "            ", "if", "ious", "[", "row_ind", ",", "col_ind", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "ori_tracks_frame", "[", "row_ind", "]", ".", "updateMatch", "(", "frame", ",", "att_tracks_frame", "[", "col_ind", "]", ")", "\n", "att_tracks_frame", "[", "col_ind", "]", ".", "updateMatch", "(", "frame", ",", "ori_tracks_frame", "[", "row_ind", "]", ")", "\n", "track_union", "[", "ori_all_ids", ".", "index", "(", "ori_ids", "[", "row_ind", "]", ")", ",", "att_all_ids", ".", "index", "(", "att_ids", "[", "col_ind", "]", ")", "]", "+=", "1", "\n", "", "", "ori_track_len", "=", "ori_track_len", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ".", "repeat", "(", "len", "(", "att_all_ids", ")", ",", "axis", "=", "1", ")", "\n", "att_track_len", "=", "att_track_len", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", ".", "repeat", "(", "len", "(", "ori_all_ids", ")", ",", "axis", "=", "0", ")", "\n", "track_iou", "=", "track_union", "/", "(", "ori_track_len", "+", "att_track_len", "-", "track_union", ")", "\n", "mean_recall", "=", "track_union", ".", "sum", "(", ")", "/", "ori_track_len", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "\n", "mean_precision", "=", "track_union", ".", "sum", "(", ")", "/", "att_track_len", "[", "0", "]", ".", "sum", "(", ")", "\n", "mean_iou", "=", "track_iou", ".", "max", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "return", "mean_recall", ",", "mean_precision", ",", "mean_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.eval_seq": [[295, 709], ["tracker.basetrack.BaseTrack.init", "set", "set", "set", "models.model.create_model", "models.model.load_model().cuda", "tracker.multitracker.JDETracker", "tracking_utils.timer.Timer", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "set.update", "track.write_results", "result_filename.replace", "print", "open", "track.Logger", "Logger.", "Logger.", "len", "len", "Logger.", "len", "Logger.", "Logger.", "Logger.", "open.close", "tracking_utils.utils.mkdir_if_missing", "tracking_utils.timer.Timer.tic", "torch.from_numpy().cuda().unsqueeze", "tracking_utils.timer.Timer.toc", "results.append", "suc_frequency_ids.keys", "set", "results_att_sg.keys", "Logger.", "Logger.", "Logger.", "Logger.", "Logger.", "Logger.", "total_attack_frame.extend", "sg_attack_frames.keys", "Logger.", "total_l2_dis.extend", "Logger.", "models.model.load_model", "tracking_utils.log.logger.info", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "tracker.multitracker.JDETracker.update", "t.tlbr_to_tlwh", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "cv2.imwrite", "suc_frequency_ids.keys", "track.write_results", "track.write_results", "list", "track.MultipleEval", "MultipleEval.", "Logger.", "Logger.", "Logger.", "Logger.", "Logger.", "Logger.", "total_attack_frame.append", "Logger.", "total_l2_dis.extend", "torch.from_numpy().cuda", "tracker.multitracker.JDETracker.update", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "path.replace", "path.replace", "sg_track_outputs.keys", "cv2.imwrite", "results_att.append", "ids.append", "np.concatenate().astype.append", "len", "numpy.concatenate().astype", "cython_bbox.bbox_overlaps", "range", "online_tlwhs.append", "online_ids.append", "set.add", "sg_track_outputs.keys", "tracking_utils.visualization.plot_tracking", "os.path.join.replace", "sg_track_outputs.keys", "os.path.join", "os.path.join", "result_filename.replace", "result_filename.replace", "sg_attack_frames.values", "result_filename.replace", "len", "len", "ids.append", "np.concatenate().astype.append", "len", "numpy.concatenate().astype", "cython_bbox.bbox_overlaps", "range", "tracker.multitracker.JDETracker.update_attack_sg", "os.path.split", "os.path.split", "os.path.split", "os.path.split", "cv2.imwrite", "results_att_sg[].append", "cv2.imwrite", "t.tlbr_to_tlwh", "path.replace", "strack.curr_tlbr.reshape", "len", "cv2.resize().astype", "tracking_utils.visualization.plot_tracking", "cv2.resize().astype", "tracking_utils.visualization.plot_tracking", "tracking_utils.visualization.plot_tracking", "cv2.imwrite", "len", "len", "sum", "len", "len", "len", "max", "torch.from_numpy", "path.replace", "strack.curr_tlbr.reshape", "len", "tracker.multitracker.JDETracker", "trackers_dic[].update_attack_sg", "l2_distance_sg[].append", "l2_distance.append", "tracker.multitracker.JDETracker.update_attack_sg_feat", "os.path.join.replace", "cv2.imwrite", "t.tlbr_to_tlwh", "online_tlwhs_att.append", "online_ids_att.append", "numpy.concatenate", "set.add", "os.path.join", "os.path.join", "len", "round", "len", "min", "len", "max", "len", "len", "dict", "len", "len", "sum", "len", "sum", "len", "numpy.concatenate", "set.add", "trackers_dic[].update_attack_sg_feat", "suc_frequency_ids.pop", "path.replace", "l2_distance.append", "tracker.multitracker.JDETracker.update_attack_sg_det", "os.path.join.replace", "online_tlwhs_att.append", "online_ids_att.append", "range", "range", "cv2.resize", "cv2.resize", "sg_attack_frames.values", "sg_attack_frames.values", "sum", "len", "zip", "len", "round", "len", "range", "range", "path.replace", "trackers_dic[].update_attack_sg_det", "path.replace", "l2_distance.append", "tracker.multitracker.JDETracker.update_attack_mt", "len", "len", "cv2.resize().astype.astype", "cv2.resize().astype.astype", "len", "sg_attack_frames.values", "sum", "len", "len", "len", "path.replace", "trackers_dic[].update_attack_sg_hj", "path.replace", "l2_distance.append", "tracker.multitracker.JDETracker.update_attack_mt_det", "len", "len", "path.replace", "trackers_dic[].update_attack_sg_cl", "RuntimeError", "set.add", "torch.cuda.empty_cache", "path.replace", "l2_distance.append", "tracker.multitracker.JDETracker.update_attack_mt_hj", "RuntimeError", "sum", "len", "len", "path.replace", "path.replace", "l2_distance.append", "path.replace", "path.replace"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.init", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.write_results", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.tic", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.toc", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.write_results", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.write_results", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_tracking", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_tracking", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_tracking", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_tracking", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_det", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_det", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_hj", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt_det", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_cl", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt_hj"], ["def", "eval_seq", "(", "opt", ",", "dataloader", ",", "data_type", ",", "result_filename", ",", "gt_dict", ",", "save_dir", "=", "None", ",", "show_image", "=", "True", ",", "frame_rate", "=", "30", ",", "\n", "msg", "=", "''", ")", ":", "\n", "    ", "BaseTrack", ".", "init", "(", ")", "\n", "need_attack_ids", "=", "set", "(", "[", "]", ")", "\n", "suc_attacked_ids", "=", "set", "(", "[", "]", ")", "\n", "frequency_ids", "=", "{", "}", "\n", "att_frequency_ids", "=", "{", "}", "\n", "trackers_dic", "=", "{", "}", "\n", "suc_frequency_ids", "=", "{", "}", "\n", "\n", "tracked_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "ad_last_info", "=", "{", "}", "\n", "\n", "track_id", "=", "{", "'track_id'", ":", "1", "}", "\n", "sg_track_ids", "=", "{", "}", "\n", "sg_attack_frames", "=", "{", "}", "\n", "attack_frames", "=", "0", "\n", "\n", "all_effective_ids", "=", "set", "(", "[", "]", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "mkdir_if_missing", "(", "save_dir", ")", "\n", "", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "model", "=", "load_model", "(", "model", ",", "opt", ".", "load_model", ")", ".", "cuda", "(", ")", "\n", "tracker", "=", "JDETracker", "(", "opt", ",", "frame_rate", "=", "frame_rate", ",", "model", "=", "model", ")", "\n", "timer", "=", "Timer", "(", ")", "\n", "results", "=", "[", "]", "\n", "results_att", "=", "[", "]", "\n", "results_att_sg", "=", "{", "}", "\n", "l2_distance", "=", "[", "]", "\n", "l2_distance_sg", "=", "{", "}", "\n", "frame_id", "=", "0", "\n", "root_r", "=", "opt", ".", "data_dir", "\n", "root_r", "+=", "'/'", "if", "root_r", "[", "-", "1", "]", "!=", "'/'", "else", "''", "\n", "root", "=", "opt", ".", "output_dir", "\n", "root", "+=", "'/'", "if", "root", "[", "-", "1", "]", "!=", "'/'", "else", "''", "\n", "imgRoot", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'image'", ")", "\n", "noiseRoot", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'noise'", ")", "\n", "\n", "for", "path", ",", "img", ",", "img0", "in", "dataloader", ":", "\n", "        ", "if", "frame_id", "%", "20", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'{}|Processing frame {} ({:.2f} fps)'", ".", "format", "(", "msg", ",", "frame_id", ",", "1.", "/", "max", "(", "1e-5", ",", "timer", ".", "average_time", ")", ")", ")", "\n", "\n", "", "sg_track_outputs", "=", "{", "}", "\n", "\n", "# run tracking", "\n", "timer", ".", "tic", "(", ")", "\n", "blob", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "opt", ".", "attack", ":", "\n", "            ", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", "and", "opt", ".", "method", "in", "[", "'ids'", ",", "'det'", ",", "'feat'", ",", "'cl'", ",", "'hijack'", "]", ":", "\n", "                ", "online_targets_ori", "=", "tracker", ".", "update", "(", "blob", ",", "img0", ",", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "track_id", "=", "track_id", ")", "\n", "dets", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "strack", "in", "online_targets_ori", ":", "\n", "                    ", "if", "strack", ".", "track_id", "not", "in", "frequency_ids", ":", "\n", "                        ", "frequency_ids", "[", "strack", ".", "track_id", "]", "=", "0", "\n", "", "frequency_ids", "[", "strack", ".", "track_id", "]", "+=", "1", "\n", "ids", ".", "append", "(", "strack", ".", "track_id", ")", "\n", "dets", ".", "append", "(", "strack", ".", "curr_tlbr", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "", "if", "len", "(", "ids", ")", ">", "0", ":", "\n", "                    ", "dets", "=", "np", ".", "concatenate", "(", "dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "ious", "=", "bbox_ious", "(", "dets", ",", "dets", ")", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", ":", "\n", "                        ", "if", "(", "ious", "[", "i", "]", ">", "tracker", ".", "ATTACK_IOU_THR", ")", ".", "sum", "(", ")", ">", "0", "and", "frequency_ids", "[", "ids", "[", "i", "]", "]", ">", "tracker", ".", "FRAME_THR", ":", "\n", "                            ", "need_attack_ids", ".", "add", "(", "ids", "[", "i", "]", ")", "\n", "\n", "", "", "", "for", "attack_id", "in", "need_attack_ids", ":", "\n", "                    ", "if", "attack_id", "in", "suc_attacked_ids", ":", "\n", "                        ", "continue", "\n", "", "if", "opt", ".", "rand", ":", "\n", "                        ", "if", "attack_id", "not", "in", "att_frequency_ids", ":", "\n", "                            ", "att_frequency_ids", "[", "attack_id", "]", "=", "0", "\n", "", "att_frequency_ids", "[", "attack_id", "]", "+=", "1", "\n", "if", "att_frequency_ids", "[", "attack_id", "]", ">", "30", ":", "\n", "                            ", "continue", "\n", "", "", "if", "attack_id", "not", "in", "trackers_dic", ":", "\n", "                        ", "trackers_dic", "[", "attack_id", "]", "=", "JDETracker", "(", "\n", "opt", ",", "\n", "frame_rate", "=", "frame_rate", ",", "\n", "tracked_stracks", "=", "tracked_stracks", ",", "\n", "lost_stracks", "=", "lost_stracks", ",", "\n", "removed_stracks", "=", "removed_stracks", ",", "\n", "frame_id", "=", "frame_id", ",", "\n", "ad_last_info", "=", "ad_last_info", ",", "\n", "model", "=", "model", "\n", ")", "\n", "sg_track_ids", "[", "attack_id", "]", "=", "{", "\n", "'origin'", ":", "{", "'track_id'", ":", "track_id", "[", "'track_id'", "]", "}", ",", "\n", "'attack'", ":", "{", "'track_id'", ":", "track_id", "[", "'track_id'", "]", "}", "\n", "}", "\n", "", "if", "opt", ".", "method", "==", "'ids'", ":", "\n", "                        ", "_", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "trackers_dic", "[", "attack_id", "]", ".", "update_attack_sg", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "track_id", "=", "sg_track_ids", "[", "attack_id", "]", "\n", ")", "\n", "", "elif", "opt", ".", "method", "==", "'feat'", ":", "\n", "                        ", "_", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "trackers_dic", "[", "\n", "attack_id", "]", ".", "update_attack_sg_feat", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "track_id", "=", "sg_track_ids", "[", "attack_id", "]", "\n", ")", "\n", "", "elif", "opt", ".", "method", "==", "'det'", ":", "\n", "                        ", "_", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "trackers_dic", "[", "attack_id", "]", ".", "update_attack_sg_det", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "track_id", "=", "sg_track_ids", "[", "attack_id", "]", "\n", ")", "\n", "", "elif", "opt", ".", "method", "==", "'hijack'", ":", "\n", "                        ", "_", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "trackers_dic", "[", "attack_id", "]", ".", "update_attack_sg_hj", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "track_id", "=", "sg_track_ids", "[", "attack_id", "]", "\n", ")", "\n", "", "elif", "opt", ".", "method", "==", "'cl'", ":", "\n", "                        ", "_", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "trackers_dic", "[", "attack_id", "]", ".", "update_attack_sg_cl", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "track_id", "=", "sg_track_ids", "[", "attack_id", "]", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "RuntimeError", "(", ")", "\n", "", "sg_track_outputs", "[", "attack_id", "]", "=", "{", "}", "\n", "sg_track_outputs", "[", "attack_id", "]", "[", "'output_stracks_att'", "]", "=", "output_stracks_att", "\n", "sg_track_outputs", "[", "attack_id", "]", "[", "'adImg'", "]", "=", "adImg", "\n", "sg_track_outputs", "[", "attack_id", "]", "[", "'noise'", "]", "=", "noise", "\n", "if", "suc", "in", "[", "1", ",", "2", "]", "and", "noise", "is", "not", "None", ":", "\n", "                        ", "if", "attack_id", "not", "in", "sg_attack_frames", ":", "\n", "                            ", "sg_attack_frames", "[", "attack_id", "]", "=", "0", "\n", "", "sg_attack_frames", "[", "attack_id", "]", "+=", "1", "\n", "", "if", "attack_id", "not", "in", "results_att_sg", ":", "\n", "                        ", "results_att_sg", "[", "attack_id", "]", "=", "[", "]", "\n", "", "if", "attack_id", "not", "in", "l2_distance_sg", ":", "\n", "                        ", "l2_distance_sg", "[", "attack_id", "]", "=", "[", "]", "\n", "", "if", "l2_dis", "is", "not", "None", ":", "\n", "                        ", "l2_distance_sg", "[", "attack_id", "]", ".", "append", "(", "l2_dis", ")", "\n", "", "if", "suc", "==", "1", ":", "\n", "                        ", "suc_frequency_ids", "[", "attack_id", "]", "=", "0", "\n", "", "elif", "suc", "==", "2", ":", "\n", "                        ", "suc_frequency_ids", ".", "pop", "(", "attack_id", ",", "None", ")", "\n", "", "elif", "suc", "==", "3", ":", "\n", "                        ", "if", "attack_id", "not", "in", "suc_frequency_ids", ":", "\n", "                            ", "suc_frequency_ids", "[", "attack_id", "]", "=", "0", "\n", "", "suc_frequency_ids", "[", "attack_id", "]", "+=", "1", "\n", "", "elif", "attack_id", "in", "suc_frequency_ids", ":", "\n", "                        ", "suc_frequency_ids", "[", "attack_id", "]", "+=", "1", "\n", "if", "suc_frequency_ids", "[", "attack_id", "]", ">", "20", ":", "\n", "                            ", "suc_attacked_ids", ".", "add", "(", "attack_id", ")", "\n", "del", "trackers_dic", "[", "attack_id", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "", "tracked_stracks", "=", "copy", ".", "deepcopy", "(", "tracker", ".", "tracked_stracks", ")", "\n", "lost_stracks", "=", "copy", ".", "deepcopy", "(", "tracker", ".", "lost_stracks", ")", "\n", "removed_stracks", "=", "copy", ".", "deepcopy", "(", "tracker", ".", "removed_stracks", ")", "\n", "ad_last_info", "=", "copy", ".", "deepcopy", "(", "tracker", ".", "ad_last_info", ")", "\n", "", "elif", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "method", "==", "'ids'", ":", "\n", "                ", "assert", "opt", ".", "attack_id", ">", "0", "\n", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "tracker", ".", "update_attack_sg", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "opt", ".", "attack_id", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "", "", "elif", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "method", "==", "'feat'", ":", "\n", "                ", "assert", "opt", ".", "attack_id", ">", "0", "\n", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "tracker", ".", "update_attack_sg_feat", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "opt", ".", "attack_id", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "", "", "elif", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "method", "==", "'det'", ":", "\n", "                ", "assert", "opt", ".", "attack_id", ">", "0", "\n", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "=", "tracker", ".", "update_attack_sg_det", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ",", "\n", "attack_id", "=", "opt", ".", "attack_id", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "", "", "elif", "opt", ".", "attack", "==", "'multiple'", "and", "opt", ".", "method", "==", "'ids'", ":", "\n", "                ", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "=", "tracker", ".", "update_attack_mt", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "attack_frames", "+=", "1", "\n", "", "", "elif", "opt", ".", "attack", "==", "'multiple'", "and", "opt", ".", "method", "==", "'det'", ":", "\n", "                ", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "=", "tracker", ".", "update_attack_mt_det", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "attack_frames", "+=", "1", "\n", "", "", "elif", "opt", ".", "attack", "==", "'multiple'", "and", "opt", ".", "method", "==", "'hijack'", ":", "\n", "                ", "online_targets_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "=", "tracker", ".", "update_attack_mt_hj", "(", "\n", "blob", ",", "\n", "img0", ",", "\n", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", "\n", ")", "\n", "if", "l2_dis", "is", "not", "None", ":", "\n", "                    ", "l2_distance", ".", "append", "(", "l2_dis", ")", "\n", "attack_frames", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", ")", "\n", "", "imgPath", "=", "os", ".", "path", ".", "join", "(", "imgRoot", ",", "path", ".", "replace", "(", "root_r", ",", "''", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "imgPath", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "noisePath", "=", "os", ".", "path", ".", "join", "(", "noiseRoot", ",", "path", ".", "replace", "(", "root_r", ",", "''", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "noisePath", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# l2_distance.append(l2_dis)", "\n", "\n", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", ":", "\n", "                ", "for", "key", "in", "sg_track_outputs", ".", "keys", "(", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "imgPath", ".", "replace", "(", "'.jpg'", ",", "f'_{key}.jpg'", ")", ",", "sg_track_outputs", "[", "key", "]", "[", "'adImg'", "]", ")", "\n", "if", "sg_track_outputs", "[", "key", "]", "[", "'noise'", "]", "is", "not", "None", ":", "\n", "                        ", "cv2", ".", "imwrite", "(", "noisePath", ".", "replace", "(", "'.jpg'", ",", "f'_{key}.jpg'", ")", ",", "sg_track_outputs", "[", "key", "]", "[", "'noise'", "]", ")", "\n", "", "online_tlwhs_att", "=", "[", "]", "\n", "online_ids_att", "=", "[", "]", "\n", "for", "t", "in", "sg_track_outputs", "[", "key", "]", "[", "'output_stracks_att'", "]", ":", "\n", "# tlwh = t.tlwh", "\n", "                        ", "tlwh", "=", "t", ".", "tlbr_to_tlwh", "(", "t", ".", "curr_tlbr", ")", "\n", "tid", "=", "t", ".", "track_id", "\n", "vertical", "=", "tlwh", "[", "2", "]", "/", "tlwh", "[", "3", "]", ">", "1.6", "\n", "if", "tlwh", "[", "2", "]", "*", "tlwh", "[", "3", "]", ">", "opt", ".", "min_box_area", "and", "not", "vertical", ":", "\n", "                            ", "online_tlwhs_att", ".", "append", "(", "tlwh", ")", "\n", "online_ids_att", ".", "append", "(", "tid", ")", "\n", "", "", "results_att_sg", "[", "key", "]", ".", "append", "(", "(", "frame_id", "+", "1", ",", "online_tlwhs_att", ",", "online_ids_att", ")", ")", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_tlwhs_att'", "]", "=", "online_tlwhs_att", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_ids_att'", "]", "=", "online_ids_att", "\n", "", "", "else", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "imgPath", ",", "adImg", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "noisePath", ",", "noise", ")", "\n", "\n", "", "online_tlwhs_att", "=", "[", "]", "\n", "online_ids_att", "=", "[", "]", "\n", "for", "t", "in", "output_stracks_att", ":", "\n", "# tlwh = t.tlwh", "\n", "                    ", "tlwh", "=", "t", ".", "tlbr_to_tlwh", "(", "t", ".", "curr_tlbr", ")", "\n", "tid", "=", "t", ".", "track_id", "\n", "vertical", "=", "tlwh", "[", "2", "]", "/", "tlwh", "[", "3", "]", ">", "1.6", "\n", "if", "tlwh", "[", "2", "]", "*", "tlwh", "[", "3", "]", ">", "opt", ".", "min_box_area", "and", "not", "vertical", ":", "\n", "                        ", "online_tlwhs_att", ".", "append", "(", "tlwh", ")", "\n", "online_ids_att", ".", "append", "(", "tid", ")", "\n", "", "", "results_att", ".", "append", "(", "(", "frame_id", "+", "1", ",", "online_tlwhs_att", ",", "online_ids_att", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "online_targets_ori", "=", "tracker", ".", "update", "(", "blob", ",", "img0", ",", "name", "=", "path", ".", "replace", "(", "root_r", ",", "''", ")", ")", "\n", "dets", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "strack", "in", "online_targets_ori", ":", "\n", "                ", "if", "strack", ".", "track_id", "not", "in", "frequency_ids", ":", "\n", "                    ", "frequency_ids", "[", "strack", ".", "track_id", "]", "=", "0", "\n", "", "frequency_ids", "[", "strack", ".", "track_id", "]", "+=", "1", "\n", "ids", ".", "append", "(", "strack", ".", "track_id", ")", "\n", "dets", ".", "append", "(", "strack", ".", "curr_tlbr", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "", "if", "len", "(", "ids", ")", ">", "0", ":", "\n", "                ", "dets", "=", "np", ".", "concatenate", "(", "dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "ious", "=", "bbox_ious", "(", "dets", ",", "dets", ")", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", ":", "\n", "                    ", "if", "(", "ious", "[", "i", "]", ">", "tracker", ".", "ATTACK_IOU_THR", ")", ".", "sum", "(", ")", ">", "0", "and", "frequency_ids", "[", "ids", "[", "i", "]", "]", ">", "tracker", ".", "FRAME_THR", ":", "\n", "                        ", "need_attack_ids", ".", "add", "(", "ids", "[", "i", "]", ")", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "", "", "", "", "online_tlwhs", "=", "[", "]", "\n", "online_ids", "=", "[", "]", "\n", "for", "t", "in", "online_targets_ori", ":", "\n", "# tlwh = t.tlwh", "\n", "            ", "tlwh", "=", "t", ".", "tlbr_to_tlwh", "(", "t", ".", "curr_tlbr", ")", "\n", "tid", "=", "t", ".", "track_id", "\n", "vertical", "=", "tlwh", "[", "2", "]", "/", "tlwh", "[", "3", "]", ">", "1.6", "\n", "if", "tlwh", "[", "2", "]", "*", "tlwh", "[", "3", "]", ">", "opt", ".", "min_box_area", "and", "not", "vertical", ":", "\n", "                ", "online_tlwhs", ".", "append", "(", "tlwh", ")", "\n", "online_ids", ".", "append", "(", "tid", ")", "\n", "", "if", "t", ".", "exist_len", ">", "10", ":", "\n", "                ", "all_effective_ids", ".", "add", "(", "t", ".", "track_id", ")", "\n", "", "", "timer", ".", "toc", "(", ")", "\n", "# save results", "\n", "results", ".", "append", "(", "(", "frame_id", "+", "1", ",", "online_tlwhs", ",", "online_ids", ")", ")", "\n", "if", "show_image", "or", "save_dir", "is", "not", "None", ":", "\n", "            ", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", ":", "\n", "                ", "for", "key", "in", "sg_track_outputs", ".", "keys", "(", ")", ":", "\n", "                    ", "adImg", "=", "sg_track_outputs", "[", "key", "]", "[", "'adImg'", "]", "\n", "adImg", "=", "cv2", ".", "resize", "(", "adImg", ".", "astype", "(", "np", ".", "float64", ")", ",", "(", "img0", ".", "shape", "[", "1", "]", ",", "img0", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_im'", "]", "=", "vis", ".", "plot_tracking", "(", "\n", "adImg", ",", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_tlwhs_att'", "]", ",", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_ids_att'", "]", ",", "\n", "frame_id", "=", "frame_id", ",", "\n", "fps", "=", "1.", "/", "timer", ".", "average_time", "\n", ")", "\n", "", "online_im", "=", "vis", ".", "plot_tracking", "(", "img0", ",", "online_tlwhs", ",", "online_ids", ",", "frame_id", "=", "frame_id", ",", "\n", "fps", "=", "1.", "/", "timer", ".", "average_time", ")", "\n", "", "elif", "opt", ".", "attack", ":", "\n", "                ", "img0", "=", "cv2", ".", "resize", "(", "adImg", ".", "astype", "(", "np", ".", "float64", ")", ",", "(", "img0", ".", "shape", "[", "1", "]", ",", "img0", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# img0 = adImg.astype(np.uint8)", "\n", "online_im", "=", "vis", ".", "plot_tracking", "(", "img0", ",", "online_tlwhs_att", ",", "online_ids_att", ",", "frame_id", "=", "frame_id", ",", "\n", "fps", "=", "1.", "/", "timer", ".", "average_time", ")", "\n", "", "else", ":", "\n", "                ", "online_im", "=", "vis", ".", "plot_tracking", "(", "img0", ",", "online_tlwhs", ",", "online_ids", ",", "frame_id", "=", "frame_id", ",", "\n", "fps", "=", "1.", "/", "timer", ".", "average_time", ")", "\n", "# if show_image:", "\n", "#     cv2.imshow('online_im', online_im)", "\n", "", "", "if", "save_dir", "is", "not", "None", ":", "\n", "            ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "imgRoot", ",", "save_dir", ".", "replace", "(", "root_r", ",", "''", ")", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", ":", "\n", "                ", "for", "key", "in", "sg_track_outputs", ".", "keys", "(", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{:05d}_{}.jpg'", ".", "format", "(", "frame_id", "+", "1", ",", "key", ")", ")", ",", "\n", "sg_track_outputs", "[", "key", "]", "[", "'online_im'", "]", ")", "\n", "", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{:05d}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", ",", "online_im", ")", "\n", "# if noise is not None:", "\n", "#     cv2.imwrite(os.path.join(save_dir, '{:05d}_ori.jpg'.format(frame_id+1)), img0)", "\n", "", "frame_id", "+=", "1", "\n", "", "for", "key", "in", "list", "(", "suc_frequency_ids", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "suc_frequency_ids", "[", "key", "]", "==", "0", ":", "\n", "            ", "del", "suc_frequency_ids", "[", "key", "]", "\n", "", "", "suc_attacked_ids", ".", "update", "(", "set", "(", "suc_frequency_ids", ".", "keys", "(", ")", ")", ")", "\n", "# save results", "\n", "write_results", "(", "result_filename", ",", "results", ",", "data_type", ")", "\n", "\n", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", ":", "\n", "        ", "for", "key", "in", "results_att_sg", ".", "keys", "(", ")", ":", "\n", "            ", "write_results", "(", "result_filename", ".", "replace", "(", "'.txt'", ",", "f'_attack_{key}.txt'", ")", ",", "results_att_sg", "[", "key", "]", ",", "data_type", ")", "\n", "", "", "elif", "opt", ".", "attack", ":", "\n", "        ", "write_results", "(", "result_filename", ".", "replace", "(", "'.txt'", ",", "'_attack.txt'", ")", ",", "results_att", ",", "data_type", ")", "\n", "\n", "", "output_file", "=", "result_filename", ".", "replace", "(", "'.txt'", ",", "'_attack_result.txt'", ")", "\n", "print", "(", "f'output file saved in {output_file}'", ")", "\n", "file", "=", "open", "(", "output_file", ",", "'w'", ")", "\n", "out_logger", "=", "Logger", "(", "file", ")", "\n", "global", "total_l2_dis", "\n", "global", "total_attack_frame", "\n", "if", "opt", ".", "attack", "==", "'single'", "and", "opt", ".", "attack_id", "==", "-", "1", ":", "\n", "        ", "out_logger", "(", "'@'", "*", "50", "+", "' single attack accuracy '", "+", "'@'", "*", "50", ")", "\n", "out_logger", "(", "f'All attacked ids is {need_attack_ids}'", ")", "\n", "out_logger", "(", "f'All successfully attacked ids is {suc_attacked_ids}'", ")", "\n", "out_logger", "(", "f'All unsuccessfully attacked ids is {need_attack_ids - suc_attacked_ids}'", ")", "\n", "out_logger", "(", "\n", "f'The accuracy is {round(100 * len(suc_attacked_ids) / len(need_attack_ids), 2) if len(need_attack_ids) else 0}% | '", "\n", "f'{len(suc_attacked_ids)}/{len(need_attack_ids)}'", ")", "\n", "out_logger", "(", "\n", "f'The attacked frames: {sg_attack_frames}\\tmin: {min(sg_attack_frames.values()) if len(need_attack_ids) else None}\\t'", "\n", "f'max: {max(sg_attack_frames.values()) if len(need_attack_ids) else None}\\tmean: {sum(sg_attack_frames.values()) / len(sg_attack_frames) if len(need_attack_ids) else None}'", ")", "\n", "global", "sg_attack_frames2ids", "\n", "total_attack_frame", ".", "extend", "(", "list", "(", "sg_attack_frames", ".", "values", "(", ")", ")", ")", "\n", "for", "key", "in", "sg_attack_frames", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sg_attack_frames", "[", "key", "]", "not", "in", "sg_attack_frames2ids", ":", "\n", "                ", "sg_attack_frames2ids", "[", "sg_attack_frames", "[", "key", "]", "]", "=", "0", "\n", "", "sg_attack_frames2ids", "[", "sg_attack_frames", "[", "key", "]", "]", "+=", "1", "\n", "", "out_logger", "(", "\n", "f'The mean L2 distance: {dict(zip(suc_attacked_ids, [sum(l2_distance_sg[k]) / len(l2_distance_sg[k]) for k in suc_attacked_ids])) if len(suc_attacked_ids) else None}'", ")", "\n", "total_l2_dis", ".", "extend", "(", "[", "sum", "(", "l2_distance_sg", "[", "k", "]", ")", "/", "len", "(", "l2_distance_sg", "[", "k", "]", ")", "for", "k", "in", "suc_attacked_ids", "]", ")", "\n", "out_logger", "(", "f'Total: Distribute of attacked frames: {sg_attack_frames2ids}'", ")", "\n", "", "elif", "opt", ".", "attack", "==", "'multiple'", ":", "\n", "        ", "eval_attack", "=", "MultipleEval", "(", "tracker", ".", "FRAME_THR", ",", "tracker", ".", "ATTACK_IOU_THR", ")", "\n", "suc_attacked_ids", ",", "need_attack_ids", "=", "eval_attack", "(", "result_filename", ",", "\n", "result_filename", ".", "replace", "(", "'.txt'", ",", "f'_attack.txt'", ")", ")", "\n", "out_logger", "(", "'@'", "*", "50", "+", "' multiple attack accuracy '", "+", "'@'", "*", "50", ")", "\n", "out_logger", "(", "f'All attacked ids is {need_attack_ids}'", ")", "\n", "out_logger", "(", "f'All successfully attacked ids is {suc_attacked_ids}'", ")", "\n", "out_logger", "(", "f'All unsuccessfully attacked ids is {need_attack_ids - suc_attacked_ids}'", ")", "\n", "out_logger", "(", "\n", "f'The accuracy is {round(100 * len(suc_attacked_ids) / len(need_attack_ids), 2) if len(need_attack_ids) else None}% | '", "\n", "f'{len(suc_attacked_ids)}/{len(need_attack_ids)}'", ")", "\n", "out_logger", "(", "f'The attacked frames: {attack_frames}'", ")", "\n", "total_attack_frame", ".", "append", "(", "attack_frames", "/", "frame_id", ")", "\n", "out_logger", "(", "f'The mean L2 distance: {sum(l2_distance) / len(l2_distance) if len(l2_distance) else None}'", ")", "\n", "total_l2_dis", ".", "extend", "(", "l2_distance", ")", "\n", "", "out_logger", "(", "'@'", "*", "50", "+", "' total summary '", "+", "'@'", "*", "50", ")", "\n", "out_logger", "(", "f'All effective ids is {all_effective_ids} | {len(all_effective_ids)}'", ")", "\n", "global", "total_eff_ids", "\n", "global", "total_attack_ids", "\n", "global", "total_suc_ids", "\n", "\n", "total_eff_ids", "+=", "len", "(", "all_effective_ids", ")", "\n", "total_attack_ids", "+=", "len", "(", "need_attack_ids", ")", "\n", "out_logger", "(", "\n", "f'Total: Effective ids: {total_attack_ids / total_eff_ids if total_eff_ids > 0 else 0} | {total_attack_ids}/{total_eff_ids}'", ")", "\n", "total_suc_ids", "+=", "len", "(", "suc_attacked_ids", ")", "\n", "out_logger", "(", "\n", "f'Total: Success rate: {total_suc_ids / total_attack_ids if total_attack_ids > 0 else 0} | {total_suc_ids}/{total_attack_ids}'", ")", "\n", "out_logger", "(", "\n", "f'Total: Mean L2 distance: {sum(total_l2_dis) / len(total_l2_dis) if len(total_l2_dis) else 0} | {len(total_l2_dis)}'", ")", "\n", "out_logger", "(", "\n", "f'Total: Mean attack frame: {sum(total_attack_frame) / len(total_attack_frame) if len(total_attack_frame) else 0}'", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "frame_id", ",", "timer", ".", "average_time", ",", "timer", ".", "calls", ",", "l2_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.main": [[711, 752], ["tracking_utils.log.logger.setLevel", "os.path.join", "os.path.join", "tracking_utils.utils.mkdir_if_missing", "enumerate", "tracking_utils.log.logger.info", "datasets.LoadImages", "os.path.join", "os.path.join", "open().read", "int", "tracking_utils.evaluation.Evaluator", "track.eval_seq", "timer_avgs.append", "timer_calls.append", "tracking_utils.log.logger.info", "os.path.join", "os.path.join", "os.join", "open", "os.path.join", "os.path.join", "open().read.find", "open().read.find", "len"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.src.track.eval_seq"], ["", "def", "main", "(", "opt", ",", "data_root", "=", "'/data/MOT16/train'", ",", "det_root", "=", "None", ",", "seqs", "=", "(", "'MOT16-05'", ",", ")", ",", "exp_name", "=", "'demo'", ",", "\n", "save_images", "=", "False", ",", "save_videos", "=", "False", ",", "show_image", "=", "True", ")", ":", "\n", "    ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "root_r", "=", "opt", ".", "data_dir", "\n", "root_r", "+=", "'/'", "if", "root_r", "[", "-", "1", "]", "!=", "'/'", "else", "''", "\n", "root", "=", "opt", ".", "output_dir", "\n", "root", "+=", "'/'", "if", "root", "[", "-", "1", "]", "!=", "'/'", "else", "''", "\n", "result_root", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "'results'", ",", "exp_name", ")", "\n", "mkdir_if_missing", "(", "result_root", ")", "\n", "data_type", "=", "'mot'", "\n", "\n", "# run tracking", "\n", "accs", "=", "[", "]", "\n", "accs_att", "=", "[", "]", "\n", "n_frame", "=", "0", "\n", "timer_avgs", ",", "timer_calls", "=", "[", "]", ",", "[", "]", "\n", "for", "seq_i", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "'..'", ",", "'outputs'", ",", "exp_name", ",", "seq", ")", "if", "save_images", "or", "save_videos", "else", "None", "\n", "logger", ".", "info", "(", "'start seq: {}'", ".", "format", "(", "seq", ")", ")", "\n", "dataloader", "=", "datasets", ".", "LoadImages", "(", "osp", ".", "join", "(", "data_root", ",", "seq", ",", "'img1'", ")", ",", "opt", ".", "img_size", ")", "\n", "result_filename", "=", "os", ".", "path", ".", "join", "(", "result_root", ",", "'{}.txt'", ".", "format", "(", "seq", ")", ")", "\n", "meta_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "seq", ",", "'seqinfo.ini'", ")", ")", ".", "read", "(", ")", "\n", "frame_rate", "=", "int", "(", "meta_info", "[", "meta_info", ".", "find", "(", "'frameRate'", ")", "+", "10", ":", "meta_info", ".", "find", "(", "'\\nseqLength'", ")", "]", ")", "\n", "evaluator", "=", "Evaluator", "(", "data_root", ",", "seq", ",", "data_type", ")", "\n", "gt_frame_dict", "=", "evaluator", ".", "gt_frame_dict", "\n", "gt_ignore_frame_dict", "=", "evaluator", ".", "gt_ignore_frame_dict", "\n", "\n", "# evaluate_attack(result_filename, result_filename.replace('.txt', '_attack.txt'))", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "nf", ",", "ta", ",", "tc", ",", "l2_distance", "=", "eval_seq", "(", "opt", ",", "dataloader", ",", "data_type", ",", "result_filename", ",", "\n", "save_dir", "=", "output_dir", ",", "show_image", "=", "show_image", ",", "frame_rate", "=", "frame_rate", ",", "\n", "gt_dict", "=", "gt_frame_dict", ",", "msg", "=", "f'{seq_i + 1}/{len(seqs)}'", ")", "\n", "\n", "n_frame", "+=", "nf", "\n", "timer_avgs", ".", "append", "(", "ta", ")", "\n", "timer_calls", ".", "append", "(", "tc", ")", "\n", "\n", "# eval", "\n", "logger", ".", "info", "(", "'Evaluate seq: {}'", ".", "format", "(", "seq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.__init__": [[15, 167], ["argparse.ArgumentParser", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument", "opts.opts.parser.add_argument"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# basic experiment setting", "\n", "self", ".", "parser", ".", "add_argument", "(", "'task'", ",", "default", "=", "'mot'", ",", "help", "=", "'mot'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'jde'", ",", "help", "=", "'jde'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--exp_id'", ",", "default", "=", "'default'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--attack'", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--attack_id'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'ids'", ",", "type", "=", "str", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--iou_thr'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hard_sample'", ",", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_f_noise'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--rand'", ",", "action", "=", "'store_true'", ")", "\n", "#self.parser.add_argument('--load_model', default='../models/ctdet_coco_dla_2x.pth',", "\n", "#help='path to pretrained model')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_model'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to pretrained model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'resume an experiment. '", "\n", "'Reloaded the optimizer parameter and '", "\n", "'set load_model to model_last.pth '", "\n", "'in the exp dir if load_model is empty.'", ")", "\n", "\n", "# system", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0, 1'", ",", "\n", "help", "=", "'-1 for CPU, use comma for multiple gpus'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'dataloader threads. 0 for single-thread.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_cuda_benchmark'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable when the input size is not fixed.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "317", ",", "\n", "help", "=", "'random seed'", ")", "# from CornerNet", "\n", "\n", "# log", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_iter'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'disable progress bar and print to screen.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hide_data_time'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not display time during training.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_all'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'save model to disk every 5 epochs.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--metric'", ",", "default", "=", "'loss'", ",", "\n", "help", "=", "'main metric to save best model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--vis_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'visualization threshold.'", ")", "\n", "\n", "# model", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "default", "=", "'dla_34'", ",", "\n", "help", "=", "'model architecture. Currently tested'", "\n", "'resdcn_34 | resdcn_50 | resfpndcn_34 |'", "\n", "'dla_34 | hrnet_32'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--head_conv'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'conv layer channels for output head'", "\n", "'0 for no conv layer'", "\n", "'-1 for default setting: '", "\n", "'256 for resnets and 256 for dla.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--down_ratio'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'output stride. Currently only supports 4.'", ")", "\n", "\n", "# input", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_res'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input height and width. -1 for default from '", "\n", "'dataset. Will be overriden by input_h | input_w'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_h'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input height. -1 for default from dataset.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_w'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'input width. -1 for default from dataset.'", ")", "\n", "\n", "# train", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'learning rate for batch size 32.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_step'", ",", "type", "=", "str", ",", "default", "=", "'20,27'", ",", "\n", "help", "=", "'drop learning rate by 10.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'total training epochs.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "'batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--master_batch_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'batch size on the master gpu.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_iters'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'default: #samples / batch_size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_intervals'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of epochs to run validation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--trainval'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include validation in training and '", "\n", "'test on test set'", ")", "\n", "\n", "# test", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--K'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'max number of output objects.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_prefetch_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not use parallal data pre-processing.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fix_res'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'fix testing resolution or keep '", "\n", "'the original resolution'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--keep_res'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'keep the original resolution'", "\n", "' during validation.'", ")", "\n", "# tracking", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_mot16'", ",", "default", "=", "False", ",", "help", "=", "'test mot16'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_mot15'", ",", "default", "=", "False", ",", "help", "=", "'val mot15'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_mot15'", ",", "default", "=", "False", ",", "help", "=", "'test mot15'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_mot16'", ",", "default", "=", "False", ",", "help", "=", "'val mot16 or mot15'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_mot17'", ",", "default", "=", "False", ",", "help", "=", "'test mot17'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_mot17'", ",", "default", "=", "False", ",", "help", "=", "'val mot17'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--val_mot20'", ",", "default", "=", "False", ",", "help", "=", "'val mot20'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_mot20'", ",", "default", "=", "False", ",", "help", "=", "'test mot20'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--conf_thres'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "help", "=", "'confidence thresh for tracking'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--det_thres'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "'confidence thresh for detection'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nms_thres'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "'iou thresh for nms'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--track_buffer'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'tracking buffer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--min-box-area'", ",", "type", "=", "float", ",", "default", "=", "200", ",", "help", "=", "'filter out tiny boxes'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input-video'", ",", "type", "=", "str", ",", "default", "=", "'../videos/MOT16-03.mp4'", ",", "help", "=", "'path to the input video'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output-format'", ",", "type", "=", "str", ",", "default", "=", "'video'", ",", "help", "=", "'video or text'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output-root'", ",", "type", "=", "str", ",", "default", "=", "'../results'", ",", "help", "=", "'expected output root path'", ")", "\n", "\n", "# mot", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_cfg'", ",", "type", "=", "str", ",", "\n", "default", "=", "'../src/lib/cfg/data.json'", ",", "\n", "help", "=", "'load data from cfg'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'/home/derry/Data/MOT'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'/home/derry/Disk/data/MOT'", ")", "\n", "\n", "# loss", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--mse_loss'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use mse loss or focal loss to train '", "\n", "'keypoint heatmaps.'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--reg_loss'", ",", "default", "=", "'l1'", ",", "\n", "help", "=", "'regression loss: sl1 | l1 | l2'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hm_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for keypoint heatmaps.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--off_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for keypoint local offsets.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--wh_weight'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'loss weight for bounding box size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--id_loss'", ",", "default", "=", "'ce'", ",", "\n", "help", "=", "'reid loss: ce | triplet'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--id_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'loss weight for id'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--reid_dim'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'feature dim for reid'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'L1(\\hat(y) / y, 1) or L1(\\hat(y), y)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dense_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply weighted regression near center or '", "\n", "'just apply regression on center point.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--cat_spec_wh'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'category specific bounding box size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--not_reg_offset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'not regress local offset.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.parse": [[168, 213], ["print", "range", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "opts.opts.parser.parse_args", "opts.opts.parser.parse_args", "int", "int", "opts.opts.chunk_sizes.append", "os.path.dirname", "os.path.join", "opts.opts.gpus.split", "opts.opts.lr_step.split", "len", "len", "opts.opts.save_dir.endswith", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "args", "=", "''", ")", ":", "\n", "    ", "if", "args", "==", "''", ":", "\n", "      ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "      ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "", "opt", ".", "gpus_str", "=", "opt", ".", "gpus", "\n", "opt", ".", "gpus", "=", "[", "int", "(", "gpu", ")", "for", "gpu", "in", "opt", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "opt", ".", "gpus", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", ")", "]", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", "else", "[", "-", "1", "]", "\n", "opt", ".", "lr_step", "=", "[", "int", "(", "i", ")", "for", "i", "in", "opt", ".", "lr_step", ".", "split", "(", "','", ")", "]", "\n", "\n", "opt", ".", "fix_res", "=", "not", "opt", ".", "keep_res", "\n", "print", "(", "'Fix size testing.'", "if", "opt", ".", "fix_res", "else", "'Keep resolution testing.'", ")", "\n", "opt", ".", "reg_offset", "=", "not", "opt", ".", "not_reg_offset", "\n", "\n", "if", "opt", ".", "head_conv", "==", "-", "1", ":", "# init default head_conv", "\n", "      ", "opt", ".", "head_conv", "=", "256", "if", "'dla'", "in", "opt", ".", "arch", "else", "256", "\n", "", "opt", ".", "pad", "=", "31", "\n", "opt", ".", "num_stacks", "=", "1", "\n", "\n", "if", "opt", ".", "trainval", ":", "\n", "      ", "opt", ".", "val_intervals", "=", "100000000", "\n", "\n", "", "if", "opt", ".", "master_batch_size", "==", "-", "1", ":", "\n", "      ", "opt", ".", "master_batch_size", "=", "opt", ".", "batch_size", "//", "len", "(", "opt", ".", "gpus", ")", "\n", "", "rest_batch_size", "=", "(", "opt", ".", "batch_size", "-", "opt", ".", "master_batch_size", ")", "\n", "opt", ".", "chunk_sizes", "=", "[", "opt", ".", "master_batch_size", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", ":", "\n", "      ", "slave_chunk_size", "=", "rest_batch_size", "//", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", "\n", "if", "i", "<", "rest_batch_size", "%", "(", "len", "(", "opt", ".", "gpus", ")", "-", "1", ")", ":", "\n", "        ", "slave_chunk_size", "+=", "1", "\n", "", "opt", ".", "chunk_sizes", ".", "append", "(", "slave_chunk_size", ")", "\n", "", "print", "(", "'training chunk_sizes:'", ",", "opt", ".", "chunk_sizes", ")", "\n", "\n", "opt", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "'..'", ")", "\n", "opt", ".", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_dir", ",", "'exp'", ",", "opt", ".", "task", ")", "\n", "opt", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "exp_dir", ",", "opt", ".", "exp_id", ")", "\n", "opt", ".", "debug_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'debug'", ")", "\n", "print", "(", "'The output will be saved to '", ",", "opt", ".", "save_dir", ")", "\n", "\n", "if", "opt", ".", "resume", "and", "opt", ".", "load_model", "==", "''", ":", "\n", "      ", "model_path", "=", "opt", ".", "save_dir", "[", ":", "-", "4", "]", "if", "opt", ".", "save_dir", ".", "endswith", "(", "'TEST'", ")", "else", "opt", ".", "save_dir", "\n", "opt", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'model_last.pth'", ")", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.update_dataset_info_and_set_heads": [[214, 241], ["max", "max", "print", "opt.heads.update"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update"], ["", "def", "update_dataset_info_and_set_heads", "(", "self", ",", "opt", ",", "dataset", ")", ":", "\n", "    ", "input_h", ",", "input_w", "=", "dataset", ".", "default_resolution", "\n", "opt", ".", "mean", ",", "opt", ".", "std", "=", "dataset", ".", "mean", ",", "dataset", ".", "std", "\n", "opt", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "\n", "# input_h(w): opt.input_h overrides opt.input_res overrides dataset default", "\n", "input_h", "=", "opt", ".", "input_res", "if", "opt", ".", "input_res", ">", "0", "else", "input_h", "\n", "input_w", "=", "opt", ".", "input_res", "if", "opt", ".", "input_res", ">", "0", "else", "input_w", "\n", "opt", ".", "input_h", "=", "opt", ".", "input_h", "if", "opt", ".", "input_h", ">", "0", "else", "input_h", "\n", "opt", ".", "input_w", "=", "opt", ".", "input_w", "if", "opt", ".", "input_w", ">", "0", "else", "input_w", "\n", "opt", ".", "output_h", "=", "opt", ".", "input_h", "//", "opt", ".", "down_ratio", "\n", "opt", ".", "output_w", "=", "opt", ".", "input_w", "//", "opt", ".", "down_ratio", "\n", "opt", ".", "input_res", "=", "max", "(", "opt", ".", "input_h", ",", "opt", ".", "input_w", ")", "\n", "opt", ".", "output_res", "=", "max", "(", "opt", ".", "output_h", ",", "opt", ".", "output_w", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'mot'", ":", "\n", "      ", "opt", ".", "heads", "=", "{", "'hm'", ":", "opt", ".", "num_classes", ",", "\n", "'wh'", ":", "2", "if", "not", "opt", ".", "cat_spec_wh", "else", "2", "*", "opt", ".", "num_classes", ",", "\n", "'id'", ":", "opt", ".", "reid_dim", "}", "\n", "if", "opt", ".", "reg_offset", ":", "\n", "        ", "opt", ".", "heads", ".", "update", "(", "{", "'reg'", ":", "2", "}", ")", "\n", "", "opt", ".", "nID", "=", "dataset", ".", "nID", "\n", "opt", ".", "img_size", "=", "(", "1088", ",", "608", ")", "\n", "", "else", ":", "\n", "      ", "assert", "0", ",", "'task not defined!'", "\n", "", "print", "(", "'heads'", ",", "opt", ".", "heads", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.init": [[242, 257], ["opts.opts.parse", "Struct", "opts.opts.update_dataset_info_and_set_heads", "entries.items", "opts.opts.__setattr__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.parse", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.opts.opts.update_dataset_info_and_set_heads"], ["", "def", "init", "(", "self", ",", "args", "=", "''", ")", ":", "\n", "    ", "default_dataset_info", "=", "{", "\n", "'mot'", ":", "{", "'default_resolution'", ":", "[", "608", ",", "1088", "]", ",", "'num_classes'", ":", "1", ",", "\n", "'mean'", ":", "[", "0.408", ",", "0.447", ",", "0.470", "]", ",", "'std'", ":", "[", "0.289", ",", "0.274", ",", "0.278", "]", ",", "\n", "'dataset'", ":", "'jde'", ",", "'nID'", ":", "14455", "}", ",", "\n", "}", "\n", "class", "Struct", ":", "\n", "      ", "def", "__init__", "(", "self", ",", "entries", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "entries", ".", "items", "(", ")", ":", "\n", "          ", "self", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "", "", "", "opt", "=", "self", ".", "parse", "(", "args", ")", "\n", "dataset", "=", "Struct", "(", "default_dataset_info", "[", "opt", ".", "task", "]", ")", "\n", "opt", ".", "dataset", "=", "dataset", ".", "dataset", "\n", "opt", "=", "self", ".", "update_dataset_info_and_set_heads", "(", "opt", ",", "dataset", ")", "\n", "return", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.__init__": [[23, 59], ["time.strftime", "dict", "os.path.join", "open", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "opt_file.write", "opt_file.write", "opt_file.write", "opt_file.write", "opt_file.write", "sorted", "tensorboardX.SummaryWriter", "os.system", "str", "dict.items", "opt_file.write", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "getattr", "dir", "torch.backends.cudnn.version", "os.path.dirname", "os.path.dirname", "name.startswith", "str", "str"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write"], ["  ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "save_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "opt", ".", "save_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "debug_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "opt", ".", "debug_dir", ")", "\n", "\n", "", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "\n", "args", "=", "dict", "(", "(", "name", ",", "getattr", "(", "opt", ",", "name", ")", ")", "for", "name", "in", "dir", "(", "opt", ")", "\n", "if", "not", "name", ".", "startswith", "(", "'_'", ")", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "      ", "opt_file", ".", "write", "(", "'==> torch version: {}\\n'", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "opt_file", ".", "write", "(", "'==> cudnn version: {}\\n'", ".", "format", "(", "\n", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "opt_file", ".", "write", "(", "'==> Cmd:\\n'", ")", "\n", "opt_file", ".", "write", "(", "str", "(", "sys", ".", "argv", ")", ")", "\n", "opt_file", ".", "write", "(", "'\\n==> Opt:\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "        ", "opt_file", ".", "write", "(", "'  %s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "\n", "", "", "log_dir", "=", "opt", ".", "save_dir", "+", "'/logs_{}'", ".", "format", "(", "time_str", ")", "\n", "if", "USE_TENSORBOARD", ":", "\n", "      ", "self", ".", "writer", "=", "tensorboardX", ".", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "", "else", ":", "\n", "      ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "", "self", ".", "log", "=", "open", "(", "log_dir", "+", "'/log.txt'", ",", "'w'", ")", "\n", "try", ":", "\n", "      ", "os", ".", "system", "(", "'cp {}/opt.txt {}/'", ".", "format", "(", "opt", ".", "save_dir", ",", "log_dir", ")", ")", "\n", "", "except", ":", "\n", "      ", "pass", "\n", "", "self", ".", "start_line", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write": [[60, 70], ["time.strftime", "logger.Logger.log.write", "logger.Logger.log.write", "logger.Logger.log.flush"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write"], ["", "def", "write", "(", "self", ",", "txt", ")", ":", "\n", "    ", "if", "self", ".", "start_line", ":", "\n", "      ", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "self", ".", "log", ".", "write", "(", "'{}: {}'", ".", "format", "(", "time_str", ",", "txt", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "log", ".", "write", "(", "txt", ")", "\n", "", "self", ".", "start_line", "=", "False", "\n", "if", "'\\n'", "in", "txt", ":", "\n", "      ", "self", ".", "start_line", "=", "True", "\n", "self", ".", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close": [[71, 73], ["logger.Logger.log.close"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.scalar_summary": [[74, 78], ["logger.Logger.writer.add_scalar"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "USE_TENSORBOARD", ":", "\n", "      ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.post_process.ctdet_post_process": [[9, 27], ["range", "image.transform_preds", "image.transform_preds", "range", "ret.append", "numpy.concatenate().tolist", "numpy.concatenate", "dets[].astype", "dets[].astype"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.transform_preds", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.transform_preds"], ["def", "ctdet_post_process", "(", "dets", ",", "c", ",", "s", ",", "h", ",", "w", ",", "num_classes", ")", ":", "\n", "# dets: batch x max_dets x dim", "\n", "# return 1-based class det dict", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "top_preds", "=", "{", "}", "\n", "dets", "[", "i", ",", ":", ",", ":", "2", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "0", ":", "2", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", "=", "transform_preds", "(", "\n", "dets", "[", "i", ",", ":", ",", "2", ":", "4", "]", ",", "c", "[", "i", "]", ",", "s", "[", "i", "]", ",", "(", "w", ",", "h", ")", ")", "\n", "classes", "=", "dets", "[", "i", ",", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "inds", "=", "(", "classes", "==", "j", ")", "\n", "top_preds", "[", "j", "+", "1", "]", "=", "np", ".", "concatenate", "(", "[", "\n", "dets", "[", "i", ",", "inds", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "dets", "[", "i", ",", "inds", ",", "4", ":", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "", "ret", ".", "append", "(", "top_preds", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.AverageMeter.__init__": [[10, 12], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.AverageMeter.update": [[19, 25], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "if", "self", ".", "count", ">", "0", ":", "\n", "          ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.xyxy2xywh": [[27, 35], ["torch.zeros", "numpy.zeros"], "function", ["None"], ["", "", "", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.xywh2xyxy": [[37, 45], ["torch.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.ap_per_class": [[46, 98], ["numpy.argsort", "numpy.unique", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "sum", "sum", "numpy.array", "np.unique.astype", "numpy.array", "numpy.array", "ap.append", "r.append", "p.append", "numpy.cumsum", "numpy.cumsum", "r.append", "p.append", "ap.append", "utils.compute_ap"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Method originally from https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:    True positives (list).\n        conf:  Objectness value from 0-1 (list).\n        pred_cls: Predicted object classes (list).\n        target_cls: True object classes (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# lists/pytorch to numpy", "\n", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "sum", "(", "target_cls", "==", "c", ")", "# Number of ground truth objects", "\n", "n_p", "=", "sum", "(", "i", ")", "# Number of predicted objects", "\n", "\n", "if", "(", "n_p", "==", "0", ")", "and", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "elif", "(", "n_p", "==", "0", ")", "or", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "np", ".", "cumsum", "(", "1", "-", "tp", "[", "i", "]", ")", "\n", "tpc", "=", "np", ".", "cumsum", "(", "tp", "[", "i", "]", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "tpc", "[", "-", "1", "]", "+", "fpc", "[", "-", "1", "]", ")", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.compute_ap": [[100, 126], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Code originally from https://github.com/rbgirshick/py-faster-rcnn.\n    # Arguments\n        recall:    The recall curve (list).\n        precision: The precision curve (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.bbox_iou": [[128, 157], ["torch.max", "torch.max", "torch.min", "torch.min", "len", "len", "b1_x1.unsqueeze", "b1_y1.unsqueeze", "b1_x2.unsqueeze", "b1_y2.unsqueeze", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "N", ",", "M", "=", "len", "(", "box1", ")", ",", "len", "(", "box2", ")", "\n", "if", "x1y1x2y2", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "\n", "# get the coordinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ".", "unsqueeze", "(", "1", ")", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ".", "unsqueeze", "(", "1", ")", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ".", "unsqueeze", "(", "1", ")", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ".", "unsqueeze", "(", "1", ")", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", ",", "0", ")", "*", "torch", ".", "clamp", "(", "inter_rect_y2", "-", "inter_rect_y1", ",", "0", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "b2_area", "=", "(", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "\n", "return", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.generate_anchors": [[159, 168], ["len", "numpy.meshgrid", "numpy.stack", "numpy.tile", "numpy.tile", "numpy.concatenate", "numpy.arange", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "generate_anchors", "(", "nGh", ",", "nGw", ",", "anchor_wh", ")", ":", "\n", "    ", "nA", "=", "len", "(", "anchor_wh", ")", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "nGh", ")", ",", "np", ".", "arange", "(", "nGw", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "mesh", "=", "np", ".", "stack", "(", "[", "xx", ",", "yy", "]", ",", "axis", "=", "0", ")", "# Shape 2, nGh, nGw", "\n", "mesh", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "mesh", ",", "axis", "=", "0", ")", ",", "(", "nA", ",", "1", ",", "1", ",", "1", ")", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_offset_mesh", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "anchor_wh", ",", "-", "1", ")", ",", "-", "1", ")", ",", "(", "1", ",", "1", ",", "nGh", ",", "nGw", ")", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_mesh", "=", "np", ".", "concatenate", "(", "(", "mesh", ",", "anchor_offset_mesh", ")", ",", "axis", "=", "1", ")", "# Shape nA x 4 x nGh x nGw", "\n", "return", "anchor_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.utils.encode_delta": [[170, 180], ["numpy.log", "numpy.log", "numpy.stack"], "function", ["None"], ["", "def", "encode_delta", "(", "gt_box_list", ",", "fg_anchor_list", ")", ":", "\n", "    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "gx", ",", "gy", ",", "gw", ",", "gh", "=", "gt_box_list", "[", ":", ",", "0", "]", ",", "gt_box_list", "[", ":", ",", "1", "]", ",", "gt_box_list", "[", ":", ",", "2", "]", ",", "gt_box_list", "[", ":", ",", "3", "]", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "np", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "np", ".", "log", "(", "gh", "/", "ph", ")", "\n", "return", "np", ".", "stack", "(", "(", "dx", ",", "dy", ",", "dw", ",", "dh", ")", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.flip": [[16, 18], ["img[].copy"], "function", ["None"], ["def", "flip", "(", "img", ")", ":", "\n", "  ", "return", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.transform_preds": [[19, 25], ["numpy.zeros", "image.get_affine_transform", "range", "image.affine_transform"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_affine_transform", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.affine_transform"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "    ", "target_coords", "=", "np", ".", "zeros", "(", "coords", ".", "shape", ")", "\n", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "0", ",", "output_size", ",", "inv", "=", "1", ")", "\n", "for", "p", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "target_coords", "[", "p", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "return", "target_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_affine_transform": [[27, 61], ["numpy.array", "image.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "image.get_3rd_point", "image.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_dir", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_3rd_point", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_3rd_point"], ["", "def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ",", "np", ".", "float32", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.affine_transform": [[63, 67], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_3rd_point": [[69, 72], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_dir": [[74, 82], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.crop": [[84, 93], ["image.get_affine_transform", "cv2.warpAffine", "int", "int"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.get_affine_transform"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "    ", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "rot", ",", "output_size", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "\n", "trans", ",", "\n", "(", "int", "(", "output_size", "[", "0", "]", ")", ",", "int", "(", "output_size", "[", "1", "]", ")", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "dst_img", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.gaussian_radius": [[95, 116], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "min"], "function", ["None"], ["", "def", "gaussian_radius", "(", "det_size", ",", "min_overlap", "=", "0.7", ")", ":", "\n", "  ", "height", ",", "width", "=", "det_size", "\n", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "np", ".", "sqrt", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", "\n", "r1", "=", "(", "b1", "+", "sq1", ")", "/", "2", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "np", ".", "sqrt", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", "\n", "r2", "=", "(", "b2", "+", "sq2", ")", "/", "2", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "np", ".", "sqrt", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "2", "\n", "return", "min", "(", "r1", ",", "r2", ",", "r3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.gaussian2D": [[118, 125], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.draw_umich_gaussian": [[126, 142], ["image.gaussian2D", "int", "int", "min", "min", "min", "min", "numpy.maximum", "min", "min"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.gaussian2D"], ["", "def", "draw_umich_gaussian", "(", "heatmap", ",", "center", ",", "radius", ",", "k", "=", "1", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "np", ".", "maximum", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.draw_dense_reg": [[143, 173], ["image.gaussian2D", "numpy.array().reshape", "numpy.ones", "int", "int", "min", "min", "min", "min", "numpy.array", "numpy.arange", "delta.reshape", "delta.reshape", "min", "min"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.gaussian2D"], ["", "def", "draw_dense_reg", "(", "regmap", ",", "heatmap", ",", "center", ",", "value", ",", "radius", ",", "is_offset", "=", "False", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "dim", "=", "value", ".", "shape", "[", "0", "]", "\n", "reg", "=", "np", ".", "ones", "(", "(", "dim", ",", "diameter", "*", "2", "+", "1", ",", "diameter", "*", "2", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "value", "\n", "if", "is_offset", "and", "dim", "==", "2", ":", "\n", "    ", "delta", "=", "np", ".", "arange", "(", "diameter", "*", "2", "+", "1", ")", "-", "radius", "\n", "reg", "[", "0", "]", "=", "reg", "[", "0", "]", "-", "delta", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "reg", "[", "1", "]", "=", "reg", "[", "1", "]", "-", "delta", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_regmap", "=", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "masked_reg", "=", "reg", "[", ":", ",", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "idx", "=", "(", "masked_gaussian", ">=", "masked_heatmap", ")", ".", "reshape", "(", "\n", "1", ",", "masked_gaussian", ".", "shape", "[", "0", "]", ",", "masked_gaussian", ".", "shape", "[", "1", "]", ")", "\n", "masked_regmap", "=", "(", "1", "-", "idx", ")", "*", "masked_regmap", "+", "idx", "*", "masked_reg", "\n", "", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "=", "masked_regmap", "\n", "return", "regmap", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.draw_msra_gaussian": [[175, 197], ["int", "int", "numpy.arange", "numpy.exp", "numpy.maximum", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["None"], ["", "def", "draw_msra_gaussian", "(", "heatmap", ",", "center", ",", "sigma", ")", ":", "\n", "  ", "tmp_size", "=", "sigma", "*", "3", "\n", "mu_x", "=", "int", "(", "center", "[", "0", "]", "+", "0.5", ")", "\n", "mu_y", "=", "int", "(", "center", "[", "1", "]", "+", "0.5", ")", "\n", "w", ",", "h", "=", "heatmap", ".", "shape", "[", "0", "]", ",", "heatmap", ".", "shape", "[", "1", "]", "\n", "ul", "=", "[", "int", "(", "mu_x", "-", "tmp_size", ")", ",", "int", "(", "mu_y", "-", "tmp_size", ")", "]", "\n", "br", "=", "[", "int", "(", "mu_x", "+", "tmp_size", "+", "1", ")", ",", "int", "(", "mu_y", "+", "tmp_size", "+", "1", ")", "]", "\n", "if", "ul", "[", "0", "]", ">=", "h", "or", "ul", "[", "1", "]", ">=", "w", "or", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ":", "\n", "    ", "return", "heatmap", "\n", "", "size", "=", "2", "*", "tmp_size", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "-", "ul", "[", "1", "]", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "np", ".", "maximum", "(", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", ",", "\n", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.grayscale": [[198, 200], ["cv2.cvtColor"], "function", ["None"], ["", "def", "grayscale", "(", "image", ")", ":", "\n", "    ", "return", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.lighting_": [[201, 204], ["data_rng.normal", "numpy.dot"], "function", ["None"], ["", "def", "lighting_", "(", "data_rng", ",", "image", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "    ", "alpha", "=", "data_rng", ".", "normal", "(", "scale", "=", "alphastd", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "image", "+=", "np", ".", "dot", "(", "eigvec", ",", "eigval", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.blend_": [[205, 209], ["None"], "function", ["None"], ["", "def", "blend_", "(", "alpha", ",", "image1", ",", "image2", ")", ":", "\n", "    ", "image1", "*=", "alpha", "\n", "image2", "*=", "(", "1", "-", "alpha", ")", "\n", "image1", "+=", "image2", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.saturation_": [[210, 213], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.blend_"], ["", "def", "saturation_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.brightness_": [[214, 217], ["data_rng.uniform"], "function", ["None"], ["", "def", "brightness_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "image", "*=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.contrast_": [[218, 221], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.blend_"], ["", "def", "contrast_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.color_aug": [[222, 231], ["random.shuffle", "image.grayscale", "grayscale.mean", "image.lighting_", "f"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.grayscale", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.lighting_"], ["", "def", "color_aug", "(", "data_rng", ",", "image", ",", "eig_val", ",", "eig_vec", ")", ":", "\n", "    ", "functions", "=", "[", "brightness_", ",", "contrast_", ",", "saturation_", "]", "\n", "random", ".", "shuffle", "(", "functions", ")", "\n", "\n", "gs", "=", "grayscale", "(", "image", ")", "\n", "gs_mean", "=", "gs", ".", "mean", "(", ")", "\n", "for", "f", "in", "functions", ":", "\n", "        ", "f", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "0.4", ")", "\n", "", "lighting_", "(", "data_rng", ",", "image", ",", "0.1", ",", "eig_val", ",", "eig_vec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.mot.MotLoss.__init__": [[25, 42], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "models.losses.FocalLoss", "models.losses.RegL1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "math.sqrt", "math.log", "models.losses.RegLoss", "models.losses.NormRegL1Loss", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "models.losses.RegWeightedL1Loss"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MotLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crit", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "if", "opt", ".", "mse_loss", "else", "FocalLoss", "(", ")", "\n", "self", ".", "crit_reg", "=", "RegL1Loss", "(", ")", "if", "opt", ".", "reg_loss", "==", "'l1'", "else", "RegLoss", "(", ")", "if", "opt", ".", "reg_loss", "==", "'sl1'", "else", "None", "\n", "self", ".", "crit_wh", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'sum'", ")", "if", "opt", ".", "dense_wh", "else", "NormRegL1Loss", "(", ")", "if", "opt", ".", "norm_wh", "else", "RegWeightedL1Loss", "(", ")", "if", "opt", ".", "cat_spec_wh", "else", "self", ".", "crit_reg", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "emb_dim", "=", "opt", ".", "reid_dim", "\n", "self", ".", "nID", "=", "opt", ".", "nID", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "emb_dim", ",", "self", ".", "nID", ")", "\n", "self", ".", "IDLoss", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "#self.TriLoss = TripletLoss()", "\n", "self", ".", "emb_scale", "=", "math", ".", "sqrt", "(", "2", ")", "*", "math", ".", "log", "(", "self", ".", "nID", "-", "1", ")", "\n", "self", ".", "s_det", "=", "nn", ".", "Parameter", "(", "-", "1.85", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "s_id", "=", "nn", ".", "Parameter", "(", "-", "1.05", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.mot.MotLoss.forward": [[43, 89], ["range", "models.utils._sigmoid", "mot.MotLoss.crit", "models.utils._tranpose_and_gather_feat", "id_head[].contiguous", "mot.MotLoss.classifier().contiguous", "mot.MotLoss.IDLoss", "mot.MotLoss.crit_reg", "torch.normalize", "torch.normalize", "torch.normalize", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "batch[].sum", "mot.MotLoss.crit_reg", "mot.MotLoss.classifier", "mot.MotLoss.crit_wh"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._sigmoid", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "batch", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "hm_loss", ",", "wh_loss", ",", "off_loss", ",", "id_loss", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "s", "in", "range", "(", "opt", ".", "num_stacks", ")", ":", "\n", "            ", "output", "=", "outputs", "[", "s", "]", "\n", "if", "not", "opt", ".", "mse_loss", ":", "\n", "                ", "output", "[", "'hm'", "]", "=", "_sigmoid", "(", "output", "[", "'hm'", "]", ")", "\n", "\n", "", "hm_loss", "+=", "self", ".", "crit", "(", "output", "[", "'hm'", "]", ",", "batch", "[", "'hm'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "if", "opt", ".", "wh_weight", ">", "0", ":", "\n", "                ", "if", "opt", ".", "dense_wh", ":", "\n", "                    ", "mask_weight", "=", "batch", "[", "'dense_wh_mask'", "]", ".", "sum", "(", ")", "+", "1e-4", "\n", "wh_loss", "+=", "(", "\n", "self", ".", "crit_wh", "(", "output", "[", "'wh'", "]", "*", "batch", "[", "'dense_wh_mask'", "]", ",", "\n", "batch", "[", "'dense_wh'", "]", "*", "batch", "[", "'dense_wh_mask'", "]", ")", "/", "\n", "mask_weight", ")", "/", "opt", ".", "num_stacks", "\n", "", "else", ":", "\n", "                    ", "wh_loss", "+=", "self", ".", "crit_reg", "(", "\n", "output", "[", "'wh'", "]", ",", "batch", "[", "'reg_mask'", "]", ",", "\n", "batch", "[", "'ind'", "]", ",", "batch", "[", "'wh'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "\n", "", "", "if", "opt", ".", "reg_offset", "and", "opt", ".", "off_weight", ">", "0", ":", "\n", "                ", "off_loss", "+=", "self", ".", "crit_reg", "(", "output", "[", "'reg'", "]", ",", "batch", "[", "'reg_mask'", "]", ",", "\n", "batch", "[", "'ind'", "]", ",", "batch", "[", "'reg'", "]", ")", "/", "opt", ".", "num_stacks", "\n", "\n", "", "if", "opt", ".", "id_weight", ">", "0", ":", "\n", "                ", "id_head", "=", "_tranpose_and_gather_feat", "(", "output", "[", "'id'", "]", ",", "batch", "[", "'ind'", "]", ")", "\n", "id_head", "=", "id_head", "[", "batch", "[", "'reg_mask'", "]", ">", "0", "]", ".", "contiguous", "(", ")", "\n", "id_head", "=", "self", ".", "emb_scale", "*", "F", ".", "normalize", "(", "id_head", ")", "\n", "id_target", "=", "batch", "[", "'ids'", "]", "[", "batch", "[", "'reg_mask'", "]", ">", "0", "]", "\n", "id_output", "=", "self", ".", "classifier", "(", "id_head", ")", ".", "contiguous", "(", ")", "\n", "id_loss", "+=", "self", ".", "IDLoss", "(", "id_output", ",", "id_target", ")", "\n", "#id_loss += self.IDLoss(id_output, id_target) + self.TriLoss(id_head, id_target)", "\n", "\n", "#loss = opt.hm_weight * hm_loss + opt.wh_weight * wh_loss + opt.off_weight * off_loss + opt.id_weight * id_loss", "\n", "\n", "", "", "det_loss", "=", "opt", ".", "hm_weight", "*", "hm_loss", "+", "opt", ".", "wh_weight", "*", "wh_loss", "+", "opt", ".", "off_weight", "*", "off_loss", "\n", "\n", "loss", "=", "torch", ".", "exp", "(", "-", "self", ".", "s_det", ")", "*", "det_loss", "+", "torch", ".", "exp", "(", "-", "self", ".", "s_id", ")", "*", "id_loss", "+", "(", "self", ".", "s_det", "+", "self", ".", "s_id", ")", "\n", "loss", "*=", "0.5", "\n", "\n", "#print(loss, hm_loss, wh_loss, off_loss, id_loss)", "\n", "\n", "loss_stats", "=", "{", "'loss'", ":", "loss", ",", "'hm_loss'", ":", "hm_loss", ",", "\n", "'wh_loss'", ":", "wh_loss", ",", "'off_loss'", ":", "off_loss", ",", "'id_loss'", ":", "id_loss", "}", "\n", "return", "loss", ",", "loss_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.mot.MotTrainer.__init__": [[92, 94], ["base_trainer.BaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "super", "(", "MotTrainer", ",", "self", ")", ".", "__init__", "(", "opt", ",", "model", ",", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.mot.MotTrainer._get_losses": [[95, 99], ["mot.MotLoss"], "methods", ["None"], ["", "def", "_get_losses", "(", "self", ",", "opt", ")", ":", "\n", "        ", "loss_states", "=", "[", "'loss'", ",", "'hm_loss'", ",", "'wh_loss'", ",", "'off_loss'", ",", "'id_loss'", "]", "\n", "loss", "=", "MotLoss", "(", "opt", ")", "\n", "return", "loss_states", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.mot.MotTrainer.save_result": [[100, 111], ["models.decode.mot_decode", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape", "utils.post_process.ctdet_post_process", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.copy", "[].cpu().numpy", "[].cpu().numpy", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu().numpy", "[].cpu", "[].cpu", "[].cpu().numpy", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach().cpu", "[].cpu", "dets.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape.detach"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.post_process.ctdet_post_process"], ["", "def", "save_result", "(", "self", ",", "output", ",", "batch", ",", "results", ")", ":", "\n", "        ", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets", "=", "mot_decode", "(", "\n", "output", "[", "'hm'", "]", ",", "output", "[", "'wh'", "]", ",", "reg", "=", "reg", ",", "\n", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets_out", "=", "ctdet_post_process", "(", "\n", "dets", ".", "copy", "(", ")", ",", "batch", "[", "'meta'", "]", "[", "'c'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch", "[", "'meta'", "]", "[", "'s'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "output", "[", "'hm'", "]", ".", "shape", "[", "2", "]", ",", "output", "[", "'hm'", "]", ".", "shape", "[", "3", "]", ",", "output", "[", "'hm'", "]", ".", "shape", "[", "1", "]", ")", "\n", "results", "[", "batch", "[", "'meta'", "]", "[", "'img_id'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "]", "=", "dets_out", "[", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.ModleWithLoss.__init__": [[18, 22], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ")", ":", "\n", "    ", "super", "(", "ModleWithLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.ModleWithLoss.forward": [[23, 27], ["base_trainer.ModleWithLoss.model", "base_trainer.ModleWithLoss.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "model", "(", "batch", "[", "'input'", "]", ")", "\n", "loss", ",", "loss_stats", "=", "self", ".", "loss", "(", "outputs", ",", "batch", ")", "\n", "return", "outputs", "[", "-", "1", "]", ",", "loss", ",", "loss_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.__init__": [[29, 35], ["base_trainer.BaseTrainer._get_losses", "base_trainer.ModleWithLoss"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer._get_losses"], ["  ", "def", "__init__", "(", "\n", "self", ",", "opt", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "loss_stats", ",", "self", ".", "loss", "=", "self", ".", "_get_losses", "(", "opt", ")", "\n", "self", ".", "model_with_loss", "=", "ModleWithLoss", "(", "model", ",", "self", ".", "loss", ")", "\n", "#self.optimizer.add_param_group({'params': self.loss.parameters()})", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.set_device": [[37, 49], ["base_trainer.BaseTrainer.optimizer.state.values", "len", "models.data_parallel.DataParallel().to", "base_trainer.BaseTrainer.model_with_loss.to", "state.items", "isinstance", "models.data_parallel.DataParallel", "v.to"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel.DataParallel"], ["", "def", "set_device", "(", "self", ",", "gpus", ",", "chunk_sizes", ",", "device", ")", ":", "\n", "    ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "      ", "self", ".", "model_with_loss", "=", "DataParallel", "(", "\n", "self", ".", "model_with_loss", ",", "device_ids", "=", "gpus", ",", "\n", "chunk_sizes", "=", "chunk_sizes", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "model_with_loss", "=", "self", ".", "model_with_loss", ".", "to", "(", "device", ")", "\n", "\n", "", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "      ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "          ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.run_epoch": [[50, 109], ["progress.bar.Bar", "time.time", "enumerate", "progress.bar.Bar.finish", "model_with_loss.train", "model_with_loss.eval", "torch.cuda.empty_cache", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "len", "data_time.update", "model_with_loss", "loss.mean.mean.mean", "batch_time.update", "time.time", "progress.bar.Bar.elapsed_td.total_seconds", "len", "base_trainer.BaseTrainer.optimizer.zero_grad", "loss.mean.mean.backward", "base_trainer.BaseTrainer.optimizer.step", "avg_loss_stats[].update", "progress.bar.Bar.next", "base_trainer.BaseTrainer.save_result", "avg_loss_stats.items", "time.time", "batch[].to", "time.time", "loss_stats[].mean().item", "batch[].size", "print", "loss_stats[].mean"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.save_result"], ["", "", "", "", "def", "run_epoch", "(", "self", ",", "phase", ",", "epoch", ",", "data_loader", ")", ":", "\n", "    ", "model_with_loss", "=", "self", ".", "model_with_loss", "\n", "if", "phase", "==", "'train'", ":", "\n", "      ", "model_with_loss", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "      ", "if", "len", "(", "self", ".", "opt", ".", "gpus", ")", ">", "1", ":", "\n", "        ", "model_with_loss", "=", "self", ".", "model_with_loss", ".", "module", "\n", "", "model_with_loss", ".", "eval", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "opt", "=", "self", ".", "opt", "\n", "results", "=", "{", "}", "\n", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "avg_loss_stats", "=", "{", "l", ":", "AverageMeter", "(", ")", "for", "l", "in", "self", ".", "loss_stats", "}", "\n", "num_iters", "=", "len", "(", "data_loader", ")", "if", "opt", ".", "num_iters", "<", "0", "else", "opt", ".", "num_iters", "\n", "bar", "=", "Bar", "(", "'{}/{}'", ".", "format", "(", "opt", ".", "task", ",", "opt", ".", "exp_id", ")", ",", "max", "=", "num_iters", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "iter_id", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "      ", "if", "iter_id", ">=", "num_iters", ":", "\n", "        ", "break", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "for", "k", "in", "batch", ":", "\n", "        ", "if", "k", "!=", "'meta'", ":", "\n", "          ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "opt", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "", "output", ",", "loss", ",", "loss_stats", "=", "model_with_loss", "(", "batch", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "Bar", ".", "suffix", "=", "'{phase}: [{0}][{1}/{2}]|Tot: {total:} |ETA: {eta:} '", ".", "format", "(", "\n", "epoch", ",", "iter_id", ",", "num_iters", ",", "phase", "=", "phase", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "eta", "=", "bar", ".", "eta_td", ")", "\n", "for", "l", "in", "avg_loss_stats", ":", "\n", "        ", "avg_loss_stats", "[", "l", "]", ".", "update", "(", "\n", "loss_stats", "[", "l", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "batch", "[", "'input'", "]", ".", "size", "(", "0", ")", ")", "\n", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|{} {:.4f} '", ".", "format", "(", "l", ",", "avg_loss_stats", "[", "l", "]", ".", "avg", ")", "\n", "", "if", "not", "opt", ".", "hide_data_time", ":", "\n", "        ", "Bar", ".", "suffix", "=", "Bar", ".", "suffix", "+", "'|Data {dt.val:.3f}s({dt.avg:.3f}s) '", "'|Net {bt.avg:.3f}s'", ".", "format", "(", "dt", "=", "data_time", ",", "bt", "=", "batch_time", ")", "\n", "", "if", "opt", ".", "print_iter", ">", "0", ":", "\n", "        ", "if", "iter_id", "%", "opt", ".", "print_iter", "==", "0", ":", "\n", "          ", "print", "(", "'{}/{}| {}'", ".", "format", "(", "opt", ".", "task", ",", "opt", ".", "exp_id", ",", "Bar", ".", "suffix", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "bar", ".", "next", "(", ")", "\n", "\n", "", "if", "opt", ".", "test", ":", "\n", "        ", "self", ".", "save_result", "(", "output", ",", "batch", ",", "results", ")", "\n", "", "del", "output", ",", "loss", ",", "loss_stats", ",", "batch", "\n", "\n", "", "bar", ".", "finish", "(", ")", "\n", "ret", "=", "{", "k", ":", "v", ".", "avg", "for", "k", ",", "v", "in", "avg_loss_stats", ".", "items", "(", ")", "}", "\n", "ret", "[", "'time'", "]", "=", "bar", ".", "elapsed_td", ".", "total_seconds", "(", ")", "/", "60.", "\n", "return", "ret", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug": [[111, 113], ["None"], "methods", ["None"], ["", "def", "debug", "(", "self", ",", "batch", ",", "output", ",", "iter_id", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.save_result": [[114, 116], ["None"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "output", ",", "batch", ",", "results", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer._get_losses": [[117, 119], ["None"], "methods", ["None"], ["", "def", "_get_losses", "(", "self", ",", "opt", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.val": [[120, 122], ["base_trainer.BaseTrainer.run_epoch"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.run_epoch"], ["", "def", "val", "(", "self", ",", "epoch", ",", "data_loader", ")", ":", "\n", "    ", "return", "self", ".", "run_epoch", "(", "'val'", ",", "epoch", ",", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.train": [[123, 125], ["base_trainer.BaseTrainer.run_epoch"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.run_epoch"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ")", ":", "\n", "    ", "return", "self", ".", "run_epoch", "(", "'train'", ",", "epoch", ",", "data_loader", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.datasets.dataset_factory.get_dataset": [[13, 18], ["None"], "function", ["None"], ["def", "get_dataset", "(", "dataset", ",", "task", ")", ":", "\n", "  ", "if", "task", "==", "'mot'", ":", "\n", "    ", "return", "JointDataset", "\n", "", "else", ":", "\n", "    ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImages.__init__": [[23, 38], ["os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "len", "sorted", "list", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "glob.glob", "filter", "[].lower", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "(", "1088", ",", "608", ")", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "image_format", "=", "[", "'.jpg'", ",", "'.jpeg'", ",", "'.png'", ",", "'.tif'", "]", "\n", "self", ".", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'%s/*.*'", "%", "path", ")", ")", "\n", "self", ".", "files", "=", "list", "(", "filter", "(", "lambda", "x", ":", "os", ".", "path", ".", "splitext", "(", "x", ")", "[", "1", "]", ".", "lower", "(", ")", "in", "image_format", ",", "self", ".", "files", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "self", ".", "files", "=", "[", "path", "]", "\n", "# import pdb;pdb.set_trace()", "\n", "\n", "", "self", ".", "nF", "=", "len", "(", "self", ".", "files", ")", "# number of image files", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n", "assert", "self", ".", "nF", ">", "0", ",", "'No images found in '", "+", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImages.__iter__": [[39, 42], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImages.__next__": [[43, 63], ["cv2.imread", "jde.letterbox", "img[].transpose", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "==", "self", ".", "nF", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "img_path", "=", "self", ".", "files", "[", "self", ".", "count", "]", "\n", "\n", "# Read image", "\n", "img0", "=", "cv2", ".", "imread", "(", "img_path", ")", "# BGR", "\n", "assert", "img0", "is", "not", "None", ",", "'Failed to load '", "+", "img_path", "\n", "\n", "# Padded resize", "\n", "img", ",", "_", ",", "_", ",", "_", "=", "letterbox", "(", "img0", ",", "height", "=", "self", ".", "height", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "# Normalize RGB", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "\n", "# cv2.imwrite(img_path + '.letterbox.jpg', 255 * img.transpose((1, 2, 0))[:, :, ::-1])  # save letterbox image", "\n", "return", "img_path", ",", "img", ",", "img0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImages.__getitem__": [[64, 81], ["cv2.imread", "jde.letterbox", "img[].transpose", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.letterbox"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "idx", "%", "self", ".", "nF", "\n", "img_path", "=", "self", ".", "files", "[", "idx", "]", "\n", "\n", "# Read image", "\n", "img0", "=", "cv2", ".", "imread", "(", "img_path", ")", "# BGR", "\n", "assert", "img0", "is", "not", "None", ",", "'Failed to load '", "+", "img_path", "\n", "\n", "# Padded resize", "\n", "img", ",", "_", ",", "_", ",", "_", "=", "letterbox", "(", "img0", ",", "height", "=", "self", ".", "height", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "# Normalize RGB", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "\n", "return", "img_path", ",", "img", ",", "img0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImages.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nF", "# number of files", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadVideo.__init__": [[87, 100], ["cv2.VideoCapture", "int", "int", "int", "int", "print", "round", "jde.LoadVideo.cap.get", "jde.LoadVideo.cap.get", "jde.LoadVideo.cap.get", "jde.LoadVideo.cap.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "(", "1088", ",", "608", ")", ")", ":", "\n", "        ", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "self", ".", "frame_rate", "=", "int", "(", "round", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ")", ")", "\n", "self", ".", "vw", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "self", ".", "vh", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "self", ".", "vn", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n", "self", ".", "w", ",", "self", ".", "h", "=", "1920", ",", "1080", "\n", "print", "(", "'Lenth of the video: {:d} frames'", ".", "format", "(", "self", ".", "vn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadVideo.get_size": [[101, 105], ["min", "int", "int", "float", "float"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "vw", ",", "vh", ",", "dw", ",", "dh", ")", ":", "\n", "        ", "wa", ",", "ha", "=", "float", "(", "dw", ")", "/", "vw", ",", "float", "(", "dh", ")", "/", "vh", "\n", "a", "=", "min", "(", "wa", ",", "ha", ")", "\n", "return", "int", "(", "vw", "*", "a", ")", ",", "int", "(", "vh", "*", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadVideo.__iter__": [[106, 109], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadVideo.__next__": [[110, 129], ["jde.LoadVideo.cap.read", "cv2.resize", "jde.letterbox", "img[].transpose", "numpy.ascontiguousarray", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "==", "len", "(", "self", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "# Read image", "\n", "", "res", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "# BGR", "\n", "assert", "img0", "is", "not", "None", ",", "'Failed to load frame {:d}'", ".", "format", "(", "self", ".", "count", ")", "\n", "img0", "=", "cv2", ".", "resize", "(", "img0", ",", "(", "self", ".", "w", ",", "self", ".", "h", ")", ")", "\n", "\n", "# Padded resize", "\n", "img", ",", "_", ",", "_", ",", "_", "=", "letterbox", "(", "img0", ",", "height", "=", "self", ".", "height", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "# Normalize RGB", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "\n", "# cv2.imwrite(img_path + '.letterbox.jpg', 255 * img.transpose((1, 2, 0))[:, :, ::-1])  # save letterbox image", "\n", "return", "self", ".", "count", ",", "img", ",", "img0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadVideo.__len__": [[130, 132], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vn", "# number of files", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.__init__": [[135, 149], ["len", "open", "file.readlines", "list", "x.replace().replace().replace", "x.replace", "filter", "x.replace().replace", "len", "x.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "(", "1088", ",", "608", ")", ",", "augment", "=", "False", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "img_files", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "=", "[", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", "for", "x", "in", "self", ".", "img_files", "]", "\n", "self", ".", "img_files", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", ")", ")", "\n", "\n", "", "self", ".", "label_files", "=", "[", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "for", "x", "in", "self", ".", "img_files", "]", "\n", "\n", "self", ".", "nF", "=", "len", "(", "self", ".", "img_files", ")", "# number of image files", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.__getitem__": [[150, 154], ["jde.LoadImagesAndLabels.get_data"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.get_data"], ["", "def", "__getitem__", "(", "self", ",", "files_index", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "img_files", "[", "files_index", "]", "\n", "label_path", "=", "self", ".", "label_files", "[", "files_index", "]", "\n", "return", "self", ".", "get_data", "(", "img_path", ",", "label_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.get_data": [[155, 237], ["cv2.imread", "jde.letterbox", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "len", "numpy.ascontiguousarray", "ValueError", "cv2.cvtColor", "img_hsv[].astype", "img_hsv[].astype", "img_hsv[].astype.astype", "img_hsv[].astype.astype", "cv2.cvtColor", "numpy.loadtxt().reshape", "numpy.loadtxt().reshape.copy", "numpy.array", "jde.random_affine", "matplotlib.use", "plt.figure", "plt.imshow", "plt.plot", "plt.axis", "plt.savefig", "time.sleep", "utils.utils.xyxy2xywh", "jde.LoadImagesAndLabels.transforms", "numpy.clip", "numpy.clip", "labels[].copy", "numpy.fliplr", "numpy.loadtxt", "random.random", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.letterbox", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.random_affine", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.xyxy2xywh"], ["", "def", "get_data", "(", "self", ",", "img_path", ",", "label_path", ")", ":", "\n", "        ", "height", "=", "self", ".", "height", "\n", "width", "=", "self", ".", "width", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "# BGR", "\n", "if", "img", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'File corrupt {}'", ".", "format", "(", "img_path", ")", ")", "\n", "", "augment_hsv", "=", "True", "\n", "if", "self", ".", "augment", "and", "augment_hsv", ":", "\n", "# SV augmentation by 50%", "\n", "            ", "fraction", "=", "0.50", "\n", "img_hsv", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2HSV", ")", "\n", "S", "=", "img_hsv", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "V", "=", "img_hsv", "[", ":", ",", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "a", "=", "(", "random", ".", "random", "(", ")", "*", "2", "-", "1", ")", "*", "fraction", "+", "1", "\n", "S", "*=", "a", "\n", "if", "a", ">", "1", ":", "\n", "                ", "np", ".", "clip", "(", "S", ",", "a_min", "=", "0", ",", "a_max", "=", "255", ",", "out", "=", "S", ")", "\n", "\n", "", "a", "=", "(", "random", ".", "random", "(", ")", "*", "2", "-", "1", ")", "*", "fraction", "+", "1", "\n", "V", "*=", "a", "\n", "if", "a", ">", "1", ":", "\n", "                ", "np", ".", "clip", "(", "V", ",", "a_min", "=", "0", ",", "a_max", "=", "255", ",", "out", "=", "V", ")", "\n", "\n", "", "img_hsv", "[", ":", ",", ":", ",", "1", "]", "=", "S", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_hsv", "[", ":", ",", ":", ",", "2", "]", "=", "V", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "cvtColor", "(", "img_hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ",", "dst", "=", "img", ")", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "img", ",", "ratio", ",", "padw", ",", "padh", "=", "letterbox", "(", "img", ",", "height", "=", "height", ",", "width", "=", "width", ")", "\n", "\n", "# Load labels", "\n", "if", "os", ".", "path", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "\n", "# Normalized xywh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "ratio", "*", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "+", "padw", "\n", "labels", "[", ":", ",", "3", "]", "=", "ratio", "*", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "+", "padh", "\n", "labels", "[", ":", ",", "4", "]", "=", "ratio", "*", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "+", "padw", "\n", "labels", "[", ":", ",", "5", "]", "=", "ratio", "*", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "+", "padh", "\n", "", "else", ":", "\n", "            ", "labels", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "# Augment image and labels", "\n", "", "if", "self", ".", "augment", ":", "\n", "            ", "img", ",", "labels", ",", "M", "=", "random_affine", "(", "img", ",", "labels", ",", "degrees", "=", "(", "-", "5", ",", "5", ")", ",", "translate", "=", "(", "0.10", ",", "0.10", ")", ",", "scale", "=", "(", "0.50", ",", "1.20", ")", ")", "\n", "\n", "", "plotFlag", "=", "False", "\n", "if", "plotFlag", ":", "\n", "            ", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "50", ",", "50", ")", ")", "\n", "plt", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "plt", ".", "plot", "(", "labels", "[", ":", ",", "[", "2", ",", "4", ",", "4", ",", "2", ",", "2", "]", "]", ".", "T", ",", "labels", "[", ":", ",", "[", "3", ",", "3", ",", "5", ",", "5", ",", "3", "]", "]", ".", "T", ",", "'.-'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "'test.jpg'", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "\n", "", "nL", "=", "len", "(", "labels", ")", "\n", "if", "nL", ">", "0", ":", "\n", "# convert xyxy to xywh", "\n", "            ", "labels", "[", ":", ",", "2", ":", "6", "]", "=", "xyxy2xywh", "(", "labels", "[", ":", ",", "2", ":", "6", "]", ".", "copy", "(", ")", ")", "# / height", "\n", "labels", "[", ":", ",", "2", "]", "/=", "width", "\n", "labels", "[", ":", ",", "3", "]", "/=", "height", "\n", "labels", "[", ":", ",", "4", "]", "/=", "width", "\n", "labels", "[", ":", ",", "5", "]", "/=", "height", "\n", "", "if", "self", ".", "augment", ":", "\n", "# random left-right flip", "\n", "            ", "lr_flip", "=", "True", "\n", "if", "lr_flip", "&", "(", "random", ".", "random", "(", ")", ">", "0.5", ")", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "if", "nL", ">", "0", ":", "\n", "                    ", "labels", "[", ":", ",", "2", "]", "=", "1", "-", "labels", "[", ":", ",", "2", "]", "\n", "\n", "", "", "", "img", "=", "np", ".", "ascontiguousarray", "(", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "# BGR to RGB", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "labels", ",", "img_path", ",", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.__len__": [[238, 240], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nF", "# number of batches", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.JointDataset.__init__": [[356, 411], ["paths.keys", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "paths.items", "jde.JointDataset.label_files.items", "enumerate", "int", "sum", "print", "print", "print", "print", "print", "print", "print", "jde.JointDataset.tid_num.items", "len", "sum", "open", "file.readlines", "list", "x.replace().replace().replace", "numpy.loadtxt", "jde.JointDataset.img_files.values", "range", "os.join", "os.join", "filter", "len", "len", "numpy.max", "len", "x.strip", "x.replace().replace", "len", "x.replace"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ",", "root", ",", "paths", ",", "img_size", "=", "(", "1088", ",", "608", ")", ",", "augment", "=", "False", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "dataset_names", "=", "paths", ".", "keys", "(", ")", "\n", "self", ".", "img_files", "=", "OrderedDict", "(", ")", "\n", "self", ".", "label_files", "=", "OrderedDict", "(", ")", "\n", "self", ".", "tid_num", "=", "OrderedDict", "(", ")", "\n", "self", ".", "tid_start_index", "=", "OrderedDict", "(", ")", "\n", "self", ".", "num_classes", "=", "1", "\n", "\n", "for", "ds", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "self", ".", "img_files", "[", "ds", "]", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "[", "ds", "]", "=", "[", "osp", ".", "join", "(", "root", ",", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "self", ".", "img_files", "[", "ds", "]", "]", "\n", "self", ".", "img_files", "[", "ds", "]", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", "[", "ds", "]", ")", ")", "\n", "\n", "", "self", ".", "label_files", "[", "ds", "]", "=", "[", "\n", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "for", "x", "in", "self", ".", "img_files", "[", "ds", "]", "]", "\n", "\n", "", "for", "ds", ",", "label_paths", "in", "self", ".", "label_files", ".", "items", "(", ")", ":", "\n", "            ", "max_index", "=", "-", "1", "\n", "for", "lp", "in", "label_paths", ":", "\n", "                ", "lb", "=", "np", ".", "loadtxt", "(", "lp", ")", "\n", "if", "len", "(", "lb", ")", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "lb", ".", "shape", ")", "<", "2", ":", "\n", "                    ", "img_max", "=", "lb", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "img_max", "=", "np", ".", "max", "(", "lb", "[", ":", ",", "1", "]", ")", "\n", "", "if", "img_max", ">", "max_index", ":", "\n", "                    ", "max_index", "=", "img_max", "\n", "", "", "self", ".", "tid_num", "[", "ds", "]", "=", "max_index", "+", "1", "\n", "\n", "", "last_index", "=", "0", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "self", ".", "tid_num", ".", "items", "(", ")", ")", ":", "\n", "            ", "self", ".", "tid_start_index", "[", "k", "]", "=", "last_index", "\n", "last_index", "+=", "v", "\n", "\n", "", "self", ".", "nID", "=", "int", "(", "last_index", "+", "1", ")", "\n", "self", ".", "nds", "=", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "img_files", ".", "values", "(", ")", "]", "\n", "self", ".", "cds", "=", "[", "sum", "(", "self", ".", "nds", "[", ":", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nds", ")", ")", "]", "\n", "self", ".", "nF", "=", "sum", "(", "self", ".", "nds", ")", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "max_objs", "=", "opt", ".", "K", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'dataset summary'", ")", "\n", "print", "(", "self", ".", "tid_num", ")", "\n", "print", "(", "'total # identities:'", ",", "self", ".", "nID", ")", "\n", "print", "(", "'start index'", ")", "\n", "print", "(", "self", ".", "tid_start_index", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.JointDataset.__getitem__": [[412, 466], ["enumerate", "jde.JointDataset.get_data", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "int", "numpy.clip", "numpy.clip", "utils.image.gaussian_radius", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "list", "int", "jde.JointDataset.label_files.keys", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.get_data", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.gaussian_radius"], ["", "def", "__getitem__", "(", "self", ",", "files_index", ")", ":", "\n", "\n", "        ", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cds", ")", ":", "\n", "            ", "if", "files_index", ">=", "c", ":", "\n", "                ", "ds", "=", "list", "(", "self", ".", "label_files", ".", "keys", "(", ")", ")", "[", "i", "]", "\n", "start_index", "=", "c", "\n", "\n", "", "", "img_path", "=", "self", ".", "img_files", "[", "ds", "]", "[", "files_index", "-", "start_index", "]", "\n", "label_path", "=", "self", ".", "label_files", "[", "ds", "]", "[", "files_index", "-", "start_index", "]", "\n", "\n", "imgs", ",", "labels", ",", "img_path", ",", "(", "input_h", ",", "input_w", ")", "=", "self", ".", "get_data", "(", "img_path", ",", "label_path", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "if", "labels", "[", "i", ",", "1", "]", ">", "-", "1", ":", "\n", "                ", "labels", "[", "i", ",", "1", "]", "+=", "self", ".", "tid_start_index", "[", "ds", "]", "\n", "\n", "", "", "output_h", "=", "imgs", ".", "shape", "[", "1", "]", "//", "self", ".", "opt", ".", "down_ratio", "\n", "output_w", "=", "imgs", ".", "shape", "[", "2", "]", "//", "self", ".", "opt", ".", "down_ratio", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "num_objs", "=", "labels", ".", "shape", "[", "0", "]", "\n", "hm", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "output_h", ",", "output_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "wh", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reg", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "reg_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ids", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_objs", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "draw_gaussian", "=", "draw_msra_gaussian", "if", "self", ".", "opt", ".", "mse_loss", "else", "draw_umich_gaussian", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "label", "=", "labels", "[", "k", "]", "\n", "bbox", "=", "label", "[", "2", ":", "]", "\n", "cls_id", "=", "int", "(", "label", "[", "0", "]", ")", "\n", "bbox", "[", "[", "0", ",", "2", "]", "]", "=", "bbox", "[", "[", "0", ",", "2", "]", "]", "*", "output_w", "\n", "bbox", "[", "[", "1", ",", "3", "]", "]", "=", "bbox", "[", "[", "1", ",", "3", "]", "]", "*", "output_h", "\n", "bbox", "[", "0", "]", "=", "np", ".", "clip", "(", "bbox", "[", "0", "]", ",", "0", ",", "output_w", "-", "1", ")", "\n", "bbox", "[", "1", "]", "=", "np", ".", "clip", "(", "bbox", "[", "1", "]", ",", "0", ",", "output_h", "-", "1", ")", "\n", "h", "=", "bbox", "[", "3", "]", "\n", "w", "=", "bbox", "[", "2", "]", "\n", "\n", "if", "h", ">", "0", "and", "w", ">", "0", ":", "\n", "                ", "radius", "=", "gaussian_radius", "(", "(", "math", ".", "ceil", "(", "h", ")", ",", "math", ".", "ceil", "(", "w", ")", ")", ")", "\n", "radius", "=", "max", "(", "0", ",", "int", "(", "radius", ")", ")", "\n", "radius", "=", "self", ".", "opt", ".", "hm_gauss", "if", "self", ".", "opt", ".", "mse_loss", "else", "radius", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct_int", ",", "radius", ")", "\n", "wh", "[", "k", "]", "=", "1.", "*", "w", ",", "1.", "*", "h", "\n", "ind", "[", "k", "]", "=", "ct_int", "[", "1", "]", "*", "output_w", "+", "ct_int", "[", "0", "]", "\n", "reg", "[", "k", "]", "=", "ct", "-", "ct_int", "\n", "reg_mask", "[", "k", "]", "=", "1", "\n", "ids", "[", "k", "]", "=", "label", "[", "1", "]", "\n", "\n", "", "", "ret", "=", "{", "'input'", ":", "imgs", ",", "'hm'", ":", "hm", ",", "'reg_mask'", ":", "reg_mask", ",", "'ind'", ":", "ind", ",", "'wh'", ":", "wh", ",", "'reg'", ":", "reg", ",", "'ids'", ":", "ids", "}", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.DetDataset.__init__": [[469, 521], ["paths.keys", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "paths.items", "jde.DetDataset.label_files.items", "enumerate", "int", "sum", "print", "print", "print", "print", "print", "print", "print", "jde.DetDataset.tid_num.items", "len", "sum", "open", "file.readlines", "list", "x.replace().replace().replace", "numpy.loadtxt", "jde.DetDataset.img_files.values", "range", "os.join", "os.join", "filter", "len", "len", "numpy.max", "len", "x.strip", "x.replace().replace", "len", "x.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "paths", ",", "img_size", "=", "(", "1088", ",", "608", ")", ",", "augment", "=", "False", ",", "transforms", "=", "None", ")", ":", "\n", "\n", "        ", "dataset_names", "=", "paths", ".", "keys", "(", ")", "\n", "self", ".", "img_files", "=", "OrderedDict", "(", ")", "\n", "self", ".", "label_files", "=", "OrderedDict", "(", ")", "\n", "self", ".", "tid_num", "=", "OrderedDict", "(", ")", "\n", "self", ".", "tid_start_index", "=", "OrderedDict", "(", ")", "\n", "for", "ds", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "self", ".", "img_files", "[", "ds", "]", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "[", "ds", "]", "=", "[", "osp", ".", "join", "(", "root", ",", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "self", ".", "img_files", "[", "ds", "]", "]", "\n", "self", ".", "img_files", "[", "ds", "]", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", "[", "ds", "]", ")", ")", "\n", "\n", "", "self", ".", "label_files", "[", "ds", "]", "=", "[", "\n", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "for", "x", "in", "self", ".", "img_files", "[", "ds", "]", "]", "\n", "\n", "", "for", "ds", ",", "label_paths", "in", "self", ".", "label_files", ".", "items", "(", ")", ":", "\n", "            ", "max_index", "=", "-", "1", "\n", "for", "lp", "in", "label_paths", ":", "\n", "                ", "lb", "=", "np", ".", "loadtxt", "(", "lp", ")", "\n", "if", "len", "(", "lb", ")", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "lb", ".", "shape", ")", "<", "2", ":", "\n", "                    ", "img_max", "=", "lb", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "img_max", "=", "np", ".", "max", "(", "lb", "[", ":", ",", "1", "]", ")", "\n", "", "if", "img_max", ">", "max_index", ":", "\n", "                    ", "max_index", "=", "img_max", "\n", "", "", "self", ".", "tid_num", "[", "ds", "]", "=", "max_index", "+", "1", "\n", "\n", "", "last_index", "=", "0", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "self", ".", "tid_num", ".", "items", "(", ")", ")", ":", "\n", "            ", "self", ".", "tid_start_index", "[", "k", "]", "=", "last_index", "\n", "last_index", "+=", "v", "\n", "\n", "", "self", ".", "nID", "=", "int", "(", "last_index", "+", "1", ")", "\n", "self", ".", "nds", "=", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "img_files", ".", "values", "(", ")", "]", "\n", "self", ".", "cds", "=", "[", "sum", "(", "self", ".", "nds", "[", ":", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nds", ")", ")", "]", "\n", "self", ".", "nF", "=", "sum", "(", "self", ".", "nds", ")", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "print", "(", "'='", "*", "80", ")", "\n", "print", "(", "'dataset summary'", ")", "\n", "print", "(", "self", ".", "tid_num", ")", "\n", "print", "(", "'total # identities:'", ",", "self", ".", "nID", ")", "\n", "print", "(", "'start index'", ")", "\n", "print", "(", "self", ".", "tid_start_index", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.DetDataset.__getitem__": [[522, 540], ["enumerate", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "jde.DetDataset.get_data", "enumerate", "numpy.loadtxt().reshape", "list", "numpy.loadtxt", "jde.DetDataset.label_files.keys"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.LoadImagesAndLabels.get_data"], ["", "def", "__getitem__", "(", "self", ",", "files_index", ")", ":", "\n", "\n", "        ", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cds", ")", ":", "\n", "            ", "if", "files_index", ">=", "c", ":", "\n", "                ", "ds", "=", "list", "(", "self", ".", "label_files", ".", "keys", "(", ")", ")", "[", "i", "]", "\n", "start_index", "=", "c", "\n", "\n", "", "", "img_path", "=", "self", ".", "img_files", "[", "ds", "]", "[", "files_index", "-", "start_index", "]", "\n", "label_path", "=", "self", ".", "label_files", "[", "ds", "]", "[", "files_index", "-", "start_index", "]", "\n", "if", "os", ".", "path", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "\n", "", "imgs", ",", "labels", ",", "img_path", ",", "(", "h", ",", "w", ")", "=", "self", ".", "get_data", "(", "img_path", ",", "label_path", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "if", "labels", "[", "i", ",", "1", "]", ">", "-", "1", ":", "\n", "                ", "labels", "[", "i", ",", "1", "]", "+=", "self", ".", "tid_start_index", "[", "ds", "]", "\n", "\n", "", "", "return", "imgs", ",", "labels0", ",", "img_path", ",", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.letterbox": [[242, 255], ["min", "cv2.resize", "cv2.copyMakeBorder", "round", "round", "round", "round", "round", "round", "float", "float"], "function", ["None"], ["", "", "def", "letterbox", "(", "img", ",", "height", "=", "608", ",", "width", "=", "1088", ",", "\n", "color", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", ")", ":", "# resize a rectangular image to a padded rectangular", "\n", "    ", "shape", "=", "img", ".", "shape", "[", ":", "2", "]", "# shape = [height, width]", "\n", "ratio", "=", "min", "(", "float", "(", "height", ")", "/", "shape", "[", "0", "]", ",", "float", "(", "width", ")", "/", "shape", "[", "1", "]", ")", "\n", "new_shape", "=", "(", "round", "(", "shape", "[", "1", "]", "*", "ratio", ")", ",", "round", "(", "shape", "[", "0", "]", "*", "ratio", ")", ")", "# new_shape = [width, height]", "\n", "dw", "=", "(", "width", "-", "new_shape", "[", "0", "]", ")", "/", "2", "# width padding", "\n", "dh", "=", "(", "height", "-", "new_shape", "[", "1", "]", ")", "/", "2", "# height padding", "\n", "top", ",", "bottom", "=", "round", "(", "dh", "-", "0.1", ")", ",", "round", "(", "dh", "+", "0.1", ")", "\n", "left", ",", "right", "=", "round", "(", "dw", "-", "0.1", ")", ",", "round", "(", "dw", "+", "0.1", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "new_shape", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "# resized, no border", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "color", ")", "# padded rectangular", "\n", "# import pdb; pdb.set_trace()", "\n", "return", "img", ",", "ratio", ",", "dw", ",", "dh", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.random_affine": [[257, 330], ["numpy.eye", "cv2.getRotationMatrix2D", "numpy.eye", "numpy.eye", "math.tan", "math.tan", "cv2.warpPerspective", "random.random", "random.random", "len", "targets[].copy", "numpy.ones", "points[].reshape", "[].reshape", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.maximum", "numpy.concatenate().reshape", "max", "numpy.concatenate().reshape", "abs", "abs", "random.random", "random.random", "random.random", "random.random", "numpy.concatenate", "math.sin", "math.cos", "numpy.concatenate", "x.min", "y.min", "x.max", "y.max"], "function", ["None"], ["", "def", "random_affine", "(", "img", ",", "targets", "=", "None", ",", "degrees", "=", "(", "-", "10", ",", "10", ")", ",", "translate", "=", "(", ".1", ",", ".1", ")", ",", "scale", "=", "(", ".9", ",", "1.1", ")", ",", "shear", "=", "(", "-", "2", ",", "2", ")", ",", "\n", "borderValue", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", ")", ":", "\n", "# torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))", "\n", "# https://medium.com/uruvideo/dataset-augmentation-with-random-homographies-a8f4b44830d4", "\n", "\n", "    ", "border", "=", "0", "# width of added border (optional)", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "# Rotation and Scale", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "a", "=", "random", ".", "random", "(", ")", "*", "(", "degrees", "[", "1", "]", "-", "degrees", "[", "0", "]", ")", "+", "degrees", "[", "0", "]", "\n", "# a += random.choice([-180, -90, 0, 90])  # 90deg rotations added to small rotations", "\n", "s", "=", "random", ".", "random", "(", ")", "*", "(", "scale", "[", "1", "]", "-", "scale", "[", "0", "]", ")", "+", "scale", "[", "0", "]", "\n", "R", "[", ":", "2", "]", "=", "cv2", ".", "getRotationMatrix2D", "(", "angle", "=", "a", ",", "center", "=", "(", "img", ".", "shape", "[", "1", "]", "/", "2", ",", "img", ".", "shape", "[", "0", "]", "/", "2", ")", ",", "scale", "=", "s", ")", "\n", "\n", "# Translation", "\n", "T", "=", "np", ".", "eye", "(", "3", ")", "\n", "T", "[", "0", ",", "2", "]", "=", "(", "random", ".", "random", "(", ")", "*", "2", "-", "1", ")", "*", "translate", "[", "0", "]", "*", "img", ".", "shape", "[", "0", "]", "+", "border", "# x translation (pixels)", "\n", "T", "[", "1", ",", "2", "]", "=", "(", "random", ".", "random", "(", ")", "*", "2", "-", "1", ")", "*", "translate", "[", "1", "]", "*", "img", ".", "shape", "[", "1", "]", "+", "border", "# y translation (pixels)", "\n", "\n", "# Shear", "\n", "S", "=", "np", ".", "eye", "(", "3", ")", "\n", "S", "[", "0", ",", "1", "]", "=", "math", ".", "tan", "(", "(", "random", ".", "random", "(", ")", "*", "(", "shear", "[", "1", "]", "-", "shear", "[", "0", "]", ")", "+", "shear", "[", "0", "]", ")", "*", "math", ".", "pi", "/", "180", ")", "# x shear (deg)", "\n", "S", "[", "1", ",", "0", "]", "=", "math", ".", "tan", "(", "(", "random", ".", "random", "(", ")", "*", "(", "shear", "[", "1", "]", "-", "shear", "[", "0", "]", ")", "+", "shear", "[", "0", "]", ")", "*", "math", ".", "pi", "/", "180", ")", "# y shear (deg)", "\n", "\n", "M", "=", "S", "@", "T", "@", "R", "# Combined rotation matrix. ORDER IS IMPORTANT HERE!!", "\n", "imw", "=", "cv2", ".", "warpPerspective", "(", "img", ",", "M", ",", "dsize", "=", "(", "width", ",", "height", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderValue", "=", "borderValue", ")", "# BGR order borderValue", "\n", "\n", "# Return warped points also", "\n", "if", "targets", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "targets", ")", ">", "0", ":", "\n", "            ", "n", "=", "targets", ".", "shape", "[", "0", "]", "\n", "points", "=", "targets", "[", ":", ",", "2", ":", "6", "]", ".", "copy", "(", ")", "\n", "area0", "=", "(", "points", "[", ":", ",", "2", "]", "-", "points", "[", ":", ",", "0", "]", ")", "*", "(", "points", "[", ":", ",", "3", "]", "-", "points", "[", ":", ",", "1", "]", ")", "\n", "\n", "# warp points", "\n", "xy", "=", "np", ".", "ones", "(", "(", "n", "*", "4", ",", "3", ")", ")", "\n", "xy", "[", ":", ",", ":", "2", "]", "=", "points", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ",", "2", ",", "1", "]", "]", ".", "reshape", "(", "n", "*", "4", ",", "2", ")", "# x1y1, x2y2, x1y2, x2y1", "\n", "xy", "=", "(", "xy", "@", "M", ".", "T", ")", "[", ":", ",", ":", "2", "]", ".", "reshape", "(", "n", ",", "8", ")", "\n", "\n", "# create new boxes", "\n", "x", "=", "xy", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "\n", "y", "=", "xy", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "xy", "=", "np", ".", "concatenate", "(", "(", "x", ".", "min", "(", "1", ")", ",", "y", ".", "min", "(", "1", ")", ",", "x", ".", "max", "(", "1", ")", ",", "y", ".", "max", "(", "1", ")", ")", ")", ".", "reshape", "(", "4", ",", "n", ")", ".", "T", "\n", "\n", "# apply angle-based reduction", "\n", "radians", "=", "a", "*", "math", ".", "pi", "/", "180", "\n", "reduction", "=", "max", "(", "abs", "(", "math", ".", "sin", "(", "radians", ")", ")", ",", "abs", "(", "math", ".", "cos", "(", "radians", ")", ")", ")", "**", "0.5", "\n", "x", "=", "(", "xy", "[", ":", ",", "2", "]", "+", "xy", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "y", "=", "(", "xy", "[", ":", ",", "3", "]", "+", "xy", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "w", "=", "(", "xy", "[", ":", ",", "2", "]", "-", "xy", "[", ":", ",", "0", "]", ")", "*", "reduction", "\n", "h", "=", "(", "xy", "[", ":", ",", "3", "]", "-", "xy", "[", ":", ",", "1", "]", ")", "*", "reduction", "\n", "xy", "=", "np", ".", "concatenate", "(", "(", "x", "-", "w", "/", "2", ",", "y", "-", "h", "/", "2", ",", "x", "+", "w", "/", "2", ",", "y", "+", "h", "/", "2", ")", ")", ".", "reshape", "(", "4", ",", "n", ")", ".", "T", "\n", "\n", "# reject warped points outside of image", "\n", "np", ".", "clip", "(", "xy", "[", ":", ",", "0", "]", ",", "0", ",", "width", ",", "out", "=", "xy", "[", ":", ",", "0", "]", ")", "\n", "np", ".", "clip", "(", "xy", "[", ":", ",", "2", "]", ",", "0", ",", "width", ",", "out", "=", "xy", "[", ":", ",", "2", "]", ")", "\n", "np", ".", "clip", "(", "xy", "[", ":", ",", "1", "]", ",", "0", ",", "height", ",", "out", "=", "xy", "[", ":", ",", "1", "]", ")", "\n", "np", ".", "clip", "(", "xy", "[", ":", ",", "3", "]", ",", "0", ",", "height", ",", "out", "=", "xy", "[", ":", ",", "3", "]", ")", "\n", "w", "=", "xy", "[", ":", ",", "2", "]", "-", "xy", "[", ":", ",", "0", "]", "\n", "h", "=", "xy", "[", ":", ",", "3", "]", "-", "xy", "[", ":", ",", "1", "]", "\n", "area", "=", "w", "*", "h", "\n", "ar", "=", "np", ".", "maximum", "(", "w", "/", "(", "h", "+", "1e-16", ")", ",", "h", "/", "(", "w", "+", "1e-16", ")", ")", "\n", "i", "=", "(", "w", ">", "4", ")", "&", "(", "h", ">", "4", ")", "&", "(", "area", "/", "(", "area0", "+", "1e-16", ")", ">", "0.1", ")", "&", "(", "ar", "<", "10", ")", "\n", "\n", "targets", "=", "targets", "[", "i", "]", "\n", "targets", "[", ":", ",", "2", ":", "6", "]", "=", "xy", "[", "i", "]", "\n", "\n", "", "return", "imw", ",", "targets", ",", "M", "\n", "", "else", ":", "\n", "        ", "return", "imw", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.dataset.jde.collate_fn": [[332, 348], ["zip", "len", "torch.stack", "max", "torch.zeros", "torch.zeros", "range", "torch.from_numpy", "torch.zeros.unsqueeze", "len"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "labels", ",", "paths", ",", "sizes", "=", "zip", "(", "*", "batch", ")", "\n", "batch_size", "=", "len", "(", "labels", ")", "\n", "imgs", "=", "torch", ".", "stack", "(", "imgs", ",", "0", ")", "\n", "max_box_len", "=", "max", "(", "[", "l", ".", "shape", "[", "0", "]", "for", "l", "in", "labels", "]", ")", "\n", "labels", "=", "[", "torch", ".", "from_numpy", "(", "l", ")", "for", "l", "in", "labels", "]", "\n", "filled_labels", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max_box_len", ",", "6", ")", "\n", "labels_len", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "isize", "=", "labels", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "labels", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "filled_labels", "[", "i", ",", ":", "isize", ",", ":", "]", "=", "labels", "[", "i", "]", "\n", "", "labels_len", "[", "i", "]", "=", "isize", "\n", "\n", "", "return", "imgs", ",", "filled_labels", ",", "paths", ",", "sizes", ",", "labels_len", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.__init__": [[43, 57], ["numpy.eye", "range", "numpy.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ndim", ",", "dt", "=", "4", ",", "1.", "\n", "\n", "# Create Kalman filter model matrices.", "\n", "self", ".", "_motion_mat", "=", "np", ".", "eye", "(", "2", "*", "ndim", ",", "2", "*", "ndim", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "self", ".", "_motion_mat", "[", "i", ",", "ndim", "+", "i", "]", "=", "dt", "\n", "", "self", ".", "_update_mat", "=", "np", ".", "eye", "(", "ndim", ",", "2", "*", "ndim", ")", "\n", "\n", "# Motion and observation uncertainty are chosen relative to the current", "\n", "# state estimate. These weights control the amount of uncertainty in", "\n", "# the model. This is a bit hacky.", "\n", "self", ".", "_std_weight_position", "=", "1.", "/", "20", "\n", "self", ".", "_std_weight_velocity", "=", "1.", "/", "160", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.initiate": [[58, 90], ["numpy.zeros_like", "numpy.diag", "numpy.square"], "methods", ["None"], ["", "def", "initiate", "(", "self", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Create track from unassociated measurement.\n\n        Parameters\n        ----------\n        measurement : ndarray\n            Bounding box coordinates (x, y, a, h) with center position (x, y),\n            aspect ratio a, and height h.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector (8 dimensional) and covariance matrix (8x8\n            dimensional) of the new track. Unobserved velocities are initialized\n            to 0 mean.\n\n        \"\"\"", "\n", "mean_pos", "=", "measurement", "\n", "mean_vel", "=", "np", ".", "zeros_like", "(", "mean_pos", ")", "\n", "mean", "=", "np", ".", "r_", "[", "mean_pos", ",", "mean_vel", "]", "\n", "\n", "std", "=", "[", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "1e-2", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "3", "]", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", ",", "\n", "1e-5", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "3", "]", "]", "\n", "covariance", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.predict": [[91, 128], ["numpy.diag", "numpy.dot", "numpy.square", "numpy.linalg.multi_dot"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The 8 dimensional mean vector of the object state at the previous\n            time step.\n        covariance : ndarray\n            The 8x8 dimensional covariance matrix of the object state at the\n            previous time step.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n\n        \"\"\"", "\n", "std_pos", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "1e-2", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "std_vel", "=", "[", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "1e-5", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", "]", "\n", "motion_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ")", "\n", "\n", "#mean = np.dot(self._motion_mat, mean)", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_motion_mat", ",", "covariance", ",", "self", ".", "_motion_mat", ".", "T", ")", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.project": [[129, 157], ["numpy.diag", "numpy.dot", "numpy.linalg.multi_dot", "numpy.square"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Project state distribution to measurement space.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The state's mean vector (8 dimensional array).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the projected mean and covariance matrix of the given state\n            estimate.\n\n        \"\"\"", "\n", "std", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "1e-1", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "innovation_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "self", ".", "_update_mat", ",", "mean", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_update_mat", ",", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ")", "\n", "return", "mean", ",", "covariance", "+", "innovation_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.multi_predict": [[158, 196], ["range", "numpy.asarray", "numpy.dot", "numpy.dot().transpose", "numpy.square", "len", "numpy.asarray.append", "numpy.dot", "numpy.ones_like", "numpy.ones_like", "numpy.diag", "numpy.dot"], "methods", ["None"], ["", "def", "multi_predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step (Vectorized version).\n        Parameters\n        ----------\n        mean : ndarray\n            The Nx8 dimensional mean matrix of the object states at the previous\n            time step.\n        covariance : ndarray\n            The Nx8x8 dimensional covariance matrics of the object states at the\n            previous time step.\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n        \"\"\"", "\n", "std_pos", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "1e-2", "*", "np", ".", "ones_like", "(", "mean", "[", ":", ",", "3", "]", ")", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", "]", "\n", "std_vel", "=", "[", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "1e-5", "*", "np", ".", "ones_like", "(", "mean", "[", ":", ",", "3", "]", ")", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", "]", "\n", "sqr", "=", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ".", "T", "\n", "\n", "motion_cov", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mean", ")", ")", ":", "\n", "            ", "motion_cov", ".", "append", "(", "np", ".", "diag", "(", "sqr", "[", "i", "]", ")", ")", "\n", "", "motion_cov", "=", "np", ".", "asarray", "(", "motion_cov", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "left", "=", "np", ".", "dot", "(", "self", ".", "_motion_mat", ",", "covariance", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "covariance", "=", "np", ".", "dot", "(", "left", ",", "self", ".", "_motion_mat", ".", "T", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.update": [[197, 230], ["kalman_filter.KalmanFilter.project", "scipy.linalg.cho_factor", "scipy.linalg.cho_solve", "numpy.dot", "numpy.linalg.multi_dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.project"], ["", "def", "update", "(", "self", ",", "mean", ",", "covariance", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter correction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The predicted state's mean vector (8 dimensional).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n        measurement : ndarray\n            The 4 dimensional measurement vector (x, y, a, h), where (x, y)\n            is the center position, a the aspect ratio, and h the height of the\n            bounding box.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the measurement-corrected state distribution.\n\n        \"\"\"", "\n", "projected_mean", ",", "projected_cov", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "\n", "chol_factor", ",", "lower", "=", "scipy", ".", "linalg", ".", "cho_factor", "(", "\n", "projected_cov", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ")", "\n", "kalman_gain", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "\n", "(", "chol_factor", ",", "lower", ")", ",", "np", ".", "dot", "(", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ".", "T", ",", "\n", "check_finite", "=", "False", ")", ".", "T", "\n", "innovation", "=", "measurement", "-", "projected_mean", "\n", "\n", "new_mean", "=", "mean", "+", "np", ".", "dot", "(", "innovation", ",", "kalman_gain", ".", "T", ")", "\n", "new_covariance", "=", "covariance", "-", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "kalman_gain", ",", "projected_cov", ",", "kalman_gain", ".", "T", ")", ")", "\n", "return", "new_mean", ",", "new_covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.gating_distance": [[231, 274], ["kalman_filter.KalmanFilter.project", "numpy.sum", "numpy.linalg.cholesky", "scipy.linalg.solve_triangular", "numpy.sum", "ValueError"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.project"], ["", "def", "gating_distance", "(", "self", ",", "mean", ",", "covariance", ",", "measurements", ",", "\n", "only_position", "=", "False", ",", "metric", "=", "'maha'", ")", ":", "\n", "        ", "\"\"\"Compute gating distance between state distribution and measurements.\n        A suitable distance threshold can be obtained from `chi2inv95`. If\n        `only_position` is False, the chi-square distribution has 4 degrees of\n        freedom, otherwise 2.\n        Parameters\n        ----------\n        mean : ndarray\n            Mean vector over the state distribution (8 dimensional).\n        covariance : ndarray\n            Covariance of the state distribution (8x8 dimensional).\n        measurements : ndarray\n            An Nx4 dimensional matrix of N measurements, each in\n            format (x, y, a, h) where (x, y) is the bounding box center\n            position, a the aspect ratio, and h the height.\n        only_position : Optional[bool]\n            If True, distance computation is done with respect to the bounding\n            box center position only.\n        Returns\n        -------\n        ndarray\n            Returns an array of length N, where the i-th element contains the\n            squared Mahalanobis distance between (mean, covariance) and\n            `measurements[i]`.\n        \"\"\"", "\n", "mean", ",", "covariance", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "if", "only_position", ":", "\n", "            ", "mean", ",", "covariance", "=", "mean", "[", ":", "2", "]", ",", "covariance", "[", ":", "2", ",", ":", "2", "]", "\n", "measurements", "=", "measurements", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "d", "=", "measurements", "-", "mean", "\n", "if", "metric", "==", "'gaussian'", ":", "\n", "            ", "return", "np", ".", "sum", "(", "d", "*", "d", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'maha'", ":", "\n", "            ", "cholesky_factor", "=", "np", ".", "linalg", ".", "cholesky", "(", "covariance", ")", "\n", "z", "=", "scipy", ".", "linalg", ".", "solve_triangular", "(", "\n", "cholesky_factor", ",", "d", ".", "T", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ",", "\n", "overwrite_b", "=", "True", ")", "\n", "squared_maha", "=", "np", ".", "sum", "(", "z", "*", "z", ",", "axis", "=", "0", ")", "\n", "return", "squared_maha", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid distance metric'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.write_results": [[13, 39], ["os.path.dirname", "tracking_utils.log.logger.info", "os.path.exists", "os.makedirs", "open", "results_dict.items", "ValueError", "save_format.format", "f.write"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.lib.logger.Logger.write"], ["def", "write_results", "(", "filename", ",", "results_dict", ":", "Dict", ",", "data_type", ":", "str", ")", ":", "\n", "    ", "if", "not", "filename", ":", "\n", "        ", "return", "\n", "", "path", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "if", "data_type", "in", "(", "'mot'", ",", "'mcmot'", ",", "'lab'", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "", "elif", "data_type", "==", "'kitti'", ":", "\n", "        ", "save_format", "=", "'{frame} {id} pedestrian -1 -1 -10 {x1} {y1} {x2} {y2} -1 -1 -1 -1000 -1000 -1000 -10 {score}\\n'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "data_type", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "frame_data", "in", "results_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "data_type", "==", "'kitti'", ":", "\n", "                ", "frame_id", "-=", "1", "\n", "", "for", "tlwh", ",", "track_id", "in", "frame_data", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "tlwh", "\n", "x2", ",", "y2", "=", "x1", "+", "w", ",", "y1", "+", "h", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "x2", "=", "x2", ",", "y2", "=", "y2", ",", "w", "=", "w", ",", "h", "=", "h", ",", "score", "=", "1.0", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "logger", ".", "info", "(", "'Save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.read_results": [[41, 48], ["read_fun", "ValueError"], "function", ["None"], ["", "def", "read_results", "(", "filename", ",", "data_type", ":", "str", ",", "is_gt", "=", "False", ",", "is_ignore", "=", "False", ")", ":", "\n", "    ", "if", "data_type", "in", "(", "'mot'", ",", "'lab'", ")", ":", "\n", "        ", "read_fun", "=", "read_mot_results", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown data type: {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "return", "read_fun", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.read_mot_results": [[68, 108], ["dict", "os.path.isfile", "open", "f.readlines", "line.split", "int", "dict.setdefault", "tuple", "int", "results_dict[].append", "len", "list", "map", "int", "int", "float", "float", "float", "int", "float", "float"], "function", ["None"], ["def", "read_mot_results", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", ":", "\n", "    ", "valid_labels", "=", "{", "1", "}", "\n", "ignore_labels", "=", "{", "2", ",", "7", ",", "8", ",", "12", "}", "\n", "results_dict", "=", "dict", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "linelist", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "linelist", ")", "<", "7", ":", "\n", "                    ", "continue", "\n", "", "fid", "=", "int", "(", "linelist", "[", "0", "]", ")", "\n", "if", "fid", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "results_dict", ".", "setdefault", "(", "fid", ",", "list", "(", ")", ")", "\n", "\n", "if", "is_gt", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "mark", "=", "int", "(", "float", "(", "linelist", "[", "6", "]", ")", ")", "\n", "if", "mark", "==", "0", "or", "label", "not", "in", "valid_labels", ":", "\n", "                            ", "continue", "\n", "", "", "score", "=", "1", "\n", "", "elif", "is_ignore", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "vis_ratio", "=", "float", "(", "linelist", "[", "8", "]", ")", "\n", "if", "label", "not", "in", "ignore_labels", "and", "vis_ratio", ">=", "0", ":", "\n", "                            ", "continue", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "score", "=", "1", "\n", "", "else", ":", "\n", "                    ", "score", "=", "float", "(", "linelist", "[", "6", "]", ")", "\n", "\n", "", "tlwh", "=", "tuple", "(", "map", "(", "float", ",", "linelist", "[", "2", ":", "6", "]", ")", ")", "\n", "target_id", "=", "int", "(", "linelist", "[", "1", "]", ")", "\n", "\n", "results_dict", "[", "fid", "]", ".", "append", "(", "(", "tlwh", ",", "target_id", ",", "score", ")", ")", "\n", "\n", "", "", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.unzip_objs": [[110, 118], ["numpy.asarray().reshape", "len", "zip", "numpy.asarray"], "function", ["None"], ["", "def", "unzip_objs", "(", "objs", ")", ":", "\n", "    ", "if", "len", "(", "objs", ")", ">", "0", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "zip", "(", "*", "objs", ")", "\n", "", "else", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "tlwhs", "=", "np", ".", "asarray", "(", "tlwhs", ",", "dtype", "=", "float", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "return", "tlwhs", ",", "ids", ",", "scores", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.__init__": [[13, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n", "self", ".", "duration", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.tic": [[22, 26], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.toc": [[27, 37], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "self", ".", "duration", "=", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "self", ".", "duration", "=", "self", ".", "diff", "\n", "", "return", "self", ".", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.timer.Timer.clear": [[38, 45], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "self", ".", "duration", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.tlwhs_to_tlbrs": [[10, 17], ["numpy.copy", "len"], "function", ["None"], ["def", "tlwhs_to_tlbrs", "(", "tlwhs", ")", ":", "\n", "    ", "tlbrs", "=", "np", ".", "copy", "(", "tlwhs", ")", "\n", "if", "len", "(", "tlbrs", ")", "==", "0", ":", "\n", "        ", "return", "tlbrs", "\n", "", "tlbrs", "[", ":", ",", "2", "]", "+=", "tlwhs", "[", ":", ",", "0", "]", "\n", "tlbrs", "[", ":", ",", "3", "]", "+=", "tlwhs", "[", ":", ",", "1", "]", "\n", "return", "tlbrs", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.get_color": [[19, 24], ["None"], "function", ["None"], ["", "def", "get_color", "(", "idx", ")", ":", "\n", "    ", "idx", "=", "idx", "*", "3", "\n", "color", "=", "(", "(", "27", "*", "idx", ")", "%", "255", ",", "(", "11", "*", "idx", ")", "%", "255", ",", "(", "19", "*", "idx", ")", "%", "255", ")", "\n", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.resize_image": [[26, 31], ["max", "cv2.resize", "float", "max"], "function", ["None"], ["", "def", "resize_image", "(", "image", ",", "max_size", "=", "800", ")", ":", "\n", "    ", "if", "max", "(", "image", ".", "shape", "[", ":", "2", "]", ")", ">", "max_size", ":", "\n", "        ", "scale", "=", "float", "(", "max_size", ")", "/", "max", "(", "image", ".", "shape", "[", ":", "2", "]", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_tracking": [[33, 62], ["numpy.ascontiguousarray", "max", "max", "max", "cv2.putText", "enumerate", "numpy.copy", "numpy.zeros", "int", "int", "tuple", "int", "visualization.get_color", "cv2.rectangle", "cv2.putText", "int", "map", "int", "abs", "int"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.get_color"], ["", "def", "plot_tracking", "(", "image", ",", "tlwhs", ",", "obj_ids", ",", "scores", "=", "None", ",", "frame_id", "=", "0", ",", "fps", "=", "0.", ",", "ids2", "=", "None", ")", ":", "\n", "    ", "im", "=", "np", ".", "ascontiguousarray", "(", "np", ".", "copy", "(", "image", ")", ")", "\n", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "top_view", "=", "np", ".", "zeros", "(", "[", "im_w", ",", "im_w", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "+", "255", "\n", "\n", "text_scale", "=", "max", "(", "1", ",", "image", ".", "shape", "[", "1", "]", "/", "1600.", ")", "\n", "text_thickness", "=", "2", "\n", "line_thickness", "=", "max", "(", "1", ",", "int", "(", "image", ".", "shape", "[", "1", "]", "/", "300.", ")", ")", "\n", "\n", "radius", "=", "max", "(", "5", ",", "int", "(", "im_w", "/", "140.", ")", ")", "\n", "# cv2.putText(im, 'frame: %d fps: %.2f num: %d' % (frame_id, fps, len(tlwhs)),", "\n", "#             (0, int(15 * text_scale)), cv2.FONT_HERSHEY_PLAIN, text_scale, (0, 0, 255), thickness=2)", "\n", "cv2", ".", "putText", "(", "im", ",", "'frame: %d'", "%", "(", "frame_id", ")", ",", "\n", "(", "0", ",", "int", "(", "30", "*", "text_scale", ")", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "text_scale", "*", "2", ",", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "2", ")", "\n", "\n", "for", "i", ",", "tlwh", "in", "enumerate", "(", "tlwhs", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "w", ",", "h", "=", "tlwh", "\n", "intbox", "=", "tuple", "(", "map", "(", "int", ",", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", ")", "\n", "obj_id", "=", "int", "(", "obj_ids", "[", "i", "]", ")", "\n", "id_text", "=", "'{}'", ".", "format", "(", "int", "(", "obj_id", ")", ")", "\n", "if", "ids2", "is", "not", "None", ":", "\n", "            ", "id_text", "=", "id_text", "+", "', {}'", ".", "format", "(", "int", "(", "ids2", "[", "i", "]", ")", ")", "\n", "", "_line_thickness", "=", "1", "if", "obj_id", "<=", "0", "else", "line_thickness", "\n", "color", "=", "get_color", "(", "abs", "(", "obj_id", ")", ")", "\n", "cv2", ".", "rectangle", "(", "im", ",", "intbox", "[", "0", ":", "2", "]", ",", "intbox", "[", "2", ":", "4", "]", ",", "color", "=", "color", ",", "thickness", "=", "line_thickness", ")", "\n", "cv2", ".", "putText", "(", "im", ",", "id_text", ",", "(", "intbox", "[", "0", "]", ",", "intbox", "[", "1", "]", "+", "30", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "text_scale", "*", "1.2", ",", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "thickness", "=", "text_thickness", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_trajectory": [[64, 73], ["image.copy.copy", "zip", "visualization.get_color", "int", "tuple", "cv2.circle", "map", "int", "int"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.get_color"], ["", "def", "plot_trajectory", "(", "image", ",", "tlwhs", ",", "track_ids", ")", ":", "\n", "    ", "image", "=", "image", ".", "copy", "(", ")", "\n", "for", "one_tlwhs", ",", "track_id", "in", "zip", "(", "tlwhs", ",", "track_ids", ")", ":", "\n", "        ", "color", "=", "get_color", "(", "int", "(", "track_id", ")", ")", "\n", "for", "tlwh", "in", "one_tlwhs", ":", "\n", "            ", "x1", ",", "y1", ",", "w", ",", "h", "=", "tuple", "(", "map", "(", "int", ",", "tlwh", ")", ")", "\n", "cv2", ".", "circle", "(", "image", ",", "(", "int", "(", "x1", "+", "0.5", "*", "w", ")", ",", "int", "(", "y1", "+", "h", ")", ")", ",", "2", ",", "color", ",", "thickness", "=", "2", ")", "\n", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.visualization.plot_detections": [[75, 98], ["numpy.copy", "max", "enumerate", "numpy.asarray", "cv2.rectangle", "len", "cv2.putText", "cv2.putText"], "function", ["None"], ["", "def", "plot_detections", "(", "image", ",", "tlbrs", ",", "scores", "=", "None", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "ids", "=", "None", ")", ":", "\n", "    ", "im", "=", "np", ".", "copy", "(", "image", ")", "\n", "text_scale", "=", "max", "(", "1", ",", "image", ".", "shape", "[", "1", "]", "/", "800.", ")", "\n", "thickness", "=", "2", "if", "text_scale", ">", "1.3", "else", "1", "\n", "for", "i", ",", "det", "in", "enumerate", "(", "tlbrs", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "np", ".", "asarray", "(", "det", "[", ":", "4", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "len", "(", "det", ")", ">=", "7", ":", "\n", "            ", "label", "=", "'det'", "if", "det", "[", "5", "]", ">", "0", "else", "'trk'", "\n", "if", "ids", "is", "not", "None", ":", "\n", "                ", "text", "=", "'{}# {:.2f}: {:d}'", ".", "format", "(", "label", ",", "det", "[", "6", "]", ",", "ids", "[", "i", "]", ")", "\n", "cv2", ".", "putText", "(", "im", ",", "text", ",", "(", "x1", ",", "y1", "+", "30", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "text_scale", ",", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "thickness", ")", "\n", "", "else", ":", "\n", "                ", "text", "=", "'{}# {:.2f}'", ".", "format", "(", "label", ",", "det", "[", "6", "]", ")", "\n", "\n", "", "", "if", "scores", "is", "not", "None", ":", "\n", "            ", "text", "=", "'{:.2f}'", ".", "format", "(", "scores", "[", "i", "]", ")", "\n", "cv2", ".", "putText", "(", "im", ",", "text", ",", "(", "x1", ",", "y1", "+", "30", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "text_scale", ",", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "thickness", ")", "\n", "\n", "", "cv2", ".", "rectangle", "(", "im", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "color", ",", "2", ")", "\n", "\n", "", "return", "im", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.log.get_logger": [[9, 21], ["logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "name", "=", "'root'", ")", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "# fmt='%(asctime)s [%(levelname)s]: %(filename)s(%(funcName)s:%(lineno)s) >> %(message)s')", "\n", "fmt", "=", "'%(asctime)s [%(levelname)s]: %(message)s'", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.parse_config.parse_model_cfg": [[6, 25], ["open", "open.read().split", "x.rstrip().lstrip", "line.startswith", "open.read", "module_defs.append", "line[].rstrip", "line.split", "value.strip.strip", "value.strip.strip", "x.rstrip", "x.startswith", "key.rstrip"], "function", ["None"], ["def", "parse_model_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "x", "and", "not", "x", ".", "startswith", "(", "'#'", ")", "]", "\n", "lines", "=", "[", "x", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "for", "x", "in", "lines", "]", "# get rid of fringe whitespaces", "\n", "module_defs", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'['", ")", ":", "# This marks the start of a new block", "\n", "            ", "module_defs", ".", "append", "(", "{", "}", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "=", "line", "[", "1", ":", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "if", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "module_defs", "[", "-", "1", "]", "[", "'batch_normalize'", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\"=\"", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "key", ".", "rstrip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "\n", "", "", "return", "module_defs", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.parse_config.parse_data_cfg": [[27, 41], ["dict", "open", "fp.readlines", "line.strip.strip", "line.strip.split", "value.strip", "line.strip.startswith", "key.strip"], "function", ["None"], ["", "def", "parse_data_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the data configuration file\"\"\"", "\n", "options", "=", "dict", "(", ")", "\n", "options", "[", "'gpus'", "]", "=", "'0'", "\n", "options", "[", "'num_workers'", "]", "=", "'10'", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", "or", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "options", "[", "key", ".", "strip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "", "return", "options", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.mkdir_if_missing": [[23, 26], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["if", "self", ".", "count", ">", "0", ":", "\n", "          ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.float3": [[28, 30], ["float", "format"], "function", ["None"], ["# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.init_seeds": [[32, 38], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n", "\n", "", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.load_classes": [[40, 47], ["open", "open.read().split", "list", "filter", "open.read"], "function", ["None"], ["y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n", "", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.model_info": [[49, 58], ["sum", "sum", "print", "enumerate", "print", "model.named_parameters", "name.replace.replace", "print", "x.numel", "x.numel", "model.parameters", "model.parameters", "p.numel", "list", "p.mean", "p.std"], "function", ["None"], ["\n", "\n", "# lists/pytorch to numpy", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.plot_one_box": [[61, 72], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "round", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "range", "max"], "function", ["None"], ["# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "sum", "(", "target_cls", "==", "c", ")", "# Number of ground truth objects", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.weights_init_normal": [[74, 81], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["\n", "if", "(", "n_p", "==", "0", ")", "and", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "elif", "(", "n_p", "==", "0", ")", "or", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.xyxy2xywh": [[83, 91], ["torch.zeros", "torch.zeros", "numpy.zeros"], "function", ["None"], ["            ", "fpc", "=", "np", ".", "cumsum", "(", "1", "-", "tp", "[", "i", "]", ")", "\n", "tpc", "=", "np", ".", "cumsum", "(", "tp", "[", "i", "]", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.xywh2xyxy": [[93, 101], ["torch.zeros", "torch.zeros", "numpy.zeros"], "function", ["None"], ["\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n", "\n", "", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.scale_coords": [[103, 115], ["min", "torch.clamp", "torch.clamp", "float", "float"], "function", ["None"], ["\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.ap_per_class": [[117, 169], ["numpy.argsort", "numpy.unique", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "sum", "sum", "numpy.array", "np.unique.astype", "numpy.array", "numpy.array", "ap.append", "r.append", "p.append", "numpy.cumsum", "numpy.cumsum", "r.append", "p.append", "ap.append", "utils.compute_ap"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.compute_ap"], ["        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n", "\n", "", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "N", ",", "M", "=", "len", "(", "box1", ")", ",", "len", "(", "box2", ")", "\n", "if", "x1y1x2y2", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "\n", "# get the coordinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ".", "unsqueeze", "(", "1", ")", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ".", "unsqueeze", "(", "1", ")", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ".", "unsqueeze", "(", "1", ")", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ".", "unsqueeze", "(", "1", ")", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", ",", "0", ")", "*", "torch", ".", "clamp", "(", "inter_rect_y2", "-", "inter_rect_y1", ",", "0", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "b2_area", "=", "(", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "\n", "return", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "\n", "", "def", "generate_anchors", "(", "nGh", ",", "nGw", ",", "anchor_wh", ")", ":", "\n", "    ", "nA", "=", "len", "(", "anchor_wh", ")", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "nGh", ")", ",", "np", ".", "arange", "(", "nGw", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "mesh", "=", "np", ".", "stack", "(", "[", "xx", ",", "yy", "]", ",", "axis", "=", "0", ")", "# Shape 2, nGh, nGw", "\n", "mesh", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "mesh", ",", "axis", "=", "0", ")", ",", "(", "nA", ",", "1", ",", "1", ",", "1", ")", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_offset_mesh", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "anchor_wh", ",", "-", "1", ")", ",", "-", "1", ")", ",", "(", "1", ",", "1", ",", "nGh", ",", "nGw", ")", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_mesh", "=", "np", ".", "concatenate", "(", "(", "mesh", ",", "anchor_offset_mesh", ")", ",", "axis", "=", "1", ")", "# Shape nA x 4 x nGh x nGw", "\n", "return", "anchor_mesh", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.compute_ap": [[171, 197], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "gx", ",", "gy", ",", "gw", ",", "gh", "=", "gt_box_list", "[", ":", ",", "0", "]", ",", "gt_box_list", "[", ":", ",", "1", "]", ",", "gt_box_list", "[", ":", ",", "2", "]", ",", "gt_box_list", "[", ":", ",", "3", "]", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "np", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "np", ".", "log", "(", "gh", "/", "ph", ")", "\n", "return", "np", ".", "stack", "(", "(", "dx", ",", "dy", ",", "dw", ",", "dh", ")", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.bbox_iou": [[199, 228], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "b1_x1.unsqueeze", "b1_y1.unsqueeze", "b1_x2.unsqueeze", "b1_y2.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.build_targets_max": [[230, 312], ["len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.ByteTensor().fill_().cuda", "torch.ByteTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "range", "torch.cat", "torch.cat", "t[].clone().long().cuda", "len", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "anchor_wh.unsqueeze", "torch.min().prod", "torch.min().prod", "iou.max", "torch.log", "torch.log", "t[].clone().long().cuda.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "t[].clone", "t[].clone", "torch.sort", "torch.sort", "utils.return_torch_unique_index", "t[].long", "t[].clone", "t[].clone", "gxy.floor", "t[].clone().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.unique", "torch.unique", "len", "len", "t.view.view", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "t[].clone", "box1.prod", "anchor_wh.unsqueeze.prod"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.return_torch_unique_index"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.generate_anchor": [[316, 326], ["len", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "mesh.unsqueeze().repeat().float.unsqueeze().repeat().float", "anchor_wh.unsqueeze().unsqueeze().repeat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx.cuda", "yy.cuda", "mesh.unsqueeze().repeat().float.unsqueeze().repeat", "anchor_wh.unsqueeze().unsqueeze", "mesh.unsqueeze().repeat().float.unsqueeze", "anchor_wh.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.encode_delta": [[327, 337], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.stack", "torch.stack"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.decode_delta": [[338, 347], ["torch.stack", "torch.stack", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.decode_delta_map": [[348, 360], ["utils.generate_anchor", "anchor_mesh.unsqueeze().repeat.permute().contiguous", "anchor_mesh.unsqueeze().repeat.unsqueeze().repeat", "utils.decode_delta", "decode_delta.view", "delta_map.view", "anchor_mesh.unsqueeze().repeat.view", "anchor_mesh.unsqueeze().repeat.permute", "anchor_mesh.unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.generate_anchor", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.decode_delta"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.pooling_nms": [[362, 367], ["torch.max_pool2d"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.non_max_suppression": [[369, 403], ["enumerate", "v.unsqueeze.nonzero().squeeze", "utils.xywh2xyxy", "torchvision.ops.nms", "range", "len", "v.unsqueeze.unsqueeze", "len", "len", "v.unsqueeze.nonzero", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.xywh2xyxy"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.return_torch_unique_index": [[405, 412], ["torch.zeros().long", "torch.zeros().long", "range", "torch.zeros", "torch.zeros"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.strip_optimizer_from_checkpoint": [[414, 420], ["torch.load", "torch.load", "torch.save", "torch.save", "filename.replace"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.save", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.save"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.utils.plot_results": [[422, 438], ["matplotlib.figure", "sorted", "glob.glob", "range", "range", "numpy.loadtxt", "matplotlib.subplot", "matplotlib.plot", "matplotlib.title", "matplotlib.legend"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.__init__": [[17, 24], ["evaluation.Evaluator.load_annotations", "evaluation.Evaluator.reset_accumulator"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.load_annotations", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.reset_accumulator"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "seq_name", ",", "data_type", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "data_type", "=", "data_type", "\n", "\n", "self", ".", "load_annotations", "(", ")", "\n", "self", ".", "reset_accumulator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.load_annotations": [[25, 31], ["os.path.join", "tracking_utils.io.read_results", "tracking_utils.io.read_results"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.read_results", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.read_results"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "data_type", "==", "'mot'", "\n", "\n", "gt_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "seq_name", ",", "'gt'", ",", "'gt.txt'", ")", "\n", "self", ".", "gt_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "True", ")", "\n", "self", ".", "gt_ignore_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_ignore", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.reset_accumulator": [[32, 34], ["motmetrics.MOTAccumulator"], "methods", ["None"], ["", "def", "reset_accumulator", "(", "self", ")", ":", "\n", "        ", "self", ".", "acc", "=", "mm", ".", "MOTAccumulator", "(", "auto_id", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.eval_frame": [[35, 82], ["numpy.copy", "numpy.copy", "evaluation.Evaluator.gt_frame_dict.get", "evaluation.Evaluator.gt_ignore_frame_dict.get", "numpy.ones", "motmetrics.distances.iou_matrix", "motmetrics.distances.iou_matrix", "evaluation.Evaluator.acc.update", "tracking_utils.io.unzip_objs", "tracking_utils.io.unzip_objs", "len", "len", "motmetrics.lap.linear_sum_assignment", "map", "numpy.asarray", "hasattr", "numpy.asarray", "numpy.logical_not", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.unzip_objs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.unzip_objs"], ["", "def", "eval_frame", "(", "self", ",", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", ":", "\n", "# results", "\n", "        ", "trk_tlwhs", "=", "np", ".", "copy", "(", "trk_tlwhs", ")", "\n", "trk_ids", "=", "np", ".", "copy", "(", "trk_ids", ")", "\n", "\n", "# gts", "\n", "gt_objs", "=", "self", ".", "gt_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "gt_tlwhs", ",", "gt_ids", "=", "unzip_objs", "(", "gt_objs", ")", "[", ":", "2", "]", "\n", "\n", "# ignore boxes", "\n", "ignore_objs", "=", "self", ".", "gt_ignore_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "ignore_tlwhs", "=", "unzip_objs", "(", "ignore_objs", ")", "[", "0", "]", "\n", "\n", "# remove ignored results", "\n", "keep", "=", "np", ".", "ones", "(", "len", "(", "trk_tlwhs", ")", ",", "dtype", "=", "bool", ")", "\n", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "ignore_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "if", "len", "(", "iou_distance", ")", ">", "0", ":", "\n", "            ", "match_is", ",", "match_js", "=", "mm", ".", "lap", ".", "linear_sum_assignment", "(", "iou_distance", ")", "\n", "match_is", ",", "match_js", "=", "map", "(", "lambda", "a", ":", "np", ".", "asarray", "(", "a", ",", "dtype", "=", "int", ")", ",", "[", "match_is", ",", "match_js", "]", ")", "\n", "match_ious", "=", "iou_distance", "[", "match_is", ",", "match_js", "]", "\n", "\n", "match_js", "=", "np", ".", "asarray", "(", "match_js", ",", "dtype", "=", "int", ")", "\n", "match_js", "=", "match_js", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "match_ious", ")", ")", "]", "\n", "keep", "[", "match_js", "]", "=", "False", "\n", "trk_tlwhs", "=", "trk_tlwhs", "[", "keep", "]", "\n", "trk_ids", "=", "trk_ids", "[", "keep", "]", "\n", "#match_is, match_js = mm.lap.linear_sum_assignment(iou_distance)", "\n", "#match_is, match_js = map(lambda a: np.asarray(a, dtype=int), [match_is, match_js])", "\n", "#match_ious = iou_distance[match_is, match_js]", "\n", "\n", "#match_js = np.asarray(match_js, dtype=int)", "\n", "#match_js = match_js[np.logical_not(np.isnan(match_ious))]", "\n", "#keep[match_js] = False", "\n", "#trk_tlwhs = trk_tlwhs[keep]", "\n", "#trk_ids = trk_ids[keep]", "\n", "\n", "# get distance matrix", "\n", "", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "gt_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "\n", "# acc", "\n", "self", ".", "acc", ".", "update", "(", "gt_ids", ",", "trk_ids", ",", "iou_distance", ")", "\n", "\n", "if", "rtn_events", "and", "iou_distance", ".", "size", ">", "0", "and", "hasattr", "(", "self", ".", "acc", ",", "'last_mot_events'", ")", ":", "\n", "            ", "events", "=", "self", ".", "acc", ".", "last_mot_events", "# only supported by https://github.com/longcw/py-motmetrics", "\n", "", "else", ":", "\n", "            ", "events", "=", "None", "\n", "", "return", "events", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.eval_file": [[83, 94], ["evaluation.Evaluator.reset_accumulator", "tracking_utils.io.read_results", "sorted", "list", "tracking_utils.io.read_results.get", "evaluation.Evaluator.eval_frame", "tracking_utils.io.unzip_objs", "set", "set", "evaluation.Evaluator.gt_frame_dict.keys", "tracking_utils.io.read_results.keys"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.reset_accumulator", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.read_results", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.eval_frame", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.io.unzip_objs"], ["", "def", "eval_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "reset_accumulator", "(", ")", "\n", "\n", "result_frame_dict", "=", "read_results", "(", "filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "False", ")", "\n", "frames", "=", "sorted", "(", "list", "(", "set", "(", "self", ".", "gt_frame_dict", ".", "keys", "(", ")", ")", "|", "set", "(", "result_frame_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "frame_id", "in", "frames", ":", "\n", "            ", "trk_objs", "=", "result_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "trk_tlwhs", ",", "trk_ids", "=", "unzip_objs", "(", "trk_objs", ")", "[", ":", "2", "]", "\n", "self", ".", "eval_frame", "(", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.get_summary": [[95, 111], ["copy.deepcopy", "copy.deepcopy", "motmetrics.metrics.create", "motmetrics.metrics.create.compute_many"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_summary", "(", "accs", ",", "names", ",", "metrics", "=", "(", "'mota'", ",", "'num_switches'", ",", "'idp'", ",", "'idr'", ",", "'idf1'", ",", "'precision'", ",", "'recall'", ")", ")", ":", "\n", "        ", "names", "=", "copy", ".", "deepcopy", "(", "names", ")", "\n", "if", "metrics", "is", "None", ":", "\n", "            ", "metrics", "=", "mm", ".", "metrics", ".", "motchallenge_metrics", "\n", "", "metrics", "=", "copy", ".", "deepcopy", "(", "metrics", ")", "\n", "\n", "mh", "=", "mm", ".", "metrics", ".", "create", "(", ")", "\n", "summary", "=", "mh", ".", "compute_many", "(", "\n", "accs", ",", "\n", "metrics", "=", "metrics", ",", "\n", "names", "=", "names", ",", "\n", "generate_overall", "=", "True", "\n", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.evaluation.Evaluator.save_summary": [[112, 118], ["pd.ExcelWriter", "summary.to_excel", "pd.ExcelWriter.save"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.save"], ["", "@", "staticmethod", "\n", "def", "save_summary", "(", "summary", ",", "filename", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "filename", ")", "\n", "summary", ".", "to_excel", "(", "writer", ")", "\n", "writer", ".", "save", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode._nms": [[14, 21], ["torch.functional.max_pool2d"], "function", ["None"], ["def", "_nms", "(", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "nn", ".", "functional", ".", "max_pool2d", "(", "\n", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "(", ")", "\n", "return", "heat", "*", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode._topk_channel": [[23, 33], ["scores.size", "torch.topk", "torch.topk", "scores.view"], "function", ["None"], ["", "def", "_topk_channel", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "      ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "return", "topk_scores", ",", "topk_inds", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode._topk": [[34, 51], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "utils._gather_feat().view", "utils._gather_feat().view", "utils._gather_feat().view", "scores.view", "topk_scores.view", "utils._gather_feat", "utils._gather_feat", "utils._gather_feat", "_gather_feat().view.view", "_gather_feat().view.view", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat"], ["", "def", "_topk", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "/", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_clses", "=", "(", "topk_ind", "/", "K", ")", ".", "int", "(", ")", "\n", "topk_inds", "=", "_gather_feat", "(", "\n", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_ys", "=", "_gather_feat", "(", "topk_ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_xs", "=", "_gather_feat", "(", "topk_xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "\n", "return", "topk_score", ",", "topk_inds", ",", "topk_clses", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode": [[53, 85], ["_nms.size", "decode._nms", "decode._topk", "utils._tranpose_and_gather_feat", "clses.view().float.view().float", "scores.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils._tranpose_and_gather_feat", "reg.view.view", "wh.view.view", "clses.view().float.view().expand().long", "wh.view.gather().view", "wh.view.view", "xs.view", "ys.view", "xs.view", "ys.view", "clses.view().float.view", "clses.view().float.view().expand", "wh.view.gather", "clses.view().float.view"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker._nms", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode._topk", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather"], ["", "def", "mot_decode", "(", "heat", ",", "wh", ",", "reg", "=", "None", ",", "cat_spec_wh", "=", "False", ",", "K", "=", "100", ")", ":", "\n", "    ", "batch", ",", "cat", ",", "height", ",", "width", "=", "heat", ".", "size", "(", ")", "\n", "\n", "# heat = torch.sigmoid(heat)", "\n", "# perform nms on heatmaps", "\n", "heat", "=", "_nms", "(", "heat", ")", "\n", "\n", "scores", ",", "inds", ",", "clses", ",", "ys", ",", "xs", "=", "_topk", "(", "heat", ",", "K", "=", "K", ")", "\n", "if", "reg", "is", "not", "None", ":", "\n", "        ", "reg", "=", "_tranpose_and_gather_feat", "(", "reg", ",", "inds", ")", "\n", "reg", "=", "reg", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "+", "0.5", "\n", "", "wh", "=", "_tranpose_and_gather_feat", "(", "wh", ",", "inds", ")", "\n", "if", "cat_spec_wh", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "cat", ",", "2", ")", "\n", "clses_ind", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "batch", ",", "K", ",", "1", ",", "2", ")", ".", "long", "(", ")", "\n", "wh", "=", "wh", ".", "gather", "(", "2", ",", "clses_ind", ")", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "wh", "=", "wh", ".", "view", "(", "batch", ",", "K", ",", "2", ")", "\n", "", "clses", "=", "clses", ".", "view", "(", "batch", ",", "K", ",", "1", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch", ",", "K", ",", "1", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "[", "xs", "-", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "-", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", ",", "\n", "xs", "+", "wh", "[", "...", ",", "0", ":", "1", "]", "/", "2", ",", "\n", "ys", "+", "wh", "[", "...", ",", "1", ":", "2", "]", "/", "2", "]", ",", "dim", "=", "2", ")", "\n", "detections", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ",", "clses", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "detections", ",", "inds", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.__init__": [[49, 68], ["torch.nn.modules.Module.__init__", "torch.cuda.is_available", "list", "len", "data_parallel._DataParallel.module.cuda", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", "_DataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "[", "]", "\n", "return", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "if", "output_device", "is", "None", ":", "\n", "            ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "chunk_sizes", "=", "chunk_sizes", "\n", "self", ".", "output_device", "=", "output_device", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "self", ".", "module", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.forward": [[69, 78], ["data_parallel._DataParallel.scatter", "data_parallel._DataParallel.replicate", "data_parallel._DataParallel.parallel_apply", "data_parallel._DataParallel.gather", "data_parallel._DataParallel.module", "len", "data_parallel._DataParallel.module", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.replicate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ",", "self", ".", "chunk_sizes", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.replicate": [[79, 81], ["torch.nn.parallel.replicate.replicate"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "return", "replicate", "(", "module", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.scatter": [[82, 84], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter_kwargs"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ",", "chunk_sizes", "=", "self", ".", "chunk_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.parallel_apply": [[85, 87], ["torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather": [[88, 90], ["torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel.data_parallel": [[92, 123], ["scatter_gather.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "torch.nn.parallel.parallel_apply.parallel_apply", "torch.nn.parallel.scatter_gather.gather", "isinstance", "list", "len", "module", "range", "len", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter_kwargs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.replicate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather"], ["", "", "def", "data_parallel", "(", "module", ",", "inputs", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "module_kwargs", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Evaluates module(input) in parallel across the GPUs given in device_ids.\n\n    This is the functional version of the DataParallel module.\n\n    Args:\n        module: the module to evaluate in parallel\n        inputs: inputs to the module\n        device_ids: GPU ids on which to replicate module\n        output_device: GPU location of the output  Use -1 to indicate the CPU.\n            (default: device_ids[0])\n    Returns:\n        a Variable containing the result of module(input) located on\n        output_device\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "(", "inputs", ",", ")", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "        ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "", "if", "output_device", "is", "None", ":", "\n", "        ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "\n", "", "inputs", ",", "module_kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ",", "dim", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "        ", "return", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "module_kwargs", "[", "0", "]", ")", "\n", "", "used_device_ids", "=", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", "\n", "replicas", "=", "replicate", "(", "module", ",", "used_device_ids", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "module_kwargs", ",", "used_device_ids", ")", "\n", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel.DataParallel": [[124, 134], ["range", "data_parallel._DataParallel", "torch.nn.DataParallel", "len", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel.DataParallel", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel.DataParallel"], ["", "def", "DataParallel", "(", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "if", "chunk_sizes", "is", "None", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "standard_size", "=", "True", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "chunk_sizes", ")", ")", ":", "\n", "        ", "if", "chunk_sizes", "[", "i", "]", "!=", "chunk_sizes", "[", "0", "]", ":", "\n", "            ", "standard_size", "=", "False", "\n", "", "", "if", "standard_size", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "return", "_DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ",", "chunk_sizes", ")", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model": [[26, 32], ["get_model", "int", "arch.find", "arch.find"], "function", ["None"], ["def", "create_model", "(", "arch", ",", "heads", ",", "head_conv", ")", ":", "\n", "  ", "num_layers", "=", "int", "(", "arch", "[", "arch", ".", "find", "(", "'_'", ")", "+", "1", ":", "]", ")", "if", "'_'", "in", "arch", "else", "0", "\n", "arch", "=", "arch", "[", ":", "arch", ".", "find", "(", "'_'", ")", "]", "if", "'_'", "in", "arch", "else", "arch", "\n", "get_model", "=", "_model_factory", "[", "arch", "]", "\n", "model", "=", "get_model", "(", "num_layers", "=", "num_layers", ",", "heads", "=", "heads", ",", "head_conv", "=", "head_conv", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model": [[33, 87], ["torch.load", "print", "model.state_dict", "model.load_state_dict", "k.startswith", "print", "print", "optimizer.load_state_dict", "print", "print", "k.startswith", "print"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load"], ["", "def", "load_model", "(", "model", ",", "model_path", ",", "optimizer", "=", "None", ",", "resume", "=", "False", ",", "\n", "lr", "=", "None", ",", "lr_step", "=", "None", ")", ":", "\n", "  ", "start_epoch", "=", "0", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "print", "(", "'loaded {}, epoch {}'", ".", "format", "(", "model_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "state_dict_", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "state_dict", "=", "{", "}", "\n", "\n", "# convert data_parallal to model", "\n", "for", "k", "in", "state_dict_", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "'module'", ")", "and", "not", "k", ".", "startswith", "(", "'module_list'", ")", ":", "\n", "      ", "state_dict", "[", "k", "[", "7", ":", "]", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "else", ":", "\n", "      ", "state_dict", "[", "k", "]", "=", "state_dict_", "[", "k", "]", "\n", "", "", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# check loaded parameters and created model parameters", "\n", "msg", "=", "'If you see this, your model does not fully load the '", "+", "'pre-trained weight. Please make sure '", "+", "'you have correctly specified --arch xxx '", "+", "'or set the correct --num_classes for your own dataset.'", "\n", "for", "k", "in", "state_dict", ":", "\n", "    ", "if", "k", "in", "model_state_dict", ":", "\n", "      ", "if", "state_dict", "[", "k", "]", ".", "shape", "!=", "model_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "        ", "print", "(", "'Skip loading parameter {}, required shape{}, '", "'loaded shape{}. {}'", ".", "format", "(", "\n", "k", ",", "model_state_dict", "[", "k", "]", ".", "shape", ",", "state_dict", "[", "k", "]", ".", "shape", ",", "msg", ")", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "else", ":", "\n", "      ", "print", "(", "'Drop parameter {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "", "", "for", "k", "in", "model_state_dict", ":", "\n", "    ", "if", "not", "(", "k", "in", "state_dict", ")", ":", "\n", "      ", "print", "(", "'No param {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# resume optimizer parameters", "\n", "if", "optimizer", "is", "not", "None", "and", "resume", ":", "\n", "    ", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "      ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "start_lr", "=", "lr", "\n", "for", "step", "in", "lr_step", ":", "\n", "        ", "if", "start_epoch", ">=", "step", ":", "\n", "          ", "start_lr", "*=", "0.1", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "start_lr", "\n", "", "print", "(", "'Resumed optimizer with start lr'", ",", "start_lr", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'No optimizer parameters in checkpoint.'", ")", "\n", "", "", "if", "optimizer", "is", "not", "None", ":", "\n", "    ", "return", "model", ",", "optimizer", ",", "start_epoch", "\n", "", "else", ":", "\n", "    ", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.save_model": [[88, 98], ["isinstance", "torch.save", "model.module.state_dict", "model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.save"], ["", "", "def", "save_model", "(", "path", ",", "epoch", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "  ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "    ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "    ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "data", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", "}", "\n", "if", "not", "(", "optimizer", "is", "None", ")", ":", "\n", "    ", "data", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "data", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter": [[11, 31], ["scatter_gather.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Slices variables into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not variables. Does not\n    support Tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "Variable", ")", ":", "\n", "            ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "assert", "not", "torch", ".", "is_tensor", "(", "obj", ")", ",", "\"Tensors not supported in scatter.\"", "\n", "if", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "", "return", "scatter_map", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter_kwargs": [[33, 44], ["tuple", "tuple", "scatter_gather.scatter", "scatter_gather.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.scatter_gather.scatter"], ["", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._sigmoid": [[13, 16], ["torch.clamp", "x.sigmoid_"], "function", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat": [[17, 26], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.data_parallel._DataParallel.gather"], ["self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "if", "self", ".", "count", ">", "0", ":", "\n", "          ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat": [[27, 32], ["_gather_feat.permute().contiguous", "_gather_feat.view", "utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat"], ["", "", "", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand": [[33, 42], ["torch.clip", "_gather_feat.permute().contiguous", "_gather_feat.view", "utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute", "_gather_feat.size"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._gather_feat"], ["y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n", "\n", "", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils.flip_tensor": [[43, 45], ["torch.flip"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.image.flip"], ["y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils.flip_lr": [[48, 55], ["[].copy", "torch.from_numpy().to", "tmp[].copy", "tmp[].copy", "torch.from_numpy", "x.detach().cpu().numpy", "[].copy.reshape", "x.detach().cpu", "x.detach"], "function", ["None"], []], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils.flip_lr_off": [[56, 66], ["[].copy", "tmp.reshape.reshape", "torch.from_numpy().to", "tmp[].copy", "tmp[].copy", "torch.from_numpy", "x.detach().cpu().numpy", "tmp.reshape.reshape", "x.detach().cpu", "x.detach"], "function", ["None"], ["\n", "\n", "# lists/pytorch to numpy", "\n", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.FocalLoss.__init__": [[116, 119], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_loss", "=", "_neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.FocalLoss.forward": [[120, 122], ["losses.FocalLoss.neg_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out", ",", "target", ")", ":", "\n", "    ", "return", "self", ".", "neg_loss", "(", "out", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegLoss.__init__": [[131, 133], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "RegLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegLoss.forward": [[134, 138], ["utils._tranpose_and_gather_feat", "losses._reg_loss"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._reg_loss"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "loss", "=", "_reg_loss", "(", "pred", ",", "target", ",", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegL1Loss.__init__": [[140, 142], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "RegL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegL1Loss.forward": [[143, 150], ["utils._tranpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.NormRegL1Loss.__init__": [[152, 154], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "NormRegL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.NormRegL1Loss.forward": [[155, 164], ["utils._tranpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "pred", "=", "pred", "/", "(", "target", "+", "1e-4", ")", "\n", "target", "=", "target", "*", "0", "+", "1", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegWeightedL1Loss.__init__": [[166, 168], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "RegWeightedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.RegWeightedL1Loss.forward": [[169, 176], ["utils._tranpose_and_gather_feat", "mask.float.float.float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.float.float.sum"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "# loss = F.l1_loss(pred * mask, target * mask, reduction='elementwise_mean')", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "size_average", "=", "False", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.L1Loss.__init__": [[178, 180], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "L1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.L1Loss.forward": [[181, 186], ["utils._tranpose_and_gather_feat", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "pred", ")", ".", "float", "(", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.BinRotLoss.__init__": [[188, 190], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BinRotLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.BinRotLoss.forward": [[191, 195], ["utils._tranpose_and_gather_feat", "losses.compute_rot_loss"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_rot_loss"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "rotbin", ",", "rotres", ")", ":", "\n", "    ", "pred", "=", "_tranpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "loss", "=", "compute_rot_loss", "(", "pred", ",", "rotbin", ",", "rotres", ",", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.TripletLoss.__init__": [[249, 254], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ",", "mutual_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "self", ".", "mutual", "=", "mutual_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.TripletLoss.forward": [[255, 282], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "losses.TripletLoss.ranking_loss", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: feature matrix with shape (batch_size, feat_dim)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# inputs = 1. * inputs / (torch.norm(inputs, 2, dim=-1, keepdim=True).expand_as(inputs) + 1e-12)", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "if", "self", ".", "mutual", ":", "\n", "            ", "return", "loss", ",", "dist", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._slow_neg_loss": [[17, 40], ["gt.eq", "gt.lt", "torch.pow", "torch.pow", "torch.pow", "gt.eq.float().sum", "pos_loss.sum.sum", "neg_loss.sum.sum", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "pos_pred.nelement", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "gt.eq.float"], "function", ["None"], ["def", "_slow_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "  ", "'''focal loss from CornerNet'''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", "[", "neg_inds", "]", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "pos_pred", "=", "pred", "[", "pos_inds", "]", "\n", "neg_pred", "=", "pred", "[", "neg_inds", "]", "\n", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pos_pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pos_pred", ",", "2", ")", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "neg_pred", ")", "*", "torch", ".", "pow", "(", "neg_pred", ",", "2", ")", "*", "neg_weights", "\n", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "if", "pos_pred", ".", "nelement", "(", ")", "==", "0", ":", "\n", "    ", "loss", "=", "loss", "-", "neg_loss", "\n", "", "else", ":", "\n", "    ", "loss", "=", "loss", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._neg_loss": [[42, 68], ["gt.eq().float", "gt.lt().float", "torch.pow", "torch.pow", "torch.pow", "gt.eq().float.float().sum", "pos_loss.sum.sum", "neg_loss.sum.sum", "gt.eq", "gt.lt", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "gt.eq().float.float", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "  ", "''' Modified focal loss. Exactly the same as CornerNet.\n      Runs faster and costs a little bit more memory\n    Arguments:\n      pred (batch x c x h x w)\n      gt_regr (batch x c x h x w)\n  '''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pred", ",", "2", ")", "*", "pos_inds", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "pred", ")", "*", "torch", ".", "pow", "(", "pred", ",", "2", ")", "*", "neg_weights", "*", "neg_inds", "\n", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "if", "num_pos", "==", "0", ":", "\n", "    ", "loss", "=", "loss", "-", "neg_loss", "\n", "", "else", ":", "\n", "    ", "loss", "=", "loss", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._not_faster_neg_loss": [[69, 85], ["gt.eq().float", "gt.lt().float", "gt.eq().float.float().sum", "torch.pow", "torch.pow", "torch.pow", "all_loss.sum.sum", "gt.eq", "gt.lt", "gt.eq().float.float", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_not_faster_neg_loss", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "trans_pred", "=", "pred", "*", "neg_inds", "+", "(", "1", "-", "pred", ")", "*", "pos_inds", "\n", "weight", "=", "neg_weights", "*", "neg_inds", "+", "pos_inds", "\n", "all_loss", "=", "torch", ".", "log", "(", "1", "-", "trans_pred", ")", "*", "torch", ".", "pow", "(", "trans_pred", ",", "2", ")", "*", "weight", "\n", "all_loss", "=", "all_loss", ".", "sum", "(", ")", "\n", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "all_loss", "/=", "num_pos", "\n", "", "loss", "-=", "all_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._slow_reg_loss": [[86, 96], ["mask.unsqueeze().expand_as.float().sum", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "torch.functional.smooth_l1_loss", "mask.unsqueeze().expand_as.float", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "_slow_reg_loss", "(", "regr", ",", "gt_regr", ",", "mask", ")", ":", "\n", "    ", "num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "gt_regr", ")", "\n", "\n", "regr", "=", "regr", "[", "mask", "]", "\n", "gt_regr", "=", "gt_regr", "[", "mask", "]", "\n", "\n", "regr_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "regr", ",", "gt_regr", ",", "size_average", "=", "False", ")", "\n", "regr_loss", "=", "regr_loss", "/", "(", "num", "+", "1e-4", ")", "\n", "return", "regr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses._reg_loss": [[97, 113], ["mask.unsqueeze().expand_as().float.float().sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.functional.smooth_l1_loss", "mask.unsqueeze().expand_as().float.float", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as", "mask.unsqueeze().expand_as().float.unsqueeze"], "function", ["None"], ["", "def", "_reg_loss", "(", "regr", ",", "gt_regr", ",", "mask", ")", ":", "\n", "  ", "''' L1 regression loss\n    Arguments:\n      regr (batch x max_objects x dim)\n      gt_regr (batch x max_objects x dim)\n      mask (batch x max_objects)\n  '''", "\n", "num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "gt_regr", ")", ".", "float", "(", ")", "\n", "\n", "regr", "=", "regr", "*", "mask", "\n", "gt_regr", "=", "gt_regr", "*", "mask", "\n", "\n", "regr_loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "regr", ",", "gt_regr", ",", "size_average", "=", "False", ")", "\n", "regr_loss", "=", "regr_loss", "/", "(", "num", "+", "1e-4", ")", "\n", "return", "regr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_res_loss": [[196, 198], ["torch.smooth_l1_loss"], "function", ["None"], ["", "", "def", "compute_res_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "smooth_l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_bin_loss": [[200, 204], ["mask.expand_as.expand_as", "torch.cross_entropy", "mask.expand_as.float"], "function", ["None"], ["", "def", "compute_bin_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "expand_as", "(", "output", ")", "\n", "output", "=", "output", "*", "mask", ".", "float", "(", ")", "\n", "return", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_rot_loss": [[205, 238], ["output.view.view", "target_bin.view.view", "target_res.view.view", "mask.view.view", "losses.compute_bin_loss", "losses.compute_bin_loss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "losses.compute_res_loss", "losses.compute_res_loss", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "losses.compute_res_loss", "losses.compute_res_loss", "target_bin[].nonzero", "idx1.long", "idx1.long", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "target_bin[].nonzero", "idx2.long", "idx2.long", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "target_bin[].nonzero", "target_bin[].nonzero"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_bin_loss", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_bin_loss", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_res_loss", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.losses.compute_res_loss"], ["", "def", "compute_rot_loss", "(", "output", ",", "target_bin", ",", "target_res", ",", "mask", ")", ":", "\n", "# output: (B, 128, 8) [bin1_cls[0], bin1_cls[1], bin1_sin, bin1_cos, ", "\n", "#                 bin2_cls[0], bin2_cls[1], bin2_sin, bin2_cos]", "\n", "# target_bin: (B, 128, 2) [bin1_cls, bin2_cls]", "\n", "# target_res: (B, 128, 2) [bin1_res, bin2_res]", "\n", "# mask: (B, 128, 1)", "\n", "# import pdb; pdb.set_trace()", "\n", "    ", "output", "=", "output", ".", "view", "(", "-", "1", ",", "8", ")", "\n", "target_bin", "=", "target_bin", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "target_res", "=", "target_res", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "loss_bin1", "=", "compute_bin_loss", "(", "output", "[", ":", ",", "0", ":", "2", "]", ",", "target_bin", "[", ":", ",", "0", "]", ",", "mask", ")", "\n", "loss_bin2", "=", "compute_bin_loss", "(", "output", "[", ":", ",", "4", ":", "6", "]", ",", "target_bin", "[", ":", ",", "1", "]", ",", "mask", ")", "\n", "loss_res", "=", "torch", ".", "zeros_like", "(", "loss_bin1", ")", "\n", "if", "target_bin", "[", ":", ",", "0", "]", ".", "nonzero", "(", ")", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "idx1", "=", "target_bin", "[", ":", ",", "0", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "valid_output1", "=", "torch", ".", "index_select", "(", "output", ",", "0", ",", "idx1", ".", "long", "(", ")", ")", "\n", "valid_target_res1", "=", "torch", ".", "index_select", "(", "target_res", ",", "0", ",", "idx1", ".", "long", "(", ")", ")", "\n", "loss_sin1", "=", "compute_res_loss", "(", "\n", "valid_output1", "[", ":", ",", "2", "]", ",", "torch", ".", "sin", "(", "valid_target_res1", "[", ":", ",", "0", "]", ")", ")", "\n", "loss_cos1", "=", "compute_res_loss", "(", "\n", "valid_output1", "[", ":", ",", "3", "]", ",", "torch", ".", "cos", "(", "valid_target_res1", "[", ":", ",", "0", "]", ")", ")", "\n", "loss_res", "+=", "loss_sin1", "+", "loss_cos1", "\n", "", "if", "target_bin", "[", ":", ",", "1", "]", ".", "nonzero", "(", ")", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "idx2", "=", "target_bin", "[", ":", ",", "1", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "valid_output2", "=", "torch", ".", "index_select", "(", "output", ",", "0", ",", "idx2", ".", "long", "(", ")", ")", "\n", "valid_target_res2", "=", "torch", ".", "index_select", "(", "target_res", ",", "0", ",", "idx2", ".", "long", "(", ")", ")", "\n", "loss_sin2", "=", "compute_res_loss", "(", "\n", "valid_output2", "[", ":", ",", "6", "]", ",", "torch", ".", "sin", "(", "valid_target_res2", "[", ":", ",", "1", "]", ")", ")", "\n", "loss_cos2", "=", "compute_res_loss", "(", "\n", "valid_output2", "[", ":", ",", "7", "]", ",", "torch", ".", "cos", "(", "valid_target_res2", "[", ":", ",", "1", "]", ")", ")", "\n", "loss_res", "+=", "loss_sin2", "+", "loss_cos2", "\n", "", "return", "loss_bin1", "+", "loss_bin2", "+", "loss_res", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.BasicBlock.__init__": [[29, 41], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.BasicBlock.forward": [[42, 57], ["dlav0.BasicBlock.conv1", "dlav0.BasicBlock.bn1", "dlav0.BasicBlock.relu", "dlav0.BasicBlock.conv2", "dlav0.BasicBlock.bn2", "dlav0.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Bottleneck.__init__": [[62, 78], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "expansion", "=", "Bottleneck", ".", "expansion", "\n", "bottle_planes", "=", "planes", "//", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Bottleneck.forward": [[79, 98], ["dlav0.Bottleneck.conv1", "dlav0.Bottleneck.bn1", "dlav0.Bottleneck.relu", "dlav0.Bottleneck.conv2", "dlav0.Bottleneck.bn2", "dlav0.Bottleneck.relu", "dlav0.Bottleneck.conv3", "dlav0.Bottleneck.bn3", "dlav0.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.BottleneckX.__init__": [[104, 122], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cardinality", "=", "BottleneckX", ".", "cardinality", "\n", "# dim = int(math.floor(planes * (BottleneckV5.expansion / 64.0)))", "\n", "# bottle_planes = dim * cardinality", "\n", "bottle_planes", "=", "planes", "*", "cardinality", "//", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "bottle_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.BottleneckX.forward": [[123, 142], ["dlav0.BottleneckX.conv1", "dlav0.BottleneckX.bn1", "dlav0.BottleneckX.relu", "dlav0.BottleneckX.conv2", "dlav0.BottleneckX.bn2", "dlav0.BottleneckX.relu", "dlav0.BottleneckX.conv3", "dlav0.BottleneckX.bn3", "dlav0.BottleneckX.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Root.__init__": [[145, 153], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "residual", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Root.forward": [[154, 163], ["dlav0.Root.conv", "dlav0.Root.bn", "dlav0.Root.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "children", "=", "x", "\n", "x", "=", "self", ".", "conv", "(", "torch", ".", "cat", "(", "x", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "x", "+=", "children", "[", "0", "]", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Tree.__init__": [[166, 203], ["torch.nn.Module.__init__", "block", "block", "dlav0.Tree", "dlav0.Tree", "dlav0.Root", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "block", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "\n", "level_root", "=", "False", ",", "root_dim", "=", "0", ",", "root_kernel_size", "=", "1", ",", "\n", "dilation", "=", "1", ",", "root_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "root_dim", "==", "0", ":", "\n", "            ", "root_dim", "=", "2", "*", "out_channels", "\n", "", "if", "level_root", ":", "\n", "            ", "root_dim", "+=", "in_channels", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "tree1", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "tree2", "=", "block", "(", "out_channels", ",", "out_channels", ",", "1", ",", "\n", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree1", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "in_channels", ",", "out_channels", ",", "\n", "stride", ",", "root_dim", "=", "0", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "self", ".", "tree2", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "out_channels", ",", "out_channels", ",", "\n", "root_dim", "=", "root_dim", "+", "out_channels", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "root_dim", ",", "out_channels", ",", "root_kernel_size", ",", "\n", "root_residual", ")", "\n", "", "self", ".", "level_root", "=", "level_root", "\n", "self", ".", "root_dim", "=", "root_dim", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "project", "=", "None", "\n", "self", ".", "levels", "=", "levels", "\n", "if", "stride", ">", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Tree.forward": [[205, 219], ["dlav0.Tree.tree1", "dlav0.Tree.downsample", "dlav0.Tree.project", "children.append", "dlav0.Tree.tree2", "dlav0.Tree.root", "children.append", "dlav0.Tree.tree2"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.project"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ",", "children", "=", "None", ")", ":", "\n", "        ", "children", "=", "[", "]", "if", "children", "is", "None", "else", "children", "\n", "bottom", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "else", "x", "\n", "residual", "=", "self", ".", "project", "(", "bottom", ")", "if", "self", ".", "project", "else", "bottom", "\n", "if", "self", ".", "level_root", ":", "\n", "            ", "children", ".", "append", "(", "bottom", ")", "\n", "", "x1", "=", "self", ".", "tree1", "(", "x", ",", "residual", ")", "\n", "if", "self", ".", "levels", "==", "1", ":", "\n", "            ", "x2", "=", "self", ".", "tree2", "(", "x1", ")", "\n", "x", "=", "self", ".", "root", "(", "x2", ",", "x1", ",", "*", "children", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "append", "(", "x1", ")", "\n", "x", "=", "self", ".", "tree2", "(", "x1", ",", "children", "=", "children", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLA.__init__": [[222, 259], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "dlav0.DLA._make_conv_level", "dlav0.DLA._make_conv_level", "dlav0.Tree", "dlav0.Tree", "dlav0.Tree", "dlav0.Tree", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "dlav0.DLA.modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_conv_level", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_conv_level"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "channels", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "BasicBlock", ",", "residual_root", "=", "False", ",", "return_levels", "=", "False", ",", "\n", "pool_size", "=", "7", ",", "linear_root", "=", "False", ")", ":", "\n", "        ", "super", "(", "DLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "return_levels", "=", "return_levels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "base_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "level0", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "levels", "[", "0", "]", ")", "\n", "self", ".", "level1", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "levels", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "level2", "=", "Tree", "(", "levels", "[", "2", "]", ",", "block", ",", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "2", ",", "\n", "level_root", "=", "False", ",", "\n", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level3", "=", "Tree", "(", "levels", "[", "3", "]", ",", "block", ",", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level4", "=", "Tree", "(", "levels", "[", "4", "]", ",", "block", ",", "channels", "[", "3", "]", ",", "channels", "[", "4", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level5", "=", "Tree", "(", "levels", "[", "5", "]", ",", "block", ",", "channels", "[", "4", "]", ",", "channels", "[", "5", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "pool_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLA._make_level": [[260, 276], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_level", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLA._make_conv_level": [[277, 288], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "modules.extend", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "_make_conv_level", "(", "self", ",", "inplanes", ",", "planes", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "inplanes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLA.forward": [[289, 303], ["dlav0.DLA.base_layer", "range", "y.append", "dlav0.DLA.avgpool", "dlav0.DLA.fc", "x.view.view.view", "getattr", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "x", "=", "self", ".", "base_layer", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "'level{}'", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "if", "self", ".", "return_levels", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLA.load_pretrained_model": [[304, 317], ["name.endswith", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "dlav0.DLA.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "dlav0.get_model_url", "torch.load_url", "torch.load_url", "list", "torch.load_url.keys"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.get_model_url"], ["", "", "def", "load_pretrained_model", "(", "self", ",", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "        ", "fc", "=", "self", ".", "fc", "\n", "if", "name", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "            ", "model_weights", "=", "torch", ".", "load", "(", "data", "+", "name", ")", "\n", "", "else", ":", "\n", "            ", "model_url", "=", "get_model_url", "(", "data", ",", "name", ",", "hash", ")", "\n", "model_weights", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "", "num_classes", "=", "len", "(", "model_weights", "[", "list", "(", "model_weights", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "]", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "self", ".", "fc", "=", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Identity.__init__": [[415, 417], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.Identity.forward": [[418, 420], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.IDAUp.__init__": [[435, 475], ["torch.nn.Module.__init__", "enumerate", "range", "dlav0.IDAUp.modules", "int", "setattr", "setattr", "len", "torch.nn.Sequential", "torch.nn.Sequential", "setattr", "isinstance", "dlav0.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "dlav0.Identity", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "dlav0.fill_up_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "m.weight.data.normal_", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "str", "str", "str", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_up_weights"], ["    ", "def", "__init__", "(", "self", ",", "node_kernel", ",", "out_dim", ",", "channels", ",", "up_factors", ")", ":", "\n", "        ", "super", "(", "IDAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "channels", ")", ":", "\n", "            ", "if", "c", "==", "out_dim", ":", "\n", "                ", "proj", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "c", ",", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "f", "=", "int", "(", "up_factors", "[", "i", "]", ")", "\n", "if", "f", "==", "1", ":", "\n", "                ", "up", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                ", "up", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "out_dim", ",", "out_dim", ",", "f", "*", "2", ",", "stride", "=", "f", ",", "padding", "=", "f", "//", "2", ",", "\n", "output_padding", "=", "0", ",", "groups", "=", "out_dim", ",", "bias", "=", "False", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "", "setattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ",", "proj", ")", "\n", "setattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ",", "up", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "node", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", "*", "2", ",", "out_dim", ",", "\n", "kernel_size", "=", "node_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "node_kernel", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "setattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ",", "node", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.IDAUp.forward": [[476, 491], ["list", "enumerate", "range", "len", "len", "len", "len", "getattr", "getattr", "getattr.", "len", "getattr", "getattr.", "y.append", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "channels", ")", "==", "len", "(", "layers", ")", ",", "'{} vs {} layers'", ".", "format", "(", "len", "(", "self", ".", "channels", ")", ",", "len", "(", "layers", ")", ")", "\n", "layers", "=", "list", "(", "layers", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "upsample", "=", "getattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ")", "\n", "project", "=", "getattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ")", "\n", "layers", "[", "i", "]", "=", "upsample", "(", "project", "(", "l", ")", ")", "\n", "", "x", "=", "layers", "[", "0", "]", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers", ")", ")", ":", "\n", "            ", "node", "=", "getattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ")", "\n", "x", "=", "node", "(", "torch", ".", "cat", "(", "[", "x", ",", "layers", "[", "i", "]", "]", ",", "1", ")", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLAUp.__init__": [[494, 508], ["torch.nn.Module.__init__", "list", "numpy.array", "range", "setattr", "len", "dlav0.IDAUp"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "scales", "=", "(", "1", ",", "2", ",", "4", ",", "8", ",", "16", ")", ",", "in_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "DLAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "is", "None", ":", "\n", "            ", "in_channels", "=", "channels", "\n", "", "self", ".", "channels", "=", "channels", "\n", "channels", "=", "list", "(", "channels", ")", "\n", "scales", "=", "np", ".", "array", "(", "scales", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "j", "=", "-", "i", "-", "2", "\n", "setattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ",", "\n", "IDAUp", "(", "3", ",", "channels", "[", "j", "]", ",", "in_channels", "[", "j", ":", "]", ",", "\n", "scales", "[", "j", ":", "]", "//", "scales", "[", "j", "]", ")", ")", "\n", "scales", "[", "j", "+", "1", ":", "]", "=", "scales", "[", "j", "]", "\n", "in_channels", "[", "j", "+", "1", ":", "]", "=", "[", "channels", "[", "j", "]", "for", "_", "in", "channels", "[", "j", "+", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLAUp.forward": [[509, 517], ["list", "range", "len", "getattr", "getattr.", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "layers", "=", "list", "(", "layers", ")", "\n", "assert", "len", "(", "layers", ")", ">", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", "-", "1", ")", ":", "\n", "            ", "ida", "=", "getattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ")", "\n", "x", ",", "y", "=", "ida", "(", "layers", "[", "-", "i", "-", "2", ":", "]", ")", "\n", "layers", "[", "-", "i", "-", "1", ":", "]", "=", "y", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLASeg.__init__": [[528, 593], ["torch.nn.Module.__init__", "int", "dlav0.DLAUp", "numpy.log2", "dlav0.DLASeg.__setattr__", "globals", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "fc[].bias.data.fill_", "dlav0.fill_fc_weights", "torch.nn.Conv2d.bias.data.fill_", "dlav0.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "base_name", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "down_ratio", "=", "4", ",", "head_conv", "=", "256", ")", ":", "\n", "        ", "super", "(", "DLASeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "down_ratio", "in", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "first_level", "=", "int", "(", "np", ".", "log2", "(", "down_ratio", ")", ")", "\n", "self", ".", "base", "=", "globals", "(", ")", "[", "base_name", "]", "(", "\n", "pretrained", "=", "pretrained", ",", "return_levels", "=", "True", ")", "\n", "channels", "=", "self", ".", "base", ".", "channels", "\n", "scales", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "len", "(", "channels", "[", "self", ".", "first_level", ":", "]", ")", ")", "]", "\n", "self", ".", "dla_up", "=", "DLAUp", "(", "channels", "[", "self", ".", "first_level", ":", "]", ",", "scales", "=", "scales", ")", "\n", "'''\n        self.fc = nn.Sequential(\n            nn.Conv2d(channels[self.first_level], classes, kernel_size=1,\n                      stride=1, padding=0, bias=True)\n        )\n        '''", "\n", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n", "", "'''\n        up_factor = 2 ** self.first_level\n        if up_factor > 1:\n            up = nn.ConvTranspose2d(classes, classes, up_factor * 2,\n                                    stride=up_factor, padding=up_factor // 2,\n                                    output_padding=0, groups=classes,\n                                    bias=False)\n            fill_up_weights(up)\n            up.weight.requires_grad = False\n        else:\n            up = Identity()\n        self.up = up\n        self.softmax = nn.LogSoftmax(dim=1)\n        \n\n        for m in self.fc.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n            elif isinstance(m, BatchNorm):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.DLASeg.forward": [[594, 603], ["dlav0.DLASeg.base", "dlav0.DLASeg.dla_up", "dlav0.DLASeg.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "dla_up", "(", "x", "[", "self", ".", "first_level", ":", "]", ")", "\n", "# x = self.fc(x)", "\n", "# y = self.softmax(self.up(x))", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.get_model_url": [[18, 20], ["os.path.join"], "function", ["None"], ["def", "get_model_url", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "    ", "return", "join", "(", "'http://dl.yf.io/dla/models'", ",", "data", ",", "'{}-{}.pth'", ".", "format", "(", "name", ",", "hash", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.conv3x3": [[22, 26], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla34": [[319, 326], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "", "def", "dla34", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-34", "\n", "    ", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "block", "=", "BasicBlock", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla46_c": [[328, 336], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla46_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-46-C", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla46x_c": [[338, 346], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla46x_c", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-46-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla46x_c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla60x_c": [[348, 356], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla60x_c", "(", "pretrained", ",", "**", "kwargs", ")", ":", "# DLA-X-60-C", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", ",", "256", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla60x_c'", ",", "hash", "=", "'b870c45c'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla60": [[358, 366], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla60", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-60", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla60x": [[368, 376], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla60x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-60", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla60x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla102": [[378, 385], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla102", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-102", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla102x": [[387, 394], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla102x", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102", "\n", "    ", "BottleneckX", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla102x2": [[396, 403], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla102x2", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-X-102 64", "\n", "    ", "BottleneckX", ".", "cardinality", "=", "64", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "3", ",", "4", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "BottleneckX", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla102x2'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.dla169": [[405, 412], ["dlav0.DLA", "dlav0.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "def", "dla169", "(", "pretrained", "=", "None", ",", "**", "kwargs", ")", ":", "# DLA-169", "\n", "    ", "Bottleneck", ".", "expansion", "=", "2", "\n", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "1", "]", ",", "[", "16", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "\n", "block", "=", "Bottleneck", ",", "residual_root", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "pretrained", ",", "'dla169'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.fill_up_weights": [[422, 432], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.fill_fc_weights": [[518, 526], ["layers.modules", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# torch.nn.init.kaiming_normal_(m.weight.data, nonlinearity='relu')", "\n", "# torch.nn.init.xavier_normal_(m.weight.data)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.dlav0.get_pose_net": [[636, 642], ["dlav0.DLASeg"], "function", ["None"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ",", "down_ratio", "=", "4", ")", ":", "\n", "  ", "model", "=", "DLASeg", "(", "'dla{}'", ".", "format", "(", "num_layers", ")", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "\n", "down_ratio", "=", "down_ratio", ",", "\n", "head_conv", "=", "head_conv", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.BasicBlock.__init__": [[40, 49], ["torch.Module.__init__", "resnet_dcn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_dcn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.BasicBlock.forward": [[50, 67], ["resnet_dcn.BasicBlock.conv1", "resnet_dcn.BasicBlock.bn1", "resnet_dcn.BasicBlock.relu", "resnet_dcn.BasicBlock.conv2", "resnet_dcn.BasicBlock.bn2", "resnet_dcn.BasicBlock.relu", "resnet_dcn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.Bottleneck.__init__": [[72, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.Bottleneck.forward": [[87, 108], ["resnet_dcn.Bottleneck.conv1", "resnet_dcn.Bottleneck.bn1", "resnet_dcn.Bottleneck.relu", "resnet_dcn.Bottleneck.conv2", "resnet_dcn.Bottleneck.bn2", "resnet_dcn.Bottleneck.relu", "resnet_dcn.Bottleneck.conv3", "resnet_dcn.Bottleneck.bn3", "resnet_dcn.Bottleneck.relu", "resnet_dcn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet.__init__": [[131, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_dcn.PoseResNet._make_layer", "resnet_dcn.PoseResNet._make_layer", "resnet_dcn.PoseResNet._make_layer", "resnet_dcn.PoseResNet._make_layer", "resnet_dcn.PoseResNet._make_deconv_layer", "resnet_dcn.PoseResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "fc[].bias.data.fill_", "resnet_dcn.fill_fc_weights", "torch.Conv2d.bias.data.fill_", "resnet_dcn.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_deconv_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "deconv_with_bias", "=", "False", "\n", "\n", "super", "(", "PoseResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "\n", "3", ",", "\n", "[", "256", ",", "128", ",", "64", "]", ",", "\n", "[", "4", ",", "4", ",", "4", "]", ",", "\n", ")", "\n", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "64", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet._make_layer": [[178, 194], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet._get_deconv_cfg": [[195, 207], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet._make_deconv_layer": [[208, 246], ["range", "torch.Sequential", "torch.Sequential", "len", "len", "resnet_dcn.PoseResNet._get_deconv_cfg", "DCNv2.dcn_v2.DCN", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "resnet_dcn.fill_up_weights", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._get_deconv_cfg", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_up_weights"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "fc", "=", "DCN", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", "\n", "# fc = nn.Conv2d(self.inplanes, planes,", "\n", "#         kernel_size=3, stride=1, ", "\n", "#         padding=1, dilation=1, bias=False)", "\n", "# fill_fc_weights(fc)", "\n", "up", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "planes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "\n", "layers", ".", "append", "(", "fc", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "up", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet.forward": [[247, 263], ["resnet_dcn.PoseResNet.conv1", "resnet_dcn.PoseResNet.bn1", "resnet_dcn.PoseResNet.relu", "resnet_dcn.PoseResNet.maxpool", "resnet_dcn.PoseResNet.layer1", "resnet_dcn.PoseResNet.layer2", "resnet_dcn.PoseResNet.layer3", "resnet_dcn.PoseResNet.layer4", "resnet_dcn.PoseResNet.deconv_layers", "resnet_dcn.PoseResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "deconv_layers", "(", "x", ")", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.PoseResNet.init_weights": [[264, 275], ["torch.load_url", "torch.load_url", "print", "resnet_dcn.PoseResNet.load_state_dict", "print", "resnet_dcn.PoseResNet.deconv_layers.named_modules", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ")", ":", "\n", "        ", "if", "1", ":", "\n", "            ", "url", "=", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", "\n", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "url", ")", ")", "\n", "self", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'=> init deconv weights from normal distribution'", ")", "\n", "for", "name", ",", "m", "in", "self", ".", "deconv_layers", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.fill_up_weights": [[109, 119], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.fill_fc_weights": [[120, 128], ["layers.modules", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# torch.nn.init.kaiming_normal_(m.weight.data, nonlinearity='relu')", "\n", "# torch.nn.init.xavier_normal_(m.weight.data)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_dcn.get_pose_net": [[284, 290], ["resnet_dcn.PoseResNet", "resnet_dcn.PoseResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ")", ":", "\n", "  ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "PoseResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "pose_hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pose_hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.BasicBlock.forward": [[39, 56], ["pose_hrnet.BasicBlock.conv1", "pose_hrnet.BasicBlock.bn1", "pose_hrnet.BasicBlock.relu", "pose_hrnet.BasicBlock.conv2", "pose_hrnet.BasicBlock.bn2", "pose_hrnet.BasicBlock.relu", "pose_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.Bottleneck.__init__": [[61, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.Bottleneck.forward": [[76, 97], ["pose_hrnet.Bottleneck.conv1", "pose_hrnet.Bottleneck.bn1", "pose_hrnet.Bottleneck.relu", "pose_hrnet.Bottleneck.conv2", "pose_hrnet.Bottleneck.bn2", "pose_hrnet.Bottleneck.relu", "pose_hrnet.Bottleneck.conv3", "pose_hrnet.Bottleneck.bn3", "pose_hrnet.Bottleneck.relu", "pose_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule.__init__": [[100, 116], ["torch.Module.__init__", "pose_hrnet.HighResolutionModule._check_branches", "pose_hrnet.HighResolutionModule._make_branches", "pose_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._check_branches": [[117, 136], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_one_branch": [[137, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", "\n", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", "\n", ")", "\n", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_branches": [[175, 184], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "pose_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule._make_fuse_layers": [[185, 241], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "1", ",", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule.get_num_inchannels": [[242, 244], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule.forward": [[245, 264], ["range", "range", "len", "range", "x_fuse.append", "pose_hrnet.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet.__init__": [[274, 369], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pose_hrnet.PoseHighResolutionNet._make_layer", "pose_hrnet.PoseHighResolutionNet._make_transition_layer", "pose_hrnet.PoseHighResolutionNet._make_stage", "pose_hrnet.PoseHighResolutionNet._make_transition_layer", "pose_hrnet.PoseHighResolutionNet._make_stage", "pose_hrnet.PoseHighResolutionNet._make_transition_layer", "pose_hrnet.PoseHighResolutionNet._make_stage", "logger.info", "pose_hrnet.PoseHighResolutionNet.modules", "numpy.int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "numpy.sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pose_hrnet.PoseHighResolutionNet.__setattr__", "range", "range", "range", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "fc[].bias.data.fill_", "pose_hrnet.fill_fc_weights", "len", "len", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_stage", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_stage", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_stage", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "heads", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "extra", "=", "cfg", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "PoseHighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "4", ")", "\n", "\n", "self", ".", "stage2_cfg", "=", "cfg", "[", "'MODEL'", "]", "[", "'EXTRA'", "]", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", "[", "'MODEL'", "]", "[", "'EXTRA'", "]", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'MODEL'", "]", "[", "'EXTRA'", "]", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "self", ".", "heads", "=", "heads", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "64", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "head_conv", "=", "256", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "extra", ".", "FINAL_CONV_KERNEL", ",", "stride", "=", "1", ",", "\n", "padding", "=", "extra", ".", "FINAL_CONV_KERNEL", "//", "2", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                ", "fill_fc_weights", "(", "fc", ")", "\n", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n", "", "self", ".", "pretrained_layers", "=", "cfg", "[", "'MODEL'", "]", "[", "'EXTRA'", "]", "[", "'PRETRAINED_LAYERS'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_transition_layer": [[370, 410], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "1", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_layer": [[411, 429], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet._make_stage": [[430, 461], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pose_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", "\n", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet.forward": [[462, 515], ["pose_hrnet.PoseHighResolutionNet.conv1", "pose_hrnet.PoseHighResolutionNet.bn1", "pose_hrnet.PoseHighResolutionNet.relu", "pose_hrnet.PoseHighResolutionNet.conv2", "pose_hrnet.PoseHighResolutionNet.bn2", "pose_hrnet.PoseHighResolutionNet.relu", "pose_hrnet.PoseHighResolutionNet.layer1", "range", "pose_hrnet.PoseHighResolutionNet.stage2", "range", "pose_hrnet.PoseHighResolutionNet.stage3", "range", "pose_hrnet.PoseHighResolutionNet.stage4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pose_hrnet.PoseHighResolutionNet.last_layer", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "pose_hrnet.PoseHighResolutionNet.__getattr__", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "i", "<", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "i", "<", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "upsample", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "upsample", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "\n", "z", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "z", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "", "return", "[", "z", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.PoseHighResolutionNet.init_weights": [[516, 530], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "torch.load.items", "torch.load.items", "torch.load.items", "pose_hrnet.PoseHighResolutionNet.load_state_dict", "logger.error", "ValueError", "name.split", "config.cfg.MODEL.PRETRAINED"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_state_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "\n", "need_init_state_dict", "=", "{", "}", "\n", "for", "name", ",", "m", "in", "pretrained_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "in", "self", ".", "pretrained_layers", "or", "self", ".", "pretrained_layers", "[", "0", "]", "==", "'*'", ":", "\n", "                    ", "need_init_state_dict", "[", "name", "]", "=", "m", "\n", "", "", "self", ".", "load_state_dict", "(", "need_init_state_dict", ",", "strict", "=", "False", ")", "\n", "", "elif", "pretrained", ":", "\n", "            ", "logger", ".", "error", "(", "'=> please download pre-trained models first!'", ")", "\n", "raise", "ValueError", "(", "'{} is not exist!'", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.fill_fc_weights": [[532, 537], ["layers.modules", "isinstance", "torch.init.constant_"], "function", ["None"], ["", "", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_hrnet.get_pose_net": [[539, 551], ["config.update_config", "pose_hrnet.PoseHighResolutionNet", "pose_hrnet.PoseHighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.config.default.update_config", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.init_weights"], ["", "", "", "", "def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "    ", "if", "num_layers", "==", "32", ":", "\n", "        ", "cfg_dir", "=", "'../src/lib/models/networks/config/hrnet_w32.yaml'", "\n", "", "elif", "num_layers", "==", "18", ":", "\n", "        ", "cfg_dir", "=", "'../src/lib/models/networks/config/hrnet_w18.yaml'", "\n", "", "else", ":", "\n", "        ", "cfg_dir", "=", "'../src/lib/models/networks/config/hrnet_w18.yaml'", "\n", "", "update_config", "(", "cfg", ",", "cfg_dir", ")", "\n", "model", "=", "PoseHighResolutionNet", "(", "cfg", ",", "heads", ")", "\n", "model", ".", "init_weights", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.BasicBlock.__init__": [[31, 43], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.BasicBlock.forward": [[44, 59], ["pose_dla_dcn.BasicBlock.conv1", "pose_dla_dcn.BasicBlock.bn1", "pose_dla_dcn.BasicBlock.relu", "pose_dla_dcn.BasicBlock.conv2", "pose_dla_dcn.BasicBlock.bn2", "pose_dla_dcn.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Bottleneck.__init__": [[64, 80], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "expansion", "=", "Bottleneck", ".", "expansion", "\n", "bottle_planes", "=", "planes", "//", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "bottle_planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "bottle_planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Bottleneck.forward": [[81, 100], ["pose_dla_dcn.Bottleneck.conv1", "pose_dla_dcn.Bottleneck.bn1", "pose_dla_dcn.Bottleneck.relu", "pose_dla_dcn.Bottleneck.conv2", "pose_dla_dcn.Bottleneck.bn2", "pose_dla_dcn.Bottleneck.relu", "pose_dla_dcn.Bottleneck.conv3", "pose_dla_dcn.Bottleneck.bn3", "pose_dla_dcn.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.BottleneckX.__init__": [[106, 124], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cardinality", "=", "BottleneckX", ".", "cardinality", "\n", "# dim = int(math.floor(planes * (BottleneckV5.expansion / 64.0)))", "\n", "# bottle_planes = dim * cardinality", "\n", "bottle_planes", "=", "planes", "*", "cardinality", "//", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "bottle_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "bottle_planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "bottle_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "bottle_planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "bottle_planes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.BottleneckX.forward": [[125, 144], ["pose_dla_dcn.BottleneckX.conv1", "pose_dla_dcn.BottleneckX.bn1", "pose_dla_dcn.BottleneckX.relu", "pose_dla_dcn.BottleneckX.conv2", "pose_dla_dcn.BottleneckX.bn2", "pose_dla_dcn.BottleneckX.relu", "pose_dla_dcn.BottleneckX.conv3", "pose_dla_dcn.BottleneckX.bn3", "pose_dla_dcn.BottleneckX.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "        ", "if", "residual", "is", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Root.__init__": [[147, 155], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "residual", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Root.forward": [[156, 165], ["pose_dla_dcn.Root.conv", "pose_dla_dcn.Root.bn", "pose_dla_dcn.Root.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "children", "=", "x", "\n", "x", "=", "self", ".", "conv", "(", "torch", ".", "cat", "(", "x", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "x", "+=", "children", "[", "0", "]", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Tree.__init__": [[168, 205], ["torch.nn.Module.__init__", "block", "block", "pose_dla_dcn.Tree", "pose_dla_dcn.Tree", "pose_dla_dcn.Root", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "block", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "\n", "level_root", "=", "False", ",", "root_dim", "=", "0", ",", "root_kernel_size", "=", "1", ",", "\n", "dilation", "=", "1", ",", "root_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "root_dim", "==", "0", ":", "\n", "            ", "root_dim", "=", "2", "*", "out_channels", "\n", "", "if", "level_root", ":", "\n", "            ", "root_dim", "+=", "in_channels", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "tree1", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "\n", "dilation", "=", "dilation", ")", "\n", "self", ".", "tree2", "=", "block", "(", "out_channels", ",", "out_channels", ",", "1", ",", "\n", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree1", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "in_channels", ",", "out_channels", ",", "\n", "stride", ",", "root_dim", "=", "0", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "self", ".", "tree2", "=", "Tree", "(", "levels", "-", "1", ",", "block", ",", "out_channels", ",", "out_channels", ",", "\n", "root_dim", "=", "root_dim", "+", "out_channels", ",", "\n", "root_kernel_size", "=", "root_kernel_size", ",", "\n", "dilation", "=", "dilation", ",", "root_residual", "=", "root_residual", ")", "\n", "", "if", "levels", "==", "1", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "root_dim", ",", "out_channels", ",", "root_kernel_size", ",", "\n", "root_residual", ")", "\n", "", "self", ".", "level_root", "=", "level_root", "\n", "self", ".", "root_dim", "=", "root_dim", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "project", "=", "None", "\n", "self", ".", "levels", "=", "levels", "\n", "if", "stride", ">", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Tree.forward": [[207, 221], ["pose_dla_dcn.Tree.tree1", "pose_dla_dcn.Tree.downsample", "pose_dla_dcn.Tree.project", "children.append", "pose_dla_dcn.Tree.tree2", "pose_dla_dcn.Tree.root", "children.append", "pose_dla_dcn.Tree.tree2"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.project"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "residual", "=", "None", ",", "children", "=", "None", ")", ":", "\n", "        ", "children", "=", "[", "]", "if", "children", "is", "None", "else", "children", "\n", "bottom", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "else", "x", "\n", "residual", "=", "self", ".", "project", "(", "bottom", ")", "if", "self", ".", "project", "else", "bottom", "\n", "if", "self", ".", "level_root", ":", "\n", "            ", "children", ".", "append", "(", "bottom", ")", "\n", "", "x1", "=", "self", ".", "tree1", "(", "x", ",", "residual", ")", "\n", "if", "self", ".", "levels", "==", "1", ":", "\n", "            ", "x2", "=", "self", ".", "tree2", "(", "x1", ")", "\n", "x", "=", "self", ".", "root", "(", "x2", ",", "x1", ",", "*", "children", ")", "\n", "", "else", ":", "\n", "            ", "children", ".", "append", "(", "x1", ")", "\n", "x", "=", "self", ".", "tree2", "(", "x1", ",", "children", "=", "children", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.__init__": [[224, 247], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "pose_dla_dcn.DLA._make_conv_level", "pose_dla_dcn.DLA._make_conv_level", "pose_dla_dcn.Tree", "pose_dla_dcn.Tree", "pose_dla_dcn.Tree", "pose_dla_dcn.Tree", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_conv_level", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_conv_level"], ["    ", "def", "__init__", "(", "self", ",", "levels", ",", "channels", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "BasicBlock", ",", "residual_root", "=", "False", ",", "linear_root", "=", "False", ")", ":", "\n", "        ", "super", "(", "DLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "base_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "level0", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "levels", "[", "0", "]", ")", "\n", "self", ".", "level1", "=", "self", ".", "_make_conv_level", "(", "\n", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "levels", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "level2", "=", "Tree", "(", "levels", "[", "2", "]", ",", "block", ",", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "2", ",", "\n", "level_root", "=", "False", ",", "\n", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level3", "=", "Tree", "(", "levels", "[", "3", "]", ",", "block", ",", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level4", "=", "Tree", "(", "levels", "[", "4", "]", ",", "block", ",", "channels", "[", "3", "]", ",", "channels", "[", "4", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "self", ".", "level5", "=", "Tree", "(", "levels", "[", "5", "]", ",", "block", ",", "channels", "[", "4", "]", ",", "channels", "[", "5", "]", ",", "2", ",", "\n", "level_root", "=", "True", ",", "root_residual", "=", "residual_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_level": [[256, 272], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_level", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA._make_conv_level": [[273, 284], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "modules.extend", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "_make_conv_level", "(", "self", ",", "inplanes", ",", "planes", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "inplanes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.forward": [[285, 292], ["pose_dla_dcn.DLA.base_layer", "range", "y.append", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "x", "=", "self", ".", "base_layer", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "'level{}'", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model": [[293, 305], ["name.endswith", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "pose_dla_dcn.DLA.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "pose_dla_dcn.get_model_url", "torch.load_url", "torch.load_url", "torch.load_url", "list", "torch.load_url.keys"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.get_model_url"], ["", "def", "load_pretrained_model", "(", "self", ",", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "# fc = self.fc", "\n", "        ", "if", "name", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "            ", "model_weights", "=", "torch", ".", "load", "(", "data", "+", "name", ")", "\n", "", "else", ":", "\n", "            ", "model_url", "=", "get_model_url", "(", "data", ",", "name", ",", "hash", ")", "\n", "model_weights", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "", "num_classes", "=", "len", "(", "model_weights", "[", "list", "(", "model_weights", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "]", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "# self.fc = fc", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Identity.__init__": [[318, 320], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Identity.forward": [[321, 323], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DeformConv.__init__": [[345, 352], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "DCNv2.dcn_v2.DCN", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chi", ",", "cho", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actf", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "cho", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv", "=", "DCN", "(", "chi", ",", "cho", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DeformConv.forward": [[353, 357], ["pose_dla_dcn.DeformConv.conv", "pose_dla_dcn.DeformConv.actf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "actf", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.IDAUp.__init__": [[361, 377], ["torch.nn.Module.__init__", "range", "len", "int", "pose_dla_dcn.DeformConv", "pose_dla_dcn.DeformConv", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "pose_dla_dcn.fill_up_weights", "setattr", "setattr", "setattr", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_up_weights"], ["    ", "def", "__init__", "(", "self", ",", "o", ",", "channels", ",", "up_f", ")", ":", "\n", "        ", "super", "(", "IDAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "c", "=", "channels", "[", "i", "]", "\n", "f", "=", "int", "(", "up_f", "[", "i", "]", ")", "\n", "proj", "=", "DeformConv", "(", "c", ",", "o", ")", "\n", "node", "=", "DeformConv", "(", "o", ",", "o", ")", "\n", "\n", "up", "=", "nn", ".", "ConvTranspose2d", "(", "o", ",", "o", ",", "f", "*", "2", ",", "stride", "=", "f", ",", "\n", "padding", "=", "f", "//", "2", ",", "output_padding", "=", "0", ",", "\n", "groups", "=", "o", ",", "bias", "=", "False", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "\n", "setattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", ")", ",", "proj", ")", "\n", "setattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", ")", ",", "up", ")", "\n", "setattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", ")", ",", "node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.IDAUp.forward": [[379, 386], ["range", "getattr", "getattr", "getattr.", "getattr", "getattr.", "getattr.", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ",", "startp", ",", "endp", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "startp", "+", "1", ",", "endp", ")", ":", "\n", "            ", "upsample", "=", "getattr", "(", "self", ",", "'up_'", "+", "str", "(", "i", "-", "startp", ")", ")", "\n", "project", "=", "getattr", "(", "self", ",", "'proj_'", "+", "str", "(", "i", "-", "startp", ")", ")", "\n", "layers", "[", "i", "]", "=", "upsample", "(", "project", "(", "layers", "[", "i", "]", ")", ")", "\n", "node", "=", "getattr", "(", "self", ",", "'node_'", "+", "str", "(", "i", "-", "startp", ")", ")", "\n", "layers", "[", "i", "]", "=", "node", "(", "layers", "[", "i", "]", "+", "layers", "[", "i", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLAUp.__init__": [[390, 405], ["torch.nn.Module.__init__", "list", "numpy.array", "range", "setattr", "len", "pose_dla_dcn.IDAUp"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "startp", ",", "channels", ",", "scales", ",", "in_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "DLAUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "startp", "=", "startp", "\n", "if", "in_channels", "is", "None", ":", "\n", "            ", "in_channels", "=", "channels", "\n", "", "self", ".", "channels", "=", "channels", "\n", "channels", "=", "list", "(", "channels", ")", "\n", "scales", "=", "np", ".", "array", "(", "scales", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "j", "=", "-", "i", "-", "2", "\n", "setattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ",", "\n", "IDAUp", "(", "channels", "[", "j", "]", ",", "in_channels", "[", "j", ":", "]", ",", "\n", "scales", "[", "j", ":", "]", "//", "scales", "[", "j", "]", ")", ")", "\n", "scales", "[", "j", "+", "1", ":", "]", "=", "scales", "[", "j", "]", "\n", "in_channels", "[", "j", "+", "1", ":", "]", "=", "[", "channels", "[", "j", "]", "for", "_", "in", "channels", "[", "j", "+", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLAUp.forward": [[406, 413], ["range", "getattr", "getattr.", "out.insert", "len", "len", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ")", ":", "\n", "        ", "out", "=", "[", "layers", "[", "-", "1", "]", "]", "# start with 32", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", "-", "self", ".", "startp", "-", "1", ")", ":", "\n", "            ", "ida", "=", "getattr", "(", "self", ",", "'ida_{}'", ".", "format", "(", "i", ")", ")", "\n", "ida", "(", "layers", ",", "len", "(", "layers", ")", "-", "i", "-", "2", ",", "len", "(", "layers", ")", ")", "\n", "out", ".", "insert", "(", "0", ",", "layers", "[", "-", "1", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Interpolate.__init__": [[416, 420], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.Interpolate.forward": [[421, 424], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLASeg.__init__": [[427, 468], ["torch.nn.Module.__init__", "int", "pose_dla_dcn.DLAUp", "pose_dla_dcn.IDAUp", "numpy.log2", "pose_dla_dcn.DLASeg.__setattr__", "globals", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "fc[].bias.data.fill_", "pose_dla_dcn.fill_fc_weights", "torch.nn.Conv2d.bias.data.fill_", "pose_dla_dcn.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "base_name", ",", "heads", ",", "pretrained", ",", "down_ratio", ",", "final_kernel", ",", "\n", "last_level", ",", "head_conv", ",", "out_channel", "=", "0", ")", ":", "\n", "        ", "super", "(", "DLASeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "down_ratio", "in", "[", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "self", ".", "first_level", "=", "int", "(", "np", ".", "log2", "(", "down_ratio", ")", ")", "\n", "self", ".", "last_level", "=", "last_level", "\n", "self", ".", "base", "=", "globals", "(", ")", "[", "base_name", "]", "(", "pretrained", "=", "pretrained", ")", "\n", "channels", "=", "self", ".", "base", ".", "channels", "\n", "scales", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "len", "(", "channels", "[", "self", ".", "first_level", ":", "]", ")", ")", "]", "\n", "self", ".", "dla_up", "=", "DLAUp", "(", "self", ".", "first_level", ",", "channels", "[", "self", ".", "first_level", ":", "]", ",", "scales", ")", "\n", "\n", "if", "out_channel", "==", "0", ":", "\n", "            ", "out_channel", "=", "channels", "[", "self", ".", "first_level", "]", "\n", "\n", "", "self", ".", "ida_up", "=", "IDAUp", "(", "out_channel", ",", "channels", "[", "self", ".", "first_level", ":", "self", ".", "last_level", "]", ",", "\n", "[", "2", "**", "i", "for", "i", "in", "range", "(", "self", ".", "last_level", "-", "self", ".", "first_level", ")", "]", ")", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "              ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "final_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "final_kernel", "//", "2", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "              ", "fc", "=", "nn", ".", "Conv2d", "(", "channels", "[", "self", ".", "first_level", "]", ",", "classes", ",", "\n", "kernel_size", "=", "final_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "final_kernel", "//", "2", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLASeg.forward": [[469, 482], ["pose_dla_dcn.DLASeg.base", "pose_dla_dcn.DLASeg.dla_up", "range", "pose_dla_dcn.DLASeg.ida_up", "y.append", "len", "x[].clone", "pose_dla_dcn.DLASeg.__getattr__"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "dla_up", "(", "x", ")", "\n", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "last_level", "-", "self", ".", "first_level", ")", ":", "\n", "            ", "y", ".", "append", "(", "x", "[", "i", "]", ".", "clone", "(", ")", ")", "\n", "", "self", ".", "ida_up", "(", "y", ",", "0", ",", "len", "(", "y", ")", ")", "\n", "\n", "z", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "z", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "y", "[", "-", "1", "]", ")", "\n", "", "return", "[", "z", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.get_model_url": [[20, 22], ["os.path.join"], "function", ["None"], ["def", "get_model_url", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", ":", "\n", "    ", "return", "join", "(", "'http://dl.yf.io/dla/models'", ",", "data", ",", "'{}-{}.pth'", ".", "format", "(", "name", ",", "hash", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.conv3x3": [[24, 28], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.dla34": [[308, 315], ["pose_dla_dcn.DLA", "pose_dla_dcn.DLA.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.DLA.load_pretrained_model"], ["", "", "def", "dla34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "# DLA-34", "\n", "    ", "model", "=", "DLA", "(", "[", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "block", "=", "BasicBlock", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained_model", "(", "data", "=", "'imagenet'", ",", "name", "=", "'dla34'", ",", "hash", "=", "'ba72cf86'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.fill_fc_weights": [[325, 330], ["layers.modules", "isinstance", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.fill_up_weights": [[332, 342], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.pose_dla_dcn.get_pose_net": [[484, 492], ["pose_dla_dcn.DLASeg"], "function", ["None"], ["", "", "def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ",", "down_ratio", "=", "4", ")", ":", "\n", "  ", "model", "=", "DLASeg", "(", "'dla{}'", ".", "format", "(", "num_layers", ")", ",", "heads", ",", "\n", "pretrained", "=", "True", ",", "\n", "down_ratio", "=", "down_ratio", ",", "\n", "final_kernel", "=", "1", ",", "\n", "last_level", "=", "5", ",", "\n", "head_conv", "=", "head_conv", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.BasicBlock.__init__": [[40, 49], ["torch.Module.__init__", "resnet_fpn_dcn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_fpn_dcn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.BasicBlock.forward": [[50, 67], ["resnet_fpn_dcn.BasicBlock.conv1", "resnet_fpn_dcn.BasicBlock.bn1", "resnet_fpn_dcn.BasicBlock.relu", "resnet_fpn_dcn.BasicBlock.conv2", "resnet_fpn_dcn.BasicBlock.bn2", "resnet_fpn_dcn.BasicBlock.relu", "resnet_fpn_dcn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.Bottleneck.__init__": [[72, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.Bottleneck.forward": [[87, 108], ["resnet_fpn_dcn.Bottleneck.conv1", "resnet_fpn_dcn.Bottleneck.bn1", "resnet_fpn_dcn.Bottleneck.relu", "resnet_fpn_dcn.Bottleneck.conv2", "resnet_fpn_dcn.Bottleneck.bn2", "resnet_fpn_dcn.Bottleneck.relu", "resnet_fpn_dcn.Bottleneck.conv3", "resnet_fpn_dcn.Bottleneck.bn3", "resnet_fpn_dcn.Bottleneck.relu", "resnet_fpn_dcn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.__init__": [[131, 183], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_fpn_dcn.PoseResNet._make_layer", "resnet_fpn_dcn.PoseResNet._make_layer", "resnet_fpn_dcn.PoseResNet._make_layer", "resnet_fpn_dcn.PoseResNet._make_layer", "resnet_fpn_dcn.PoseResNet._make_deconv_layer", "resnet_fpn_dcn.PoseResNet._make_deconv_layer", "resnet_fpn_dcn.PoseResNet._make_deconv_layer", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.DeformConv", "resnet_fpn_dcn.PoseResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "fc[].bias.data.fill_", "resnet_fpn_dcn.fill_fc_weights", "torch.Conv2d.bias.data.fill_", "resnet_fpn_dcn.fill_fc_weights"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_deconv_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_deconv_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_deconv_layer", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "heads", ",", "head_conv", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "deconv_with_bias", "=", "False", "\n", "\n", "super", "(", "PoseResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# used for deconv layers", "\n", "self", ".", "deconv_layer1", "=", "self", ".", "_make_deconv_layer", "(", "256", ",", "4", ")", "\n", "self", ".", "deconv_layer2", "=", "self", ".", "_make_deconv_layer", "(", "128", ",", "4", ")", "\n", "self", ".", "deconv_layer3", "=", "self", ".", "_make_deconv_layer", "(", "64", ",", "4", ")", "\n", "\n", "self", ".", "smooth_layer1", "=", "DeformConv", "(", "256", ",", "256", ")", "\n", "self", ".", "smooth_layer2", "=", "DeformConv", "(", "128", ",", "128", ")", "\n", "self", ".", "smooth_layer3", "=", "DeformConv", "(", "64", ",", "64", ")", "\n", "\n", "self", ".", "project_layer1", "=", "DeformConv", "(", "256", "*", "block", ".", "expansion", ",", "256", ")", "\n", "self", ".", "project_layer2", "=", "DeformConv", "(", "128", "*", "block", ".", "expansion", ",", "128", ")", "\n", "self", ".", "project_layer3", "=", "DeformConv", "(", "64", "*", "block", ".", "expansion", ",", "64", ")", "\n", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", "=", "self", ".", "heads", "[", "head", "]", "\n", "if", "head_conv", ">", "0", ":", "\n", "                ", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "else", ":", "\n", "                ", "fc", "=", "nn", ".", "Conv2d", "(", "64", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "'hm'", "in", "head", ":", "\n", "                    ", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "-", "2.19", ")", "\n", "", "else", ":", "\n", "                    ", "fill_fc_weights", "(", "fc", ")", "\n", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_layer": [[184, 200], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._get_deconv_cfg": [[201, 213], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._make_deconv_layer": [[214, 248], ["resnet_fpn_dcn.PoseResNet._get_deconv_cfg", "DCNv2.dcn_v2.DCN", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "resnet_fpn_dcn.fill_up_weights", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet._get_deconv_cfg", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_up_weights"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", ")", "\n", "\n", "planes", "=", "num_filters", "\n", "fc", "=", "DCN", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", "\n", "# fc = nn.Conv2d(self.inplanes, planes,", "\n", "#         kernel_size=3, stride=1,", "\n", "#         padding=1, dilation=1, bias=False)", "\n", "# fill_fc_weights(fc)", "\n", "up", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "planes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "self", ".", "deconv_with_bias", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "\n", "layers", ".", "append", "(", "fc", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "up", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.forward": [[249, 269], ["resnet_fpn_dcn.PoseResNet.conv1", "resnet_fpn_dcn.PoseResNet.bn1", "resnet_fpn_dcn.PoseResNet.relu", "resnet_fpn_dcn.PoseResNet.maxpool", "resnet_fpn_dcn.PoseResNet.layer1", "resnet_fpn_dcn.PoseResNet.layer2", "resnet_fpn_dcn.PoseResNet.layer3", "resnet_fpn_dcn.PoseResNet.layer4", "resnet_fpn_dcn.PoseResNet.smooth_layer1", "resnet_fpn_dcn.PoseResNet.smooth_layer2", "resnet_fpn_dcn.PoseResNet.smooth_layer3", "resnet_fpn_dcn.PoseResNet.deconv_layer1", "resnet_fpn_dcn.PoseResNet.project_layer1", "resnet_fpn_dcn.PoseResNet.deconv_layer2", "resnet_fpn_dcn.PoseResNet.project_layer2", "resnet_fpn_dcn.PoseResNet.deconv_layer3", "resnet_fpn_dcn.PoseResNet.project_layer3", "resnet_fpn_dcn.PoseResNet.__getattr__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "c1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "c2", "=", "self", ".", "layer2", "(", "c1", ")", "\n", "c3", "=", "self", ".", "layer3", "(", "c2", ")", "\n", "c4", "=", "self", ".", "layer4", "(", "c3", ")", "\n", "\n", "p4", "=", "c4", "\n", "p3", "=", "self", ".", "smooth_layer1", "(", "self", ".", "deconv_layer1", "(", "p4", ")", "+", "self", ".", "project_layer1", "(", "c3", ")", ")", "\n", "p2", "=", "self", ".", "smooth_layer2", "(", "self", ".", "deconv_layer2", "(", "p3", ")", "+", "self", ".", "project_layer2", "(", "c2", ")", ")", "\n", "p1", "=", "self", ".", "smooth_layer3", "(", "self", ".", "deconv_layer3", "(", "p2", ")", "+", "self", ".", "project_layer3", "(", "c1", ")", ")", "\n", "\n", "ret", "=", "{", "}", "\n", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "ret", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "p1", ")", "\n", "", "return", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.init_weights": [[270, 277], ["torch.load_url", "torch.load_url", "print", "resnet_fpn_dcn.PoseResNet.load_state_dict", "print"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "num_layers", ")", ":", "\n", "        ", "if", "1", ":", "\n", "            ", "url", "=", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", "\n", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "url", ")", ")", "\n", "self", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'=> init deconv weights from normal distribution'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.DeformConv.__init__": [[280, 291], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "DCNv2.dcn_v2.DCN", "resnet_fpn_dcn.DeformConv.actf.named_modules", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chi", ",", "cho", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actf", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "cho", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv", "=", "DCN", "(", "chi", ",", "cho", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", "\n", "for", "name", ",", "m", "in", "self", ".", "actf", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.DeformConv.forward": [[292, 296], ["resnet_fpn_dcn.DeformConv.conv", "resnet_fpn_dcn.DeformConv.actf"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "actf", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_up_weights": [[109, 119], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.fill_fc_weights": [[120, 128], ["layers.modules", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "fill_fc_weights", "(", "layers", ")", ":", "\n", "    ", "for", "m", "in", "layers", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# torch.nn.init.kaiming_normal_(m.weight.data, nonlinearity='relu')", "\n", "# torch.nn.init.xavier_normal_(m.weight.data)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.get_pose_net": [[305, 311], ["resnet_fpn_dcn.PoseResNet", "resnet_fpn_dcn.PoseResNet.init_weights"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.networks.resnet_fpn_dcn.PoseResNet.init_weights"], ["def", "get_pose_net", "(", "num_layers", ",", "heads", ",", "head_conv", "=", "256", ")", ":", "\n", "  ", "block_class", ",", "layers", "=", "resnet_spec", "[", "num_layers", "]", "\n", "\n", "model", "=", "PoseResNet", "(", "block_class", ",", "layers", ",", "heads", ",", "head_conv", "=", "head_conv", ")", "\n", "model", ".", "init_weights", "(", "num_layers", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.config.default.update_config": [[116, 120], ["cfg.defrost", "cfg.merge_from_file", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "cfg_dir", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "cfg_dir", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2.forward": [[17, 34], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "_ext.dcn_v2_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "kernel_size", "=", "_pair", "(", "weight", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "output", "=", "_backend", ".", "dcn_v2_forward", "(", "input", ",", "weight", ",", "bias", ",", "\n", "offset", ",", "mask", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "deformable_groups", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2.backward": [[35, 52], ["_ext.dcn_v2_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", "=", "_backend", ".", "dcn_v2_backward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "\n", "offset", ",", "mask", ",", "\n", "grad_output", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "deformable_groups", ")", "\n", "\n", "return", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2.__init__": [[59, 74], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "dcn_v2.DCNv2.reset_parameters", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "DCNv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2.reset_parameters": [[75, 82], ["dcn_v2.DCNv2.weight.data.uniform_", "dcn_v2.DCNv2.bias.data.zero_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2.forward": [[83, 95], ["dcn_v2_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "assert", "2", "*", "self", ".", "deformable_groups", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "==", "offset", ".", "shape", "[", "1", "]", "\n", "assert", "self", ".", "deformable_groups", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "==", "mask", ".", "shape", "[", "1", "]", "\n", "return", "dcn_v2_conv", "(", "input", ",", "offset", ",", "mask", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCN.__init__": [[99, 113], ["dcn_v2.DCNv2.__init__", "torch.nn.Conv2d", "dcn_v2.DCN.init_offset"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCN.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "DCN", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ")", "\n", "\n", "channels_", "=", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "\n", "channels_", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCN.init_offset": [[114, 117], ["dcn_v2.DCN.conv_offset_mask.weight.data.zero_", "dcn_v2.DCN.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCN.forward": [[118, 129], ["dcn_v2.DCN.conv_offset_mask", "torch.chunk", "torch.cat", "torch.sigmoid", "dcn_v2_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "input", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "dcn_v2_conv", "(", "input", ",", "offset", ",", "mask", ",", "\n", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.forward": [[133, 160], ["int", "_ext.dcn_v2_psroi_pooling_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "rois", ",", "offset", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "no_trans", "=", "int", "(", "no_trans", ")", "\n", "ctx", ".", "output_dim", "=", "output_dim", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "pooled_size", "=", "pooled_size", "\n", "ctx", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "ctx", ".", "sample_per_part", "=", "sample_per_part", "\n", "ctx", ".", "trans_std", "=", "trans_std", "\n", "\n", "output", ",", "output_count", "=", "_backend", ".", "dcn_v2_psroi_pooling_forward", "(", "input", ",", "rois", ",", "offset", ",", "\n", "ctx", ".", "no_trans", ",", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "output_dim", ",", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "pooled_size", ",", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "ctx", ".", "trans_std", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "rois", ",", "offset", ",", "output_count", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward": [[161, 182], ["_ext.dcn_v2_psroi_pooling_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "offset", ",", "output_count", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_offset", "=", "_backend", ".", "dcn_v2_psroi_pooling_backward", "(", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output_count", ",", "\n", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "output_dim", ",", "\n", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "pooled_size", ",", "\n", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "grad_offset", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2Pooling.__init__": [[189, 207], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DCNv2Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNv2Pooling.forward": [[208, 221], ["dcn_v2_pooling", "input.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "assert", "input", ".", "shape", "[", "1", "]", "==", "self", ".", "output_dim", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "input", ".", "new", "(", ")", "\n", "", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNPooling.__init__": [[225, 258], ["dcn_v2.DCNv2Pooling.__init__", "torch.nn.Sequential", "dcn_v2.DCNPooling.offset_mask_fc[].weight.data.zero_", "dcn_v2.DCNPooling.offset_mask_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_dim", "=", "1024", ")", ":", "\n", "        ", "super", "(", "DCNPooling", ",", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", ",", "\n", "part_size", ",", "\n", "sample_per_part", ",", "\n", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_dim", "=", "deform_fc_dim", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "offset_mask_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "\n", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "\n", "self", ".", "pooled_size", "*", "3", ")", "\n", ")", "\n", "self", ".", "offset_mask_fc", "[", "4", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_mask_fc", "[", "4", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2.DCNPooling.forward": [[259, 304], ["input.new", "dcn_v2_pooling", "dcn_v2_pooling", "dcn_v2.DCNPooling.offset_mask_fc", "offset_mask.view.view.view", "torch.chunk", "torch.cat", "torch.sigmoid", "dcn_v2_pooling.view", "dcn_v2_pooling"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "offset", "=", "input", ".", "new", "(", ")", "\n", "\n", "if", "not", "self", ".", "no_trans", ":", "\n", "\n", "# do roi_align first", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "roi", "=", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "True", ",", "# no trans", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n", "# build mask and offset", "\n", "offset_mask", "=", "self", ".", "offset_mask_fc", "(", "roi", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset_mask", "=", "offset_mask", ".", "view", "(", "\n", "n", ",", "3", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "offset_mask", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "\n", "# do pooling with offset and mask", "\n", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "*", "mask", "\n", "# only roi_align", "\n", "", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.setup.get_extensions": [[17, 55], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "NotImplementedError", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"src\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Cuda is not available'", ")", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"_ext\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.conv_identify": [[18, 28], ["weight.data.zero_", "bias.data.zero_", "range", "range"], "function", ["None"], ["def", "conv_identify", "(", "weight", ",", "bias", ")", ":", "\n", "    ", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "o", ",", "i", ",", "h", ",", "w", "=", "weight", ".", "shape", "\n", "y", "=", "h", "//", "2", "\n", "x", "=", "w", "//", "2", "\n", "for", "p", "in", "range", "(", "i", ")", ":", "\n", "        ", "for", "q", "in", "range", "(", "o", ")", ":", "\n", "            ", "if", "p", "==", "q", ":", "\n", "                ", "weight", ".", "data", "[", "q", ",", "p", ",", "y", ",", "x", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.check_zero_offset": [[30, 64], ["torch.Conv2d().cuda", "torch.Conv2d().cuda", "dcn_v2.DCNv2().cuda", "nn.Conv2d().cuda.weight.data.zero_", "nn.Conv2d().cuda.bias.data.zero_", "nn.Conv2d().cuda.weight.data.zero_", "nn.Conv2d().cuda.bias.data.zero_", "test.conv_identify", "torch.randn().cuda", "torch.randn().cuda", "nn.Conv2d().cuda.", "nn.Conv2d().cuda.", "torch.sigmoid", "torch.sigmoid", "DCNv2().cuda.", "print", "print", "torch.Conv2d", "torch.Conv2d", "dcn_v2.DCNv2", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.conv_identify"], ["", "", "", "", "def", "check_zero_offset", "(", ")", ":", "\n", "    ", "conv_offset", "=", "nn", ".", "Conv2d", "(", "inC", ",", "deformable_groups", "*", "2", "*", "kH", "*", "kW", ",", "\n", "kernel_size", "=", "(", "kH", ",", "kW", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "conv_mask", "=", "nn", ".", "Conv2d", "(", "inC", ",", "deformable_groups", "*", "1", "*", "kH", "*", "kW", ",", "\n", "kernel_size", "=", "(", "kH", ",", "kW", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "dcn_v2", "=", "DCNv2", "(", "inC", ",", "outC", ",", "(", "kH", ",", "kW", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "\n", "deformable_groups", "=", "deformable_groups", ")", ".", "cuda", "(", ")", "\n", "\n", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "conv_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "conv_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "conv_identify", "(", "dcn_v2", ".", "weight", ",", "dcn_v2", ".", "bias", ")", "\n", "\n", "input", "=", "torch", ".", "randn", "(", "N", ",", "inC", ",", "inH", ",", "inW", ")", ".", "cuda", "(", ")", "\n", "offset", "=", "conv_offset", "(", "input", ")", "\n", "mask", "=", "conv_mask", "(", "input", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "output", "=", "dcn_v2", "(", "input", ",", "offset", ",", "mask", ")", "\n", "output", "*=", "2", "\n", "d", "=", "(", "input", "-", "output", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "if", "d", "<", "1e-10", ":", "\n", "        ", "print", "(", "'Zero offset passed'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Zero offset failed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.check_gradient_dconv": [[65, 94], ["torch.rand().cuda", "torch.rand().cuda", "torch.sigmoid", "torch.sigmoid", "torch.randn().cuda", "torch.randn().cuda", "torch.rand().cuda", "torch.rand().cuda", "print", "torch.rand().cuda", "torch.rand().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.autograd.gradcheck", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randn", "torch.randn"], "function", ["None"], ["", "", "def", "check_gradient_dconv", "(", ")", ":", "\n", "\n", "    ", "input", "=", "torch", ".", "rand", "(", "N", ",", "inC", ",", "inH", ",", "inW", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "input", ".", "requires_grad", "=", "True", "\n", "\n", "offset", "=", "torch", ".", "randn", "(", "N", ",", "deformable_groups", "*", "2", "*", "kW", "*", "kH", ",", "inH", ",", "inW", ")", ".", "cuda", "(", ")", "*", "2", "\n", "# offset.data.zero_()", "\n", "# offset.data -= 0.5", "\n", "offset", ".", "requires_grad", "=", "True", "\n", "\n", "mask", "=", "torch", ".", "rand", "(", "N", ",", "deformable_groups", "*", "1", "*", "kW", "*", "kH", ",", "inH", ",", "inW", ")", ".", "cuda", "(", ")", "\n", "# mask.data.zero_()", "\n", "mask", ".", "requires_grad", "=", "True", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "\n", "weight", "=", "torch", ".", "randn", "(", "outC", ",", "inC", ",", "kH", ",", "kW", ")", ".", "cuda", "(", ")", "\n", "weight", ".", "requires_grad", "=", "True", "\n", "\n", "bias", "=", "torch", ".", "rand", "(", "outC", ")", ".", "cuda", "(", ")", "\n", "bias", ".", "requires_grad", "=", "True", "\n", "\n", "stride", "=", "1", "\n", "padding", "=", "1", "\n", "dilation", "=", "1", "\n", "\n", "print", "(", "'check_gradient_dconv: '", ",", "\n", "gradcheck", "(", "dcn_v2_conv", ",", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ")", ",", "\n", "eps", "=", "1e-3", ",", "atol", "=", "1e-4", ",", "rtol", "=", "1e-2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.check_pooling_zero_offset": [[96, 128], ["torch.randn().cuda().zero_", "torch.randn().cuda().zero_", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "dcn_v2.DCNv2Pooling().cuda", "DCNv2Pooling().cuda.", "print", "dcn_v2.DCNv2Pooling().cuda", "torch.randn().cuda().zero_", "torch.randn().cuda().zero_", "DCNv2Pooling().cuda.", "print", "torch.randn().cuda().zero_.new", "torch.randn().cuda", "torch.randn().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dcn_v2.DCNv2Pooling", "dcn_v2.DCNv2Pooling", "torch.randn().cuda", "torch.randn().cuda", "out[].mean().item", "range", "dout[].mean().item", "range", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.randn", "torch.randn", "out[].mean", "dout[].mean"], "function", ["None"], ["", "def", "check_pooling_zero_offset", "(", ")", ":", "\n", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "16", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", ".", "zero_", "(", ")", "\n", "input", "[", "0", ",", ":", ",", "16", ":", "26", ",", "16", ":", "26", "]", "=", "1.", "\n", "input", "[", "1", ",", ":", ",", "10", ":", "20", ",", "20", ":", "30", "]", "=", "2.", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "65", ",", "65", ",", "103", ",", "103", "]", ",", "\n", "[", "1", ",", "81", ",", "41", ",", "119", ",", "79", "]", ",", "\n", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "pooling", "=", "DCNv2Pooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "16", ",", "\n", "no_trans", "=", "True", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "pooling", "(", "input", ",", "rois", ",", "input", ".", "new", "(", ")", ")", "\n", "s", "=", "', '", ".", "join", "(", "[", "'%f'", "%", "out", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "for", "i", "in", "range", "(", "rois", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "print", "(", "s", ")", "\n", "\n", "dpooling", "=", "DCNv2Pooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "16", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.0", ")", ".", "cuda", "(", ")", "\n", "offset", "=", "torch", ".", "randn", "(", "20", ",", "2", ",", "7", ",", "7", ")", ".", "cuda", "(", ")", ".", "zero_", "(", ")", "\n", "dout", "=", "dpooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "s", "=", "', '", ".", "join", "(", "[", "'%f'", "%", "dout", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "for", "i", "in", "range", "(", "rois", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.check_gradient_dpooling": [[130, 163], ["torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.cat", "torch.randn().cuda", "torch.randn().cuda", "print", "torch.randn().cuda", "torch.randn().cuda", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.autograd.gradcheck", "torch.randint().cuda", "torch.randint().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.randint", "torch.randint", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "check_gradient_dpooling", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "5", ",", "5", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "N", "=", "4", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "N", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "rand", "(", "(", "N", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "*", "15", "\n", "y", "=", "torch", ".", "rand", "(", "(", "N", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "*", "15", "\n", "w", "=", "torch", ".", "rand", "(", "(", "N", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "*", "10", "\n", "h", "=", "torch", ".", "rand", "(", "(", "N", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "*", "10", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "randn", "(", "N", ",", "2", ",", "3", ",", "3", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "offset", ".", "requires_grad", "=", "True", "\n", "\n", "spatial_scale", "=", "1.0", "/", "4", "\n", "pooled_size", "=", "3", "\n", "output_dim", "=", "3", "\n", "no_trans", "=", "0", "\n", "group_size", "=", "1", "\n", "trans_std", "=", "0.0", "\n", "sample_per_part", "=", "4", "\n", "part_size", "=", "pooled_size", "\n", "\n", "print", "(", "'check_gradient_dpooling:'", ",", "\n", "gradcheck", "(", "dcn_v2_pooling", ",", "(", "input", ",", "rois", ",", "offset", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", ",", "\n", "part_size", ",", "\n", "sample_per_part", ",", "\n", "trans_std", ")", ",", "\n", "eps", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.example_dconv": [[165, 177], ["torch.randn().cuda", "torch.randn().cuda", "dcn_v2.DCN().cuda", "DCN().cuda.", "dcn.new", "output.new.data.uniform_", "error.backward", "print", "torch.randn", "torch.randn", "dcn_v2.DCN", "dcn.size"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward"], ["", "def", "example_dconv", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "64", ",", "128", ",", "128", ")", ".", "cuda", "(", ")", "\n", "# wrap all things (offset and mask) in DCN", "\n", "dcn", "=", "DCN", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "deformable_groups", "=", "2", ")", ".", "cuda", "(", ")", "\n", "# print(dcn.weight.shape, input.shape)", "\n", "output", "=", "dcn", "(", "input", ")", "\n", "targert", "=", "output", ".", "new", "(", "*", "output", ".", "size", "(", ")", ")", "\n", "targert", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "error", "=", "(", "targert", "-", "output", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "output", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.example_dpooling": [[179, 220], ["torch.randn().cuda", "torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.cat", "torch.randn().cuda", "torch.randn().cuda", "dcn_v2.DCNv2Pooling().cuda", "dcn_v2.DCNv2Pooling().cuda", "DCNv2Pooling().cuda.", "DCNv2Pooling().cuda.", "print", "print", "pooling.new", "out.new.data.uniform_", "dpooling.new", "dout.new.data.uniform_", "e.backward", "e.backward", "torch.randn", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randn", "torch.randn", "dcn_v2.DCNv2Pooling", "dcn_v2.DCNv2Pooling", "pooling.size", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward"], ["", "def", "example_dpooling", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "randn", "(", "20", ",", "2", ",", "7", ",", "7", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "offset", ".", "requires_grad", "=", "True", "\n", "\n", "# normal roi_align", "\n", "pooling", "=", "DCNv2Pooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "True", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "# deformable pooling", "\n", "dpooling", "=", "DCNv2Pooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "pooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "dout", "=", "dpooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "print", "(", "out", ".", "shape", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n", "target_out", "=", "out", ".", "new", "(", "*", "out", ".", "size", "(", ")", ")", "\n", "target_out", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "target_dout", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target_dout", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "e", "=", "(", "target_out", "-", "out", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "e", "=", "(", "target_dout", "-", "dout", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.test.example_mdpooling": [[222, 247], ["torch.randn().cuda", "torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.cat", "dcn_v2.DCNPooling().cuda", "DCNPooling().cuda.", "dpooling.new", "dout.new.data.uniform_", "error.backward", "print", "torch.randn", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "dcn_v2.DCNPooling", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward"], ["", "def", "example_mdpooling", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# mdformable pooling (V2)", "\n", "dpooling", "=", "DCNPooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ",", "\n", "deform_fc_dim", "=", "1024", ")", ".", "cuda", "(", ")", "\n", "\n", "dout", "=", "dpooling", "(", "input", ",", "rois", ")", "\n", "target", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "error", "=", "(", "target", "-", "dout", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.GaussianBlurConv.__init__": [[34, 45], ["torch.Module.__init__", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "numpy.repeat", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "GaussianBlurConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "kernel", "=", "[", "[", "0.00078633", ",", "0.00655965", ",", "0.01330373", ",", "0.00655965", ",", "0.00078633", "]", ",", "\n", "[", "0.00655965", ",", "0.05472157", ",", "0.11098164", ",", "0.05472157", ",", "0.00655965", "]", ",", "\n", "[", "0.01330373", ",", "0.11098164", ",", "0.22508352", ",", "0.11098164", ",", "0.01330373", "]", ",", "\n", "[", "0.00655965", ",", "0.05472157", ",", "0.11098164", ",", "0.05472157", ",", "0.00655965", "]", ",", "\n", "[", "0.00078633", ",", "0.00655965", ",", "0.01330373", ",", "0.00655965", ",", "0.00078633", "]", "]", "\n", "kernel", "=", "torch", ".", "FloatTensor", "(", "kernel", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel", "=", "np", ".", "repeat", "(", "kernel", ",", "self", ".", "channels", ",", "axis", "=", "0", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.GaussianBlurConv.__call__": [[46, 49], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "padding", "=", "2", ",", "groups", "=", "self", ".", "channels", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.__init__": [[86, 108], ["numpy.asarray", "multitracker.STrack.update_features", "collections.deque", "multitracker.STrack.tlwh_to_tlbr"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_tlbr"], ["def", "__init__", "(", "self", ",", "tlwh", ",", "score", ",", "temp_feat", ",", "buffer_size", "=", "30", ")", ":", "\n", "\n", "# wait activate", "\n", "        ", "self", ".", "_tlwh", "=", "np", ".", "asarray", "(", "tlwh", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "kalman_filter", "=", "None", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "None", ",", "None", "\n", "self", ".", "is_activated", "=", "False", "\n", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "exist_len", "=", "1", "\n", "\n", "self", ".", "smooth_feat", "=", "None", "\n", "self", ".", "smooth_feat_ad", "=", "None", "\n", "\n", "self", ".", "update_features", "(", "temp_feat", ")", "\n", "self", ".", "features", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "buffer_size", ")", "\n", "self", ".", "alpha", "=", "0.9", "\n", "\n", "self", ".", "curr_tlbr", "=", "self", ".", "tlwh_to_tlbr", "(", "self", ".", "_tlwh", ")", "\n", "\n", "self", ".", "det_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.get_v": [[109, 111], ["None"], "methods", ["None"], ["", "def", "get_v", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "[", "4", ":", "6", "]", "if", "self", ".", "mean", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features_ad": [[112, 119], ["numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "update_features_ad", "(", "self", ",", "feat", ")", ":", "\n", "        ", "feat", "/=", "np", ".", "linalg", ".", "norm", "(", "feat", ")", "\n", "if", "self", ".", "smooth_feat_ad", "is", "None", ":", "\n", "            ", "self", ".", "smooth_feat_ad", "=", "feat", "\n", "", "else", ":", "\n", "            ", "self", ".", "smooth_feat_ad", "=", "self", ".", "alpha", "*", "self", ".", "smooth_feat_ad", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "feat", "\n", "", "self", ".", "smooth_feat_ad", "/=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "smooth_feat_ad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features": [[120, 129], ["numpy.linalg.norm", "multitracker.STrack.features.append", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "update_features", "(", "self", ",", "feat", ")", ":", "\n", "        ", "feat", "/=", "np", ".", "linalg", ".", "norm", "(", "feat", ")", "\n", "self", ".", "curr_feat", "=", "feat", "\n", "if", "self", ".", "smooth_feat", "is", "None", ":", "\n", "            ", "self", ".", "smooth_feat", "=", "feat", "\n", "", "else", ":", "\n", "            ", "self", ".", "smooth_feat", "=", "self", ".", "alpha", "*", "self", ".", "smooth_feat", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "feat", "\n", "", "self", ".", "features", ".", "append", "(", "feat", ")", "\n", "self", ".", "smooth_feat", "/=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "smooth_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.predict": [[130, 135], ["multitracker.STrack.mean.copy", "multitracker.STrack.kalman_filter.predict"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.predict"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "mean_state", "=", "self", ".", "mean", ".", "copy", "(", ")", "\n", "if", "self", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "            ", "mean_state", "[", "7", "]", "=", "0", "\n", "", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "predict", "(", "mean_state", ",", "self", ".", "covariance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict": [[136, 148], ["len", "numpy.asarray", "numpy.asarray", "enumerate", "STrack.shared_kalman.multi_predict", "enumerate", "zip", "st.mean.copy"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict"], ["", "@", "staticmethod", "\n", "def", "multi_predict", "(", "stracks", ")", ":", "\n", "        ", "if", "len", "(", "stracks", ")", ">", "0", ":", "\n", "            ", "multi_mean", "=", "np", ".", "asarray", "(", "[", "st", ".", "mean", ".", "copy", "(", ")", "for", "st", "in", "stracks", "]", ")", "\n", "multi_covariance", "=", "np", ".", "asarray", "(", "[", "st", ".", "covariance", "for", "st", "in", "stracks", "]", ")", "\n", "for", "i", ",", "st", "in", "enumerate", "(", "stracks", ")", ":", "\n", "                ", "if", "st", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "                    ", "multi_mean", "[", "i", "]", "[", "7", "]", "=", "0", "\n", "", "", "multi_mean", ",", "multi_covariance", "=", "STrack", ".", "shared_kalman", ".", "multi_predict", "(", "multi_mean", ",", "multi_covariance", ")", "\n", "for", "i", ",", "(", "mean", ",", "cov", ")", "in", "enumerate", "(", "zip", "(", "multi_mean", ",", "multi_covariance", ")", ")", ":", "\n", "                ", "stracks", "[", "i", "]", ".", "mean", "=", "mean", "\n", "stracks", "[", "i", "]", ".", "covariance", "=", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict_": [[149, 161], ["len", "numpy.asarray", "numpy.asarray", "enumerate", "STrack.shared_kalman_.multi_predict", "enumerate", "zip", "st.mean.copy"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict"], ["", "", "", "@", "staticmethod", "\n", "def", "multi_predict_", "(", "stracks", ")", ":", "\n", "        ", "if", "len", "(", "stracks", ")", ">", "0", ":", "\n", "            ", "multi_mean", "=", "np", ".", "asarray", "(", "[", "st", ".", "mean", ".", "copy", "(", ")", "for", "st", "in", "stracks", "]", ")", "\n", "multi_covariance", "=", "np", ".", "asarray", "(", "[", "st", ".", "covariance", "for", "st", "in", "stracks", "]", ")", "\n", "for", "i", ",", "st", "in", "enumerate", "(", "stracks", ")", ":", "\n", "                ", "if", "st", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "                    ", "multi_mean", "[", "i", "]", "[", "7", "]", "=", "0", "\n", "", "", "multi_mean", ",", "multi_covariance", "=", "STrack", ".", "shared_kalman_", ".", "multi_predict", "(", "multi_mean", ",", "multi_covariance", ")", "\n", "for", "i", ",", "(", "mean", ",", "cov", ")", "in", "enumerate", "(", "zip", "(", "multi_mean", ",", "multi_covariance", ")", ")", ":", "\n", "                ", "stracks", "[", "i", "]", ".", "mean", "=", "mean", "\n", "stracks", "[", "i", "]", ".", "covariance", "=", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate": [[162, 177], ["multitracker.STrack.kalman_filter.initiate", "multitracker.STrack.next_id", "multitracker.STrack.tlwh_to_xyah"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.initiate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah"], ["", "", "", "def", "activate", "(", "self", ",", "kalman_filter", ",", "frame_id", ",", "track_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start a new tracklet\"\"\"", "\n", "self", ".", "kalman_filter", "=", "kalman_filter", "\n", "if", "track_id", ":", "\n", "            ", "self", ".", "track_id", "=", "track_id", "[", "'track_id'", "]", "\n", "track_id", "[", "'track_id'", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "initiate", "(", "self", ".", "tlwh_to_xyah", "(", "self", ".", "_tlwh", ")", ")", "\n", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "start_frame", "=", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_": [[178, 193], ["multitracker.STrack.kalman_filter.initiate", "multitracker.STrack.next_id_", "multitracker.STrack.tlwh_to_xyah"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.initiate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah"], ["", "def", "activate_", "(", "self", ",", "kalman_filter", ",", "frame_id", ",", "track_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start a new tracklet\"\"\"", "\n", "self", ".", "kalman_filter", "=", "kalman_filter", "\n", "if", "track_id", ":", "\n", "            ", "self", ".", "track_id", "=", "track_id", "[", "'track_id'", "]", "\n", "track_id", "[", "'track_id'", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id_", "(", ")", "\n", "", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "initiate", "(", "self", ".", "tlwh_to_xyah", "(", "self", ".", "_tlwh", ")", ")", "\n", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "start_frame", "=", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate": [[194, 208], ["multitracker.STrack.tlwh_to_tlbr", "multitracker.STrack.kalman_filter.update", "multitracker.STrack.update_features", "multitracker.STrack.tlwh_to_xyah", "multitracker.STrack.next_id"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_tlbr", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id"], ["", "def", "re_activate", "(", "self", ",", "new_track", ",", "frame_id", ",", "new_id", "=", "False", ")", ":", "\n", "        ", "self", ".", "curr_tlbr", "=", "self", ".", "tlwh_to_tlbr", "(", "new_track", ".", "tlwh", ")", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "self", ".", "tlwh_to_xyah", "(", "new_track", ".", "tlwh", ")", "\n", ")", "\n", "\n", "self", ".", "update_features", "(", "new_track", ".", "curr_feat", ")", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "exist_len", "+=", "1", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "if", "new_id", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_": [[209, 223], ["multitracker.STrack.tlwh_to_tlbr", "multitracker.STrack.kalman_filter.update", "multitracker.STrack.update_features", "multitracker.STrack.tlwh_to_xyah", "multitracker.STrack.next_id_"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_tlbr", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id_"], ["", "", "def", "re_activate_", "(", "self", ",", "new_track", ",", "frame_id", ",", "new_id", "=", "False", ")", ":", "\n", "        ", "self", ".", "curr_tlbr", "=", "self", ".", "tlwh_to_tlbr", "(", "new_track", ".", "tlwh", ")", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "self", ".", "tlwh_to_xyah", "(", "new_track", ".", "tlwh", ")", "\n", ")", "\n", "\n", "self", ".", "update_features", "(", "new_track", ".", "curr_feat", ")", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "exist_len", "+=", "1", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "if", "new_id", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update": [[224, 246], ["multitracker.STrack.tlwh_to_tlbr", "multitracker.STrack.kalman_filter.update", "multitracker.STrack.tlwh_to_xyah", "multitracker.STrack.update_features"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_tlbr", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.update_features"], ["", "", "def", "update", "(", "self", ",", "new_track", ",", "frame_id", ",", "update_feature", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Update a matched track\n        :type new_track: STrack\n        :type frame_id: int\n        :type update_feature: bool\n        :return:\n        \"\"\"", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "tracklet_len", "+=", "1", "\n", "self", ".", "exist_len", "+=", "1", "\n", "\n", "self", ".", "curr_tlbr", "=", "self", ".", "tlwh_to_tlbr", "(", "new_track", ".", "tlwh", ")", "\n", "new_tlwh", "=", "new_track", ".", "tlwh", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "self", ".", "tlwh_to_xyah", "(", "new_tlwh", ")", ")", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "\n", "self", ".", "score", "=", "new_track", ".", "score", "\n", "if", "update_feature", ":", "\n", "            ", "self", ".", "update_features", "(", "new_track", ".", "curr_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh": [[247, 259], ["multitracker.STrack.mean[].copy", "multitracker.STrack._tlwh.copy"], "methods", ["None"], ["", "", "@", "property", "\n", "# @jit(nopython=True)", "\n", "def", "tlwh", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current position in bounding box format `(top left x, top left y,\n                width, height)`.\n        \"\"\"", "\n", "if", "self", ".", "mean", "is", "None", ":", "\n", "            ", "return", "self", ".", "_tlwh", ".", "copy", "(", ")", "\n", "", "ret", "=", "self", ".", "mean", "[", ":", "4", "]", ".", "copy", "(", ")", "\n", "ret", "[", "2", "]", "*=", "ret", "[", "3", "]", "\n", "ret", "[", ":", "2", "]", "-=", "ret", "[", "2", ":", "]", "/", "2", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr": [[260, 269], ["multitracker.STrack.tlwh.copy"], "methods", ["None"], ["", "@", "property", "\n", "# @jit(nopython=True)", "\n", "def", "tlbr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(min x, min y, max x, max y)`, i.e.,\n        `(top left, bottom right)`.\n        \"\"\"", "\n", "ret", "=", "self", ".", "tlwh", ".", "copy", "(", ")", "\n", "ret", "[", "2", ":", "]", "+=", "ret", "[", ":", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah": [[270, 280], ["numpy.asarray().copy", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# @jit(nopython=True)", "\n", "def", "tlwh_to_xyah", "(", "tlwh", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(center x, center y, aspect ratio,\n        height)`, where the aspect ratio is `width / height`.\n        \"\"\"", "\n", "ret", "=", "np", ".", "asarray", "(", "tlwh", ")", ".", "copy", "(", ")", "\n", "ret", "[", ":", "2", "]", "+=", "ret", "[", "2", ":", "]", "/", "2", "\n", "ret", "[", "2", "]", "/=", "ret", "[", "3", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.to_xyah": [[281, 283], ["multitracker.STrack.tlwh_to_xyah"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_xyah"], ["", "def", "to_xyah", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tlwh_to_xyah", "(", "self", ".", "tlwh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh": [[284, 290], ["numpy.asarray().copy", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# @jit(nopython=True)", "\n", "def", "tlbr_to_tlwh", "(", "tlbr", ")", ":", "\n", "        ", "ret", "=", "np", ".", "asarray", "(", "tlbr", ")", ".", "copy", "(", ")", "\n", "ret", "[", "2", ":", "]", "-=", "ret", "[", ":", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlwh_to_tlbr": [[291, 297], ["numpy.asarray().copy", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# @jit(nopython=True)", "\n", "def", "tlwh_to_tlbr", "(", "tlwh", ")", ":", "\n", "        ", "ret", "=", "np", ".", "asarray", "(", "tlwh", ")", ".", "copy", "(", ")", "\n", "ret", "[", "2", ":", "]", "+=", "ret", "[", ":", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.__repr__": [[298, 300], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OT_{}_({}-{})'", ".", "format", "(", "self", ".", "track_id", ",", "self", ".", "start_frame", ",", "self", ".", "end_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.__init__": [[303, 369], ["print", "multitracker.JDETracker.model.eval", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "int", "tracking_utils.kalman_filter.KalmanFilter", "tracking_utils.kalman_filter.KalmanFilter", "tracking_utils.kalman_filter.KalmanFilter", "set", "set", "copy.deepcopy", "set", "models.model.create_model", "models.model.load_model().cuda", "models.model.load_model"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.create_model", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.model.load_model"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "opt", ",", "\n", "frame_rate", "=", "30", ",", "\n", "tracked_stracks", "=", "[", "]", ",", "\n", "lost_stracks", "=", "[", "]", ",", "\n", "removed_stracks", "=", "[", "]", ",", "\n", "frame_id", "=", "0", ",", "\n", "ad_last_info", "=", "{", "}", ",", "\n", "model", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "print", "(", "'Creating model...'", ")", "\n", "if", "model", ":", "\n", "            ", "self", ".", "model", "=", "model", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "create_model", "(", "opt", ".", "arch", ",", "opt", ".", "heads", ",", "opt", ".", "head_conv", ")", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "opt", ".", "load_model", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "log_index", "=", "[", "]", "\n", "self", ".", "unconfirmed_ad_iou", "=", "None", "\n", "self", ".", "tracked_stracks_ad_iou", "=", "None", "\n", "self", ".", "strack_pool_ad_iou", "=", "None", "\n", "\n", "self", ".", "tracked_stracks", "=", "copy", ".", "deepcopy", "(", "tracked_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "lost_stracks", "=", "copy", ".", "deepcopy", "(", "lost_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "removed_stracks", "=", "copy", ".", "deepcopy", "(", "removed_stracks", ")", "# type: list[STrack]", "\n", "\n", "self", ".", "tracked_stracks_ad", "=", "copy", ".", "deepcopy", "(", "tracked_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "lost_stracks_ad", "=", "copy", ".", "deepcopy", "(", "lost_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "removed_stracks_ad", "=", "copy", ".", "deepcopy", "(", "removed_stracks", ")", "# type: list[STrack]", "\n", "\n", "self", ".", "tracked_stracks_", "=", "copy", ".", "deepcopy", "(", "tracked_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "lost_stracks_", "=", "copy", ".", "deepcopy", "(", "lost_stracks", ")", "# type: list[STrack]", "\n", "self", ".", "removed_stracks_", "=", "copy", ".", "deepcopy", "(", "removed_stracks", ")", "# type: list[STrack]", "\n", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "frame_id_", "=", "frame_id", "\n", "self", ".", "frame_id_ad", "=", "frame_id", "\n", "\n", "self", ".", "det_thresh", "=", "opt", ".", "conf_thres", "\n", "self", ".", "buffer_size", "=", "int", "(", "frame_rate", "/", "30.0", "*", "opt", ".", "track_buffer", ")", "\n", "self", ".", "max_time_lost", "=", "self", ".", "buffer_size", "\n", "self", ".", "max_per_image", "=", "128", "\n", "\n", "self", ".", "kalman_filter", "=", "KalmanFilter", "(", ")", "\n", "self", ".", "kalman_filter_ad", "=", "KalmanFilter", "(", ")", "\n", "self", ".", "kalman_filter_", "=", "KalmanFilter", "(", ")", "\n", "\n", "self", ".", "attacked_ids", "=", "set", "(", "[", "]", ")", "\n", "self", ".", "low_iou_ids", "=", "set", "(", "[", "]", ")", "\n", "self", ".", "ATTACK_IOU_THR", "=", "opt", ".", "iou_thr", "\n", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "self", ".", "ad_last_info", "=", "copy", ".", "deepcopy", "(", "ad_last_info", ")", "\n", "self", ".", "FRAME_THR", "=", "10", "\n", "\n", "self", ".", "temp_i", "=", "0", "\n", "self", ".", "multiple_ori_ids", "=", "{", "}", "\n", "self", ".", "multiple_att_ids", "=", "{", "}", "\n", "self", ".", "multiple_ori2att", "=", "{", "}", "\n", "self", ".", "multiple_att_freq", "=", "{", "}", "\n", "\n", "# hijacking attack", "\n", "self", ".", "ad_bbox", "=", "True", "\n", "self", ".", "ad_ids", "=", "set", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process": [[370, 379], ["utils.post_process.ctdet_post_process.detach().cpu().numpy", "utils.post_process.ctdet_post_process.reshape", "utils.post_process.ctdet_post_process", "range", "utils.post_process.ctdet_post_process.copy", "numpy.array().reshape", "utils.post_process.ctdet_post_process.detach().cpu", "numpy.array", "utils.post_process.ctdet_post_process.detach"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.utils.post_process.ctdet_post_process"], ["", "def", "post_process", "(", "self", ",", "dets", ",", "meta", ")", ":", "\n", "        ", "dets", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dets", "=", "dets", ".", "reshape", "(", "1", ",", "-", "1", ",", "dets", ".", "shape", "[", "2", "]", ")", "\n", "dets", "=", "ctdet_post_process", "(", "\n", "dets", ".", "copy", "(", ")", ",", "[", "meta", "[", "'c'", "]", "]", ",", "[", "meta", "[", "'s'", "]", "]", ",", "\n", "meta", "[", "'out_height'", "]", ",", "meta", "[", "'out_width'", "]", ",", "self", ".", "opt", ".", "num_classes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "dets", "[", "0", "]", "[", "j", "]", "=", "np", ".", "array", "(", "dets", "[", "0", "]", "[", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "", "return", "dets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs": [[380, 395], ["range", "numpy.hstack", "numpy.concatenate().astype", "len", "range", "len", "numpy.partition", "numpy.concatenate", "range"], "methods", ["None"], ["", "def", "merge_outputs", "(", "self", ",", "detections", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "            ", "results", "[", "j", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "detection", "[", "j", "]", "for", "detection", "in", "detections", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "scores", "=", "np", ".", "hstack", "(", "\n", "[", "results", "[", "j", "]", "[", ":", ",", "4", "]", "for", "j", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "num_classes", "+", "1", ")", "]", ")", "\n", "if", "len", "(", "scores", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "kth", "=", "len", "(", "scores", ")", "-", "self", ".", "max_per_image", "\n", "thresh", "=", "np", ".", "partition", "(", "scores", ",", "kth", ")", "[", "kth", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "num_classes", "+", "1", ")", ":", "\n", "                ", "keep_inds", "=", "(", "results", "[", "j", "]", "[", ":", ",", "4", "]", ">=", "thresh", ")", "\n", "results", "[", "j", "]", "=", "results", "[", "j", "]", "[", "keep_inds", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverImg": [[396, 417], ["min", "[].numpy().astype", "cv2.cvtColor", "cv2.resize", "cv2.resize.cpu", "round", "round", "round", "round", "round", "round", "float", "float", "[].numpy", "cv2.resize.squeeze().permute", "cv2.resize.squeeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "recoverImg", "(", "im_blob", ",", "img0", ")", ":", "\n", "        ", "height", "=", "608", "\n", "width", "=", "1088", "\n", "im_blob", "=", "im_blob", ".", "cpu", "(", ")", "*", "255.0", "\n", "shape", "=", "img0", ".", "shape", "[", ":", "2", "]", "# shape = [height, width]", "\n", "ratio", "=", "min", "(", "float", "(", "height", ")", "/", "shape", "[", "0", "]", ",", "float", "(", "width", ")", "/", "shape", "[", "1", "]", ")", "\n", "new_shape", "=", "(", "round", "(", "shape", "[", "1", "]", "*", "ratio", ")", ",", "round", "(", "shape", "[", "0", "]", "*", "ratio", ")", ")", "# new_shape = [width, height]", "\n", "dw", "=", "(", "width", "-", "new_shape", "[", "0", "]", ")", "/", "2", "# width padding", "\n", "dh", "=", "(", "height", "-", "new_shape", "[", "1", "]", ")", "/", "2", "# height padding", "\n", "top", ",", "bottom", "=", "round", "(", "dh", "-", "0.1", ")", ",", "round", "(", "dh", "+", "0.1", ")", "\n", "left", ",", "right", "=", "round", "(", "dw", "-", "0.1", ")", ",", "round", "(", "dw", "+", "0.1", ")", "\n", "\n", "im_blob", "=", "im_blob", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "[", "top", ":", "height", "-", "bottom", ",", "left", ":", "width", "-", "right", ",", ":", "]", ".", "numpy", "(", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "im_blob", "=", "cv2", ".", "cvtColor", "(", "im_blob", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "img0", ".", "shape", "\n", "im_blob", "=", "cv2", ".", "resize", "(", "im_blob", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "im_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise": [[418, 437], ["min", "noise.cpu().squeeze().permute().numpy.cpu().squeeze().permute().numpy.cpu().squeeze().permute().numpy", "round", "round", "round", "round", "round", "round", "float", "float", "noise.cpu().squeeze().permute().numpy.cpu().squeeze().permute().numpy.cpu().squeeze().permute", "noise.cpu().squeeze().permute().numpy.cpu().squeeze().permute().numpy.cpu().squeeze", "noise.cpu().squeeze().permute().numpy.cpu().squeeze().permute().numpy.cpu"], "methods", ["None"], ["", "def", "recoverNoise", "(", "self", ",", "noise", ",", "img0", ")", ":", "\n", "        ", "height", "=", "608", "\n", "width", "=", "1088", "\n", "shape", "=", "img0", ".", "shape", "[", ":", "2", "]", "# shape = [height, width]", "\n", "ratio", "=", "min", "(", "float", "(", "height", ")", "/", "shape", "[", "0", "]", ",", "float", "(", "width", ")", "/", "shape", "[", "1", "]", ")", "\n", "new_shape", "=", "(", "round", "(", "shape", "[", "1", "]", "*", "ratio", ")", ",", "round", "(", "shape", "[", "0", "]", "*", "ratio", ")", ")", "# new_shape = [width, height]", "\n", "dw", "=", "(", "width", "-", "new_shape", "[", "0", "]", ")", "/", "2", "# width padding", "\n", "dh", "=", "(", "height", "-", "new_shape", "[", "1", "]", ")", "/", "2", "# height padding", "\n", "top", ",", "bottom", "=", "round", "(", "dh", "-", "0.1", ")", ",", "round", "(", "dh", "+", "0.1", ")", "\n", "left", ",", "right", "=", "round", "(", "dw", "-", "0.1", ")", ",", "round", "(", "dw", "+", "0.1", ")", "\n", "\n", "noise", "=", "noise", "[", ":", ",", ":", ",", "top", ":", "height", "-", "bottom", ",", "left", ":", "width", "-", "right", "]", "\n", "h", ",", "w", ",", "_", "=", "img0", ".", "shape", "\n", "# noise = self.resizeTensor(noise, h, w).cpu().squeeze().permute(1, 2, 0).numpy()", "\n", "noise", "=", "noise", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "noise", "=", "(", "noise", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.resizeTensor": [[438, 447], ["torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().view().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.linspace().repeat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.unsqueeze.unsqueeze.unsqueeze", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().view().repeat().to.unsqueeze", "torch.linspace().view().repeat().to.unsqueeze", "torch.linspace().view().repeat().to.unsqueeze", "torch.linspace().repeat().to.unsqueeze", "torch.linspace().repeat().to.unsqueeze", "torch.linspace().repeat().to.unsqueeze", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "resizeTensor", "(", "tensor", ",", "height", ",", "width", ")", ":", "\n", "        ", "h", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "height", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "width", ")", ".", "to", "(", "tensor", ".", "device", ")", "\n", "w", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "width", ")", ".", "repeat", "(", "height", ",", "1", ")", ".", "to", "(", "tensor", ".", "device", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h", ".", "unsqueeze", "(", "2", ")", ",", "w", ".", "unsqueeze", "(", "2", ")", ")", ",", "dim", "=", "2", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "tensor", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.processIoUs": [[448, 466], ["numpy.tril", "numpy.argsort", "set", "numpy.tril.reshape", "set.add", "set.add"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "processIoUs", "(", "ious", ")", ":", "\n", "        ", "h", ",", "w", "=", "ious", ".", "shape", "\n", "assert", "h", "==", "w", "\n", "ious", "=", "np", ".", "tril", "(", "ious", ",", "-", "1", ")", "\n", "index", "=", "np", ".", "argsort", "(", "-", "ious", ".", "reshape", "(", "-", "1", ")", ")", "\n", "indSet", "=", "set", "(", "[", "]", ")", "\n", "for", "ind", "in", "index", ":", "\n", "            ", "i", "=", "ind", "//", "h", "\n", "j", "=", "ind", "%", "w", "\n", "if", "ious", "[", "i", ",", "j", "]", "==", "0", ":", "\n", "                ", "break", "\n", "", "if", "i", "in", "indSet", "or", "j", "in", "indSet", ":", "\n", "                ", "ious", "[", "i", ",", "j", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "indSet", ".", "add", "(", "i", ")", "\n", "indSet", ".", "add", "(", "j", ")", "\n", "", "", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_hj": [[467, 535], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "hm_index[].item", "list", "list.pop", "im_blob.clone", "outputs_ori[].size", "range", "outputs[].clone", "outputs[].clone", "loss.backward", "multitracker.JDETracker.forwardFeatureDet", "hm_index.size", "smoothL1", "smoothL1", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "[].sigmoid", "numpy.sign", "numpy.sign", "outputs[].view", "wh_ori.view", "outputs[].view", "reg_ori.view", "[].sigmoid", "outputs[].view", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureDet"], ["", "def", "attack_sg_hj", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "ad_bbox", ",", "\n", "track_v", "\n", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "hm_index_att", "=", "hm_index", "[", "attack_ind", "]", ".", "item", "(", ")", "\n", "index", "=", "list", "(", "range", "(", "hm_index", ".", "size", "(", "0", ")", ")", ")", "\n", "index", ".", "pop", "(", "attack_ind", ")", "\n", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "\n", "hm_index_att_lst", "=", "[", "hm_index_att", "]", "\n", "\n", "loss", "-=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "hm_index_att_lst", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "if", "ad_bbox", ":", "\n", "                ", "assert", "track_v", "is", "not", "None", "\n", "hm_index_gen", "=", "hm_index_att_lst", "[", "0", "]", "\n", "hm_index_gen", "+=", "-", "(", "np", ".", "sign", "(", "track_v", "[", "0", "]", ")", "+", "W", "*", "np", ".", "sign", "(", "track_v", "[", "1", "]", ")", ")", "\n", "loss", "-=", "(", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "[", "hm_index_gen", "]", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'wh'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "[", "hm_index_gen", "]", "]", ".", "T", ",", "\n", "wh_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_att_lst", "]", ".", "T", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'reg'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "[", "hm_index_gen", "]", "]", ".", "T", ",", "\n", "reg_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_att_lst", "]", ".", "T", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "*", "2", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "outputs", ",", "suc", ",", "_", "=", "self", ".", "forwardFeatureDet", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "[", "attack_ind", "]", ",", "\n", "thr", "=", "1", "if", "ad_bbox", "else", "0", ",", "\n", "vs", "=", "[", "track_v", "]", "if", "ad_bbox", "else", "[", "]", "\n", ")", "\n", "if", "suc", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i", ">", "60", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "noise", ",", "i", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_det": [[536, 595], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "hm_index[].item", "list", "list.pop", "im_blob.clone", "outputs_ori[].size", "range", "loss.backward", "multitracker.JDETracker.forwardFeatureDet", "hm_index.size", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "[].sigmoid", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureDet"], ["", "def", "attack_sg_det", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", "\n", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "hm_index_att", "=", "hm_index", "[", "attack_ind", "]", ".", "item", "(", ")", "\n", "index", "=", "list", "(", "range", "(", "hm_index", ".", "size", "(", "0", ")", ")", ")", "\n", "index", ".", "pop", "(", "attack_ind", ")", "\n", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "\n", "hm_index_att_lst", "=", "[", "hm_index_att", "]", "\n", "# for n_i in range(3):", "\n", "#     for n_j in range(3):", "\n", "#         hm_index_att_ = hm_index_att + (n_i - 1) * W + (n_j - 1)", "\n", "#         hm_index_att_ = max(0, min(H * W - 1, hm_index_att_))", "\n", "#         hm_index_att_lst.append(hm_index_att_)", "\n", "\n", "loss", "-=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "hm_index_att_lst", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "# loss += ((outputs['hm'].view(-1)[hm_index_att_lst].sigmoid()) ** 2 *", "\n", "#          torch.log(1 - outputs['hm'].view(-1)[hm_index_att_lst].sigmoid())).mean()", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "*", "2", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "outputs", ",", "suc", ",", "_", "=", "self", ".", "forwardFeatureDet", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "[", "attack_ind", "]", "\n", ")", "\n", "if", "suc", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i", ">", "60", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "noise", ",", "i", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_hj": [[596, 686], ["max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "hm_index[].cpu().numpy().tolist", "outputs_ori[].size", "im_blob.clone", "outputs[].clone", "outputs[].clone", "len", "loss.backward", "range", "multitracker.JDETracker.forwardFeatureDet", "hm_index[].cpu().numpy", "range", "smoothL1", "smoothL1", "len", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "attack_inds.tolist", "range", "len", "len", "len", "hm_index_gen_lst.append", "range", "hm_index[].cpu", "[].sigmoid", "len", "len", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "numpy.sign", "outputs[].view", "wh_ori.view", "outputs[].view", "reg_ori.view", "numpy.sign", "[].sigmoid", "outputs[].view", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureDet"], ["", "def", "attack_mt_hj", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_ids", ",", "\n", "attack_inds", ",", "\n", "ad_ids", ",", "\n", "track_vs", "\n", ")", ":", "\n", "        ", "img0_h", ",", "img0_w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "r_w", ",", "r_h", "=", "img0_w", "/", "W", ",", "img0_h", "/", "H", "\n", "r_max", "=", "max", "(", "r_w", ",", "r_h", ")", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "i", "=", "0", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "hm_index_att_lst", "=", "hm_index", "[", "attack_inds", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "best_i", "=", "None", "\n", "best_noise", "=", "None", "\n", "best_fail", "=", "np", ".", "inf", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "\n", "loss", "-=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "hm_index_att_lst", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "hm_index_att_lst_", "=", "[", "hm_index_att_lst", "[", "j", "]", "for", "j", "in", "range", "(", "len", "(", "hm_index_att_lst", ")", ")", "\n", "if", "attack_ids", "[", "j", "]", "not", "in", "ad_ids", "]", "\n", "\n", "if", "len", "(", "hm_index_att_lst_", ")", ":", "\n", "                ", "assert", "len", "(", "track_vs", ")", "==", "len", "(", "hm_index_att_lst_", ")", "\n", "hm_index_gen_lst", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "hm_index_att_lst_", ")", ")", ":", "\n", "                    ", "track_v", "=", "track_vs", "[", "index", "]", "\n", "hm_index_gen", "=", "hm_index_att_lst_", "[", "index", "]", "\n", "hm_index_gen", "+=", "-", "(", "np", ".", "sign", "(", "track_v", "[", "0", "]", ")", "+", "W", "*", "np", ".", "sign", "(", "track_v", "[", "1", "]", ")", ")", "\n", "hm_index_gen_lst", ".", "append", "(", "hm_index_gen", ")", "\n", "", "loss", "-=", "(", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "hm_index_gen_lst", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'wh'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_gen_lst", "]", ".", "T", ",", "\n", "wh_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_att_lst_", "]", ".", "T", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'reg'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_gen_lst", "]", ".", "T", ",", "\n", "reg_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "hm_index_att_lst_", "]", ".", "T", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "thrs", "=", "[", "0", "for", "j", "in", "range", "(", "len", "(", "attack_inds", ")", ")", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "thrs", ")", ")", ":", "\n", "                ", "if", "attack_ids", "[", "j", "]", "not", "in", "ad_ids", ":", "\n", "                    ", "thrs", "[", "j", "]", "=", "0.9", "\n", "\n", "", "", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "outputs", ",", "suc", ",", "fail_ids", "=", "self", ".", "forwardFeatureDet", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "attack_inds", ".", "tolist", "(", ")", ",", "\n", "thr", "=", "thrs", "\n", ")", "\n", "\n", "if", "fail_ids", "is", "not", "None", ":", "\n", "                ", "if", "fail_ids", "==", "0", ":", "\n", "                    ", "break", "\n", "", "elif", "fail_ids", "<=", "best_fail", ":", "\n", "                    ", "best_fail", "=", "fail_ids", "\n", "best_i", "=", "i", "\n", "best_noise", "=", "noise", ".", "clone", "(", ")", "\n", "", "", "if", "i", ">", "60", ":", "\n", "                ", "if", "self", ".", "opt", ".", "no_f_noise", ":", "\n", "                    ", "return", "None", ",", "i", ",", "False", "\n", "", "else", ":", "\n", "                    ", "if", "best_i", "is", "not", "None", ":", "\n", "                        ", "noise", "=", "best_noise", "\n", "i", "=", "best_i", "\n", "", "return", "noise", ",", "i", ",", "False", "\n", "", "", "", "return", "noise", ",", "i", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_det": [[687, 752], ["max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "hm_index[].cpu().numpy().tolist", "outputs_ori[].size", "im_blob.clone", "outputs[].clone", "outputs[].clone", "loss.backward", "multitracker.JDETracker.forwardFeatureDet", "hm_index[].cpu().numpy", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "attack_inds.tolist", "hm_index[].cpu", "[].sigmoid", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureDet"], ["", "def", "attack_mt_det", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_ids", ",", "\n", "attack_inds", "\n", ")", ":", "\n", "        ", "img0_h", ",", "img0_w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "r_w", ",", "r_h", "=", "img0_w", "/", "W", ",", "img0_h", "/", "H", "\n", "r_max", "=", "max", "(", "r_w", ",", "r_h", ")", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "i", "=", "0", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "hm_index_att_lst", "=", "hm_index", "[", "attack_inds", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "best_i", "=", "None", "\n", "best_noise", "=", "None", "\n", "best_fail", "=", "np", ".", "inf", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "\n", "loss", "-=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", "[", "hm_index_att_lst", "]", ".", "sigmoid", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "outputs", ",", "suc", ",", "fail_ids", "=", "self", ".", "forwardFeatureDet", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "attack_inds", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "if", "fail_ids", "is", "not", "None", ":", "\n", "                ", "if", "fail_ids", "==", "0", ":", "\n", "                    ", "break", "\n", "", "elif", "fail_ids", "<=", "best_fail", ":", "\n", "                    ", "best_fail", "=", "fail_ids", "\n", "best_i", "=", "i", "\n", "best_noise", "=", "noise", ".", "clone", "(", ")", "\n", "", "", "if", "i", ">", "60", ":", "\n", "                ", "if", "self", ".", "opt", ".", "no_f_noise", ":", "\n", "                    ", "return", "None", ",", "i", ",", "False", "\n", "", "else", ":", "\n", "                    ", "if", "best_i", "is", "not", "None", ":", "\n", "                        ", "noise", "=", "best_noise", "\n", "i", "=", "best_i", "\n", "", "return", "noise", ",", "i", ",", "False", "\n", "", "", "", "return", "noise", ",", "i", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_feat": [[753, 826], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "im_blob.clone", "len", "enumerate", "loss.backward", "multitracker.JDETracker.forwardFeatureSg", "range", "len", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "len", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureSg"], ["", "def", "attack_sg_feat", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", "\n", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "id_features", "[", "0", "]", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "attack_ind", ",", "target_ind", "]", "]", "\n", "\n", "", "i", "=", "0", "\n", "suc", "=", "True", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "loss_feat", "=", "0", "\n", "for", "id_i", ",", "id_feature", "in", "enumerate", "(", "id_features", ")", ":", "\n", "                ", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "not", "None", ":", "\n", "                    ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "attack_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "1", ":", "1", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "if", "last_ad_id_features", "[", "target_ind", "]", "is", "not", "None", ":", "\n", "                    ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "target_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "1", ":", "1", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "None", "and", "last_ad_id_features", "[", "target_ind", "]", "is", "None", ":", "\n", "                    ", "loss_feat", "+=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "id_feature", "[", "1", ":", "1", "+", "1", "]", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "", "", "loss", "+=", "loss_feat", "/", "len", "(", "id_features", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features_", ",", "outputs_", ",", "ae_attack_id", ",", "ae_target_id", ",", "hm_index_", "=", "self", ".", "forwardFeatureSg", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", ",", "\n", "last_info", "\n", ")", "\n", "if", "id_features_", "is", "not", "None", ":", "\n", "                ", "id_features", "=", "id_features_", "\n", "\n", "", "if", "ae_attack_id", "!=", "attack_id", "and", "ae_attack_id", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i", ">", "60", ":", "\n", "                ", "suc", "=", "False", "\n", "break", "\n", "", "", "return", "noise", ",", "i", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_cl": [[827, 986], ["max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "copy.deepcopy", "multitracker.STrack.multi_predict", "range", "hm_index[].clone", "hm_index[].clone", "outputs_ori[].size", "im_blob.clone", "outputs[].clone", "outputs[].clone", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "len", "loss.backward", "multitracker.JDETracker.forwardFeatureSg", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "hm_index[].clone", "range", "smoothL1", "smoothL1", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "len", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "len", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "att_hm_index[].item", "max", "n_att_hm_index.append", "ori_hm_index_re[].item", "max", "n_ori_hm_index_re.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "outputs[].view", "wh_ori.view", "outputs[].view", "reg_ori.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "min", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view", "outputs[].view", "outputs[].view", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureSg"], ["", "def", "attack_sg_cl", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", "\n", ")", ":", "\n", "        ", "img0_h", ",", "img0_w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "r_w", ",", "r_h", "=", "img0_w", "/", "W", ",", "img0_h", "/", "H", "\n", "r_max", "=", "max", "(", "r_w", ",", "r_h", ")", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "id_features", "[", "0", "]", ")", ")", "]", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_strack_pool'", "]", ")", "\n", "last_attack_det", "=", "None", "\n", "last_target_det", "=", "None", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "for", "strack", "in", "strack_pool", ":", "\n", "            ", "if", "strack", ".", "track_id", "==", "attack_id", ":", "\n", "                ", "last_ad_id_features", "[", "attack_ind", "]", "=", "strack", ".", "smooth_feat", "\n", "last_attack_det", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_attack_det", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_attack_det", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_attack_det", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_attack_det", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "", "elif", "strack", ".", "track_id", "==", "target_id", ":", "\n", "                ", "last_ad_id_features", "[", "target_ind", "]", "=", "strack", ".", "smooth_feat", "\n", "last_target_det", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_target_det", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_target_det", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_target_det", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_target_det", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "", "", "last_attack_det_center", "=", "torch", ".", "round", "(", "\n", "(", "last_attack_det", "[", ":", "2", "]", "+", "last_attack_det", "[", "2", ":", "]", ")", "/", "2", ")", "if", "last_attack_det", "is", "not", "None", "else", "None", "\n", "last_target_det_center", "=", "torch", ".", "round", "(", "\n", "(", "last_target_det", "[", ":", "2", "]", "+", "last_target_det", "[", "2", ":", "]", ")", "/", "2", ")", "if", "last_target_det", "is", "not", "None", "else", "None", "\n", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "attack_ind", ",", "target_ind", "]", "]", "\n", "\n", "", "i", "=", "0", "\n", "j", "=", "-", "1", "\n", "suc", "=", "True", "\n", "ori_hm_index", "=", "hm_index", "[", "[", "attack_ind", ",", "target_ind", "]", "]", ".", "clone", "(", ")", "\n", "ori_hm_index_re", "=", "hm_index", "[", "[", "target_ind", ",", "attack_ind", "]", "]", ".", "clone", "(", ")", "\n", "att_hm_index", "=", "None", "\n", "noise_0", "=", "None", "\n", "i_0", "=", "None", "\n", "noise_1", "=", "None", "\n", "i_1", "=", "None", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "loss_feat", "=", "0", "\n", "# for id_i, id_feature in enumerate(id_features):", "\n", "#     if last_ad_id_features[attack_ind] is not None:", "\n", "#         last_ad_id_feature = torch.from_numpy(last_ad_id_features[attack_ind]).unsqueeze(0).cuda()", "\n", "#         sim_1 = torch.mm(id_feature[0:0 + 1], last_ad_id_feature.T).squeeze()", "\n", "#         sim_2 = torch.mm(id_feature[1:1 + 1], last_ad_id_feature.T).squeeze()", "\n", "#         loss_feat += sim_2 - sim_1", "\n", "#     if last_ad_id_features[target_ind] is not None:", "\n", "#         last_ad_id_feature = torch.from_numpy(last_ad_id_features[target_ind]).unsqueeze(0).cuda()", "\n", "#         sim_1 = torch.mm(id_feature[1:1 + 1], last_ad_id_feature.T).squeeze()", "\n", "#         sim_2 = torch.mm(id_feature[0:0 + 1], last_ad_id_feature.T).squeeze()", "\n", "#         loss_feat += sim_2 - sim_1", "\n", "#     if last_ad_id_features[attack_ind] is None and last_ad_id_features[target_ind] is None:", "\n", "#         loss_feat += torch.mm(id_feature[0:0 + 1], id_feature[1:1 + 1].T).squeeze()", "\n", "# loss += loss_feat / len(id_features)", "\n", "\n", "if", "i", "in", "[", "1", ",", "10", ",", "20", ",", "30", ",", "35", ",", "40", ",", "45", ",", "50", ",", "55", "]", ":", "\n", "                ", "attack_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "attack_ind", "]", "%", "W", ",", "hm_index", "[", "attack_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "target_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "target_ind", "]", "%", "W", ",", "hm_index", "[", "target_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "if", "last_target_det_center", "is", "not", "None", ":", "\n", "                    ", "attack_center_delta", "=", "attack_det_center", "-", "last_target_det_center", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", ">", "1", ":", "\n", "                        ", "attack_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", "\n", "attack_det_center", "=", "torch", ".", "round", "(", "attack_det_center", "-", "attack_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "attack_ind", "]", "=", "attack_det_center", "[", "0", "]", "+", "attack_det_center", "[", "1", "]", "*", "W", "\n", "", "", "if", "last_attack_det_center", "is", "not", "None", ":", "\n", "                    ", "target_center_delta", "=", "target_det_center", "-", "last_attack_det_center", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", ">", "1", ":", "\n", "                        ", "target_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", "\n", "target_det_center", "=", "torch", ".", "round", "(", "target_det_center", "-", "target_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "target_ind", "]", "=", "target_det_center", "[", "0", "]", "+", "target_det_center", "[", "1", "]", "*", "W", "\n", "", "", "att_hm_index", "=", "hm_index", "[", "[", "attack_ind", ",", "target_ind", "]", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "att_hm_index", "is", "not", "None", ":", "\n", "                ", "n_att_hm_index", "=", "[", "]", "\n", "n_ori_hm_index_re", "=", "[", "]", "\n", "for", "hm_ind", "in", "range", "(", "len", "(", "att_hm_index", ")", ")", ":", "\n", "                    ", "for", "n_i", "in", "range", "(", "3", ")", ":", "\n", "                        ", "for", "n_j", "in", "range", "(", "3", ")", ":", "\n", "                            ", "att_hm_ind", "=", "att_hm_index", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "att_hm_ind", "=", "att_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "att_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "att_hm_ind", ")", ")", "\n", "n_att_hm_index", ".", "append", "(", "att_hm_ind", ")", "\n", "ori_hm_ind", "=", "ori_hm_index_re", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "ori_hm_ind", "=", "ori_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "ori_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "ori_hm_ind", ")", ")", "\n", "n_ori_hm_index_re", ".", "append", "(", "ori_hm_ind", ")", "\n", "# print(n_att_hm_index, n_ori_hm_index_re)", "\n", "", "", "", "loss", "+=", "(", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'wh'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index", "]", ".", "T", ",", "wh_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re", "]", ".", "T", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'reg'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index", "]", ".", "T", ",", "reg_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re", "]", ".", "T", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features_", ",", "outputs_", ",", "ae_attack_id", ",", "ae_target_id", ",", "hm_index_", "=", "self", ".", "forwardFeatureSg", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", ",", "\n", "last_info", "\n", ")", "\n", "if", "id_features_", "is", "not", "None", ":", "\n", "                ", "id_features", "=", "id_features_", "\n", "", "if", "outputs_", "is", "not", "None", ":", "\n", "                ", "outputs", "=", "outputs_", "\n", "# if hm_index_ is not None:", "\n", "#     hm_index = hm_index_", "\n", "", "if", "ae_attack_id", "!=", "attack_id", "and", "ae_attack_id", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i", ">", "60", ":", "\n", "                ", "if", "noise_0", "is", "not", "None", ":", "\n", "                    ", "return", "noise_0", ",", "i_0", ",", "suc", "\n", "", "elif", "noise_1", "is", "not", "None", ":", "\n", "                    ", "return", "noise_1", ",", "i_1", ",", "suc", "\n", "", "if", "self", ".", "opt", ".", "no_f_noise", ":", "\n", "                    ", "return", "None", ",", "i", ",", "False", "\n", "", "else", ":", "\n", "                    ", "suc", "=", "False", "\n", "break", "\n", "", "", "", "return", "noise", ",", "i", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_random": [[987, 1029], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "random.uniform", "multitracker.JDETracker.forwardFeatureSg", "im_blob.clone", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "im_blob_ori.size"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureSg"], ["", "def", "attack_sg_random", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", "\n", ")", ":", "\n", "        ", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "\n", "suc", "=", "False", "\n", "\n", "noise", "=", "torch", ".", "rand", "(", "im_blob_ori", ".", "size", "(", ")", ")", ".", "to", "(", "im_blob_ori", ".", "device", ")", "\n", "noise", "/=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "noise", "*=", "random", ".", "uniform", "(", "2", ",", "8", ")", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features_", ",", "outputs_", ",", "ae_attack_id", ",", "ae_target_id", ",", "hm_index_", "=", "self", ".", "forwardFeatureSg", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", ",", "\n", "last_info", ",", "\n", "grad", "=", "False", "\n", ")", "\n", "\n", "if", "ae_attack_id", "!=", "attack_id", "and", "ae_attack_id", "is", "not", "None", ":", "\n", "            ", "suc", "=", "True", "\n", "\n", "", "return", "noise", ",", "1", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_random": [[1030, 1071], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "random.uniform", "multitracker.JDETracker.forwardFeatureMt", "im_blob.clone", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "im_blob_ori.size"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureMt"], ["", "def", "attack_mt_random", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_ids", ",", "\n", "attack_inds", ",", "\n", "target_ids", ",", "\n", "target_inds", "\n", ")", ":", "\n", "        ", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "\n", "suc", "=", "False", "\n", "\n", "noise", "=", "torch", ".", "rand", "(", "im_blob_ori", ".", "size", "(", ")", ")", ".", "to", "(", "im_blob_ori", ".", "device", ")", "\n", "noise", "/=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "noise", "*=", "random", ".", "uniform", "(", "2", ",", "8", ")", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features", ",", "outputs", ",", "fail_ids", "=", "self", ".", "forwardFeatureMt", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_ids", ",", "\n", "attack_inds", ",", "\n", "target_ids", ",", "\n", "target_inds", ",", "\n", "last_info", ",", "\n", "grad", "=", "False", "\n", ")", "\n", "if", "fail_ids", "==", "0", ":", "\n", "            ", "suc", "=", "True", "\n", "\n", "", "return", "noise", ",", "1", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg": [[1072, 1231], ["max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "copy.deepcopy", "multitracker.STrack.multi_predict", "range", "hm_index[].clone", "hm_index[].clone", "outputs_ori[].size", "im_blob.clone", "outputs[].clone", "outputs[].clone", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "len", "enumerate", "loss.backward", "multitracker.JDETracker.forwardFeatureSg", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "len", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "hm_index[].clone", "range", "smoothL1", "smoothL1", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "len", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "len", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "att_hm_index[].item", "max", "n_att_hm_index.append", "ori_hm_index_re[].item", "max", "n_ori_hm_index_re.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "outputs[].view", "wh_ori.view", "outputs[].view", "reg_ori.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "min", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view", "outputs[].view", "outputs[].view", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureSg"], ["", "def", "attack_sg", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", "\n", ")", ":", "\n", "        ", "img0_h", ",", "img0_w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "r_w", ",", "r_h", "=", "img0_w", "/", "W", ",", "img0_h", "/", "H", "\n", "r_max", "=", "max", "(", "r_w", ",", "r_h", ")", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "id_features", "[", "0", "]", ")", ")", "]", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_strack_pool'", "]", ")", "\n", "last_attack_det", "=", "None", "\n", "last_target_det", "=", "None", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "for", "strack", "in", "strack_pool", ":", "\n", "            ", "if", "strack", ".", "track_id", "==", "attack_id", ":", "\n", "                ", "last_ad_id_features", "[", "attack_ind", "]", "=", "strack", ".", "smooth_feat", "\n", "last_attack_det", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_attack_det", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_attack_det", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_attack_det", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_attack_det", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "", "elif", "strack", ".", "track_id", "==", "target_id", ":", "\n", "                ", "last_ad_id_features", "[", "target_ind", "]", "=", "strack", ".", "smooth_feat", "\n", "last_target_det", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_target_det", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_target_det", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_target_det", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_target_det", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "", "", "last_attack_det_center", "=", "torch", ".", "round", "(", "\n", "(", "last_attack_det", "[", ":", "2", "]", "+", "last_attack_det", "[", "2", ":", "]", ")", "/", "2", ")", "if", "last_attack_det", "is", "not", "None", "else", "None", "\n", "last_target_det_center", "=", "torch", ".", "round", "(", "\n", "(", "last_target_det", "[", ":", "2", "]", "+", "last_target_det", "[", "2", ":", "]", ")", "/", "2", ")", "if", "last_target_det", "is", "not", "None", "else", "None", "\n", "\n", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "attack_ind", ",", "target_ind", "]", "]", "\n", "\n", "", "i", "=", "0", "\n", "j", "=", "-", "1", "\n", "suc", "=", "True", "\n", "ori_hm_index", "=", "hm_index", "[", "[", "attack_ind", ",", "target_ind", "]", "]", ".", "clone", "(", ")", "\n", "ori_hm_index_re", "=", "hm_index", "[", "[", "target_ind", ",", "attack_ind", "]", "]", ".", "clone", "(", ")", "\n", "att_hm_index", "=", "None", "\n", "noise_0", "=", "None", "\n", "i_0", "=", "None", "\n", "noise_1", "=", "None", "\n", "i_1", "=", "None", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "loss_feat", "=", "0", "\n", "for", "id_i", ",", "id_feature", "in", "enumerate", "(", "id_features", ")", ":", "\n", "                ", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "not", "None", ":", "\n", "                    ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "attack_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "1", ":", "1", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "if", "last_ad_id_features", "[", "target_ind", "]", "is", "not", "None", ":", "\n", "                    ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "target_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "1", ":", "1", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "None", "and", "last_ad_id_features", "[", "target_ind", "]", "is", "None", ":", "\n", "                    ", "loss_feat", "+=", "torch", ".", "mm", "(", "id_feature", "[", "0", ":", "0", "+", "1", "]", ",", "id_feature", "[", "1", ":", "1", "+", "1", "]", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "", "", "loss", "+=", "loss_feat", "/", "len", "(", "id_features", ")", "\n", "\n", "if", "i", "in", "[", "10", ",", "20", ",", "30", ",", "35", ",", "40", ",", "45", ",", "50", ",", "55", "]", ":", "\n", "                ", "attack_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "attack_ind", "]", "%", "W", ",", "hm_index", "[", "attack_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "target_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "target_ind", "]", "%", "W", ",", "hm_index", "[", "target_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "if", "last_target_det_center", "is", "not", "None", ":", "\n", "                    ", "attack_center_delta", "=", "attack_det_center", "-", "last_target_det_center", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", ">", "1", ":", "\n", "                        ", "attack_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", "\n", "attack_det_center", "=", "torch", ".", "round", "(", "attack_det_center", "-", "attack_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "attack_ind", "]", "=", "attack_det_center", "[", "0", "]", "+", "attack_det_center", "[", "1", "]", "*", "W", "\n", "", "", "if", "last_attack_det_center", "is", "not", "None", ":", "\n", "                    ", "target_center_delta", "=", "target_det_center", "-", "last_attack_det_center", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", ">", "1", ":", "\n", "                        ", "target_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", "\n", "target_det_center", "=", "torch", ".", "round", "(", "target_det_center", "-", "target_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "target_ind", "]", "=", "target_det_center", "[", "0", "]", "+", "target_det_center", "[", "1", "]", "*", "W", "\n", "", "", "att_hm_index", "=", "hm_index", "[", "[", "attack_ind", ",", "target_ind", "]", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "att_hm_index", "is", "not", "None", ":", "\n", "                ", "n_att_hm_index", "=", "[", "]", "\n", "n_ori_hm_index_re", "=", "[", "]", "\n", "for", "hm_ind", "in", "range", "(", "len", "(", "att_hm_index", ")", ")", ":", "\n", "                    ", "for", "n_i", "in", "range", "(", "3", ")", ":", "\n", "                        ", "for", "n_j", "in", "range", "(", "3", ")", ":", "\n", "                            ", "att_hm_ind", "=", "att_hm_index", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "att_hm_ind", "=", "att_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "att_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "att_hm_ind", ")", ")", "\n", "n_att_hm_index", ".", "append", "(", "att_hm_ind", ")", "\n", "ori_hm_ind", "=", "ori_hm_index_re", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "ori_hm_ind", "=", "ori_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "ori_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "ori_hm_ind", ")", ")", "\n", "n_ori_hm_index_re", ".", "append", "(", "ori_hm_ind", ")", "\n", "# print(n_att_hm_index, n_ori_hm_index_re)", "\n", "", "", "", "loss", "+=", "(", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'wh'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index", "]", ".", "T", ",", "wh_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re", "]", ".", "T", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'reg'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index", "]", ".", "T", ",", "reg_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re", "]", ".", "T", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features_", ",", "outputs_", ",", "ae_attack_id", ",", "ae_target_id", ",", "hm_index_", "=", "self", ".", "forwardFeatureSg", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_id", ",", "\n", "attack_ind", ",", "\n", "target_id", ",", "\n", "target_ind", ",", "\n", "last_info", "\n", ")", "\n", "if", "id_features_", "is", "not", "None", ":", "\n", "                ", "id_features", "=", "id_features_", "\n", "", "if", "outputs_", "is", "not", "None", ":", "\n", "                ", "outputs", "=", "outputs_", "\n", "# if hm_index_ is not None:", "\n", "#     hm_index = hm_index_", "\n", "", "if", "ae_attack_id", "!=", "attack_id", "and", "ae_attack_id", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i", ">", "60", ":", "\n", "                ", "if", "noise_0", "is", "not", "None", ":", "\n", "                    ", "return", "noise_0", ",", "i_0", ",", "suc", "\n", "", "elif", "noise_1", "is", "not", "None", ":", "\n", "                    ", "return", "noise_1", ",", "i_1", ",", "suc", "\n", "", "if", "self", ".", "opt", ".", "no_f_noise", ":", "\n", "                    ", "return", "None", ",", "i", ",", "False", "\n", "", "else", ":", "\n", "                    ", "suc", "=", "False", "\n", "break", "\n", "", "", "", "return", "noise", ",", "i", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt": [[1232, 1413], ["max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "copy.deepcopy", "multitracker.STrack.multi_predict", "range", "outputs_ori[].size", "im_blob.clone", "outputs[].clone", "outputs[].clone", "len", "len", "len", "ori_hm_index_re_lst.append", "enumerate", "len", "loss.backward", "multitracker.JDETracker.forwardFeatureMt", "range", "ad_attack_ids.index", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "ad_target_ids.index", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "last_attack_dets_center.append", "last_attack_dets_center.append", "last_target_dets_center.append", "last_target_dets_center.append", "hm_index[].clone", "enumerate", "len", "range", "smoothL1", "smoothL1", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "len", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "att_hm_index_lst.append", "len", "len", "len", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "torch.mm().squeeze", "hm_index[].clone", "len", "range", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "range", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "outputs[].view", "wh_ori.view", "outputs[].view", "reg_ori.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "[].item", "max", "n_att_hm_index_lst.append", "[].item", "max", "n_ori_hm_index_re_lst.append", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "min", "min", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "outputs[].view().sigmoid", "outputs[].view().sigmoid", "outputs[].view", "outputs[].view", "outputs[].view", "outputs[].view"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.DCNv2.dcn_v2._DCNv2Pooling.backward", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureMt"], ["", "def", "attack_mt", "(", "\n", "self", ",", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", ",", "\n", "outputs_ori", ",", "\n", "attack_ids", ",", "\n", "attack_inds", ",", "\n", "target_ids", ",", "\n", "target_inds", "\n", ")", ":", "\n", "        ", "img0_h", ",", "img0_w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "H", ",", "W", "=", "outputs_ori", "[", "'hm'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "r_w", ",", "r_h", "=", "img0_w", "/", "W", ",", "img0_h", "/", "H", "\n", "r_max", "=", "max", "(", "r_w", ",", "r_h", ")", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "im_blob", ")", "\n", "im_blob_ori", "=", "im_blob", ".", "clone", "(", ")", ".", "data", "\n", "outputs", "=", "outputs_ori", "\n", "wh_ori", "=", "outputs", "[", "'wh'", "]", ".", "clone", "(", ")", ".", "data", "\n", "reg_ori", "=", "outputs", "[", "'reg'", "]", ".", "clone", "(", ")", ".", "data", "\n", "i", "=", "0", "\n", "j", "=", "-", "1", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "id_features", "[", "0", "]", ")", ")", "]", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_strack_pool'", "]", ")", "\n", "ad_attack_ids", "=", "[", "self", ".", "multiple_ori2att", "[", "attack_id", "]", "for", "attack_id", "in", "attack_ids", "]", "\n", "ad_target_ids", "=", "[", "self", ".", "multiple_ori2att", "[", "target_id", "]", "for", "target_id", "in", "target_ids", "]", "\n", "last_attack_dets", "=", "[", "None", "]", "*", "len", "(", "ad_attack_ids", ")", "\n", "last_target_dets", "=", "[", "None", "]", "*", "len", "(", "ad_target_ids", ")", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "for", "strack", "in", "strack_pool", ":", "\n", "            ", "if", "strack", ".", "track_id", "in", "ad_attack_ids", ":", "\n", "                ", "index", "=", "ad_attack_ids", ".", "index", "(", "strack", ".", "track_id", ")", "\n", "last_ad_id_features", "[", "attack_inds", "[", "index", "]", "]", "=", "strack", ".", "smooth_feat", "\n", "last_attack_dets", "[", "index", "]", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_attack_dets", "[", "index", "]", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_attack_dets", "[", "index", "]", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_attack_dets", "[", "index", "]", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_attack_dets", "[", "index", "]", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "", "if", "strack", ".", "track_id", "in", "ad_target_ids", ":", "\n", "                ", "index", "=", "ad_target_ids", ".", "index", "(", "strack", ".", "track_id", ")", "\n", "last_ad_id_features", "[", "target_inds", "[", "index", "]", "]", "=", "strack", ".", "smooth_feat", "\n", "last_target_dets", "[", "index", "]", "=", "torch", ".", "from_numpy", "(", "strack", ".", "tlbr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "last_target_dets", "[", "index", "]", "[", "[", "0", ",", "2", "]", "]", "=", "(", "last_target_dets", "[", "index", "]", "[", "[", "0", ",", "2", "]", "]", "-", "0.5", "*", "W", "*", "(", "r_w", "-", "r_max", ")", ")", "/", "r_max", "\n", "last_target_dets", "[", "index", "]", "[", "[", "1", ",", "3", "]", "]", "=", "(", "last_target_dets", "[", "index", "]", "[", "[", "1", ",", "3", "]", "]", "-", "0.5", "*", "H", "*", "(", "r_h", "-", "r_max", ")", ")", "/", "r_max", "\n", "\n", "", "", "last_attack_dets_center", "=", "[", "]", "\n", "for", "det", "in", "last_attack_dets", ":", "\n", "            ", "if", "det", "is", "None", ":", "\n", "                ", "last_attack_dets_center", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "last_attack_dets_center", ".", "append", "(", "(", "det", "[", ":", "2", "]", "+", "det", "[", "2", ":", "]", ")", "/", "2", ")", "\n", "", "", "last_target_dets_center", "=", "[", "]", "\n", "for", "det", "in", "last_target_dets", ":", "\n", "            ", "if", "det", "is", "None", ":", "\n", "                ", "last_target_dets_center", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "last_target_dets_center", ".", "append", "(", "(", "det", "[", ":", "2", "]", "+", "det", "[", "2", ":", "]", ")", "/", "2", ")", "\n", "\n", "", "", "hm_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", "\n", "\n", "ori_hm_index_re_lst", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "len", "(", "attack_ids", ")", ")", ":", "\n", "            ", "attack_ind", "=", "attack_inds", "[", "ind", "]", "\n", "target_ind", "=", "target_inds", "[", "ind", "]", "\n", "ori_hm_index_re_lst", ".", "append", "(", "hm_index", "[", "[", "target_ind", ",", "attack_ind", "]", "]", ".", "clone", "(", ")", ")", "\n", "", "att_hm_index_lst", "=", "[", "]", "\n", "best_i", "=", "None", "\n", "best_noise", "=", "None", "\n", "best_fail", "=", "np", ".", "inf", "\n", "while", "True", ":", "\n", "            ", "i", "+=", "1", "\n", "loss", "=", "0", "\n", "loss_feat", "=", "0", "\n", "for", "index", ",", "attack_id", "in", "enumerate", "(", "attack_ids", ")", ":", "\n", "                ", "target_id", "=", "target_ids", "[", "index", "]", "\n", "attack_ind", "=", "attack_inds", "[", "index", "]", "\n", "target_ind", "=", "target_inds", "[", "index", "]", "\n", "for", "id_i", ",", "id_feature", "in", "enumerate", "(", "id_features", ")", ":", "\n", "                    ", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "not", "None", ":", "\n", "                        ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "attack_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "attack_ind", ":", "attack_ind", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "target_ind", ":", "target_ind", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "opt", ".", "hard_sample", ">", "0", ":", "\n", "                            ", "loss_feat", "+=", "torch", ".", "clamp", "(", "sim_2", "-", "sim_1", ",", "max", "=", "self", ".", "opt", ".", "hard_sample", ")", "\n", "", "else", ":", "\n", "                            ", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "", "if", "last_ad_id_features", "[", "target_ind", "]", "is", "not", "None", ":", "\n", "                        ", "last_ad_id_feature", "=", "torch", ".", "from_numpy", "(", "last_ad_id_features", "[", "target_ind", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "sim_1", "=", "torch", ".", "mm", "(", "id_feature", "[", "target_ind", ":", "target_ind", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "sim_2", "=", "torch", ".", "mm", "(", "id_feature", "[", "attack_ind", ":", "attack_ind", "+", "1", "]", ",", "last_ad_id_feature", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "opt", ".", "hard_sample", ">", "0", ":", "\n", "                            ", "loss_feat", "+=", "torch", ".", "clamp", "(", "sim_2", "-", "sim_1", ",", "max", "=", "self", ".", "opt", ".", "hard_sample", ")", "\n", "", "else", ":", "\n", "                            ", "loss_feat", "+=", "sim_2", "-", "sim_1", "\n", "", "", "if", "last_ad_id_features", "[", "attack_ind", "]", "is", "None", "and", "last_ad_id_features", "[", "target_ind", "]", "is", "None", ":", "\n", "                        ", "loss_feat", "+=", "torch", ".", "mm", "(", "id_feature", "[", "attack_ind", ":", "attack_ind", "+", "1", "]", ",", "\n", "id_feature", "[", "target_ind", ":", "target_ind", "+", "1", "]", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "", "if", "i", "in", "[", "10", ",", "20", ",", "30", ",", "35", ",", "40", ",", "45", ",", "50", ",", "55", "]", ":", "\n", "                    ", "attack_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "attack_ind", "]", "%", "W", ",", "hm_index", "[", "attack_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "target_det_center", "=", "torch", ".", "stack", "(", "[", "hm_index", "[", "target_ind", "]", "%", "W", ",", "hm_index", "[", "target_ind", "]", "//", "W", "]", ")", ".", "float", "(", ")", "\n", "if", "last_target_dets_center", "[", "index", "]", "is", "not", "None", ":", "\n", "                        ", "attack_center_delta", "=", "attack_det_center", "-", "last_target_dets_center", "[", "index", "]", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", ">", "1", ":", "\n", "                            ", "attack_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attack_center_delta", ")", ")", "\n", "attack_det_center", "=", "torch", ".", "round", "(", "attack_det_center", "-", "attack_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "attack_ind", "]", "=", "attack_det_center", "[", "0", "]", "+", "attack_det_center", "[", "1", "]", "*", "W", "\n", "", "", "if", "last_attack_dets_center", "[", "index", "]", "is", "not", "None", ":", "\n", "                        ", "target_center_delta", "=", "target_det_center", "-", "last_attack_dets_center", "[", "index", "]", "\n", "if", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", ">", "1", ":", "\n", "                            ", "target_center_delta", "/=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "target_center_delta", ")", ")", "\n", "target_det_center", "=", "torch", ".", "round", "(", "target_det_center", "-", "target_center_delta", ")", ".", "int", "(", ")", "\n", "hm_index", "[", "target_ind", "]", "=", "target_det_center", "[", "0", "]", "+", "target_det_center", "[", "1", "]", "*", "W", "\n", "", "", "if", "index", "==", "0", ":", "\n", "                        ", "att_hm_index_lst", "=", "[", "]", "\n", "", "att_hm_index_lst", ".", "append", "(", "hm_index", "[", "[", "attack_ind", ",", "target_ind", "]", "]", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "loss", "+=", "loss_feat", "/", "len", "(", "id_features", ")", "\n", "\n", "if", "len", "(", "att_hm_index_lst", ")", ":", "\n", "                ", "assert", "len", "(", "att_hm_index_lst", ")", "==", "len", "(", "ori_hm_index_re_lst", ")", "\n", "n_att_hm_index_lst", "=", "[", "]", "\n", "n_ori_hm_index_re_lst", "=", "[", "]", "\n", "for", "lst_ind", "in", "range", "(", "len", "(", "att_hm_index_lst", ")", ")", ":", "\n", "                    ", "for", "hm_ind", "in", "range", "(", "len", "(", "att_hm_index_lst", "[", "lst_ind", "]", ")", ")", ":", "\n", "                        ", "for", "n_i", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "n_j", "in", "range", "(", "3", ")", ":", "\n", "                                ", "att_hm_ind", "=", "att_hm_index_lst", "[", "lst_ind", "]", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "att_hm_ind", "=", "att_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "att_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "att_hm_ind", ")", ")", "\n", "n_att_hm_index_lst", ".", "append", "(", "att_hm_ind", ")", "\n", "ori_hm_ind", "=", "ori_hm_index_re_lst", "[", "lst_ind", "]", "[", "hm_ind", "]", ".", "item", "(", ")", "\n", "ori_hm_ind", "=", "ori_hm_ind", "+", "(", "n_i", "-", "1", ")", "*", "W", "+", "(", "n_j", "-", "1", ")", "\n", "ori_hm_ind", "=", "max", "(", "0", ",", "min", "(", "H", "*", "W", "-", "1", ",", "ori_hm_ind", ")", ")", "\n", "n_ori_hm_index_re_lst", ".", "append", "(", "ori_hm_ind", ")", "\n", "# print(n_att_hm_index, n_ori_hm_index_re)", "\n", "", "", "", "", "loss", "+=", "(", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index_lst", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_att_hm_index_lst", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "(", "(", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re_lst", "]", ")", "**", "2", "*", "\n", "torch", ".", "log", "(", "1", "-", "outputs", "[", "'hm'", "]", ".", "view", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "[", "n_ori_hm_index_re_lst", "]", ")", ")", ".", "mean", "(", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'wh'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index_lst", "]", ".", "T", ",", "wh_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re_lst", "]", ".", "T", ")", "\n", "loss", "-=", "smoothL1", "(", "outputs", "[", "'reg'", "]", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_att_hm_index_lst", "]", ".", "T", ",", "reg_ori", ".", "view", "(", "2", ",", "-", "1", ")", "[", ":", ",", "n_ori_hm_index_re_lst", "]", ".", "T", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "im_blob", ".", "grad", "\n", "grad", "/=", "(", "grad", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "+", "1e-8", "\n", "\n", "noise", "+=", "grad", "\n", "\n", "im_blob", "=", "torch", ".", "clip", "(", "im_blob_ori", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "data", "\n", "id_features", ",", "outputs", ",", "fail_ids", "=", "self", ".", "forwardFeatureMt", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "attack_ids", ",", "\n", "attack_inds", ",", "\n", "target_ids", ",", "\n", "target_inds", ",", "\n", "last_info", "\n", ")", "\n", "if", "fail_ids", "is", "not", "None", ":", "\n", "                ", "if", "fail_ids", "==", "0", ":", "\n", "                    ", "break", "\n", "", "elif", "fail_ids", "<=", "best_fail", ":", "\n", "                    ", "best_fail", "=", "fail_ids", "\n", "best_i", "=", "i", "\n", "best_noise", "=", "noise", ".", "clone", "(", ")", "\n", "", "", "if", "i", ">", "60", ":", "\n", "                ", "if", "self", ".", "opt", ".", "no_f_noise", ":", "\n", "                    ", "return", "None", ",", "i", ",", "False", "\n", "", "else", ":", "\n", "                    ", "if", "best_i", "is", "not", "None", ":", "\n", "                        ", "noise", "=", "best_noise", "\n", "i", "=", "best_i", "\n", "", "return", "noise", ",", "i", ",", "False", "\n", "", "", "", "return", "noise", ",", "i", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureDet": [[1414, 1460], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "models.decode.mot_decode", "multitracker.JDETracker.post_process", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "max", "multitracker.JDETracker.model", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "isinstance", "len", "range", "len", "float", "float", "len", "attack_inds.index"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs"], ["", "def", "forwardFeatureDet", "(", "self", ",", "im_blob", ",", "img0", ",", "dets_", ",", "attack_inds", ",", "thr", "=", "0", ",", "vs", "=", "[", "]", ")", ":", "\n", "        ", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "\n", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets_", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "row_inds", ",", "col_inds", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "\n", "if", "not", "isinstance", "(", "thr", ",", "list", ")", ":", "\n", "            ", "thr", "=", "[", "thr", "for", "_", "in", "range", "(", "len", "(", "attack_inds", ")", ")", "]", "\n", "", "fail_n", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "row_inds", ")", ")", ":", "\n", "            ", "if", "row_inds", "[", "i", "]", "in", "attack_inds", ":", "\n", "                ", "if", "ious", "[", "row_inds", "[", "i", "]", ",", "col_inds", "[", "i", "]", "]", ">", "thr", "[", "attack_inds", ".", "index", "(", "row_inds", "[", "i", "]", ")", "]", ":", "\n", "                    ", "fail_n", "+=", "1", "\n", "", "elif", "len", "(", "vs", ")", ":", "\n", "                    ", "d_o", "=", "dets_", "[", "row_inds", "[", "i", "]", ",", ":", "4", "]", "\n", "d_a", "=", "dets", "[", "col_inds", "[", "i", "]", ",", ":", "4", "]", "\n", "c_o", "=", "(", "d_o", "[", "[", "0", ",", "1", "]", "]", "+", "d_o", "[", "[", "2", ",", "3", "]", "]", ")", "/", "2", "\n", "c_a", "=", "(", "d_a", "[", "[", "0", ",", "1", "]", "]", "+", "d_a", "[", "[", "2", ",", "3", "]", "]", ")", "/", "2", "\n", "c_d", "=", "(", "(", "c_a", "-", "c_o", ")", "/", "4", ")", ".", "astype", "(", "np", ".", "int", ")", "*", "vs", "[", "0", "]", "\n", "if", "c_d", "[", "0", "]", ">=", "0", "or", "c_d", "[", "1", "]", ">=", "0", ":", "\n", "                        ", "fail_n", "+=", "1", "\n", "", "", "", "", "return", "output", ",", "fail_n", "==", "0", ",", "fail_n", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureSg": [[1462, 1631], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "multitracker.JDETracker.post_process", "scipy.optimize.linear_sum_assignment", "range", "range", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "enumerate", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "enumerate", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "max", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "cython_bbox.bbox_overlaps", "cython_bbox.bbox_overlaps", "range", "len", "range", "len", "len", "multitracker.JDETracker.model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "len", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "multitracker.STrack", "multitracker.JDETracker.model", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "pdb.set_trace", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand"], ["", "def", "forwardFeatureSg", "(", "self", ",", "im_blob", ",", "img0", ",", "dets_", ",", "inds_", ",", "remain_inds_", ",", "attack_id", ",", "attack_ind", ",", "target_id", ",", "target_ind", ",", "\n", "last_info", ",", "grad", "=", "True", ")", ":", "\n", "        ", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "if", "grad", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "", "", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "\n", "if", "target_ind", "is", "None", ":", "\n", "            ", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets_", "[", "[", "attack_ind", "]", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets_", "[", "[", "attack_ind", ",", "target_ind", "]", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "# det_ind = np.argmax(ious, axis=1)", "\n", "", "row_inds", ",", "col_inds", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "\n", "match", "=", "True", "\n", "if", "target_ind", "is", "None", ":", "\n", "            ", "if", "ious", "[", "row_inds", "[", "0", "]", ",", "col_inds", "[", "0", "]", "]", "<", "0.8", ":", "\n", "                ", "dets", "=", "dets_", "\n", "inds", "=", "inds_", "\n", "remain_inds", "=", "remain_inds_", "\n", "match", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "col_inds", ")", "<", "2", "or", "ious", "[", "row_inds", "[", "0", "]", ",", "col_inds", "[", "0", "]", "]", "<", "0.6", "or", "ious", "[", "row_inds", "[", "1", "]", ",", "col_inds", "[", "1", "]", "]", "<", "0.6", ":", "\n", "                ", "dets", "=", "dets_", "\n", "inds", "=", "inds_", "\n", "remain_inds", "=", "remain_inds_", "\n", "match", "=", "False", "\n", "# assert match", "\n", "", "", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "ae_attack_id", "=", "None", "\n", "ae_target_id", "=", "None", "\n", "\n", "if", "not", "match", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "                ", "if", "target_ind", "is", "not", "None", ":", "\n", "                    ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "attack_ind", ",", "target_ind", "]", "]", "\n", "", "else", ":", "\n", "                    ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "attack_ind", "]", "]", "\n", "", "", "return", "id_features", ",", "output", ",", "ae_attack_id", ",", "ae_target_id", ",", "None", "\n", "\n", "", "if", "row_inds", "[", "0", "]", "==", "0", ":", "\n", "            ", "ae_attack_ind", "=", "col_inds", "[", "0", "]", "\n", "ae_target_ind", "=", "col_inds", "[", "1", "]", "if", "target_ind", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "ae_attack_ind", "=", "col_inds", "[", "1", "]", "\n", "ae_target_ind", "=", "col_inds", "[", "0", "]", "if", "target_ind", "is", "not", "None", "else", "None", "\n", "# ae_attack_ind = det_ind[0]", "\n", "# ae_target_ind = det_ind[1] if target_ind is not None else None", "\n", "\n", "", "hm_index", "=", "None", "\n", "# if target_ind is not None:", "\n", "#     hm_index[[attack_ind, target_ind]] = hm_index[[ae_attack_ind, ae_target_ind]]", "\n", "\n", "id_features_", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "id_features", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "if", "target_ind", "is", "None", ":", "\n", "                ", "id_features_", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "ae_attack_ind", "]", "]", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "id_features_", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "[", "ae_attack_ind", ",", "ae_target_ind", "]", "]", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "unconfirmed", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_unconfirmed'", "]", ")", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_strack_pool'", "]", ")", "\n", "kalman_filter", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'kalman_filter'", "]", ")", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "kalman_filter", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "idet", "==", "ae_attack_ind", ":", "\n", "                ", "ae_attack_id", "=", "track", ".", "track_id", "\n", "", "elif", "idet", "==", "ae_target_ind", ":", "\n", "                ", "ae_target_id", "=", "track", ".", "track_id", "\n", "\n", "# if ae_attack_id is not None and ae_target_id is not None:", "\n", "#     return id_features_, output, ae_attack_id, ae_target_id", "\n", "\n", "", "", "''' Step 3: Second association, with IOU'''", "\n", "for", "i", ",", "idet", "in", "enumerate", "(", "u_detection", ")", ":", "\n", "            ", "if", "idet", "==", "ae_attack_ind", ":", "\n", "                ", "ae_attack_ind", "=", "i", "\n", "", "elif", "idet", "==", "ae_target_ind", ":", "\n", "                ", "ae_target_ind", "=", "i", "\n", "", "", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "idet", "==", "ae_attack_ind", ":", "\n", "                ", "ae_attack_id", "=", "track", ".", "track_id", "\n", "", "elif", "idet", "==", "ae_target_ind", ":", "\n", "                ", "ae_target_id", "=", "track", ".", "track_id", "\n", "\n", "# if ae_attack_id is not None and ae_target_id is not None:", "\n", "#     return id_features_, output, ae_attack_id, ae_target_id", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "for", "i", ",", "idet", "in", "enumerate", "(", "u_detection", ")", ":", "\n", "            ", "if", "idet", "==", "ae_attack_ind", ":", "\n", "                ", "ae_attack_ind", "=", "i", "\n", "", "elif", "idet", "==", "ae_target_ind", ":", "\n", "                ", "ae_target_ind", "=", "i", "\n", "", "", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "itracked", "]", "\n", "if", "idet", "==", "ae_attack_ind", ":", "\n", "                ", "ae_attack_id", "=", "track", ".", "track_id", "\n", "", "elif", "idet", "==", "ae_target_ind", ":", "\n", "                ", "ae_target_id", "=", "track", ".", "track_id", "\n", "\n", "", "", "return", "id_features_", ",", "output", ",", "ae_attack_id", ",", "ae_target_id", ",", "hm_index", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.forwardFeatureMt": [[1632, 1786], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "multitracker.JDETracker.post_process", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "range", "range", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "max", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "enumerate", "enumerate", "range", "len", "len", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "len", "multitracker.JDETracker.model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "row_inds.tolist().index", "row_inds.tolist().index", "row_inds.tolist().index", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "multitracker.STrack", "ae_attack_inds.index", "ae_attack_inds.index", "ae_attack_inds.index", "multitracker.JDETracker.model", "len", "ae_attack_inds.append", "attack_inds.tolist().index", "ae_attack_ids.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "float", "float", "row_inds.tolist", "row_inds.tolist", "row_inds.tolist", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "attack_inds.tolist", "len", "id_features[].size"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand"], ["", "def", "forwardFeatureMt", "(", "self", ",", "im_blob", ",", "img0", ",", "dets_", ",", "inds_", ",", "remain_inds_", ",", "attack_ids", ",", "attack_inds", ",", "target_ids", ",", "\n", "target_inds", ",", "last_info", ",", "grad", "=", "True", ")", ":", "\n", "        ", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "if", "grad", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "", "", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "\n", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets_", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "row_inds", ",", "col_inds", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "\n", "match", "=", "True", "\n", "\n", "if", "target_inds", "is", "not", "None", ":", "\n", "            ", "for", "index", ",", "attack_ind", "in", "enumerate", "(", "attack_inds", ")", ":", "\n", "                ", "target_ind", "=", "target_inds", "[", "index", "]", "\n", "if", "attack_ind", "not", "in", "row_inds", "or", "target_ind", "not", "in", "row_inds", ":", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "", "att_index", "=", "row_inds", ".", "tolist", "(", ")", ".", "index", "(", "attack_ind", ")", "\n", "tar_index", "=", "row_inds", ".", "tolist", "(", ")", ".", "index", "(", "target_ind", ")", "\n", "if", "ious", "[", "attack_ind", ",", "col_inds", "[", "att_index", "]", "]", "<", "0.6", "or", "ious", "[", "target_ind", ",", "col_inds", "[", "tar_index", "]", "]", "<", "0.6", ":", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "", "", "", "else", ":", "\n", "            ", "for", "index", ",", "attack_ind", "in", "enumerate", "(", "attack_inds", ")", ":", "\n", "                ", "if", "attack_ind", "not", "in", "row_inds", ":", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "", "att_index", "=", "row_inds", ".", "tolist", "(", ")", ".", "index", "(", "attack_ind", ")", "\n", "if", "ious", "[", "attack_ind", ",", "col_inds", "[", "att_index", "]", "]", "<", "0.8", ":", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "\n", "", "", "", "if", "not", "match", ":", "\n", "            ", "dets", "=", "dets_", "\n", "inds", "=", "inds_", "\n", "remain_inds", "=", "remain_inds_", "\n", "# assert match", "\n", "", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "fail_ids", "=", "0", "\n", "\n", "if", "not", "match", ":", "\n", "            ", "return", "id_features", ",", "output", ",", "None", "\n", "\n", "", "ae_attack_inds", "=", "[", "]", "\n", "ae_attack_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "row_inds", ")", ")", ":", "\n", "            ", "if", "ious", "[", "row_inds", "[", "i", "]", ",", "col_inds", "[", "i", "]", "]", ">", "0.6", ":", "\n", "                ", "if", "row_inds", "[", "i", "]", "in", "attack_inds", ":", "\n", "                    ", "ae_attack_inds", ".", "append", "(", "col_inds", "[", "i", "]", ")", "\n", "index", "=", "attack_inds", ".", "tolist", "(", ")", ".", "index", "(", "row_inds", "[", "i", "]", ")", "\n", "ae_attack_ids", ".", "append", "(", "self", ".", "multiple_ori2att", "[", "attack_ids", "[", "index", "]", "]", ")", "\n", "\n", "# ae_attack_inds = [col_inds[row_inds == attack_ind] for attack_ind in attack_inds]", "\n", "\n", "# ae_attack_inds = np.concatenate(ae_attack_inds)", "\n", "\n", "", "", "", "id_features_", "=", "[", "torch", ".", "zeros", "(", "[", "len", "(", "dets_", ")", ",", "id_features", "[", "0", "]", ".", "size", "(", "1", ")", "]", ")", ".", "to", "(", "id_features", "[", "0", "]", ".", "device", ")", "for", "_", "in", "range", "(", "len", "(", "id_features", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "id_features_", "[", "i", "]", "[", "row_inds", "]", "=", "id_features", "[", "i", "]", "[", "col_inds", "]", "\n", "\n", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "unconfirmed", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_unconfirmed'", "]", ")", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'last_strack_pool'", "]", ")", "\n", "kalman_filter", "=", "copy", ".", "deepcopy", "(", "last_info", "[", "'kalman_filter'", "]", ")", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "kalman_filter", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "dets_index", "[", "idet", "]", "in", "ae_attack_inds", ":", "\n", "                ", "index", "=", "ae_attack_inds", ".", "index", "(", "dets_index", "[", "idet", "]", ")", "\n", "if", "track", ".", "track_id", "==", "ae_attack_ids", "[", "index", "]", ":", "\n", "                    ", "fail_ids", "+=", "1", "\n", "\n", "", "", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "dets_index", "[", "idet", "]", "in", "ae_attack_inds", ":", "\n", "                ", "index", "=", "ae_attack_inds", ".", "index", "(", "dets_index", "[", "idet", "]", ")", "\n", "if", "track", ".", "track_id", "==", "ae_attack_ids", "[", "index", "]", ":", "\n", "                    ", "fail_ids", "+=", "1", "\n", "\n", "", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "itracked", "]", "\n", "if", "dets_index", "[", "idet", "]", "in", "ae_attack_inds", ":", "\n", "                ", "index", "=", "ae_attack_inds", ".", "index", "(", "dets_index", "[", "idet", "]", ")", "\n", "if", "track", ".", "track_id", "==", "ae_attack_ids", "[", "index", "]", ":", "\n", "                    ", "fail_ids", "+=", "1", "\n", "\n", "", "", "", "return", "id_features_", ",", "output", ",", "fail_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit": [[1787, 1859], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "numpy.array", "numpy.array", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "numpy.array.astype", "numpy.array.astype", "len", "multitracker.STrack", "ad_attack_dets.append", "ad_attack_ids.append", "ad_attack_dets.append", "ad_attack_ids.append", "ad_attack_dets.append", "ad_attack_ids.append", "multitracker.STrack.tlbr_to_tlwh", "zip", "attack_index.append", "attack_index.append"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh"], ["", "def", "CheckFit", "(", "self", ",", "dets", ",", "id_feature", ",", "attack_ids", ",", "attack_inds", ")", ":", "\n", "        ", "ad_attack_ids_", "=", "[", "self", ".", "multiple_ori2att", "[", "attack_id", "]", "for", "attack_id", "in", "attack_ids", "]", "if", "self", ".", "opt", ".", "attack", "==", "'multiple'", "else", "attack_ids", "\n", "attack_dets", "=", "dets", "[", "attack_inds", ",", ":", "4", "]", "\n", "ad_attack_dets", "=", "[", "]", "\n", "ad_attack_ids", "=", "[", "]", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "unconfirmed", "=", "copy", ".", "deepcopy", "(", "self", ".", "ad_last_info", "[", "'last_unconfirmed'", "]", ")", "\n", "strack_pool", "=", "copy", ".", "deepcopy", "(", "self", ".", "ad_last_info", "[", "'last_strack_pool'", "]", ")", "\n", "kalman_filter", "=", "copy", ".", "deepcopy", "(", "self", ".", "ad_last_info", "[", "'kalman_filter'", "]", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "kalman_filter", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "track_id", "in", "ad_attack_ids_", ":", "\n", "                ", "ad_attack_dets", ".", "append", "(", "det", ".", "tlbr", ")", "\n", "ad_attack_ids", ".", "append", "(", "track", ".", "track_id", ")", "\n", "\n", "", "", "''' Step 3: Second association, with IOU'''", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "track_id", "in", "ad_attack_ids_", ":", "\n", "                ", "ad_attack_dets", ".", "append", "(", "det", ".", "tlbr", ")", "\n", "ad_attack_ids", ".", "append", "(", "track", ".", "track_id", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "track_id", "in", "ad_attack_ids_", ":", "\n", "                ", "ad_attack_dets", ".", "append", "(", "det", ".", "tlbr", ")", "\n", "ad_attack_ids", ".", "append", "(", "track", ".", "track_id", ")", "\n", "\n", "", "", "if", "len", "(", "ad_attack_dets", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "ori_dets", "=", "np", ".", "array", "(", "attack_dets", ")", "\n", "ad_dets", "=", "np", ".", "array", "(", "ad_attack_dets", ")", "\n", "\n", "ious", "=", "bbox_ious", "(", "ori_dets", ".", "astype", "(", "np", ".", "float64", ")", ",", "ad_dets", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "\n", "attack_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "row_ind", ")", ")", ":", "\n", "            ", "if", "self", ".", "opt", ".", "attack", "==", "'multiple'", ":", "\n", "                ", "if", "ious", "[", "row_ind", "[", "i", "]", ",", "col_ind", "[", "i", "]", "]", ">", "0.9", "and", "self", ".", "multiple_ori2att", "[", "attack_ids", "[", "row_ind", "[", "i", "]", "]", "]", "==", "ad_attack_ids", "[", "col_ind", "[", "i", "]", "]", ":", "\n", "                    ", "attack_index", ".", "append", "(", "row_ind", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "ious", "[", "row_ind", "[", "i", "]", ",", "col_ind", "[", "i", "]", "]", ">", "0.9", ":", "\n", "                    ", "attack_index", ".", "append", "(", "row_ind", "[", "i", "]", ")", "\n", "\n", "", "", "", "return", "attack_index", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg": [[1860, 2148], ["kwargs.get().get", "kwargs.get().get", "numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "enumerate", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "kwargs.get", "kwargs.get", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "multitracker.JDETracker.CheckFit", "cython_bbox.bbox_overlaps", "multitracker.bbox_dis", "numpy.argmax", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.min", "numpy.max", "numpy.min", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "hasattr", "setattr", "getattr", "setattr", "numpy.argmin", "range", "range", "range", "range", "multitracker.JDETracker.attack_sg_random", "multitracker.JDETracker.attack_sg", "print", "print", "getattr", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_random", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg"], ["", "def", "update_attack_sg", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "attack_id", "=", "kwargs", "[", "'attack_id'", "]", "\n", "self_track_id_ori", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'origin'", ",", "None", ")", "\n", "self_track_id_att", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'attack'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "# dists = matching.gate_cost_matrix(self.kalman_filter, dists, strack_pool, detections)", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ",", "track_id", "=", "self_track_id_ori", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "noise", "=", "None", "\n", "suc", "=", "0", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "            ", "if", "track_id", "==", "attack_id", ":", "\n", "                ", "if", "self", ".", "opt", ".", "attack_id", ">", "0", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "f'frames_{attack_id}'", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "0", ")", "\n", "", "if", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "<", "self", ".", "FRAME_THR", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "+", "1", ")", "\n", "break", "\n", "", "", "fit", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "[", "attack_id", "]", ",", "[", "attack_ind", "]", ")", "\n", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "target_ind", "=", "np", ".", "argmax", "(", "ious", "[", "attack_ind", "]", ")", "\n", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", ">=", "self", ".", "attack_iou_thr", ":", "\n", "                    ", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "target_ind", "=", "np", ".", "argmin", "(", "dis", "[", "attack_ind", "]", ")", "\n", "", "target_id", "=", "dets_ids", "[", "target_ind", "]", "\n", "if", "fit", ":", "\n", "                        ", "if", "self", ".", "opt", ".", "rand", ":", "\n", "                            ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg_random", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", ",", "\n", "target_id", "=", "target_id", ",", "\n", "target_ind", "=", "target_ind", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", ",", "\n", "target_id", "=", "target_id", ",", "\n", "target_ind", "=", "target_ind", "\n", ")", "\n", "", "self", ".", "attack_iou_thr", "=", "0", "\n", "if", "suc", ":", "\n", "                            ", "suc", "=", "1", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                            ", "suc", "=", "2", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item() if noise is not None else None}\\titeration: {attack_iter}'", ")", "\n", "", "", "else", ":", "\n", "                        ", "suc", "=", "3", "\n", "", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "self", ".", "temp_i", "+=", "1", "\n", "if", "self", ".", "temp_i", ">=", "10", ":", "\n", "                            ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "temp_i", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "if", "fit", ":", "\n", "                        ", "suc", "=", "2", "\n", "\n", "", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "# adImg = np.clip(img0 + noise, a_min=0, a_max=255)", "\n", "\n", "# noise = adImg - img0", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ",", "track_id", "=", "self_track_id_att", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt": [[2149, 2475], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "set", "range", "enumerate", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "enumerate", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "len", "len", "cython_bbox.bbox_overlaps", "numpy.argmax", "multitracker.bbox_dis", "numpy.argmin", "enumerate", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "len", "len", "numpy.stack().astype", "numpy.stack().astype", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "output_stracks_ori_ind.append", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "multitracker.JDETracker.CheckFit", "multitracker.JDETracker.low_iou_ids.update", "output_stracks_att_ind.append", "len", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "hasattr", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "multitracker.JDETracker.attack_mt_random", "multitracker.JDETracker.attack_mt", "set", "multitracker.JDETracker.attacked_ids.update", "print", "print", "numpy.min", "numpy.max", "numpy.min", "enumerate", "enumerate", "numpy.stack", "numpy.stack", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "range", "range", "range", "range", "multitracker.JDETracker.__setattr__", "hasattr", "set", "len", "len", "len", "len", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__getattribute__", "multitracker.JDETracker.low_iou_ids.remove", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "multitracker.JDETracker.__getattribute__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_random", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand"], ["", "def", "update_attack_mt", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "id_set", "=", "set", "(", "[", "track", ".", "track_id", "for", "track", "in", "output_stracks_ori", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dets_ids", ")", ")", ":", "\n", "            ", "if", "dets_ids", "[", "i", "]", "is", "not", "None", "and", "dets_ids", "[", "i", "]", "not", "in", "id_set", ":", "\n", "                ", "dets_ids", "[", "i", "]", "=", "None", "\n", "\n", "", "", "output_stracks_ori_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_ori_ids", ":", "\n", "                ", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_ori_ind", ".", "append", "(", "ind", ")", "\n", "\n", "", "", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "attack_ids", "=", "[", "]", "\n", "target_ids", "=", "[", "]", "\n", "attack_inds", "=", "[", "]", "\n", "target_inds", "=", "[", "]", "\n", "\n", "noise", "=", "None", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "ious_inds", "=", "np", ".", "argmax", "(", "ious", ",", "axis", "=", "1", ")", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "dis_inds", "=", "np", ".", "argmin", "(", "dis", ",", "axis", "=", "1", ")", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "                ", "if", "track_id", "is", "None", "or", "self", ".", "multiple_ori_ids", "[", "track_id", "]", "<=", "self", ".", "FRAME_THR", "or", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", "not", "in", "self", ".", "multiple_ori2att", "or", "track_id", "not", "in", "self", ".", "multiple_ori2att", ":", "\n", "                    ", "continue", "\n", "", "if", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "self", ".", "ATTACK_IOU_THR", "or", "(", "\n", "track_id", "in", "self", ".", "low_iou_ids", "and", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "0", "\n", ")", ":", "\n", "                    ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "ious_inds", "[", "attack_ind", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "0", ")", "\n", "", "", "elif", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", "==", "0", "and", "track_id", "in", "self", ".", "low_iou_ids", ":", "\n", "                    ", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "1", ")", "\n", "", "if", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", ">", "10", ":", "\n", "                        ", "self", ".", "low_iou_ids", ".", "remove", "(", "track_id", ")", "\n", "", "elif", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", "in", "self", ".", "multiple_ori2att", ":", "\n", "                        ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "dis_inds", "[", "attack_ind", "]", ")", "\n", "", "", "", "fit_index", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "attack_ids", ",", "attack_inds", ")", "if", "len", "(", "attack_ids", ")", "else", "[", "]", "\n", "if", "fit_index", ":", "\n", "                ", "attack_ids", "=", "np", ".", "array", "(", "attack_ids", ")", "[", "fit_index", "]", "\n", "target_ids", "=", "np", ".", "array", "(", "target_ids", ")", "[", "fit_index", "]", "\n", "attack_inds", "=", "np", ".", "array", "(", "attack_inds", ")", "[", "fit_index", "]", "\n", "target_inds", "=", "np", ".", "array", "(", "target_inds", ")", "[", "fit_index", "]", "\n", "\n", "if", "self", ".", "opt", ".", "rand", ":", "\n", "                    ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_mt_random", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_ids", "=", "attack_ids", ",", "\n", "attack_inds", "=", "attack_inds", ",", "\n", "target_ids", "=", "target_ids", ",", "\n", "target_inds", "=", "target_inds", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_mt", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_ids", "=", "attack_ids", ",", "\n", "attack_inds", "=", "attack_inds", ",", "\n", "target_ids", "=", "target_ids", ",", "\n", "target_inds", "=", "target_inds", "\n", ")", "\n", "", "self", ".", "low_iou_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "if", "suc", ":", "\n", "                    ", "self", ".", "attacked_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "print", "(", "\n", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item() if noise is not None else None}\\titeration: {attack_iter}'", ")", "\n", "\n", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "\n", "output_stracks_att_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_att_ids", ":", "\n", "                ", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_att_ind", ".", "append", "(", "ind", ")", "\n", "", "", "if", "len", "(", "output_stracks_ori_ind", ")", "and", "len", "(", "output_stracks_att_ind", ")", ":", "\n", "            ", "ori_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", "if", "i", "in", "output_stracks_ori_ind", "]", "\n", "att_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", "if", "i", "in", "output_stracks_att_ind", "]", "\n", "ori_dets", "=", "np", ".", "stack", "(", "ori_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "att_dets", "=", "np", ".", "stack", "(", "att_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "ious", "=", "bbox_ious", "(", "ori_dets", ",", "att_dets", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "row_ind", ")", ")", ":", "\n", "                ", "if", "ious", "[", "row_ind", "[", "i", "]", ",", "col_ind", "[", "i", "]", "]", ">", "0.9", ":", "\n", "                    ", "ori_id", "=", "output_stracks_ori", "[", "output_stracks_ori_ind", "[", "row_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "att_id", "=", "output_stracks_att", "[", "output_stracks_att_ind", "[", "col_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "self", ".", "multiple_ori2att", "[", "ori_id", "]", "=", "att_id", "\n", "", "", "", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_feat": [[2476, 2745], ["kwargs.get().get", "kwargs.get().get", "numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "enumerate", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "kwargs.get", "kwargs.get", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "multitracker.JDETracker.CheckFit", "cython_bbox.bbox_overlaps", "multitracker.bbox_dis", "numpy.argmax", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.min", "numpy.max", "numpy.min", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "hasattr", "setattr", "getattr", "setattr", "numpy.argmin", "multitracker.JDETracker.attack_sg_feat", "range", "range", "range", "range", "print", "print", "getattr", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_feat"], ["", "def", "update_attack_sg_feat", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "attack_id", "=", "kwargs", "[", "'attack_id'", "]", "\n", "self_track_id_ori", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'origin'", ",", "None", ")", "\n", "self_track_id_att", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'attack'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "# dists = matching.gate_cost_matrix(self.kalman_filter, dists, strack_pool, detections)", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ",", "track_id", "=", "self_track_id_ori", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "noise", "=", "None", "\n", "suc", "=", "0", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "            ", "if", "track_id", "==", "attack_id", ":", "\n", "                ", "if", "self", ".", "opt", ".", "attack_id", ">", "0", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "f'frames_{attack_id}'", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "0", ")", "\n", "", "if", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "<", "self", ".", "FRAME_THR", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "+", "1", ")", "\n", "break", "\n", "", "", "fit", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "[", "attack_id", "]", ",", "[", "attack_ind", "]", ")", "\n", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "target_ind", "=", "np", ".", "argmax", "(", "ious", "[", "attack_ind", "]", ")", "\n", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", ">=", "self", ".", "attack_iou_thr", ":", "\n", "                    ", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "target_ind", "=", "np", ".", "argmin", "(", "dis", "[", "attack_ind", "]", ")", "\n", "", "target_id", "=", "dets_ids", "[", "target_ind", "]", "\n", "if", "fit", ":", "\n", "                        ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg_feat", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", ",", "\n", "target_id", "=", "target_id", ",", "\n", "target_ind", "=", "target_ind", "\n", ")", "\n", "self", ".", "attack_iou_thr", "=", "0", "\n", "if", "suc", ":", "\n", "                            ", "suc", "=", "1", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                            ", "suc", "=", "2", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "", "else", ":", "\n", "                        ", "suc", "=", "3", "\n", "", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "self", ".", "temp_i", "+=", "1", "\n", "if", "self", ".", "temp_i", ">=", "10", ":", "\n", "                            ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "temp_i", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "if", "fit", ":", "\n", "                        ", "suc", "=", "2", "\n", "\n", "", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ",", "track_id", "=", "self_track_id_att", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_cl": [[2746, 3018], ["kwargs.get().get", "kwargs.get().get", "numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "enumerate", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "kwargs.get", "kwargs.get", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "multitracker.JDETracker.CheckFit", "cython_bbox.bbox_overlaps", "multitracker.bbox_dis", "numpy.argmax", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.min", "numpy.max", "numpy.min", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "hasattr", "setattr", "getattr", "setattr", "numpy.argmin", "multitracker.JDETracker.attack_sg_cl", "range", "range", "range", "range", "print", "print", "getattr", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_cl"], ["", "def", "update_attack_sg_cl", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "attack_id", "=", "kwargs", "[", "'attack_id'", "]", "\n", "self_track_id_ori", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'origin'", ",", "None", ")", "\n", "self_track_id_att", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'attack'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "# dists = matching.gate_cost_matrix(self.kalman_filter, dists, strack_pool, detections)", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ",", "track_id", "=", "self_track_id_ori", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "noise", "=", "None", "\n", "suc", "=", "0", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "            ", "if", "track_id", "==", "attack_id", ":", "\n", "                ", "if", "self", ".", "opt", ".", "attack_id", ">", "0", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "f'frames_{attack_id}'", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "0", ")", "\n", "", "if", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "<", "self", ".", "FRAME_THR", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "+", "1", ")", "\n", "break", "\n", "", "", "fit", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "[", "attack_id", "]", ",", "[", "attack_ind", "]", ")", "\n", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "target_ind", "=", "np", ".", "argmax", "(", "ious", "[", "attack_ind", "]", ")", "\n", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", ">=", "self", ".", "attack_iou_thr", ":", "\n", "                    ", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "target_ind", "=", "np", ".", "argmin", "(", "dis", "[", "attack_ind", "]", ")", "\n", "", "target_id", "=", "dets_ids", "[", "target_ind", "]", "\n", "if", "fit", ":", "\n", "                        ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg_cl", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "id_features", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", ",", "\n", "target_id", "=", "target_id", ",", "\n", "target_ind", "=", "target_ind", "\n", ")", "\n", "self", ".", "attack_iou_thr", "=", "0", "\n", "if", "suc", ":", "\n", "                            ", "suc", "=", "1", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                            ", "suc", "=", "2", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item() if noise is not None else None}\\titeration: {attack_iter}'", ")", "\n", "", "", "else", ":", "\n", "                        ", "suc", "=", "3", "\n", "", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "self", ".", "temp_i", "+=", "1", "\n", "if", "self", ".", "temp_i", ">=", "10", ":", "\n", "                            ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "temp_i", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "if", "fit", ":", "\n", "                        ", "suc", "=", "2", "\n", "\n", "", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "# adImg = np.clip(img0 + noise, a_min=0, a_max=255)", "\n", "\n", "# noise = adImg - img0", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ",", "track_id", "=", "self_track_id_att", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_det": [[3019, 3279], ["kwargs.get().get", "kwargs.get().get", "numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "enumerate", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "kwargs.get", "kwargs.get", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "cython_bbox.bbox_overlaps", "multitracker.JDETracker.processIoUs", "numpy.argmax", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "multitracker.JDETracker.CheckFit", "numpy.min", "numpy.max", "numpy.min", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "hasattr", "setattr", "getattr", "setattr", "multitracker.JDETracker.attack_sg_det", "print", "print", "getattr"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.processIoUs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_det"], ["", "def", "update_attack_sg_det", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "attack_id", "=", "kwargs", "[", "'attack_id'", "]", "\n", "self_track_id_ori", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'origin'", ",", "None", ")", "\n", "self_track_id_att", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'attack'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "# dists = matching.gate_cost_matrix(self.kalman_filter, dists, strack_pool, detections)", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ",", "track_id", "=", "self_track_id_ori", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "noise", "=", "None", "\n", "suc", "=", "0", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "            ", "if", "track_id", "==", "attack_id", ":", "\n", "                ", "if", "self", ".", "opt", ".", "attack_id", ">", "0", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "f'frames_{attack_id}'", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "0", ")", "\n", "", "if", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "<", "self", ".", "FRAME_THR", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "+", "1", ")", "\n", "break", "\n", "", "", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "ious", "=", "self", ".", "processIoUs", "(", "ious", ")", "\n", "ious", "=", "ious", "+", "ious", ".", "T", "\n", "target_ind", "=", "np", ".", "argmax", "(", "ious", "[", "attack_ind", "]", ")", "\n", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", ">=", "self", ".", "attack_iou_thr", ":", "\n", "                    ", "fit", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "[", "attack_id", "]", ",", "[", "attack_ind", "]", ")", "\n", "if", "fit", ":", "\n", "                        ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg_det", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", "\n", ")", "\n", "self", ".", "attack_iou_thr", "=", "0", "\n", "if", "suc", ":", "\n", "                            ", "suc", "=", "1", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                            ", "suc", "=", "2", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "", "else", ":", "\n", "                        ", "suc", "=", "3", "\n", "", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "self", ".", "temp_i", "+=", "1", "\n", "if", "self", ".", "temp_i", ">=", "10", ":", "\n", "                            ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "temp_i", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "break", "\n", "\n", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ",", "track_id", "=", "self_track_id_att", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "\n", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_sg_hj": [[3280, 3548], ["kwargs.get().get", "kwargs.get().get", "numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "enumerate", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "kwargs.get", "kwargs.get", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "cython_bbox.bbox_overlaps", "multitracker.JDETracker.processIoUs", "numpy.argmax", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "multitracker.JDETracker.CheckFit", "numpy.min", "numpy.max", "numpy.min", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "hasattr", "setattr", "getattr", "setattr", "multitracker.JDETracker.attack_sg_hj", "print", "print", "getattr", "att_tracker.get_v"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.processIoUs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_sg_hj", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.get_v"], ["", "def", "update_attack_sg_hj", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "attack_id", "=", "kwargs", "[", "'attack_id'", "]", "\n", "self_track_id_ori", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'origin'", ",", "None", ")", "\n", "self_track_id_att", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "{", "}", ")", ".", "get", "(", "'attack'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "# dists = matching.gate_cost_matrix(self.kalman_filter, dists, strack_pool, detections)", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ",", "track_id", "=", "self_track_id_ori", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "noise", "=", "None", "\n", "suc", "=", "0", "\n", "att_tracker", "=", "None", "\n", "if", "self", ".", "ad_bbox", ":", "\n", "            ", "for", "t", "in", "output_stracks_ori", ":", "\n", "                ", "if", "t", ".", "track_id", "==", "attack_id", ":", "\n", "                    ", "att_tracker", "=", "t", "\n", "", "", "", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "            ", "if", "track_id", "==", "attack_id", ":", "\n", "                ", "if", "self", ".", "opt", ".", "attack_id", ">", "0", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "f'frames_{attack_id}'", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "0", ")", "\n", "", "if", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "<", "self", ".", "FRAME_THR", ":", "\n", "                        ", "setattr", "(", "self", ",", "f'frames_{attack_id}'", ",", "getattr", "(", "self", ",", "f'frames_{attack_id}'", ")", "+", "1", ")", "\n", "break", "\n", "", "", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "ious", "=", "self", ".", "processIoUs", "(", "ious", ")", "\n", "ious", "=", "ious", "+", "ious", ".", "T", "\n", "target_ind", "=", "np", ".", "argmax", "(", "ious", "[", "attack_ind", "]", ")", "\n", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", ">=", "self", ".", "attack_iou_thr", ":", "\n", "                    ", "fit", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "[", "attack_id", "]", ",", "[", "attack_ind", "]", ")", "\n", "if", "fit", ":", "\n", "                        ", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_sg_hj", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_id", "=", "attack_id", ",", "\n", "attack_ind", "=", "attack_ind", ",", "\n", "ad_bbox", "=", "self", ".", "ad_bbox", ",", "\n", "track_v", "=", "att_tracker", ".", "get_v", "(", ")", "if", "att_tracker", "is", "not", "None", "else", "None", "\n", ")", "\n", "self", ".", "attack_iou_thr", "=", "0", "\n", "if", "suc", ":", "\n", "                            ", "suc", "=", "1", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                            ", "suc", "=", "2", "\n", "print", "(", "\n", "f'attack id: {attack_id}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "", "else", ":", "\n", "                        ", "suc", "=", "3", "\n", "", "if", "ious", "[", "attack_ind", "]", "[", "target_ind", "]", "==", "0", ":", "\n", "                        ", "self", ".", "temp_i", "+=", "1", "\n", "if", "self", ".", "temp_i", ">=", "10", ":", "\n", "                            ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "", "else", ":", "\n", "                        ", "self", ".", "temp_i", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "attack_iou_thr", "=", "self", ".", "ATTACK_IOU_THR", "\n", "", "break", "\n", "\n", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "self", ".", "ad_bbox", "=", "False", "\n", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ",", "track_id", "=", "self_track_id_att", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "\n", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", ",", "suc", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt_det": [[3549, 3856], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "set", "range", "enumerate", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "enumerate", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "len", "len", "cython_bbox.bbox_overlaps", "numpy.argmax", "multitracker.bbox_dis", "numpy.argmin", "enumerate", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "len", "len", "numpy.stack().astype", "numpy.stack().astype", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "output_stracks_ori_ind.append", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "multitracker.JDETracker.CheckFit", "multitracker.JDETracker.attack_mt_det", "multitracker.JDETracker.low_iou_ids.update", "output_stracks_att_ind.append", "len", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "hasattr", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "set", "multitracker.JDETracker.attacked_ids.update", "print", "print", "numpy.min", "numpy.max", "numpy.min", "enumerate", "enumerate", "numpy.stack", "numpy.stack", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "range", "range", "range", "range", "multitracker.JDETracker.__setattr__", "hasattr", "set", "len", "len", "len", "len", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__getattribute__", "multitracker.JDETracker.low_iou_ids.remove", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "multitracker.JDETracker.__getattribute__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_det", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand"], ["", "def", "update_attack_mt_det", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "id_set", "=", "set", "(", "[", "track", ".", "track_id", "for", "track", "in", "output_stracks_ori", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dets_ids", ")", ")", ":", "\n", "            ", "if", "dets_ids", "[", "i", "]", "is", "not", "None", "and", "dets_ids", "[", "i", "]", "not", "in", "id_set", ":", "\n", "                ", "dets_ids", "[", "i", "]", "=", "None", "\n", "\n", "", "", "output_stracks_ori_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_ori_ids", ":", "\n", "                ", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_ori_ind", ".", "append", "(", "ind", ")", "\n", "\n", "", "", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "attack_ids", "=", "[", "]", "\n", "target_ids", "=", "[", "]", "\n", "attack_inds", "=", "[", "]", "\n", "target_inds", "=", "[", "]", "\n", "\n", "noise", "=", "None", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "ious_inds", "=", "np", ".", "argmax", "(", "ious", ",", "axis", "=", "1", ")", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "dis_inds", "=", "np", ".", "argmin", "(", "dis", ",", "axis", "=", "1", ")", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "                ", "if", "track_id", "is", "None", "or", "self", ".", "multiple_ori_ids", "[", "track_id", "]", "<=", "self", ".", "FRAME_THR", "or", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", "not", "in", "self", ".", "multiple_ori2att", "or", "track_id", "not", "in", "self", ".", "multiple_ori2att", ":", "\n", "                    ", "continue", "\n", "", "if", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "self", ".", "ATTACK_IOU_THR", "or", "(", "\n", "track_id", "in", "self", ".", "low_iou_ids", "and", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "0", "\n", ")", ":", "\n", "                    ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "ious_inds", "[", "attack_ind", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "0", ")", "\n", "", "", "elif", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", "==", "0", "and", "track_id", "in", "self", ".", "low_iou_ids", ":", "\n", "                    ", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "1", ")", "\n", "", "if", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", ">", "10", ":", "\n", "                        ", "self", ".", "low_iou_ids", ".", "remove", "(", "track_id", ")", "\n", "", "elif", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", "in", "self", ".", "multiple_ori2att", ":", "\n", "                        ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "dis_inds", "[", "attack_ind", "]", ")", "\n", "", "", "", "fit_index", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "attack_ids", ",", "attack_inds", ")", "if", "len", "(", "attack_ids", ")", "else", "[", "]", "\n", "if", "fit_index", ":", "\n", "                ", "attack_ids", "=", "np", ".", "array", "(", "attack_ids", ")", "[", "fit_index", "]", "\n", "target_ids", "=", "np", ".", "array", "(", "target_ids", ")", "[", "fit_index", "]", "\n", "attack_inds", "=", "np", ".", "array", "(", "attack_inds", ")", "[", "fit_index", "]", "\n", "target_inds", "=", "np", ".", "array", "(", "target_inds", ")", "[", "fit_index", "]", "\n", "\n", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_mt_det", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_ids", "=", "attack_ids", ",", "\n", "attack_inds", "=", "attack_inds", "\n", ")", "\n", "self", ".", "low_iou_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "if", "suc", ":", "\n", "                    ", "self", ".", "attacked_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "print", "(", "\n", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item() if noise is not None else None}\\titeration: {attack_iter}'", ")", "\n", "\n", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "\n", "output_stracks_att_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_att_ids", ":", "\n", "                ", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_att_ind", ".", "append", "(", "ind", ")", "\n", "", "", "if", "len", "(", "output_stracks_ori_ind", ")", "and", "len", "(", "output_stracks_att_ind", ")", ":", "\n", "            ", "ori_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", "if", "i", "in", "output_stracks_ori_ind", "]", "\n", "att_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", "if", "i", "in", "output_stracks_att_ind", "]", "\n", "ori_dets", "=", "np", ".", "stack", "(", "ori_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "att_dets", "=", "np", ".", "stack", "(", "att_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "ious", "=", "bbox_ious", "(", "ori_dets", ",", "att_dets", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "row_ind", ")", ")", ":", "\n", "                ", "if", "ious", "[", "row_ind", "[", "i", "]", ",", "col_ind", "[", "i", "]", "]", ">", "0.9", ":", "\n", "                    ", "ori_id", "=", "output_stracks_ori", "[", "output_stracks_ori_ind", "[", "row_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "att_id", "=", "output_stracks_att", "[", "output_stracks_att_ind", "[", "col_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "self", ".", "multiple_ori2att", "[", "ori_id", "]", "=", "att_id", "\n", "", "", "", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update_attack_mt_hj": [[3857, 4174], ["numpy.array", "multitracker.JDETracker.model.zero_grad", "output[].sigmoid", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "range", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "multitracker.JDETracker.post_process", "range", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks_.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks_.extend", "multitracker.remove_duplicate_stracks", "set", "range", "enumerate", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "multitracker.JDETracker.update", "multitracker.JDETracker.recoverNoise", "enumerate", "max", "multitracker.JDETracker.model", "range", "dets_raw.clone", "multitracker.JDETracker.merge_outputs", "len", "len", "tracks_ad.append", "tracks_ad.append", "tracks_ad.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate_", "activated_starcks.append", "len", "len", "cython_bbox.bbox_overlaps", "numpy.argmax", "multitracker.bbox_dis", "numpy.argmin", "enumerate", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "multitracker.JDETracker.recoverNoise", "torch.clip.detach", "torch.clip.detach", "torch.clip.detach", "len", "len", "numpy.stack().astype", "numpy.stack().astype", "cython_bbox.bbox_overlaps", "scipy.optimize.linear_sum_assignment", "range", "models.utils._tranpose_and_gather_feat_expand().squeeze", "id_features.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "range", "range", "range", "range", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate_", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "output_stracks_ori_ind.append", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "multitracker.JDETracker.CheckFit", "multitracker.JDETracker.attack_mt_hj", "multitracker.JDETracker.ad_ids.update", "multitracker.JDETracker.low_iou_ids.update", "output_stracks_att_ind.append", "len", "len", "len", "len", "len", "multitracker.STrack.tlbr_to_tlwh", "zip", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "hasattr", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "set", "multitracker.JDETracker.attacked_ids.update", "print", "print", "numpy.min", "numpy.max", "numpy.min", "enumerate", "enumerate", "numpy.stack", "numpy.stack", "float", "float", "models.utils._tranpose_and_gather_feat_expand", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach", "range", "range", "range", "range", "multitracker.JDETracker.__setattr__", "hasattr", "set", "len", "len", "len", "len", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__setattr__", "multitracker.JDETracker.__getattribute__", "multitracker.JDETracker.low_iou_ids.remove", "t.get_v", "attack_ids.append", "target_ids.append", "attack_inds.append", "target_inds.append", "att_trackers.append", "multitracker.JDETracker.__getattribute__"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.recoverNoise", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate_", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.CheckFit", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.attack_mt_hj", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat_expand", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.get_v"], ["", "def", "update_attack_mt_hj", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id_", "+=", "1", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "# with torch.no_grad():", "\n", "im_blob", ".", "requires_grad", "=", "True", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets_raw", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "\n", "id_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "id_feature_exp", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ",", "bias", "=", "(", "i", "-", "1", ",", "j", "-", "1", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "id_features", ".", "append", "(", "id_feature_exp", ")", "\n", "\n", "", "", "id_feature", "=", "_tranpose_and_gather_feat_expand", "(", "id_feature", ",", "inds", ")", "\n", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "dets", "=", "self", ".", "post_process", "(", "dets_raw", ".", "clone", "(", ")", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "id_features", ")", ")", ":", "\n", "            ", "id_features", "[", "i", "]", "=", "id_features", "[", "i", "]", "[", "remain_inds", "]", "\n", "\n", "", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "last_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "last_ad_id_features", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "dets_ids", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dets", ")", ")", "]", "\n", "tracks_ad", "=", "[", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks_", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks_", ")", "\n", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter_", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "track", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate_", "(", "det", ",", "self", ".", "frame_id_", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "assert", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "assert", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "is", "None", "\n", "last_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat", "\n", "last_ad_id_features", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "smooth_feat_ad", "\n", "tracks_ad", ".", "append", "(", "(", "unconfirmed", "[", "itracked", "]", ",", "dets_index", "[", "idet", "]", ")", ")", "\n", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "dets_ids", "[", "dets_index", "[", "idet", "]", "]", "=", "unconfirmed", "[", "itracked", "]", ".", "track_id", "\n", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate_", "(", "self", ".", "kalman_filter_", ",", "self", ".", "frame_id_", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "dets_ids", "[", "dets_index", "[", "inew", "]", "]", "=", "track", ".", "track_id", "\n", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks_", ":", "\n", "            ", "if", "self", ".", "frame_id_", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks_", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks_", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks_", "=", "joint_stracks", "(", "self", ".", "tracked_stracks_", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "tracked_stracks_", ")", "\n", "self", ".", "lost_stracks_", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks_", "=", "sub_stracks", "(", "self", ".", "lost_stracks_", ",", "self", ".", "removed_stracks_", ")", "\n", "self", ".", "removed_stracks_", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks_", ",", "self", ".", "lost_stracks_", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks_ori", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks_", "if", "track", ".", "is_activated", "]", "\n", "id_set", "=", "set", "(", "[", "track", ".", "track_id", "for", "track", "in", "output_stracks_ori", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dets_ids", ")", ")", ":", "\n", "            ", "if", "dets_ids", "[", "i", "]", "is", "not", "None", "and", "dets_ids", "[", "i", "]", "not", "in", "id_set", ":", "\n", "                ", "dets_ids", "[", "i", "]", "=", "None", "\n", "\n", "", "", "output_stracks_ori_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_ori_ids", ":", "\n", "                ", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_ori_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_ori_ind", ".", "append", "(", "ind", ")", "\n", "\n", "", "", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id_", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "attack_ids", "=", "[", "]", "\n", "target_ids", "=", "[", "]", "\n", "attack_inds", "=", "[", "]", "\n", "target_inds", "=", "[", "]", "\n", "\n", "noise", "=", "None", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "ious", "=", "bbox_ious", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "ious", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "0", "\n", "ious_inds", "=", "np", ".", "argmax", "(", "ious", ",", "axis", "=", "1", ")", "\n", "dis", "=", "bbox_dis", "(", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "dis", "[", "range", "(", "len", "(", "dets", ")", ")", ",", "range", "(", "len", "(", "dets", ")", ")", "]", "=", "np", ".", "inf", "\n", "dis_inds", "=", "np", ".", "argmin", "(", "dis", ",", "axis", "=", "1", ")", "\n", "for", "attack_ind", ",", "track_id", "in", "enumerate", "(", "dets_ids", ")", ":", "\n", "                ", "if", "track_id", "is", "None", "or", "self", ".", "multiple_ori_ids", "[", "track_id", "]", "<=", "self", ".", "FRAME_THR", "or", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", "not", "in", "self", ".", "multiple_ori2att", "or", "track_id", "not", "in", "self", ".", "multiple_ori2att", ":", "\n", "                    ", "continue", "\n", "", "if", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "self", ".", "ATTACK_IOU_THR", "or", "(", "\n", "track_id", "in", "self", ".", "low_iou_ids", "and", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", ">", "0", "\n", ")", ":", "\n", "                    ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "ious_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "ious_inds", "[", "attack_ind", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "0", ")", "\n", "", "", "elif", "ious", "[", "attack_ind", ",", "ious_inds", "[", "attack_ind", "]", "]", "==", "0", "and", "track_id", "in", "self", ".", "low_iou_ids", ":", "\n", "                    ", "if", "hasattr", "(", "self", ",", "f'temp_i_{track_id}'", ")", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "__setattr__", "(", "f'temp_i_{track_id}'", ",", "1", ")", "\n", "", "if", "self", ".", "__getattribute__", "(", "f'temp_i_{track_id}'", ")", ">", "10", ":", "\n", "                        ", "self", ".", "low_iou_ids", ".", "remove", "(", "track_id", ")", "\n", "", "elif", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", "in", "self", ".", "multiple_ori2att", ":", "\n", "                        ", "attack_ids", ".", "append", "(", "track_id", ")", "\n", "target_ids", ".", "append", "(", "dets_ids", "[", "dis_inds", "[", "attack_ind", "]", "]", ")", "\n", "attack_inds", ".", "append", "(", "attack_ind", ")", "\n", "target_inds", ".", "append", "(", "dis_inds", "[", "attack_ind", "]", ")", "\n", "", "", "", "fit_index", "=", "self", ".", "CheckFit", "(", "dets", ",", "id_feature", ",", "attack_ids", ",", "attack_inds", ")", "if", "len", "(", "attack_ids", ")", "else", "[", "]", "\n", "if", "fit_index", ":", "\n", "                ", "attack_ids", "=", "np", ".", "array", "(", "attack_ids", ")", "[", "fit_index", "]", "\n", "target_ids", "=", "np", ".", "array", "(", "target_ids", ")", "[", "fit_index", "]", "\n", "attack_inds", "=", "np", ".", "array", "(", "attack_inds", ")", "[", "fit_index", "]", "\n", "target_inds", "=", "np", ".", "array", "(", "target_inds", ")", "[", "fit_index", "]", "\n", "\n", "att_trackers", "=", "[", "]", "\n", "for", "attack_id", "in", "attack_ids", ":", "\n", "                    ", "if", "attack_id", "not", "in", "self", ".", "ad_ids", ":", "\n", "                        ", "for", "t", "in", "output_stracks_ori", ":", "\n", "                            ", "if", "t", ".", "track_id", "==", "attack_id", ":", "\n", "                                ", "att_trackers", ".", "append", "(", "t", ")", "\n", "\n", "", "", "", "", "noise", ",", "attack_iter", ",", "suc", "=", "self", ".", "attack_mt_hj", "(", "\n", "im_blob", ",", "\n", "img0", ",", "\n", "dets", ",", "\n", "inds", ",", "\n", "remain_inds", ",", "\n", "last_info", "=", "self", ".", "ad_last_info", ",", "\n", "outputs_ori", "=", "output", ",", "\n", "attack_ids", "=", "attack_ids", ",", "\n", "attack_inds", "=", "attack_inds", ",", "\n", "ad_ids", "=", "self", ".", "ad_ids", ",", "\n", "track_vs", "=", "[", "t", ".", "get_v", "(", ")", "for", "t", "in", "att_trackers", "]", "\n", ")", "\n", "self", ".", "ad_ids", ".", "update", "(", "attack_ids", ")", "\n", "self", ".", "low_iou_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "if", "suc", ":", "\n", "                    ", "self", ".", "attacked_ids", ".", "update", "(", "set", "(", "attack_ids", ")", ")", "\n", "print", "(", "\n", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: SUCCESS\\tl2 distance: {(noise ** 2).sum().sqrt().item()}\\titeration: {attack_iter}'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'attack ids: {attack_ids}\\tattack frame {self.frame_id_}: FAIL\\tl2 distance: {(noise ** 2).sum().sqrt().item() if noise is not None else None}\\titeration: {attack_iter}'", ")", "\n", "\n", "", "", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "l2_dis", "=", "(", "noise", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "adImg", "=", "torch", ".", "clip", "(", "im_blob", "+", "noise", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "noise", "=", "self", ".", "recoverNoise", "(", "noise", ",", "img0", ")", "\n", "noise", "=", "(", "noise", "-", "np", ".", "min", "(", "noise", ")", ")", "/", "(", "np", ".", "max", "(", "noise", ")", "-", "np", ".", "min", "(", "noise", ")", ")", "\n", "noise", "=", "(", "noise", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "l2_dis", "=", "None", "\n", "adImg", "=", "im_blob", "\n", "\n", "", "output_stracks_att", "=", "self", ".", "update", "(", "adImg", ",", "img0", ")", "\n", "adImg", "=", "self", ".", "recoverNoise", "(", "adImg", ".", "detach", "(", ")", ",", "img0", ")", "\n", "\n", "output_stracks_att_ind", "=", "[", "]", "\n", "for", "ind", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", ":", "\n", "            ", "if", "track", ".", "track_id", "not", "in", "self", ".", "multiple_att_ids", ":", "\n", "                ", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "=", "0", "\n", "", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "+=", "1", "\n", "if", "self", ".", "multiple_att_ids", "[", "track", ".", "track_id", "]", "<=", "self", ".", "FRAME_THR", ":", "\n", "                ", "output_stracks_att_ind", ".", "append", "(", "ind", ")", "\n", "", "", "if", "len", "(", "output_stracks_ori_ind", ")", "and", "len", "(", "output_stracks_att_ind", ")", ":", "\n", "            ", "ori_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_ori", ")", "if", "i", "in", "output_stracks_ori_ind", "]", "\n", "att_dets", "=", "[", "track", ".", "curr_tlbr", "for", "i", ",", "track", "in", "enumerate", "(", "output_stracks_att", ")", "if", "i", "in", "output_stracks_att_ind", "]", "\n", "ori_dets", "=", "np", ".", "stack", "(", "ori_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "att_dets", "=", "np", ".", "stack", "(", "att_dets", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "ious", "=", "bbox_ious", "(", "ori_dets", ",", "att_dets", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "ious", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "row_ind", ")", ")", ":", "\n", "                ", "if", "ious", "[", "row_ind", "[", "i", "]", ",", "col_ind", "[", "i", "]", "]", ">", "0.9", ":", "\n", "                    ", "ori_id", "=", "output_stracks_ori", "[", "output_stracks_ori_ind", "[", "row_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "att_id", "=", "output_stracks_att", "[", "output_stracks_att_ind", "[", "col_ind", "[", "i", "]", "]", "]", ".", "track_id", "\n", "self", ".", "multiple_ori2att", "[", "ori_id", "]", "=", "att_id", "\n", "", "", "", "return", "output_stracks_ori", ",", "output_stracks_att", ",", "adImg", ",", "noise", ",", "l2_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.update": [[4175, 4352], ["kwargs.get", "numpy.array", "multitracker.JDETracker.post_process", "[].tolist", "multitracker.joint_stracks", "multitracker.STrack.multi_predict", "tracker.matching.embedding_distance", "tracker.matching.fuse_motion", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "tracker.matching.iou_distance", "tracker.matching.linear_assignment", "multitracker.joint_stracks", "multitracker.joint_stracks", "multitracker.sub_stracks", "multitracker.JDETracker.lost_stracks.extend", "multitracker.sub_stracks", "multitracker.JDETracker.removed_stracks.extend", "multitracker.remove_duplicate_stracks", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "tracking_utils.log.logger.debug", "multitracker.joint_stracks", "max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "output[].sigmoid_", "torch.normalize", "torch.normalize", "torch.normalize", "models.decode.mot_decode", "id_feature.detach().cpu().numpy.detach().cpu().numpy.permute().view", "models.utils._tranpose_and_gather_feat", "id_feature.detach().cpu().numpy.detach().cpu().numpy.squeeze", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "multitracker.JDETracker.merge_outputs", "len", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate", "activated_starcks.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "multitracker.JDETracker.model", "multitracker.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate", "refind_stracks.append", "track.update", "activated_starcks.append", "track.re_activate", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "unconfirmed.append", "tracked_stracks.append", "id_feature.detach().cpu().numpy.detach().cpu().numpy.permute", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "multitracker.STrack.tlbr_to_tlwh", "zip", "float", "float", "id_feature.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.post_process", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.multi_predict", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.trains.base_trainer.BaseTrainer.debug", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.decode.mot_decode", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.models.utils._tranpose_and_gather_feat", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.merge_outputs", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.activate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.re_activate", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.tlbr_to_tlwh"], ["", "def", "update", "(", "self", ",", "im_blob", ",", "img0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frame_id", "+=", "1", "\n", "self_track_id", "=", "kwargs", ".", "get", "(", "'track_id'", ",", "None", ")", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "width", "=", "img0", ".", "shape", "[", "1", "]", "\n", "height", "=", "img0", ".", "shape", "[", "0", "]", "\n", "inp_height", "=", "im_blob", ".", "shape", "[", "2", "]", "\n", "inp_width", "=", "im_blob", ".", "shape", "[", "3", "]", "\n", "c", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "max", "(", "float", "(", "inp_width", ")", "/", "float", "(", "inp_height", ")", "*", "height", ",", "width", ")", "*", "1.0", "\n", "meta", "=", "{", "'c'", ":", "c", ",", "'s'", ":", "s", ",", "\n", "'out_height'", ":", "inp_height", "//", "self", ".", "opt", ".", "down_ratio", ",", "\n", "'out_width'", ":", "inp_width", "//", "self", ".", "opt", ".", "down_ratio", "}", "\n", "\n", "''' Step 1: Network forward, get detections & embeddings'''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "self", ".", "model", "(", "im_blob", ")", "[", "-", "1", "]", "\n", "hm", "=", "output", "[", "'hm'", "]", ".", "sigmoid_", "(", ")", "\n", "wh", "=", "output", "[", "'wh'", "]", "\n", "id_feature", "=", "output", "[", "'id'", "]", "\n", "id_feature", "=", "F", ".", "normalize", "(", "id_feature", ",", "dim", "=", "1", ")", "\n", "\n", "reg", "=", "output", "[", "'reg'", "]", "if", "self", ".", "opt", ".", "reg_offset", "else", "None", "\n", "dets", ",", "inds", "=", "mot_decode", "(", "hm", ",", "wh", ",", "reg", "=", "reg", ",", "cat_spec_wh", "=", "self", ".", "opt", ".", "cat_spec_wh", ",", "K", "=", "self", ".", "opt", ".", "K", ")", "\n", "id_feature_", "=", "id_feature", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "id_feature", "=", "_tranpose_and_gather_feat", "(", "id_feature", ",", "inds", ")", "\n", "id_feature", "=", "id_feature", ".", "squeeze", "(", "0", ")", "\n", "id_feature", "=", "id_feature", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "dets", "=", "self", ".", "post_process", "(", "dets", ",", "meta", ")", "\n", "dets", "=", "self", ".", "merge_outputs", "(", "[", "dets", "]", ")", "[", "1", "]", "\n", "\n", "remain_inds", "=", "dets", "[", ":", ",", "4", "]", ">", "self", ".", "opt", ".", "conf_thres", "\n", "dets", "=", "dets", "[", "remain_inds", "]", "\n", "id_feature", "=", "id_feature", "[", "remain_inds", "]", "\n", "# import pdb; pdb.set_trace()", "\n", "dets_index", "=", "inds", "[", "0", "]", "[", "remain_inds", "]", ".", "tolist", "(", ")", "\n", "\n", "# vis", "\n", "'''\n        for i in range(0, dets.shape[0]):\n            bbox = dets[i][0:4]\n            cv2.rectangle(img0, (bbox[0], bbox[1]),\n                          (bbox[2], bbox[3]),\n                          (0, 255, 0), 2)\n        cv2.imshow('dets', img0)\n        cv2.waitKey(0)\n        id0 = id0-1\n        '''", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "STrack", ".", "tlbr_to_tlwh", "(", "tlbrs", "[", ":", "4", "]", ")", ",", "tlbrs", "[", "4", "]", ",", "f", ",", "30", ")", "for", "\n", "(", "tlbrs", ",", "f", ")", "in", "zip", "(", "dets", "[", ":", ",", ":", "5", "]", ",", "id_feature", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks", ")", "\n", "\n", "# Predict the current location with KF", "\n", "# for strack in strack_pool:", "\n", "# strack.predict()", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "embedding_distance", "(", "strack_pool", ",", "detections", ")", "\n", "dists", "=", "matching", ".", "fuse_motion", "(", "self", ".", "kalman_filter", ",", "dists", ",", "strack_pool", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate", "(", "det", ",", "self", ".", "frame_id", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 3: Second association, with IOU'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "r_tracked_stracks", ",", "detections", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.5", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate", "(", "det", ",", "self", ".", "frame_id", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "dets_index", "=", "[", "dets_index", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "iou_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate", "(", "self", ".", "kalman_filter", ",", "self", ".", "frame_id", ",", "track_id", "=", "self_track_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks", ":", "\n", "            ", "if", "self", ".", "frame_id", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "tracked_stracks", ")", "\n", "self", ".", "lost_stracks", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "removed_stracks", ")", "\n", "self", ".", "removed_stracks", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks", ",", "self", ".", "lost_stracks", "=", "remove_duplicate_stracks", "(", "self", ".", "tracked_stracks", ",", "self", ".", "lost_stracks", ")", "\n", "# get scores of lost tracks", "\n", "output_stracks", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks", "if", "track", ".", "is_activated", "]", "\n", "\n", "logger", ".", "debug", "(", "'===========Frame {}=========='", ".", "format", "(", "self", ".", "frame_id", ")", ")", "\n", "logger", ".", "debug", "(", "'Activated: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "activated_starcks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Refind: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "refind_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Lost: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "lost_stracks", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Removed: {}'", ".", "format", "(", "[", "track", ".", "track_id", "for", "track", "in", "removed_stracks", "]", ")", ")", "\n", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks", ")", "\n", "\n", "self", ".", "ad_last_info", "=", "{", "\n", "'last_strack_pool'", ":", "copy", ".", "deepcopy", "(", "strack_pool", ")", ",", "\n", "'last_unconfirmed'", ":", "copy", ".", "deepcopy", "(", "unconfirmed", ")", ",", "\n", "'kalman_filter'", ":", "copy", ".", "deepcopy", "(", "self", ".", "kalman_filter_", ")", "\n", "}", "\n", "\n", "return", "output_stracks", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker._nms": [[4353, 4360], ["torch.functional.max_pool2d", "torch.functional.max_pool2d", "torch.functional.max_pool2d"], "methods", ["None"], ["", "def", "_nms", "(", "self", ",", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "\n", "        ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "hmax", "=", "nn", ".", "functional", ".", "max_pool2d", "(", "\n", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.JDETracker.computer_targets": [[4361, 4380], ["numpy.log", "numpy.log", "numpy.vstack"], "methods", ["None"], ["", "def", "computer_targets", "(", "self", ",", "boxes", ",", "gt_box", ")", ":", "\n", "        ", "an_ws", "=", "boxes", "[", ":", ",", "2", "]", "\n", "an_hs", "=", "boxes", "[", ":", ",", "3", "]", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "\n", "\n", "gt_ws", "=", "gt_box", "[", ":", ",", "2", "]", "\n", "gt_hs", "=", "gt_box", "[", ":", ",", "3", "]", "\n", "gt_ctr_x", "=", "gt_box", "[", ":", ",", "0", "]", "\n", "gt_ctr_y", "=", "gt_box", "[", ":", ",", "1", "]", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ctr_x", ")", "/", "an_ws", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ctr_y", ")", "/", "an_hs", "\n", "targets_dw", "=", "np", ".", "log", "(", "gt_ws", "/", "an_ws", ")", "\n", "targets_dh", "=", "np", ".", "log", "(", "gt_hs", "/", "an_hs", ")", "\n", "\n", "targets", "=", "np", ".", "vstack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ")", ".", "T", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.bbox_dis": [[74, 81], ["numpy.repeat", "numpy.repeat", "numpy.sqrt", "np.repeat.reshape", "len", "np.repeat.reshape", "len", "numpy.sum"], "function", ["None"], ["def", "bbox_dis", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "    ", "center1", "=", "(", "bbox1", "[", ":", ",", ":", "2", "]", "+", "bbox1", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "center2", "=", "(", "bbox2", "[", ":", ",", ":", "2", "]", "+", "bbox2", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "center1", "=", "np", ".", "repeat", "(", "center1", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", ",", "len", "(", "bbox2", ")", ",", "axis", "=", "1", ")", "\n", "center2", "=", "np", ".", "repeat", "(", "center2", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ")", ",", "len", "(", "bbox1", ")", ",", "axis", "=", "0", ")", "\n", "dis", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "center1", "-", "center2", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.joint_stracks": [[4382, 4394], ["res.append", "exists.get", "res.append"], "function", ["None"], ["", "", "def", "joint_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "exists", "=", "{", "}", "\n", "res", "=", "[", "]", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "exists", "[", "t", ".", "track_id", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "not", "exists", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "exists", "[", "tid", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.sub_stracks": [[4396, 4405], ["list", "stracks.get", "stracks.values"], "function", ["None"], ["", "def", "sub_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "stracks", "=", "{", "}", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "stracks", "[", "t", ".", "track_id", "]", "=", "t", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "stracks", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "del", "stracks", "[", "tid", "]", "\n", "", "", "return", "list", "(", "stracks", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.remove_duplicate_stracks": [[4407, 4421], ["tracker.matching.iou_distance", "numpy.where", "zip", "list", "list", "dupb.append", "dupa.append", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance"], ["", "def", "remove_duplicate_stracks", "(", "stracksa", ",", "stracksb", ")", ":", "\n", "    ", "pdist", "=", "matching", ".", "iou_distance", "(", "stracksa", ",", "stracksb", ")", "\n", "pairs", "=", "np", ".", "where", "(", "pdist", "<", "0.15", ")", "\n", "dupa", ",", "dupb", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", ",", "q", "in", "zip", "(", "*", "pairs", ")", ":", "\n", "        ", "timep", "=", "stracksa", "[", "p", "]", ".", "frame_id", "-", "stracksa", "[", "p", "]", ".", "start_frame", "\n", "timeq", "=", "stracksb", "[", "q", "]", ".", "frame_id", "-", "stracksb", "[", "q", "]", ".", "start_frame", "\n", "if", "timep", ">", "timeq", ":", "\n", "            ", "dupb", ".", "append", "(", "q", ")", "\n", "", "else", ":", "\n", "            ", "dupa", ".", "append", "(", "p", ")", "\n", "", "", "resa", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksa", ")", "if", "not", "i", "in", "dupa", "]", "\n", "resb", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksb", ")", "if", "not", "i", "in", "dupb", "]", "\n", "return", "resa", ",", "resb", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.save": [[4423, 4426], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save", "(", "obj", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "f'/home/derry/Desktop/{name}.pth'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load": [[4428, 4432], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.load"], ["", "", "def", "load", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "f'/home/derry/Desktop/{name}.pth'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.merge_matches": [[14, 29], ["numpy.asarray", "numpy.asarray", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "mask.nonzero", "list", "tuple", "tuple", "zip", "numpy.ones", "numpy.ones", "set", "set", "set", "set", "len", "len", "range", "range"], "function", ["None"], ["def", "merge_matches", "(", "m1", ",", "m2", ",", "shape", ")", ":", "\n", "    ", "O", ",", "P", ",", "Q", "=", "shape", "\n", "m1", "=", "np", ".", "asarray", "(", "m1", ")", "\n", "m2", "=", "np", ".", "asarray", "(", "m2", ")", "\n", "\n", "M1", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m1", ")", ")", ",", "(", "m1", "[", ":", ",", "0", "]", ",", "m1", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "O", ",", "P", ")", ")", "\n", "M2", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m2", ")", ")", ",", "(", "m2", "[", ":", ",", "0", "]", ",", "m2", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "P", ",", "Q", ")", ")", "\n", "\n", "mask", "=", "M1", "*", "M2", "\n", "match", "=", "mask", ".", "nonzero", "(", ")", "\n", "match", "=", "list", "(", "zip", "(", "match", "[", "0", "]", ",", "match", "[", "1", "]", ")", ")", "\n", "unmatched_O", "=", "tuple", "(", "set", "(", "range", "(", "O", ")", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "unmatched_Q", "=", "tuple", "(", "set", "(", "range", "(", "Q", ")", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "\n", "return", "match", ",", "unmatched_O", ",", "unmatched_Q", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching._indices_to_matches": [[31, 40], ["tuple", "tuple", "tuple", "set", "set", "set", "set", "zip", "range", "range"], "function", ["None"], ["", "def", "_indices_to_matches", "(", "cost_matrix", ",", "indices", ",", "thresh", ")", ":", "\n", "    ", "matched_cost", "=", "cost_matrix", "[", "tuple", "(", "zip", "(", "*", "indices", ")", ")", "]", "\n", "matched_mask", "=", "(", "matched_cost", "<=", "thresh", ")", "\n", "\n", "matches", "=", "indices", "[", "matched_mask", "]", "\n", "unmatched_a", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "0", "]", ")", ")", "\n", "unmatched_b", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.linear_assignment": [[42, 54], ["lap.lapjv", "enumerate", "numpy.asarray", "numpy.where", "numpy.where", "numpy.empty", "tuple", "tuple", "np.asarray.append", "range", "range"], "function", ["None"], ["", "def", "linear_assignment", "(", "cost_matrix", ",", "thresh", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "matches", ",", "unmatched_a", ",", "unmatched_b", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cost", ",", "x", ",", "y", "=", "lap", ".", "lapjv", "(", "cost_matrix", ",", "extend_cost", "=", "True", ",", "cost_limit", "=", "thresh", ")", "\n", "for", "ix", ",", "mx", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "mx", ">=", "0", ":", "\n", "            ", "matches", ".", "append", "(", "[", "ix", ",", "mx", "]", ")", "\n", "", "", "unmatched_a", "=", "np", ".", "where", "(", "x", "<", "0", ")", "[", "0", "]", "\n", "unmatched_b", "=", "np", ".", "where", "(", "y", "<", "0", ")", "[", "0", "]", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ")", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.ious": [[56, 74], ["numpy.zeros", "cython_bbox.bbox_overlaps", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "len"], "function", ["None"], ["", "def", "ious", "(", "atlbrs", ",", "btlbrs", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atlbrs: list[tlbr] | np.ndarray\n    :type atlbrs: list[tlbr] | np.ndarray\n\n    :rtype ious np.ndarray\n    \"\"\"", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "atlbrs", ")", ",", "len", "(", "btlbrs", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "\n", "", "ious", "=", "bbox_ious", "(", "\n", "np", ".", "ascontiguousarray", "(", "atlbrs", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "btlbrs", ",", "dtype", "=", "np", ".", "float", ")", "\n", ")", "\n", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.iou_distance": [[76, 95], ["matching.ious", "isinstance", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.ious"], ["", "def", "iou_distance", "(", "atracks", ",", "btracks", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atracks: list[STrack]\n    :type btracks: list[STrack]\n\n    :rtype cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "if", "(", "len", "(", "atracks", ")", ">", "0", "and", "isinstance", "(", "atracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", "or", "(", "len", "(", "btracks", ")", ">", "0", "and", "isinstance", "(", "btracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "atlbrs", "=", "atracks", "\n", "btlbrs", "=", "btracks", "\n", "", "else", ":", "\n", "        ", "atlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "atracks", "]", "\n", "btlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "btracks", "]", "\n", "", "_ious", "=", "ious", "(", "atlbrs", ",", "btlbrs", ")", "\n", "cost_matrix", "=", "1", "-", "_ious", "\n", "\n", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.embedding_distance": [[96, 113], ["numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.maximum", "scipy.spatial.distance.cdist", "len", "len"], "function", ["None"], ["", "def", "embedding_distance", "(", "tracks", ",", "detections", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "det_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "curr_feat", "for", "track", "in", "detections", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "#for i, track in enumerate(tracks):", "\n", "#cost_matrix[i, :] = np.maximum(0.0, cdist(track.smooth_feat.reshape(1,-1), det_features, metric))", "\n", "track_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "smooth_feat", "for", "track", "in", "tracks", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "cost_matrix", "=", "np", ".", "maximum", "(", "0.0", ",", "cdist", "(", "track_features", ",", "det_features", ",", "metric", ")", ")", "# Nomalized features", "\n", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.gate_cost_matrix": [[115, 126], ["numpy.asarray", "enumerate", "kf.gating_distance", "det.to_xyah"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.gating_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.to_xyah"], ["", "def", "gate_cost_matrix", "(", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "2", "if", "only_position", "else", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "to_xyah", "(", ")", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.matching.fuse_motion": [[128, 140], ["numpy.asarray", "enumerate", "kf.gating_distance", "det.to_xyah"], "function", ["home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracking_utils.kalman_filter.KalmanFilter.gating_distance", "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.multitracker.STrack.to_xyah"], ["", "def", "fuse_motion", "(", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "2", "if", "only_position", "else", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "to_xyah", "(", ")", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.init": [[36, 40], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "init", "(", ")", ":", "\n", "        ", "BaseTrack", ".", "_count", "=", "0", "\n", "BaseTrack", ".", "_count_", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.end_frame": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "end_frame", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id": [[45, 49], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_id", "(", ")", ":", "\n", "        ", "BaseTrack", ".", "_count", "+=", "1", "\n", "return", "BaseTrack", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.next_id_": [[50, 54], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_id_", "(", ")", ":", "\n", "        ", "BaseTrack", ".", "_count_", "+=", "1", "\n", "return", "BaseTrack", ".", "_count_", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.activate": [[55, 57], ["None"], "methods", ["None"], ["", "def", "activate", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.predict": [[58, 60], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.update": [[61, 63], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_lost": [[64, 66], ["None"], "methods", ["None"], ["", "def", "mark_lost", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Lost", "\n", "\n"]], "home.repos.pwc.inspect_result.derryhub_fairmot-attack.tracker.basetrack.BaseTrack.mark_removed": [[67, 69], ["None"], "methods", ["None"], ["", "def", "mark_removed", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Removed", "", "", "", ""]]}