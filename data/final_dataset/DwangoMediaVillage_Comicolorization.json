{"home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_image_with_trained_model.make_image_arrays": [[39, 51], ["numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "make_image_arrays", "(", "dataset", ",", "indexes", ")", ":", "\n", "    ", "batch", "=", "[", "dataset", "[", "i", "]", "for", "i", "in", "indexes", "]", "\n", "\n", "color_image_list", "=", "[", "one_data", "[", "0", "]", "for", "one_data", "in", "batch", "]", "\n", "gray_image_list", "=", "[", "one_data", "[", "1", "]", "for", "one_data", "in", "batch", "]", "\n", "rgb_image_list", "=", "[", "one_data", "[", "2", "]", "for", "one_data", "in", "batch", "]", "\n", "\n", "color_images_array", "=", "numpy", ".", "asarray", "(", "color_image_list", ")", "\n", "gray_images_array", "=", "numpy", ".", "asarray", "(", "gray_image_list", ")", "\n", "rgb_image_list", "=", "numpy", ".", "asarray", "(", "rgb_image_list", ")", "\n", "\n", "return", "color_images_array", ",", "gray_images_array", ",", "rgb_image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_image_with_trained_model.save_images_from_array": [[53, 73], ["comicolorization.utility.image.array_to_image", "comicolorization.utility.image.save_images"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.save_images"], ["", "def", "save_images_from_array", "(", "\n", "color_images_array", ",", "\n", "mode", ",", "\n", "gray_images_array", ",", "\n", "path_directory", ",", "\n", "prefix_filename", ",", "\n", "color_normalize", "=", "False", ",", "\n", "index_base", "=", "0", ",", "\n", ")", ":", "\n", "    ", "images_rgb", "=", "comicolorization", ".", "utility", ".", "image", ".", "array_to_image", "(", "\n", "color_images_array", "=", "color_images_array", ",", "\n", "gray_images_array", "=", "gray_images_array", ",", "\n", "mode", "=", "mode", ",", "\n", "color_normalize", "=", "color_normalize", ",", "\n", ")", "\n", "comicolorization", ".", "utility", ".", "image", ".", "save_images", "(", "\n", "images", "=", "images_rgb", ",", "\n", "path_directory", "=", "path_directory", ",", "\n", "prefix_filename", "=", "prefix_filename", ",", "\n", "index_base", "=", "index_base", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.train.make_optimizer": [[106, 114], ["chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.optimizers.Adam.add_hook", "chainer.optimizer.WeightDecay"], "function", ["None"], ["def", "make_optimizer", "(", "_model", ")", ":", "\n", "    ", "_optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "optimizer_adam_alpha", ")", "\n", "_optimizer", ".", "setup", "(", "_model", ")", "\n", "\n", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "_optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer", ".", "WeightDecay", "(", "args", ".", "weight_decay", ")", ")", "\n", "\n", "", "return", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.train.save_json": [[154, 156], ["json.dump", "open"], "function", ["None"], ["def", "save_json", "(", "filename", ",", "obj", ")", ":", "\n", "    ", "json", ".", "dump", "(", "obj", ",", "open", "(", "filename", ",", "'w'", ")", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_graph_report.pass_filter": [[59, 68], ["numpy.pad", "numpy.convolve", "numpy.ones", "scipy.signal.medfilt", "Exception"], "function", ["None"], ["def", "pass_filter", "(", "y", ")", ":", "\n", "    ", "if", "args", ".", "method_filter", "==", "'mean'", ":", "\n", "        ", "y", "=", "numpy", ".", "pad", "(", "y", ",", "(", "args", ".", "filter_k_size", "//", "2", ",", ")", ",", "'edge'", ")", "\n", "filter", "=", "numpy", ".", "ones", "(", "args", ".", "filter_k_size", ")", "/", "args", ".", "filter_k_size", "\n", "return", "numpy", ".", "convolve", "(", "y", ",", "filter", ",", "'valid'", ")", "\n", "", "elif", "args", ".", "method_filter", "==", "'median'", ":", "\n", "        ", "return", "scipy", ".", "signal", ".", "medfilt", "(", "y", ",", "args", ".", "filter_k_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"{} is not defined\"", ".", "format", "(", "args", ".", "method_filter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_tiled_image.get_filename": [[24, 26], ["os.path.splitext", "os.path.basename"], "function", ["None"], ["def", "get_filename", "(", "path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_tiled_image.get_number": [[28, 32], ["make_tiled_image.get_filename", "re.search", "int", "re.search.start", "re.search.end"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_tiled_image.get_filename"], ["", "def", "get_number", "(", "path", ")", ":", "\n", "    ", "filename", "=", "get_filename", "(", "path", ")", "\n", "pos_number", "=", "re", ".", "search", "(", "r'\\d+$'", ",", "filename", ")", "\n", "return", "int", "(", "filename", "[", "pos_number", ".", "start", "(", ")", ":", "pos_number", ".", "end", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.bin.make_tiled_image.save_tiled_image": [[34, 56], ["subprocess.check_output", "math.ceil", "math.ceil", "math.sqrt"], "function", ["None"], ["", "def", "save_tiled_image", "(", "paths_input", ",", "path_output", ",", "num_image", "=", "None", ",", "col", "=", "None", ",", "row", "=", "None", ")", ":", "\n", "    ", "if", "col", "is", "None", ":", "\n", "        ", "col", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "num_image", ")", ")", "\n", "\n", "", "if", "row", "is", "None", ":", "\n", "        ", "row", "=", "math", ".", "ceil", "(", "num_image", "/", "col", ")", "\n", "\n", "", "command", "=", "'''\n        montage \\\n        -tile {col}x{row} \\\n        -geometry +0 \\\n        -border 10x10 \\\n        {paths_input} \\\n        {path_output}\n        '''", ".", "format", "(", "\n", "col", "=", "col", ",", "\n", "row", "=", "row", ",", "\n", "paths_input", "=", "' '", ".", "join", "(", "paths_input", ")", ",", "\n", "path_output", "=", "path_output", ",", "\n", ")", "\n", "subprocess", ".", "check_output", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.updater.multi_updater.MultiUpdater.__init__": [[7, 42], ["super().__init__", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "loss_maker", ",", "\n", "main_optimizer", ",", "\n", "main_lossfun", ",", "\n", "reinput_optimizer", "=", "None", ",", "\n", "reinput_lossfun", "=", "None", ",", "\n", "discriminator_optimizer", "=", "None", ",", "\n", "discriminator_lossfun", "=", "None", ",", "\n", "*", "_args", ",", "**", "kwargs", "\n", ")", ":", "\n", "# type: (any, comicolorization.loss.LossMaker, any, typing.Callable[[typing.Dict], any], typing.List[chainer.Optimizer], typing.Callable[[int, typing.Dict], any], any, typing.Callable[[typing.Dict], any], *any, **any) -> None", "\n", "        ", "optimizers", "=", "{", "'main'", ":", "main_optimizer", "}", "\n", "if", "reinput_optimizer", "is", "not", "None", ":", "\n", "            ", "for", "i_reinput", ",", "optimizer", "in", "enumerate", "(", "reinput_optimizer", ")", ":", "\n", "                ", "optimizers", "[", "'reinput{}'", ".", "format", "(", "i_reinput", ")", "]", "=", "optimizer", "\n", "\n", "", "", "if", "discriminator_optimizer", "is", "not", "None", ":", "\n", "            ", "optimizers", "[", "'discriminator'", "]", "=", "discriminator_optimizer", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "optimizer", "=", "optimizers", ",", "*", "_args", ",", "**", "kwargs", ")", "\n", "\n", "# chainer.reporter cannot work on some optimizer focus same model", "\n", "if", "args", ".", "separate_backward_reinput", "and", "reinput_optimizer", "is", "None", ":", "\n", "            ", "reinput_optimizer", "=", "[", "main_optimizer", "for", "_", "in", "range", "(", "len", "(", "args", ".", "loss_blend_ratio_reinput", ")", ")", "]", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "loss_maker", "=", "loss_maker", "\n", "self", ".", "main_optimizer", "=", "main_optimizer", "\n", "self", ".", "main_lossfun", "=", "main_lossfun", "\n", "self", ".", "reinput_optimizer", "=", "reinput_optimizer", "\n", "self", ".", "reinput_lossfun", "=", "reinput_lossfun", "\n", "self", ".", "discriminator_optimizer", "=", "discriminator_optimizer", "\n", "self", ".", "discriminator_lossfun", "=", "discriminator_lossfun", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.updater.multi_updater.MultiUpdater.update_core": [[43, 61], ["multi_updater.MultiUpdater._iterators[].next", "multi_updater.MultiUpdater.converter", "multi_updater.MultiUpdater.loss_maker.calc_loss", "main_optimizer.update", "enumerate", "multi_updater.MultiUpdater.discriminator_optimizer.update", "tuple", "reinput_optimizer.update", "chainer.Variable"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.calc_loss"], ["", "def", "update_core", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "_iterators", "[", "'main'", "]", ".", "next", "(", ")", "\n", "in_arrays", "=", "self", ".", "converter", "(", "batch", ",", "self", ".", "device", ")", "\n", "\n", "loss_detail", "=", "self", ".", "loss_maker", ".", "calc_loss", "(", "*", "tuple", "(", "chainer", ".", "Variable", "(", "x", ")", "for", "x", "in", "in_arrays", ")", ",", "test", "=", "False", ")", "\n", "\n", "# main network", "\n", "main_optimizer", "=", "self", ".", "main_optimizer", "\n", "main_optimizer", ".", "update", "(", "self", ".", "main_lossfun", ",", "loss_detail", ")", "\n", "\n", "# reinput network", "\n", "reinput_optimizer_list", "=", "self", ".", "reinput_optimizer", "\n", "if", "reinput_optimizer_list", "is", "not", "None", ":", "\n", "            ", "for", "i_reinput", ",", "reinput_optimizer", "in", "enumerate", "(", "reinput_optimizer_list", ")", ":", "\n", "                ", "reinput_optimizer", ".", "update", "(", "self", ".", "reinput_lossfun", ",", "i_reinput", ",", "loss_detail", ")", "\n", "\n", "", "", "if", "self", ".", "discriminator_optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "discriminator_optimizer", ".", "update", "(", "self", ".", "discriminator_lossfun", ",", "loss_detail", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.face_dataset.FaceImageDataset.__init__": [[20, 32], ["image_dataset.PILImageDatasetBase.__init__", "cv2.CascadeClassifier"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["def", "__init__", "(", "self", ",", "paths", ",", "classifier_path", ",", "input_resize", "=", "None", ",", "output_resize", "=", "None", ",", "root", "=", "'.'", ",", "margin_ratio", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"\n        :param paths: image files :see: https://github.com/pfnet/chainer/blob/master/chainer/datasets/image_dataset.py\n        :param classifier_path: XML of pre-trained face detector.\n        You can find it from https://github.com/opencv/opencv/tree/master/data/haarcascades\n        :param input_resize: set it if you want to resize image **before** running face detector\n        :param output_resize: target size of output image\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "paths", "=", "paths", ",", "resize", "=", "input_resize", ",", "root", "=", "root", ")", "\n", "self", ".", "classifier", "=", "cv2", ".", "CascadeClassifier", "(", "classifier_path", ")", "\n", "self", ".", "margin_ratio", "=", "margin_ratio", "\n", "self", ".", "output_resize", "=", "output_resize", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.face_dataset.FaceImageDataset.get_example": [[33, 62], ["super().get_example", "numpy.asarray", "face_dataset.FaceImageDataset.classifier.detectMultiScale", "int", "len", "cv2.cvtColor", "len", "min", "PIL.Image.fromarray", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PairImageDataset.get_example"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[str, Image]", "\n", "        ", "path", ",", "image", "=", "super", "(", ")", ".", "get_example", "(", "i", ")", "\n", "image_array", "=", "numpy", ".", "asarray", "(", "image", ")", "\n", "image_height", ",", "image_width", "=", "image_array", ".", "shape", "[", ":", "2", "]", "\n", "if", "len", "(", "image_array", ".", "shape", ")", "==", "2", ":", "# gray image", "\n", "            ", "gray", "=", "image_array", "\n", "", "else", ":", "\n", "            ", "gray", "=", "cv2", ".", "cvtColor", "(", "image_array", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "", "facerects", "=", "self", ".", "classifier", ".", "detectMultiScale", "(", "\n", "gray", ",", "\n", "scaleFactor", "=", "1.1", ",", "\n", "minNeighbors", "=", "5", ",", "\n", "minSize", "=", "(", "64", ",", "64", ")", ")", "\n", "if", "len", "(", "facerects", ")", "==", "0", ":", "\n", "            ", "return", "path", ",", "None", "# more sophisticated way to handle errors?", "\n", "", "x", ",", "y", ",", "width", ",", "_", "=", "facerects", "[", "0", "]", "\n", "margin", "=", "int", "(", "width", "*", "self", ".", "margin_ratio", ")", "\n", "if", "min", "(", "\n", "y", ",", "image_height", "-", "y", "-", "width", ",", "\n", "x", ",", "image_width", "-", "x", "-", "width", ",", "\n", ")", "<", "margin", ":", "# cannot crop", "\n", "            ", "return", "path", ",", "None", "\n", "\n", "", "cropped", "=", "image_array", "[", "y", "-", "margin", ":", "y", "+", "width", "+", "margin", ",", "x", "-", "margin", ":", "x", "+", "width", "+", "margin", "]", "\n", "if", "self", ".", "output_resize", "is", "None", ":", "\n", "            ", "return", "path", ",", "Image", ".", "fromarray", "(", "cropped", ")", "\n", "", "else", ":", "\n", "            ", "return", "path", ",", "Image", ".", "fromarray", "(", "cropped", ")", ".", "resize", "(", "self", ".", "output_resize", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.InputOutputDatsetInterface.get_input_luminance_range": [[27, 30], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.InputOutputDatsetInterface.get_input_range": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.InputOutputDatsetInterface.get_output_range": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.PILImageDatasetBase.__init__": [[41, 56], ["isinstance", "open", "path.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "resize", "=", "None", ",", "random_crop_size", "=", "None", ",", "random_flip", "=", "False", ",", "test", "=", "False", ",", "root", "=", "'.'", ")", ":", "\n", "        ", "\"\"\"\n        :param resize: if it is not None, resize image\n        :param random_crop_size: if it is not None, random crop image after resize\n        :param random_flip: if it is True, random flip image right left\n        \"\"\"", "\n", "if", "isinstance", "(", "paths", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "with", "open", "(", "paths", ")", "as", "paths_file", ":", "\n", "                ", "paths", "=", "[", "path", ".", "strip", "(", ")", "for", "path", "in", "paths_file", "]", "\n", "", "", "self", ".", "_paths", "=", "paths", "\n", "self", ".", "_root", "=", "root", "\n", "self", ".", "_resize", "=", "resize", "\n", "self", ".", "_crop_size", "=", "random_crop_size", "\n", "self", ".", "_flip", "=", "random_flip", "\n", "self", ".", "_test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.PILImageDatasetBase.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.PILImageDatasetBase.get_example": [[60, 90], ["os.path.join", "PIL.Image.open", "image.transpose.transpose.resize", "image.transpose.transpose.crop", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "image.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[str, Image]", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "self", ".", "_paths", "[", "i", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "path", ")", "\n", "\n", "if", "self", ".", "_resize", "is", "not", "None", ":", "\n", "            ", "image", "=", "image", ".", "resize", "(", "self", ".", "_resize", ")", "\n", "\n", "", "if", "self", ".", "_crop_size", "is", "not", "None", ":", "\n", "            ", "width", ",", "height", "=", "image", ".", "size", "\n", "\n", "if", "self", ".", "_test", "is", "True", ":", "\n", "                ", "top", "=", "int", "(", "(", "height", "-", "self", ".", "_crop_size", "[", "1", "]", ")", "/", "2", ")", "\n", "left", "=", "int", "(", "(", "width", "-", "self", ".", "_crop_size", "[", "0", "]", ")", "/", "2", ")", "\n", "bottom", "=", "top", "+", "self", ".", "_crop_size", "[", "1", "]", "\n", "right", "=", "left", "+", "self", ".", "_crop_size", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "                ", "top", "=", "numpy", ".", "random", ".", "randint", "(", "height", "-", "self", ".", "_crop_size", "[", "1", "]", "+", "1", ")", "\n", "left", "=", "numpy", ".", "random", ".", "randint", "(", "width", "-", "self", ".", "_crop_size", "[", "0", "]", "+", "1", ")", "\n", "bottom", "=", "top", "+", "self", ".", "_crop_size", "[", "1", "]", "\n", "right", "=", "left", "+", "self", ".", "_crop_size", "[", "0", "]", "\n", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ")", "\n", "\n", "", "if", "self", ".", "_flip", ":", "\n", "            ", "if", "numpy", ".", "random", ".", "randint", "(", "2", ")", "==", "1", ":", "\n", "                ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "", "return", "path", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.PILImageDataset.get_example": [[93, 96], ["image_dataset.PILImageDatasetBase.get_example"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PairImageDataset.get_example"], ["    ", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> Image", "\n", "        ", "return", "super", "(", "PILImageDataset", ",", "self", ")", ".", "get_example", "(", "i", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.__init__": [[99, 103], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "# type: (PILImageDataset, any) -> any", "\n", "        ", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "base", "=", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.__len__": [[104, 106], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.get_example": [[107, 117], ["PIL.ImageOps.grayscale", "[].transpose", "numpy.asarray().transpose", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "\"\"\"\n        :return: (RGB array [0~255], gray array [0~255], RGB array [0~255])\n        \"\"\"", "\n", "image", "=", "self", ".", "base", "[", "i", "]", "\n", "rgb_image_data", "=", "numpy", ".", "asarray", "(", "image", ",", "dtype", "=", "self", ".", "_dtype", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "gray_image", "=", "ImageOps", ".", "grayscale", "(", "image", ")", "\n", "gray_image_data", "=", "numpy", ".", "asarray", "(", "gray_image", ",", "dtype", "=", "self", ".", "_dtype", ")", "[", ":", ",", ":", ",", "numpy", ".", "newaxis", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "rgb_image_data", ",", "gray_image_data", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.get_input_luminance_range": [[118, 120], ["None"], "methods", ["None"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.get_input_range": [[121, 123], ["None"], "methods", ["None"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.ColorMonoImageDataset.get_output_range": [[124, 126], ["None"], "methods", ["None"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.__init__": [[129, 132], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "# type: (ColorMonoImageDataset) -> None", "\n", "        ", "self", ".", "base", "=", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.__len__": [[133, 135], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.get_example": [[136, 144], ["skimage.color.rgb2lab().transpose().astype", "numpy.expand_dims", "rgb_image_data.transpose", "skimage.color.rgb2lab().transpose", "skimage.color.rgb2lab"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "rgb_image_data", ",", "gray_image_data", ",", "_", "=", "self", ".", "base", "[", "i", "]", "\n", "dtype", "=", "rgb_image_data", ".", "dtype", "\n", "image_data", "=", "rgb_image_data", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "/", "255", "\n", "lab_image_data", "=", "rgb2lab", "(", "image_data", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "dtype", ")", "\n", "luminous_image_data", "=", "numpy", ".", "expand_dims", "(", "lab_image_data", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "return", "lab_image_data", ",", "luminous_image_data", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.get_input_luminance_range": [[145, 147], ["None"], "methods", ["None"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "color", ".", "lab_min_max", "[", "0", "]", "[", "0", "]", ",", "color", ".", "lab_min_max", "[", "1", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.get_input_range": [[148, 150], ["None"], "methods", ["None"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "color", ".", "lab_min_max", "[", "0", "]", "[", "0", "]", ",", "color", ".", "lab_min_max", "[", "1", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabImageDataset.get_output_range": [[151, 153], ["tuple", "range"], "methods", ["None"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "(", "color", ".", "lab_min_max", "[", "0", "]", "[", "i", "]", ",", "color", ".", "lab_min_max", "[", "1", "]", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.__init__": [[156, 159], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "# type: (LabImageDataset) -> None", "\n", "        ", "self", ".", "base", "=", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.__len__": [[160, 162], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.get_example": [[163, 167], ["None"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "lab_image_data", ",", "luminous_image_data", ",", "rgb_image_data", "=", "self", ".", "base", "[", "i", "]", "\n", "return", "lab_image_data", "[", "1", ":", "]", ",", "luminous_image_data", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.get_input_luminance_range": [[168, 170], ["image_dataset.LabOnlyChromaticityDataset.base.get_input_luminance_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_input_luminance_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.get_input_range": [[171, 173], ["image_dataset.LabOnlyChromaticityDataset.base.get_input_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_input_range"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_input_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOnlyChromaticityDataset.get_output_range": [[174, 176], ["image_dataset.LabOnlyChromaticityDataset.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_output_range", "(", ")", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.__init__": [[179, 182], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "# type: (LabImageDataset) -> None", "\n", "        ", "self", ".", "base", "=", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.__len__": [[183, 185], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.get_example": [[186, 194], ["numpy.squeeze().astype", "image_dataset.LineDrawingDatasetBase.convert_to_linedrawing", "numpy.expand_dims", "numpy.expand_dims.astype", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabDilateDiffImageDataset.convert_to_linedrawing"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "lab_image_data", ",", "luminous_image_data", ",", "rgb_image_data", "=", "self", ".", "base", "[", "i", "]", "\n", "luminous_image_data", "=", "numpy", ".", "squeeze", "(", "luminous_image_data", ")", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "linedrawing", "=", "self", ".", "convert_to_linedrawing", "(", "luminous_image_data", ")", "\n", "linedrawing", "=", "linedrawing", ".", "astype", "(", "numpy", ".", "float32", ")", "/", "255", "\n", "linedrawing", "=", "numpy", ".", "expand_dims", "(", "linedrawing", ",", "axis", "=", "0", ")", "\n", "return", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.convert_to_linedrawing": [[195, 197], ["NotImplementedError"], "methods", ["None"], ["", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.get_input_luminance_range": [[198, 200], ["None"], "methods", ["None"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.get_input_range": [[201, 203], ["None"], "methods", ["None"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LineDrawingDatasetBase.get_output_range": [[204, 206], ["image_dataset.LineDrawingDatasetBase.base.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_output_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabOtsuThresholdImageDataset.convert_to_linedrawing": [[209, 212], ["cv2.threshold"], "methods", ["None"], ["    ", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "linedrawing", "=", "cv2", ".", "threshold", "(", "luminous_image_data", ",", "0", ",", "255", ",", "cv2", ".", "THRESH_BINARY", "|", "cv2", ".", "THRESH_OTSU", ")", "[", "1", "]", "\n", "return", "linedrawing", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabAdaptiveThresholdImageDataset.convert_to_linedrawing": [[215, 219], ["cv2.adaptiveThreshold"], "methods", ["None"], ["    ", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "linedrawing", "=", "cv2", ".", "adaptiveThreshold", "(", "luminous_image_data", ",", "255", ",", "cv2", ".", "ADAPTIVE_THRESH_GAUSSIAN_C", ",", "cv2", ".", "THRESH_BINARY", ",", "\n", "11", ",", "2", ")", "\n", "return", "linedrawing", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabCannyImageDataset.convert_to_linedrawing": [[222, 229], ["numpy.ones", "cv2.Canny", "cv2.bitwise_not", "cv2.erode", "cv2.dilate"], "methods", ["None"], ["    ", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "kernel", "=", "numpy", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "numpy", ".", "uint8", ")", "\n", "linedrawing", "=", "cv2", ".", "Canny", "(", "luminous_image_data", ",", "5", ",", "125", ")", "\n", "linedrawing", "=", "cv2", ".", "bitwise_not", "(", "linedrawing", ")", "\n", "linedrawing", "=", "cv2", ".", "erode", "(", "linedrawing", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "linedrawing", "=", "cv2", ".", "dilate", "(", "linedrawing", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "return", "linedrawing", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabThreeValueThresholdImageDataset.convert_to_linedrawing": [[232, 273], ["hist.reshape.reshape.reshape", "len", "numpy.arange", "range", "luminous_image_data.reshape", "range", "luminous_image_data.reshape.reshape", "skimage.exposure.histogram", "numpy.prod", "range", "numpy.prod", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["None"], ["    ", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "hist", "=", "exposure", ".", "histogram", "(", "luminous_image_data", ")", "[", "0", "]", "\n", "hist", "=", "hist", ".", "reshape", "(", "numpy", ".", "prod", "(", "hist", ".", "shape", ")", ")", "\n", "n", "=", "len", "(", "hist", ")", "\n", "\n", "value", "=", "numpy", ".", "arange", "(", "n", ",", "dtype", "=", "numpy", ".", "float", ")", "\n", "\n", "# find best thresholds", "\n", "t1", "=", "0", "\n", "t2", "=", "n", "\n", "max_var", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "n", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "                ", "w1", "=", "numpy", ".", "sum", "(", "hist", "[", "0", ":", "i", "]", ")", "\n", "w2", "=", "numpy", ".", "sum", "(", "hist", "[", "i", ":", "j", "]", ")", "\n", "w3", "=", "numpy", ".", "sum", "(", "hist", "[", "j", ":", "n", "]", ")", "\n", "if", "w1", "==", "0", "or", "w2", "==", "0", "or", "w3", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "m1", "=", "numpy", ".", "dot", "(", "hist", "[", "0", ":", "i", "]", ",", "value", "[", "0", ":", "i", "]", ")", "/", "w1", "\n", "m2", "=", "numpy", ".", "dot", "(", "hist", "[", "i", ":", "j", "]", ",", "value", "[", "i", ":", "j", "]", ")", "/", "w2", "\n", "m3", "=", "numpy", ".", "dot", "(", "hist", "[", "j", ":", "n", "]", ",", "value", "[", "j", ":", "n", "]", ")", "/", "w3", "\n", "var", "=", "w1", "*", "w2", "*", "(", "m1", "-", "m2", ")", "**", "2", "+", "w2", "*", "w3", "*", "(", "m2", "-", "m3", ")", "**", "2", "+", "w3", "*", "w1", "*", "(", "m3", "-", "m1", ")", "**", "2", "\n", "if", "max_var", "<", "var", ":", "\n", "                    ", "max_var", "=", "var", "\n", "t1", "=", "i", "\n", "t2", "=", "j", "\n", "\n", "# quantize", "\n", "", "", "", "retimg", "=", "luminous_image_data", ".", "reshape", "(", "numpy", ".", "prod", "(", "luminous_image_data", ".", "shape", ")", ")", "\n", "for", "i", "in", "range", "(", "retimg", ".", "size", ")", ":", "\n", "            ", "value", "=", "retimg", "[", "i", "]", "\n", "if", "value", "<", "t1", ":", "\n", "                ", "value", "=", "0", "\n", "", "elif", "value", "<", "t2", ":", "\n", "                ", "value", "=", "127", "\n", "", "else", ":", "\n", "                ", "value", "=", "255", "\n", "", "retimg", "[", "i", "]", "=", "value", "\n", "", "return", "retimg", ".", "reshape", "(", "luminous_image_data", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabDilateDiffImageDataset.convert_to_linedrawing": [[276, 287], ["numpy.array", "cv2.dilate", "cv2.absdiff", "cv2.bitwise_not"], "methods", ["None"], ["    ", "def", "convert_to_linedrawing", "(", "self", ",", "luminous_image_data", ")", ":", "\n", "        ", "neiborhood24", "=", "numpy", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "numpy", ".", "uint8", ")", "\n", "dilated", "=", "cv2", ".", "dilate", "(", "luminous_image_data", ",", "neiborhood24", ",", "iterations", "=", "1", ")", "\n", "diff", "=", "cv2", ".", "absdiff", "(", "dilated", ",", "luminous_image_data", ")", "\n", "linedrawing", "=", "cv2", ".", "bitwise_not", "(", "diff", ")", "\n", "return", "linedrawing", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.__init__": [[290, 306], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "base", ",", "\n", "max_point", ",", "\n", "max_size", ",", "\n", "fix_position", "=", "False", ",", "\n", ")", ":", "\n", "# type: (LineDrawingDatasetBase, int, int, any) -> None", "\n", "        ", "\"\"\"\n        :param max_point: max number of drawing point (is not pixel size)\n        \"\"\"", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "max_point", "=", "max_point", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n", "self", ".", "fix_position", "=", "fix_position", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.__len__": [[307, 309], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.get_example": [[310, 345], ["numpy.pad", "numpy.random.randint", "numpy.asarray", "numpy.concatenate", "numpy.asarray", "image_dataset.LabSeveralPixelDrawingImageDataset.get_input_luminance_range", "comicolorization.utility.color.normalize", "numpy.random.randint", "numpy.random.permutation", "numpy.linspace", "numpy.linspace", "image_dataset.LabSeveralPixelDrawingImageDataset.get_output_range", "numpy.array", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "=", "self", ".", "base", "[", "i", "]", "\n", "color_linedrawing", "=", "numpy", ".", "pad", "(", "linedrawing", ",", "(", "(", "0", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "width", ",", "height", "=", "linedrawing", ".", "shape", "[", "1", ":", "]", "\n", "\n", "if", "not", "self", ".", "fix_position", ":", "\n", "            ", "num_point", "=", "numpy", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "max_point", ")", "\n", "size_point", "=", "numpy", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "max_size", ")", "+", "1", "\n", "\n", "top_points", "=", "numpy", ".", "asarray", "(", "\n", "[", "[", "x", ",", "y", "]", "for", "x", "in", "range", "(", "width", "-", "(", "size_point", "-", "1", ")", ")", "for", "y", "in", "range", "(", "height", "-", "(", "size_point", "-", "1", ")", ")", "]", ")", "\n", "top_points", "=", "numpy", ".", "random", ".", "permutation", "(", "top_points", ")", "[", ":", "num_point", "]", "\n", "\n", "expanded_points_list", "=", "[", "top_points", "+", "numpy", ".", "array", "(", "[", "x", ",", "y", "]", ")", "for", "x", "in", "range", "(", "size_point", ")", "for", "y", "in", "\n", "range", "(", "size_point", ")", "]", "\n", "points", "=", "numpy", ".", "concatenate", "(", "expanded_points_list", ")", "\n", "", "else", ":", "\n", "            ", "nx", "=", "ny", "=", "3", "\n", "xs", "=", "numpy", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "nx", "+", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", "[", "1", ":", "-", "1", "]", "\n", "ys", "=", "numpy", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "ny", "+", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", "[", "1", ":", "-", "1", "]", "\n", "points", "=", "numpy", ".", "asarray", "(", "[", "[", "x", ",", "y", "]", "for", "x", "in", "xs", "for", "y", "in", "ys", "]", ")", "\n", "\n", "", "for", "x", ",", "y", "in", "points", ":", "\n", "            ", "linedrawing_luminance", "=", "self", ".", "get_input_luminance_range", "(", ")", "\n", "lab_luminance", "=", "self", ".", "get_output_range", "(", ")", "[", "0", "]", "\n", "color_linedrawing", "[", "0", ",", "x", ",", "y", "]", "=", "color", ".", "normalize", "(", "\n", "lab_image_data", "[", "0", ",", "x", ",", "y", "]", ",", "\n", "in_min", "=", "lab_luminance", "[", "0", "]", ",", "in_max", "=", "lab_luminance", "[", "1", "]", ",", "\n", "out_min", "=", "linedrawing_luminance", "[", "0", "]", ",", "out_max", "=", "linedrawing_luminance", "[", "1", "]", ",", "\n", ")", "\n", "color_linedrawing", "[", "1", ":", ",", "x", ",", "y", "]", "=", "lab_image_data", "[", "1", ":", ",", "x", ",", "y", "]", "\n", "\n", "", "return", "lab_image_data", ",", "color_linedrawing", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.get_input_luminance_range": [[346, 348], ["image_dataset.LabSeveralPixelDrawingImageDataset.base.get_input_luminance_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_input_luminance_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.get_input_range": [[349, 352], ["image_dataset.LabSeveralPixelDrawingImageDataset.base.get_output_range", "image_dataset.LabSeveralPixelDrawingImageDataset.base.get_input_luminance_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "output_range", "=", "self", ".", "base", ".", "get_output_range", "(", ")", "\n", "return", "self", ".", "base", ".", "get_input_luminance_range", "(", ")", ",", "output_range", "[", "1", "]", ",", "output_range", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.LabSeveralPixelDrawingImageDataset.get_output_range": [[353, 355], ["image_dataset.LabSeveralPixelDrawingImageDataset.base.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_output_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.__init__": [[358, 361], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "# type: (LabImageDataset) -> None", "\n", "        ", "self", ".", "base", "=", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.__len__": [[362, 364], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.get_example": [[365, 374], ["skimage.filters.threshold_otsu", "numpy.zeros"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "# type: (any) -> typing.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]", "\n", "        ", "lab_image_data", ",", "luminous_image_data", ",", "rgb_image_data", "=", "self", ".", "base", "[", "i", "]", "\n", "\n", "threshold", "=", "skimage", ".", "filters", ".", "threshold_otsu", "(", "luminous_image_data", ")", "\n", "\n", "binarized_image", "=", "numpy", ".", "zeros", "(", "luminous_image_data", ".", "shape", ",", "dtype", "=", "luminous_image_data", ".", "dtype", ")", "\n", "binarized_image", "[", "luminous_image_data", ">", "threshold", "]", "=", "1", "\n", "return", "lab_image_data", ",", "binarized_image", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.get_input_luminance_range": [[375, 377], ["None"], "methods", ["None"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.get_input_range": [[378, 380], ["None"], "methods", ["None"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.image_dataset.BinarizationImageDataset.get_output_range": [[381, 383], ["image_dataset.BinarizationImageDataset.base.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "get_output_range", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_directory_name": [[9, 12], ["os.path.basename", "os.path.dirname"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_directory_name", "(", "path", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.__init__": [[13, 25], ["isinstance", "list", "set", "open", "path.strip", "classifier_dataset.LabeledByDirectoryDataset.get_directory_name"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_directory_name"], ["", "def", "__init__", "(", "self", ",", "paths", ",", "base_dataset", ")", ":", "\n", "        ", "\"\"\"\n        ex. paths = root/a/1.png root/b/2.png root/c/3.png -> labeled a,b,c\n        \"\"\"", "\n", "if", "isinstance", "(", "paths", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "with", "open", "(", "paths", ")", "as", "paths_file", ":", "\n", "                ", "paths", "=", "[", "path", ".", "strip", "(", ")", "for", "path", "in", "paths_file", "]", "\n", "", "", "self", ".", "_paths", "=", "paths", "\n", "\n", "self", ".", "class_name_list", "=", "list", "(", "set", "(", "self", ".", "get_directory_name", "(", "path", ")", "for", "path", "in", "paths", ")", ")", "\n", "\n", "self", ".", "base_dataset", "=", "base_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_example": [[29, 36], ["classifier_dataset.LabeledByDirectoryDataset.get_directory_name", "numpy.array", "classifier_dataset.LabeledByDirectoryDataset.class_name_list.index"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_directory_name"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        :return: (base_dataset_class's data, label)\n        \"\"\"", "\n", "class_name", "=", "self", ".", "get_directory_name", "(", "self", ".", "_paths", "[", "i", "]", ")", "\n", "label", "=", "numpy", ".", "array", "(", "self", ".", "class_name_list", ".", "index", "(", "class_name", ")", ",", "numpy", ".", "int32", ")", "\n", "return", "self", ".", "base_dataset", "[", "i", "]", "+", "(", "label", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_input_range": [[37, 39], ["classifier_dataset.LabeledByDirectoryDataset.base_dataset.get_input_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_input_range"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_input_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_input_luminance_range": [[40, 42], ["classifier_dataset.LabeledByDirectoryDataset.base_dataset.get_input_luminance_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_input_luminance_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.LabeledByDirectoryDataset.get_output_range": [[43, 45], ["classifier_dataset.LabeledByDirectoryDataset.base_dataset.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_output_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_image_id": [[72, 83], ["os.path.splitext", "filename.split", "os.path.basename"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get_image_id", "(", "path", ")", ":", "\n", "        ", "\"\"\"\n        >>> MultiTagLabeledDataset.get_image_id('/path/to/image/12345.png')\n        '12345'\n        >>> MultiTagLabeledDataset.get_image_id('/path/to/image/12345-67.png')\n        '12345'\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "\n", "image_id", "=", "filename", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "return", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.__init__": [[84, 95], ["isinstance", "len", "json.load", "json.load", "open", "open", "open", "path.strip"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "paths", ",", "base_dataset", ",", "path_tag_list", ",", "path_tag_list_each_image", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "with", "open", "(", "paths", ")", "as", "paths_file", ":", "\n", "                ", "paths", "=", "[", "path", ".", "strip", "(", ")", "for", "path", "in", "paths_file", "]", "\n", "", "", "self", ".", "_paths", "=", "paths", "\n", "\n", "self", ".", "tag_id_list", "=", "json", ".", "load", "(", "open", "(", "path_tag_list", ",", "encoding", "=", "'utf-8'", ")", ")", "[", "'id'", "]", "\n", "self", ".", "num_tag", "=", "len", "(", "self", ".", "tag_id_list", ")", "\n", "self", ".", "tag_id_list_each_image", "=", "json", ".", "load", "(", "open", "(", "path_tag_list_each_image", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "\n", "self", ".", "base_dataset", "=", "base_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_example": [[99, 111], ["classifier_dataset.MultiTagLabeledDataset.get_image_id", "numpy.zeros", "classifier_dataset.MultiTagLabeledDataset.tag_id_list.index"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_image_id"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        :return: (base_dataset_class's data, binary label of tag)\n        \"\"\"", "\n", "image_id", "=", "self", ".", "get_image_id", "(", "self", ".", "_paths", "[", "i", "]", ")", "\n", "tag_id_list_this_image", "=", "self", ".", "tag_id_list_each_image", "[", "image_id", "]", "\n", "label_index_list", "=", "[", "self", ".", "tag_id_list", ".", "index", "(", "tag_id", ")", "for", "tag_id", "in", "tag_id_list_this_image", "]", "\n", "\n", "label", "=", "numpy", ".", "zeros", "(", "self", ".", "num_tag", ",", "numpy", ".", "int32", ")", "\n", "label", "[", "label_index_list", "]", "=", "1", "\n", "\n", "return", "self", ".", "base_dataset", "[", "i", "]", "+", "(", "label", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_input_range": [[112, 114], ["classifier_dataset.MultiTagLabeledDataset.base_dataset.get_input_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_input_range"], ["", "def", "get_input_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_input_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_input_luminance_range": [[115, 117], ["classifier_dataset.MultiTagLabeledDataset.base_dataset.get_input_luminance_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_input_luminance_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.dataset.classifier_dataset.MultiTagLabeledDataset.get_output_range": [[118, 120], ["classifier_dataset.MultiTagLabeledDataset.base_dataset.get_output_range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_output_range", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.BaseSaveImageExtension._save_images_with_trainer": [[6, 20], ["os.path.join", "prefix_filename.format.format.format", "save_images", "prefix_directory.format"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.save_images"], ["    ", "@", "staticmethod", "\n", "def", "_save_images_with_trainer", "(", "\n", "trainer", ",", "\n", "images", ",", "\n", "prefix_directory", ",", "\n", "prefix_filename", ",", "\n", ")", ":", "\n", "# type: (chainer.training.Trainer,  typing.List[Image.Image], any, any) -> any", "\n", "        ", "\"\"\"\n        :param trainer: chainer Trainer\n        \"\"\"", "\n", "path_directory", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "out", ",", "prefix_directory", ".", "format", "(", "trainer", ")", ")", "\n", "prefix_filename", "=", "prefix_filename", ".", "format", "(", "trainer", ")", "\n", "return", "save_images", "(", "images", "=", "images", ",", "path_directory", "=", "path_directory", ",", "prefix_filename", "=", "prefix_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.SaveGeneratedImageExtension.__init__": [[23, 47], ["chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_gpu", "chainer.cuda.to_gpu"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "gray_images_array", ",", "\n", "rgb_images_array", ",", "\n", "model", ",", "\n", "prefix_directory", ",", "\n", "prefix_filename", "=", "\"\"", ",", "\n", "image_mode", "=", "'RGB'", ",", "\n", ")", ":", "\n", "# type: (any, any, BaseModel, str, str, any) -> None", "\n", "        ", "\"\"\"\n        :param mode: mode of generated images\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "prefix_directory", "=", "prefix_directory", "\n", "self", ".", "prefix_filename", "=", "prefix_filename", "\n", "self", ".", "image_mode", "=", "image_mode", "\n", "\n", "if", "self", ".", "model", ".", "_cpu", ":", "\n", "            ", "self", ".", "gray_images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "gray_images_array", ")", "\n", "self", ".", "rgb_images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "rgb_images_array", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gray_images_array", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "gray_images_array", ")", "\n", "self", ".", "rgb_images_array", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "rgb_images_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.SaveGeneratedImageExtension.__call__": [[48, 52], ["save_images.SaveGeneratedImageExtension.model.generate_rgb_image", "save_images.SaveGeneratedImageExtension._save_images_with_trainer"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.ltbc.Ltbc.generate_rgb_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.BaseSaveImageExtension._save_images_with_trainer"], ["", "", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "# type: (chainer.training.Trainer) -> None", "\n", "        ", "images", "=", "self", ".", "model", ".", "generate_rgb_image", "(", "self", ".", "gray_images_array", ",", "rgb_images_array", "=", "self", ".", "rgb_images_array", ")", "\n", "self", ".", "_save_images_with_trainer", "(", "trainer", ",", "images", ",", "self", ".", "prefix_directory", ",", "self", ".", "prefix_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.SaveRawImageExtension.__init__": [[55, 69], ["chainer.cuda.to_cpu"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "images_array", ",", "\n", "prefix_directory", ",", "\n", "prefix_filename", "=", "\"\"", ",", "\n", "image_mode", "=", "'RGB'", ",", "\n", "linedrawing", "=", "None", ",", "\n", ")", ":", "\n", "# type: (any, str, str, any, any) -> None", "\n", "        ", "self", ".", "prefix_directory", "=", "prefix_directory", "\n", "self", ".", "prefix_filename", "=", "prefix_filename", "\n", "self", ".", "images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "images_array", ")", "\n", "self", ".", "image_mode", "=", "image_mode", "\n", "self", ".", "linedrawing", "=", "linedrawing", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.SaveRawImageExtension.__call__": [[70, 85], ["save_images.SaveRawImageExtension._save_images_with_trainer", "array_to_image", "array_to_image"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.extensions.save_images.BaseSaveImageExtension._save_images_with_trainer", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image"], ["", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "# type: (chainer.training.Trainer) -> None", "\n", "        ", "if", "self", ".", "image_mode", "==", "'gray'", ":", "\n", "            ", "images", "=", "array_to_image", "(", "\n", "gray_images_array", "=", "self", ".", "images_array", ",", "\n", "mode", "=", "self", ".", "image_mode", ",", "\n", "linedrawing", "=", "self", ".", "linedrawing", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "array_to_image", "(", "\n", "color_images_array", "=", "self", ".", "images_array", ",", "\n", "mode", "=", "self", ".", "image_mode", ",", "\n", "linedrawing", "=", "self", ".", "linedrawing", ",", "\n", ")", "\n", "", "self", ".", "_save_images_with_trainer", "(", "trainer", ",", "images", ",", "self", ".", "prefix_directory", ",", "self", ".", "prefix_filename", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.discriminator.Discriminator.__init__": [[7, 26], ["chainer.Chain.__init__", "chainer.functions.AveragePooling2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.functions.Linear", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "first_pooling_size", "=", "1", ")", ":", "\n", "        ", "last_size", "=", "size", "//", "(", "2", "**", "4", ")", "//", "first_pooling_size", "\n", "\n", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", "\n", "c0", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "3", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "c1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "c2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "c3", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "256", ",", "512", ",", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "bn0", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "64", ")", ",", "\n", "bn1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "128", ")", ",", "\n", "bn2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "256", ")", ",", "\n", "bn3", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "l0z", "=", "chainer", ".", "functions", ".", "Linear", "(", "last_size", "**", "2", "*", "512", ",", "1", ",", "wscale", "=", "0.02", "*", "math", ".", "sqrt", "(", "last_size", "**", "2", "*", "512", ")", ")", ",", "\n", ")", "\n", "\n", "if", "first_pooling_size", ">", "1", ":", "\n", "            ", "self", ".", "first_pooling", "=", "chainer", ".", "functions", ".", "AveragePooling2D", "(", "first_pooling_size", ",", "stride", "=", "first_pooling_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "first_pooling", "=", "lambda", "x", ":", "x", "# through pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.discriminator.Discriminator.__call__": [[27, 35], ["discriminator.Discriminator.first_pooling", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "discriminator.Discriminator.l0z", "discriminator.Discriminator.c0", "discriminator.Discriminator.bn1", "discriminator.Discriminator.bn2", "discriminator.Discriminator.bn3", "discriminator.Discriminator.c1", "discriminator.Discriminator.c2", "discriminator.Discriminator.c3"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "first_pooling", "(", "x", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "c0", "(", "h", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "c1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "c2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "c3", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "l", "=", "self", ".", "l0z", "(", "h", ")", "\n", "return", "l", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.normalize.ColorNormalize.__init__": [[7, 13], ["chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "in_min", ",", "in_max", ")", ":", "\n", "# type: (str, typing.Tuple, typing.Tuple) -> None", "\n", "        ", "super", "(", "ColorNormalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "in_min", "=", "in_min", "\n", "self", ".", "in_max", "=", "in_max", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.normalize.ColorNormalize.__call__": [[14, 38], ["tuple", "chainer.functions.concat", "comicolorization.utility.color.normalize", "ValueError", "enumerate", "chainer.functions.split_axis"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize"], ["", "def", "__call__", "(", "self", ",", "h", ")", ":", "\n", "        ", "in_min", "=", "self", ".", "in_min", "\n", "in_max", "=", "self", ".", "in_max", "\n", "\n", "if", "self", ".", "type", "==", "'RGB'", ":", "\n", "            ", "out_min", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "out_max", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "", "elif", "self", ".", "type", "==", "'Lab'", ":", "\n", "            ", "out_min", ",", "out_max", "=", "utility", ".", "color", ".", "lab_min_max", "\n", "", "elif", "self", ".", "type", "==", "'ab'", ":", "\n", "            ", "out_min", ",", "out_max", "=", "utility", ".", "color", ".", "lab_min_max", "\n", "in_min", "=", "self", ".", "in_min", "[", "1", ":", "]", "\n", "in_max", "=", "self", ".", "in_max", "[", "1", ":", "]", "\n", "out_min", "=", "out_min", "[", "1", ":", "]", "\n", "out_max", "=", "out_max", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "self", ".", "type", ")", "\n", "\n", "", "h_channels", "=", "tuple", "(", "\n", "utility", ".", "color", ".", "normalize", "(", "h_channel", ",", "in_min", "[", "i", "]", ",", "in_max", "[", "i", "]", ",", "out_min", "[", "i", "]", ",", "out_max", "[", "i", "]", ")", "\n", "for", "i", ",", "h_channel", "in", "enumerate", "(", "chainer", ".", "functions", ".", "split_axis", "(", "h", ",", "h", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ",", "force_tuple", "=", "True", ")", ")", "\n", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "concat", "(", "h_channels", ",", "axis", "=", "1", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.simple_convolution.SimpleConvolution.__init__": [[9, 40], ["base_model.BaseModel.__init__", "chainer.functions.Convolution2D", "chainer.functions.Convolution2D", "chainer.functions.Convolution2D", "chainer.functions.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", "=", "'RGB'", ")", ":", "\n", "        ", "out_channels", "=", "2", "if", "loss_type", "==", "'ab'", "else", "3", "\n", "super", "(", "SimpleConvolution", ",", "self", ")", ".", "__init__", "(", "\n", "conv1", "=", "chainer", ".", "functions", ".", "Convolution2D", "(", "\n", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "64", ",", "\n", "ksize", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "3", ")", ",", "\n", "conv2", "=", "chainer", ".", "functions", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "128", ",", "\n", "ksize", "=", "7", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "3", ")", ",", "\n", "fc1", "=", "chainer", ".", "functions", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "64", ",", "\n", "ksize", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ")", ",", "\n", "fc2", "=", "chainer", ".", "functions", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "ksize", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.simple_convolution.SimpleConvolution.generate_rgb_image": [[41, 50], ["utility.image.array_to_image", "simple_convolution.SimpleConvolution."], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image"], ["", "def", "generate_rgb_image", "(", "self", ",", "gray_images_array", ",", "**", "kwargs", ")", ":", "\n", "# type: (any, numpy.ndarray, **any) -> any", "\n", "        ", "color_images_array", "=", "self", "(", "gray_images_array", ",", "test", "=", "True", ")", ".", "data", "\n", "images", "=", "array_to_image", "(", "\n", "color_images_array", ",", "\n", "gray_images_array", "=", "gray_images_array", ",", "\n", "mode", "=", "self", ".", "loss_type", ",", "\n", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.simple_convolution.SimpleConvolution.__call__": [[51, 59], ["chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "simple_convolution.SimpleConvolution.fc2", "simple_convolution.SimpleConvolution.conv1", "simple_convolution.SimpleConvolution.conv2", "simple_convolution.SimpleConvolution.fc1"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (chainer.Variable, bool) -> any", "\n", "        ", "h", "=", "x", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "conv1", "(", "h", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "conv2", "(", "h", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "fc2", "(", "h", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.base_model.BaseModel.__call__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> None", "\n", "        ", "\"\"\"\n        this method should return images array related loss mode (Lab, RGB, etc)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.models.base_model.BaseModel.generate_rgb_image": [[13, 16], ["None"], "methods", ["None"], ["", "def", "generate_rgb_image", "(", "self", ",", "gray_images", ",", "**", "kwargs", ")", ":", "\n", "# type: (numpy.ndarray, **any) -> None", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.low_level.LowLevelNetwork.__init__": [[5, 49], ["chainer.Chain.__init__", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LowLevelNetwork", ",", "self", ")", ".", "__init__", "(", "\n", "conv1_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "64", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "64", ")", ",", "\n", "conv1_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "128", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "128", ")", ",", "\n", "conv2_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "128", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn2_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "128", ")", ",", "\n", "conv2_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "256", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn2_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "256", ")", ",", "\n", "conv3_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "256", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn3_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "256", ")", ",", "\n", "conv3_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn3_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.low_level.LowLevelNetwork.__call__": [[51, 61], ["chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "low_level.LowLevelNetwork.bn1_1", "low_level.LowLevelNetwork.bn1_2", "low_level.LowLevelNetwork.bn2_1", "low_level.LowLevelNetwork.bn2_2", "low_level.LowLevelNetwork.bn3_1", "low_level.LowLevelNetwork.bn3_2", "low_level.LowLevelNetwork.conv1_1", "low_level.LowLevelNetwork.conv1_2", "low_level.LowLevelNetwork.conv2_1", "low_level.LowLevelNetwork.conv2_2", "low_level.LowLevelNetwork.conv3_1", "low_level.LowLevelNetwork.conv3_2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "h", "=", "x", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_2", "(", "self", ".", "conv2_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_2", "(", "self", ".", "conv3_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.mid_level.MidLevelNetwork.__init__": [[5, 21], ["chainer.Chain.__init__", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MidLevelNetwork", ",", "self", ")", ".", "__init__", "(", "\n", "conv1_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "conv1_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "256", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "256", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.mid_level.MidLevelNetwork.__call__": [[23, 29], ["chainer.functions.relu", "chainer.functions.relu", "mid_level.MidLevelNetwork.bn1_1", "mid_level.MidLevelNetwork.bn1_2", "mid_level.MidLevelNetwork.conv1_1", "mid_level.MidLevelNetwork.conv1_2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "h", "=", "x", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.ltbc.Ltbc.__init__": [[17, 73], ["base_model.BaseModel.__init__", "ltbc.Ltbc.add_link", "ltbc.Ltbc.add_link", "ltbc.Ltbc.add_link", "low_level.LowLevelNetwork", "mid_level.MidLevelNetwork", "fusion_layer.FusionLayer", "colorization.ColorizationNetwork", "global_network.GlobalNetwork", "classification_network.ClassificationNetwork", "histogram_network.HistogramNetwork"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "use_global", "=", "True", ",", "\n", "use_classification", "=", "False", ",", "\n", "classification_num_output_list", "=", "None", ",", "\n", "use_histogram", "=", "False", ",", "\n", "use_multidimensional_histogram", "=", "False", ",", "\n", "num_bins_histogram", "=", "None", ",", "\n", "threshold_histogram_palette", "=", "None", ",", "\n", "reinput_mode", "=", "None", ",", "\n", "loss_type", "=", "'RGB'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param use_global: if True, use global feature network\n        :param use_classification: if True, use classification network\n        :param use_histogram: if True, use histogram network\n        :param use_multidimensional_histogram: if it is True, multidimensional histogram mode\n        :param threshold_histogram_palette: the threshold of palette mode. if None, then histogram mode.\n        :param reinput_mode:\n            None: no reinput\n            color: can input 3 channel image\n        \"\"\"", "\n", "if", "use_multidimensional_histogram", ":", "\n", "            ", "assert", "use_histogram", ",", "\"when using multidimensional histogram, should set `use_histogram=True`\"", "\n", "\n", "", "out_channels", "=", "2", "if", "loss_type", "==", "'ab'", "else", "3", "\n", "super", "(", "Ltbc", ",", "self", ")", ".", "__init__", "(", "\n", "low_level", "=", "LowLevelNetwork", "(", ")", ",", "\n", "mid_level", "=", "MidLevelNetwork", "(", ")", ",", "\n", "fusion_layer", "=", "FusionLayer", "(", ")", ",", "\n", "colorization", "=", "ColorizationNetwork", "(", "output_channels", "=", "out_channels", ")", ",", "\n", ")", "\n", "\n", "self", ".", "use_global", "=", "use_global", "\n", "self", ".", "use_classification", "=", "use_classification", "\n", "self", ".", "use_histogram", "=", "use_histogram", "\n", "self", ".", "reinput_mode", "=", "reinput_mode", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "if", "self", ".", "use_global", ":", "\n", "            ", "self", ".", "add_link", "(", "\"global_network\"", ",", "GlobalNetwork", "(", "use_classification", "=", "use_classification", ")", ")", "\n", "\n", "", "if", "self", ".", "use_classification", ":", "\n", "            ", "self", ".", "add_link", "(", "\n", "\"classification_network\"", ",", "\n", "ClassificationNetwork", "(", "num_output_list", "=", "classification_num_output_list", ")", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "use_histogram", ":", "\n", "            ", "ranges", "=", "(", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ")", "\n", "self", ".", "add_link", "(", "\"histogram_network\"", ",", "HistogramNetwork", "(", "\n", "ranges", "=", "ranges", ",", "\n", "num_bins", "=", "num_bins_histogram", ",", "\n", "threshold_palette", "=", "threshold_histogram_palette", ",", "\n", "use_multidimensional", "=", "use_multidimensional_histogram", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.ltbc.Ltbc.__call__": [[75, 139], ["ltbc.Ltbc.low_level", "ltbc.Ltbc.mid_level", "ltbc.Ltbc.colorization", "chainer.functions.unpooling_2d", "ltbc.Ltbc.low_level", "one_dimension_feature_list.append", "one_dimension_feature_list.append", "ltbc.Ltbc.fusion_layer", "normalize.ColorNormalize", "ltbc.Ltbc.global_network", "ltbc.Ltbc.global_network", "ltbc.Ltbc.classification_network", "ltbc.Ltbc.histogram_network", "chainer.Variable", "ltbc.Ltbc.xp.zeros", "chainer.functions.concat", "ltbc.Ltbc.xp.array", "x_histogram.reshape"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "x_global", "=", "None", ",", "x_rgb", "=", "None", ",", "x_histogram", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, any, any, any, bool) -> any", "\n", "        ", "\"\"\"\n        :param x: input image\n        :param x_global: global input image. if None, then x_global=x\n        :param x_rgb: reference image for color feature\n        :param x_histogram: color histogram. if it is None, then calc color histogram by reference image\n        \"\"\"", "\n", "if", "self", ".", "use_histogram", ":", "\n", "            ", "assert", "x_rgb", "is", "not", "None", "or", "x_histogram", "is", "not", "None", ",", "\"must give `x_rgb` or `x_histogram`\"", "\n", "assert", "x_rgb", "is", "None", "or", "x_histogram", "is", "None", ",", "\"cannot give `x_rgb` and `x_histogram`\"", "\n", "\n", "", "if", "self", ".", "reinput_mode", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "reinput_mode", "==", "'color'", ":", "\n", "# if gray image, zero padding", "\n", "            ", "if", "x", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "zeropad", "=", "self", ".", "xp", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "2", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x", "=", "chainer", ".", "functions", ".", "concat", "(", "(", "x", ",", "zeropad", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "x_global", "is", "None", ":", "\n", "            ", "x_global", "=", "x", "\n", "\n", "", "h", "=", "x", "\n", "h", "=", "self", ".", "low_level", "(", "h", ",", "test", "=", "test", ")", "\n", "h", "=", "self", ".", "mid_level", "(", "h", ",", "test", "=", "test", ")", "\n", "\n", "h_classification", "=", "None", "\n", "\n", "one_dimension_feature_list", "=", "[", "]", "\n", "if", "self", ".", "use_global", ":", "\n", "            ", "h_global", "=", "x_global", "\n", "h_global", "=", "self", ".", "low_level", "(", "h_global", ",", "test", "=", "test", ")", "\n", "\n", "if", "not", "self", ".", "use_classification", ":", "\n", "                ", "h_global", "=", "self", ".", "global_network", "(", "h_global", ",", "test", "=", "test", ")", "\n", "", "else", ":", "\n", "                ", "h_global", ",", "h_for_classification", "=", "self", ".", "global_network", "(", "h_global", ",", "test", "=", "test", ")", "\n", "h_classification", "=", "self", ".", "classification_network", "(", "h_for_classification", ",", "test", "=", "test", ")", "\n", "\n", "", "one_dimension_feature_list", ".", "append", "(", "h_global", ")", "\n", "\n", "", "if", "self", ".", "use_histogram", ":", "\n", "            ", "if", "x_histogram", "is", "None", ":", "\n", "                ", "h_histogram", "=", "self", ".", "histogram_network", "(", "x_rgb", ",", "test", "=", "test", ")", "\n", "", "else", ":", "\n", "                ", "h_histogram", "=", "chainer", ".", "Variable", "(", "self", ".", "xp", ".", "array", "(", "x_histogram", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ")", "\n", "", "one_dimension_feature_list", ".", "append", "(", "h_histogram", ")", "\n", "\n", "", "if", "self", ".", "use_global", "or", "self", ".", "use_histogram", ":", "\n", "            ", "h", "=", "self", ".", "fusion_layer", "(", "h", "=", "h", ",", "one_dimension_feature_list", "=", "one_dimension_feature_list", ",", "test", "=", "test", ")", "\n", "\n", "", "h", "=", "self", ".", "colorization", "(", "h", ",", "test", "=", "test", ")", "\n", "h", "=", "h_before_sigmoid", "=", "chainer", ".", "functions", ".", "unpooling_2d", "(", "h", ",", "ksize", "=", "2", ",", "cover_all", "=", "False", ")", "\n", "\n", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "in_max", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "h", "=", "ColorNormalize", "(", "self", ".", "loss_type", ",", "in_min", "=", "in_min", ",", "in_max", "=", "in_max", ")", "(", "h", ")", "\n", "\n", "return", "h", ",", "{", "\n", "'classification'", ":", "h_classification", ",", "\n", "'before_sigmoid'", ":", "h_before_sigmoid", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.ltbc.Ltbc.generate_rgb_image": [[141, 152], ["ltbc.Ltbc.", "utility.image.array_to_image"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image"], ["", "def", "generate_rgb_image", "(", "self", ",", "gray_images_array", ",", "rgb_images_array", "=", "None", ",", "histogram_array", "=", "None", ")", ":", "\n", "        ", "color_images_array", "=", "self", "(", "gray_images_array", ",", "x_rgb", "=", "rgb_images_array", ",", "x_histogram", "=", "histogram_array", ",", "test", "=", "True", ")", "\n", "\n", "color_images_array", "=", "color_images_array", "[", "0", "]", "\n", "\n", "images", "=", "array_to_image", "(", "\n", "color_images_array", ".", "data", ",", "\n", "gray_images_array", "=", "gray_images_array", ",", "\n", "mode", "=", "self", ".", "loss_type", ",", "\n", ")", "\n", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.fusion_layer.FusionLayer.__init__": [[6, 12], ["chainer.Chain.__init__", "chainer.links.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FusionLayer", ",", "self", ")", ".", "__init__", "(", "\n", "conv", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "256", ",", "\n", "ksize", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.fusion_layer.FusionLayer.__call__": [[15, 35], ["chainer.functions.concat", "chainer.functions.broadcast_to", "chainer.functions.transpose", "chainer.functions.concat", "chainer.functions.relu", "fusion_layer.FusionLayer.conv"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "h", ",", "\n", "one_dimension_feature_list", ",", "\n", "test", "=", "False", ",", "\n", ")", ":", "\n", "# type: (chainer.Variable, typing.List[chainer.Variable], bool) -> any", "\n", "        ", "batchsize", "=", "h", ".", "data", ".", "shape", "[", "0", "]", "\n", "height", "=", "h", ".", "data", ".", "shape", "[", "2", "]", "\n", "width", "=", "h", ".", "data", ".", "shape", "[", "3", "]", "\n", "\n", "h_global", "=", "chainer", ".", "functions", ".", "concat", "(", "one_dimension_feature_list", ")", "\n", "\n", "channel", "=", "h_global", ".", "data", ".", "shape", "[", "1", "]", "\n", "h_global", "=", "chainer", ".", "functions", ".", "broadcast_to", "(", "h_global", ",", "(", "height", ",", "width", ",", "batchsize", ",", "channel", ")", ")", "\n", "h_global", "=", "chainer", ".", "functions", ".", "transpose", "(", "h_global", ",", "(", "2", ",", "3", ",", "0", ",", "1", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "concat", "(", "(", "h", ",", "h_global", ")", ")", "\n", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "conv", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.global_network.GlobalNetwork.__init__": [[5, 46], ["chainer.Chain.__init__", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Linear", "chainer.links.BatchNormalization", "chainer.links.Linear", "chainer.links.BatchNormalization", "chainer.links.Linear", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_classification", "=", "False", ")", ":", "\n", "        ", "super", "(", "GlobalNetwork", ",", "self", ")", ".", "__init__", "(", "\n", "conv1_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "512", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "conv1_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn1_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "\n", "conv2_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn2_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "conv2_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "512", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ")", ",", "\n", "bn2_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "\n", "l3_1", "=", "chainer", ".", "links", ".", "Linear", "(", "7", "*", "7", "*", "512", ",", "1024", ")", ",", "\n", "bn3_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "1024", ")", ",", "\n", "l3_2", "=", "chainer", ".", "links", ".", "Linear", "(", "None", ",", "512", ")", ",", "\n", "bn3_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "512", ")", ",", "\n", "l3_3", "=", "chainer", ".", "links", ".", "Linear", "(", "None", ",", "256", ")", ",", "\n", "bn3_3", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "256", ")", ",", "\n", ")", "\n", "\n", "self", ".", "use_classification", "=", "use_classification", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.global_network.GlobalNetwork.__call__": [[47, 62], ["chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "global_network.GlobalNetwork.bn1_1", "global_network.GlobalNetwork.bn1_2", "global_network.GlobalNetwork.bn2_1", "global_network.GlobalNetwork.bn2_2", "global_network.GlobalNetwork.bn3_1", "global_network.GlobalNetwork.bn3_2", "global_network.GlobalNetwork.bn3_3", "global_network.GlobalNetwork.conv1_1", "global_network.GlobalNetwork.conv1_2", "global_network.GlobalNetwork.conv2_1", "global_network.GlobalNetwork.conv2_2", "global_network.GlobalNetwork.l3_1", "global_network.GlobalNetwork.l3_2", "global_network.GlobalNetwork.l3_3"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "h", "=", "x", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_2", "(", "self", ".", "conv2_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "l3_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "h_for_classification", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_2", "(", "self", ".", "l3_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_3", "(", "self", ".", "l3_3", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "\n", "if", "not", "self", ".", "use_classification", ":", "\n", "            ", "return", "h", "\n", "", "else", ":", "\n", "            ", "return", "h", ",", "h_for_classification", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.colorization.ColorizationNetwork.__init__": [[5, 47], ["chainer.Chain.__init__", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", "=", "2", ")", ":", "\n", "        ", "super", "(", "ColorizationNetwork", ",", "self", ")", ".", "__init__", "(", "\n", "conv1_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "128", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", ")", ",", "\n", "bn1_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "128", ")", ",", "\n", "\n", "conv2_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "64", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", ")", ",", "\n", "bn2_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "64", ")", ",", "\n", "conv2_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "64", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", ")", ",", "\n", "bn2_2", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "64", ")", ",", "\n", "\n", "conv3_1", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "32", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", ")", ",", "\n", "bn3_1", "=", "chainer", ".", "links", ".", "BatchNormalization", "(", "32", ")", ",", "\n", "conv3_2", "=", "chainer", ".", "links", ".", "Convolution2D", "(", "\n", "in_channels", "=", "None", ",", "\n", "out_channels", "=", "output_channels", ",", "\n", "ksize", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.colorization.ColorizationNetwork.__call__": [[50, 61], ["chainer.functions.relu", "chainer.functions.unpooling_2d", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.unpooling_2d", "chainer.functions.relu", "chainer.functions.sigmoid", "colorization.ColorizationNetwork.bn1_1", "colorization.ColorizationNetwork.bn2_1", "colorization.ColorizationNetwork.bn2_2", "colorization.ColorizationNetwork.bn3_1", "colorization.ColorizationNetwork.conv3_2", "colorization.ColorizationNetwork.conv1_1", "colorization.ColorizationNetwork.conv2_1", "colorization.ColorizationNetwork.conv2_2", "colorization.ColorizationNetwork.conv3_1"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "h", "=", "x", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "unpooling_2d", "(", "h", ",", "ksize", "=", "2", ",", "cover_all", "=", "False", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn2_2", "(", "self", ".", "conv2_2", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "unpooling_2d", "(", "h", ",", "ksize", "=", "2", ",", "cover_all", "=", "False", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "h", ")", ",", "test", "=", "test", ")", ")", "\n", "h", "=", "chainer", ".", "functions", ".", "sigmoid", "(", "self", ".", "conv3_2", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.histogram_network.HistogramNetwork.__init__": [[9, 33], ["chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ranges", ",", "\n", "num_bins", ",", "\n", "threshold_palette", ",", "\n", "use_multidimensional", "=", "False", ",", "\n", "dtype", "=", "numpy", ".", "float32", ",", "\n", ")", ":", "\n", "# type: (Tuple[Tuple[int, int], ...], int, float, any, any) -> None", "\n", "        ", "\"\"\"\n        if not multidimensional: output size will be [batch, num_bins*channel]\n        if multidimensional: output size will be [batch, num_bins^channel]\n        :param ranges: color range for each channel\n        :param num_bins: number of bins for each channel\n        :param threshold_palette: the threshold of palette mode. if None, then histogram mode.\n        :param use_multidimensional: if it is True, multidimensional histogram mode\n        \"\"\"", "\n", "super", "(", "HistogramNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ranges", "=", "ranges", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "self", ".", "threshold_palette", "=", "threshold_palette", "\n", "self", ".", "use_multidimensional", "=", "use_multidimensional", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.histogram_network.HistogramNetwork.__call__": [[34, 85], ["isinstance", "chainer.cuda.to_gpu.astype", "chainer.cuda.to_gpu.reshape", "chainer.Variable", "chainer.cuda.to_cpu", "chainer.cuda.to_gpu", "histogram_list.append", "xp.concatenate", "xp.where", "zip", "xp.reshape", "xp.empty", "zip", "xp.reshape", "xp.bincount", "xp.ones_like", "xp.zeros_like", "xp.reshape().astype", "xp.where", "xp.bincount", "xp.bincount.append", "xp.concatenate", "range", "xp.where", "xp.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "h", ",", "test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param h: (batchsize, channel, size x, size y)\n        :return: (batchsize, channel*num_bins)\n        \"\"\"", "\n", "if", "isinstance", "(", "h", ",", "chainer", ".", "Variable", ")", ":", "\n", "            ", "h", "=", "h", ".", "data", "\n", "\n", "", "batchsize", ",", "channel", ",", "x", ",", "y", "=", "h", ".", "shape", "\n", "\n", "xp", "=", "self", ".", "xp", "\n", "if", "self", ".", "_cpu", ":", "\n", "            ", "h", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "h", ")", "\n", "\n", "", "histogram_list", "=", "[", "]", "\n", "for", "h_one", "in", "h", ":", "\n", "            ", "if", "not", "self", ".", "use_multidimensional", ":", "\n", "                ", "histogram_one", "=", "[", "]", "\n", "for", "h_channel", ",", "_range", "in", "zip", "(", "h_one", ",", "self", ".", "ranges", ")", ":", "\n", "                    ", "array", "=", "(", "h_channel", "-", "_range", "[", "0", "]", ")", "/", "(", "_range", "[", "1", "]", "-", "_range", "[", "0", "]", ")", "*", "self", ".", "num_bins", "\n", "array", "=", "xp", ".", "reshape", "(", "array", ",", "-", "1", ")", ".", "astype", "(", "numpy", ".", "int32", ")", "\n", "array", "=", "xp", ".", "where", "(", "array", "==", "self", ".", "num_bins", ",", "array", "-", "1", ",", "array", ")", "\n", "hist", "=", "xp", ".", "bincount", "(", "array", ",", "minlength", "=", "self", ".", "num_bins", ")", "\n", "histogram_one", ".", "append", "(", "hist", ")", "\n", "\n", "", "histogram_one", "=", "xp", ".", "reshape", "(", "xp", ".", "concatenate", "(", "histogram_one", ",", "axis", "=", "0", ")", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "array", "=", "xp", ".", "empty", "(", "h_one", ".", "shape", ",", "numpy", ".", "int32", ")", "\n", "for", "i", ",", "_range", "in", "zip", "(", "range", "(", "channel", ")", ",", "self", ".", "ranges", ")", ":", "\n", "                    ", "array", "[", "i", "]", "=", "(", "h_one", "[", "i", "]", "-", "_range", "[", "0", "]", ")", "/", "(", "_range", "[", "1", "]", "-", "_range", "[", "0", "]", ")", "*", "self", ".", "num_bins", "\n", "array", "[", "i", "]", "=", "xp", ".", "where", "(", "array", "[", "i", "]", "==", "self", ".", "num_bins", ",", "array", "[", "i", "]", "-", "1", ",", "array", "[", "i", "]", ")", "\n", "\n", "", "array", "=", "array", "[", "0", "]", "*", "self", ".", "num_bins", "*", "self", ".", "num_bins", "+", "array", "[", "1", "]", "*", "self", ".", "num_bins", "+", "array", "[", "2", "]", "\n", "array", "=", "xp", ".", "reshape", "(", "array", ",", "-", "1", ")", "\n", "histogram_one", "=", "xp", ".", "bincount", "(", "array", ",", "minlength", "=", "self", ".", "num_bins", "**", "channel", ")", "\n", "\n", "", "histogram_list", ".", "append", "(", "histogram_one", ")", "\n", "\n", "", "h", "=", "xp", ".", "concatenate", "(", "histogram_list", ",", "axis", "=", "0", ")", "/", "(", "x", "*", "y", ")", "\n", "if", "self", ".", "threshold_palette", "is", "not", "None", ":", "\n", "            ", "h_palette", "=", "xp", ".", "where", "(", "h", ">", "self", ".", "threshold_palette", ",", "xp", ".", "ones_like", "(", "h", ")", ",", "xp", ".", "zeros_like", "(", "h", ")", ")", "\n", "h", "=", "h_palette", "\n", "\n", "", "h", "=", "h", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "h", "=", "h", ".", "reshape", "(", "(", "batchsize", ",", "-", "1", ")", ")", "\n", "\n", "h", "=", "chainer", ".", "Variable", "(", "h", ",", "volatile", "=", "test", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.classification_network.ClassificationNetwork.__init__": [[10, 19], ["chainer.Chain.__init__", "enumerate", "classification_network.ClassificationNetwork.add_link", "chainer.links.Linear", "classification_network.ClassificationNetwork.add_link", "len", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["def", "__init__", "(", "self", ",", "num_output_list", ")", ":", "\n", "# type: (typing.List[int]) -> any", "\n", "        ", "super", "(", "ClassificationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_output_list", "=", "num_output_list", "\n", "\n", "for", "i", ",", "num_output", "in", "enumerate", "(", "num_output_list", ")", ":", "\n", "            ", "self", ".", "add_link", "(", "'l{}'", ".", "format", "(", "i", ")", ",", "chainer", ".", "links", ".", "Linear", "(", "None", ",", "num_output", ")", ")", "\n", "if", "i", "<", "len", "(", "num_output_list", ")", "-", "1", ":", "\n", "                ", "self", ".", "add_link", "(", "'bn{}'", ".", "format", "(", "i", ")", ",", "chainer", ".", "links", ".", "BatchNormalization", "(", "num_output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.classification_network.ClassificationNetwork.__call__": [[20, 29], ["enumerate", "getattr", "len", "getattr"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "h", ",", "test", "=", "False", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "for", "i", ",", "num_output", "in", "enumerate", "(", "self", ".", "num_output_list", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'l{}'", ".", "format", "(", "i", ")", ")", "(", "h", ")", "\n", "\n", "if", "i", "<", "len", "(", "self", ".", "num_output_list", ")", "-", "1", ":", "\n", "                ", "h", "=", "getattr", "(", "self", ",", "'bn{}'", ".", "format", "(", "i", ")", ")", "(", "h", ",", "test", "=", "test", ")", "\n", "\n", "", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_train_parser": [[5, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_train_parser", "(", ")", ":", "\n", "    ", "_line_drawing_mode", "=", "[", "'otsu_threshold'", ",", "'adaptive_threshold'", ",", "'canny'", ",", "'three_value_threshold'", ",", "'dilate-diff'", "]", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'dataset_path'", ")", "\n", "parser", ".", "add_argument", "(", "'save_result_path'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_dataset_test'", ",", "required", "=", "True", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--network_model'", ",", "choices", "=", "[", "'SimpleConvolution'", ",", "'LTBC'", "]", ",", "default", "=", "'LTBC'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--size_image'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'size of input image'", ")", "\n", "parser", ".", "add_argument", "(", "'--augmentation'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--size_image_augmentation'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'size of input image on data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--save_result_iteration'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'iteration of saving trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed_test'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--path_pretrained_model'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_ltbc_global'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--line_drawing_mode'", ",", "choices", "=", "_line_drawing_mode", ",", "default", "=", "None", ",", "\n", "help", "=", "'model of making line-drawing. if unspecified, gray scale image'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer_adam_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tag_list'", ",", "type", "=", "str", ",", "help", "=", "'path of json file written list of all labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tag_list_each_image'", ",", "type", "=", "str", ",", "help", "=", "'path of json file written labels each image'", ")", "\n", "parser", ".", "add_argument", "(", "'--blend_mse_color'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_ltbc_classification'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'alpha value of LTBC paper. if unspecified, without classification'", ")", "\n", "parser", ".", "add_argument", "(", "'--ltbc_classification_num_output_list'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "205", "]", ",", "\n", "help", "=", "'number of nodes each layer of classification network.'", "\n", "'last number should be same as number of labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_histogram_network'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_bins_histogram'", ",", "type", "=", "int", ",", "default", "=", "85", ",", "\n", "help", "=", "'number of bins of color histogram'", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold_histogram_palette'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'the threshold of palette mode. if unspecified, histogram mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_multidimensional_histogram'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'using multidimensional histogram'", ")", "\n", "parser", ".", "add_argument", "(", "'--reinput_mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "'color'", "]", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_blend_ratio_reinput'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--separate_backward_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--separate_model_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_residual_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ltbc_classification_loss_function'", ",", "choices", "=", "[", "'softmax'", ",", "'multi_label'", "]", ",", "default", "=", "'softmax'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_pixel_drawing'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'max number of colorize part for augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_size_pixel_drawing'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'max size of colorize part'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "type", "=", "str", ",", "default", "=", "'RGB'", ")", "\n", "parser", ".", "add_argument", "(", "'--mse_loss_mode'", ",", "choices", "=", "[", "'color_space'", ",", "'before_sigmoid'", "]", ",", "default", "=", "'color_space'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_adversarial_network'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'adversarial training with discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--blend_adversarial_generator'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator_first_pooling_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'size of pooling for discriminator\\'s input image'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of logging interval iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show loss'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_default_train_args": [[66, 71], ["config.get_train_parser", "get_train_parser.parse_args"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_train_parser"], ["", "def", "get_default_train_args", "(", ")", ":", "\n", "# type: (any) -> typing.Dict[str, object]", "\n", "    ", "parser", "=", "get_train_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "'dummy dummy --num_dataset_test 0'", ".", "split", "(", ")", ")", "\n", "return", "args", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_predict_parser": [[73, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_predict_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'paths_result_directory'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num_image'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--dirname_save_images'", ",", "type", "=", "str", ",", "default", "=", "'images_with_trained_model'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix_save_filename'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--test_dataset_path'", ",", "help", "=", "'if unspecified, then use same as training'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_rebalance_hist_rate_split'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "help", "=", "'if unspecified, then use same as training'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_input'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'scaling of input value range'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_iteration'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "help", "=", "'if unspecified, target all iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--binarization_input'", ",", "action", "=", "'store_true'", ",", "help", "=", "'binarization input image'", ")", "\n", "parser", ".", "add_argument", "(", "'--direct_input'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_binarization_dataset'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_grayimage_color_normalized'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--reference_image_path'", ",", "nargs", "=", "'+'", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.dataset.choose_dataset": [[6, 105], ["comicolorization.dataset.PILImageDataset", "comicolorization.dataset.ColorMonoImageDataset", "dataset.choose_dataset._make_dataset"], "function", ["None"], ["def", "choose_dataset", "(", "\n", "paths", ",", "\n", "num_dataset_test", ",", "\n", "loss_type", ",", "\n", "augmentation", ",", "\n", "size_image_augmentation", ",", "\n", "size_image", ",", "\n", "use_ltbc_classification", ",", "\n", "path_tag_list", ",", "\n", "path_tag_list_each_image", ",", "\n", "line_drawing_mode", ",", "\n", "max_pixel_drawing", ",", "\n", "max_size_pixel_drawing", ",", "\n", "use_binarization_dataset", ",", "\n", ")", ":", "\n", "# type: (typing.Iterable, int, str, bool, typing.List[int], typing.List[int], bool, str, str, str, int, int, bool) -> any", "\n", "    ", "if", "augmentation", ":", "\n", "        ", "resize", "=", "size_image_augmentation", "\n", "crop_size", "=", "size_image", "\n", "random_flip", "=", "True", "\n", "", "else", ":", "\n", "        ", "resize", "=", "size_image", "\n", "crop_size", "=", "None", "\n", "random_flip", "=", "False", "\n", "\n", "", "def", "_make_dataset", "(", "paths", ",", "test", ")", ":", "\n", "# type: (any, bool) -> any", "\n", "        ", "dataset", "=", "comicolorization", ".", "dataset", ".", "PILImageDataset", "(", "\n", "paths", ",", "\n", "resize", "=", "resize", ",", "\n", "random_crop_size", "=", "crop_size", ",", "\n", "random_flip", "=", "random_flip", "&", "test", ",", "\n", "test", "=", "test", ",", "\n", ")", "\n", "dataset", "=", "comicolorization", ".", "dataset", ".", "ColorMonoImageDataset", "(", "dataset", ")", "\n", "\n", "# color space of input image", "\n", "if", "loss_type", "==", "'RGB'", ":", "\n", "            ", "pass", "\n", "", "elif", "loss_type", "==", "'Lab'", "or", "loss_type", "==", "'ab'", "or", "use_binarization_dataset", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabImageDataset", "(", "dataset", ")", "\n", "\n", "if", "use_binarization_dataset", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "BinarizationImageDataset", "(", "dataset", ")", "\n", "", "elif", "loss_type", "==", "'ab'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabOnlyChromaticityDataset", "(", "dataset", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "loss_type", ")", "\n", "\n", "# make line-drawing", "\n", "", "if", "line_drawing_mode", "is", "not", "None", ":", "\n", "            ", "if", "line_drawing_mode", "==", "'otsu_threshold'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabOtsuThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'adaptive_threshold'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabAdaptiveThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'canny'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabCannyImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'three_value_threshold'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabThreeValueThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'dilate-diff'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabDilateDiffImageDataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "line_drawing_mode", ")", "\n", "\n", "# colorize part", "\n", "", "", "if", "max_pixel_drawing", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabSeveralPixelDrawingImageDataset", "(", "\n", "base", "=", "dataset", ",", "\n", "max_point", "=", "max_pixel_drawing", ",", "\n", "max_size", "=", "max_size_pixel_drawing", ",", "\n", "fix_position", "=", "test", ",", "\n", ")", "\n", "\n", "# classification", "\n", "", "if", "not", "use_ltbc_classification", ":", "\n", "            ", "pass", "\n", "", "elif", "path_tag_list", "is", "None", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabeledByDirectoryDataset", "(", "\n", "paths", ",", "\n", "base_dataset", "=", "dataset", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "MultiTagLabeledDataset", "(", "\n", "paths", ",", "\n", "base_dataset", "=", "dataset", ",", "\n", "path_tag_list", "=", "path_tag_list", ",", "\n", "path_tag_list_each_image", "=", "path_tag_list_each_image", ",", "\n", ")", "\n", "\n", "", "return", "dataset", "\n", "\n", "", "train_paths", "=", "paths", "[", ":", "-", "num_dataset_test", "]", "\n", "test_paths", "=", "paths", "[", "-", "num_dataset_test", ":", "]", "\n", "train_for_evaluate_paths", "=", "paths", "[", ":", "num_dataset_test", "]", "\n", "\n", "return", "{", "\n", "'train'", ":", "_make_dataset", "(", "train_paths", ",", "test", "=", "False", ")", ",", "\n", "'test'", ":", "_make_dataset", "(", "test_paths", ",", "test", "=", "True", ")", ",", "\n", "'train_for_evaluate'", ":", "_make_dataset", "(", "train_for_evaluate_paths", ",", "test", "=", "True", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color._calc_rgb2lab_min_max": [[5, 18], ["numpy.linspace", "numpy.vstack().reshape", "skimage.color.rgb2lab", "skimage.color.rgb2lab.min().squeeze", "skimage.color.rgb2lab.max().squeeze", "numpy.vstack", "skimage.color.rgb2lab.min", "skimage.color.rgb2lab.max"], "function", ["None"], ["def", "_calc_rgb2lab_min_max", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: ([L_min, a_min, b_min], [L_max, a_max, b_max])\n    \"\"\"", "\n", "num_space", "=", "16", "\n", "size_image", "=", "num_space", "*", "num_space", "*", "num_space", "\n", "values_pixel", "=", "numpy", ".", "linspace", "(", "0", ",", "1", ",", "num_space", ")", "\n", "\n", "image_array", "=", "[", "[", "r", ",", "g", ",", "b", "]", "for", "r", "in", "values_pixel", "for", "g", "in", "values_pixel", "for", "b", "in", "values_pixel", "]", "\n", "image_array", "=", "numpy", ".", "vstack", "(", "image_array", ")", ".", "reshape", "(", "(", "1", ",", "size_image", ",", "3", ")", ")", "\n", "\n", "image_array", "=", "rgb2lab", "(", "image_array", ")", "# illuminant='D65'", "\n", "return", "image_array", ".", "min", "(", "axis", "=", "1", ")", ".", "squeeze", "(", ")", ",", "image_array", ".", "max", "(", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize": [[23, 27], ["None"], "function", ["None"], ["def", "normalize", "(", "array", ",", "in_min", ",", "in_max", ",", "out_min", ",", "out_max", ")", ":", "\n", "    ", "in_range", "=", "in_max", "-", "in_min", "\n", "out_range", "=", "out_max", "-", "out_min", "\n", "return", "(", "array", "-", "in_min", ")", "/", "in_range", "*", "out_range", "+", "out_min", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize_each_channel": [[29, 35], ["tuple", "concat", "color.normalize", "enumerate", "split"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize"], ["", "def", "normalize_each_channel", "(", "array", ",", "in_min", ",", "in_max", ",", "out_min", ",", "out_max", ",", "split", ",", "concat", ")", ":", "\n", "    ", "channels", "=", "tuple", "(", "\n", "normalize", "(", "channel", ",", "in_min", "[", "i", "]", ",", "in_max", "[", "i", "]", ",", "out_min", "[", "i", "]", ",", "out_max", "[", "i", "]", ")", "\n", "for", "i", ",", "channel", "in", "enumerate", "(", "split", "(", "array", ")", ")", "\n", ")", "\n", "return", "concat", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize_zero_one": [[37, 56], ["color.normalize_each_channel", "ValueError"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize_each_channel"], ["", "def", "normalize_zero_one", "(", "array", ",", "in_type", ",", "split", ",", "concat", ")", ":", "\n", "    ", "out_min", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "out_max", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "in_type", "==", "'RGB'", ":", "\n", "        ", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "in_max", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "", "elif", "in_type", "==", "'Lab'", ":", "\n", "        ", "in_min", ",", "in_max", "=", "lab_min_max", "\n", "", "elif", "in_type", "==", "'ab'", ":", "\n", "        ", "in_min", ",", "in_max", "=", "lab_min_max", "\n", "in_min", "=", "in_min", "[", "1", ":", "]", "\n", "in_max", "=", "in_max", "[", "1", ":", "]", "\n", "out_min", "=", "out_min", "[", "1", ":", "]", "\n", "out_max", "=", "out_max", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "in_type", ")", "\n", "\n", "", "return", "normalize_each_channel", "(", "array", ",", "in_min", ",", "in_max", ",", "out_min", ",", "out_max", ",", "split", ",", "concat", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.object.flatten": [[4, 17], ["d.items", "dict", "isinstance", "items.extend", "items.append", "flatten().items", "object.flatten"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.object.flatten"], ["def", "flatten", "(", "d", ",", "parent_key", "=", "''", ",", "sep", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    >>> flatten({'a': {'b': 10}}, sep='/')\n    {'a/b': 10}\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "parent_key", "+", "sep", "+", "k", "if", "parent_key", "else", "k", "\n", "if", "isinstance", "(", "v", ",", "collections", ".", "MutableMapping", ")", ":", "\n", "            ", "items", ".", "extend", "(", "flatten", "(", "v", ",", "new_key", ",", "sep", "=", "sep", ")", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "items", ".", "append", "(", "(", "new_key", ",", "v", ")", ")", "\n", "", "", "return", "dict", "(", "items", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_base": [[8, 22], ["comicolorization.models.Ltbc"], "function", ["None"], ["def", "_make_ltbc_base", "(", "setting", ")", ":", "\n", "# type: (typing.Dict) -> any", "\n", "    ", "model", "=", "comicolorization", ".", "models", ".", "Ltbc", "(", "\n", "use_global", "=", "not", "setting", "[", "'disable_ltbc_global'", "]", ",", "\n", "use_classification", "=", "setting", "[", "'alpha_ltbc_classification'", "]", "is", "not", "None", ",", "\n", "classification_num_output_list", "=", "setting", "[", "'ltbc_classification_num_output_list'", "]", ",", "\n", "use_histogram", "=", "setting", "[", "'use_histogram_network'", "]", ",", "\n", "use_multidimensional_histogram", "=", "setting", "[", "'use_multidimensional_histogram'", "]", ",", "\n", "num_bins_histogram", "=", "setting", "[", "'num_bins_histogram'", "]", ",", "\n", "threshold_histogram_palette", "=", "setting", "[", "'threshold_histogram_palette'", "]", ",", "\n", "reinput_mode", "=", "setting", "[", "'reinput_mode'", "]", ",", "\n", "loss_type", "=", "setting", "[", "'loss_type'", "]", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_main": [[24, 38], ["copy.deepcopy", "model._make_ltbc_base", "chainer.serializers.load_npz"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_base"], ["", "def", "_make_ltbc_main", "(", "setting", ")", ":", "\n", "# type: (typing.Dict) -> any", "\n", "    ", "setting_copy", "=", "copy", ".", "deepcopy", "(", "setting", ")", "\n", "if", "not", "setting", "[", "'separate_model_reinput'", "]", ":", "\n", "        ", "setting_copy", "[", "'reinput_mode'", "]", "=", "setting", "[", "'reinput_mode'", "]", "\n", "", "else", ":", "\n", "        ", "setting_copy", "[", "'reinput_mode'", "]", "=", "None", "\n", "\n", "", "model", "=", "_make_ltbc_base", "(", "setting_copy", ")", "\n", "\n", "if", "setting", "[", "'path_pretrained_model'", "]", "is", "not", "None", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "setting", "[", "'path_pretrained_model'", "]", ",", "model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_reinput": [[40, 47], ["model._make_ltbc_base"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_base"], ["", "def", "_make_ltbc_reinput", "(", "main_model", ",", "setting", ")", ":", "\n", "# type: (typing.Dict) -> any", "\n", "    ", "if", "not", "setting", "[", "'separate_model_reinput'", "]", ":", "\n", "        ", "model_list", "=", "[", "main_model", "for", "_", "in", "setting", "[", "'loss_blend_ratio_reinput'", "]", "]", "\n", "", "else", ":", "\n", "        ", "model_list", "=", "[", "_make_ltbc_base", "(", "setting", ")", "for", "_", "in", "setting", "[", "'loss_blend_ratio_reinput'", "]", "]", "\n", "", "return", "model_list", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model.make_ltbc": [[49, 54], ["model._make_ltbc_main", "model._make_ltbc_reinput"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_main", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model._make_ltbc_reinput"], ["", "def", "make_ltbc", "(", "setting", ")", ":", "\n", "# type: (typing.Dict) -> typing.Tuple[any, any]", "\n", "    ", "model_main", "=", "_make_ltbc_main", "(", "setting", ")", "\n", "mdoel_reinput_list", "=", "_make_ltbc_reinput", "(", "model_main", ",", "setting", ")", "\n", "return", "model_main", ",", "mdoel_reinput_list", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.array_to_image": [[10, 24], ["images_array.transpose", "rgb_images_array.astype.astype", "numpy.float32", "numpy.vectorize", "PIL.Image.fromarray"], "function", ["None"], ["color_images_array", "=", "None", ",", "\n", "gray_images_array", "=", "None", ",", "\n", "mode", "=", "'RGB'", ",", "\n", "color_normalize", "=", "False", ",", "\n", "linedrawing", "=", "None", ",", "\n", ")", ":", "\n", "# type: (any,any,any,any,any) -> typing.List[Image.Image]", "\n", "    ", "\"\"\"\n    :param color_images_array: shape is [number of image, channel(3), width, height]\n    :param gray_images_array: used when mode=='ab' or 'gray'\n    :param mode: mode of input images array (RGB, Lab, ab, gray)\n    :param color_normalize: normalize rgb color to [min(rgb_images_array) max(rgb_images_array)]\n    \"\"\"", "\n", "if", "color_images_array", "is", "not", "None", ":", "\n", "        ", "color_images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "color_images_array", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.save_images": [[44, 60], ["enumerate", "os.path.exists", "os.mkdir", "os.path.join", "image.save", "str"], "function", ["None"], ["color_images_array", "=", "numpy", ".", "concatenate", "(", "\n", "[", "numpy", ".", "expand_dims", "(", "image_array", ",", "axis", "=", "0", ")", "for", "image_array", "in", "image_array_list", "]", "\n", ")", "\n", "mode", "=", "'RGB'", "\n", "\n", "", "if", "mode", "==", "'RGB'", ":", "\n", "        ", "rgb_images_array", "=", "color_images_array", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'{} mode is not supported'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "# to uint8", "\n", "", "if", "color_normalize", ":", "\n", "        ", "minmax", "=", "(", "rgb_images_array", ".", "min", "(", ")", ",", "rgb_images_array", ".", "max", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "linedrawing", "is", "not", "None", ":", "\n", "            ", "minmax", "=", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.make_histogram": [[86, 113], ["hist.reshape.reshape", "hist.reshape.astype", "zip", "numpy.asarray", "numpy.asarray", "numpy.zeros", "histogram_one.append", "numpy.reshape", "numpy.histogramdd", "numpy.histogram"], "function", ["None"], ["", "", "def", "make_histogram", "(", "\n", "image_array", ",", "\n", "num_bins", ",", "\n", "multidim", ",", "\n", "threshold_palette", "=", "None", ",", "\n", "ranges", "=", "(", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ")", ",", "\n", ")", ":", "\n", "# type: (any, any, bool, any, any) -> any", "\n", "    ", "channel", ",", "x", ",", "y", "=", "image_array", ".", "shape", "\n", "if", "not", "multidim", ":", "\n", "        ", "histogram_one", "=", "[", "]", "\n", "for", "h_channel", ",", "range", "in", "zip", "(", "image_array", ",", "ranges", ")", ":", "\n", "            ", "hist", "=", "numpy", ".", "histogram", "(", "h_channel", ",", "num_bins", ",", "range", "=", "range", ")", "[", "0", "]", "\n", "histogram_one", ".", "append", "(", "hist", ")", "\n", "", "", "else", ":", "\n", "        ", "h_each_channel", "=", "numpy", ".", "reshape", "(", "image_array", ",", "(", "channel", ",", "x", "*", "y", ")", ")", ".", "T", "\n", "bins_each_channel", "=", "numpy", ".", "asarray", "(", "[", "num_bins", "]", "*", "channel", ")", "\n", "histogram_one", "=", "numpy", ".", "histogramdd", "(", "h_each_channel", ",", "bins_each_channel", ",", "range", "=", "ranges", ")", "[", "0", "]", "\n", "\n", "", "hist", "=", "numpy", ".", "asarray", "(", "histogram_one", ")", "/", "(", "x", "*", "y", ")", "\n", "if", "threshold_palette", "is", "not", "None", ":", "\n", "        ", "palette", "=", "numpy", ".", "zeros", "(", "shape", "=", "hist", ".", "shape", ")", "\n", "palette", "[", "hist", ">", "threshold_palette", "]", "=", "1", "\n", "hist", "=", "palette", "\n", "\n", "", "hist", "=", "hist", ".", "reshape", "(", "-", "1", ")", "\n", "return", "hist", ".", "astype", "(", "image_array", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.rebalance_top_histogram": [[115, 135], ["histogram.sum", "histogram.argmax"], "function", ["None"], ["", "def", "rebalance_top_histogram", "(", "histogram", ",", "rate", ")", ":", "\n", "# type: (any, float) -> any", "\n", "# if rate > 1, collect to top bin", "\n", "# if rate < 1, distribute from top bin", "\n", "    ", "assert", "histogram", ".", "ndim", "==", "1", "\n", "\n", "s", "=", "histogram", ".", "sum", "(", ")", "\n", "top_index", "=", "histogram", ".", "argmax", "(", ")", "\n", "\n", "top", "=", "histogram", "[", "top_index", "]", "\n", "top_after", "=", "top", "*", "rate", "\n", "if", "top_after", ">", "s", ":", "\n", "        ", "top_after", "=", "s", "\n", "\n", "", "other", "=", "s", "-", "top", "\n", "other_after", "=", "s", "-", "top_after", "\n", "\n", "output", "=", "histogram", "/", "other", "*", "other_after", "# type: numpy.ndarray", "\n", "output", "[", "top_index", "]", "=", "top_after", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.padding_channel_1to3": [[137, 140], ["numpy.pad"], "function", ["None"], ["", "def", "padding_channel_1to3", "(", "array", ")", ":", "\n", "    ", "assert", "array", ".", "ndim", "==", "4", "and", "array", ".", "shape", "[", "1", "]", "==", "1", "\n", "return", "numpy", ".", "pad", "(", "array", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.draw": [[142, 165], ["model.generate_rgb_image", "numpy.repeat", "chainer.cuda.to_gpu", "len"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.ltbc.ltbc.Ltbc.generate_rgb_image"], ["", "def", "draw", "(", "\n", "model", ",", "input_images_array", ",", "\n", "rgb_images_array", "=", "None", ",", "\n", "histogram_image_array", "=", "None", ",", "histogram_array", "=", "None", ",", "\n", "gpu", "=", "-", "1", ",", "\n", ")", ":", "\n", "# histogram", "\n", "    ", "assert", "histogram_image_array", "is", "None", "or", "histogram_array", "is", "None", "\n", "\n", "if", "histogram_image_array", "is", "not", "None", ":", "\n", "        ", "histogram_image_array", "=", "histogram_image_array", "[", "numpy", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "rgb_images_array", "=", "numpy", ".", "repeat", "(", "histogram_image_array", ",", "len", "(", "input_images_array", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "histogram_array", "is", "not", "None", ":", "\n", "        ", "rgb_images_array", "=", "None", "\n", "\n", "", "if", "gpu", ">=", "0", ":", "\n", "        ", "input_images_array", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "input_images_array", ",", "gpu", ")", "\n", "\n", "", "return", "model", ".", "generate_rgb_image", "(", "\n", "input_images_array", ",", "\n", "rgb_images_array", "=", "rgb_images_array", ",", "\n", "histogram_array", "=", "histogram_array", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d": [[95, 99], ["kwargs.pop", "chainer.links.Convolution2D"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "create_convolution_2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "initialW", "=", "kwargs", ".", "pop", "(", "'initialW'", ",", "_default_initialW", ")", "\n", "return", "chainer", ".", "links", ".", "Convolution2D", "(", "*", "args", ",", "initialW", "=", "initialW", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_deconvolution_2d": [[100, 104], ["kwargs.pop", "chainer.links.Deconvolution2D"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_deconvolution_2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "initialW", "=", "kwargs", ".", "pop", "(", "'initialW'", ",", "_default_initialW", ")", "\n", "return", "chainer", ".", "links", ".", "Deconvolution2D", "(", "*", "args", ",", "initialW", "=", "initialW", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_dilated_convolution_2d": [[105, 109], ["kwargs.pop", "chainer.links.DilatedConvolution2D"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_dilated_convolution_2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "initialW", "=", "kwargs", ".", "pop", "(", "'initialW'", ",", "_default_initialW", ")", "\n", "return", "chainer", ".", "links", ".", "DilatedConvolution2D", "(", "*", "args", ",", "initialW", "=", "initialW", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_linear": [[110, 114], ["kwargs.pop", "chainer.links.Linear"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_linear", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "initialW", "=", "kwargs", ".", "pop", "(", "'initialW'", ",", "_default_initialW", ")", "\n", "return", "chainer", ".", "links", ".", "Linear", "(", "*", "args", ",", "initialW", "=", "initialW", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.NoVariableEvaluator.evaluate": [[121, 148], ["copy.copy", "reporter.DictSummary", "reporter.DictSummary.compute_mean", "chainer_utility.NoVariableEvaluator.eval_hook", "reporter.DictSummary.add", "reporter.report_scope", "chainer_utility.NoVariableEvaluator.converter", "isinstance", "eval_func", "isinstance", "eval_func", "eval_func"], "methods", ["None"], ["def", "evaluate", "(", "self", ")", ":", "\n", "        ", "from", "chainer", "import", "reporter", "\n", "import", "copy", "\n", "\n", "iterator", "=", "self", ".", "_iterators", "[", "'main'", "]", "\n", "target", "=", "self", ".", "_targets", "[", "'main'", "]", "\n", "eval_func", "=", "self", ".", "eval_func", "or", "target", "\n", "\n", "if", "self", ".", "eval_hook", ":", "\n", "            ", "self", ".", "eval_hook", "(", "self", ")", "\n", "", "it", "=", "copy", ".", "copy", "(", "iterator", ")", "\n", "summary", "=", "reporter", ".", "DictSummary", "(", ")", "\n", "\n", "for", "batch", "in", "it", ":", "\n", "            ", "observation", "=", "{", "}", "\n", "with", "reporter", ".", "report_scope", "(", "observation", ")", ":", "\n", "                ", "in_arrays", "=", "self", ".", "converter", "(", "batch", ",", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "in_arrays", ",", "tuple", ")", ":", "\n", "                    ", "eval_func", "(", "*", "in_arrays", ")", "\n", "", "elif", "isinstance", "(", "in_arrays", ",", "dict", ")", ":", "\n", "                    ", "eval_func", "(", "**", "in_arrays", ")", "\n", "", "else", ":", "\n", "                    ", "eval_func", "(", "in_arrays", ")", "\n", "\n", "", "", "summary", ".", "add", "(", "observation", ")", "\n", "\n", "", "return", "summary", ".", "compute_mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_device": [[8, 16], ["elem.to_cpu", "elem.to_gpu"], "function", ["None"], ["def", "to_device", "(", "elem", ",", "device", "=", "None", ")", ":", "\n", "# type: (chainer.Variable, any) -> any", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "return", "elem", "\n", "", "elif", "device", "<", "0", ":", "\n", "        ", "elem", ".", "to_cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "elem", ".", "to_gpu", "(", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable": [[18, 28], ["chainer_utility.to_device", "isinstance", "chainer.Variable"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_device"], ["", "", "def", "to_variable", "(", "elem", ",", "device", "=", "None", ",", "volatile", "=", "'auto'", ")", ":", "\n", "    ", "if", "elem", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "elem", ",", "chainer", ".", "Variable", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "elem", "=", "chainer", ".", "Variable", "(", "elem", ",", "volatile", "=", "volatile", ")", "\n", "\n", "", "to_device", "(", "elem", ",", "device", ")", "\n", "return", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive": [[30, 37], ["isinstance", "isinstance", "isinstance", "chainer_utility.to_variable_recursive", "chainer_utility.to_variable", "chainer_utility.to_variable_recursive"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive"], ["", "def", "to_variable_recursive", "(", "obj", ",", "device", "=", "None", ",", "volatile", "=", "'auto'", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "tuple", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "return", "[", "to_variable_recursive", "(", "elem", ",", "device", ",", "volatile", ")", "for", "elem", "in", "obj", "]", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "to_variable_recursive", "(", "obj", "[", "key", "]", ",", "device", ",", "volatile", ")", "for", "key", "in", "obj", "}", "\n", "", "else", ":", "\n", "        ", "return", "to_variable", "(", "obj", ",", "device", ",", "volatile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.concat_recursive": [[39, 48], ["isinstance", "tuple", "isinstance", "chainer_utility._concat_arrays", "chainer_utility.concat_recursive", "chainer_utility.concat_recursive", "range", "len"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility._concat_arrays", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.concat_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.concat_recursive"], ["", "", "def", "concat_recursive", "(", "batch", ")", ":", "\n", "    ", "first", "=", "batch", "[", "0", "]", "\n", "\n", "if", "isinstance", "(", "first", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "concat_recursive", "(", "[", "example", "[", "i", "]", "for", "example", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "len", "(", "first", ")", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "first", ",", "dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "concat_recursive", "(", "[", "example", "[", "key", "]", "for", "example", "in", "batch", "]", ")", "for", "key", "in", "first", "}", "\n", "", "else", ":", "\n", "        ", "return", "_concat_arrays", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.unwrap_variable_recursive": [[50, 59], ["isinstance", "isinstance", "isinstance", "chainer_utility.unwrap_variable_recursive", "isinstance", "chainer_utility.unwrap_variable_recursive"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.unwrap_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.unwrap_variable_recursive"], ["", "", "def", "unwrap_variable_recursive", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "tuple", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "return", "[", "unwrap_variable_recursive", "(", "elem", ")", "for", "elem", "in", "obj", "]", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "unwrap_variable_recursive", "(", "obj", "[", "key", "]", ")", "for", "key", "in", "obj", "}", "\n", "", "elif", "isinstance", "(", "obj", ",", "chainer", ".", "Variable", ")", ":", "\n", "        ", "return", "obj", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.change_volatile_variable_recursive": [[61, 68], ["isinstance", "isinstance", "isinstance", "chainer_utility.change_volatile_variable_recursive", "isinstance", "chainer_utility.change_volatile_variable_recursive"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.change_volatile_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.change_volatile_variable_recursive"], ["", "", "def", "change_volatile_variable_recursive", "(", "obj", ",", "volatile", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "tuple", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "return", "[", "change_volatile_variable_recursive", "(", "elem", ",", "volatile", ")", "for", "elem", "in", "obj", "]", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "return", "{", "key", ":", "change_volatile_variable_recursive", "(", "obj", "[", "key", "]", ",", "volatile", ")", "for", "key", "in", "obj", "}", "\n", "", "elif", "isinstance", "(", "obj", ",", "chainer", ".", "Variable", ")", ":", "\n", "        ", "obj", ".", "volatile", "=", "volatile", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.converter_recursive": [[70, 74], ["chainer_utility.concat_recursive", "chainer_utility.to_variable_recursive"], "function", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.concat_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive"], ["", "", "def", "converter_recursive", "(", "batch", ",", "device", "=", "None", ")", ":", "\n", "    ", "batch", "=", "concat_recursive", "(", "batch", ")", "\n", "batch", "=", "to_variable_recursive", "(", "batch", ",", "device", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility._concat_arrays": [[76, 80], ["chainer.cuda.get_array_module", "chainer.cuda.get_device", "cuda.get_array_module.concatenate"], "function", ["None"], ["", "def", "_concat_arrays", "(", "arrays", ")", ":", "\n", "    ", "xp", "=", "cuda", ".", "get_array_module", "(", "arrays", "[", "0", "]", ")", "\n", "with", "cuda", ".", "get_device", "(", "arrays", "[", "0", "]", ")", ":", "\n", "        ", "return", "xp", ".", "concatenate", "(", "[", "array", "[", "None", "]", "for", "array", "in", "arrays", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.set_default_initialW": [[82, 92], ["isinstance", "chainer.initializers.Orthogonal", "NotImplementedError"], "function", ["None"], ["", "", "def", "set_default_initialW", "(", "initialW", ")", ":", "\n", "    ", "global", "_default_initialW", "\n", "\n", "if", "isinstance", "(", "initialW", ",", "str", ")", ":", "\n", "        ", "if", "initialW", "==", "'Orthogonal'", ":", "\n", "            ", "initialW", "=", "chainer", ".", "initializers", ".", "Orthogonal", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "initialW", ")", "\n", "\n", "", "", "_default_initialW", "=", "initialW", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.lab_array_to_image": [[26, 42], ["images_array.transpose.transpose", "image_array.astype.astype", "PIL.Image.fromarray", "image.lab_array_to_image.lab2image"], "function", ["None"], ["", "if", "gray_images_array", "is", "not", "None", ":", "\n", "        ", "gray_images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "gray_images_array", ")", "\n", "\n", "", "if", "mode", "==", "'gray'", ":", "\n", "        ", "color_images_array", "=", "numpy", ".", "concatenate", "(", "[", "gray_images_array", "]", "*", "3", ",", "axis", "=", "1", ")", "\n", "mode", "=", "'RGB'", "\n", "\n", "", "if", "mode", "==", "'ab'", ":", "\n", "# concat gray image(luminance) and ab(chromaticity)", "\n", "        ", "color_images_array", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "color_images_array", ")", "\n", "color_images_array", "=", "numpy", ".", "concatenate", "(", "(", "gray_images_array", ",", "color_images_array", ")", ",", "axis", "=", "1", ")", "\n", "mode", "=", "'Lab'", "\n", "\n", "", "color_images_array", "=", "color_images_array", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "if", "mode", "==", "'Lab'", ":", "\n", "        ", "color_images_array", "=", "color_images_array", ".", "astype", "(", "dtype", "=", "numpy", ".", "float64", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.save_tiled_image": [[62, 91], ["len", "isinstance", "subprocess.check_output", "os.path.commonprefix", "math.ceil", "isinstance", "math.ceil", "isinstance", "math.sqrt"], "function", ["None"], ["\n", "", "", "def", "clip_image", "(", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "minmax", "[", "0", "]", ")", "/", "(", "minmax", "[", "1", "]", "-", "minmax", "[", "0", "]", ")", "*", "255", "# normalize to 0~255", "\n", "return", "numpy", ".", "float32", "(", "0", "if", "x", "<", "0", "else", "(", "255", "if", "x", ">", "255", "else", "x", ")", ")", "\n", "\n", "", "rgb_images_array", "=", "numpy", ".", "vectorize", "(", "clip_image", ")", "(", "rgb_images_array", ")", "\n", "rgb_images_array", "=", "rgb_images_array", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "return", "[", "Image", ".", "fromarray", "(", "image_array", ")", "for", "image_array", "in", "rgb_images_array", "]", "\n", "\n", "\n", "", "def", "save_images", "(", "images", ",", "path_directory", ",", "prefix_filename", ",", "index_base", "=", "0", ")", ":", "\n", "# type: (typing.List[Image.Image], any, any, any) -> None", "\n", "    ", "\"\"\"\n    save image as [prefix_filename][index of image].png\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_directory", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path_directory", ")", "\n", "\n", "", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "filename", "=", "prefix_filename", "+", "str", "(", "index_base", "+", "i", ")", "+", "'.png'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "path_directory", ",", "filename", ")", "\n", "image", ".", "save", "(", "filepath", ")", "\n", "\n", "\n", "", "", "def", "make_histogram", "(", "\n", "image_array", ",", "\n", "num_bins", ",", "\n", "multidim", ",", "\n", "threshold_palette", "=", "None", ",", "\n", "ranges", "=", "(", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ",", "(", "0", ",", "255", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.__init__": [[9, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "model", ",", "\n", "model_reinput_list", ",", "\n", "range_input_luminance", ",", "\n", "range_output_luminance", ",", "\n", "discriminator", "\n", ")", ":", "\n", "# type: (any, comicolorization.models.BaseModel, typing.List[comicolorization.models.BaseModel], any, any, comicolorization.models.Discriminator) -> None", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_reinput_list", "=", "model_reinput_list", "\n", "self", ".", "range_input_luminance", "=", "range_input_luminance", "\n", "self", ".", "range_output_luminance", "=", "range_output_luminance", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "use_classification", "=", "args", ".", "alpha_ltbc_classification", "is", "not", "None", "\n", "\n", "if", "args", ".", "ltbc_classification_loss_function", "==", "'softmax'", ":", "\n", "            ", "self", ".", "loss_func_classify", "=", "chainer", ".", "functions", ".", "softmax_cross_entropy", "\n", "", "elif", "args", ".", "ltbc_classification_loss_function", "==", "'multi_label'", ":", "\n", "            ", "self", ".", "loss_func_classify", "=", "chainer", ".", "functions", ".", "sigmoid_cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_model": [[32, 44], ["model", "model", "loss_maker.LossMaker._forward_discriminator"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_discriminator"], ["", "", "def", "_forward_model", "(", "self", ",", "model", ",", "image_input", ",", "image_rgb", ",", "image_real", ",", "test", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "use_histogram_network", ":", "\n", "            ", "color", ",", "other", "=", "model", "(", "image_input", ",", "x_rgb", "=", "image_rgb", ",", "test", "=", "test", ")", "\n", "", "else", ":", "\n", "            ", "color", ",", "other", "=", "model", "(", "image_input", ",", "test", "=", "test", ")", "\n", "\n", "", "if", "self", ".", "discriminator", "is", "not", "None", ":", "\n", "            ", "disc_real", ",", "disc_gen", "=", "self", ".", "_forward_discriminator", "(", "image_real", ",", "image_generated", "=", "color", ",", "test", "=", "test", ")", "\n", "", "else", ":", "\n", "            ", "disc_real", ",", "disc_gen", "=", "None", ",", "None", "\n", "\n", "", "return", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_reinput": [[45, 69], ["range", "len", "model_reinput.xp.copy", "model_reinput.xp.copy", "comicolorization.utility.color.normalize", "loss_maker.LossMaker._forward_model", "outputs.append", "chainer.Variable"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_model"], ["", "def", "_forward_reinput", "(", "self", ",", "color", ",", "image_rgb", ",", "image_real", ",", "test", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "\n", "for", "i_reinput", "in", "range", "(", "len", "(", "self", ".", "args", ".", "loss_blend_ratio_reinput", ")", ")", ":", "\n", "            ", "model_reinput", "=", "self", ".", "model_reinput_list", "[", "i_reinput", "]", "\n", "image_input", "=", "model_reinput", ".", "xp", ".", "copy", "(", "color", ".", "data", ")", "\n", "image_input_residual", "=", "model_reinput", ".", "xp", ".", "copy", "(", "image_input", ")", "\n", "\n", "# convert gray color range '''output to input'''", "\n", "image_input", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "comicolorization", ".", "utility", ".", "color", ".", "normalize", "(", "\n", "image_input", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "\n", "in_min", "=", "self", ".", "range_output_luminance", "[", "0", "]", ",", "in_max", "=", "self", ".", "range_output_luminance", "[", "1", "]", ",", "\n", "out_min", "=", "self", ".", "range_input_luminance", "[", "0", "]", ",", "out_max", "=", "self", ".", "range_input_luminance", "[", "1", "]", ",", "\n", ")", "\n", "\n", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "=", "self", ".", "_forward_model", "(", "model_reinput", ",", "image_input", ",", "image_rgb", ",", "image_real", ",", "test", "=", "test", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_residual_reinput", ":", "\n", "                ", "color", "+=", "chainer", ".", "Variable", "(", "image_input_residual", ")", "\n", "\n", "", "outputs", ".", "append", "(", "[", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "]", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_discriminator": [[70, 74], ["loss_maker.LossMaker.discriminator", "loss_maker.LossMaker.discriminator"], "methods", ["None"], ["", "def", "_forward_discriminator", "(", "self", ",", "image_real", ",", "image_generated", ",", "test", ")", ":", "\n", "        ", "disc_real", "=", "self", ".", "discriminator", "(", "image_real", ",", "test", "=", "test", ")", "\n", "disc_gen", "=", "self", ".", "discriminator", "(", "image_generated", ",", "test", "=", "test", ")", "\n", "return", "disc_real", ",", "disc_gen", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward": [[75, 82], ["loss_maker.LossMaker._forward_model", "loss_maker.LossMaker._forward_reinput"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_model", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward_reinput"], ["", "def", "_forward", "(", "self", ",", "image_input", ",", "image_rgb", ",", "image_real", ",", "test", ")", ":", "\n", "        ", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "=", "self", ".", "_forward_model", "(", "self", ".", "model", ",", "image_input", ",", "image_rgb", ",", "image_real", ",", "test", "=", "test", ")", "\n", "outputs_reinput", "=", "self", ".", "_forward_reinput", "(", "color", ",", "image_rgb", ",", "image_real", ",", "test", "=", "test", ")", "\n", "return", "{", "\n", "'main'", ":", "(", "color", ",", "other", ",", "disc_real", ",", "disc_gen", ")", ",", "\n", "'reinput'", ":", "outputs_reinput", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss_adversarial": [[84, 111], ["loss_maker.LossMaker.discriminator.xp.ones", "loss_maker.LossMaker.discriminator.xp.zeros", "f_sce", "f_sce", "f_sce", "loss_maker.LossMaker.discriminator.xp.isfinite", "loss_maker.LossMaker.discriminator.xp.zeros"], "methods", ["None"], ["", "def", "_calc_loss_adversarial", "(", "self", ",", "disc_real", ",", "disc_gen", ")", ":", "\n", "        ", "f_sce", "=", "chainer", ".", "functions", ".", "sigmoid_cross_entropy", "\n", "label_true", "=", "self", ".", "discriminator", ".", "xp", ".", "ones", "(", "(", "disc_real", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "numpy", ".", "int32", ")", "\n", "label_false", "=", "self", ".", "discriminator", ".", "xp", ".", "zeros", "(", "(", "disc_real", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "numpy", ".", "int32", ")", "\n", "loss_generator", "=", "f_sce", "(", "disc_gen", ",", "label_true", ")", "\n", "loss_disc_real", "=", "f_sce", "(", "disc_real", ",", "label_true", ")", "\n", "loss_disc_fake", "=", "f_sce", "(", "disc_gen", ",", "label_false", ")", "\n", "\n", "tp", "=", "(", "disc_real", ".", "data", ">", "0.5", ")", ".", "sum", "(", ")", "\n", "fp", "=", "(", "disc_gen", ".", "data", ">", "0.5", ")", ".", "sum", "(", ")", "\n", "fn", "=", "(", "disc_real", ".", "data", "<=", "0.5", ")", ".", "sum", "(", ")", "\n", "tn", "=", "(", "disc_gen", ".", "data", "<=", "0.5", ")", ".", "sum", "(", ")", "\n", "accuracy", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "fp", "+", "fn", "+", "tn", ")", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "\n", "if", "not", "self", ".", "discriminator", ".", "xp", ".", "isfinite", "(", "precision", ")", ":", "\n", "            ", "precision", "=", "self", ".", "discriminator", ".", "xp", ".", "zeros", "(", "1", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "", "loss_disc", "=", "loss_disc_real", "+", "loss_disc_fake", "\n", "return", "loss_disc", ",", "loss_generator", ",", "{", "\n", "'loss_discriminator_real'", ":", "loss_disc_real", ",", "\n", "'loss_discriminator_fake'", ":", "loss_disc_fake", ",", "\n", "'loss_generator'", ":", "loss_generator", ",", "\n", "'accuracy_discriminator'", ":", "accuracy", ",", "\n", "'precision_discriminator'", ":", "precision", ",", "\n", "'recall_discriminator'", ":", "recall", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss_main": [[113, 151], ["chainer.functions.mean_squared_error", "loss_maker.LossMaker._calc_loss_adversarial", "comicolorization.utility.color.normalize_zero_one", "chainer.functions.mean_squared_error", "loss_maker.LossMaker.loss_func_classify", "chainer.functions.split_axis", "chainer.functions.concat"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss_adversarial", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize_zero_one"], ["", "def", "_calc_loss_main", "(", "self", ",", "color", ",", "other", ",", "disc_real", ",", "disc_gen", ",", "image_target", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        :return: (sum of loss, loss detail)\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "mse_loss_mode", "==", "'color_space'", ":", "\n", "            ", "loss_mse", "=", "chainer", ".", "functions", ".", "mean_squared_error", "(", "color", ",", "image_target", ")", "\n", "", "elif", "self", ".", "args", ".", "mse_loss_mode", "==", "'before_sigmoid'", ":", "\n", "            ", "before_sigmoid", "=", "other", "[", "'before_sigmoid'", "]", "\n", "image_zero_one", "=", "comicolorization", ".", "utility", ".", "color", ".", "normalize_zero_one", "(", "\n", "array", "=", "image_target", ",", "\n", "in_type", "=", "self", ".", "args", ".", "loss_type", ",", "\n", "split", "=", "lambda", "x", ":", "chainer", ".", "functions", ".", "split_axis", "(", "x", ",", "x", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ",", "force_tuple", "=", "True", ")", ",", "\n", "concat", "=", "lambda", "x", ":", "chainer", ".", "functions", ".", "concat", "(", "x", ",", "axis", "=", "1", ")", ",", "\n", ")", "\n", "loss_mse", "=", "chainer", ".", "functions", ".", "mean_squared_error", "(", "before_sigmoid", ",", "image_zero_one", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "loss", "=", "loss_mse", "*", "self", ".", "args", ".", "blend_mse_color", "\n", "\n", "if", "other", "[", "'classification'", "]", "is", "not", "None", ":", "\n", "            ", "loss", "+=", "self", ".", "loss_func_classify", "(", "other", "[", "'classification'", "]", ",", "label", ")", "*", "self", ".", "args", ".", "alpha_ltbc_classification", "\n", "\n", "", "if", "self", ".", "discriminator", "is", "not", "None", ":", "\n", "            ", "loss_discriminator", ",", "loss_generator", ",", "loss_adversarial", "=", "self", ".", "_calc_loss_adversarial", "(", "disc_real", ",", "disc_gen", ")", "\n", "loss", "+=", "loss_generator", "*", "self", ".", "args", ".", "blend_adversarial_generator", "\n", "", "else", ":", "\n", "            ", "loss_discriminator", "=", "None", "\n", "loss_generator", "=", "None", "\n", "loss_adversarial", "=", "None", "\n", "\n", "", "return", "loss", ",", "loss_discriminator", ",", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'loss_mse'", ":", "loss_mse", ",", "\n", "'loss_discriminator'", ":", "loss_discriminator", ",", "\n", "'loss_generator'", ":", "loss_generator", ",", "\n", "'loss_adversarial'", ":", "loss_adversarial", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss": [[153, 178], ["loss_maker.LossMaker._calc_loss_main", "enumerate", "loss_maker.LossMaker._calc_loss_main", "loss_detail_reinput.append"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss_main", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss_main"], ["", "def", "_calc_loss", "(", "self", ",", "outputs", ",", "image_target", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        :return: (sum of loss, loss detail)\n        \"\"\"", "\n", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "=", "outputs", "[", "'main'", "]", "\n", "outputs_reinput", "=", "outputs", "[", "'reinput'", "]", "\n", "\n", "sum_loss", ",", "sum_loss_discriminator", ",", "loss_detail_main", "=", "self", ".", "_calc_loss_main", "(", "color", ",", "other", ",", "disc_real", ",", "disc_gen", ",", "image_target", ",", "label", ")", "\n", "\n", "loss_detail_reinput", "=", "[", "]", "\n", "for", "i_reinput", ",", "blend", "in", "enumerate", "(", "self", ".", "args", ".", "loss_blend_ratio_reinput", ")", ":", "\n", "            ", "color", ",", "other", ",", "disc_real", ",", "disc_gen", "=", "outputs_reinput", "[", "i_reinput", "]", "\n", "loss", ",", "loss_discriminator", ",", "loss_detail", "=", "self", ".", "_calc_loss_main", "(", "color", ",", "other", ",", "disc_real", ",", "disc_gen", ",", "image_target", ",", "label", ")", "\n", "sum_loss", "+=", "loss", "\n", "if", "loss_discriminator", "is", "not", "None", ":", "\n", "                ", "sum_loss_discriminator", "+=", "loss_discriminator", "\n", "", "loss_detail_reinput", ".", "append", "(", "loss_detail", ")", "\n", "\n", "", "return", "sum_loss", ",", "{", "\n", "'sum_loss'", ":", "sum_loss", ",", "\n", "'sum_loss_discriminator'", ":", "sum_loss_discriminator", ",", "\n", "'main'", ":", "loss_detail_main", ",", "\n", "'reinput'", ":", "loss_detail_reinput", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.calc_loss": [[180, 200], ["loss_maker.LossMaker._forward", "loss_maker.LossMaker._calc_loss", "comicolorization.utility.object.flatten", "chainer.reporter.report", "enumerate", "chainer.reporter.report", "chainer.reporter.report", "loss_reinput.items"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._forward", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker._calc_loss", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.object.flatten"], ["", "def", "calc_loss", "(", "self", ",", "image_target", ",", "image_gray", ",", "image_rgb", ",", "label", "=", "None", ",", "test", "=", "None", ")", ":", "\n", "        ", "assert", "test", "is", "not", "None", ",", "\"Please input True of Fase for the value of test.\"", "\n", "\n", "# forward", "\n", "outputs", "=", "self", ".", "_forward", "(", "image_input", "=", "image_gray", ",", "image_rgb", "=", "image_rgb", ",", "image_real", "=", "image_target", ",", "test", "=", "test", ")", "\n", "\n", "# loss", "\n", "sum_loss", ",", "loss_detail", "=", "self", ".", "_calc_loss", "(", "outputs", "=", "outputs", ",", "image_target", "=", "image_target", ",", "label", "=", "label", ")", "\n", "\n", "# report", "\n", "loss_flatten", "=", "comicolorization", ".", "utility", ".", "object", ".", "flatten", "(", "loss_detail", "[", "'main'", "]", ",", "sep", "=", "'/'", ")", "\n", "chainer", ".", "reporter", ".", "report", "(", "loss_flatten", ",", "self", ".", "model", ")", "\n", "\n", "for", "i_reinput", ",", "loss_reinput", "in", "enumerate", "(", "loss_detail", "[", "'reinput'", "]", ")", ":", "\n", "            ", "model_reinput", "=", "self", ".", "model_reinput_list", "[", "i_reinput", "]", "\n", "loss_reinput", "=", "{", "'reinput{}/{}'", ".", "format", "(", "i_reinput", ",", "key", ")", ":", "value", "for", "key", ",", "value", "in", "loss_reinput", ".", "items", "(", ")", "}", "\n", "chainer", ".", "reporter", ".", "report", "(", "loss_reinput", ",", "model_reinput", ")", "\n", "\n", "", "chainer", ".", "reporter", ".", "report", "(", "{", "'sum_loss'", ":", "sum_loss", "}", ",", "self", ".", "model", ")", "\n", "return", "loss_detail", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.get_loss_names": [[201, 213], ["None"], "methods", ["None"], ["", "def", "get_loss_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "'sum_loss'", ",", "\n", "'loss'", ",", "\n", "'loss_mse'", ",", "\n", "'loss_generator'", ",", "\n", "'loss_discriminator'", ",", "\n", "'loss_adversarial/loss_discriminator_fake'", ",", "\n", "'loss_adversarial/loss_discriminator_real'", ",", "\n", "'loss_adversarial/recall_discriminator'", ",", "\n", "'loss_adversarial/precision_discriminator'", ",", "\n", "'loss_adversarial/accuracy_discriminator'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.loss_test": [[215, 218], ["loss_maker.LossMaker.calc_loss"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.loss.loss_maker.LossMaker.calc_loss"], ["", "def", "loss_test", "(", "self", ",", "image_target", ",", "image_gray", ",", "image_rgb", ",", "label", "=", "None", ")", ":", "\n", "        ", "loss_detail", "=", "self", ".", "calc_loss", "(", "image_target", ",", "image_gray", ",", "image_rgb", ",", "label", ",", "test", "=", "True", ")", "\n", "return", "loss_detail", "[", "'sum_loss'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.__init__": [[15, 32], ["comicolorization.utility.config.get_default_train_args", "json.load", "comicolorization.utility.config.get_default_train_args.items", "open", "json.load.setdefault", "comicolorization.models.SimpleConvolution", "os.path.join", "comicolorization.utility.model.make_ltbc", "len"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_default_train_args", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model.make_ltbc"], ["def", "__init__", "(", "self", ",", "path_result_directory", ",", "gpu", ")", ":", "\n", "        ", "args_default", "=", "comicolorization", ".", "utility", ".", "config", ".", "get_default_train_args", "(", ")", "\n", "args_train", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path_result_directory", ",", "'argument.json'", ")", ")", ")", "# type: typing.Dict", "\n", "\n", "self", ".", "path_result_directory", "=", "path_result_directory", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "args_train", "=", "args_train", "\n", "self", ".", "target_iteration", "=", "None", "\n", "\n", "for", "k", ",", "v", "in", "args_default", ".", "items", "(", ")", ":", "\n", "            ", "args_train", ".", "setdefault", "(", "k", ",", "v", ")", "\n", "\n", "", "if", "args_train", "[", "'network_model'", "]", "==", "'SimpleConvolution'", ":", "\n", "            ", "self", ".", "model", "=", "comicolorization", ".", "models", ".", "SimpleConvolution", "(", "loss_type", "=", "args_train", "[", "'loss_type'", "]", ")", "\n", "", "elif", "args_train", "[", "'network_model'", "]", "==", "'LTBC'", ":", "\n", "            ", "self", ".", "model", ",", "reinput_model", "=", "comicolorization", ".", "utility", ".", "model", ".", "make_ltbc", "(", "args_train", ")", "\n", "assert", "len", "(", "reinput_model", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer._get_path_model": [[33, 35], ["os.path.join"], "methods", ["None"], ["", "", "def", "_get_path_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path_result_directory", ",", "'{}.model'", ".", "format", "(", "iteration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.exist_save_model": [[36, 39], ["drawer.Drawer._get_path_model", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer._get_path_model"], ["", "def", "exist_save_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "path_model", "=", "self", ".", "_get_path_model", "(", "iteration", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "path_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.load_model": [[40, 55], ["drawer.Drawer._get_path_model", "print", "chainer.serializers.load_npz", "drawer.Drawer.exist_save_model", "print", "chainer.cuda.get_device().use", "drawer.Drawer.model.to_gpu", "chainer.cuda.get_device"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer._get_path_model", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.exist_save_model"], ["", "def", "load_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "if", "not", "self", ".", "exist_save_model", "(", "iteration", ")", ":", "\n", "            ", "print", "(", "\"warning! iteration {iteration} model is not found.\"", ".", "format", "(", "iteration", "=", "iteration", ")", ")", "\n", "return", "False", "\n", "\n", "", "path_model", "=", "self", ".", "_get_path_model", "(", "iteration", ")", "\n", "\n", "print", "(", "\"making iteration{}'s images...\"", ".", "format", "(", "iteration", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "path_model", ",", "self", ".", "model", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "chainer", ".", "cuda", ".", "get_device", "(", "self", ".", "gpu", ")", ".", "use", "(", ")", "# Make the GPU current", "\n", "self", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "self", ".", "target_iteration", "=", "iteration", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.can_input_color_image": [[56, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "can_input_color_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Is possible to input 3 channel image.\n        This means the model was trained by color dots or not.\n        \"\"\"", "\n", "return", "self", ".", "args_train", "[", "'max_pixel_drawing'", "]", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.draw": [[64, 85], ["comicolorization.utility.image.draw", "comicolorization.utility.image.padding_channel_1to3"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.draw", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.padding_channel_1to3"], ["", "def", "draw", "(", "\n", "self", ",", "\n", "input_images_array", ",", "\n", "rgb_images_array", "=", "None", ",", "\n", "histogram_image_array", "=", "None", ",", "\n", "histogram_array", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_images_array: 1 channel or 3 channel input image.\n        when input image has only 1 channel, it will be padded and become 3 channel image.\n        \"\"\"", "\n", "if", "self", ".", "can_input_color_image", "and", "input_images_array", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "input_images_array", "=", "comicolorization", ".", "utility", ".", "image", ".", "padding_channel_1to3", "(", "input_images_array", ")", "\n", "\n", "", "images", "=", "comicolorization", ".", "utility", ".", "image", ".", "draw", "(", "\n", "self", ".", "model", ",", "\n", "input_images_array", ",", "rgb_images_array", ",", "\n", "histogram_image_array", ",", "histogram_array", ",", "\n", "self", ".", "gpu", ",", "\n", ")", "\n", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline.__init__": [[17, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "drawer", ",", "\n", "drawer_sr", ",", "\n", "image", ",", "\n", "reference_images", ",", "\n", "threshold_binary", ",", "\n", "threshold_line", ",", "\n", "panel_rects", ",", "\n", ")", ":", "\n", "# type: (comicolorization.drawer.Drawer, comicolorization_sr.drawer.Drawer, any, any, any, any, any) -> None", "\n", "        ", "\"\"\"\n        :param drawer: drawer of the comicolorization task\n        :param drawer_sr: draw of the super resolution task\n        :param image: source page image\n        :param reference_images: list of reference images\n        :param threshold_binary: threshold by using binarizing input image\n        :param threshold_line: threshold by using binarizing line-drawing\n        :param panel_rects: panel's rectangle [[left,top,width,height], ...]\n        \"\"\"", "\n", "self", ".", "drawer", "=", "drawer", "\n", "self", ".", "drawer_sr", "=", "drawer_sr", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "reference_images", "=", "reference_images", "\n", "self", ".", "panel_rects", "=", "panel_rects", "\n", "self", ".", "threshold_binary", "=", "threshold_binary", "\n", "self", ".", "threshold_line", "=", "threshold_line", "\n", "\n", "self", ".", "_raw_image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline.process": [[47, 54], ["page_pipeline.PagePipeline._pre_process", "page_pipeline.PagePipeline._post_process", "panel.process"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._pre_process", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._post_process", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline.process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        colorization process\n        \"\"\"", "\n", "panels", "=", "self", ".", "_pre_process", "(", ")", "\n", "drawn_panel_images", "=", "[", "panel", ".", "process", "(", ")", "for", "panel", "in", "panels", "]", "\n", "return", "self", ".", "_post_process", "(", "drawn_panel_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._pre_process": [[55, 73], ["zip", "page_pipeline.PagePipeline._make_panel_image", "panel_pipeline.PanelPipeline", "panels.append"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_panel_image"], ["", "def", "_pre_process", "(", "self", ")", ":", "\n", "# type: (any) -> typing.List[PanelPipeline]", "\n", "        ", "\"\"\"\n        * split panel images\n        \"\"\"", "\n", "panels", "=", "[", "]", "\n", "for", "reference_image", ",", "panel_rect", "in", "zip", "(", "self", ".", "reference_images", ",", "self", ".", "panel_rects", ")", ":", "\n", "            ", "bw_panel", "=", "self", ".", "_make_panel_image", "(", "self", ".", "_raw_image", ",", "panel_rect", ")", "\n", "panel", "=", "PanelPipeline", "(", "\n", "drawer", "=", "self", ".", "drawer", ",", "\n", "drawer_sr", "=", "self", ".", "drawer_sr", ",", "\n", "image", "=", "bw_panel", ",", "\n", "reference_image", "=", "reference_image", ",", "\n", "threshold", "=", "self", ".", "threshold_binary", ",", "\n", ")", "\n", "panels", ".", "append", "(", "panel", ")", "\n", "\n", "", "return", "panels", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._post_process": [[74, 86], ["page_pipeline.PagePipeline._make_rawline_image", "page_pipeline.PagePipeline._make_page_image", "process.make_binarized_image", "page_pipeline.PagePipeline._make_overlayed_image"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_rawline_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_page_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.process.make_binarized_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_overlayed_image"], ["", "def", "_post_process", "(", "self", ",", "drawn_panel_images", ")", ":", "\n", "        ", "\"\"\"\n        * resynthesis page image\n        * overlay line-drawing\n        \"\"\"", "\n", "raw_line", "=", "self", ".", "_make_rawline_image", "(", "self", ".", "_raw_image", ")", "\n", "\n", "bg", "=", "self", ".", "_make_page_image", "(", "self", ".", "_raw_image", ",", "drawn_panel_images", ",", "[", "[", "r", "[", "0", "]", ",", "r", "[", "1", "]", "]", "for", "r", "in", "self", ".", "panel_rects", "]", ")", "\n", "line", "=", "make_binarized_image", "(", "raw_line", ",", "self", ".", "threshold_line", ")", "\n", "\n", "output", "=", "self", ".", "_make_overlayed_image", "(", "bg", ",", "line", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_rawline_image": [[87, 100], ["bw_image.convert", "bw_image.convert.filter", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageChops.difference", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter", "PIL.ImageFilter.MaxFilter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_rawline_image", "(", "bw_image", ",", "filter_size", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Make line-drawing by using Dilate+Diff\n        :param bw_image: source image\n        :param filter_size: size of filter\n        :return: line-drawing\n        \"\"\"", "\n", "bw", "=", "bw_image", ".", "convert", "(", "'L'", ")", "\n", "line_raw", "=", "bw", ".", "filter", "(", "PIL", ".", "ImageFilter", ".", "MaxFilter", "(", "filter_size", ")", ")", "\n", "line_raw", "=", "PIL", ".", "ImageChops", ".", "difference", "(", "bw", ",", "line_raw", ")", "\n", "line_raw", "=", "PIL", ".", "ImageOps", ".", "invert", "(", "line_raw", ")", "\n", "return", "line_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_panel_image": [[101, 113], ["base_image.crop"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_panel_image", "(", "base_image", ",", "panel_rect", ")", ":", "\n", "        ", "\"\"\"\n        Make panel image with the panel rectangle\n        :param base_image: source image\n        :param panel_rect: panel's rectangle [left,top,width,height]\n        :return: panel image\n        \"\"\"", "\n", "width", "=", "panel_rect", "[", "2", "]", "\n", "height", "=", "panel_rect", "[", "3", "]", "\n", "img", "=", "base_image", ".", "crop", "(", "(", "panel_rect", "[", "0", "]", ",", "panel_rect", "[", "1", "]", ",", "panel_rect", "[", "0", "]", "+", "width", ",", "panel_rect", "[", "1", "]", "+", "height", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_page_image": [[114, 127], ["base_image.copy", "zip", "base_image.copy.paste", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_page_image", "(", "base_image", ",", "panel_image_list", ",", "offset_list", ")", ":", "\n", "        ", "\"\"\"\n        Resynthesis page image with panel images\n        :param base_image: source page image\n        :param panel_image_list: list of panel images\n        :param offset_list: list of panels' left and top [[left,top], ...]\n        :return: page image\n        \"\"\"", "\n", "base", "=", "base_image", ".", "copy", "(", ")", "\n", "for", "panel_image", ",", "offset", "in", "zip", "(", "panel_image_list", ",", "offset_list", ")", ":", "\n", "            ", "base", ".", "paste", "(", "panel_image", ",", "tuple", "(", "offset", ")", ")", "\n", "", "return", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.page_pipeline.PagePipeline._make_overlayed_image": [[128, 139], ["page_image.copy", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "page_image.copy.paste"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_overlayed_image", "(", "page_image", ",", "line_image", ")", ":", "\n", "        ", "\"\"\"\n        :param page_image: source page image\n        :param line_image: line-drawing for overlay\n        :return: image\n        \"\"\"", "\n", "img", "=", "page_image", ".", "copy", "(", ")", "\n", "alpha", "=", "PIL", ".", "ImageOps", ".", "invert", "(", "line_image", ")", "\n", "img", ".", "paste", "(", "line_image", ",", "mask", "=", "alpha", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.process.detect_panel_rectangle": [[8, 42], ["subprocess.check_output().decode", "subprocess.check_output().decode.split", "tempfile.TemporaryDirectory", "line.split", "subprocess.check_output", "float", "float", "rect_list.append", "int", "list", "map"], "function", ["None"], ["def", "detect_panel_rectangle", "(", "image_path", ",", "mfe_path", ",", "path_output", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Auto panel rectangle detection.\n    https://github.com/DwangoMediaVillage/manga_frame_extraction\n    :param image_path: page image path\n    :param mfe_path: manga-frame-extraction's binary file path\n    :param path_output: output directory path for panel images. if None, output to temporary directory\n    :return: panel's rectangle [[left,top,width,height], ...]\n    \"\"\"", "\n", "rect_list", "=", "[", "]", "\n", "if", "path_output", "is", "None", ":", "\n", "        ", "tmp", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "path_output", "=", "tmp", ".", "name", "\n", "\n", "", "ret", "=", "subprocess", ".", "check_output", "(", "[", "mfe_path", ",", "'-s'", ",", "'-f'", ",", "image_path", ",", "'-o'", ",", "path_output", "]", ")", ".", "decode", "(", "sys", ".", "stdout", ".", "encoding", ")", "\n", "\n", "w_scale", "=", "1.0", "\n", "h_scale", "=", "1.0", "\n", "for", "line", "in", "ret", ".", "split", "(", "'\\n'", ")", ":", "\n", "        ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "\n", "if", "words", "[", "0", "]", "==", "'rescale'", ":", "\n", "            ", "w_scale", "=", "float", "(", "words", "[", "1", "]", ")", "\n", "h_scale", "=", "float", "(", "words", "[", "2", "]", ")", "\n", "\n", "", "if", "words", "[", "0", "]", "==", "'panel-region'", ":", "\n", "            ", "rect", "=", "[", "int", "(", "num", ")", "for", "num", "in", "words", "[", "2", ":", "6", "]", "]", "\n", "rect", "[", "0", "]", "/=", "w_scale", "\n", "rect", "[", "1", "]", "/=", "h_scale", "\n", "rect", "[", "2", "]", "/=", "w_scale", "\n", "rect", "[", "3", "]", "/=", "h_scale", "\n", "rect_list", ".", "append", "(", "list", "(", "map", "(", "int", ",", "rect", ")", ")", ")", "\n", "\n", "", "", "return", "rect_list", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.process.make_binarized_image": [[44, 54], ["PIL.Image.fromarray", "numpy.array"], "function", ["None"], ["", "def", "make_binarized_image", "(", "base_image", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"\n    make binarized image\n    :param base_image: source image\n    :param threshold: threshold\n    :return: binarized image\n    \"\"\"", "\n", "line", "=", "(", "numpy", ".", "array", "(", "base_image", ")", ">", "threshold", ")", ".", "astype", "(", "numpy", ".", "uint8", ")", "*", "255", "\n", "line", "=", "Image", ".", "fromarray", "(", "line", ")", "\n", "return", "line", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline.__init__": [[50, 76], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "drawer", ",", "\n", "drawer_sr", ",", "\n", "image", ",", "\n", "reference_image", ",", "\n", "resize_width", "=", "224", ",", "\n", "threshold", "=", "200", ",", "\n", ")", ":", "\n", "# type: (comicolorization.drawer.Drawer, comicolorization_sr.drawer.Drawer, any, any, any, any) -> None", "\n", "        ", "\"\"\"\n        :param drawer: drawer of the comicolorization task\n        :param drawer_sr: draw of the super resolution task, None-> skip to super-resolution\n        :param image: source panel iamge\n        :param reference_image: reference image\n        :param resize_width: width of input image for neural network model\n        :param threshold: threshold by using binarizing input image\n        \"\"\"", "\n", "self", ".", "drawer", "=", "drawer", "\n", "self", ".", "drawer_sr", "=", "drawer_sr", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "reference_image", "=", "reference_image", "\n", "self", ".", "resize_width", "=", "resize_width", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n", "self", ".", "_crop_pre", "=", "None", "# rectangle of panel image in input image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline.process": [[77, 84], ["panel_pipeline.PanelPipeline._pre_process", "panel_pipeline.PanelPipeline._draw_process", "panel_pipeline.PanelPipeline._post_process"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._pre_process", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._draw_process", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._post_process"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        colorization process\n        \"\"\"", "\n", "small_input_image", ",", "big_input_image", "=", "self", ".", "_pre_process", "(", ")", "\n", "drawn_panel_image", "=", "self", ".", "_draw_process", "(", "small_input_image", ",", "big_input_image", ")", "\n", "return", "self", ".", "_post_process", "(", "drawn_panel_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._pre_process": [[85, 117], ["panel_pipeline._calc_input_panel_rect", "panel_pipeline._make_input_panel_image", "process.make_binarized_image", "panel_pipeline._make_input_panel_image", "panel_pipeline._calc_input_panel_rect", "panel_pipeline._calc_input_panel_rect"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._calc_input_panel_rect", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._make_input_panel_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.process.make_binarized_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._make_input_panel_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._calc_input_panel_rect", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._calc_input_panel_rect"], ["", "def", "_pre_process", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        * resize panel image\n        * binarization\n        * padding and make square image\n        \"\"\"", "\n", "small_crop_pre", "=", "_calc_input_panel_rect", "(", "\n", "panel_size", "=", "self", ".", "image", ".", "size", ",", "\n", "input_width", "=", "self", ".", "resize_width", ",", "\n", ")", "\n", "\n", "input_panel_image", "=", "_make_input_panel_image", "(", "\n", "panel_image", "=", "self", ".", "image", ",", "\n", "input_panel_rect", "=", "small_crop_pre", ",", "\n", "input_width", "=", "self", ".", "resize_width", ",", "\n", ")", "\n", "\n", "if", "self", ".", "drawer_sr", "is", "not", "None", ":", "\n", "            ", "self", ".", "_crop_pre", "=", "_calc_input_panel_rect", "(", "\n", "panel_size", "=", "self", ".", "image", ".", "size", ",", "\n", "input_width", "=", "self", ".", "resize_width", "*", "2", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_crop_pre", "=", "_calc_input_panel_rect", "(", "\n", "panel_size", "=", "self", ".", "image", ".", "size", ",", "\n", "input_width", "=", "self", ".", "resize_width", ",", "\n", ")", "\n", "\n", "", "small_input_image", "=", "make_binarized_image", "(", "input_panel_image", ",", "self", ".", "threshold", ")", "\n", "big_input_image", "=", "_make_input_panel_image", "(", "self", ".", "image", ",", "self", ".", "_crop_pre", ",", "self", ".", "resize_width", "*", "2", ")", "\n", "\n", "return", "small_input_image", ",", "big_input_image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._draw_process": [[118, 134], ["skimage.color.rgb2lab", "small_image.convert.convert.convert", "numpy.array", "panel_pipeline.PanelPipeline.drawer.draw", "panel_pipeline.PanelPipeline._superresolution_process", "skimage.color.rgb2lab.astype().transpose", "numpy.array().transpose", "skimage.color.rgb2lab.astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.drawer.drawer.Drawer.draw", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._superresolution_process"], ["", "def", "_draw_process", "(", "self", ",", "small_input_image", ",", "big_input_image", ")", ":", "\n", "        ", "lab", "=", "rgb2lab", "(", "numpy", ".", "array", "(", "small_input_image", ")", ")", "\n", "lab", "[", ":", ",", ":", ",", "0", "]", "/=", "100", "\n", "small_image", "=", "self", ".", "drawer", ".", "draw", "(", "\n", "input_images_array", "=", "lab", ".", "astype", "(", "numpy", ".", "float32", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "[", "numpy", ".", "newaxis", "]", ",", "\n", "rgb_images_array", "=", "numpy", ".", "array", "(", "self", ".", "reference_image", ",", "dtype", "=", "numpy", ".", "float32", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "[", "numpy", ".", "newaxis", "]", ",", "\n", ")", "[", "0", "]", "\n", "\n", "small_image", "=", "small_image", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "drawer_sr", "is", "not", "None", ":", "\n", "            ", "drawn_panel_image", "=", "self", ".", "_superresolution_process", "(", "small_image", ",", "big_input_image", ")", "\n", "", "else", ":", "\n", "            ", "drawn_panel_image", "=", "small_image", "\n", "\n", "", "return", "drawn_panel_image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._superresolution_process": [[135, 147], ["numpy.array", "skimage.color.rgb2lab().astype", "panel_pipeline.PanelPipeline.drawer_sr.colorization.get_concat_process", "panel_pipeline.PanelPipeline.", "skimage.color.rgb2lab().astype.transpose", "panel_pipeline.PanelPipeline.drawer_sr.draw_only_super_pixel", "skimage.color.rgb2lab"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.get_concat_process", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.draw_only_super_pixel"], ["", "def", "_superresolution_process", "(", "self", ",", "small_image", ",", "big_input_image", ")", ":", "\n", "        ", "small_array", "=", "numpy", ".", "array", "(", "small_image", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "small_array", "=", "rgb2lab", "(", "small_array", "/", "255", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "small_array", "=", "small_array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "/", "100", "\n", "concat_image_process", "=", "self", ".", "drawer_sr", ".", "colorization", ".", "get_concat_process", "(", ")", "\n", "large_array", "=", "concat_image_process", "(", "big_input_image", ",", "test", "=", "True", ")", "\n", "sr_drawn_panel_image", "=", "self", ".", "drawer_sr", ".", "draw_only_super_pixel", "(", "\n", "image", "=", "small_array", "[", "numpy", ".", "newaxis", "]", ",", "\n", "concat", "=", "large_array", "[", "numpy", ".", "newaxis", "]", ",", "\n", ")", "[", "0", "]", "\n", "\n", "return", "sr_drawn_panel_image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline.PanelPipeline._post_process": [[148, 163], ["numpy.array", "PIL.Image.fromarray", "image.resize.resize.crop", "image.resize.resize.resize", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "def", "_post_process", "(", "self", ",", "drawn_panel_image", ")", ":", "\n", "        ", "\"\"\"\n        * bring near white/black to white/black\n        * crop\n        * resize\n        \"\"\"", "\n", "array", "=", "numpy", ".", "array", "(", "drawn_panel_image", ")", "\n", "th", "=", "255", "/", "6", "/", "2", "\n", "array", "[", "(", "array", "<", "th", ")", ".", "all", "(", "axis", "=", "2", ")", "]", "=", "numpy", ".", "ones", "(", "3", ")", "*", "0", "\n", "array", "[", "(", "array", ">", "255", "-", "th", ")", ".", "all", "(", "axis", "=", "2", ")", "]", "=", "numpy", ".", "ones", "(", "3", ")", "*", "255", "\n", "image", "=", "Image", ".", "fromarray", "(", "array", ")", "\n", "image", "=", "image", ".", "crop", "(", "self", ".", "_crop_pre", ")", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "image", ".", "size", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "return", "image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._calc_input_panel_rect": [[10, 24], ["min", "round", "round", "float", "float"], "function", ["None"], ["def", "_calc_input_panel_rect", "(", "panel_size", ",", "input_width", ")", ":", "\n", "    ", "\"\"\"\n    Calc rectangle of the panel image for inputting to neural network model.\n    Because panel image isn't square but neural network model postulate square\n    :param panel_size: size of source panel image [width, height]\n    :param input_width: width of input image for neural network model\n    :return: rectangle of panel image [left, top, right, bottom]\n    \"\"\"", "\n", "w", ",", "h", "=", "panel_size", "\n", "scale", "=", "min", "(", "float", "(", "input_width", ")", "/", "w", ",", "float", "(", "input_width", ")", "/", "h", ")", "\n", "\n", "w", ",", "h", "=", "(", "round", "(", "w", "*", "scale", ")", ",", "round", "(", "h", "*", "scale", ")", ")", "\n", "x", ",", "y", "=", "(", "input_width", "-", "w", ")", "//", "2", ",", "(", "input_width", "-", "h", ")", "//", "2", "\n", "return", "[", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.pipeline.panel_pipeline._make_input_panel_image": [[26, 43], ["panel_image.convert", "img.resize.resize", "PIL.Image.new", "Image.new.paste", "int"], "function", ["None"], ["", "def", "_make_input_panel_image", "(", "panel_image", ",", "input_panel_rect", ",", "input_width", ")", ":", "\n", "    ", "\"\"\"\n    Make input image for neural network model\n    :param panel_image: source panel image\n    :param input_panel_rect: rectangle calculated by _calc_input_panel_rect\n    :param input_width: width of input image for neural network model\n    :return: input image for neural network model\n    \"\"\"", "\n", "x", ",", "y", ",", "_w", ",", "_h", "=", "(", "int", "(", "value", ")", "for", "value", "in", "input_panel_rect", ")", "\n", "w", ",", "h", "=", "_w", "-", "x", ",", "_h", "-", "y", "\n", "\n", "img", "=", "panel_image", ".", "convert", "(", "'L'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "bg", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "input_width", ",", "input_width", ")", ",", "'#ffffff'", ")", "\n", "bg", ".", "paste", "(", "img", ",", "(", "x", ",", "y", ")", ")", "\n", "return", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.model_tests.test_ltbc.TestLtbc.setUp": [[9, 12], ["comicolorization.models.ltbc.Ltbc"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "ltbc", ".", "Ltbc", "(", ")", "\n", "self", ".", "size_image", "=", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.model_tests.test_ltbc.TestLtbc.test_shape": [[13, 19], ["numpy.zeros", "test_ltbc.TestLtbc.model", "test_ltbc.TestLtbc.assertEqual", "test_ltbc.TestLtbc.assertEqual", "test_ltbc.TestLtbc.assertEqual"], "methods", ["None"], ["", "def", "test_shape", "(", "self", ")", ":", "\n", "        ", "input", "=", "numpy", ".", "zeros", "(", "(", "1", ",", "1", ",", "self", ".", "size_image", ",", "self", ".", "size_image", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "output", "=", "self", ".", "model", "(", "input", ",", "test", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "input", ".", "shape", "[", "0", "]", ",", "output", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "input", ".", "shape", "[", "2", "]", ",", "output", ".", "shape", "[", "2", "]", ")", "\n", "self", ".", "assertEqual", "(", "input", ".", "shape", "[", "3", "]", ",", "output", ".", "shape", "[", "3", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.updater.Updater.__init__": [[7, 11], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_maker", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# type: (LossMaker, *any, **any) -> None", "\n", "        ", "super", "(", "Updater", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "loss_maker", "=", "loss_maker", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.updater.Updater.update_core": [[12, 20], ["updater.Updater.get_all_optimizers", "updater.Updater.converter", "updater.Updater.loss_maker.make_loss", "optimizers[].update", "updater.Updater.get_iterator().next", "updater.Updater.get_iterator"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.make_loss"], ["", "def", "update_core", "(", "self", ")", ":", "\n", "        ", "optimizers", "=", "self", ".", "get_all_optimizers", "(", ")", "\n", "\n", "batch", "=", "self", ".", "converter", "(", "self", ".", "get_iterator", "(", "'main'", ")", ".", "next", "(", ")", ",", "self", ".", "device", ")", "\n", "input", ",", "concat", ",", "target", "=", "batch", "[", "'input'", "]", ",", "batch", "[", "'concat'", "]", ",", "batch", "[", "'target'", "]", "\n", "\n", "loss", "=", "self", ".", "loss_maker", ".", "make_loss", "(", "input", "=", "input", ",", "concat", "=", "concat", ",", "target", "=", "target", ",", "test", "=", "False", ")", "\n", "optimizers", "[", "'main'", "]", ".", "update", "(", "self", ".", "loss_maker", ".", "sum_loss", ",", "loss", "[", "'main'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.__init__": [[9, 20], ["chainer.ChainList.__init__"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "colorizer", ",", "\n", "model", ",", "\n", ")", ":", "\n", "# type: (ModelConfig, typing.Callable[[typing.Any, bool], typing.Any], Unet) -> any", "\n", "        ", "super", "(", "Forwarder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "colorizer", "=", "colorizer", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.__call__": [[21, 23], ["forwarder.Forwarder.forward"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward"], ["", "def", "__call__", "(", "self", ",", "input", ",", "concat", ",", "test", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "input", ",", "concat", ",", "test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward": [[24, 28], ["forwarder.Forwarder.forward_super_pixel", "forwarder.Forwarder.forward_colorizer"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward_super_pixel", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward_colorizer"], ["", "def", "forward", "(", "self", ",", "input", ",", "concat", ",", "test", ")", ":", "\n", "        ", "image", "=", "self", ".", "forward_colorizer", "(", "input", ",", "test", ")", "[", "'image'", "]", "\n", "outputs", "=", "self", ".", "forward_super_pixel", "(", "image", ",", "concat", ",", "test", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward_colorizer": [[29, 37], ["forwarder.Forwarder.colorizer", "isinstance", "forwarder.Forwarder.unchain_backward"], "methods", ["None"], ["", "def", "forward_colorizer", "(", "self", ",", "input", ",", "test", ")", ":", "\n", "# generate smaller image", "\n", "        ", "image", "=", "self", ".", "colorizer", "(", "input", ",", "test", "=", "test", ")", "\n", "if", "isinstance", "(", "image", ",", "chainer", ".", "Variable", ")", ":", "\n", "            ", "image", ".", "unchain_backward", "(", ")", "\n", "\n", "", "return", "{", "\n", "'image'", ":", "image", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward_super_pixel": [[39, 51], ["chainer.functions.unpooling_2d", "chainer.functions.concat", "forwarder.Forwarder.model"], "methods", ["None"], ["", "def", "forward_super_pixel", "(", "self", ",", "image", ",", "concat", ",", "test", ")", ":", "\n", "# make super pixel input image", "\n", "        ", "image", "=", "chainer", ".", "functions", ".", "unpooling_2d", "(", "image", ",", "ksize", "=", "self", ".", "config", ".", "scale", ",", "cover_all", "=", "False", ")", "\n", "image", "=", "chainer", ".", "functions", ".", "concat", "(", "(", "concat", ",", "image", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# generate super pixel image", "\n", "image", ",", "_", "=", "self", ".", "model", "(", "image", ",", "test", "=", "test", ")", "\n", "outputs", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "}", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.trainer.create_optimizer": [[9, 37], ["chainer.optimizers.RMSprop.setup", "chainer.optimizers.Adam", "chainer.optimizers.RMSprop.add_hook", "chainer.optimizers.RMSprop.add_hook", "chainer.optimizers.RMSprop", "chainer.optimizer.WeightDecay", "chainer.optimizer.GradientClipping"], "function", ["None"], ["def", "create_optimizer", "(", "train_config", ",", "model", ",", "model_name", ")", ":", "\n", "# type: (TrainConfig, any, str) -> any", "\n", "    ", "config", "=", "train_config", ".", "optimizer", "[", "model_name", "]", "\n", "if", "config", "==", "'default'", ":", "\n", "        ", "config", "=", "train_config", ".", "optimizer", "[", "'default'", "]", "\n", "\n", "", "optimizer", "=", "None", "\n", "if", "config", "[", "'name'", "]", "==", "'adam'", ":", "\n", "        ", "alpha", "=", "0.001", "if", "'alpha'", "not", "in", "config", "else", "config", "[", "'alpha'", "]", "\n", "beta1", "=", "0.9", "if", "'beta1'", "not", "in", "config", "else", "config", "[", "'beta1'", "]", "\n", "beta2", "=", "0.999", "if", "'beta2'", "not", "in", "config", "else", "config", "[", "'beta2'", "]", "\n", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "alpha", ",", "beta1", "=", "beta1", ",", "beta2", "=", "beta2", ")", "\n", "", "elif", "config", "[", "'name'", "]", "==", "'RMSprop'", ":", "\n", "        ", "lr", "=", "0.01", "if", "'lr'", "not", "in", "config", "else", "config", "[", "'lr'", "]", "\n", "alpha", "=", "0.99", "if", "'alpha'", "not", "in", "config", "else", "config", "[", "'alpha'", "]", "\n", "optimizer", "=", "chainer", ".", "optimizers", ".", "RMSprop", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "assert", "\"{name} is not defined.\"", ".", "format", "(", "name", "=", "config", "[", "'name'", "]", ")", "\n", "\n", "", "optimizer", ".", "setup", "(", "model", ")", "\n", "\n", "if", "'weight_decay'", "in", "config", "and", "config", "[", "'weight_decay'", "]", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer", ".", "WeightDecay", "(", "config", "[", "'weight_decay'", "]", ")", ")", "\n", "\n", "", "if", "'gradient_clipping'", "in", "config", "and", "config", "[", "'gradient_clipping'", "]", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer", ".", "GradientClipping", "(", "config", "[", "'gradient_clipping'", "]", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.trainer.create_trainer": [[39, 86], ["chainer.training.Trainer", "chainer.training.extensions.snapshot_object", "chainer.training.Trainer.extend", "chainer.training.Trainer.extend", "chainer.training.Trainer.extend", "chainer.training.Trainer.extend", "chainer.training.Trainer.extend", "chainer.training.Trainer.extend", "comicolorization_sr.utility.chainer_utility.NoVariableEvaluator", "chainer.training.extensions.dump_graph", "trainer.create_trainer._make_evaluator"], "function", ["None"], ["", "def", "create_trainer", "(", "\n", "config", ",", "\n", "project_path", ",", "\n", "updater", ",", "\n", "model", ",", "\n", "eval_func", ",", "\n", "iterator_test", ",", "\n", "iterator_train_varidation", ",", "\n", "loss_names", ",", "\n", "converter", "=", "chainer", ".", "dataset", ".", "convert", ".", "concat_examples", ",", "\n", ")", ":", "\n", "# type: (TrainConfig, str, any, typing.Dict, any, any, any, any, any) -> any", "\n", "    ", "def", "_make_evaluator", "(", "iterator", ")", ":", "\n", "        ", "return", "utility", ".", "chainer_utility", ".", "NoVariableEvaluator", "(", "\n", "iterator", ",", "\n", "target", "=", "model", ",", "\n", "converter", "=", "converter", ",", "\n", "eval_func", "=", "eval_func", ",", "\n", "device", "=", "config", ".", "gpu", ",", "\n", ")", "\n", "\n", "", "trainer", "=", "chainer", ".", "training", ".", "Trainer", "(", "updater", ",", "out", "=", "project_path", ")", "\n", "\n", "log_trigger", "=", "(", "config", ".", "log_iteration", ",", "'iteration'", ")", "\n", "save_trigger", "=", "(", "config", ".", "save_iteration", ",", "'iteration'", ")", "\n", "\n", "eval_test_name", "=", "'eval/test'", "\n", "eval_train_name", "=", "'eval/train'", "\n", "\n", "snapshot", "=", "extensions", ".", "snapshot_object", "(", "model", "[", "'main'", "]", ",", "'{.updater.iteration}.model'", ")", "\n", "trainer", ".", "extend", "(", "snapshot", ",", "trigger", "=", "save_trigger", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/'", "+", "loss_names", "[", "0", "]", ",", "out_name", "=", "'main.dot'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "_make_evaluator", "(", "iterator_test", ")", ",", "name", "=", "eval_test_name", ",", "trigger", "=", "log_trigger", ")", "\n", "trainer", ".", "extend", "(", "_make_evaluator", "(", "iterator_train_varidation", ")", ",", "name", "=", "eval_train_name", ",", "trigger", "=", "log_trigger", ")", "\n", "\n", "report_target", "=", "[", "]", "\n", "for", "evaluator_name", "in", "[", "''", ",", "eval_test_name", "+", "'/'", ",", "eval_train_name", "+", "'/'", "]", ":", "\n", "        ", "for", "model_name", "in", "[", "'main/'", "]", ":", "\n", "            ", "for", "loss_name", "in", "loss_names", ":", "\n", "                ", "report_target", ".", "append", "(", "evaluator_name", "+", "model_name", "+", "loss_name", ")", "\n", "\n", "", "", "", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", "trigger", "=", "log_trigger", ",", "log_name", "=", "\"log.txt\"", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "report_target", ")", ")", "\n", "\n", "return", "trainer", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.__init__": [[12, 27], ["comicolorization_sr.config.Config.get_config_path", "comicolorization_sr.config.Config", "colorization_class"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.Config.get_config_path"], ["\n", "\n", "def", "__init__", "(", "self", ",", "path_result_directory", ",", "gpu", ")", ":", "\n", "        ", "args_default", "=", "comicolorization", ".", "utility", ".", "config", ".", "get_default_train_args", "(", ")", "\n", "args_train", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path_result_directory", ",", "'argument.json'", ")", ")", ")", "# type: typing.Dict", "\n", "\n", "self", ".", "path_result_directory", "=", "path_result_directory", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "args_train", "=", "args_train", "\n", "self", ".", "target_iteration", "=", "None", "\n", "\n", "for", "k", ",", "v", "in", "args_default", ".", "items", "(", ")", ":", "\n", "            ", "args_train", ".", "setdefault", "(", "k", ",", "v", ")", "\n", "\n", "", "if", "args_train", "[", "'network_model'", "]", "==", "'SimpleConvolution'", ":", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer._get_path_model": [[28, 30], ["os.path.join"], "methods", ["None"], ["            ", "self", ".", "model", "=", "comicolorization", ".", "models", ".", "SimpleConvolution", "(", "loss_type", "=", "args_train", "[", "'loss_type'", "]", ")", "\n", "", "elif", "args_train", "[", "'network_model'", "]", "==", "'LTBC'", ":", "\n", "            ", "self", ".", "model", ",", "reinput_model", "=", "comicolorization", ".", "utility", ".", "model", ".", "make_ltbc", "(", "args_train", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.exist_save_model": [[31, 34], ["drawer.Drawer._get_path_model", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer._get_path_model"], ["assert", "len", "(", "reinput_model", ")", "==", "0", "\n", "\n", "", "", "def", "_get_path_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path_result_directory", ",", "'{}.model'", ".", "format", "(", "iteration", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.load_model": [[35, 52], ["comicolorization_sr.model.prepare_model", "drawer.Drawer._get_path_model", "print", "chainer.serializers.load_npz", "drawer.Drawer.colorization.get_colorizer", "comicolorization_sr.forwarder.Forwarder", "drawer.Drawer.exist_save_model", "print", "chainer.cuda.get_device().use", "drawer.Drawer.model.to_gpu", "chainer.cuda.get_device"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.prepare_model", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer._get_path_model", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.get_colorizer", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.exist_save_model"], ["\n", "", "def", "exist_save_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "path_model", "=", "self", ".", "_get_path_model", "(", "iteration", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "path_model", ")", "\n", "\n", "", "def", "load_model", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "if", "not", "self", ".", "exist_save_model", "(", "iteration", ")", ":", "\n", "            ", "print", "(", "\"warning! iteration {iteration} model is not found.\"", ".", "format", "(", "iteration", "=", "iteration", ")", ")", "\n", "return", "False", "\n", "\n", "", "path_model", "=", "self", ".", "_get_path_model", "(", "iteration", ")", "\n", "\n", "print", "(", "\"making iteration{}'s images...\"", ".", "format", "(", "iteration", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "path_model", ",", "self", ".", "model", ")", "\n", "if", "self", ".", "gpu", ">=", "0", ":", "\n", "            ", "chainer", ".", "cuda", ".", "get_device", "(", "self", ".", "gpu", ")", ".", "use", "(", ")", "# Make the GPU current", "\n", "self", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.draw_raw": [[53, 66], ["comicolorization_sr.utility.chainer_utility.to_variable_recursive", "comicolorization_sr.utility.chainer_utility.to_variable_recursive", "output.to_cpu", "comicolorization_sr.utility.image.lab_array_to_image", "drawer.Drawer.forwarder.forward"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.lab_array_to_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward"], ["", "self", ".", "target_iteration", "=", "iteration", "\n", "return", "True", "\n", "\n", "", "@", "property", "\n", "def", "can_input_color_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Is possible to input 3 channel image.\n        This means the model was trained by color dots or not.\n        \"\"\"", "\n", "return", "self", ".", "args_train", "[", "'max_pixel_drawing'", "]", "is", "not", "None", "\n", "\n", "", "def", "draw", "(", "\n", "self", ",", "\n", "input_images_array", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.drawer.Drawer.draw_only_super_pixel": [[67, 80], ["comicolorization_sr.utility.chainer_utility.to_variable_recursive", "comicolorization_sr.utility.chainer_utility.to_variable_recursive", "output.to_cpu", "comicolorization_sr.utility.image.lab_array_to_image", "drawer.Drawer.forwarder.forward_super_pixel"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.to_variable_recursive", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.image.lab_array_to_image", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.forwarder.Forwarder.forward_super_pixel"], ["rgb_images_array", "=", "None", ",", "\n", "histogram_image_array", "=", "None", ",", "\n", "histogram_array", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_images_array: 1 channel or 3 channel input image.\n        when input image has only 1 channel, it will be padded and become 3 channel image.\n        \"\"\"", "\n", "if", "self", ".", "can_input_color_image", "and", "input_images_array", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "input_images_array", "=", "comicolorization", ".", "utility", ".", "image", ".", "padding_channel_1to3", "(", "input_images_array", ")", "\n", "\n", "", "images", "=", "comicolorization", ".", "utility", ".", "image", ".", "draw", "(", "\n", "self", ".", "model", ",", "\n", "input_images_array", ",", "rgb_images_array", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.BaseImageDataset.get_example": [[10, 13], ["None"], "methods", ["None"], ["augmentation", ",", "\n", "size_image_augmentation", ",", "\n", "size_image", ",", "\n", "use_ltbc_classification", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.BaseImageArrayDataset.get_example": [[16, 19], ["None"], "methods", ["None"], ["line_drawing_mode", ",", "\n", "max_pixel_drawing", ",", "\n", "max_size_pixel_drawing", ",", "\n", "use_binarization_dataset", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PILImageDataset.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "if", "augmentation", ":", "\n", "        ", "resize", "=", "size_image_augmentation", "\n", "crop_size", "=", "size_image", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PILImageDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["random_flip", "=", "True", "\n", "", "else", ":", "\n", "        ", "resize", "=", "size_image", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PILImageDataset.get_example": [[28, 31], ["Image.open().convert", "Image.open"], "methods", ["None"], ["crop_size", "=", "None", "\n", "random_flip", "=", "False", "\n", "\n", "", "def", "_make_dataset", "(", "paths", ",", "test", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomCropImageDataset.__init__": [[34, 39], ["None"], "methods", ["None"], ["paths", ",", "\n", "resize", "=", "resize", ",", "\n", "random_crop_size", "=", "crop_size", ",", "\n", "random_flip", "=", "random_flip", "&", "test", ",", "\n", "test", "=", "test", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomCropImageDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["dataset", "=", "comicolorization", ".", "dataset", ".", "ColorMonoImageDataset", "(", "dataset", ")", "\n", "\n", "# color space of input image", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomCropImageDataset.get_example": [[43, 61], ["image.crop.crop.crop", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["if", "loss_type", "==", "'RGB'", ":", "\n", "            ", "pass", "\n", "", "elif", "loss_type", "==", "'Lab'", "or", "loss_type", "==", "'ab'", "or", "use_binarization_dataset", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabImageDataset", "(", "dataset", ")", "\n", "\n", "if", "use_binarization_dataset", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "BinarizationImageDataset", "(", "dataset", ")", "\n", "", "elif", "loss_type", "==", "'ab'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabOnlyChromaticityDataset", "(", "dataset", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "loss_type", ")", "\n", "\n", "# make line-drawing", "\n", "", "if", "line_drawing_mode", "is", "not", "None", ":", "\n", "            ", "if", "line_drawing_mode", "==", "'otsu_threshold'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabOtsuThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'adaptive_threshold'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabAdaptiveThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'canny'", ":", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomFlipImageDataset.__init__": [[64, 69], ["None"], "methods", ["None"], ["                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabThreeValueThresholdImageDataset", "(", "dataset", ")", "\n", "", "elif", "line_drawing_mode", "==", "'dilate-diff'", ":", "\n", "                ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabDilateDiffImageDataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "line_drawing_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomFlipImageDataset.__len__": [[70, 72], ["len"], "methods", ["None"], ["# colorize part", "\n", "", "", "if", "max_pixel_drawing", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabSeveralPixelDrawingImageDataset", "(", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.RandomFlipImageDataset.get_example": [[73, 84], ["numpy.random.rand", "image.transpose.transpose.transpose", "numpy.random.rand", "image.transpose.transpose.transpose"], "methods", ["None"], ["base", "=", "dataset", ",", "\n", "max_point", "=", "max_pixel_drawing", ",", "\n", "max_size", "=", "max_size_pixel_drawing", ",", "\n", "fix_position", "=", "test", ",", "\n", ")", "\n", "\n", "# classification", "\n", "", "if", "not", "use_ltbc_classification", ":", "\n", "            ", "pass", "\n", "", "elif", "path_tag_list", "is", "None", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "LabeledByDirectoryDataset", "(", "\n", "paths", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PairImageDataset.__init__": [[87, 101], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "dataset", "=", "comicolorization", ".", "dataset", ".", "MultiTagLabeledDataset", "(", "\n", "paths", ",", "\n", "base_dataset", "=", "dataset", ",", "\n", "path_tag_list", "=", "path_tag_list", ",", "\n", "path_tag_list_each_image", "=", "path_tag_list_each_image", ",", "\n", ")", "\n", "\n", "", "return", "dataset", "\n", "\n", "", "train_paths", "=", "paths", "[", ":", "-", "num_dataset_test", "]", "\n", "test_paths", "=", "paths", "[", "-", "num_dataset_test", ":", "]", "\n", "train_for_evaluate_paths", "=", "paths", "[", ":", "num_dataset_test", "]", "\n", "\n", "return", "{", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PairImageDataset.__len__": [[102, 104], ["len"], "methods", ["None"], ["'train'", ":", "_make_dataset", "(", "train_paths", ",", "test", "=", "False", ")", ",", "\n", "'test'", ":", "_make_dataset", "(", "test_paths", ",", "test", "=", "True", ")", ",", "\n", "'train_for_evaluate'", ":", "_make_dataset", "(", "train_for_evaluate_paths", ",", "test", "=", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.PairImageDataset.get_example": [[105, 114], ["dataset.PairImageDataset._input_process", "dataset.PairImageDataset._concat_process", "dataset.PairImageDataset._target_process"], "methods", ["None"], ["}", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.dataset.create": [[117, 165], ["glob.glob", "numpy.random.RandomState", "numpy.random.RandomState.permutation", "collections.namedtuple", "zip", "dataset.PILImageDataset", "dataset.RandomCropImageDataset", "dataset.RandomFlipImageDataset", "dataset.PairImageDataset", "setattr", "ChainProcess", "LabImageArrayProcess", "RandomScaleImageProcess"], "function", ["None"], []], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.__init__": [[9, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "forwarder", ",", "\n", "model", ",", "\n", ")", ":", "\n", "# type: (LossConfig, Forwarder, Unet) -> None", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "forwarder", "=", "forwarder", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.blend_loss": [[20, 39], ["sorted", "sorted", "sorted", "loss.keys", "blend_config.keys", "loss.keys", "loss.keys", "blend_config.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "blend_loss", "(", "loss", ",", "blend_config", ")", ":", "\n", "        ", "assert", "sorted", "(", "loss", ".", "keys", "(", ")", ")", "==", "sorted", "(", "blend_config", ".", "keys", "(", ")", ")", ",", "'{} {}'", ".", "format", "(", "loss", ".", "keys", "(", ")", ",", "blend_config", ".", "keys", "(", ")", ")", "\n", "\n", "sum_loss", "=", "None", "\n", "\n", "for", "key", "in", "sorted", "(", "loss", ".", "keys", "(", ")", ")", ":", "\n", "            ", "blend", "=", "blend_config", "[", "key", "]", "\n", "if", "blend", "==", "0.0", ":", "\n", "                ", "continue", "\n", "\n", "", "l", "=", "loss", "[", "key", "]", "*", "blend_config", "[", "key", "]", "\n", "\n", "if", "sum_loss", "is", "None", ":", "\n", "                ", "sum_loss", "=", "l", "\n", "", "else", ":", "\n", "                ", "sum_loss", "+=", "l", "\n", "\n", "", "", "return", "sum_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.make_loss": [[40, 51], ["chainer.functions.mean_absolute_error", "chainer.report", "loss.LossMaker.forwarder"], "methods", ["None"], ["", "def", "make_loss", "(", "self", ",", "input", ",", "concat", ",", "target", ",", "test", ")", ":", "\n", "        ", "output", "=", "self", ".", "forwarder", "(", "input", ",", "concat", ",", "test", ")", "[", "'image'", "]", "\n", "mae_loss", "=", "chainer", ".", "functions", ".", "mean_absolute_error", "(", "output", ",", "target", ")", "\n", "\n", "loss", "=", "{", "\n", "'mae'", ":", "mae_loss", ",", "\n", "}", "\n", "chainer", ".", "report", "(", "loss", ",", "self", ".", "model", ")", "\n", "\n", "return", "{", "\n", "'main'", ":", "loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.get_loss_names": [[53, 55], ["list", "loss.LossMaker.config.blend[].keys"], "methods", ["None"], ["", "def", "get_loss_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'sum_loss'", "]", "+", "list", "(", "self", ".", "config", ".", "blend", "[", "'main'", "]", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.sum_loss": [[56, 60], ["loss.LossMaker.blend_loss", "chainer.report"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.blend_loss"], ["", "def", "sum_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "sum_loss", "=", "self", ".", "blend_loss", "(", "loss", ",", "self", ".", "config", ".", "blend", "[", "'main'", "]", ")", "\n", "chainer", ".", "report", "(", "{", "'sum_loss'", ":", "sum_loss", "}", ",", "self", ".", "model", ")", "\n", "return", "sum_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.test": [[61, 64], ["loss.LossMaker.LossMaker.make_loss", "loss.LossMaker.LossMaker.sum_loss"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.make_loss", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.loss.LossMaker.sum_loss"], ["", "def", "test", "(", "self", ",", "input", ",", "concat", ",", "target", ")", ":", "\n", "        ", "loss", "=", "self", ".", "make_loss", "(", "input", ",", "concat", ",", "target", ",", "test", "=", "True", ")", "\n", "return", "self", ".", "sum_loss", "(", "loss", "[", "'main'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.BaseModel.__init__": [[11, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__"], ["use_global", "=", "not", "setting", "[", "'disable_ltbc_global'", "]", ",", "\n", "use_classification", "=", "setting", "[", "'alpha_ltbc_classification'", "]", "is", "not", "None", ",", "\n", "classification_num_output_list", "=", "setting", "[", "'ltbc_classification_num_output_list'", "]", ",", "\n", "use_histogram", "=", "setting", "[", "'use_histogram_network'", "]", ",", "\n", "use_multidimensional_histogram", "=", "setting", "[", "'use_multidimensional_histogram'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.BaseModel.__call__": [[16, 20], ["None"], "methods", ["None"], ["num_bins_histogram", "=", "setting", "[", "'num_bins_histogram'", "]", ",", "\n", "threshold_histogram_palette", "=", "setting", "[", "'threshold_histogram_palette'", "]", ",", "\n", "reinput_mode", "=", "setting", "[", "'reinput_mode'", "]", ",", "\n", "loss_type", "=", "setting", "[", "'loss_type'", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.Unet.__init__": [[23, 65], ["model.BaseModel.__init__", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_deconvolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_deconvolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_deconvolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_deconvolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "comicolorization_sr.utility.chainer_utility.Link.create_convolution_2d", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_deconvolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_deconvolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_deconvolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_deconvolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.chainer_utility.Link.create_convolution_2d"], ["\n", "", "def", "_make_ltbc_main", "(", "setting", ")", ":", "\n", "# type: (typing.Dict) -> any", "\n", "    ", "setting_copy", "=", "copy", ".", "deepcopy", "(", "setting", ")", "\n", "if", "not", "setting", "[", "'separate_model_reinput'", "]", ":", "\n", "        ", "setting_copy", "[", "'reinput_mode'", "]", "=", "setting", "[", "'reinput_mode'", "]", "\n", "", "else", ":", "\n", "        ", "setting_copy", "[", "'reinput_mode'", "]", "=", "None", "\n", "\n", "", "model", "=", "_make_ltbc_base", "(", "setting_copy", ")", "\n", "\n", "if", "setting", "[", "'path_pretrained_model'", "]", "is", "not", "None", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "setting", "[", "'path_pretrained_model'", "]", ",", "model", ")", "\n", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "_make_ltbc_reinput", "(", "main_model", ",", "setting", ")", ":", "\n", "# type: (typing.Dict) -> any", "\n", "    ", "if", "not", "setting", "[", "'separate_model_reinput'", "]", ":", "\n", "        ", "model_list", "=", "[", "main_model", "for", "_", "in", "setting", "[", "'loss_blend_ratio_reinput'", "]", "]", "\n", "", "else", ":", "\n", "        ", "model_list", "=", "[", "_make_ltbc_base", "(", "setting", ")", "for", "_", "in", "setting", "[", "'loss_blend_ratio_reinput'", "]", "]", "\n", "", "return", "model_list", "\n", "\n", "\n", "", "def", "make_ltbc", "(", "setting", ")", ":", "\n", "# type: (typing.Dict) -> typing.Tuple[any, any]", "\n", "    ", "model_main", "=", "_make_ltbc_main", "(", "setting", ")", "\n", "mdoel_reinput_list", "=", "_make_ltbc_reinput", "(", "model_main", ",", "setting", ")", "\n", "return", "model_main", ",", "mdoel_reinput_list", "\n", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.Unet.__call__": [[67, 103], ["relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "relu", "model.Unet.dc0", "model.Unet.bnc0", "model.Unet.bnc1", "model.Unet.bnc2", "model.Unet.bnc3", "model.Unet.bnc4", "model.Unet.bnc5", "model.Unet.bnc6", "model.Unet.bnc7", "model.Unet.bnc8", "model.Unet.bnd8", "model.Unet.bnd7", "model.Unet.bnd6", "model.Unet.bnd5", "model.Unet.bnd4", "model.Unet.bnd3", "model.Unet.bnd2", "model.Unet.bnd1", "concat", "model.Unet.c0", "model.Unet.c1", "model.Unet.c2", "model.Unet.c3", "model.Unet.c4", "model.Unet.c5", "model.Unet.c6", "model.Unet.c7", "model.Unet.c8", "model.Unet.dc8", "model.Unet.dc7", "model.Unet.dc6", "model.Unet.dc5", "model.Unet.dc4", "model.Unet.dc3", "model.Unet.dc2", "model.Unet.dc1", "concat", "concat", "concat", "concat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.model.prepare_model": [[105, 109], ["model.Unet"], "function", ["None"], []], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.BaseDataProcess.__call__": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "data", ",", "test", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.RandomScaleImageProcess.__init__": [[16, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_scale", ",", "max_scale", ")", ":", "\n", "# type: (float, float) -> None", "\n", "        ", "self", ".", "_min_scale", "=", "min_scale", "\n", "self", ".", "_max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.RandomScaleImageProcess.__call__": [[21, 34], ["numpy.random.rand", "int", "int", "image.resize.resize.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "test", ")", ":", "\n", "# type: (Image.Image, any) -> any", "\n", "        ", "base_size", "=", "image", ".", "size", "\n", "\n", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "1", ")", "if", "not", "test", "else", "0.5", "\n", "\n", "scale", "=", "rand", "*", "(", "self", ".", "_max_scale", "-", "self", ".", "_min_scale", ")", "+", "self", ".", "_min_scale", "\n", "size_resize", "=", "(", "int", "(", "image", ".", "size", "[", "0", "]", "*", "scale", ")", ",", "int", "(", "image", ".", "size", "[", "1", "]", "*", "scale", ")", ")", "\n", "\n", "if", "base_size", "!=", "size_resize", ":", "\n", "            ", "image", "=", "image", ".", "resize", "(", "size_resize", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.LabImageArrayProcess.__init__": [[37, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "normalize", "=", "True", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_normalize", "=", "normalize", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.LabImageArrayProcess.__call__": [[41, 51], ["skimage.color.rgb2lab().astype().transpose", "numpy.asarray", "skimage.color.rgb2lab().astype", "skimage.color.rgb2lab"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "test", ")", ":", "\n", "# type: (Image.Image, any) -> any", "\n", "        ", "image", "=", "numpy", ".", "asarray", "(", "image", ",", "dtype", "=", "self", ".", "_dtype", ")", "[", ":", ",", ":", ",", ":", "3", "]", "/", "255", "# rgb", "\n", "image", "=", "rgb2lab", "(", "image", ")", ".", "astype", "(", "self", ".", "_dtype", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "_normalize", ":", "\n", "            ", "image", "/=", "50", "\n", "image", "[", "0", "]", "-=", "1", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.ChainProcess.__init__": [[54, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "process", ")", ":", "\n", "# type: (typing.Iterable[BaseDataProcess]) -> None", "\n", "        ", "self", ".", "_process", "=", "process", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.comicolorization_sr.data_process.ChainProcess.__call__": [[58, 62], ["p"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ",", "test", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "_process", ":", "\n", "            ", "data", "=", "p", "(", "data", ",", "test", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.Config.get_config_path": [[9, 12], ["os.path.join"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'dataset_path'", ")", "\n", "parser", ".", "add_argument", "(", "'save_result_path'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_dataset_test'", ",", "required", "=", "True", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--network_model'", ",", "choices", "=", "[", "'SimpleConvolution'", ",", "'LTBC'", "]", ",", "default", "=", "'LTBC'", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.Config.__init__": [[13, 22], ["json.load", "config.DatasetConfig", "config.LossConfig", "config.ModelConfig", "config.TrainConfig", "config.ProjectConfig", "io.open", "config.Config.config.get", "config.Config.config.get", "config.Config.config.get", "config.Config.config.get", "config.Config.config.get"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--batchsize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--size_image'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'size of input image'", ")", "\n", "parser", ".", "add_argument", "(", "'--augmentation'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--size_image_augmentation'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'size of input image on data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--save_result_iteration'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'iteration of saving trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed_test'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.Config.copy_config_json": [[23, 27], ["config.Config.project_config.get_project_path", "config.Config.get_config_path", "shutil.copy"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.ProjectConfig.get_project_path", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.Config.get_config_path"], ["parser", ".", "add_argument", "(", "'--path_pretrained_model'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_ltbc_global'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--line_drawing_mode'", ",", "choices", "=", "_line_drawing_mode", ",", "default", "=", "None", ",", "\n", "help", "=", "'model of making line-drawing. if unspecified, gray scale image'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer_adam_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.DatasetConfig.__init__": [[30, 36], ["config.get", "config.get", "config.get", "config.get", "config.get"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--path_tag_list_each_image'", ",", "type", "=", "str", ",", "help", "=", "'path of json file written labels each image'", ")", "\n", "parser", ".", "add_argument", "(", "'--blend_mse_color'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_ltbc_classification'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'alpha value of LTBC paper. if unspecified, without classification'", ")", "\n", "parser", ".", "add_argument", "(", "'--ltbc_classification_num_output_list'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "205", "]", ",", "\n", "help", "=", "'number of nodes each layer of classification network.'", "\n", "'last number should be same as number of labels'", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.LossConfig.__init__": [[39, 42], ["config.get", "config.get"], "methods", ["None"], ["help", "=", "'number of bins of color histogram'", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold_histogram_palette'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'the threshold of palette mode. if unspecified, histogram mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_multidimensional_histogram'", ",", "action", "=", "'store_true'", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.ModelConfig.__init__": [[45, 50], ["config.get", "config.get", "config.get", "config.get"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--loss_blend_ratio_reinput'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--separate_backward_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--separate_model_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_residual_reinput'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ltbc_classification_loss_function'", ",", "choices", "=", "[", "'softmax'", ",", "'multi_label'", "]", ",", "default", "=", "'softmax'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_pixel_drawing'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.TrainConfig.__init__": [[53, 59], ["config.get", "config.get", "config.get", "config.get", "config.get"], "methods", ["None"], ["help", "=", "'max size of colorize part'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "type", "=", "str", ",", "default", "=", "'RGB'", ")", "\n", "parser", ".", "add_argument", "(", "'--mse_loss_mode'", ",", "choices", "=", "[", "'color_space'", ",", "'before_sigmoid'", "]", ",", "default", "=", "'color_space'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_adversarial_network'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'adversarial training with discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--blend_adversarial_generator'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator_first_pooling_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.ProjectConfig.__init__": [[62, 67], ["config.get", "config.get", "config.get", "config.get"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show loss'", ")", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "get_default_train_args", "(", ")", ":", "\n", "# type: (any) -> typing.Dict[str, object]", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.config.config.ProjectConfig.get_project_path": [[68, 70], ["os.path.join"], "methods", ["None"], ["    ", "parser", "=", "get_train_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "'dummy dummy --num_dataset_test 0'", ".", "split", "(", ")", ")", "\n", "return", "args", ".", "__dict__", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.base.BaseColorizationTask.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "load_model", "=", "True", ")", ":", "\n", "# type: (Config, any) -> None", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "load_model", "=", "load_model", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.base.BaseColorizationTask.get_input_process": [[15, 19], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_input_process", "(", "self", ")", ":", "\n", "# type: (any) -> BaseDataProcess", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.base.BaseColorizationTask.get_concat_process": [[20, 24], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_concat_process", "(", "self", ")", ":", "\n", "# type: (any) -> BaseDataProcess", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.base.BaseColorizationTask.get_colorizer": [[25, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_colorizer", "(", "self", ")", ":", "\n", "# type: (any) -> typing.Callable[[typing.Any, bool], typing.Any]", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.__init__": [[16, 34], ["comicolorization_sr.colorization_task.BaseColorizationTask.__init__", "comicolorization.utility.config.get_default_train_args", "json.load", "comicolorization.utility.config.get_default_train_args.items", "open", "json.load.setdefault", "comicolorization_task.ComicolorizationTask._load_model", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.config.get_default_train_args", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask._load_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "load_model", "=", "True", ")", ":", "\n", "# type: (Config, any) -> None", "\n", "        ", "super", "(", "ComicolorizationTask", ",", "self", ")", ".", "__init__", "(", "config", ",", "load_model", ")", "\n", "\n", "path_result_directory", "=", "config", ".", "model_config", ".", "other", "[", "'path_result_directory'", "]", "\n", "args_default", "=", "comicolorization", ".", "utility", ".", "config", ".", "get_default_train_args", "(", ")", "\n", "args_train", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path_result_directory", ",", "'argument.json'", ")", ")", ")", "# type: typing.Dict", "\n", "\n", "self", ".", "_path_result_directory", "=", "path_result_directory", "\n", "self", ".", "_args_train", "=", "args_train", "\n", "\n", "self", ".", "model", "=", "None", "\n", "\n", "for", "k", ",", "v", "in", "args_default", ".", "items", "(", ")", ":", "\n", "            ", "args_train", ".", "setdefault", "(", "k", ",", "v", ")", "\n", "\n", "", "if", "load_model", ":", "\n", "            ", "self", ".", "_load_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask._load_model": [[35, 49], ["comicolorization.utility.model.make_ltbc", "os.path.join", "chainer.serializers.load_npz", "model.to_gpu", "len"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.model.make_ltbc"], ["", "", "def", "_load_model", "(", "self", ")", ":", "\n", "# make model", "\n", "        ", "model", ",", "reinput", "=", "comicolorization", ".", "utility", ".", "model", ".", "make_ltbc", "(", "self", ".", "_args_train", ")", "\n", "assert", "reinput", "is", "None", "or", "len", "(", "reinput", ")", "==", "0", "\n", "self", ".", "model", "=", "model", "\n", "\n", "# load model", "\n", "iteration", "=", "self", ".", "config", ".", "model_config", ".", "other", "[", "'iteration'", "]", "\n", "path_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path_result_directory", ",", "'{}.model'", ".", "format", "(", "iteration", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "path_model", ",", "model", ")", "\n", "\n", "use_gpu", "=", "(", "self", ".", "config", ".", "train_config", ".", "gpu", ">=", "0", ")", "\n", "if", "use_gpu", ":", "\n", "            ", "model", ".", "to_gpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.get_input_process": [[50, 58], ["comicolorization_sr.dataset.ChainProcess", "comicolorization_task.LabOtsuThresholdImageProcess", "comicolorization_task.LabSeveralPixelDrawingImageProcess", "comicolorization_task.InputAdapterProcess"], "methods", ["None"], ["", "", "def", "get_input_process", "(", "self", ")", ":", "\n", "        ", "return", "dataset", ".", "ChainProcess", "(", "[", "\n", "LabOtsuThresholdImageProcess", "(", ")", ",", "\n", "LabSeveralPixelDrawingImageProcess", "(", "\n", "max_point", "=", "self", ".", "_args_train", "[", "'max_pixel_drawing'", "]", ",", "\n", "max_size", "=", "self", ".", "_args_train", "[", "'max_size_pixel_drawing'", "]", ",", "\n", ")", ",", "\n", "InputAdapterProcess", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.get_concat_process": [[60, 64], ["comicolorization_sr.dataset.ChainProcess", "comicolorization_task.LabOtsuThresholdImageProcess", "comicolorization_task.ConcatAdapterProcess"], "methods", ["None"], ["", "def", "get_concat_process", "(", "self", ")", ":", "\n", "        ", "return", "dataset", ".", "ChainProcess", "(", "[", "\n", "LabOtsuThresholdImageProcess", "(", ")", ",", "\n", "ConcatAdapterProcess", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask._colorizer": [[66, 83], ["model", "model"], "methods", ["None"], ["", "def", "_colorizer", "(", "self", ",", "input", ",", "test", ")", ":", "\n", "        ", "model", "=", "self", ".", "model", "\n", "\n", "image_input", ",", "image_rgb", "=", "input", "[", "'image_input'", "]", ",", "input", "[", "'image_rgb'", "]", "\n", "\n", "if", "self", ".", "_args_train", "[", "'use_histogram_network'", "]", ":", "\n", "            ", "outputs", "=", "model", "(", "image_input", ",", "x_rgb", "=", "image_rgb", ",", "test", "=", "test", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "image_input", ",", "test", "=", "test", ")", "\n", "\n", "", "if", "self", ".", "_args_train", "[", "'alpha_ltbc_classification'", "]", "is", "None", ":", "\n", "            ", "output_color", "=", "outputs", "\n", "", "else", ":", "\n", "            ", "output_color", ",", "_", "=", "outputs", "\n", "\n", "", "output_color", "/=", "100", "# normalize", "\n", "return", "output_color", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ComicolorizationTask.get_colorizer": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_colorizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_colorizer", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabOtsuThresholdImageProcess.__call__": [[89, 106], ["image_data.transpose", "skimage.color.rgb2lab().transpose().astype", "lab_image_data[].astype", "numpy.expand_dims", "numpy.asarray", "skimage.filters.threshold_otsu", "skimage.color.rgb2lab().transpose", "print", "traceback.format_exc", "skimage.color.rgb2lab"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "test", ")", ":", "\n", "        ", "image_data", "=", "numpy", ".", "asarray", "(", "image", ",", "dtype", "=", "numpy", ".", "float32", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "rgb_image_data", "=", "image_data", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "lab_image_data", "=", "rgb2lab", "(", "image_data", "/", "255", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "luminous_image_data", "=", "lab_image_data", "[", "0", "]", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "\n", "try", ":", "\n", "            ", "th", "=", "threshold_otsu", "(", "luminous_image_data", ")", "\n", "", "except", ":", "\n", "            ", "import", "traceback", "\n", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "th", "=", "0", "\n", "\n", "", "linedrawing", "=", "(", "luminous_image_data", ">", "th", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "linedrawing", "=", "numpy", ".", "expand_dims", "(", "linedrawing", ",", "axis", "=", "0", ")", "\n", "\n", "return", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__init__": [[109, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_point", ",", "max_size", ")", ":", "\n", "# type: (int, int) -> None", "\n", "        ", "self", ".", "max_point", "=", "max_point", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.__call__": [[114, 154], ["numpy.pad", "numpy.random.randint", "numpy.asarray", "numpy.concatenate", "numpy.asarray", "comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range", "comicolorization.utility.color.normalize", "numpy.random.randint", "numpy.random.permutation", "numpy.linspace", "numpy.linspace", "comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range", "numpy.array", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.utility.color.normalize", "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range"], ["", "def", "__call__", "(", "self", ",", "data", ",", "test", ")", ":", "\n", "        ", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "=", "data", "\n", "color_linedrawing", "=", "numpy", ".", "pad", "(", "linedrawing", ",", "(", "(", "0", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "width", ",", "height", "=", "linedrawing", ".", "shape", "[", "1", ":", "]", "\n", "\n", "if", "not", "test", ":", "\n", "            ", "num_point", "=", "numpy", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "max_point", ")", "\n", "size_point", "=", "numpy", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "max_size", ")", "+", "1", "\n", "\n", "top_points", "=", "numpy", ".", "asarray", "(", "[", "\n", "[", "x", ",", "y", "]", "\n", "for", "x", "in", "range", "(", "width", "-", "(", "size_point", "-", "1", ")", ")", "\n", "for", "y", "in", "range", "(", "height", "-", "(", "size_point", "-", "1", ")", ")", "\n", "]", ")", "\n", "top_points", "=", "numpy", ".", "random", ".", "permutation", "(", "top_points", ")", "[", ":", "num_point", "]", "\n", "\n", "expanded_points_list", "=", "[", "\n", "top_points", "+", "numpy", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "for", "x", "in", "range", "(", "size_point", ")", "\n", "for", "y", "in", "range", "(", "size_point", ")", "\n", "]", "\n", "points", "=", "numpy", ".", "concatenate", "(", "expanded_points_list", ")", "\n", "", "else", ":", "\n", "            ", "nx", "=", "ny", "=", "3", "\n", "xs", "=", "numpy", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "nx", "+", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", "[", "1", ":", "-", "1", "]", "\n", "ys", "=", "numpy", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "ny", "+", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", "[", "1", ":", "-", "1", "]", "\n", "points", "=", "numpy", ".", "asarray", "(", "[", "[", "x", ",", "y", "]", "for", "x", "in", "xs", "for", "y", "in", "ys", "]", ")", "\n", "\n", "", "for", "x", ",", "y", "in", "points", ":", "\n", "            ", "linedrawing_luminance", "=", "self", ".", "get_input_luminance_range", "(", ")", "\n", "lab_luminance", "=", "self", ".", "get_output_range", "(", ")", "[", "0", "]", "\n", "color_linedrawing", "[", "0", ",", "x", ",", "y", "]", "=", "comicolorization", ".", "utility", ".", "color", ".", "normalize", "(", "\n", "lab_image_data", "[", "0", ",", "x", ",", "y", "]", ",", "\n", "in_min", "=", "lab_luminance", "[", "0", "]", ",", "in_max", "=", "lab_luminance", "[", "1", "]", ",", "\n", "out_min", "=", "linedrawing_luminance", "[", "0", "]", ",", "out_max", "=", "linedrawing_luminance", "[", "1", "]", ",", "\n", ")", "\n", "color_linedrawing", "[", "1", ":", ",", "x", ",", "y", "]", "=", "lab_image_data", "[", "1", ":", ",", "x", ",", "y", "]", "\n", "\n", "", "return", "lab_image_data", ",", "color_linedrawing", ",", "rgb_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_input_luminance_range": [[155, 157], ["None"], "methods", ["None"], ["", "def", "get_input_luminance_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.LabSeveralPixelDrawingImageProcess.get_output_range": [[158, 162], ["tuple", "range"], "methods", ["None"], ["", "def", "get_output_range", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "(", "comicolorization", ".", "utility", ".", "color", ".", "lab_min_max", "[", "0", "]", "[", "i", "]", ",", "comicolorization", ".", "utility", ".", "color", ".", "lab_min_max", "[", "1", "]", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.InputAdapterProcess.__call__": [[166, 171], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ",", "test", ")", ":", "\n", "        ", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "=", "data", "\n", "return", "{", "\n", "'image_input'", ":", "linedrawing", ",", "\n", "'image_rgb'", ":", "rgb_image_data", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DwangoMediaVillage_Comicolorization.colorization_task.comicolorization_task.ConcatAdapterProcess.__call__": [[175, 178], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ",", "test", ")", ":", "\n", "        ", "lab_image_data", ",", "linedrawing", ",", "rgb_image_data", "=", "data", "\n", "return", "linedrawing", "\n", "", "", ""]]}