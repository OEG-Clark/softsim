{"home.repos.pwc.inspect_result.itanhe_deepbbs.None.main._init_": [[26, 36], ["shutil.copyfile", "shutil.copyfile", "shutil.copyfile", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "_init_", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "shutil", ".", "copyfile", "(", "'main.py'", ",", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints'", ",", "args", ".", "exp_name", ",", "'main.py.backup'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "'model.py'", ",", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints'", ",", "args", ".", "exp_name", ",", "'model.py.backup'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "'data.py'", ",", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", "+", "'checkpoints'", ",", "args", ".", "exp_name", ",", "'data.py.backup'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.test_one_epoch": [[38, 126], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "model.SVDHead_no_network", "src.cuda.size", "target.cuda.clone", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "range", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "range", "range", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "range", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "torch.matmul.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "loss.item", "net", "numpy.mean", "util.transform_point_cloud().detach", "R.append", "T.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "numpy.mean", "util.transform_point_cloud().detach", "R.append", "T.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "util.cdist_torch().min", "torch.mse_loss", "torch.mse_loss", "[].mean", "numpy.abs", "torch.matmul.detach", "translation_ab_pred.detach", "len", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "len", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "net", "model.SVDHead_no_network.", "numpy.abs", "torch.matmul.detach", "translation_ab_pred.detach", "len", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "len", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "torch.matmul.detach().cpu", "translation_ab_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "util.npmat2euler", "util.transform_point_cloud", "util.npmat2euler", "util.transform_point_cloud", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "util.cdist_torch", "torch.matmul.transpose", "torch.matmul.detach().cpu", "transform_point_cloud().detach.detach", "torch.matmul.detach", "translation_ab_pred.detach", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.detach().cpu", "transform_point_cloud().detach.detach", "torch.matmul.detach", "translation_ab_pred.detach", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "torch.matmul.detach", "translation_ab_pred.detach", "util.transform_point_cloud", "T[].unsqueeze", "T[].unsqueeze", "ind_mask.view", "torch.matmul.detach", "torch.matmul.detach", "util.transform_point_cloud"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud"], ["", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ",", "epoch", "=", "0", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "eulers_ab", "=", "[", "]", "\n", "\n", "if", "args", ".", "DeepBBS_pp", ":", "\n", "            ", "spatial_step", "=", "SVDHead_no_network", "(", ")", "\n", "\n", "", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "euler_ab", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "            ", "if", "not", "args", ".", "no_cuda", ":", "\n", "                ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "target_copy", "=", "target", ".", "clone", "(", ")", "\n", "\n", "if", "not", "args", ".", "DeepBBS_pp", ":", "\n", "                ", "not_converged", "=", "True", ";", "iter_num", "=", "1", ";", "transformed_src", "=", "src", ";", "R", "=", "[", "]", ";", "T", "=", "[", "]", "\n", "while", "not_converged", ":", "\n", "                    ", "rotation_ab_pred", ",", "translation_ab_pred", ",", "src_corr", "=", "net", "(", "transformed_src", ",", "target_copy", ",", "iter_num", ")", "\n", "diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "(", "npmat2euler", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", ")", ")", "\n", "if", "diff", "<", "args", ".", "iterative_convergence", "[", "'deep_min_diff'", "]", "or", "iter_num", ">=", "args", ".", "iterative_convergence", "[", "'deep_max_iter'", "]", ":", "\n", "                        ", "not_converged", "=", "False", "\n", "", "transformed_src", "=", "transform_point_cloud", "(", "transformed_src", ".", "detach", "(", ")", ",", "rotation_ab_pred", ".", "detach", "(", ")", ",", "translation_ab_pred", ".", "detach", "(", ")", ")", ".", "detach", "(", ")", "\n", "R", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ")", ";", "T", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ")", "\n", "iter_num", "+=", "1", "\n", "", "rotation_ab_pred", "=", "R", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "R", ")", "-", "1", ")", ":", "\n", "                    ", "rotation_ab_pred", "=", "torch", ".", "matmul", "(", "R", "[", "i", "+", "1", "]", ",", "rotation_ab_pred", ")", "\n", "", "translation_ab_pred", "=", "T", "[", "-", "1", "]", ";", "temp_R", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "T", ")", "-", "1", ")", ":", "\n", "                    ", "temp_R", "=", "torch", ".", "matmul", "(", "temp_R", ",", "R", "[", "-", "1", "-", "i", "]", ")", "\n", "translation_ab_pred", "=", "translation_ab_pred", "+", "torch", ".", "matmul", "(", "temp_R", ",", "T", "[", "-", "i", "-", "2", "]", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "not_converged_spatial", "=", "True", ";", "not_converged_deep", "=", "True", ";", "iter_num", "=", "1", ";", "transformed_src", "=", "src", ";", "R", "=", "[", "]", ";", "T", "=", "[", "]", "\n", "while", "not_converged_spatial", ":", "\n", "                    ", "if", "not_converged_deep", ":", "\n", "                        ", "rotation_ab_pred", ",", "translation_ab_pred", ",", "src_corr", "=", "net", "(", "transformed_src", ",", "target_copy", ",", "iter_num", ")", "\n", "", "else", ":", "\n", "                        ", "rotation_ab_pred", ",", "translation_ab_pred", ",", "src_corr", "=", "spatial_step", "(", "transformed_src", ",", "target_copy", ",", "iter", "=", "1", ")", "\n", "", "diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "(", "npmat2euler", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", ")", ")", "\n", "if", "diff", "<", "args", ".", "iterative_convergence", "[", "'deep_min_diff'", "]", "or", "iter_num", ">=", "args", ".", "iterative_convergence", "[", "'deep_max_iter'", "]", ":", "\n", "                        ", "not_converged_deep", "=", "False", "\n", "", "if", "(", "iter_num", ">", "args", ".", "iterative_convergence", "[", "'spatial_min_iter'", "]", "and", "diff", "<", "args", ".", "iterative_convergence", "[", "'spatial_min_diff'", "]", ")", "or", "iter_num", ">", "args", ".", "iterative_convergence", "[", "'spatial_max_iter'", "]", ":", "\n", "                        ", "not_converged_spatial", "=", "False", "\n", "", "transformed_src", "=", "transform_point_cloud", "(", "transformed_src", ".", "detach", "(", ")", ",", "rotation_ab_pred", ".", "detach", "(", ")", ",", "translation_ab_pred", ".", "detach", "(", ")", ")", ".", "detach", "(", ")", "\n", "R", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ")", ";", "T", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ")", "\n", "iter_num", "+=", "1", "\n", "", "rotation_ab_pred", "=", "R", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "R", ")", "-", "1", ")", ":", "\n", "                    ", "rotation_ab_pred", "=", "torch", ".", "matmul", "(", "R", "[", "i", "+", "1", "]", ",", "rotation_ab_pred", ")", "\n", "", "translation_ab_pred", "=", "T", "[", "-", "1", "]", ";", "temp_R", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "T", ")", "-", "1", ")", ":", "\n", "                    ", "temp_R", "=", "torch", ".", "matmul", "(", "temp_R", ",", "R", "[", "-", "1", "-", "i", "]", ")", "\n", "translation_ab_pred", "=", "translation_ab_pred", "+", "torch", ".", "matmul", "(", "temp_R", ",", "T", "[", "-", "i", "-", "2", "]", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "## save rotation and translation", "\n", "", "", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "src", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "ind_mask", "=", "(", "cdist_torch", "(", "transform_point_cloud", "(", "src", ",", "rotation_ab", ",", "translation_ab", ")", ",", "target", ",", "points_dim", "=", "3", ")", ".", "min", "(", "dim", "=", "2", ")", ".", "values", "<", "0.05", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "+", "0.95", "**", "epoch", "*", "(", "(", "src_corr", "-", "transform_point_cloud", "(", "src", ",", "rotation_ab", ",", "translation_ab", ")", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "[", "ind_mask", ".", "view", "(", "-", "1", ")", "]", ".", "mean", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "eulers_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.train_one_epoch": [[128, 177], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "src.cuda.size", "opt.zero_grad", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "loss.backward", "opt.step", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "loss.item", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "util.cdist_torch().min", "torch.mse_loss", "torch.mse_loss", "[].mean", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "util.cdist_torch", "rotation_ab_pred.transpose", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "util.transform_point_cloud", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ind_mask.view", "util.transform_point_cloud"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.train", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ",", "epoch", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "eulers_ab", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "euler_ab", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "src_corr", "=", "net", "(", "src", ",", "target", ",", "1", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "ind_mask", "=", "(", "cdist_torch", "(", "transform_point_cloud", "(", "src", ",", "rotation_ab", ",", "translation_ab", ")", ",", "target", ",", "points_dim", "=", "3", ")", ".", "min", "(", "dim", "=", "2", ")", ".", "values", "<", "0.05", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "+", "0.95", "**", "epoch", "*", "(", "(", "src_corr", "-", "transform_point_cloud", "(", "src", ",", "rotation_ab", ",", "translation_ab", ")", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "[", "ind_mask", ".", "view", "(", "-", "1", ")", "]", ".", "mean", "(", ")", "\n", "\n", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "eulers_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.test": [[179, 197], ["main.test_one_epoch", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "print", "print", "numpy.abs", "numpy.abs", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.test_one_epoch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler"], ["", "def", "test", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "test_loss", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_eulers_ab", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "test_r_ab_r2_score", "=", "r2_score", "(", "np", ".", "degrees", "(", "test_eulers_ab", ")", ",", "test_rotations_ab_pred_euler", ")", "\n", "test_t_ab_r2_score", "=", "r2_score", "(", "test_translations_ab", ",", "test_translations_ab_pred", ")", "\n", "\n", "print", "(", "'==FINAL TEST=='", ")", "\n", "print", "(", "'Loss: %f, rot_MSE: %f, rot_RMSE: %f, rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, rot_R2: %f, trans_R2: %f'", "\n", "%", "(", "test_loss", ",", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "\n", "test_t_mae_ab", ",", "test_r_ab_r2_score", ",", "test_t_ab_r2_score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.train": [[198, 249], ["torch.Adam", "torch.optim.lr_scheduler.MultiStepLR", "range", "net.parameters", "main.train_one_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "main.test_one_epoch", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "print", "print", "print", "print", "gc.collect", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.train_one_epoch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.test_one_epoch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler"], ["", "def", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "90", ",", "130", ",", "150", "]", ",", "gamma", "=", "0.1", ")", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "train_loss", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_eulers_ab", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ",", "epoch", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "test_loss", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_eulers_ab", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ",", "epoch", ")", "\n", "\n", "train_rotations_ab_pred_euler", "=", "npmat2euler", "(", "train_rotations_ab_pred", ")", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "if", "best_test_loss", ">=", "test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "checkpoint_dir", "+", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "args", ".", "checkpoint_dir", "+", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "print", "(", "'==TRAIN=='", ")", "\n", "print", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_r_mse_ab", ",", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ")", ")", "\n", "\n", "print", "(", "'==TEST=='", ")", "\n", "print", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "checkpoint_dir", "+", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "args", ".", "checkpoint_dir", "+", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.main": [[251, 360], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "main._init_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.DCP", "data.ModelNet40", "data.ModelNet40", "nn.DataParallel.cuda", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "print", "main.test", "main.train", "os.path.exists", "print", "nn.DataParallel.load_state_dict", "nn.DataParallel.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.main._init_", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.test", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.main.train"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "\n", "######################## Network Parameters ########################", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dimension of embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_blocks'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of blocks of encoder&decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_heads'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of heads in multiheadedattention'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dims'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of dimensions of fc in transformer'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dropout ratio in transformer'", ")", "\n", "\n", "######################## Model Parameters ########################", "\n", "parser", ".", "add_argument", "(", "'--alpha_factor'", ",", "type", "=", "float", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "1e-12", ")", "\n", "parser", ".", "add_argument", "(", "'--DeepBBS_pp'", ",", "dest", "=", "'DeepBBS_pp'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--DeepBBS'", ",", "dest", "=", "'DeepBBS_pp'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "set_defaults", "(", "DeepBBS_pp", "=", "True", ")", "\n", "\n", "######################## Training Parameters ########################", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of episode to train '", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001, 0.1 if using sgd)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'enables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "######################## Dataset Parameters ########################", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to add gaussian noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to test on unseen category'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of points to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "type", "=", "float", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Divided factor for rotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--different_pc'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--n_subsampled_points'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of subsampled points to use'", ")", "\n", "\n", "######################## Testing Parameters ########################", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Pretrained model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluate the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--deep_min_diff'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--deep_max_iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_min_diff'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_min_iter'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_max_iter'", ",", "type", "=", "int", ",", "default", "=", "45", ",", "metavar", "=", "'N'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "iterative_convergence", "=", "{", "'deep_min_diff'", ":", "args", ".", "deep_min_diff", ",", "'deep_max_iter'", ":", "args", ".", "deep_max_iter", ",", "\n", "'spatial_min_diff'", ":", "args", ".", "spatial_min_diff", ",", "'spatial_min_iter'", ":", "args", ".", "spatial_min_iter", ",", "\n", "'spatial_max_iter'", ":", "args", ".", "spatial_max_iter", "}", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "_init_", "(", "args", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "num_subsampled_points", "=", "args", ".", "n_subsampled_points", ",", "partition", "=", "'train'", ",", "\n", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "\n", "random_point_order", "=", "True", ",", "different_pc", "=", "args", ".", "different_pc", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "num_subsampled_points", "=", "args", ".", "n_subsampled_points", ",", "partition", "=", "'test'", ",", "\n", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "\n", "random_point_order", "=", "True", ",", "different_pc", "=", "args", ".", "different_pc", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "net", "=", "DCP", "(", "args", ")", "\n", "if", "not", "args", ".", "no_cuda", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "model_path", "=", "args", ".", "model_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "\"can't find pretrained model\"", ")", "\n", "raise", "FileNotFoundError", "\n", "", "if", "args", ".", "no_cuda", ":", "\n", "            ", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "print", "(", "\"Using\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs.\"", ")", "\n", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "test", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "", "else", ":", "\n", "        ", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.ModelNet40.__init__": [[79, 106], ["data.load_data", "data.ModelNet40.label.squeeze"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "num_subsampled_points", "=", "768", ",", "partition", "=", "'train'", ",", "gaussian_noise", "=", "False", ",", "unseen", "=", "False", ",", "factor", "=", "4", ",", "src_unbalance", "=", "False", ",", "tgt_unbalance", "=", "False", ",", "random_point_order", "=", "True", ",", "different_pc", "=", "False", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "num_subsampled_points", "=", "num_subsampled_points", "\n", "if", "different_pc", ":", "\n", "            ", "self", ".", "num_points", "*=", "2", "\n", "", "self", ".", "partition", "=", "partition", "\n", "self", ".", "gaussian_noise", "=", "gaussian_noise", "\n", "self", ".", "unseen", "=", "unseen", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "if", "num_points", "!=", "num_subsampled_points", ":", "\n", "            ", "self", ".", "subsampled", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "subsampled", "=", "False", "\n", "", "self", ".", "src_unbalance", "=", "src_unbalance", "\n", "self", ".", "tgt_unbalance", "=", "tgt_unbalance", "\n", "self", ".", "random_point_order", "=", "random_point_order", "\n", "self", ".", "different_pc", "=", "different_pc", "\n", "if", "self", ".", "unseen", ":", "\n", "######## simulate testing on first 20 categories while training on last 20 categories", "\n", "            ", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", ">=", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", ">=", "20", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "<", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "<", "20", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.ModelNet40.__getitem__": [[107, 163], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.array.dot().dot", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "numpy.asarray", "numpy.random.seed", "numpy.expand_dims", "numpy.random.permutation", "data.jitter_pointcloud", "data.jitter_pointcloud", "data.farthest_subsample_points", "jitter_pointcloud.astype", "jitter_pointcloud.astype", "np.array.dot().dot.astype", "numpy.array.astype", "numpy.asarray.astype", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array.dot", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "scipy.spatial.transform.Rotation.from_euler.apply", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "round", "round"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.jitter_pointcloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.jitter_pointcloud", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.farthest_subsample_points"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "pointcloud", "=", "self", ".", "data", "[", "item", "]", "[", ":", "self", ".", "num_points", "]", "\n", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "anglex", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "angley", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "anglez", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_ab", "=", "Rx", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Rz", ")", "\n", "translation_ab", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "]", ")", "\n", "\n", "pointcloud1", "=", "pointcloud", ".", "T", "\n", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud1", ".", "T", ")", ".", "T", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "1", ")", "\n", "\n", "euler_ab", "=", "np", ".", "asarray", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "\n", "if", "self", ".", "different_pc", ":", "\n", "            ", "ind", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_points", ")", "\n", "pointcloud1", "=", "pointcloud1", "[", ":", ",", "ind", "[", ":", "round", "(", "self", ".", "num_points", "/", "2", ")", "]", "]", "\n", "pointcloud2", "=", "pointcloud2", "[", ":", ",", "ind", "[", "round", "(", "self", ".", "num_points", "/", "2", ")", ":", "]", "]", "\n", "", "if", "self", ".", "random_point_order", ":", "\n", "            ", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud1", ".", "T", ")", ".", "T", "\n", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ".", "T", ")", ".", "T", "\n", "", "if", "self", ".", "gaussian_noise", ":", "\n", "            ", "pointcloud1", "=", "jitter_pointcloud", "(", "pointcloud1", ")", "\n", "pointcloud2", "=", "jitter_pointcloud", "(", "pointcloud2", ")", "\n", "", "if", "self", ".", "src_unbalance", ":", "\n", "            ", "pointcloud1", "=", "pointcloud1", "[", ":", ",", ":", "512", "]", "\n", "", "if", "self", ".", "tgt_unbalance", ":", "\n", "            ", "pointcloud2", "=", "pointcloud2", "[", ":", ",", ":", "512", "]", "\n", "", "if", "self", ".", "subsampled", ":", "\n", "            ", "pointcloud1", ",", "pointcloud2", "=", "farthest_subsample_points", "(", "pointcloud1", ",", "pointcloud2", ",", "\n", "num_subsampled_points", "=", "self", ".", "num_subsampled_points", ")", "\n", "", "if", "self", ".", "random_point_order", ":", "\n", "            ", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud1", ".", "T", ")", ".", "T", "\n", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ".", "T", ")", ".", "T", "\n", "", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.ModelNet40.__len__": [[164, 166], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.download": [[17, 28], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["def", "download", "(", ")", ":", "\n", "    ", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "DATA_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "        ", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "os", ".", "system", "(", "'wget %s --no-check-certificate; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.load_data": [[30, 46], ["data.download", "os.path.dirname", "os.path.join", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.download"], ["", "", "def", "load_data", "(", "partition", ")", ":", "\n", "    ", "download", "(", ")", "\n", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "'ply_data_%s*.h5'", "%", "partition", ")", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "h5_name", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.jitter_pointcloud": [[48, 52], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.data.farthest_subsample_points": [[53, 77], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors().reshape", "sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors().reshape", "numpy.random.randn", "numpy.linalg.norm", "numpy.random.randn", "numpy.linalg.norm", "sklearn.neighbors.NearestNeighbors", "NearestNeighbors().fit.kneighbors", "sklearn.neighbors.NearestNeighbors", "NearestNeighbors().fit.kneighbors", "numpy.random.randint", "numpy.random.randint", "scipy.spatial.distance.minkowski", "scipy.spatial.distance.minkowski"], "function", ["None"], ["", "def", "farthest_subsample_points", "(", "pointcloud1", ",", "pointcloud2", ",", "num_subsampled_points", "=", "768", ",", "random_spherical", "=", "False", ")", ":", "\n", "    ", "pointcloud1", "=", "pointcloud1", ".", "T", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "\n", "num_points", "=", "pointcloud1", ".", "shape", "[", "0", "]", "\n", "nbrs1", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num_subsampled_points", ",", "algorithm", "=", "'auto'", ",", "\n", "metric", "=", "lambda", "x", ",", "y", ":", "minkowski", "(", "x", ",", "y", ")", ")", ".", "fit", "(", "pointcloud1", ")", "\n", "\n", "if", "random_spherical", ":", "\n", "        ", "random_p1", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "3", ")", "\n", "random_p1", "/=", "np", ".", "linalg", ".", "norm", "(", "random_p1", ",", "axis", "=", "1", ")", "\n", "random_p1", "*=", "500", "\n", "", "else", ":", "\n", "        ", "random_p1", "=", "pointcloud1", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "num_points", ",", "size", "=", "(", "1", ")", ")", ",", ":", "]", "\n", "", "idx1", "=", "nbrs1", ".", "kneighbors", "(", "random_p1", ",", "return_distance", "=", "False", ")", ".", "reshape", "(", "(", "num_subsampled_points", ",", ")", ")", "\n", "nbrs2", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num_subsampled_points", ",", "algorithm", "=", "'auto'", ",", "\n", "metric", "=", "lambda", "x", ",", "y", ":", "minkowski", "(", "x", ",", "y", ")", ")", ".", "fit", "(", "pointcloud2", ")", "\n", "if", "random_spherical", ":", "\n", "        ", "random_p2", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "3", ")", "\n", "random_p2", "/=", "np", ".", "linalg", ".", "norm", "(", "random_p2", ",", "axis", "=", "1", ")", "\n", "random_p2", "*=", "500", "\n", "", "else", ":", "\n", "        ", "random_p2", "=", "pointcloud2", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "num_points", ",", "size", "=", "(", "1", ")", ")", ",", ":", "]", "\n", "", "idx2", "=", "nbrs2", ".", "kneighbors", "(", "random_p2", ",", "return_distance", "=", "False", ")", ".", "reshape", "(", "(", "num_subsampled_points", ",", ")", ")", "\n", "return", "pointcloud1", "[", "idx1", ",", ":", "]", ".", "T", ",", "pointcloud2", "[", "idx2", ",", ":", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.__init__": [[72, 79], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "src_embed", ",", "tgt_embed", ",", "generator", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "src_embed", "=", "src_embed", "\n", "self", ".", "tgt_embed", "=", "tgt_embed", "\n", "self", ".", "generator", "=", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.forward": [[80, 84], ["model.EncoderDecoder.decode", "model.EncoderDecoder.encode"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.decode", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.encode"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"Take in and process masked src and target sequences.\"", "\n", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "src", ",", "src_mask", ")", ",", "src_mask", ",", "\n", "tgt", ",", "tgt_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.encode": [[85, 87], ["model.EncoderDecoder.encoder", "model.EncoderDecoder.src_embed"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "src", ",", "src_mask", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "self", ".", "src_embed", "(", "src", ")", ",", "src_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderDecoder.decode": [[88, 90], ["model.EncoderDecoder.generator", "model.EncoderDecoder.decoder", "model.EncoderDecoder.tgt_embed"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "memory", ",", "src_mask", ",", "tgt", ",", "tgt_mask", ")", ":", "\n", "        ", "return", "self", ".", "generator", "(", "self", ".", "decoder", "(", "self", ".", "tgt_embed", "(", "tgt", ")", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Generator.__init__": [[93, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", ",", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "proj_rot", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "4", ")", "\n", "self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Generator.forward": [[107, 113], ["model.Generator.nn", "model.Generator.proj_rot", "model.Generator.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "model.Generator.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "nn", "(", "x", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "x", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "x", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "rotation", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Encoder.__init__": [[116, 120], ["torch.Module.__init__", "model.clones", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Encoder.forward": [[121, 125], ["model.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Decoder.__init__": [[130, 134], ["torch.Module.__init__", "model.clones", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Decoder.forward": [[135, 139], ["model.Decoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.LayerNorm.__init__": [[142, 147], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.LayerNorm.forward": [[148, 152], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SublayerConnection.__init__": [[155, 158], ["torch.Module.__init__", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SublayerConnection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SublayerConnection.forward": [[159, 161], ["sublayer", "model.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "return", "x", "+", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderLayer.__init__": [[164, 170], ["torch.Module.__init__", "model.clones", "model.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.EncoderLayer.forward": [[171, 174], ["model.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DecoderLayer.__init__": [[179, 186], ["torch.Module.__init__", "model.clones", "model.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "src_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "src_attn", "=", "src_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DecoderLayer.forward": [[187, 193], ["model.DecoderLayer.self_attn", "model.DecoderLayer.src_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (right) for connections.\"", "\n", "m", "=", "memory", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "tgt_mask", ")", ")", "\n", "x", "=", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "src_attn", "(", "x", ",", "m", ",", "m", ",", "src_mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "2", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.MultiHeadedAttention.__init__": [[196, 206], ["torch.Module.__init__", "model.clones", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.MultiHeadedAttention.forward": [[207, 227], ["query.size", "model.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose().contiguous", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view().transpose", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l().view", "l"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.PositionwiseFeedForward.__init__": [[232, 238], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "norm", "=", "nn", ".", "Sequential", "(", ")", "# nn.BatchNorm1d(d_ff)", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.PositionwiseFeedForward.forward": [[239, 241], ["model.PositionwiseFeedForward.w_2", "model.PositionwiseFeedForward.norm().transpose().contiguous", "model.PositionwiseFeedForward.norm().transpose", "model.PositionwiseFeedForward.norm", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose", "torch.relu().transpose", "torch.relu().transpose", "torch.relu", "torch.relu", "torch.relu", "model.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "norm", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DGCNN.__init__": [[243, 255], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "6", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "512", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DGCNN.forward": [[256, 275], ["torch.relu().view.size", "model.get_graph_feature", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu().view", "torch.relu().view", "torch.relu().view", "model.DGCNN.bn1", "torch.relu().view.max", "model.DGCNN.bn2", "torch.relu().view.max", "model.DGCNN.bn3", "torch.relu().view.max", "model.DGCNN.bn4", "torch.relu().view.max", "model.DGCNN.conv1", "model.DGCNN.conv2", "model.DGCNN.conv3", "model.DGCNN.conv4", "torch.relu", "torch.relu", "torch.relu", "model.DGCNN.bn5", "model.DGCNN.conv5"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "num_dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "get_graph_feature", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x1", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x2", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x3", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x4", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Transformer.__init__": [[279, 294], ["torch.Module.__init__", "model.MultiHeadedAttention", "model.PositionwiseFeedForward", "model.EncoderDecoder", "model.Encoder", "model.Decoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.EncoderLayer", "model.DecoderLayer", "c", "c", "c", "c", "c"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "N", "=", "args", ".", "n_blocks", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "ff_dims", "=", "args", ".", "ff_dims", "\n", "self", ".", "n_heads", "=", "args", ".", "n_heads", "\n", "c", "=", "copy", ".", "deepcopy", "\n", "attn", "=", "MultiHeadedAttention", "(", "self", ".", "n_heads", ",", "self", ".", "emb_dims", ")", "\n", "ff", "=", "PositionwiseFeedForward", "(", "self", ".", "emb_dims", ",", "self", ".", "ff_dims", ",", "self", ".", "dropout", ")", "\n", "self", ".", "model", "=", "EncoderDecoder", "(", "Encoder", "(", "EncoderLayer", "(", "self", ".", "emb_dims", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "self", ".", "dropout", ")", ",", "self", ".", "N", ")", ",", "\n", "Decoder", "(", "DecoderLayer", "(", "self", ".", "emb_dims", ",", "c", "(", "attn", ")", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "self", ".", "dropout", ")", ",", "self", ".", "N", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.Transformer.forward": [[295, 303], ["src.transpose().contiguous.transpose().contiguous.transpose().contiguous", "tgt.transpose().contiguous.transpose().contiguous.transpose().contiguous", "model.Transformer.model().transpose().contiguous", "model.Transformer.model().transpose().contiguous", "src.transpose().contiguous.transpose().contiguous.transpose", "tgt.transpose().contiguous.transpose().contiguous.transpose", "model.Transformer.model().transpose", "model.Transformer.model().transpose", "model.Transformer.model", "model.Transformer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tgt", "=", "tgt", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tgt_embedding", "=", "self", ".", "model", "(", "src", ",", "tgt", ",", "None", ",", "None", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "src_embedding", "=", "self", ".", "model", "(", "tgt", ",", "src", ",", "None", ",", "None", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "return", "src_embedding", ",", "tgt_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SVDHead.__init__": [[306, 324], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "self", ".", "alpha_factor", "=", "args", ".", "alpha_factor", "\n", "self", ".", "eps", "=", "args", ".", "eps", "\n", "self", ".", "T_net", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "emb_dims", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SVDHead.forward": [[325, 374], ["src.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "util.cdist_torch", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scores_norm.float().transpose().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "U.append", "S.append", "V.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "t.view", "util.soft_BBS_loss_torch().float().unsqueeze", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "gamma.sum", "gamma.sum", "src_corr_centered.transpose().contiguous", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "util.guess_best_alpha_torch", "range", "scores_norm.float().transpose", "model.SVDHead.T_net", "u.transpose().contiguous", "range", "util.soft_BBS_loss_torch().float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "src_corr_centered.transpose", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "u.transpose", "scores_norm.float", "u.transpose", "util.soft_BBS_loss_torch", "src_embedding.mean", "tgt_embedding.mean", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.guess_best_alpha_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.soft_BBS_loss_torch"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "iter", "=", "input", "[", "4", "]", "\n", "device", "=", "src", ".", "device", "\n", "\n", "t", "=", "self", ".", "alpha_factor", "*", "torch", ".", "tensor", "(", "[", "guess_best_alpha_torch", "(", "src_embedding", "[", "i", ",", ":", "]", ",", "dim_num", "=", "512", ",", "transpose", "=", "True", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", "device", "=", "device", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "soft_BBS_loss_torch", "(", "src_embedding", "[", "i", ",", ":", "]", ",", "tgt_embedding", "[", "i", ",", ":", "]", ",", "t", "[", "i", "]", ",", "points_dim", "=", "512", ",", "return_mat", "=", "True", ",", "transpose", "=", "True", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "scores_norm", "=", "scores", "/", "(", "scores", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores_norm", ".", "float", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "src_tgt_euc_dist", "=", "cdist_torch", "(", "src", ",", "tgt", ",", "3", ")", "\n", "T", "=", "torch", ".", "clamp", "(", "self", ".", "T_net", "(", "torch", ".", "abs", "(", "src_embedding", ".", "mean", "(", "dim", "=", "2", ")", "-", "tgt_embedding", ".", "mean", "(", "dim", "=", "2", ")", ")", ")", ",", "0.01", ",", "100", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "T", "=", "T", "/", "2", "**", "(", "iter", "-", "1", ")", "\n", "gamma", "=", "(", "scores", "*", "torch", ".", "exp", "(", "-", "src_tgt_euc_dist", "/", "T", ")", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "src_weighted_mean", "=", "(", "src", "*", "gamma", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "/", "(", "gamma", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_centered", "=", "src", "-", "src_weighted_mean", "\n", "\n", "src_corr_weighted_mean", "=", "(", "src_corr", "*", "gamma", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "/", "(", "gamma", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr_weighted_mean", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", "*", "gamma", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "+", "self", ".", "eps", "*", "torch", ".", "diag", "(", "torch", ".", "tensor", "(", "[", "1", ",", "2", ",", "3", "]", ",", "device", "=", "device", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src_weighted_mean", ")", "+", "src_corr_weighted_mean", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SVDHead_no_network.__init__": [[376, 382], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVDHead_no_network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "self", ".", "alpha_factor", "=", "4", "\n", "self", ".", "eps", "=", "1e-12", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.SVDHead_no_network.forward": [[383, 419], ["src.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "util.cdist_torch", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scores_norm.float().transpose().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "t.view", "util.soft_BBS_loss_torch().float().unsqueeze", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "gamma.sum", "gamma.sum", "src_corr_centered.transpose().contiguous", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "torch.diag().unsqueeze().repeat", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "util.guess_best_alpha_torch", "range", "scores_norm.float().transpose", "u.transpose().contiguous", "range", "util.soft_BBS_loss_torch().float", "src_corr_centered.transpose", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "torch.diag().unsqueeze", "u.transpose", "scores_norm.float", "u.transpose", "util.soft_BBS_loss_torch", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.guess_best_alpha_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.soft_BBS_loss_torch"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "iter", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "device", "=", "src", ".", "device", "\n", "t", "=", "self", ".", "alpha_factor", "*", "torch", ".", "tensor", "(", "[", "guess_best_alpha_torch", "(", "src", "[", "i", ",", ":", "]", ",", "dim_num", "=", "3", ",", "transpose", "=", "True", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", "device", "=", "device", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "soft_BBS_loss_torch", "(", "src", "[", "i", ",", ":", "]", ",", "tgt", "[", "i", ",", ":", "]", ",", "t", "[", "i", "]", ",", "points_dim", "=", "3", ",", "return_mat", "=", "True", ",", "transpose", "=", "True", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "scores_norm", "=", "scores", "/", "(", "scores", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores_norm", ".", "float", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "src_tgt_euc_dist", "=", "cdist_torch", "(", "src", ",", "tgt", ",", "3", ")", "\n", "T", "=", "1", "\n", "T", "=", "T", "/", "2", "**", "(", "iter", "-", "1", ")", "\n", "gamma", "=", "(", "scores", "*", "torch", ".", "exp", "(", "-", "src_tgt_euc_dist", "/", "T", ")", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "src_weighted_mean", "=", "(", "src", "*", "gamma", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "/", "(", "gamma", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_centered", "=", "src", "-", "src_weighted_mean", "\n", "\n", "src_corr_weighted_mean", "=", "(", "src_corr", "*", "gamma", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "gamma", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr_weighted_mean", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", "*", "gamma", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "+", "self", ".", "eps", "*", "torch", ".", "diag", "(", "\n", "torch", ".", "tensor", "(", "[", "1", ",", "2", ",", "3", "]", ",", "device", "=", "device", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "R", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "\n", "", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src_weighted_mean", ")", "+", "src_corr_weighted_mean", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__": [[421, 428], ["torch.Module.__init__", "model.DGCNN", "model.Transformer", "model.SVDHead"], "methods", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DCP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "\n", "self", ".", "emb_nn", "=", "DGCNN", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "self", ".", "pointer", "=", "Transformer", "(", "args", "=", "args", ")", "\n", "self", ".", "head", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.DCP.forward": [[429, 444], ["model.DCP.emb_nn", "model.DCP.emb_nn", "model.DCP.pointer", "model.DCP.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "iter", "=", "input", "[", "2", "]", "\n", "\n", "src_embedding_p", ",", "tgt_embedding_p", "=", "self", ".", "pointer", "(", "src_embedding", ",", "tgt_embedding", ")", "\n", "\n", "src_embedding", "=", "src_embedding", "+", "src_embedding_p", "\n", "tgt_embedding", "=", "tgt_embedding", "+", "tgt_embedding_p", "\n", "\n", "rotation_ab", ",", "translation_ab", ",", "src_corr", "=", "self", ".", "head", "(", "src_embedding", ",", "tgt_embedding", ",", "src", ",", "tgt", ",", "iter", ")", "\n", "\n", "return", "rotation_ab", ",", "translation_ab", ",", "src_corr", "", "", "", ""]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.clones": [[16, 18], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.attention": [[20, 27], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose().contiguous", "key.transpose"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "contiguous", "(", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.knn": [[28, 35], ["torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum.transpose().contiguous", "pairwise_distance.topk", "x.transpose().contiguous", "torch.sum.transpose", "x.transpose"], "function", ["None"], ["", "def", "knn", "(", "x", ",", "k", ")", ":", "\n", "    ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "x", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "-", "xx", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.get_graph_feature": [[37, 64], ["knn.size", "knn.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "torch.cat().permute.view", "x.view().repeat.view().repeat", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "model.knn", "model.knn", "torch.arange().view", "torch.arange().view", "torch.arange().view", "x.view().repeat.view", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.randperm", "torch.randperm", "torch.randperm"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.knn", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.model.knn"], ["", "def", "get_graph_feature", "(", "x", ",", "k", "=", "20", ",", "large_k", "=", "None", ")", ":", "\n", "# x = x.squeeze()", "\n", "    ", "if", "large_k", "is", "None", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "else", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "large_k", ")", "\n", "idx", "=", "idx", "[", ":", ",", ":", ",", "torch", ".", "randperm", "(", "large_k", ")", "[", ":", "k", "]", "]", "\n", "", "batch_size", ",", "num_points", ",", "_", "=", "idx", ".", "size", "(", ")", "\n", "device", "=", "x", ".", "device", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "\n", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims) #   batch_size * num_points * k + range(0, batch_size*num_points)", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.quat2mat": [[14, 27], ["quat.size", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.transform_point_cloud": [[28, 34], ["len", "util.quat2mat", "torch.matmul", "translation.unsqueeze", "rotation.size"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ",", "rotation", ",", "translation", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.npmat2euler": [[35, 41], ["range", "numpy.asarray", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["", "def", "npmat2euler", "(", "mats", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "True", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "eulers", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.square_dist_torch": [[42, 50], ["torch.matmul", "A.float", "B.float"], "function", ["None"], ["", "def", "square_dist_torch", "(", "A", ",", "B", ")", ":", "\n", "    ", "AA", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "BB", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "inner", "=", "torch", ".", "matmul", "(", "A", ".", "float", "(", ")", ",", "B", ".", "float", "(", ")", ".", "T", ")", "\n", "\n", "R", "=", "AA", "+", "(", "-", "2", ")", "*", "inner", "+", "BB", ".", "T", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.new_cdist": [[51, 59], ["x1.float.float", "x2.float.float", "x1.float.pow().sum().float", "x2.float.pow().sum().float", "res.clamp_min_().sqrt_.clamp_min_().sqrt_", "x1.float.pow().sum", "x2.float.pow().sum", "x2.pow().sum().float.transpose", "res.clamp_min_().sqrt_.clamp_min_", "torch.matmul", "x1.float.pow", "x2.float.pow", "x2.float.transpose"], "function", ["None"], ["", "def", "new_cdist", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "x1", ".", "float", "(", ")", "\n", "x2", "=", "x2", ".", "float", "(", ")", "\n", "x1_norm", "=", "x1", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "x2_norm", "=", "x2", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "res", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x1", ",", "x2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "+", "x2_norm", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "+", "x1_norm", "\n", "res", "=", "res", ".", "clamp_min_", "(", "1e-30", ")", ".", "sqrt_", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.dist_torch": [[60, 70], ["util.square_dist_torch", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.square_dist_torch"], ["", "def", "dist_torch", "(", "A", ",", "B", ")", ":", "\n", "    ", "\"\"\"\n    Measure Squared Euclidean Distance from every point in point-cloud A, to every point in point-cloud B\n    :param A: Point Cloud: Nx3 Array of real numbers, each row represents one point in x,y,z space\n    :param B: Point Cloud: Mx3 Array of real numbers\n    :return:  NxM array, where element [i,j] is the squared distance between the i'th point in A and the j'th point in B\n    \"\"\"", "\n", "s", "=", "square_dist_torch", "(", "A", ",", "B", ")", "\n", "s", "[", "s", "<", "0", "]", "=", "0", "\n", "return", "torch", ".", "sqrt", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch": [[71, 85], ["torch.transpose.double().contiguous", "torch.transpose.double().contiguous", "util.new_cdist", "torch.transpose", "torch.transpose", "torch.transpose.double", "torch.transpose.double"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.new_cdist"], ["", "def", "cdist_torch", "(", "A", ",", "B", ",", "points_dim", "=", "None", ")", ":", "\n", "    ", "num_features", "=", "512", "\n", "if", "points_dim", "is", "not", "None", ":", "\n", "        ", "num_features", "=", "points_dim", "\n", "", "if", "(", "A", ".", "shape", "[", "-", "1", "]", "!=", "num_features", ")", ":", "\n", "        ", "A", "=", "torch", ".", "transpose", "(", "A", ",", "dim0", "=", "-", "2", ",", "dim1", "=", "-", "1", ")", "\n", "", "if", "(", "B", ".", "shape", "[", "-", "1", "]", "!=", "num_features", ")", ":", "\n", "        ", "B", "=", "torch", ".", "transpose", "(", "B", ",", "dim0", "=", "-", "2", ",", "dim1", "=", "-", "1", ")", "\n", "", "assert", "A", ".", "shape", "[", "-", "1", "]", "==", "num_features", "\n", "assert", "B", ".", "shape", "[", "-", "1", "]", "==", "num_features", "\n", "A", "=", "A", ".", "double", "(", ")", ".", "contiguous", "(", ")", "\n", "B", "=", "B", ".", "double", "(", ")", ".", "contiguous", "(", ")", "\n", "C", "=", "new_cdist", "(", "A", ",", "B", ")", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.min_without_self_per_row_torch": [[86, 99], ["D.clone", "range", "D.clone.min"], "function", ["None"], ["", "def", "min_without_self_per_row_torch", "(", "D", ")", ":", "\n", "    ", "\"\"\"\n    Accepts a distance matrix between all points in a set. For each point,\n    returns its distance from the closest point that is not itself.\n\n    :param D: Distance matrix, where element [i,j] is the distance between i'th point in the set and the j'th point in the set. Should be symmetric with zeros on the diagonal.\n    :return: vector of distances to nearest neighbor for each point.\n    \"\"\"", "\n", "E", "=", "D", ".", "clone", "(", ")", "\n", "diag_ind", "=", "range", "(", "E", ".", "shape", "[", "0", "]", ")", "\n", "E", "[", "diag_ind", ",", "diag_ind", "]", "=", "np", ".", "inf", "\n", "m", "=", "E", ".", "min", "(", "dim", "=", "1", ")", ".", "values", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.representative_neighbor_dist_torch": [[100, 113], ["util..", "util..median", "m.median.cpu().detach().numpy", "m.median.cpu().detach", "m.median.cpu"], "function", ["None"], ["", "def", "representative_neighbor_dist_torch", "(", "D", ")", ":", "\n", "    ", "\"\"\"\n    Accepts a distance matrix between all points in a set,\n    returns a number that is representative of the distances in this set.\n\n    :param D: Distance matrix, where element [i,j] is the distance between i'th point in the set and the j'th point in the set. Should be symmetric with zeros on the diagonal.\n    :return: The representative distance in this set\n    \"\"\"", "\n", "\n", "assert", "D", ".", "shape", "[", "0", "]", "==", "D", ".", "shape", "[", "1", "]", ",", "\"Input to representative_neighbor_dist should be a matrix of distances from a point cloud to itself\"", "\n", "m", "=", "min_without_self_per_row_torch", "(", "D", ")", "\n", "neighbor_dist", "=", "m", ".", "median", "(", ")", "\n", "return", "neighbor_dist", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.guess_best_alpha_torch": [[114, 133], ["util.representative_neighbor_dist_torch", "util.dist_torch"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.representative_neighbor_dist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.dist_torch"], ["", "def", "guess_best_alpha_torch", "(", "A", ",", "dim_num", "=", "3", ",", "transpose", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        A good guess for the temperature of the soft argmin (alpha) can\n        be calculated as a linear function of the representative (e.g. median)\n        distance of points to their nearest neighbor in a point cloud.\n\n        :param A: Point Cloud of size Nx3\n        :return: Estimated value of alpha\n        \"\"\"", "\n", "\n", "COEFF", "=", "0.1", "\n", "EPS", "=", "1e-8", "\n", "if", "transpose", "is", "None", ":", "\n", "        ", "assert", "A", ".", "shape", "[", "0", "]", "!=", "A", ".", "shape", "[", "1", "]", ",", "'Number of points and number of dimensions can'", "'t be same'", "\n", "", "if", "(", "A", ".", "shape", "[", "1", "]", "!=", "dim_num", "and", "transpose", "is", "None", ")", "or", "transpose", ":", "\n", "        ", "A", "=", "A", ".", "T", "\n", "", "assert", "A", ".", "shape", "[", "1", "]", "==", "dim_num", "\n", "rep", "=", "representative_neighbor_dist_torch", "(", "dist_torch", "(", "A", ",", "A", ")", ")", "\n", "return", "COEFF", "*", "rep", "+", "EPS", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.soft_BBS_loss_torch": [[134, 159], ["numpy.mean", "util.cdist_torch", "torch.squeeze", "torch.squeeze", "torch.transpose", "torch.mul", "torch.div().view", "torch.transpose", "torch.transpose", "util.softargmin_rows_torch", "util.softargmin_rows_torch", "torch.transpose", "torch.div", "torch.sum"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.cdist_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.softargmin_rows_torch", "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.softargmin_rows_torch"], ["", "def", "soft_BBS_loss_torch", "(", "T", ",", "S", ",", "t", ",", "points_dim", "=", "None", ",", "return_mat", "=", "False", ",", "transpose", "=", "None", ")", ":", "\n", "    ", "num_features", "=", "512", "\n", "if", "transpose", "is", "None", ":", "\n", "        ", "assert", "S", ".", "shape", "[", "0", "]", "!=", "S", ".", "shape", "[", "1", "]", "and", "T", ".", "shape", "[", "0", "]", "!=", "T", ".", "shape", "[", "1", "]", ",", "'Number of points and number of dimensions can'", "'t be same'", "\n", "", "if", "points_dim", "is", "not", "None", ":", "\n", "        ", "num_features", "=", "points_dim", "\n", "", "if", "(", "T", ".", "shape", "[", "1", "]", "is", "not", "num_features", "and", "transpose", "is", "None", ")", "or", "transpose", ":", "\n", "        ", "T", "=", "torch", ".", "transpose", "(", "T", ",", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "", "if", "(", "S", ".", "shape", "[", "1", "]", "is", "not", "num_features", "and", "transpose", "is", "None", ")", "or", "transpose", ":", "\n", "        ", "S", "=", "torch", ".", "transpose", "(", "S", ",", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "", "assert", "S", ".", "shape", "[", "1", "]", "==", "num_features", "and", "T", ".", "shape", "[", "1", "]", "==", "num_features", ",", "'Points dimension dismatch'", "\n", "\n", "T_num_samples", "=", "T", ".", "shape", "[", "0", "]", "\n", "S_num_samples", "=", "S", ".", "shape", "[", "0", "]", "\n", "mean_num_samples", "=", "np", ".", "mean", "(", "[", "T_num_samples", ",", "S_num_samples", "]", ")", "\n", "D", "=", "cdist_torch", "(", "T", ",", "S", ",", "points_dim", ")", "\n", "R", "=", "torch", ".", "squeeze", "(", "softargmin_rows_torch", "(", "D", ",", "t", ")", ")", "\n", "C", "=", "torch", ".", "squeeze", "(", "softargmin_rows_torch", "(", "torch", ".", "transpose", "(", "D", ",", "dim0", "=", "0", ",", "dim1", "=", "1", ")", ",", "t", ")", ")", "\n", "C", "=", "torch", ".", "transpose", "(", "C", ",", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "B", "=", "torch", ".", "mul", "(", "R", ",", "C", ")", "\n", "loss", "=", "torch", ".", "div", "(", "-", "torch", ".", "sum", "(", "B", ")", ",", "mean_num_samples", ")", ".", "view", "(", "1", ")", "\n", "if", "return_mat", ":", "\n", "        ", "return", "B", "\n", "", "else", ":", "\n", "        ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.my_softmax": [[160, 164], ["torch.exp", "torch.sum", "x.max"], "function", ["None"], ["", "", "def", "my_softmax", "(", "x", ",", "eps", "=", "1e-12", ",", "dim", "=", "0", ")", ":", "\n", "    ", "x_exp", "=", "torch", ".", "exp", "(", "x", "-", "x", ".", "max", "(", ")", ")", "\n", "x_exp_sum", "=", "torch", ".", "sum", "(", "x_exp", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "return", "x_exp", "/", "(", "x_exp_sum", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.softargmin_rows_torch": [[165, 170], ["t.double.double", "X.double.double", "util.my_softmax"], "function", ["home.repos.pwc.inspect_result.itanhe_deepbbs.None.util.my_softmax"], ["", "def", "softargmin_rows_torch", "(", "X", ",", "t", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "t", "=", "t", ".", "double", "(", ")", "\n", "X", "=", "X", ".", "double", "(", ")", "\n", "weights", "=", "my_softmax", "(", "-", "X", "/", "t", ",", "eps", "=", "eps", ",", "dim", "=", "1", ")", "\n", "return", "weights", "\n", "", ""]]}